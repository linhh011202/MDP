
Tesila.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011e40  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000010a0  08011fd0  08011fd0  00012fd0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013070  08013070  000151e8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08013070  08013070  00014070  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013078  08013078  000151e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013078  08013078  00014078  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801307c  0801307c  0001407c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  08013080  00015000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000151e8  2**0
                  CONTENTS
 10 .bss          00005430  200001e8  200001e8  000151e8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20005618  20005618  000151e8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000151e8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00022709  00000000  00000000  00015218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004b0f  00000000  00000000  00037921  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001cd0  00000000  00000000  0003c430  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000167c  00000000  00000000  0003e100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000283c1  00000000  00000000  0003f77c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000226cd  00000000  00000000  00067b3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000eb30e  00000000  00000000  0008a20a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00175518  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008d54  00000000  00000000  0017555c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000054  00000000  00000000  0017e2b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08011fb8 	.word	0x08011fb8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	08011fb8 	.word	0x08011fb8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b988 	b.w	8000f70 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	468e      	mov	lr, r1
 8000c80:	4604      	mov	r4, r0
 8000c82:	4688      	mov	r8, r1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d14a      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4617      	mov	r7, r2
 8000c8c:	d962      	bls.n	8000d54 <__udivmoddi4+0xdc>
 8000c8e:	fab2 f682 	clz	r6, r2
 8000c92:	b14e      	cbz	r6, 8000ca8 <__udivmoddi4+0x30>
 8000c94:	f1c6 0320 	rsb	r3, r6, #32
 8000c98:	fa01 f806 	lsl.w	r8, r1, r6
 8000c9c:	fa20 f303 	lsr.w	r3, r0, r3
 8000ca0:	40b7      	lsls	r7, r6
 8000ca2:	ea43 0808 	orr.w	r8, r3, r8
 8000ca6:	40b4      	lsls	r4, r6
 8000ca8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cac:	fa1f fc87 	uxth.w	ip, r7
 8000cb0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000cb4:	0c23      	lsrs	r3, r4, #16
 8000cb6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cbe:	fb01 f20c 	mul.w	r2, r1, ip
 8000cc2:	429a      	cmp	r2, r3
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0x62>
 8000cc6:	18fb      	adds	r3, r7, r3
 8000cc8:	f101 30ff 	add.w	r0, r1, #4294967295
 8000ccc:	f080 80ea 	bcs.w	8000ea4 <__udivmoddi4+0x22c>
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	f240 80e7 	bls.w	8000ea4 <__udivmoddi4+0x22c>
 8000cd6:	3902      	subs	r1, #2
 8000cd8:	443b      	add	r3, r7
 8000cda:	1a9a      	subs	r2, r3, r2
 8000cdc:	b2a3      	uxth	r3, r4
 8000cde:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ce2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ce6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cea:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cee:	459c      	cmp	ip, r3
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0x8e>
 8000cf2:	18fb      	adds	r3, r7, r3
 8000cf4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cf8:	f080 80d6 	bcs.w	8000ea8 <__udivmoddi4+0x230>
 8000cfc:	459c      	cmp	ip, r3
 8000cfe:	f240 80d3 	bls.w	8000ea8 <__udivmoddi4+0x230>
 8000d02:	443b      	add	r3, r7
 8000d04:	3802      	subs	r0, #2
 8000d06:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d0a:	eba3 030c 	sub.w	r3, r3, ip
 8000d0e:	2100      	movs	r1, #0
 8000d10:	b11d      	cbz	r5, 8000d1a <__udivmoddi4+0xa2>
 8000d12:	40f3      	lsrs	r3, r6
 8000d14:	2200      	movs	r2, #0
 8000d16:	e9c5 3200 	strd	r3, r2, [r5]
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d905      	bls.n	8000d2e <__udivmoddi4+0xb6>
 8000d22:	b10d      	cbz	r5, 8000d28 <__udivmoddi4+0xb0>
 8000d24:	e9c5 0100 	strd	r0, r1, [r5]
 8000d28:	2100      	movs	r1, #0
 8000d2a:	4608      	mov	r0, r1
 8000d2c:	e7f5      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d2e:	fab3 f183 	clz	r1, r3
 8000d32:	2900      	cmp	r1, #0
 8000d34:	d146      	bne.n	8000dc4 <__udivmoddi4+0x14c>
 8000d36:	4573      	cmp	r3, lr
 8000d38:	d302      	bcc.n	8000d40 <__udivmoddi4+0xc8>
 8000d3a:	4282      	cmp	r2, r0
 8000d3c:	f200 8105 	bhi.w	8000f4a <__udivmoddi4+0x2d2>
 8000d40:	1a84      	subs	r4, r0, r2
 8000d42:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d46:	2001      	movs	r0, #1
 8000d48:	4690      	mov	r8, r2
 8000d4a:	2d00      	cmp	r5, #0
 8000d4c:	d0e5      	beq.n	8000d1a <__udivmoddi4+0xa2>
 8000d4e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d52:	e7e2      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d54:	2a00      	cmp	r2, #0
 8000d56:	f000 8090 	beq.w	8000e7a <__udivmoddi4+0x202>
 8000d5a:	fab2 f682 	clz	r6, r2
 8000d5e:	2e00      	cmp	r6, #0
 8000d60:	f040 80a4 	bne.w	8000eac <__udivmoddi4+0x234>
 8000d64:	1a8a      	subs	r2, r1, r2
 8000d66:	0c03      	lsrs	r3, r0, #16
 8000d68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d6c:	b280      	uxth	r0, r0
 8000d6e:	b2bc      	uxth	r4, r7
 8000d70:	2101      	movs	r1, #1
 8000d72:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d76:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d7a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d7e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d82:	429a      	cmp	r2, r3
 8000d84:	d907      	bls.n	8000d96 <__udivmoddi4+0x11e>
 8000d86:	18fb      	adds	r3, r7, r3
 8000d88:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d8c:	d202      	bcs.n	8000d94 <__udivmoddi4+0x11c>
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	f200 80e0 	bhi.w	8000f54 <__udivmoddi4+0x2dc>
 8000d94:	46c4      	mov	ip, r8
 8000d96:	1a9b      	subs	r3, r3, r2
 8000d98:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d9c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000da0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000da4:	fb02 f404 	mul.w	r4, r2, r4
 8000da8:	429c      	cmp	r4, r3
 8000daa:	d907      	bls.n	8000dbc <__udivmoddi4+0x144>
 8000dac:	18fb      	adds	r3, r7, r3
 8000dae:	f102 30ff 	add.w	r0, r2, #4294967295
 8000db2:	d202      	bcs.n	8000dba <__udivmoddi4+0x142>
 8000db4:	429c      	cmp	r4, r3
 8000db6:	f200 80ca 	bhi.w	8000f4e <__udivmoddi4+0x2d6>
 8000dba:	4602      	mov	r2, r0
 8000dbc:	1b1b      	subs	r3, r3, r4
 8000dbe:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000dc2:	e7a5      	b.n	8000d10 <__udivmoddi4+0x98>
 8000dc4:	f1c1 0620 	rsb	r6, r1, #32
 8000dc8:	408b      	lsls	r3, r1
 8000dca:	fa22 f706 	lsr.w	r7, r2, r6
 8000dce:	431f      	orrs	r7, r3
 8000dd0:	fa0e f401 	lsl.w	r4, lr, r1
 8000dd4:	fa20 f306 	lsr.w	r3, r0, r6
 8000dd8:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ddc:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000de0:	4323      	orrs	r3, r4
 8000de2:	fa00 f801 	lsl.w	r8, r0, r1
 8000de6:	fa1f fc87 	uxth.w	ip, r7
 8000dea:	fbbe f0f9 	udiv	r0, lr, r9
 8000dee:	0c1c      	lsrs	r4, r3, #16
 8000df0:	fb09 ee10 	mls	lr, r9, r0, lr
 8000df4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000df8:	fb00 fe0c 	mul.w	lr, r0, ip
 8000dfc:	45a6      	cmp	lr, r4
 8000dfe:	fa02 f201 	lsl.w	r2, r2, r1
 8000e02:	d909      	bls.n	8000e18 <__udivmoddi4+0x1a0>
 8000e04:	193c      	adds	r4, r7, r4
 8000e06:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e0a:	f080 809c 	bcs.w	8000f46 <__udivmoddi4+0x2ce>
 8000e0e:	45a6      	cmp	lr, r4
 8000e10:	f240 8099 	bls.w	8000f46 <__udivmoddi4+0x2ce>
 8000e14:	3802      	subs	r0, #2
 8000e16:	443c      	add	r4, r7
 8000e18:	eba4 040e 	sub.w	r4, r4, lr
 8000e1c:	fa1f fe83 	uxth.w	lr, r3
 8000e20:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e24:	fb09 4413 	mls	r4, r9, r3, r4
 8000e28:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e2c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e30:	45a4      	cmp	ip, r4
 8000e32:	d908      	bls.n	8000e46 <__udivmoddi4+0x1ce>
 8000e34:	193c      	adds	r4, r7, r4
 8000e36:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e3a:	f080 8082 	bcs.w	8000f42 <__udivmoddi4+0x2ca>
 8000e3e:	45a4      	cmp	ip, r4
 8000e40:	d97f      	bls.n	8000f42 <__udivmoddi4+0x2ca>
 8000e42:	3b02      	subs	r3, #2
 8000e44:	443c      	add	r4, r7
 8000e46:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e4a:	eba4 040c 	sub.w	r4, r4, ip
 8000e4e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e52:	4564      	cmp	r4, ip
 8000e54:	4673      	mov	r3, lr
 8000e56:	46e1      	mov	r9, ip
 8000e58:	d362      	bcc.n	8000f20 <__udivmoddi4+0x2a8>
 8000e5a:	d05f      	beq.n	8000f1c <__udivmoddi4+0x2a4>
 8000e5c:	b15d      	cbz	r5, 8000e76 <__udivmoddi4+0x1fe>
 8000e5e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e62:	eb64 0409 	sbc.w	r4, r4, r9
 8000e66:	fa04 f606 	lsl.w	r6, r4, r6
 8000e6a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e6e:	431e      	orrs	r6, r3
 8000e70:	40cc      	lsrs	r4, r1
 8000e72:	e9c5 6400 	strd	r6, r4, [r5]
 8000e76:	2100      	movs	r1, #0
 8000e78:	e74f      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000e7a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e7e:	0c01      	lsrs	r1, r0, #16
 8000e80:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e84:	b280      	uxth	r0, r0
 8000e86:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e8a:	463b      	mov	r3, r7
 8000e8c:	4638      	mov	r0, r7
 8000e8e:	463c      	mov	r4, r7
 8000e90:	46b8      	mov	r8, r7
 8000e92:	46be      	mov	lr, r7
 8000e94:	2620      	movs	r6, #32
 8000e96:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e9a:	eba2 0208 	sub.w	r2, r2, r8
 8000e9e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ea2:	e766      	b.n	8000d72 <__udivmoddi4+0xfa>
 8000ea4:	4601      	mov	r1, r0
 8000ea6:	e718      	b.n	8000cda <__udivmoddi4+0x62>
 8000ea8:	4610      	mov	r0, r2
 8000eaa:	e72c      	b.n	8000d06 <__udivmoddi4+0x8e>
 8000eac:	f1c6 0220 	rsb	r2, r6, #32
 8000eb0:	fa2e f302 	lsr.w	r3, lr, r2
 8000eb4:	40b7      	lsls	r7, r6
 8000eb6:	40b1      	lsls	r1, r6
 8000eb8:	fa20 f202 	lsr.w	r2, r0, r2
 8000ebc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ec0:	430a      	orrs	r2, r1
 8000ec2:	fbb3 f8fe 	udiv	r8, r3, lr
 8000ec6:	b2bc      	uxth	r4, r7
 8000ec8:	fb0e 3318 	mls	r3, lr, r8, r3
 8000ecc:	0c11      	lsrs	r1, r2, #16
 8000ece:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed2:	fb08 f904 	mul.w	r9, r8, r4
 8000ed6:	40b0      	lsls	r0, r6
 8000ed8:	4589      	cmp	r9, r1
 8000eda:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000ede:	b280      	uxth	r0, r0
 8000ee0:	d93e      	bls.n	8000f60 <__udivmoddi4+0x2e8>
 8000ee2:	1879      	adds	r1, r7, r1
 8000ee4:	f108 3cff 	add.w	ip, r8, #4294967295
 8000ee8:	d201      	bcs.n	8000eee <__udivmoddi4+0x276>
 8000eea:	4589      	cmp	r9, r1
 8000eec:	d81f      	bhi.n	8000f2e <__udivmoddi4+0x2b6>
 8000eee:	eba1 0109 	sub.w	r1, r1, r9
 8000ef2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ef6:	fb09 f804 	mul.w	r8, r9, r4
 8000efa:	fb0e 1119 	mls	r1, lr, r9, r1
 8000efe:	b292      	uxth	r2, r2
 8000f00:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f04:	4542      	cmp	r2, r8
 8000f06:	d229      	bcs.n	8000f5c <__udivmoddi4+0x2e4>
 8000f08:	18ba      	adds	r2, r7, r2
 8000f0a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f0e:	d2c4      	bcs.n	8000e9a <__udivmoddi4+0x222>
 8000f10:	4542      	cmp	r2, r8
 8000f12:	d2c2      	bcs.n	8000e9a <__udivmoddi4+0x222>
 8000f14:	f1a9 0102 	sub.w	r1, r9, #2
 8000f18:	443a      	add	r2, r7
 8000f1a:	e7be      	b.n	8000e9a <__udivmoddi4+0x222>
 8000f1c:	45f0      	cmp	r8, lr
 8000f1e:	d29d      	bcs.n	8000e5c <__udivmoddi4+0x1e4>
 8000f20:	ebbe 0302 	subs.w	r3, lr, r2
 8000f24:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f28:	3801      	subs	r0, #1
 8000f2a:	46e1      	mov	r9, ip
 8000f2c:	e796      	b.n	8000e5c <__udivmoddi4+0x1e4>
 8000f2e:	eba7 0909 	sub.w	r9, r7, r9
 8000f32:	4449      	add	r1, r9
 8000f34:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f38:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f3c:	fb09 f804 	mul.w	r8, r9, r4
 8000f40:	e7db      	b.n	8000efa <__udivmoddi4+0x282>
 8000f42:	4673      	mov	r3, lr
 8000f44:	e77f      	b.n	8000e46 <__udivmoddi4+0x1ce>
 8000f46:	4650      	mov	r0, sl
 8000f48:	e766      	b.n	8000e18 <__udivmoddi4+0x1a0>
 8000f4a:	4608      	mov	r0, r1
 8000f4c:	e6fd      	b.n	8000d4a <__udivmoddi4+0xd2>
 8000f4e:	443b      	add	r3, r7
 8000f50:	3a02      	subs	r2, #2
 8000f52:	e733      	b.n	8000dbc <__udivmoddi4+0x144>
 8000f54:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f58:	443b      	add	r3, r7
 8000f5a:	e71c      	b.n	8000d96 <__udivmoddi4+0x11e>
 8000f5c:	4649      	mov	r1, r9
 8000f5e:	e79c      	b.n	8000e9a <__udivmoddi4+0x222>
 8000f60:	eba1 0109 	sub.w	r1, r1, r9
 8000f64:	46c4      	mov	ip, r8
 8000f66:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f6a:	fb09 f804 	mul.w	r8, r9, r4
 8000f6e:	e7c4      	b.n	8000efa <__udivmoddi4+0x282>

08000f70 <__aeabi_idiv0>:
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop

08000f74 <_ICM20948_SelectUserBank>:
static float s_lastMagYaw = 0.0f;
static uint32_t s_magElapsedMs = IMU_MAG_UPDATE_PERIOD_MS;
static uint8_t s_hasMagYaw = 0U;
#endif

HAL_StatusTypeDef _ICM20948_SelectUserBank(I2C_HandleTypeDef * hi2c, uint8_t const selectI2cAddress, int userBankNum) {
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b08a      	sub	sp, #40	@ 0x28
 8000f78:	af04      	add	r7, sp, #16
 8000f7a:	60f8      	str	r0, [r7, #12]
 8000f7c:	460b      	mov	r3, r1
 8000f7e:	607a      	str	r2, [r7, #4]
 8000f80:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef status = HAL_OK;
 8000f82:	2300      	movs	r3, #0
 8000f84:	75fb      	strb	r3, [r7, #23]
	uint8_t writeData = userBankNum << BIT_4;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	b2db      	uxtb	r3, r3
 8000f8a:	011b      	lsls	r3, r3, #4
 8000f8c:	b2db      	uxtb	r3, r3
 8000f8e:	757b      	strb	r3, [r7, #21]
	uint8_t deviceI2CAddress = (selectI2cAddress == 0)? ICM20948__I2C_SLAVE_ADDRESS_1: ICM20948__I2C_SLAVE_ADDRESS_2;
 8000f90:	7afb      	ldrb	r3, [r7, #11]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d101      	bne.n	8000f9a <_ICM20948_SelectUserBank+0x26>
 8000f96:	2368      	movs	r3, #104	@ 0x68
 8000f98:	e000      	b.n	8000f9c <_ICM20948_SelectUserBank+0x28>
 8000f9a:	2369      	movs	r3, #105	@ 0x69
 8000f9c:	75bb      	strb	r3, [r7, #22]

	status = HAL_I2C_Mem_Write(
 8000f9e:	7dbb      	ldrb	r3, [r7, #22]
 8000fa0:	b29b      	uxth	r3, r3
 8000fa2:	005b      	lsls	r3, r3, #1
 8000fa4:	b299      	uxth	r1, r3
 8000fa6:	230a      	movs	r3, #10
 8000fa8:	9302      	str	r3, [sp, #8]
 8000faa:	2301      	movs	r3, #1
 8000fac:	9301      	str	r3, [sp, #4]
 8000fae:	f107 0315 	add.w	r3, r7, #21
 8000fb2:	9300      	str	r3, [sp, #0]
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	227f      	movs	r2, #127	@ 0x7f
 8000fb8:	68f8      	ldr	r0, [r7, #12]
 8000fba:	f006 f91f 	bl	80071fc <HAL_I2C_Mem_Write>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	75fb      	strb	r3, [r7, #23]
			I2C_MEMADD_SIZE_8BIT,
			&writeData,
			I2C_MEMADD_SIZE_8BIT,
			10);

	return status;
 8000fc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	3718      	adds	r7, #24
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}

08000fcc <_ICM20948_WriteByte>:

HAL_StatusTypeDef _ICM20948_WriteByte(I2C_HandleTypeDef * hi2c, uint8_t const selectI2cAddress, uint8_t const registerAddress, uint8_t writeData) {
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b088      	sub	sp, #32
 8000fd0:	af04      	add	r7, sp, #16
 8000fd2:	6078      	str	r0, [r7, #4]
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	4611      	mov	r1, r2
 8000fd8:	461a      	mov	r2, r3
 8000fda:	4603      	mov	r3, r0
 8000fdc:	70fb      	strb	r3, [r7, #3]
 8000fde:	460b      	mov	r3, r1
 8000fe0:	70bb      	strb	r3, [r7, #2]
 8000fe2:	4613      	mov	r3, r2
 8000fe4:	707b      	strb	r3, [r7, #1]
	HAL_StatusTypeDef status = HAL_OK;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	73fb      	strb	r3, [r7, #15]
	uint8_t deviceI2CAddress = (selectI2cAddress == 0)? ICM20948__I2C_SLAVE_ADDRESS_1: ICM20948__I2C_SLAVE_ADDRESS_2;
 8000fea:	78fb      	ldrb	r3, [r7, #3]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d101      	bne.n	8000ff4 <_ICM20948_WriteByte+0x28>
 8000ff0:	2368      	movs	r3, #104	@ 0x68
 8000ff2:	e000      	b.n	8000ff6 <_ICM20948_WriteByte+0x2a>
 8000ff4:	2369      	movs	r3, #105	@ 0x69
 8000ff6:	73bb      	strb	r3, [r7, #14]

	status = HAL_I2C_Mem_Write(
 8000ff8:	7bbb      	ldrb	r3, [r7, #14]
 8000ffa:	b29b      	uxth	r3, r3
 8000ffc:	005b      	lsls	r3, r3, #1
 8000ffe:	b299      	uxth	r1, r3
 8001000:	78bb      	ldrb	r3, [r7, #2]
 8001002:	b29a      	uxth	r2, r3
 8001004:	230a      	movs	r3, #10
 8001006:	9302      	str	r3, [sp, #8]
 8001008:	2301      	movs	r3, #1
 800100a:	9301      	str	r3, [sp, #4]
 800100c:	1c7b      	adds	r3, r7, #1
 800100e:	9300      	str	r3, [sp, #0]
 8001010:	2301      	movs	r3, #1
 8001012:	6878      	ldr	r0, [r7, #4]
 8001014:	f006 f8f2 	bl	80071fc <HAL_I2C_Mem_Write>
 8001018:	4603      	mov	r3, r0
 800101a:	73fb      	strb	r3, [r7, #15]
			I2C_MEMADD_SIZE_8BIT,
			&writeData,
			I2C_MEMADD_SIZE_8BIT,
			10);

	return status;
 800101c:	7bfb      	ldrb	r3, [r7, #15]
}
 800101e:	4618      	mov	r0, r3
 8001020:	3710      	adds	r7, #16
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}

08001026 <_ICM20948_BrustRead>:
			10);

	return status;
}

HAL_StatusTypeDef _ICM20948_BrustRead(I2C_HandleTypeDef * hi2c, uint8_t const selectI2cAddress, uint8_t const startAddress, uint16_t const amountOfRegistersToRead, uint8_t * readData) {
 8001026:	b580      	push	{r7, lr}
 8001028:	b088      	sub	sp, #32
 800102a:	af04      	add	r7, sp, #16
 800102c:	6078      	str	r0, [r7, #4]
 800102e:	4608      	mov	r0, r1
 8001030:	4611      	mov	r1, r2
 8001032:	461a      	mov	r2, r3
 8001034:	4603      	mov	r3, r0
 8001036:	70fb      	strb	r3, [r7, #3]
 8001038:	460b      	mov	r3, r1
 800103a:	70bb      	strb	r3, [r7, #2]
 800103c:	4613      	mov	r3, r2
 800103e:	803b      	strh	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8001040:	2300      	movs	r3, #0
 8001042:	73fb      	strb	r3, [r7, #15]
	uint8_t deviceI2CAddress = (selectI2cAddress == 0)? ICM20948__I2C_SLAVE_ADDRESS_1: ICM20948__I2C_SLAVE_ADDRESS_2;
 8001044:	78fb      	ldrb	r3, [r7, #3]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d101      	bne.n	800104e <_ICM20948_BrustRead+0x28>
 800104a:	2368      	movs	r3, #104	@ 0x68
 800104c:	e000      	b.n	8001050 <_ICM20948_BrustRead+0x2a>
 800104e:	2369      	movs	r3, #105	@ 0x69
 8001050:	73bb      	strb	r3, [r7, #14]

	status = HAL_I2C_Mem_Read(
 8001052:	7bbb      	ldrb	r3, [r7, #14]
 8001054:	b29b      	uxth	r3, r3
 8001056:	005b      	lsls	r3, r3, #1
 8001058:	b299      	uxth	r1, r3
 800105a:	78bb      	ldrb	r3, [r7, #2]
 800105c:	b29a      	uxth	r2, r3
 800105e:	230a      	movs	r3, #10
 8001060:	9302      	str	r3, [sp, #8]
 8001062:	883b      	ldrh	r3, [r7, #0]
 8001064:	9301      	str	r3, [sp, #4]
 8001066:	69bb      	ldr	r3, [r7, #24]
 8001068:	9300      	str	r3, [sp, #0]
 800106a:	2301      	movs	r3, #1
 800106c:	6878      	ldr	r0, [r7, #4]
 800106e:	f006 f9bf 	bl	80073f0 <HAL_I2C_Mem_Read>
 8001072:	4603      	mov	r3, r0
 8001074:	73fb      	strb	r3, [r7, #15]
			I2C_MEMADD_SIZE_8BIT,
			readData,
			amountOfRegistersToRead * I2C_MEMADD_SIZE_8BIT,
			10);

	return status;
 8001076:	7bfb      	ldrb	r3, [r7, #15]
}
 8001078:	4618      	mov	r0, r3
 800107a:	3710      	adds	r7, #16
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}

08001080 <_AK09916_WriteByte>:

HAL_StatusTypeDef _AK09916_WriteByte(I2C_HandleTypeDef * hi2c, uint8_t const registerAddress, uint8_t writeData) {
 8001080:	b580      	push	{r7, lr}
 8001082:	b088      	sub	sp, #32
 8001084:	af04      	add	r7, sp, #16
 8001086:	6078      	str	r0, [r7, #4]
 8001088:	460b      	mov	r3, r1
 800108a:	70fb      	strb	r3, [r7, #3]
 800108c:	4613      	mov	r3, r2
 800108e:	70bb      	strb	r3, [r7, #2]
	HAL_StatusTypeDef status = HAL_OK;
 8001090:	2300      	movs	r3, #0
 8001092:	73fb      	strb	r3, [r7, #15]

	status = HAL_I2C_Mem_Write(
 8001094:	78fb      	ldrb	r3, [r7, #3]
 8001096:	b29a      	uxth	r2, r3
 8001098:	230a      	movs	r3, #10
 800109a:	9302      	str	r3, [sp, #8]
 800109c:	2301      	movs	r3, #1
 800109e:	9301      	str	r3, [sp, #4]
 80010a0:	1cbb      	adds	r3, r7, #2
 80010a2:	9300      	str	r3, [sp, #0]
 80010a4:	2301      	movs	r3, #1
 80010a6:	2118      	movs	r1, #24
 80010a8:	6878      	ldr	r0, [r7, #4]
 80010aa:	f006 f8a7 	bl	80071fc <HAL_I2C_Mem_Write>
 80010ae:	4603      	mov	r3, r0
 80010b0:	73fb      	strb	r3, [r7, #15]
			I2C_MEMADD_SIZE_8BIT,
			&writeData,
			I2C_MEMADD_SIZE_8BIT,
			10);

	return status;
 80010b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	3710      	adds	r7, #16
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}

080010bc <_AK09916_ReadByte>:

HAL_StatusTypeDef _AK09916_ReadByte(I2C_HandleTypeDef * hi2c, uint8_t const registerAddress, uint8_t *readData) {
 80010bc:	b580      	push	{r7, lr}
 80010be:	b08a      	sub	sp, #40	@ 0x28
 80010c0:	af04      	add	r7, sp, #16
 80010c2:	60f8      	str	r0, [r7, #12]
 80010c4:	460b      	mov	r3, r1
 80010c6:	607a      	str	r2, [r7, #4]
 80010c8:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef status = HAL_OK;
 80010ca:	2300      	movs	r3, #0
 80010cc:	75fb      	strb	r3, [r7, #23]

	status = HAL_I2C_Mem_Read(
 80010ce:	7afb      	ldrb	r3, [r7, #11]
 80010d0:	b29a      	uxth	r2, r3
 80010d2:	230a      	movs	r3, #10
 80010d4:	9302      	str	r3, [sp, #8]
 80010d6:	2301      	movs	r3, #1
 80010d8:	9301      	str	r3, [sp, #4]
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	9300      	str	r3, [sp, #0]
 80010de:	2301      	movs	r3, #1
 80010e0:	2118      	movs	r1, #24
 80010e2:	68f8      	ldr	r0, [r7, #12]
 80010e4:	f006 f984 	bl	80073f0 <HAL_I2C_Mem_Read>
 80010e8:	4603      	mov	r3, r0
 80010ea:	75fb      	strb	r3, [r7, #23]
			I2C_MEMADD_SIZE_8BIT,
			readData,
			I2C_MEMADD_SIZE_8BIT,
			10);

	return status;
 80010ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3718      	adds	r7, #24
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}

080010f6 <_AK09916_BrustRead>:

HAL_StatusTypeDef _AK09916_BrustRead(I2C_HandleTypeDef * hi2c, uint8_t const startAddress, uint16_t const amountOfRegistersToRead, uint8_t * readData) {
 80010f6:	b580      	push	{r7, lr}
 80010f8:	b08a      	sub	sp, #40	@ 0x28
 80010fa:	af04      	add	r7, sp, #16
 80010fc:	60f8      	str	r0, [r7, #12]
 80010fe:	607b      	str	r3, [r7, #4]
 8001100:	460b      	mov	r3, r1
 8001102:	72fb      	strb	r3, [r7, #11]
 8001104:	4613      	mov	r3, r2
 8001106:	813b      	strh	r3, [r7, #8]
	HAL_StatusTypeDef status = HAL_OK;
 8001108:	2300      	movs	r3, #0
 800110a:	75fb      	strb	r3, [r7, #23]

	status = HAL_I2C_Mem_Read(
 800110c:	7afb      	ldrb	r3, [r7, #11]
 800110e:	b29a      	uxth	r2, r3
 8001110:	230a      	movs	r3, #10
 8001112:	9302      	str	r3, [sp, #8]
 8001114:	893b      	ldrh	r3, [r7, #8]
 8001116:	9301      	str	r3, [sp, #4]
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	9300      	str	r3, [sp, #0]
 800111c:	2301      	movs	r3, #1
 800111e:	2118      	movs	r1, #24
 8001120:	68f8      	ldr	r0, [r7, #12]
 8001122:	f006 f965 	bl	80073f0 <HAL_I2C_Mem_Read>
 8001126:	4603      	mov	r3, r0
 8001128:	75fb      	strb	r3, [r7, #23]
			I2C_MEMADD_SIZE_8BIT,
			readData,
			amountOfRegistersToRead * I2C_MEMADD_SIZE_8BIT,
			10);

	return status;
 800112a:	7dfb      	ldrb	r3, [r7, #23]
}
 800112c:	4618      	mov	r0, r3
 800112e:	3718      	adds	r7, #24
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}

08001134 <ICM20948_init>:
	}

	return 0;
}

void ICM20948_init(I2C_HandleTypeDef * hi2c, uint8_t const selectI2cAddress, uint8_t const selectGyroSensitivity, uint8_t const selectAccelSensitivity) {
 8001134:	b580      	push	{r7, lr}
 8001136:	b084      	sub	sp, #16
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
 800113c:	4608      	mov	r0, r1
 800113e:	4611      	mov	r1, r2
 8001140:	461a      	mov	r2, r3
 8001142:	4603      	mov	r3, r0
 8001144:	70fb      	strb	r3, [r7, #3]
 8001146:	460b      	mov	r3, r1
 8001148:	70bb      	strb	r3, [r7, #2]
 800114a:	4613      	mov	r3, r2
 800114c:	707b      	strb	r3, [r7, #1]
	HAL_StatusTypeDef status = HAL_OK;
 800114e:	2300      	movs	r3, #0
 8001150:	73fb      	strb	r3, [r7, #15]

	status = _ICM20948_SelectUserBank(hi2c, selectI2cAddress, USER_BANK_0);
 8001152:	78fb      	ldrb	r3, [r7, #3]
 8001154:	2200      	movs	r2, #0
 8001156:	4619      	mov	r1, r3
 8001158:	6878      	ldr	r0, [r7, #4]
 800115a:	f7ff ff0b 	bl	8000f74 <_ICM20948_SelectUserBank>
 800115e:	4603      	mov	r3, r0
 8001160:	73fb      	strb	r3, [r7, #15]

	status = _ICM20948_WriteByte(
 8001162:	78f9      	ldrb	r1, [r7, #3]
 8001164:	2380      	movs	r3, #128	@ 0x80
 8001166:	2206      	movs	r2, #6
 8001168:	6878      	ldr	r0, [r7, #4]
 800116a:	f7ff ff2f 	bl	8000fcc <_ICM20948_WriteByte>
 800116e:	4603      	mov	r3, r0
 8001170:	73fb      	strb	r3, [r7, #15]
			hi2c,
			selectI2cAddress,
			ICM20948__USER_BANK_0__PWR_MGMT_1__REGISTER,
			ICM20948_RESET);

	HAL_Delay(200);
 8001172:	20c8      	movs	r0, #200	@ 0xc8
 8001174:	f004 fc40 	bl	80059f8 <HAL_Delay>

	status = _ICM20948_WriteByte(
 8001178:	78f9      	ldrb	r1, [r7, #3]
 800117a:	2301      	movs	r3, #1
 800117c:	2206      	movs	r2, #6
 800117e:	6878      	ldr	r0, [r7, #4]
 8001180:	f7ff ff24 	bl	8000fcc <_ICM20948_WriteByte>
 8001184:	4603      	mov	r3, r0
 8001186:	73fb      	strb	r3, [r7, #15]
			selectI2cAddress,
			ICM20948__USER_BANK_0__PWR_MGMT_1__REGISTER,
			ICM20948_AUTO_SELECT_CLOCK);

	//enable both gyroscope and accelerometer
	status = _ICM20948_WriteByte(
 8001188:	78f9      	ldrb	r1, [r7, #3]
 800118a:	2300      	movs	r3, #0
 800118c:	2207      	movs	r2, #7
 800118e:	6878      	ldr	r0, [r7, #4]
 8001190:	f7ff ff1c 	bl	8000fcc <_ICM20948_WriteByte>
 8001194:	4603      	mov	r3, r0
 8001196:	73fb      	strb	r3, [r7, #15]
			hi2c,
			selectI2cAddress,
			ICM20948__USER_BANK_0__PWR_MGMT_2__REGISTER,
			ICM20948_DISABLE_SENSORS); // For some reason this needs to be tested

	status = _ICM20948_SelectUserBank(hi2c, selectI2cAddress, USER_BANK_2);
 8001198:	78fb      	ldrb	r3, [r7, #3]
 800119a:	2202      	movs	r2, #2
 800119c:	4619      	mov	r1, r3
 800119e:	6878      	ldr	r0, [r7, #4]
 80011a0:	f7ff fee8 	bl	8000f74 <_ICM20948_SelectUserBank>
 80011a4:	4603      	mov	r3, r0
 80011a6:	73fb      	strb	r3, [r7, #15]
	//gyroscope sampling rate settings.
	status = _ICM20948_WriteByte(
			hi2c,
			selectI2cAddress,
			ICM20948__USER_BANK_2__GYRO_CONFIG_1__REGISTER,
			0 << GYRO_DLPFCFG_BIT|selectGyroSensitivity << GYRO_FS_SEL_BIT|EN_GRYO_DLPF << GYRO_FCHOICE_BIT);
 80011a8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80011ac:	005b      	lsls	r3, r3, #1
 80011ae:	b25b      	sxtb	r3, r3
 80011b0:	f043 0301 	orr.w	r3, r3, #1
 80011b4:	b25b      	sxtb	r3, r3
	status = _ICM20948_WriteByte(
 80011b6:	b2db      	uxtb	r3, r3
 80011b8:	78f9      	ldrb	r1, [r7, #3]
 80011ba:	2201      	movs	r2, #1
 80011bc:	6878      	ldr	r0, [r7, #4]
 80011be:	f7ff ff05 	bl	8000fcc <_ICM20948_WriteByte>
 80011c2:	4603      	mov	r3, r0
 80011c4:	73fb      	strb	r3, [r7, #15]
	status = _ICM20948_WriteByte(
 80011c6:	78f9      	ldrb	r1, [r7, #3]
 80011c8:	2304      	movs	r3, #4
 80011ca:	2200      	movs	r2, #0
 80011cc:	6878      	ldr	r0, [r7, #4]
 80011ce:	f7ff fefd 	bl	8000fcc <_ICM20948_WriteByte>
 80011d2:	4603      	mov	r3, r0
 80011d4:	73fb      	strb	r3, [r7, #15]
	//accelerometer sampling rate settings.
	status = _ICM20948_WriteByte(
			hi2c,
			selectI2cAddress,
			ICM20948__USER_BANK_2__ACCEL_CONFIG__REGISTER,
			1 << ACCEL_DLPFCFG_BIT|selectAccelSensitivity << ACCEL_FS_SEL_BIT|0x01 << ACCEL_FCHOICE_BIT);
 80011d6:	f997 3001 	ldrsb.w	r3, [r7, #1]
 80011da:	005b      	lsls	r3, r3, #1
 80011dc:	b25b      	sxtb	r3, r3
 80011de:	f043 0309 	orr.w	r3, r3, #9
 80011e2:	b25b      	sxtb	r3, r3
	status = _ICM20948_WriteByte(
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	78f9      	ldrb	r1, [r7, #3]
 80011e8:	2214      	movs	r2, #20
 80011ea:	6878      	ldr	r0, [r7, #4]
 80011ec:	f7ff feee 	bl	8000fcc <_ICM20948_WriteByte>
 80011f0:	4603      	mov	r3, r0
 80011f2:	73fb      	strb	r3, [r7, #15]
	status = _ICM20948_WriteByte(
 80011f4:	78f9      	ldrb	r1, [r7, #3]
 80011f6:	2304      	movs	r3, #4
 80011f8:	2211      	movs	r2, #17
 80011fa:	6878      	ldr	r0, [r7, #4]
 80011fc:	f7ff fee6 	bl	8000fcc <_ICM20948_WriteByte>
 8001200:	4603      	mov	r3, r0
 8001202:	73fb      	strb	r3, [r7, #15]
			selectI2cAddress,
			ICM20948__USER_BANK_2__ACCEL_SMPLRT_DIV_2__REGISTER,
			4);


	status = _ICM20948_SelectUserBank(hi2c, selectI2cAddress, USER_BANK_0);
 8001204:	78fb      	ldrb	r3, [r7, #3]
 8001206:	2200      	movs	r2, #0
 8001208:	4619      	mov	r1, r3
 800120a:	6878      	ldr	r0, [r7, #4]
 800120c:	f7ff feb2 	bl	8000f74 <_ICM20948_SelectUserBank>
 8001210:	4603      	mov	r3, r0
 8001212:	73fb      	strb	r3, [r7, #15]

	status = _ICM20948_WriteByte(
 8001214:	78f9      	ldrb	r1, [r7, #3]
 8001216:	2302      	movs	r3, #2
 8001218:	220f      	movs	r2, #15
 800121a:	6878      	ldr	r0, [r7, #4]
 800121c:	f7ff fed6 	bl	8000fcc <_ICM20948_WriteByte>
 8001220:	4603      	mov	r3, r0
 8001222:	73fb      	strb	r3, [r7, #15]
			hi2c,
			selectI2cAddress,
			ICM20948__USER_BANK_0__INT_PIN_CFG__REGISTER,
			0x02); // Don't understand how this works

	status = _AK09916_WriteByte(
 8001224:	2208      	movs	r2, #8
 8001226:	2131      	movs	r1, #49	@ 0x31
 8001228:	6878      	ldr	r0, [r7, #4]
 800122a:	f7ff ff29 	bl	8001080 <_AK09916_WriteByte>
 800122e:	4603      	mov	r3, r0
 8001230:	73fb      	strb	r3, [r7, #15]
			hi2c,
			AK09916__CNTL2__REGISTER,
			0x08);
}
 8001232:	bf00      	nop
 8001234:	3710      	adds	r7, #16
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
	...

0800123c <ICM20948_readGyroscope_Z>:

void ICM20948_readGyroscope_Z(I2C_HandleTypeDef * hi2c, uint8_t const selectI2cAddress, uint8_t const selectGyroSensitivity, float *gyroZ) {
 800123c:	b580      	push	{r7, lr}
 800123e:	b088      	sub	sp, #32
 8001240:	af02      	add	r7, sp, #8
 8001242:	60f8      	str	r0, [r7, #12]
 8001244:	607b      	str	r3, [r7, #4]
 8001246:	460b      	mov	r3, r1
 8001248:	72fb      	strb	r3, [r7, #11]
 800124a:	4613      	mov	r3, r2
 800124c:	72bb      	strb	r3, [r7, #10]
	uint8_t readData[2];

//	_ICM20948_SelectUserBank(hi2c, selectI2cAddress, USER_BANK_0);
	_ICM20948_BrustRead(hi2c, selectI2cAddress, ICM20948__USER_BANK_0__GYRO_ZOUT_H__REGISTER, 2, readData);
 800124e:	7af9      	ldrb	r1, [r7, #11]
 8001250:	f107 0314 	add.w	r3, r7, #20
 8001254:	9300      	str	r3, [sp, #0]
 8001256:	2302      	movs	r3, #2
 8001258:	2237      	movs	r2, #55	@ 0x37
 800125a:	68f8      	ldr	r0, [r7, #12]
 800125c:	f7ff fee3 	bl	8001026 <_ICM20948_BrustRead>

	int16_t reading = readData[0]<<8 | readData[1];
 8001260:	7d3b      	ldrb	r3, [r7, #20]
 8001262:	b21b      	sxth	r3, r3
 8001264:	021b      	lsls	r3, r3, #8
 8001266:	b21a      	sxth	r2, r3
 8001268:	7d7b      	ldrb	r3, [r7, #21]
 800126a:	b21b      	sxth	r3, r3
 800126c:	4313      	orrs	r3, r2
 800126e:	82fb      	strh	r3, [r7, #22]
	*gyroZ = (float) -reading;
 8001270:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001274:	425b      	negs	r3, r3
 8001276:	ee07 3a90 	vmov	s15, r3
 800127a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	edc3 7a00 	vstr	s15, [r3]
	switch (selectGyroSensitivity) {
 8001284:	7abb      	ldrb	r3, [r7, #10]
 8001286:	2b03      	cmp	r3, #3
 8001288:	d836      	bhi.n	80012f8 <ICM20948_readGyroscope_Z+0xbc>
 800128a:	a201      	add	r2, pc, #4	@ (adr r2, 8001290 <ICM20948_readGyroscope_Z+0x54>)
 800128c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001290:	080012a1 	.word	0x080012a1
 8001294:	080012b7 	.word	0x080012b7
 8001298:	080012cd 	.word	0x080012cd
 800129c:	080012e3 	.word	0x080012e3
		case GYRO_FULL_SCALE_250DPS:
			*gyroZ /= GRYO_SENSITIVITY_SCALE_FACTOR_250DPS;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	ed93 7a00 	vldr	s14, [r3]
 80012a6:	eddf 6a16 	vldr	s13, [pc, #88]	@ 8001300 <ICM20948_readGyroscope_Z+0xc4>
 80012aa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	edc3 7a00 	vstr	s15, [r3]
			break;
 80012b4:	e020      	b.n	80012f8 <ICM20948_readGyroscope_Z+0xbc>
		case GYRO_FULL_SCALE_500DPS:
			*gyroZ /= GRYO_SENSITIVITY_SCALE_FACTOR_500DPS;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	ed93 7a00 	vldr	s14, [r3]
 80012bc:	eddf 6a11 	vldr	s13, [pc, #68]	@ 8001304 <ICM20948_readGyroscope_Z+0xc8>
 80012c0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	edc3 7a00 	vstr	s15, [r3]
			break;
 80012ca:	e015      	b.n	80012f8 <ICM20948_readGyroscope_Z+0xbc>
		case GYRO_FULL_SCALE_1000DPS:
			*gyroZ /= GRYO_SENSITIVITY_SCALE_FACTOR_1000DPS;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	ed93 7a00 	vldr	s14, [r3]
 80012d2:	eddf 6a0d 	vldr	s13, [pc, #52]	@ 8001308 <ICM20948_readGyroscope_Z+0xcc>
 80012d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	edc3 7a00 	vstr	s15, [r3]
			break;
 80012e0:	e00a      	b.n	80012f8 <ICM20948_readGyroscope_Z+0xbc>
		case GYRO_FULL_SCALE_2000DPS:
			*gyroZ /= GRYO_SENSITIVITY_SCALE_FACTOR_2000DPS;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	ed93 7a00 	vldr	s14, [r3]
 80012e8:	eddf 6a08 	vldr	s13, [pc, #32]	@ 800130c <ICM20948_readGyroscope_Z+0xd0>
 80012ec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	edc3 7a00 	vstr	s15, [r3]
			break;
 80012f6:	bf00      	nop
	}

}
 80012f8:	bf00      	nop
 80012fa:	3718      	adds	r7, #24
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	43030000 	.word	0x43030000
 8001304:	42830000 	.word	0x42830000
 8001308:	42033333 	.word	0x42033333
 800130c:	41833333 	.word	0x41833333

08001310 <ICM20948_readMagnetometer_XY>:
			readings[Z] = rD[Z] / ACCEL_SENSITIVITY_SCALE_FACTOR_16G;
			break;
	}
}

void ICM20948_readMagnetometer_XY(I2C_HandleTypeDef * hi2c, float magXY[2]) {
 8001310:	b580      	push	{r7, lr}
 8001312:	b086      	sub	sp, #24
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
 8001318:	6039      	str	r1, [r7, #0]
	uint8_t readData[4];
	_AK09916_BrustRead(hi2c, AK09916__XOUT_L__REGISTER, 4, readData);
 800131a:	f107 0310 	add.w	r3, r7, #16
 800131e:	2204      	movs	r2, #4
 8001320:	2111      	movs	r1, #17
 8001322:	6878      	ldr	r0, [r7, #4]
 8001324:	f7ff fee7 	bl	80010f6 <_AK09916_BrustRead>

	//read status register to mark end of data read.
	uint8_t st2;
	_AK09916_ReadByte(hi2c, AK09916__ST2__REGISTER, &st2);
 8001328:	f107 030f 	add.w	r3, r7, #15
 800132c:	461a      	mov	r2, r3
 800132e:	2118      	movs	r1, #24
 8001330:	6878      	ldr	r0, [r7, #4]
 8001332:	f7ff fec3 	bl	80010bc <_AK09916_ReadByte>
	int16_t reading;
	for (uint8_t i = 0; i < 2; i++) {
 8001336:	2300      	movs	r3, #0
 8001338:	75fb      	strb	r3, [r7, #23]
 800133a:	e025      	b.n	8001388 <ICM20948_readMagnetometer_XY+0x78>
		reading = readData[1+2*i]<<8|readData[2*i];
 800133c:	7dfb      	ldrb	r3, [r7, #23]
 800133e:	005b      	lsls	r3, r3, #1
 8001340:	3301      	adds	r3, #1
 8001342:	3318      	adds	r3, #24
 8001344:	443b      	add	r3, r7
 8001346:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 800134a:	b21b      	sxth	r3, r3
 800134c:	021b      	lsls	r3, r3, #8
 800134e:	b21a      	sxth	r2, r3
 8001350:	7dfb      	ldrb	r3, [r7, #23]
 8001352:	005b      	lsls	r3, r3, #1
 8001354:	3318      	adds	r3, #24
 8001356:	443b      	add	r3, r7
 8001358:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 800135c:	b21b      	sxth	r3, r3
 800135e:	4313      	orrs	r3, r2
 8001360:	82bb      	strh	r3, [r7, #20]
		magXY[i] = reading * MAG_SENSITIVITY_SCALE_FACTOR;
 8001362:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001366:	ee07 3a90 	vmov	s15, r3
 800136a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800136e:	7dfb      	ldrb	r3, [r7, #23]
 8001370:	009b      	lsls	r3, r3, #2
 8001372:	683a      	ldr	r2, [r7, #0]
 8001374:	4413      	add	r3, r2
 8001376:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8001398 <ICM20948_readMagnetometer_XY+0x88>
 800137a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800137e:	edc3 7a00 	vstr	s15, [r3]
	for (uint8_t i = 0; i < 2; i++) {
 8001382:	7dfb      	ldrb	r3, [r7, #23]
 8001384:	3301      	adds	r3, #1
 8001386:	75fb      	strb	r3, [r7, #23]
 8001388:	7dfb      	ldrb	r3, [r7, #23]
 800138a:	2b01      	cmp	r3, #1
 800138c:	d9d6      	bls.n	800133c <ICM20948_readMagnetometer_XY+0x2c>
	}
}
 800138e:	bf00      	nop
 8001390:	bf00      	nop
 8001392:	3718      	adds	r7, #24
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	3e19999a 	.word	0x3e19999a
 800139c:	00000000 	.word	0x00000000

080013a0 <IMU_Update>:



void IMU_Update(I2C_HandleTypeDef *hi2c,
				uint8_t selectI2cAddress,
				uint8_t selectGyroSensitivity) {
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b088      	sub	sp, #32
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	460b      	mov	r3, r1
 80013aa:	70fb      	strb	r3, [r7, #3]
 80013ac:	4613      	mov	r3, r2
 80013ae:	70bb      	strb	r3, [r7, #2]
	float gyroZ = 0.0f;
 80013b0:	f04f 0300 	mov.w	r3, #0
 80013b4:	613b      	str	r3, [r7, #16]
	ICM20948_readGyroscope_Z(hi2c, selectI2cAddress, selectGyroSensitivity, &gyroZ);
 80013b6:	f107 0310 	add.w	r3, r7, #16
 80013ba:	78ba      	ldrb	r2, [r7, #2]
 80013bc:	78f9      	ldrb	r1, [r7, #3]
 80013be:	6878      	ldr	r0, [r7, #4]
 80013c0:	f7ff ff3c 	bl	800123c <ICM20948_readGyroscope_Z>
	gyroZ -= gyroBiasZ;
 80013c4:	ed97 7a04 	vldr	s14, [r7, #16]
 80013c8:	4b71      	ldr	r3, [pc, #452]	@ (8001590 <IMU_Update+0x1f0>)
 80013ca:	edd3 7a00 	vldr	s15, [r3]
 80013ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013d2:	edc7 7a04 	vstr	s15, [r7, #16]

	const float dt = ((float)IMU_UPDATE_PERIOD_MS) / 1000.0f;
 80013d6:	4b6f      	ldr	r3, [pc, #444]	@ (8001594 <IMU_Update+0x1f4>)
 80013d8:	617b      	str	r3, [r7, #20]
	s_integratedYaw += gyroZ * dt;
 80013da:	ed97 7a04 	vldr	s14, [r7, #16]
 80013de:	edd7 7a05 	vldr	s15, [r7, #20]
 80013e2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013e6:	4b6c      	ldr	r3, [pc, #432]	@ (8001598 <IMU_Update+0x1f8>)
 80013e8:	edd3 7a00 	vldr	s15, [r3]
 80013ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013f0:	4b69      	ldr	r3, [pc, #420]	@ (8001598 <IMU_Update+0x1f8>)
 80013f2:	edc3 7a00 	vstr	s15, [r3]

	if (s_integratedYaw > 180.0f)  s_integratedYaw -= 360.0f;
 80013f6:	4b68      	ldr	r3, [pc, #416]	@ (8001598 <IMU_Update+0x1f8>)
 80013f8:	edd3 7a00 	vldr	s15, [r3]
 80013fc:	ed9f 7a67 	vldr	s14, [pc, #412]	@ 800159c <IMU_Update+0x1fc>
 8001400:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001404:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001408:	dd09      	ble.n	800141e <IMU_Update+0x7e>
 800140a:	4b63      	ldr	r3, [pc, #396]	@ (8001598 <IMU_Update+0x1f8>)
 800140c:	edd3 7a00 	vldr	s15, [r3]
 8001410:	ed9f 7a63 	vldr	s14, [pc, #396]	@ 80015a0 <IMU_Update+0x200>
 8001414:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001418:	4b5f      	ldr	r3, [pc, #380]	@ (8001598 <IMU_Update+0x1f8>)
 800141a:	edc3 7a00 	vstr	s15, [r3]
	if (s_integratedYaw < -180.0f) s_integratedYaw += 360.0f;
 800141e:	4b5e      	ldr	r3, [pc, #376]	@ (8001598 <IMU_Update+0x1f8>)
 8001420:	edd3 7a00 	vldr	s15, [r3]
 8001424:	ed9f 7a5f 	vldr	s14, [pc, #380]	@ 80015a4 <IMU_Update+0x204>
 8001428:	eef4 7ac7 	vcmpe.f32	s15, s14
 800142c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001430:	d509      	bpl.n	8001446 <IMU_Update+0xa6>
 8001432:	4b59      	ldr	r3, [pc, #356]	@ (8001598 <IMU_Update+0x1f8>)
 8001434:	edd3 7a00 	vldr	s15, [r3]
 8001438:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 80015a0 <IMU_Update+0x200>
 800143c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001440:	4b55      	ldr	r3, [pc, #340]	@ (8001598 <IMU_Update+0x1f8>)
 8001442:	edc3 7a00 	vstr	s15, [r3]

	s_cachedYaw = s_integratedYaw;
 8001446:	4b54      	ldr	r3, [pc, #336]	@ (8001598 <IMU_Update+0x1f8>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4a57      	ldr	r2, [pc, #348]	@ (80015a8 <IMU_Update+0x208>)
 800144c:	6013      	str	r3, [r2, #0]
	s_cachedGyroZ = gyroZ;
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	4a56      	ldr	r2, [pc, #344]	@ (80015ac <IMU_Update+0x20c>)
 8001452:	6013      	str	r3, [r2, #0]

#if IMU_USE_MAG
	s_magElapsedMs += IMU_UPDATE_PERIOD_MS;
 8001454:	4b56      	ldr	r3, [pc, #344]	@ (80015b0 <IMU_Update+0x210>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	330a      	adds	r3, #10
 800145a:	4a55      	ldr	r2, [pc, #340]	@ (80015b0 <IMU_Update+0x210>)
 800145c:	6013      	str	r3, [r2, #0]
	if (s_magElapsedMs >= IMU_MAG_UPDATE_PERIOD_MS) {
 800145e:	4b54      	ldr	r3, [pc, #336]	@ (80015b0 <IMU_Update+0x210>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	2b63      	cmp	r3, #99	@ 0x63
 8001464:	d951      	bls.n	800150a <IMU_Update+0x16a>
		float magXY[2];
		ICM20948_readMagnetometer_XY(hi2c, magXY);
 8001466:	f107 0308 	add.w	r3, r7, #8
 800146a:	4619      	mov	r1, r3
 800146c:	6878      	ldr	r0, [r7, #4]
 800146e:	f7ff ff4f 	bl	8001310 <ICM20948_readMagnetometer_XY>
		float magYaw = atan2f(magXY[1], magXY[0]) * 180.0f / M_PI;
 8001472:	edd7 7a03 	vldr	s15, [r7, #12]
 8001476:	ed97 7a02 	vldr	s14, [r7, #8]
 800147a:	eef0 0a47 	vmov.f32	s1, s14
 800147e:	eeb0 0a67 	vmov.f32	s0, s15
 8001482:	f010 f9c3 	bl	801180c <atan2f>
 8001486:	eef0 7a40 	vmov.f32	s15, s0
 800148a:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 800159c <IMU_Update+0x1fc>
 800148e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001492:	ee17 0a90 	vmov	r0, s15
 8001496:	f7ff f857 	bl	8000548 <__aeabi_f2d>
 800149a:	a33b      	add	r3, pc, #236	@ (adr r3, 8001588 <IMU_Update+0x1e8>)
 800149c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014a0:	f7ff f9d4 	bl	800084c <__aeabi_ddiv>
 80014a4:	4602      	mov	r2, r0
 80014a6:	460b      	mov	r3, r1
 80014a8:	4610      	mov	r0, r2
 80014aa:	4619      	mov	r1, r3
 80014ac:	f7ff fb7c 	bl	8000ba8 <__aeabi_d2f>
 80014b0:	4603      	mov	r3, r0
 80014b2:	61fb      	str	r3, [r7, #28]
		if (magYaw > 180.0f)  magYaw -= 360.0f;
 80014b4:	edd7 7a07 	vldr	s15, [r7, #28]
 80014b8:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 800159c <IMU_Update+0x1fc>
 80014bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014c4:	dd07      	ble.n	80014d6 <IMU_Update+0x136>
 80014c6:	edd7 7a07 	vldr	s15, [r7, #28]
 80014ca:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 80015a0 <IMU_Update+0x200>
 80014ce:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80014d2:	edc7 7a07 	vstr	s15, [r7, #28]
		if (magYaw < -180.0f) magYaw += 360.0f;
 80014d6:	edd7 7a07 	vldr	s15, [r7, #28]
 80014da:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 80015a4 <IMU_Update+0x204>
 80014de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014e6:	d507      	bpl.n	80014f8 <IMU_Update+0x158>
 80014e8:	edd7 7a07 	vldr	s15, [r7, #28]
 80014ec:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 80015a0 <IMU_Update+0x200>
 80014f0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80014f4:	edc7 7a07 	vstr	s15, [r7, #28]

		s_lastMagYaw = magYaw;
 80014f8:	4a2e      	ldr	r2, [pc, #184]	@ (80015b4 <IMU_Update+0x214>)
 80014fa:	69fb      	ldr	r3, [r7, #28]
 80014fc:	6013      	str	r3, [r2, #0]
		s_hasMagYaw = 1U;
 80014fe:	4b2e      	ldr	r3, [pc, #184]	@ (80015b8 <IMU_Update+0x218>)
 8001500:	2201      	movs	r2, #1
 8001502:	701a      	strb	r2, [r3, #0]
		s_magElapsedMs = 0U;
 8001504:	4b2a      	ldr	r3, [pc, #168]	@ (80015b0 <IMU_Update+0x210>)
 8001506:	2200      	movs	r2, #0
 8001508:	601a      	str	r2, [r3, #0]
	}

	if (s_hasMagYaw) {
 800150a:	4b2b      	ldr	r3, [pc, #172]	@ (80015b8 <IMU_Update+0x218>)
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d036      	beq.n	8001580 <IMU_Update+0x1e0>
		float fusedYaw = ALPHA * s_integratedYaw + (1.0f - ALPHA) * s_lastMagYaw;
 8001512:	4b21      	ldr	r3, [pc, #132]	@ (8001598 <IMU_Update+0x1f8>)
 8001514:	edd3 7a00 	vldr	s15, [r3]
 8001518:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 80015bc <IMU_Update+0x21c>
 800151c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001520:	4b24      	ldr	r3, [pc, #144]	@ (80015b4 <IMU_Update+0x214>)
 8001522:	edd3 7a00 	vldr	s15, [r3]
 8001526:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80015c0 <IMU_Update+0x220>
 800152a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800152e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001532:	edc7 7a06 	vstr	s15, [r7, #24]
		if (fusedYaw > 180.0f)  fusedYaw -= 360.0f;
 8001536:	edd7 7a06 	vldr	s15, [r7, #24]
 800153a:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800159c <IMU_Update+0x1fc>
 800153e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001542:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001546:	dd07      	ble.n	8001558 <IMU_Update+0x1b8>
 8001548:	edd7 7a06 	vldr	s15, [r7, #24]
 800154c:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 80015a0 <IMU_Update+0x200>
 8001550:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001554:	edc7 7a06 	vstr	s15, [r7, #24]
		if (fusedYaw < -180.0f) fusedYaw += 360.0f;
 8001558:	edd7 7a06 	vldr	s15, [r7, #24]
 800155c:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 80015a4 <IMU_Update+0x204>
 8001560:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001564:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001568:	d507      	bpl.n	800157a <IMU_Update+0x1da>
 800156a:	edd7 7a06 	vldr	s15, [r7, #24]
 800156e:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 80015a0 <IMU_Update+0x200>
 8001572:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001576:	edc7 7a06 	vstr	s15, [r7, #24]
		s_cachedYaw = fusedYaw;
 800157a:	4a0b      	ldr	r2, [pc, #44]	@ (80015a8 <IMU_Update+0x208>)
 800157c:	69bb      	ldr	r3, [r7, #24]
 800157e:	6013      	str	r3, [r2, #0]
	}
#endif
}
 8001580:	bf00      	nop
 8001582:	3720      	adds	r7, #32
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	54442d18 	.word	0x54442d18
 800158c:	400921fb 	.word	0x400921fb
 8001590:	20000204 	.word	0x20000204
 8001594:	3c23d70a 	.word	0x3c23d70a
 8001598:	20000208 	.word	0x20000208
 800159c:	43340000 	.word	0x43340000
 80015a0:	43b40000 	.word	0x43b40000
 80015a4:	c3340000 	.word	0xc3340000
 80015a8:	2000020c 	.word	0x2000020c
 80015ac:	20000210 	.word	0x20000210
 80015b0:	20000000 	.word	0x20000000
 80015b4:	20000214 	.word	0x20000214
 80015b8:	20000218 	.word	0x20000218
 80015bc:	3f7eb852 	.word	0x3f7eb852
 80015c0:	3ba3d700 	.word	0x3ba3d700

080015c4 <IMU_GetYawLatest>:

float IMU_GetYawLatest(void) {
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
	return s_cachedYaw;
 80015c8:	4b04      	ldr	r3, [pc, #16]	@ (80015dc <IMU_GetYawLatest+0x18>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	ee07 3a90 	vmov	s15, r3
}
 80015d0:	eeb0 0a67 	vmov.f32	s0, s15
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr
 80015dc:	2000020c 	.word	0x2000020c

080015e0 <IMU_GetGyroZLatest>:

float IMU_GetGyroZLatest(void) {
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
	return s_cachedGyroZ;
 80015e4:	4b04      	ldr	r3, [pc, #16]	@ (80015f8 <IMU_GetGyroZLatest+0x18>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	ee07 3a90 	vmov	s15, r3
}
 80015ec:	eeb0 0a67 	vmov.f32	s0, s15
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr
 80015f8:	20000210 	.word	0x20000210

080015fc <IMU_CalibrateGyroZ>:
	(void)selectGyroSensitivity;
	return IMU_GetYawLatest();
}


void IMU_CalibrateGyroZ(I2C_HandleTypeDef *hi2c, uint8_t addr, uint8_t gyroFS) {
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b086      	sub	sp, #24
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
 8001604:	460b      	mov	r3, r1
 8001606:	70fb      	strb	r3, [r7, #3]
 8001608:	4613      	mov	r3, r2
 800160a:	70bb      	strb	r3, [r7, #2]
    float sum = 0, gZ;
 800160c:	f04f 0300 	mov.w	r3, #0
 8001610:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < 500; i++) {
 8001612:	2300      	movs	r3, #0
 8001614:	613b      	str	r3, [r7, #16]
 8001616:	e014      	b.n	8001642 <IMU_CalibrateGyroZ+0x46>
        ICM20948_readGyroscope_Z(hi2c, addr, gyroFS, &gZ);
 8001618:	f107 030c 	add.w	r3, r7, #12
 800161c:	78ba      	ldrb	r2, [r7, #2]
 800161e:	78f9      	ldrb	r1, [r7, #3]
 8001620:	6878      	ldr	r0, [r7, #4]
 8001622:	f7ff fe0b 	bl	800123c <ICM20948_readGyroscope_Z>
        sum += gZ;
 8001626:	edd7 7a03 	vldr	s15, [r7, #12]
 800162a:	ed97 7a05 	vldr	s14, [r7, #20]
 800162e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001632:	edc7 7a05 	vstr	s15, [r7, #20]
        HAL_Delay(2);
 8001636:	2002      	movs	r0, #2
 8001638:	f004 f9de 	bl	80059f8 <HAL_Delay>
    for (int i = 0; i < 500; i++) {
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	3301      	adds	r3, #1
 8001640:	613b      	str	r3, [r7, #16]
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001648:	dbe6      	blt.n	8001618 <IMU_CalibrateGyroZ+0x1c>
    }
    gyroBiasZ = sum / 500.0f;
 800164a:	ed97 7a05 	vldr	s14, [r7, #20]
 800164e:	eddf 6a10 	vldr	s13, [pc, #64]	@ 8001690 <IMU_CalibrateGyroZ+0x94>
 8001652:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001656:	4b0f      	ldr	r3, [pc, #60]	@ (8001694 <IMU_CalibrateGyroZ+0x98>)
 8001658:	edc3 7a00 	vstr	s15, [r3]
	s_integratedYaw = 0.0f;
 800165c:	4b0e      	ldr	r3, [pc, #56]	@ (8001698 <IMU_CalibrateGyroZ+0x9c>)
 800165e:	f04f 0200 	mov.w	r2, #0
 8001662:	601a      	str	r2, [r3, #0]
	s_cachedYaw = 0.0f;
 8001664:	4b0d      	ldr	r3, [pc, #52]	@ (800169c <IMU_CalibrateGyroZ+0xa0>)
 8001666:	f04f 0200 	mov.w	r2, #0
 800166a:	601a      	str	r2, [r3, #0]
	s_cachedGyroZ = 0.0f;
 800166c:	4b0c      	ldr	r3, [pc, #48]	@ (80016a0 <IMU_CalibrateGyroZ+0xa4>)
 800166e:	f04f 0200 	mov.w	r2, #0
 8001672:	601a      	str	r2, [r3, #0]
#if IMU_USE_MAG
	s_lastMagYaw = 0.0f;
 8001674:	4b0b      	ldr	r3, [pc, #44]	@ (80016a4 <IMU_CalibrateGyroZ+0xa8>)
 8001676:	f04f 0200 	mov.w	r2, #0
 800167a:	601a      	str	r2, [r3, #0]
	s_magElapsedMs = IMU_MAG_UPDATE_PERIOD_MS;
 800167c:	4b0a      	ldr	r3, [pc, #40]	@ (80016a8 <IMU_CalibrateGyroZ+0xac>)
 800167e:	2264      	movs	r2, #100	@ 0x64
 8001680:	601a      	str	r2, [r3, #0]
	s_hasMagYaw = 0U;
 8001682:	4b0a      	ldr	r3, [pc, #40]	@ (80016ac <IMU_CalibrateGyroZ+0xb0>)
 8001684:	2200      	movs	r2, #0
 8001686:	701a      	strb	r2, [r3, #0]
#endif
}
 8001688:	bf00      	nop
 800168a:	3718      	adds	r7, #24
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	43fa0000 	.word	0x43fa0000
 8001694:	20000204 	.word	0x20000204
 8001698:	20000208 	.word	0x20000208
 800169c:	2000020c 	.word	0x2000020c
 80016a0:	20000210 	.word	0x20000210
 80016a4:	20000214 	.word	0x20000214
 80016a8:	20000000 	.word	0x20000000
 80016ac:	20000218 	.word	0x20000218

080016b0 <IR_ReadVDDA_Vrefint>:
 */
#define VREFINT_CAL_ADDR   ((uint16_t*) (0x1FFF7A2AUL))
#define VREFINT_CAL_VREF   (3.3f)   /* Factory reference voltage for the stored cal value */

float IR_ReadVDDA_Vrefint(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b086      	sub	sp, #24
 80016b4:	af00      	add	r7, sp, #0
  /* Configure and read ADC_CHANNEL_VREFINT */
  ADC_ChannelConfTypeDef sConfig = {0};
 80016b6:	463b      	mov	r3, r7
 80016b8:	2200      	movs	r2, #0
 80016ba:	601a      	str	r2, [r3, #0]
 80016bc:	605a      	str	r2, [r3, #4]
 80016be:	609a      	str	r2, [r3, #8]
 80016c0:	60da      	str	r2, [r3, #12]
  sConfig.Channel      = ADC_CHANNEL_VREFINT;
 80016c2:	2311      	movs	r3, #17
 80016c4:	603b      	str	r3, [r7, #0]
  sConfig.Rank         = ADC_REGULAR_RANK_1;
 80016c6:	2301      	movs	r3, #1
 80016c8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES; /* Long sample time recommended */
 80016ca:	2307      	movs	r3, #7
 80016cc:	60bb      	str	r3, [r7, #8]

  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80016ce:	463b      	mov	r3, r7
 80016d0:	4619      	mov	r1, r3
 80016d2:	4822      	ldr	r0, [pc, #136]	@ (800175c <IR_ReadVDDA_Vrefint+0xac>)
 80016d4:	f004 fb96 	bl	8005e04 <HAL_ADC_ConfigChannel>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <IR_ReadVDDA_Vrefint+0x32>
    Error_Handler();
 80016de:	f001 fce7 	bl	80030b0 <Error_Handler>
  }

  HAL_ADC_Start(&hadc1);
 80016e2:	481e      	ldr	r0, [pc, #120]	@ (800175c <IR_ReadVDDA_Vrefint+0xac>)
 80016e4:	f004 f9f0 	bl	8005ac8 <HAL_ADC_Start>
  if (HAL_ADC_PollForConversion(&hadc1, 10) != HAL_OK) {
 80016e8:	210a      	movs	r1, #10
 80016ea:	481c      	ldr	r0, [pc, #112]	@ (800175c <IR_ReadVDDA_Vrefint+0xac>)
 80016ec:	f004 faf1 	bl	8005cd2 <HAL_ADC_PollForConversion>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d004      	beq.n	8001700 <IR_ReadVDDA_Vrefint+0x50>
    HAL_ADC_Stop(&hadc1);
 80016f6:	4819      	ldr	r0, [pc, #100]	@ (800175c <IR_ReadVDDA_Vrefint+0xac>)
 80016f8:	f004 fab8 	bl	8005c6c <HAL_ADC_Stop>
    return 3.3f; /* Fallback */
 80016fc:	4b18      	ldr	r3, [pc, #96]	@ (8001760 <IR_ReadVDDA_Vrefint+0xb0>)
 80016fe:	e025      	b.n	800174c <IR_ReadVDDA_Vrefint+0x9c>
  }
  uint16_t vref_raw = (uint16_t)HAL_ADC_GetValue(&hadc1);
 8001700:	4816      	ldr	r0, [pc, #88]	@ (800175c <IR_ReadVDDA_Vrefint+0xac>)
 8001702:	f004 fb71 	bl	8005de8 <HAL_ADC_GetValue>
 8001706:	4603      	mov	r3, r0
 8001708:	82fb      	strh	r3, [r7, #22]
  HAL_ADC_Stop(&hadc1);
 800170a:	4814      	ldr	r0, [pc, #80]	@ (800175c <IR_ReadVDDA_Vrefint+0xac>)
 800170c:	f004 faae 	bl	8005c6c <HAL_ADC_Stop>

  uint16_t vrefint_cal = *VREFINT_CAL_ADDR;
 8001710:	4b14      	ldr	r3, [pc, #80]	@ (8001764 <IR_ReadVDDA_Vrefint+0xb4>)
 8001712:	881b      	ldrh	r3, [r3, #0]
 8001714:	82bb      	strh	r3, [r7, #20]
  if (vref_raw == 0 || vrefint_cal == 0) return 3.3f; /* guard */
 8001716:	8afb      	ldrh	r3, [r7, #22]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d002      	beq.n	8001722 <IR_ReadVDDA_Vrefint+0x72>
 800171c:	8abb      	ldrh	r3, [r7, #20]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d101      	bne.n	8001726 <IR_ReadVDDA_Vrefint+0x76>
 8001722:	4b0f      	ldr	r3, [pc, #60]	@ (8001760 <IR_ReadVDDA_Vrefint+0xb0>)
 8001724:	e012      	b.n	800174c <IR_ReadVDDA_Vrefint+0x9c>

  /* VDDA ≈ VREF_CAL_VOLT * (VREFINT_CAL / VREFINT_RAW) */
  float vdda = VREFINT_CAL_VREF * ((float)vrefint_cal / (float)vref_raw);
 8001726:	8abb      	ldrh	r3, [r7, #20]
 8001728:	ee07 3a90 	vmov	s15, r3
 800172c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001730:	8afb      	ldrh	r3, [r7, #22]
 8001732:	ee07 3a90 	vmov	s15, r3
 8001736:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800173a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800173e:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8001768 <IR_ReadVDDA_Vrefint+0xb8>
 8001742:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001746:	edc7 7a04 	vstr	s15, [r7, #16]
  return vdda;
 800174a:	693b      	ldr	r3, [r7, #16]
}
 800174c:	ee07 3a90 	vmov	s15, r3
 8001750:	eeb0 0a67 	vmov.f32	s0, s15
 8001754:	3718      	adds	r7, #24
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	2000027c 	.word	0x2000027c
 8001760:	40533333 	.word	0x40533333
 8001764:	1fff7a2a 	.word	0x1fff7a2a
 8001768:	40533333 	.word	0x40533333

0800176c <ADC1_Read_Channel>:
  * @brief  Reads a single ADC channel on ADC1 in blocking mode.
  * @param  channel: The ADC channel to read (e.g., ADC_CHANNEL_4, ADC_CHANNEL_5).
  * @retval The 12-bit ADC conversion result.
  */
uint16_t ADC1_Read_Channel(uint32_t channel)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b088      	sub	sp, #32
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001774:	f107 030c 	add.w	r3, r7, #12
 8001778:	2200      	movs	r2, #0
 800177a:	601a      	str	r2, [r3, #0]
 800177c:	605a      	str	r2, [r3, #4]
 800177e:	609a      	str	r2, [r3, #8]
 8001780:	60da      	str	r2, [r3, #12]

  sConfig.Channel      = channel;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	60fb      	str	r3, [r7, #12]
  sConfig.Rank         = ADC_REGULAR_RANK_1;
 8001786:	2301      	movs	r3, #1
 8001788:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES; // Match your CubeMX setting
 800178a:	2307      	movs	r3, #7
 800178c:	617b      	str	r3, [r7, #20]

  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800178e:	f107 030c 	add.w	r3, r7, #12
 8001792:	4619      	mov	r1, r3
 8001794:	480d      	ldr	r0, [pc, #52]	@ (80017cc <ADC1_Read_Channel+0x60>)
 8001796:	f004 fb35 	bl	8005e04 <HAL_ADC_ConfigChannel>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d001      	beq.n	80017a4 <ADC1_Read_Channel+0x38>
    Error_Handler();
 80017a0:	f001 fc86 	bl	80030b0 <Error_Handler>
  }

  HAL_ADC_Start(&hadc1);
 80017a4:	4809      	ldr	r0, [pc, #36]	@ (80017cc <ADC1_Read_Channel+0x60>)
 80017a6:	f004 f98f 	bl	8005ac8 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc1, 10); // 10ms timeout
 80017aa:	210a      	movs	r1, #10
 80017ac:	4807      	ldr	r0, [pc, #28]	@ (80017cc <ADC1_Read_Channel+0x60>)
 80017ae:	f004 fa90 	bl	8005cd2 <HAL_ADC_PollForConversion>
  uint16_t adc_value = (uint16_t)HAL_ADC_GetValue(&hadc1);
 80017b2:	4806      	ldr	r0, [pc, #24]	@ (80017cc <ADC1_Read_Channel+0x60>)
 80017b4:	f004 fb18 	bl	8005de8 <HAL_ADC_GetValue>
 80017b8:	4603      	mov	r3, r0
 80017ba:	83fb      	strh	r3, [r7, #30]
  HAL_ADC_Stop(&hadc1);
 80017bc:	4803      	ldr	r0, [pc, #12]	@ (80017cc <ADC1_Read_Channel+0x60>)
 80017be:	f004 fa55 	bl	8005c6c <HAL_ADC_Stop>

  return adc_value;
 80017c2:	8bfb      	ldrh	r3, [r7, #30]
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	3720      	adds	r7, #32
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	2000027c 	.word	0x2000027c

080017d0 <IR_RawToVolts>:

float IR_RawToVolts(uint16_t raw, float vref)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	4603      	mov	r3, r0
 80017d8:	ed87 0a00 	vstr	s0, [r7]
 80017dc:	80fb      	strh	r3, [r7, #6]
  return (vref * (float)raw) / 4095.0f;
 80017de:	88fb      	ldrh	r3, [r7, #6]
 80017e0:	ee07 3a90 	vmov	s15, r3
 80017e4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80017e8:	edd7 7a00 	vldr	s15, [r7]
 80017ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017f0:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 800180c <IR_RawToVolts+0x3c>
 80017f4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80017f8:	eef0 7a66 	vmov.f32	s15, s13
}
 80017fc:	eeb0 0a67 	vmov.f32	s0, s15
 8001800:	370c      	adds	r7, #12
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop
 800180c:	457ff000 	.word	0x457ff000

08001810 <IR_VoltsToCm>:
 * GP2Y0A21YK0F typical anchors (approx. datasheet curve):
 *  (V,d): (3.0,10), (1.6,20), (1.2,30), (0.9,40), (0.6,60), (0.45,80)
 * The curve is monotonic in ~10–80 cm. We clamp outside.
 */
float IR_VoltsToCm(float v)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b08c      	sub	sp, #48	@ 0x30
 8001814:	af00      	add	r7, sp, #0
 8001816:	ed87 0a01 	vstr	s0, [r7, #4]
  /* Hard clamps around trustworthy region */
  if (v <= 0.40f) return 80.0f;  /* Out of range (far) */
 800181a:	edd7 7a01 	vldr	s15, [r7, #4]
 800181e:	ed9f 7a70 	vldr	s14, [pc, #448]	@ 80019e0 <IR_VoltsToCm+0x1d0>
 8001822:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001826:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800182a:	d801      	bhi.n	8001830 <IR_VoltsToCm+0x20>
 800182c:	4b6d      	ldr	r3, [pc, #436]	@ (80019e4 <IR_VoltsToCm+0x1d4>)
 800182e:	e0d0      	b.n	80019d2 <IR_VoltsToCm+0x1c2>
  if (v >= 2.80f) return 10.0f;  /* Very near / foldback area */
 8001830:	edd7 7a01 	vldr	s15, [r7, #4]
 8001834:	ed9f 7a6c 	vldr	s14, [pc, #432]	@ 80019e8 <IR_VoltsToCm+0x1d8>
 8001838:	eef4 7ac7 	vcmpe.f32	s15, s14
 800183c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001840:	db01      	blt.n	8001846 <IR_VoltsToCm+0x36>
 8001842:	4b6a      	ldr	r3, [pc, #424]	@ (80019ec <IR_VoltsToCm+0x1dc>)
 8001844:	e0c5      	b.n	80019d2 <IR_VoltsToCm+0x1c2>

  static const float V[] = { 3.00f, 1.60f, 1.20f, 0.90f, 0.60f, 0.45f }; /* descending */
  static const float D[] = { 10.0f, 20.0f, 30.0f, 40.0f, 60.0f, 80.0f };
  const int N = (int)(sizeof(V)/sizeof(V[0]));
 8001846:	2306      	movs	r3, #6
 8001848:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Find segment: V[i] >= v >= V[i+1] */
  int i = 0;
 800184a:	2300      	movs	r3, #0
 800184c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (i < N - 1 && !(v <= V[i] && v >= V[i+1])) i++;
 800184e:	e002      	b.n	8001856 <IR_VoltsToCm+0x46>
 8001850:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001852:	3301      	adds	r3, #1
 8001854:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001858:	3b01      	subs	r3, #1
 800185a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800185c:	429a      	cmp	r2, r3
 800185e:	da2a      	bge.n	80018b6 <IR_VoltsToCm+0xa6>
 8001860:	4a63      	ldr	r2, [pc, #396]	@ (80019f0 <IR_VoltsToCm+0x1e0>)
 8001862:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001864:	009b      	lsls	r3, r3, #2
 8001866:	4413      	add	r3, r2
 8001868:	edd3 7a00 	vldr	s15, [r3]
 800186c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001870:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001874:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001878:	bf94      	ite	ls
 800187a:	2301      	movls	r3, #1
 800187c:	2300      	movhi	r3, #0
 800187e:	b2db      	uxtb	r3, r3
 8001880:	f083 0301 	eor.w	r3, r3, #1
 8001884:	b2db      	uxtb	r3, r3
 8001886:	2b00      	cmp	r3, #0
 8001888:	d1e2      	bne.n	8001850 <IR_VoltsToCm+0x40>
 800188a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800188c:	3301      	adds	r3, #1
 800188e:	4a58      	ldr	r2, [pc, #352]	@ (80019f0 <IR_VoltsToCm+0x1e0>)
 8001890:	009b      	lsls	r3, r3, #2
 8001892:	4413      	add	r3, r2
 8001894:	edd3 7a00 	vldr	s15, [r3]
 8001898:	ed97 7a01 	vldr	s14, [r7, #4]
 800189c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80018a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018a4:	bfac      	ite	ge
 80018a6:	2301      	movge	r3, #1
 80018a8:	2300      	movlt	r3, #0
 80018aa:	b2db      	uxtb	r3, r3
 80018ac:	f083 0301 	eor.w	r3, r3, #1
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d1cc      	bne.n	8001850 <IR_VoltsToCm+0x40>
  if (i >= N - 1) {
 80018b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018b8:	3b01      	subs	r3, #1
 80018ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80018bc:	429a      	cmp	r2, r3
 80018be:	db13      	blt.n	80018e8 <IR_VoltsToCm+0xd8>
    /* Shouldn't happen due to early clamps, but guard anyway */
    return (v > V[0]) ? D[0] : D[N - 1];
 80018c0:	4b4b      	ldr	r3, [pc, #300]	@ (80019f0 <IR_VoltsToCm+0x1e0>)
 80018c2:	edd3 7a00 	vldr	s15, [r3]
 80018c6:	ed97 7a01 	vldr	s14, [r7, #4]
 80018ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80018ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018d2:	dd02      	ble.n	80018da <IR_VoltsToCm+0xca>
 80018d4:	4b47      	ldr	r3, [pc, #284]	@ (80019f4 <IR_VoltsToCm+0x1e4>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	e07b      	b.n	80019d2 <IR_VoltsToCm+0x1c2>
 80018da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018dc:	3b01      	subs	r3, #1
 80018de:	4a45      	ldr	r2, [pc, #276]	@ (80019f4 <IR_VoltsToCm+0x1e4>)
 80018e0:	009b      	lsls	r3, r3, #2
 80018e2:	4413      	add	r3, r2
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	e074      	b.n	80019d2 <IR_VoltsToCm+0x1c2>
  }

  /* Linear interpolation in log-log space for better power-law fit */
  float lv  = logf(v);
 80018e8:	ed97 0a01 	vldr	s0, [r7, #4]
 80018ec:	f00f ffc6 	bl	801187c <logf>
 80018f0:	ed87 0a08 	vstr	s0, [r7, #32]
  float lv0 = logf(V[i]);
 80018f4:	4a3e      	ldr	r2, [pc, #248]	@ (80019f0 <IR_VoltsToCm+0x1e0>)
 80018f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018f8:	009b      	lsls	r3, r3, #2
 80018fa:	4413      	add	r3, r2
 80018fc:	edd3 7a00 	vldr	s15, [r3]
 8001900:	eeb0 0a67 	vmov.f32	s0, s15
 8001904:	f00f ffba 	bl	801187c <logf>
 8001908:	ed87 0a07 	vstr	s0, [r7, #28]
  float lv1 = logf(V[i+1]);
 800190c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800190e:	3301      	adds	r3, #1
 8001910:	4a37      	ldr	r2, [pc, #220]	@ (80019f0 <IR_VoltsToCm+0x1e0>)
 8001912:	009b      	lsls	r3, r3, #2
 8001914:	4413      	add	r3, r2
 8001916:	edd3 7a00 	vldr	s15, [r3]
 800191a:	eeb0 0a67 	vmov.f32	s0, s15
 800191e:	f00f ffad 	bl	801187c <logf>
 8001922:	ed87 0a06 	vstr	s0, [r7, #24]
  float ld0 = logf(D[i]);
 8001926:	4a33      	ldr	r2, [pc, #204]	@ (80019f4 <IR_VoltsToCm+0x1e4>)
 8001928:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800192a:	009b      	lsls	r3, r3, #2
 800192c:	4413      	add	r3, r2
 800192e:	edd3 7a00 	vldr	s15, [r3]
 8001932:	eeb0 0a67 	vmov.f32	s0, s15
 8001936:	f00f ffa1 	bl	801187c <logf>
 800193a:	ed87 0a05 	vstr	s0, [r7, #20]
  float ld1 = logf(D[i+1]);
 800193e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001940:	3301      	adds	r3, #1
 8001942:	4a2c      	ldr	r2, [pc, #176]	@ (80019f4 <IR_VoltsToCm+0x1e4>)
 8001944:	009b      	lsls	r3, r3, #2
 8001946:	4413      	add	r3, r2
 8001948:	edd3 7a00 	vldr	s15, [r3]
 800194c:	eeb0 0a67 	vmov.f32	s0, s15
 8001950:	f00f ff94 	bl	801187c <logf>
 8001954:	ed87 0a04 	vstr	s0, [r7, #16]

  float t   = (lv - lv0) / (lv1 - lv0);
 8001958:	ed97 7a08 	vldr	s14, [r7, #32]
 800195c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001960:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001964:	ed97 7a06 	vldr	s14, [r7, #24]
 8001968:	edd7 7a07 	vldr	s15, [r7, #28]
 800196c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001970:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001974:	edc7 7a03 	vstr	s15, [r7, #12]
  float ld  = ld0 + t * (ld1 - ld0);
 8001978:	ed97 7a04 	vldr	s14, [r7, #16]
 800197c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001980:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001984:	edd7 7a03 	vldr	s15, [r7, #12]
 8001988:	ee67 7a27 	vmul.f32	s15, s14, s15
 800198c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001990:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001994:	edc7 7a02 	vstr	s15, [r7, #8]
  float d   = expf(ld);
 8001998:	ed97 0a02 	vldr	s0, [r7, #8]
 800199c:	f00f ff38 	bl	8011810 <expf>
 80019a0:	ed87 0a0a 	vstr	s0, [r7, #40]	@ 0x28

  /* Final safety clamp */
  if (d < 10.0f) d = 10.0f;
 80019a4:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80019a8:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80019ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019b4:	d501      	bpl.n	80019ba <IR_VoltsToCm+0x1aa>
 80019b6:	4b0d      	ldr	r3, [pc, #52]	@ (80019ec <IR_VoltsToCm+0x1dc>)
 80019b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (d > 80.0f) d = 80.0f;
 80019ba:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80019be:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 80019f8 <IR_VoltsToCm+0x1e8>
 80019c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019ca:	dd01      	ble.n	80019d0 <IR_VoltsToCm+0x1c0>
 80019cc:	4b05      	ldr	r3, [pc, #20]	@ (80019e4 <IR_VoltsToCm+0x1d4>)
 80019ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  return d;
 80019d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
}
 80019d2:	ee07 3a90 	vmov	s15, r3
 80019d6:	eeb0 0a67 	vmov.f32	s0, s15
 80019da:	3730      	adds	r7, #48	@ 0x30
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	3ecccccd 	.word	0x3ecccccd
 80019e4:	42a00000 	.word	0x42a00000
 80019e8:	40333333 	.word	0x40333333
 80019ec:	41200000 	.word	0x41200000
 80019f0:	080120b8 	.word	0x080120b8
 80019f4:	080120d0 	.word	0x080120d0
 80019f8:	42a00000 	.word	0x42a00000

080019fc <Parser_Init>:
/**
 * @brief Initializes the parser with the handle to the motor task's message queue.
 * @param motor_queue The osMessageQueueId_t for the motor task.
 */
void Parser_Init(osMessageQueueId_t motor_queue)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b083      	sub	sp, #12
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
    motor_message_queue = motor_queue;
 8001a04:	4a04      	ldr	r2, [pc, #16]	@ (8001a18 <Parser_Init+0x1c>)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6013      	str	r3, [r2, #0]
}
 8001a0a:	bf00      	nop
 8001a0c:	370c      	adds	r7, #12
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr
 8001a16:	bf00      	nop
 8001a18:	2000021c 	.word	0x2000021c

08001a1c <Parser_Process>:
/**
 * @brief Processes one incoming message from the UART queue.
 * @note This function is designed to be called repeatedly in a loop from StartCommunicateTask.
 */
void Parser_Process(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	af00      	add	r7, sp, #0
    // Check for a message with a short timeout, so this function doesn't block the system.
    if (osMessageQueueGet(uart_rx_msg_queue, &uart_rx_msg, NULL, 10) == osOK)
 8001a20:	4b36      	ldr	r3, [pc, #216]	@ (8001afc <Parser_Process+0xe0>)
 8001a22:	6818      	ldr	r0, [r3, #0]
 8001a24:	230a      	movs	r3, #10
 8001a26:	2200      	movs	r2, #0
 8001a28:	4935      	ldr	r1, [pc, #212]	@ (8001b00 <Parser_Process+0xe4>)
 8001a2a:	f00a f95b 	bl	800bce4 <osMessageQueueGet>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d162      	bne.n	8001afa <Parser_Process+0xde>
    {
        // 1) Frame guard: Check start and end characters
        if (uart_rx_msg.buffer[0] != START_CHAR || uart_rx_msg.buffer[9] != END_CHAR) {
 8001a34:	4b32      	ldr	r3, [pc, #200]	@ (8001b00 <Parser_Process+0xe4>)
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	2b78      	cmp	r3, #120	@ 0x78
 8001a3a:	d103      	bne.n	8001a44 <Parser_Process+0x28>
 8001a3c:	4b30      	ldr	r3, [pc, #192]	@ (8001b00 <Parser_Process+0xe4>)
 8001a3e:	7a5b      	ldrb	r3, [r3, #9]
 8001a40:	2b7a      	cmp	r3, #122	@ 0x7a
 8001a42:	d006      	beq.n	8001a52 <Parser_Process+0x36>
            HAL_UART_Transmit(&huart3, (uint8_t*)NACK_MSG, strlen(NACK_MSG), 100);
 8001a44:	2364      	movs	r3, #100	@ 0x64
 8001a46:	2204      	movs	r2, #4
 8001a48:	492e      	ldr	r1, [pc, #184]	@ (8001b04 <Parser_Process+0xe8>)
 8001a4a:	482f      	ldr	r0, [pc, #188]	@ (8001b08 <Parser_Process+0xec>)
 8001a4c:	f008 fd84 	bl	800a558 <HAL_UART_Transmit>
            return;
 8001a50:	e053      	b.n	8001afa <Parser_Process+0xde>
        }

        // 2) Handle Requests (data queries)
        if (uart_rx_msg.buffer[1] == REQ_CHAR) {
 8001a52:	4b2b      	ldr	r3, [pc, #172]	@ (8001b00 <Parser_Process+0xe4>)
 8001a54:	785b      	ldrb	r3, [r3, #1]
 8001a56:	2b71      	cmp	r3, #113	@ 0x71
 8001a58:	d110      	bne.n	8001a7c <Parser_Process+0x60>
            if (uart_rx_msg.buffer[2] == SENSOR_CHAR) {
 8001a5a:	4b29      	ldr	r3, [pc, #164]	@ (8001b00 <Parser_Process+0xe4>)
 8001a5c:	789b      	ldrb	r3, [r3, #2]
 8001a5e:	2b73      	cmp	r3, #115	@ 0x73
 8001a60:	d105      	bne.n	8001a6e <Parser_Process+0x52>
                return_sensor_request_cmd(uart_rx_msg.buffer[3]);
 8001a62:	4b27      	ldr	r3, [pc, #156]	@ (8001b00 <Parser_Process+0xe4>)
 8001a64:	78db      	ldrb	r3, [r3, #3]
 8001a66:	4618      	mov	r0, r3
 8001a68:	f000 f856 	bl	8001b18 <return_sensor_request_cmd>
            } else {
                HAL_UART_Transmit(&huart3, (uint8_t*)NACK_MSG, strlen(NACK_MSG), 100);
            }
            return;
 8001a6c:	e045      	b.n	8001afa <Parser_Process+0xde>
                HAL_UART_Transmit(&huart3, (uint8_t*)NACK_MSG, strlen(NACK_MSG), 100);
 8001a6e:	2364      	movs	r3, #100	@ 0x64
 8001a70:	2204      	movs	r2, #4
 8001a72:	4924      	ldr	r1, [pc, #144]	@ (8001b04 <Parser_Process+0xe8>)
 8001a74:	4824      	ldr	r0, [pc, #144]	@ (8001b08 <Parser_Process+0xec>)
 8001a76:	f008 fd6f 	bl	800a558 <HAL_UART_Transmit>
            return;
 8001a7a:	e03e      	b.n	8001afa <Parser_Process+0xde>
        }

        // 3) Handle Commands (actions)
        if (uart_rx_msg.buffer[1] == CMD_CHAR) {
 8001a7c:	4b20      	ldr	r3, [pc, #128]	@ (8001b00 <Parser_Process+0xe4>)
 8001a7e:	785b      	ldrb	r3, [r3, #1]
 8001a80:	2b63      	cmp	r3, #99	@ 0x63
 8001a82:	d134      	bne.n	8001aee <Parser_Process+0xd2>
            switch (uart_rx_msg.buffer[2]) {
 8001a84:	4b1e      	ldr	r3, [pc, #120]	@ (8001b00 <Parser_Process+0xe4>)
 8001a86:	789b      	ldrb	r3, [r3, #2]
 8001a88:	2b73      	cmp	r3, #115	@ 0x73
 8001a8a:	d021      	beq.n	8001ad0 <Parser_Process+0xb4>
 8001a8c:	2b73      	cmp	r3, #115	@ 0x73
 8001a8e:	dc26      	bgt.n	8001ade <Parser_Process+0xc2>
 8001a90:	2b61      	cmp	r3, #97	@ 0x61
 8001a92:	d01d      	beq.n	8001ad0 <Parser_Process+0xb4>
 8001a94:	2b6d      	cmp	r3, #109	@ 0x6d
 8001a96:	d122      	bne.n	8001ade <Parser_Process+0xc2>
                case MOTOR_CHAR:
                    // Try to decode the command into a motion packet
                    if (get_motion_cmd_from_bytes(uart_rx_msg.buffer, &motion_packet)) {
 8001a98:	491c      	ldr	r1, [pc, #112]	@ (8001b0c <Parser_Process+0xf0>)
 8001a9a:	4819      	ldr	r0, [pc, #100]	@ (8001b00 <Parser_Process+0xe4>)
 8001a9c:	f000 f8a2 	bl	8001be4 <get_motion_cmd_from_bytes>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d00d      	beq.n	8001ac2 <Parser_Process+0xa6>
                        // If successful, send it to the motor task
                        osMessageQueuePut(motor_message_queue, &motion_packet, 0, 0);
 8001aa6:	4b1a      	ldr	r3, [pc, #104]	@ (8001b10 <Parser_Process+0xf4>)
 8001aa8:	6818      	ldr	r0, [r3, #0]
 8001aaa:	2300      	movs	r3, #0
 8001aac:	2200      	movs	r2, #0
 8001aae:	4917      	ldr	r1, [pc, #92]	@ (8001b0c <Parser_Process+0xf0>)
 8001ab0:	f00a f8b8 	bl	800bc24 <osMessageQueuePut>
                        HAL_UART_Transmit(&huart3, (uint8_t*)ACK_MSG, strlen(ACK_MSG), 100);
 8001ab4:	2364      	movs	r3, #100	@ 0x64
 8001ab6:	2203      	movs	r2, #3
 8001ab8:	4916      	ldr	r1, [pc, #88]	@ (8001b14 <Parser_Process+0xf8>)
 8001aba:	4813      	ldr	r0, [pc, #76]	@ (8001b08 <Parser_Process+0xec>)
 8001abc:	f008 fd4c 	bl	800a558 <HAL_UART_Transmit>
                    } else {
                        // If decoding fails
                        HAL_UART_Transmit(&huart3, (uint8_t*)NACK_MSG, strlen(NACK_MSG), 100);
                    }
                    break;
 8001ac0:	e014      	b.n	8001aec <Parser_Process+0xd0>
                        HAL_UART_Transmit(&huart3, (uint8_t*)NACK_MSG, strlen(NACK_MSG), 100);
 8001ac2:	2364      	movs	r3, #100	@ 0x64
 8001ac4:	2204      	movs	r2, #4
 8001ac6:	490f      	ldr	r1, [pc, #60]	@ (8001b04 <Parser_Process+0xe8>)
 8001ac8:	480f      	ldr	r0, [pc, #60]	@ (8001b08 <Parser_Process+0xec>)
 8001aca:	f008 fd45 	bl	800a558 <HAL_UART_Transmit>
                    break;
 8001ace:	e00d      	b.n	8001aec <Parser_Process+0xd0>

                // Placeholder for other command modules
                case SENSOR_CHAR:
                case AUX_CHAR:
                    // Acknowledge but do nothing for now
                    HAL_UART_Transmit(&huart3, (uint8_t*)ACK_MSG, strlen(ACK_MSG), 100);
 8001ad0:	2364      	movs	r3, #100	@ 0x64
 8001ad2:	2203      	movs	r2, #3
 8001ad4:	490f      	ldr	r1, [pc, #60]	@ (8001b14 <Parser_Process+0xf8>)
 8001ad6:	480c      	ldr	r0, [pc, #48]	@ (8001b08 <Parser_Process+0xec>)
 8001ad8:	f008 fd3e 	bl	800a558 <HAL_UART_Transmit>
                    break;
 8001adc:	e006      	b.n	8001aec <Parser_Process+0xd0>

                default:
                    HAL_UART_Transmit(&huart3, (uint8_t*)NACK_MSG, strlen(NACK_MSG), 100);
 8001ade:	2364      	movs	r3, #100	@ 0x64
 8001ae0:	2204      	movs	r2, #4
 8001ae2:	4908      	ldr	r1, [pc, #32]	@ (8001b04 <Parser_Process+0xe8>)
 8001ae4:	4808      	ldr	r0, [pc, #32]	@ (8001b08 <Parser_Process+0xec>)
 8001ae6:	f008 fd37 	bl	800a558 <HAL_UART_Transmit>
                    break;
 8001aea:	bf00      	nop
            }
            return;
 8001aec:	e005      	b.n	8001afa <Parser_Process+0xde>
        }

        // If message type is not REQ or CMD
        HAL_UART_Transmit(&huart3, (uint8_t*)NACK_MSG, strlen(NACK_MSG), 100);
 8001aee:	2364      	movs	r3, #100	@ 0x64
 8001af0:	2204      	movs	r2, #4
 8001af2:	4904      	ldr	r1, [pc, #16]	@ (8001b04 <Parser_Process+0xe8>)
 8001af4:	4804      	ldr	r0, [pc, #16]	@ (8001b08 <Parser_Process+0xec>)
 8001af6:	f008 fd2f 	bl	800a558 <HAL_UART_Transmit>
    }
}
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	200005e0 	.word	0x200005e0
 8001b00:	20000220 	.word	0x20000220
 8001b04:	08011fd0 	.word	0x08011fd0
 8001b08:	20000510 	.word	0x20000510
 8001b0c:	20000230 	.word	0x20000230
 8001b10:	2000021c 	.word	0x2000021c
 8001b14:	08011fd8 	.word	0x08011fd8

08001b18 <return_sensor_request_cmd>:

static void return_sensor_request_cmd(BUF_CMP_t id)
{
 8001b18:	b590      	push	{r4, r7, lr}
 8001b1a:	b087      	sub	sp, #28
 8001b1c:	af02      	add	r7, sp, #8
 8001b1e:	4603      	mov	r3, r0
 8001b20:	71fb      	strb	r3, [r7, #7]
    // ***** THIS IS THE ONLY LINE THAT WAS CHANGED *****
    static char tx_buf[30] = {0};
    const char* term = "\r\n";
 8001b22:	4b27      	ldr	r3, [pc, #156]	@ (8001bc0 <return_sensor_request_cmd+0xa8>)
 8001b24:	60fb      	str	r3, [r7, #12]

    switch (id)
 8001b26:	79fb      	ldrb	r3, [r7, #7]
 8001b28:	2b79      	cmp	r3, #121	@ 0x79
 8001b2a:	d005      	beq.n	8001b38 <return_sensor_request_cmd+0x20>
 8001b2c:	2b79      	cmp	r3, #121	@ 0x79
 8001b2e:	dc2f      	bgt.n	8001b90 <return_sensor_request_cmd+0x78>
 8001b30:	2b62      	cmp	r3, #98	@ 0x62
 8001b32:	d01a      	beq.n	8001b6a <return_sensor_request_cmd+0x52>
 8001b34:	2b67      	cmp	r3, #103	@ 0x67
 8001b36:	d12b      	bne.n	8001b90 <return_sensor_request_cmd+0x78>
    {
        case GY_Z_CHAR:
        case QTRN_YAW_CHAR:
            snprintf(tx_buf, sizeof(tx_buf) - strlen(term), "%.2f", yaw);
 8001b38:	68f8      	ldr	r0, [r7, #12]
 8001b3a:	f7fe fb99 	bl	8000270 <strlen>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	f1c3 041e 	rsb	r4, r3, #30
 8001b44:	4b1f      	ldr	r3, [pc, #124]	@ (8001bc4 <return_sensor_request_cmd+0xac>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f7fe fcfd 	bl	8000548 <__aeabi_f2d>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	460b      	mov	r3, r1
 8001b52:	e9cd 2300 	strd	r2, r3, [sp]
 8001b56:	4a1c      	ldr	r2, [pc, #112]	@ (8001bc8 <return_sensor_request_cmd+0xb0>)
 8001b58:	4621      	mov	r1, r4
 8001b5a:	481c      	ldr	r0, [pc, #112]	@ (8001bcc <return_sensor_request_cmd+0xb4>)
 8001b5c:	f00d fca4 	bl	800f4a8 <sniprintf>
            strcat(tx_buf, term);
 8001b60:	68f9      	ldr	r1, [r7, #12]
 8001b62:	481a      	ldr	r0, [pc, #104]	@ (8001bcc <return_sensor_request_cmd+0xb4>)
 8001b64:	f00d fd21 	bl	800f5aa <strcat>
            break;
 8001b68:	e01b      	b.n	8001ba2 <return_sensor_request_cmd+0x8a>

        // --- ADD THIS NEW CASE ---
        case IS_BUSY_CHAR:
            // Call the existing function that checks the motion state
            if (Motion_Is_Busy()) {
 8001b6a:	f001 fff5 	bl	8003b58 <Motion_Is_Busy>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d006      	beq.n	8001b82 <return_sensor_request_cmd+0x6a>
                snprintf(tx_buf, sizeof(tx_buf), "1%s", term); // "1" for busy
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	4a16      	ldr	r2, [pc, #88]	@ (8001bd0 <return_sensor_request_cmd+0xb8>)
 8001b78:	211e      	movs	r1, #30
 8001b7a:	4814      	ldr	r0, [pc, #80]	@ (8001bcc <return_sensor_request_cmd+0xb4>)
 8001b7c:	f00d fc94 	bl	800f4a8 <sniprintf>
            } else {
                snprintf(tx_buf, sizeof(tx_buf), "0%s", term); // "0" for not busy
            }
            break;
 8001b80:	e00f      	b.n	8001ba2 <return_sensor_request_cmd+0x8a>
                snprintf(tx_buf, sizeof(tx_buf), "0%s", term); // "0" for not busy
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	4a13      	ldr	r2, [pc, #76]	@ (8001bd4 <return_sensor_request_cmd+0xbc>)
 8001b86:	211e      	movs	r1, #30
 8001b88:	4810      	ldr	r0, [pc, #64]	@ (8001bcc <return_sensor_request_cmd+0xb4>)
 8001b8a:	f00d fc8d 	bl	800f4a8 <sniprintf>
            break;
 8001b8e:	e008      	b.n	8001ba2 <return_sensor_request_cmd+0x8a>

        default:
            snprintf(tx_buf, sizeof(tx_buf), "%s%s", NACK_MSG, term);
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	9300      	str	r3, [sp, #0]
 8001b94:	4b10      	ldr	r3, [pc, #64]	@ (8001bd8 <return_sensor_request_cmd+0xc0>)
 8001b96:	4a11      	ldr	r2, [pc, #68]	@ (8001bdc <return_sensor_request_cmd+0xc4>)
 8001b98:	211e      	movs	r1, #30
 8001b9a:	480c      	ldr	r0, [pc, #48]	@ (8001bcc <return_sensor_request_cmd+0xb4>)
 8001b9c:	f00d fc84 	bl	800f4a8 <sniprintf>
            break;
 8001ba0:	bf00      	nop
    }

    HAL_UART_Transmit(&huart3, (uint8_t*)tx_buf, strlen(tx_buf), 100);
 8001ba2:	480a      	ldr	r0, [pc, #40]	@ (8001bcc <return_sensor_request_cmd+0xb4>)
 8001ba4:	f7fe fb64 	bl	8000270 <strlen>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	b29a      	uxth	r2, r3
 8001bac:	2364      	movs	r3, #100	@ 0x64
 8001bae:	4907      	ldr	r1, [pc, #28]	@ (8001bcc <return_sensor_request_cmd+0xb4>)
 8001bb0:	480b      	ldr	r0, [pc, #44]	@ (8001be0 <return_sensor_request_cmd+0xc8>)
 8001bb2:	f008 fcd1 	bl	800a558 <HAL_UART_Transmit>
}
 8001bb6:	bf00      	nop
 8001bb8:	3714      	adds	r7, #20
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd90      	pop	{r4, r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	08011fdc 	.word	0x08011fdc
 8001bc4:	200005f4 	.word	0x200005f4
 8001bc8:	08011fe0 	.word	0x08011fe0
 8001bcc:	2000023c 	.word	0x2000023c
 8001bd0:	08011fe8 	.word	0x08011fe8
 8001bd4:	08011fec 	.word	0x08011fec
 8001bd8:	08011fd0 	.word	0x08011fd0
 8001bdc:	08011ff0 	.word	0x08011ff0
 8001be0:	20000510 	.word	0x20000510

08001be4 <get_motion_cmd_from_bytes>:
/**
 * @brief Decodes a 10-byte motion command into your specific MOTION_PKT_t struct.
 * @note This version is matched to your app_parser.h
 */
static bool get_motion_cmd_from_bytes(const BUF_CMP_t *bytes, MOTION_PKT_t *pkt)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b086      	sub	sp, #24
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
 8001bec:	6039      	str	r1, [r7, #0]
    // Start by clearing the packet to ensure all bool flags are false by default
    memset(pkt, 0, sizeof(MOTION_PKT_t));
 8001bee:	220c      	movs	r2, #12
 8001bf0:	2100      	movs	r1, #0
 8001bf2:	6838      	ldr	r0, [r7, #0]
 8001bf4:	f00d fcd1 	bl	800f59a <memset>

    // --- Robust numeric parse of bytes [4..6] ---
    char arg_str[4];
    memcpy(arg_str, &bytes[4], 3);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	1d19      	adds	r1, r3, #4
 8001bfc:	f107 030c 	add.w	r3, r7, #12
 8001c00:	2203      	movs	r2, #3
 8001c02:	4618      	mov	r0, r3
 8001c04:	f00d fdb5 	bl	800f772 <memcpy>
    arg_str[3] = '\0';
 8001c08:	2300      	movs	r3, #0
 8001c0a:	73fb      	strb	r3, [r7, #15]

    char *endp = NULL;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	60bb      	str	r3, [r7, #8]
    unsigned long val_ul = strtoul(arg_str, &endp, 10);
 8001c10:	f107 0108 	add.w	r1, r7, #8
 8001c14:	f107 030c 	add.w	r3, r7, #12
 8001c18:	220a      	movs	r2, #10
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f00c ff22 	bl	800ea64 <strtoul>
 8001c20:	6178      	str	r0, [r7, #20]
    if (endp == arg_str || *endp != '\0' || val_ul > 999UL) {
 8001c22:	68ba      	ldr	r2, [r7, #8]
 8001c24:	f107 030c 	add.w	r3, r7, #12
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d007      	beq.n	8001c3c <get_motion_cmd_from_bytes+0x58>
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d103      	bne.n	8001c3c <get_motion_cmd_from_bytes+0x58>
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001c3a:	d308      	bcc.n	8001c4e <get_motion_cmd_from_bytes+0x6a>
        if (bytes[3] != HALT_CHAR) return false;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	3303      	adds	r3, #3
 8001c40:	781b      	ldrb	r3, [r3, #0]
 8001c42:	2b68      	cmp	r3, #104	@ 0x68
 8001c44:	d001      	beq.n	8001c4a <get_motion_cmd_from_bytes+0x66>
 8001c46:	2300      	movs	r3, #0
 8001c48:	e0db      	b.n	8001e02 <get_motion_cmd_from_bytes+0x21e>
        val_ul = 0;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	617b      	str	r3, [r7, #20]
    }
    pkt->arg = (uint32_t)val_ul; // Matched to your struct's uint32_t
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	697a      	ldr	r2, [r7, #20]
 8001c52:	605a      	str	r2, [r3, #4]

    // --- Decode Opcode ---
    switch (bytes[3])
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	3303      	adds	r3, #3
 8001c58:	781b      	ldrb	r3, [r3, #0]
 8001c5a:	2b40      	cmp	r3, #64	@ 0x40
 8001c5c:	dc74      	bgt.n	8001d48 <get_motion_cmd_from_bytes+0x164>
 8001c5e:	2b21      	cmp	r3, #33	@ 0x21
 8001c60:	da2a      	bge.n	8001cb8 <get_motion_cmd_from_bytes+0xd4>
 8001c62:	e0af      	b.n	8001dc4 <get_motion_cmd_from_bytes+0x1e0>
 8001c64:	3b62      	subs	r3, #98	@ 0x62
 8001c66:	2b10      	cmp	r3, #16
 8001c68:	f200 80ac 	bhi.w	8001dc4 <get_motion_cmd_from_bytes+0x1e0>
 8001c6c:	a201      	add	r2, pc, #4	@ (adr r2, 8001c74 <get_motion_cmd_from_bytes+0x90>)
 8001c6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c72:	bf00      	nop
 8001c74:	08001d5b 	.word	0x08001d5b
 8001c78:	08001dc5 	.word	0x08001dc5
 8001c7c:	08001dc5 	.word	0x08001dc5
 8001c80:	08001dc5 	.word	0x08001dc5
 8001c84:	08001d53 	.word	0x08001d53
 8001c88:	08001dc5 	.word	0x08001dc5
 8001c8c:	08001d8f 	.word	0x08001d8f
 8001c90:	08001dc5 	.word	0x08001dc5
 8001c94:	08001dc5 	.word	0x08001dc5
 8001c98:	08001dc5 	.word	0x08001dc5
 8001c9c:	08001d63 	.word	0x08001d63
 8001ca0:	08001dc5 	.word	0x08001dc5
 8001ca4:	08001dc5 	.word	0x08001dc5
 8001ca8:	08001dc5 	.word	0x08001dc5
 8001cac:	08001dc5 	.word	0x08001dc5
 8001cb0:	08001dc5 	.word	0x08001dc5
 8001cb4:	08001d79 	.word	0x08001d79
 8001cb8:	3b21      	subs	r3, #33	@ 0x21
 8001cba:	2b1f      	cmp	r3, #31
 8001cbc:	f200 8082 	bhi.w	8001dc4 <get_motion_cmd_from_bytes+0x1e0>
 8001cc0:	a201      	add	r2, pc, #4	@ (adr r2, 8001cc8 <get_motion_cmd_from_bytes+0xe4>)
 8001cc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cc6:	bf00      	nop
 8001cc8:	08001d9d 	.word	0x08001d9d
 8001ccc:	08001dc5 	.word	0x08001dc5
 8001cd0:	08001db5 	.word	0x08001db5
 8001cd4:	08001dbd 	.word	0x08001dbd
 8001cd8:	08001dc5 	.word	0x08001dc5
 8001cdc:	08001dc5 	.word	0x08001dc5
 8001ce0:	08001dc5 	.word	0x08001dc5
 8001ce4:	08001dc5 	.word	0x08001dc5
 8001ce8:	08001dc5 	.word	0x08001dc5
 8001cec:	08001dc5 	.word	0x08001dc5
 8001cf0:	08001dc5 	.word	0x08001dc5
 8001cf4:	08001dc5 	.word	0x08001dc5
 8001cf8:	08001dc5 	.word	0x08001dc5
 8001cfc:	08001dc5 	.word	0x08001dc5
 8001d00:	08001dc5 	.word	0x08001dc5
 8001d04:	08001dc5 	.word	0x08001dc5
 8001d08:	08001dc5 	.word	0x08001dc5
 8001d0c:	08001dc5 	.word	0x08001dc5
 8001d10:	08001dc5 	.word	0x08001dc5
 8001d14:	08001dc5 	.word	0x08001dc5
 8001d18:	08001dc5 	.word	0x08001dc5
 8001d1c:	08001dc5 	.word	0x08001dc5
 8001d20:	08001dc5 	.word	0x08001dc5
 8001d24:	08001dc5 	.word	0x08001dc5
 8001d28:	08001dc5 	.word	0x08001dc5
 8001d2c:	08001dc5 	.word	0x08001dc5
 8001d30:	08001dc5 	.word	0x08001dc5
 8001d34:	08001dc5 	.word	0x08001dc5
 8001d38:	08001dc5 	.word	0x08001dc5
 8001d3c:	08001dc5 	.word	0x08001dc5
 8001d40:	08001da5 	.word	0x08001da5
 8001d44:	08001dad 	.word	0x08001dad
 8001d48:	2b72      	cmp	r3, #114	@ 0x72
 8001d4a:	dc3b      	bgt.n	8001dc4 <get_motion_cmd_from_bytes+0x1e0>
 8001d4c:	2b62      	cmp	r3, #98	@ 0x62
 8001d4e:	da89      	bge.n	8001c64 <get_motion_cmd_from_bytes+0x80>
 8001d50:	e038      	b.n	8001dc4 <get_motion_cmd_from_bytes+0x1e0>
    {
        case FWD_CHAR:   pkt->cmd = MOVE_FWD;        break;
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	2200      	movs	r2, #0
 8001d56:	701a      	strb	r2, [r3, #0]
 8001d58:	e036      	b.n	8001dc8 <get_motion_cmd_from_bytes+0x1e4>
        case BWD_CHAR:   pkt->cmd = MOVE_BWD;        break;
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	701a      	strb	r2, [r3, #0]
 8001d60:	e032      	b.n	8001dc8 <get_motion_cmd_from_bytes+0x1e4>
        case LEFT_CHAR:
            pkt->cmd = (bytes[7] == BWD_CHAR) ? MOVE_LEFT_BWD : MOVE_LEFT_FWD;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	3307      	adds	r3, #7
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	2b62      	cmp	r3, #98	@ 0x62
 8001d6a:	d101      	bne.n	8001d70 <get_motion_cmd_from_bytes+0x18c>
 8001d6c:	2205      	movs	r2, #5
 8001d6e:	e000      	b.n	8001d72 <get_motion_cmd_from_bytes+0x18e>
 8001d70:	2203      	movs	r2, #3
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	701a      	strb	r2, [r3, #0]
            break;
 8001d76:	e027      	b.n	8001dc8 <get_motion_cmd_from_bytes+0x1e4>
        case RIGHT_CHAR:
            pkt->cmd = (bytes[7] == BWD_CHAR) ? MOVE_RIGHT_BWD : MOVE_RIGHT_FWD;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	3307      	adds	r3, #7
 8001d7c:	781b      	ldrb	r3, [r3, #0]
 8001d7e:	2b62      	cmp	r3, #98	@ 0x62
 8001d80:	d101      	bne.n	8001d86 <get_motion_cmd_from_bytes+0x1a2>
 8001d82:	2204      	movs	r2, #4
 8001d84:	e000      	b.n	8001d88 <get_motion_cmd_from_bytes+0x1a4>
 8001d86:	2202      	movs	r2, #2
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	701a      	strb	r2, [r3, #0]
            break;
 8001d8c:	e01c      	b.n	8001dc8 <get_motion_cmd_from_bytes+0x1e4>
        case HALT_CHAR:
            pkt->cmd = MOVE_HALT; pkt->arg = 0;
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	2206      	movs	r2, #6
 8001d92:	701a      	strb	r2, [r3, #0]
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	2200      	movs	r2, #0
 8001d98:	605a      	str	r2, [r3, #4]
            break;
 8001d9a:	e015      	b.n	8001dc8 <get_motion_cmd_from_bytes+0x1e4>
        case SONNY_MOVE_o1_CHAR:
        	pkt->cmd = MOVE_SONNY_MOVE_TO_O1; break;
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	220a      	movs	r2, #10
 8001da0:	701a      	strb	r2, [r3, #0]
 8001da2:	e011      	b.n	8001dc8 <get_motion_cmd_from_bytes+0x1e4>
        case SONNY_DODGE_o1_LEFT_CHAR:
                	pkt->cmd = MOVE_SONNY_DODGE_O1_LEFT; break;
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	220b      	movs	r2, #11
 8001da8:	701a      	strb	r2, [r3, #0]
 8001daa:	e00d      	b.n	8001dc8 <get_motion_cmd_from_bytes+0x1e4>
        case SONNY_DODGE_o1_RIGHT_CHAR:
                   	pkt->cmd = MOVE_SONNY_DODGE_O1_RIGHT; break;
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	220c      	movs	r2, #12
 8001db0:	701a      	strb	r2, [r3, #0]
 8001db2:	e009      	b.n	8001dc8 <get_motion_cmd_from_bytes+0x1e4>
        case SONNY_DODGE_o2_LEFT_AND_HOME_CHAR:
                	pkt->cmd = MOVE_SONNY_DODGE_O2_LEFT_AND_HOME; break;
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	220d      	movs	r2, #13
 8001db8:	701a      	strb	r2, [r3, #0]
 8001dba:	e005      	b.n	8001dc8 <get_motion_cmd_from_bytes+0x1e4>
        case SONNY_DODGE_o2_RIGHT_AND_HOME_CHAR:
                	pkt->cmd = MOVE_SONNY_DODGE_O2_RIGHT_AND_HOME; break;
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	220e      	movs	r2, #14
 8001dc0:	701a      	strb	r2, [r3, #0]
 8001dc2:	e001      	b.n	8001dc8 <get_motion_cmd_from_bytes+0x1e4>

        default: return false; // Invalid command character
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	e01c      	b.n	8001e02 <get_motion_cmd_from_bytes+0x21e>
    }

    // --- Decode Options from bytes [7] and [8] ---
    for (int i = 7; i <= 8; i++) {
 8001dc8:	2307      	movs	r3, #7
 8001dca:	613b      	str	r3, [r7, #16]
 8001dcc:	e015      	b.n	8001dfa <get_motion_cmd_from_bytes+0x216>
        if (bytes[i] == CRAWL_CHAR) {
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	687a      	ldr	r2, [r7, #4]
 8001dd2:	4413      	add	r3, r2
 8001dd4:	781b      	ldrb	r3, [r3, #0]
 8001dd6:	2b64      	cmp	r3, #100	@ 0x64
 8001dd8:	d103      	bne.n	8001de2 <get_motion_cmd_from_bytes+0x1fe>
            pkt->is_crawl = true;
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	2201      	movs	r2, #1
 8001dde:	729a      	strb	r2, [r3, #10]
 8001de0:	e008      	b.n	8001df4 <get_motion_cmd_from_bytes+0x210>
        } else if (bytes[i] == LINEAR_CHAR) {
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	687a      	ldr	r2, [r7, #4]
 8001de6:	4413      	add	r3, r2
 8001de8:	781b      	ldrb	r3, [r3, #0]
 8001dea:	2b6a      	cmp	r3, #106	@ 0x6a
 8001dec:	d102      	bne.n	8001df4 <get_motion_cmd_from_bytes+0x210>
            pkt->linear = true;
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	2201      	movs	r2, #1
 8001df2:	72da      	strb	r2, [r3, #11]
    for (int i = 7; i <= 8; i++) {
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	3301      	adds	r3, #1
 8001df8:	613b      	str	r3, [r7, #16]
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	2b08      	cmp	r3, #8
 8001dfe:	dde6      	ble.n	8001dce <get_motion_cmd_from_bytes+0x1ea>
    }

    // pkt->is_absol and pkt->turn_opt are not set by the current Python script,
    // but they are safely initialized to false by the memset() at the top.

    return true;
 8001e00:	2301      	movs	r3, #1
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3718      	adds	r7, #24
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop

08001e0c <DWT_Delay_Init>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void DWT_Delay_Init(void)
	{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0
	  // Enable the DWT peripheral
	  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001e10:	4b09      	ldr	r3, [pc, #36]	@ (8001e38 <DWT_Delay_Init+0x2c>)
 8001e12:	68db      	ldr	r3, [r3, #12]
 8001e14:	4a08      	ldr	r2, [pc, #32]	@ (8001e38 <DWT_Delay_Init+0x2c>)
 8001e16:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001e1a:	60d3      	str	r3, [r2, #12]

	  // Reset the cycle counter
	  DWT->CYCCNT = 0;
 8001e1c:	4b07      	ldr	r3, [pc, #28]	@ (8001e3c <DWT_Delay_Init+0x30>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	605a      	str	r2, [r3, #4]

	  // Start the cycle counter
	  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8001e22:	4b06      	ldr	r3, [pc, #24]	@ (8001e3c <DWT_Delay_Init+0x30>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a05      	ldr	r2, [pc, #20]	@ (8001e3c <DWT_Delay_Init+0x30>)
 8001e28:	f043 0301 	orr.w	r3, r3, #1
 8001e2c:	6013      	str	r3, [r2, #0]
	}
 8001e2e:	bf00      	nop
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr
 8001e38:	e000edf0 	.word	0xe000edf0
 8001e3c:	e0001000 	.word	0xe0001000

08001e40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	af00      	add	r7, sp, #0
	  * @brief  Enables the DWT Cycle Counter for high-precision delays.
	  * @retval None
	  *
	  *
	  */
	DWT_Delay_Init();
 8001e44:	f7ff ffe2 	bl	8001e0c <DWT_Delay_Init>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e48:	f003 fd94 	bl	8005974 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e4c:	f000 f8b0 	bl	8001fb0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e50:	f000 fc90 	bl	8002774 <MX_GPIO_Init>
  MX_DMA_Init();
 8001e54:	f000 fc6e 	bl	8002734 <MX_DMA_Init>
  MX_TIM1_Init();
 8001e58:	f000 f9a4 	bl	80021a4 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001e5c:	f000 fa32 	bl	80022c4 <MX_TIM2_Init>
  MX_TIM4_Init();
 8001e60:	f000 fafa 	bl	8002458 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8001e64:	f000 fc0c 	bl	8002680 <MX_USART1_UART_Init>
  MX_TIM5_Init();
 8001e68:	f000 fb5a 	bl	8002520 <MX_TIM5_Init>
  MX_I2C2_Init();
 8001e6c:	f000 f96c 	bl	8002148 <MX_I2C2_Init>
  MX_USART3_UART_Init();
 8001e70:	f000 fc30 	bl	80026d4 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8001e74:	f000 fa7a 	bl	800236c <MX_TIM3_Init>
  MX_TIM12_Init();
 8001e78:	f000 fba6 	bl	80025c8 <MX_TIM12_Init>
  MX_ADC1_Init();
 8001e7c:	f000 f8f6 	bl	800206c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001e80:	f009 fd66 	bl	800b950 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
   // NEW: Create the message queues
   motor_cmd_queue = osMessageQueueNew(10, sizeof(MOTION_PKT_t), NULL);
 8001e84:	2200      	movs	r2, #0
 8001e86:	210c      	movs	r1, #12
 8001e88:	200a      	movs	r0, #10
 8001e8a:	f009 fe58 	bl	800bb3e <osMessageQueueNew>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	4a2a      	ldr	r2, [pc, #168]	@ (8001f3c <main+0xfc>)
 8001e92:	6013      	str	r3, [r2, #0]
   uart_rx_msg_queue = osMessageQueueNew(5, sizeof(AppMessage_t), NULL);
 8001e94:	2200      	movs	r2, #0
 8001e96:	2110      	movs	r1, #16
 8001e98:	2005      	movs	r0, #5
 8001e9a:	f009 fe50 	bl	800bb3e <osMessageQueueNew>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	4a27      	ldr	r2, [pc, #156]	@ (8001f40 <main+0x100>)
 8001ea2:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001ea4:	4a27      	ldr	r2, [pc, #156]	@ (8001f44 <main+0x104>)
 8001ea6:	2100      	movs	r1, #0
 8001ea8:	4827      	ldr	r0, [pc, #156]	@ (8001f48 <main+0x108>)
 8001eaa:	f009 fd9b 	bl	800b9e4 <osThreadNew>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	4a26      	ldr	r2, [pc, #152]	@ (8001f4c <main+0x10c>)
 8001eb2:	6013      	str	r3, [r2, #0]

  /* creation of motorTask */
  motorTaskHandle = osThreadNew(StartMotorTask, NULL, &motorTask_attributes);
 8001eb4:	4a26      	ldr	r2, [pc, #152]	@ (8001f50 <main+0x110>)
 8001eb6:	2100      	movs	r1, #0
 8001eb8:	4826      	ldr	r0, [pc, #152]	@ (8001f54 <main+0x114>)
 8001eba:	f009 fd93 	bl	800b9e4 <osThreadNew>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	4a25      	ldr	r2, [pc, #148]	@ (8001f58 <main+0x118>)
 8001ec2:	6013      	str	r3, [r2, #0]

  /* creation of OLEDTask */
  OLEDTaskHandle = osThreadNew(StartOLEDTask, NULL, &OLEDTask_attributes);
 8001ec4:	4a25      	ldr	r2, [pc, #148]	@ (8001f5c <main+0x11c>)
 8001ec6:	2100      	movs	r1, #0
 8001ec8:	4825      	ldr	r0, [pc, #148]	@ (8001f60 <main+0x120>)
 8001eca:	f009 fd8b 	bl	800b9e4 <osThreadNew>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	4a24      	ldr	r2, [pc, #144]	@ (8001f64 <main+0x124>)
 8001ed2:	6013      	str	r3, [r2, #0]

  /* creation of gyroTask */
  gyroTaskHandle = osThreadNew(StartGyroTask, NULL, &gyroTask_attributes);
 8001ed4:	4a24      	ldr	r2, [pc, #144]	@ (8001f68 <main+0x128>)
 8001ed6:	2100      	movs	r1, #0
 8001ed8:	4824      	ldr	r0, [pc, #144]	@ (8001f6c <main+0x12c>)
 8001eda:	f009 fd83 	bl	800b9e4 <osThreadNew>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	4a23      	ldr	r2, [pc, #140]	@ (8001f70 <main+0x130>)
 8001ee2:	6013      	str	r3, [r2, #0]

  /* creation of ultrasonicTask */
  ultrasonicTaskHandle = osThreadNew(StartUltrasonicTask, NULL, &ultrasonicTask_attributes);
 8001ee4:	4a23      	ldr	r2, [pc, #140]	@ (8001f74 <main+0x134>)
 8001ee6:	2100      	movs	r1, #0
 8001ee8:	4823      	ldr	r0, [pc, #140]	@ (8001f78 <main+0x138>)
 8001eea:	f009 fd7b 	bl	800b9e4 <osThreadNew>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	4a22      	ldr	r2, [pc, #136]	@ (8001f7c <main+0x13c>)
 8001ef2:	6013      	str	r3, [r2, #0]

  /* creation of communicateTask */
  communicateTaskHandle = osThreadNew(StartCommunicateTask, NULL, &communicateTask_attributes);
 8001ef4:	4a22      	ldr	r2, [pc, #136]	@ (8001f80 <main+0x140>)
 8001ef6:	2100      	movs	r1, #0
 8001ef8:	4822      	ldr	r0, [pc, #136]	@ (8001f84 <main+0x144>)
 8001efa:	f009 fd73 	bl	800b9e4 <osThreadNew>
 8001efe:	4603      	mov	r3, r0
 8001f00:	4a21      	ldr	r2, [pc, #132]	@ (8001f88 <main+0x148>)
 8001f02:	6013      	str	r3, [r2, #0]

  /* creation of encoderRTask */
  encoderRTaskHandle = osThreadNew(StartEncoderRTask, NULL, &encoderRTask_attributes);
 8001f04:	4a21      	ldr	r2, [pc, #132]	@ (8001f8c <main+0x14c>)
 8001f06:	2100      	movs	r1, #0
 8001f08:	4821      	ldr	r0, [pc, #132]	@ (8001f90 <main+0x150>)
 8001f0a:	f009 fd6b 	bl	800b9e4 <osThreadNew>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	4a20      	ldr	r2, [pc, #128]	@ (8001f94 <main+0x154>)
 8001f12:	6013      	str	r3, [r2, #0]

  /* creation of encoderLTask */
  encoderLTaskHandle = osThreadNew(StartEncoderLTask, NULL, &encoderLTask_attributes);
 8001f14:	4a20      	ldr	r2, [pc, #128]	@ (8001f98 <main+0x158>)
 8001f16:	2100      	movs	r1, #0
 8001f18:	4820      	ldr	r0, [pc, #128]	@ (8001f9c <main+0x15c>)
 8001f1a:	f009 fd63 	bl	800b9e4 <osThreadNew>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	4a1f      	ldr	r2, [pc, #124]	@ (8001fa0 <main+0x160>)
 8001f22:	6013      	str	r3, [r2, #0]

  /* creation of IR_Task */
  IR_TaskHandle = osThreadNew(StartIR_Task, NULL, &IR_Task_attributes);
 8001f24:	4a1f      	ldr	r2, [pc, #124]	@ (8001fa4 <main+0x164>)
 8001f26:	2100      	movs	r1, #0
 8001f28:	481f      	ldr	r0, [pc, #124]	@ (8001fa8 <main+0x168>)
 8001f2a:	f009 fd5b 	bl	800b9e4 <osThreadNew>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	4a1e      	ldr	r2, [pc, #120]	@ (8001fac <main+0x16c>)
 8001f32:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001f34:	f009 fd30 	bl	800b998 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001f38:	bf00      	nop
 8001f3a:	e7fd      	b.n	8001f38 <main+0xf8>
 8001f3c:	200005dc 	.word	0x200005dc
 8001f40:	200005e0 	.word	0x200005e0
 8001f44:	080120e8 	.word	0x080120e8
 8001f48:	08002b41 	.word	0x08002b41
 8001f4c:	200005b8 	.word	0x200005b8
 8001f50:	0801210c 	.word	0x0801210c
 8001f54:	08002b51 	.word	0x08002b51
 8001f58:	200005bc 	.word	0x200005bc
 8001f5c:	08012130 	.word	0x08012130
 8001f60:	08002d15 	.word	0x08002d15
 8001f64:	200005c0 	.word	0x200005c0
 8001f68:	08012154 	.word	0x08012154
 8001f6c:	08002de1 	.word	0x08002de1
 8001f70:	200005c4 	.word	0x200005c4
 8001f74:	08012178 	.word	0x08012178
 8001f78:	08002e81 	.word	0x08002e81
 8001f7c:	200005c8 	.word	0x200005c8
 8001f80:	0801219c 	.word	0x0801219c
 8001f84:	08002f11 	.word	0x08002f11
 8001f88:	200005cc 	.word	0x200005cc
 8001f8c:	080121c0 	.word	0x080121c0
 8001f90:	08002f2d 	.word	0x08002f2d
 8001f94:	200005d0 	.word	0x200005d0
 8001f98:	080121e4 	.word	0x080121e4
 8001f9c:	08002f79 	.word	0x08002f79
 8001fa0:	200005d4 	.word	0x200005d4
 8001fa4:	08012208 	.word	0x08012208
 8001fa8:	08002fc5 	.word	0x08002fc5
 8001fac:	200005d8 	.word	0x200005d8

08001fb0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b094      	sub	sp, #80	@ 0x50
 8001fb4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001fb6:	f107 0320 	add.w	r3, r7, #32
 8001fba:	2230      	movs	r2, #48	@ 0x30
 8001fbc:	2100      	movs	r1, #0
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f00d faeb 	bl	800f59a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001fc4:	f107 030c 	add.w	r3, r7, #12
 8001fc8:	2200      	movs	r2, #0
 8001fca:	601a      	str	r2, [r3, #0]
 8001fcc:	605a      	str	r2, [r3, #4]
 8001fce:	609a      	str	r2, [r3, #8]
 8001fd0:	60da      	str	r2, [r3, #12]
 8001fd2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	60bb      	str	r3, [r7, #8]
 8001fd8:	4b22      	ldr	r3, [pc, #136]	@ (8002064 <SystemClock_Config+0xb4>)
 8001fda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fdc:	4a21      	ldr	r2, [pc, #132]	@ (8002064 <SystemClock_Config+0xb4>)
 8001fde:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fe2:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fe4:	4b1f      	ldr	r3, [pc, #124]	@ (8002064 <SystemClock_Config+0xb4>)
 8001fe6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fe8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fec:	60bb      	str	r3, [r7, #8]
 8001fee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	607b      	str	r3, [r7, #4]
 8001ff4:	4b1c      	ldr	r3, [pc, #112]	@ (8002068 <SystemClock_Config+0xb8>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a1b      	ldr	r2, [pc, #108]	@ (8002068 <SystemClock_Config+0xb8>)
 8001ffa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ffe:	6013      	str	r3, [r2, #0]
 8002000:	4b19      	ldr	r3, [pc, #100]	@ (8002068 <SystemClock_Config+0xb8>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002008:	607b      	str	r3, [r7, #4]
 800200a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800200c:	2302      	movs	r3, #2
 800200e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002010:	2301      	movs	r3, #1
 8002012:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002014:	2310      	movs	r3, #16
 8002016:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002018:	2300      	movs	r3, #0
 800201a:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800201c:	f107 0320 	add.w	r3, r7, #32
 8002020:	4618      	mov	r0, r3
 8002022:	f005 fff3 	bl	800800c <HAL_RCC_OscConfig>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d001      	beq.n	8002030 <SystemClock_Config+0x80>
  {
    Error_Handler();
 800202c:	f001 f840 	bl	80030b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002030:	230f      	movs	r3, #15
 8002032:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002034:	2300      	movs	r3, #0
 8002036:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002038:	2300      	movs	r3, #0
 800203a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800203c:	2300      	movs	r3, #0
 800203e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002040:	2300      	movs	r3, #0
 8002042:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002044:	f107 030c 	add.w	r3, r7, #12
 8002048:	2100      	movs	r1, #0
 800204a:	4618      	mov	r0, r3
 800204c:	f006 fa56 	bl	80084fc <HAL_RCC_ClockConfig>
 8002050:	4603      	mov	r3, r0
 8002052:	2b00      	cmp	r3, #0
 8002054:	d001      	beq.n	800205a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8002056:	f001 f82b 	bl	80030b0 <Error_Handler>
  }
}
 800205a:	bf00      	nop
 800205c:	3750      	adds	r7, #80	@ 0x50
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	40023800 	.word	0x40023800
 8002068:	40007000 	.word	0x40007000

0800206c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b086      	sub	sp, #24
 8002070:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */
  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002072:	f107 0308 	add.w	r3, r7, #8
 8002076:	2200      	movs	r2, #0
 8002078:	601a      	str	r2, [r3, #0]
 800207a:	605a      	str	r2, [r3, #4]
 800207c:	609a      	str	r2, [r3, #8]
 800207e:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */
  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002080:	4b2c      	ldr	r3, [pc, #176]	@ (8002134 <MX_ADC1_Init+0xc8>)
 8002082:	4a2d      	ldr	r2, [pc, #180]	@ (8002138 <MX_ADC1_Init+0xcc>)
 8002084:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler        = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002086:	4b2b      	ldr	r3, [pc, #172]	@ (8002134 <MX_ADC1_Init+0xc8>)
 8002088:	2200      	movs	r2, #0
 800208a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution            = ADC_RESOLUTION_12B;
 800208c:	4b29      	ldr	r3, [pc, #164]	@ (8002134 <MX_ADC1_Init+0xc8>)
 800208e:	2200      	movs	r2, #0
 8002090:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode          = DISABLE;
 8002092:	4b28      	ldr	r3, [pc, #160]	@ (8002134 <MX_ADC1_Init+0xc8>)
 8002094:	2200      	movs	r2, #0
 8002096:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode    = DISABLE;
 8002098:	4b26      	ldr	r3, [pc, #152]	@ (8002134 <MX_ADC1_Init+0xc8>)
 800209a:	2200      	movs	r2, #0
 800209c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800209e:	4b25      	ldr	r3, [pc, #148]	@ (8002134 <MX_ADC1_Init+0xc8>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge  = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80020a6:	4b23      	ldr	r3, [pc, #140]	@ (8002134 <MX_ADC1_Init+0xc8>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv      = ADC_SOFTWARE_START;
 80020ac:	4b21      	ldr	r3, [pc, #132]	@ (8002134 <MX_ADC1_Init+0xc8>)
 80020ae:	4a23      	ldr	r2, [pc, #140]	@ (800213c <MX_ADC1_Init+0xd0>)
 80020b0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign             = ADC_DATAALIGN_RIGHT;
 80020b2:	4b20      	ldr	r3, [pc, #128]	@ (8002134 <MX_ADC1_Init+0xc8>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion       = 1;
 80020b8:	4b1e      	ldr	r3, [pc, #120]	@ (8002134 <MX_ADC1_Init+0xc8>)
 80020ba:	2201      	movs	r2, #1
 80020bc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80020be:	4b1d      	ldr	r3, [pc, #116]	@ (8002134 <MX_ADC1_Init+0xc8>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection          = ADC_EOC_SINGLE_CONV;
 80020c6:	4b1b      	ldr	r3, [pc, #108]	@ (8002134 <MX_ADC1_Init+0xc8>)
 80020c8:	2201      	movs	r2, #1
 80020ca:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80020cc:	4819      	ldr	r0, [pc, #100]	@ (8002134 <MX_ADC1_Init+0xc8>)
 80020ce:	f003 fcb7 	bl	8005a40 <HAL_ADC_Init>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d001      	beq.n	80020dc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80020d8:	f000 ffea 	bl	80030b0 <Error_Handler>
  }

  /* === Enable internal channels (VREFINT / TempSensor) === */
  /* Do this once after HAL_ADC_Init. This powers the internal buffer so that
     ADC_CHANNEL_VREFINT returns a valid conversion value. */
  __HAL_RCC_ADC1_CLK_ENABLE();          // <<< NEW (harmless if already enabled)
 80020dc:	2300      	movs	r3, #0
 80020de:	607b      	str	r3, [r7, #4]
 80020e0:	4b17      	ldr	r3, [pc, #92]	@ (8002140 <MX_ADC1_Init+0xd4>)
 80020e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020e4:	4a16      	ldr	r2, [pc, #88]	@ (8002140 <MX_ADC1_Init+0xd4>)
 80020e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020ea:	6453      	str	r3, [r2, #68]	@ 0x44
 80020ec:	4b14      	ldr	r3, [pc, #80]	@ (8002140 <MX_ADC1_Init+0xd4>)
 80020ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020f4:	607b      	str	r3, [r7, #4]
 80020f6:	687b      	ldr	r3, [r7, #4]
  ADC->CCR |= ADC_CCR_TSVREFE;          // <<< NEW: enable VREFINT (and TempSensor)
 80020f8:	4b12      	ldr	r3, [pc, #72]	@ (8002144 <MX_ADC1_Init+0xd8>)
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	4a11      	ldr	r2, [pc, #68]	@ (8002144 <MX_ADC1_Init+0xd8>)
 80020fe:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002102:	6053      	str	r3, [r2, #4]
  HAL_Delay(1);                         // <<< NEW: tiny settle time (~us is enough, 1ms is safe)
 8002104:	2001      	movs	r0, #1
 8002106:	f003 fc77 	bl	80059f8 <HAL_Delay>

  /** Configure for a regular external channel (your default) */
  sConfig.Channel      = ADC_CHANNEL_5;          // PA5
 800210a:	2305      	movs	r3, #5
 800210c:	60bb      	str	r3, [r7, #8]
  sConfig.Rank         = 1;
 800210e:	2301      	movs	r3, #1
 8002110:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;  // keep long sample time
 8002112:	2307      	movs	r3, #7
 8002114:	613b      	str	r3, [r7, #16]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002116:	f107 0308 	add.w	r3, r7, #8
 800211a:	4619      	mov	r1, r3
 800211c:	4805      	ldr	r0, [pc, #20]	@ (8002134 <MX_ADC1_Init+0xc8>)
 800211e:	f003 fe71 	bl	8005e04 <HAL_ADC_ConfigChannel>
 8002122:	4603      	mov	r3, r0
 8002124:	2b00      	cmp	r3, #0
 8002126:	d001      	beq.n	800212c <MX_ADC1_Init+0xc0>
  {
    Error_Handler();
 8002128:	f000 ffc2 	bl	80030b0 <Error_Handler>
  }
}
 800212c:	bf00      	nop
 800212e:	3718      	adds	r7, #24
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}
 8002134:	2000027c 	.word	0x2000027c
 8002138:	40012000 	.word	0x40012000
 800213c:	0f000001 	.word	0x0f000001
 8002140:	40023800 	.word	0x40023800
 8002144:	40012300 	.word	0x40012300

08002148 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800214c:	4b12      	ldr	r3, [pc, #72]	@ (8002198 <MX_I2C2_Init+0x50>)
 800214e:	4a13      	ldr	r2, [pc, #76]	@ (800219c <MX_I2C2_Init+0x54>)
 8002150:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8002152:	4b11      	ldr	r3, [pc, #68]	@ (8002198 <MX_I2C2_Init+0x50>)
 8002154:	4a12      	ldr	r2, [pc, #72]	@ (80021a0 <MX_I2C2_Init+0x58>)
 8002156:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002158:	4b0f      	ldr	r3, [pc, #60]	@ (8002198 <MX_I2C2_Init+0x50>)
 800215a:	2200      	movs	r2, #0
 800215c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800215e:	4b0e      	ldr	r3, [pc, #56]	@ (8002198 <MX_I2C2_Init+0x50>)
 8002160:	2200      	movs	r2, #0
 8002162:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002164:	4b0c      	ldr	r3, [pc, #48]	@ (8002198 <MX_I2C2_Init+0x50>)
 8002166:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800216a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800216c:	4b0a      	ldr	r3, [pc, #40]	@ (8002198 <MX_I2C2_Init+0x50>)
 800216e:	2200      	movs	r2, #0
 8002170:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8002172:	4b09      	ldr	r3, [pc, #36]	@ (8002198 <MX_I2C2_Init+0x50>)
 8002174:	2200      	movs	r2, #0
 8002176:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002178:	4b07      	ldr	r3, [pc, #28]	@ (8002198 <MX_I2C2_Init+0x50>)
 800217a:	2200      	movs	r2, #0
 800217c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800217e:	4b06      	ldr	r3, [pc, #24]	@ (8002198 <MX_I2C2_Init+0x50>)
 8002180:	2200      	movs	r2, #0
 8002182:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002184:	4804      	ldr	r0, [pc, #16]	@ (8002198 <MX_I2C2_Init+0x50>)
 8002186:	f004 fef5 	bl	8006f74 <HAL_I2C_Init>
 800218a:	4603      	mov	r3, r0
 800218c:	2b00      	cmp	r3, #0
 800218e:	d001      	beq.n	8002194 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002190:	f000 ff8e 	bl	80030b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002194:	bf00      	nop
 8002196:	bd80      	pop	{r7, pc}
 8002198:	200002c4 	.word	0x200002c4
 800219c:	40005800 	.word	0x40005800
 80021a0:	000186a0 	.word	0x000186a0

080021a4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b092      	sub	sp, #72	@ 0x48
 80021a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021aa:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80021ae:	2200      	movs	r2, #0
 80021b0:	601a      	str	r2, [r3, #0]
 80021b2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80021b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80021b8:	2200      	movs	r2, #0
 80021ba:	601a      	str	r2, [r3, #0]
 80021bc:	605a      	str	r2, [r3, #4]
 80021be:	609a      	str	r2, [r3, #8]
 80021c0:	60da      	str	r2, [r3, #12]
 80021c2:	611a      	str	r2, [r3, #16]
 80021c4:	615a      	str	r2, [r3, #20]
 80021c6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80021c8:	1d3b      	adds	r3, r7, #4
 80021ca:	2220      	movs	r2, #32
 80021cc:	2100      	movs	r1, #0
 80021ce:	4618      	mov	r0, r3
 80021d0:	f00d f9e3 	bl	800f59a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80021d4:	4b39      	ldr	r3, [pc, #228]	@ (80022bc <MX_TIM1_Init+0x118>)
 80021d6:	4a3a      	ldr	r2, [pc, #232]	@ (80022c0 <MX_TIM1_Init+0x11c>)
 80021d8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80021da:	4b38      	ldr	r3, [pc, #224]	@ (80022bc <MX_TIM1_Init+0x118>)
 80021dc:	2200      	movs	r2, #0
 80021de:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021e0:	4b36      	ldr	r3, [pc, #216]	@ (80022bc <MX_TIM1_Init+0x118>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 7199;
 80021e6:	4b35      	ldr	r3, [pc, #212]	@ (80022bc <MX_TIM1_Init+0x118>)
 80021e8:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 80021ec:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021ee:	4b33      	ldr	r3, [pc, #204]	@ (80022bc <MX_TIM1_Init+0x118>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80021f4:	4b31      	ldr	r3, [pc, #196]	@ (80022bc <MX_TIM1_Init+0x118>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021fa:	4b30      	ldr	r3, [pc, #192]	@ (80022bc <MX_TIM1_Init+0x118>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002200:	482e      	ldr	r0, [pc, #184]	@ (80022bc <MX_TIM1_Init+0x118>)
 8002202:	f006 fc4d 	bl	8008aa0 <HAL_TIM_PWM_Init>
 8002206:	4603      	mov	r3, r0
 8002208:	2b00      	cmp	r3, #0
 800220a:	d001      	beq.n	8002210 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 800220c:	f000 ff50 	bl	80030b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002210:	2300      	movs	r3, #0
 8002212:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002214:	2300      	movs	r3, #0
 8002216:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002218:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800221c:	4619      	mov	r1, r3
 800221e:	4827      	ldr	r0, [pc, #156]	@ (80022bc <MX_TIM1_Init+0x118>)
 8002220:	f008 f868 	bl	800a2f4 <HAL_TIMEx_MasterConfigSynchronization>
 8002224:	4603      	mov	r3, r0
 8002226:	2b00      	cmp	r3, #0
 8002228:	d001      	beq.n	800222e <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 800222a:	f000 ff41 	bl	80030b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800222e:	2360      	movs	r3, #96	@ 0x60
 8002230:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8002232:	2300      	movs	r3, #0
 8002234:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8002236:	2302      	movs	r3, #2
 8002238:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800223a:	2300      	movs	r3, #0
 800223c:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800223e:	2300      	movs	r3, #0
 8002240:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002242:	2300      	movs	r3, #0
 8002244:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002246:	2300      	movs	r3, #0
 8002248:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800224a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800224e:	2208      	movs	r2, #8
 8002250:	4619      	mov	r1, r3
 8002252:	481a      	ldr	r0, [pc, #104]	@ (80022bc <MX_TIM1_Init+0x118>)
 8002254:	f007 fa22 	bl	800969c <HAL_TIM_PWM_ConfigChannel>
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d001      	beq.n	8002262 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 800225e:	f000 ff27 	bl	80030b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002262:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002266:	220c      	movs	r2, #12
 8002268:	4619      	mov	r1, r3
 800226a:	4814      	ldr	r0, [pc, #80]	@ (80022bc <MX_TIM1_Init+0x118>)
 800226c:	f007 fa16 	bl	800969c <HAL_TIM_PWM_ConfigChannel>
 8002270:	4603      	mov	r3, r0
 8002272:	2b00      	cmp	r3, #0
 8002274:	d001      	beq.n	800227a <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8002276:	f000 ff1b 	bl	80030b0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800227a:	2300      	movs	r3, #0
 800227c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800227e:	2300      	movs	r3, #0
 8002280:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002282:	2300      	movs	r3, #0
 8002284:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002286:	2300      	movs	r3, #0
 8002288:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800228a:	2300      	movs	r3, #0
 800228c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800228e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002292:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002294:	2300      	movs	r3, #0
 8002296:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002298:	1d3b      	adds	r3, r7, #4
 800229a:	4619      	mov	r1, r3
 800229c:	4807      	ldr	r0, [pc, #28]	@ (80022bc <MX_TIM1_Init+0x118>)
 800229e:	f008 f8a5 	bl	800a3ec <HAL_TIMEx_ConfigBreakDeadTime>
 80022a2:	4603      	mov	r3, r0
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d001      	beq.n	80022ac <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 80022a8:	f000 ff02 	bl	80030b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80022ac:	4803      	ldr	r0, [pc, #12]	@ (80022bc <MX_TIM1_Init+0x118>)
 80022ae:	f003 f859 	bl	8005364 <HAL_TIM_MspPostInit>

}
 80022b2:	bf00      	nop
 80022b4:	3748      	adds	r7, #72	@ 0x48
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	20000318 	.word	0x20000318
 80022c0:	40010000 	.word	0x40010000

080022c4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b08c      	sub	sp, #48	@ 0x30
 80022c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80022ca:	f107 030c 	add.w	r3, r7, #12
 80022ce:	2224      	movs	r2, #36	@ 0x24
 80022d0:	2100      	movs	r1, #0
 80022d2:	4618      	mov	r0, r3
 80022d4:	f00d f961 	bl	800f59a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022d8:	1d3b      	adds	r3, r7, #4
 80022da:	2200      	movs	r2, #0
 80022dc:	601a      	str	r2, [r3, #0]
 80022de:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80022e0:	4b21      	ldr	r3, [pc, #132]	@ (8002368 <MX_TIM2_Init+0xa4>)
 80022e2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80022e6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80022e8:	4b1f      	ldr	r3, [pc, #124]	@ (8002368 <MX_TIM2_Init+0xa4>)
 80022ea:	2200      	movs	r2, #0
 80022ec:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022ee:	4b1e      	ldr	r3, [pc, #120]	@ (8002368 <MX_TIM2_Init+0xa4>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80022f4:	4b1c      	ldr	r3, [pc, #112]	@ (8002368 <MX_TIM2_Init+0xa4>)
 80022f6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80022fa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022fc:	4b1a      	ldr	r3, [pc, #104]	@ (8002368 <MX_TIM2_Init+0xa4>)
 80022fe:	2200      	movs	r2, #0
 8002300:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002302:	4b19      	ldr	r3, [pc, #100]	@ (8002368 <MX_TIM2_Init+0xa4>)
 8002304:	2200      	movs	r2, #0
 8002306:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002308:	2303      	movs	r3, #3
 800230a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800230c:	2300      	movs	r3, #0
 800230e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002310:	2301      	movs	r3, #1
 8002312:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002314:	2300      	movs	r3, #0
 8002316:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8002318:	230a      	movs	r3, #10
 800231a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800231c:	2300      	movs	r3, #0
 800231e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002320:	2301      	movs	r3, #1
 8002322:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002324:	2300      	movs	r3, #0
 8002326:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 8002328:	230a      	movs	r3, #10
 800232a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800232c:	f107 030c 	add.w	r3, r7, #12
 8002330:	4619      	mov	r1, r3
 8002332:	480d      	ldr	r0, [pc, #52]	@ (8002368 <MX_TIM2_Init+0xa4>)
 8002334:	f006 fef2 	bl	800911c <HAL_TIM_Encoder_Init>
 8002338:	4603      	mov	r3, r0
 800233a:	2b00      	cmp	r3, #0
 800233c:	d001      	beq.n	8002342 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800233e:	f000 feb7 	bl	80030b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002342:	2300      	movs	r3, #0
 8002344:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002346:	2300      	movs	r3, #0
 8002348:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800234a:	1d3b      	adds	r3, r7, #4
 800234c:	4619      	mov	r1, r3
 800234e:	4806      	ldr	r0, [pc, #24]	@ (8002368 <MX_TIM2_Init+0xa4>)
 8002350:	f007 ffd0 	bl	800a2f4 <HAL_TIMEx_MasterConfigSynchronization>
 8002354:	4603      	mov	r3, r0
 8002356:	2b00      	cmp	r3, #0
 8002358:	d001      	beq.n	800235e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800235a:	f000 fea9 	bl	80030b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800235e:	bf00      	nop
 8002360:	3730      	adds	r7, #48	@ 0x30
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	20000360 	.word	0x20000360

0800236c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b08e      	sub	sp, #56	@ 0x38
 8002370:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002372:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002376:	2200      	movs	r2, #0
 8002378:	601a      	str	r2, [r3, #0]
 800237a:	605a      	str	r2, [r3, #4]
 800237c:	609a      	str	r2, [r3, #8]
 800237e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002380:	f107 0320 	add.w	r3, r7, #32
 8002384:	2200      	movs	r2, #0
 8002386:	601a      	str	r2, [r3, #0]
 8002388:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800238a:	1d3b      	adds	r3, r7, #4
 800238c:	2200      	movs	r2, #0
 800238e:	601a      	str	r2, [r3, #0]
 8002390:	605a      	str	r2, [r3, #4]
 8002392:	609a      	str	r2, [r3, #8]
 8002394:	60da      	str	r2, [r3, #12]
 8002396:	611a      	str	r2, [r3, #16]
 8002398:	615a      	str	r2, [r3, #20]
 800239a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800239c:	4b2c      	ldr	r3, [pc, #176]	@ (8002450 <MX_TIM3_Init+0xe4>)
 800239e:	4a2d      	ldr	r2, [pc, #180]	@ (8002454 <MX_TIM3_Init+0xe8>)
 80023a0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 159;
 80023a2:	4b2b      	ldr	r3, [pc, #172]	@ (8002450 <MX_TIM3_Init+0xe4>)
 80023a4:	229f      	movs	r2, #159	@ 0x9f
 80023a6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023a8:	4b29      	ldr	r3, [pc, #164]	@ (8002450 <MX_TIM3_Init+0xe4>)
 80023aa:	2200      	movs	r2, #0
 80023ac:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1999;
 80023ae:	4b28      	ldr	r3, [pc, #160]	@ (8002450 <MX_TIM3_Init+0xe4>)
 80023b0:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 80023b4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023b6:	4b26      	ldr	r3, [pc, #152]	@ (8002450 <MX_TIM3_Init+0xe4>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023bc:	4b24      	ldr	r3, [pc, #144]	@ (8002450 <MX_TIM3_Init+0xe4>)
 80023be:	2200      	movs	r2, #0
 80023c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80023c2:	4823      	ldr	r0, [pc, #140]	@ (8002450 <MX_TIM3_Init+0xe4>)
 80023c4:	f006 faac 	bl	8008920 <HAL_TIM_Base_Init>
 80023c8:	4603      	mov	r3, r0
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d001      	beq.n	80023d2 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80023ce:	f000 fe6f 	bl	80030b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023d2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80023d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80023d8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80023dc:	4619      	mov	r1, r3
 80023de:	481c      	ldr	r0, [pc, #112]	@ (8002450 <MX_TIM3_Init+0xe4>)
 80023e0:	f007 fa1e 	bl	8009820 <HAL_TIM_ConfigClockSource>
 80023e4:	4603      	mov	r3, r0
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d001      	beq.n	80023ee <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80023ea:	f000 fe61 	bl	80030b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80023ee:	4818      	ldr	r0, [pc, #96]	@ (8002450 <MX_TIM3_Init+0xe4>)
 80023f0:	f006 fb56 	bl	8008aa0 <HAL_TIM_PWM_Init>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d001      	beq.n	80023fe <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80023fa:	f000 fe59 	bl	80030b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023fe:	2300      	movs	r3, #0
 8002400:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002402:	2300      	movs	r3, #0
 8002404:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002406:	f107 0320 	add.w	r3, r7, #32
 800240a:	4619      	mov	r1, r3
 800240c:	4810      	ldr	r0, [pc, #64]	@ (8002450 <MX_TIM3_Init+0xe4>)
 800240e:	f007 ff71 	bl	800a2f4 <HAL_TIMEx_MasterConfigSynchronization>
 8002412:	4603      	mov	r3, r0
 8002414:	2b00      	cmp	r3, #0
 8002416:	d001      	beq.n	800241c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002418:	f000 fe4a 	bl	80030b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800241c:	2360      	movs	r3, #96	@ 0x60
 800241e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002420:	2300      	movs	r3, #0
 8002422:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002424:	2300      	movs	r3, #0
 8002426:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002428:	2300      	movs	r3, #0
 800242a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800242c:	1d3b      	adds	r3, r7, #4
 800242e:	220c      	movs	r2, #12
 8002430:	4619      	mov	r1, r3
 8002432:	4807      	ldr	r0, [pc, #28]	@ (8002450 <MX_TIM3_Init+0xe4>)
 8002434:	f007 f932 	bl	800969c <HAL_TIM_PWM_ConfigChannel>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d001      	beq.n	8002442 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800243e:	f000 fe37 	bl	80030b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002442:	4803      	ldr	r0, [pc, #12]	@ (8002450 <MX_TIM3_Init+0xe4>)
 8002444:	f002 ff8e 	bl	8005364 <HAL_TIM_MspPostInit>

}
 8002448:	bf00      	nop
 800244a:	3738      	adds	r7, #56	@ 0x38
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}
 8002450:	200003a8 	.word	0x200003a8
 8002454:	40000400 	.word	0x40000400

08002458 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b08a      	sub	sp, #40	@ 0x28
 800245c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800245e:	f107 0320 	add.w	r3, r7, #32
 8002462:	2200      	movs	r2, #0
 8002464:	601a      	str	r2, [r3, #0]
 8002466:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002468:	1d3b      	adds	r3, r7, #4
 800246a:	2200      	movs	r2, #0
 800246c:	601a      	str	r2, [r3, #0]
 800246e:	605a      	str	r2, [r3, #4]
 8002470:	609a      	str	r2, [r3, #8]
 8002472:	60da      	str	r2, [r3, #12]
 8002474:	611a      	str	r2, [r3, #16]
 8002476:	615a      	str	r2, [r3, #20]
 8002478:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800247a:	4b27      	ldr	r3, [pc, #156]	@ (8002518 <MX_TIM4_Init+0xc0>)
 800247c:	4a27      	ldr	r2, [pc, #156]	@ (800251c <MX_TIM4_Init+0xc4>)
 800247e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002480:	4b25      	ldr	r3, [pc, #148]	@ (8002518 <MX_TIM4_Init+0xc0>)
 8002482:	2200      	movs	r2, #0
 8002484:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002486:	4b24      	ldr	r3, [pc, #144]	@ (8002518 <MX_TIM4_Init+0xc0>)
 8002488:	2200      	movs	r2, #0
 800248a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 7199;
 800248c:	4b22      	ldr	r3, [pc, #136]	@ (8002518 <MX_TIM4_Init+0xc0>)
 800248e:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 8002492:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002494:	4b20      	ldr	r3, [pc, #128]	@ (8002518 <MX_TIM4_Init+0xc0>)
 8002496:	2200      	movs	r2, #0
 8002498:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800249a:	4b1f      	ldr	r3, [pc, #124]	@ (8002518 <MX_TIM4_Init+0xc0>)
 800249c:	2200      	movs	r2, #0
 800249e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80024a0:	481d      	ldr	r0, [pc, #116]	@ (8002518 <MX_TIM4_Init+0xc0>)
 80024a2:	f006 fafd 	bl	8008aa0 <HAL_TIM_PWM_Init>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d001      	beq.n	80024b0 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 80024ac:	f000 fe00 	bl	80030b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024b0:	2300      	movs	r3, #0
 80024b2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024b4:	2300      	movs	r3, #0
 80024b6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80024b8:	f107 0320 	add.w	r3, r7, #32
 80024bc:	4619      	mov	r1, r3
 80024be:	4816      	ldr	r0, [pc, #88]	@ (8002518 <MX_TIM4_Init+0xc0>)
 80024c0:	f007 ff18 	bl	800a2f4 <HAL_TIMEx_MasterConfigSynchronization>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d001      	beq.n	80024ce <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 80024ca:	f000 fdf1 	bl	80030b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80024ce:	2360      	movs	r3, #96	@ 0x60
 80024d0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80024d2:	2300      	movs	r3, #0
 80024d4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80024d6:	2302      	movs	r3, #2
 80024d8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80024da:	2300      	movs	r3, #0
 80024dc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80024de:	1d3b      	adds	r3, r7, #4
 80024e0:	2208      	movs	r2, #8
 80024e2:	4619      	mov	r1, r3
 80024e4:	480c      	ldr	r0, [pc, #48]	@ (8002518 <MX_TIM4_Init+0xc0>)
 80024e6:	f007 f8d9 	bl	800969c <HAL_TIM_PWM_ConfigChannel>
 80024ea:	4603      	mov	r3, r0
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d001      	beq.n	80024f4 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 80024f0:	f000 fdde 	bl	80030b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80024f4:	1d3b      	adds	r3, r7, #4
 80024f6:	220c      	movs	r2, #12
 80024f8:	4619      	mov	r1, r3
 80024fa:	4807      	ldr	r0, [pc, #28]	@ (8002518 <MX_TIM4_Init+0xc0>)
 80024fc:	f007 f8ce 	bl	800969c <HAL_TIM_PWM_ConfigChannel>
 8002500:	4603      	mov	r3, r0
 8002502:	2b00      	cmp	r3, #0
 8002504:	d001      	beq.n	800250a <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8002506:	f000 fdd3 	bl	80030b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800250a:	4803      	ldr	r0, [pc, #12]	@ (8002518 <MX_TIM4_Init+0xc0>)
 800250c:	f002 ff2a 	bl	8005364 <HAL_TIM_MspPostInit>

}
 8002510:	bf00      	nop
 8002512:	3728      	adds	r7, #40	@ 0x28
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}
 8002518:	200003f0 	.word	0x200003f0
 800251c:	40000800 	.word	0x40000800

08002520 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b08c      	sub	sp, #48	@ 0x30
 8002524:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002526:	f107 030c 	add.w	r3, r7, #12
 800252a:	2224      	movs	r2, #36	@ 0x24
 800252c:	2100      	movs	r1, #0
 800252e:	4618      	mov	r0, r3
 8002530:	f00d f833 	bl	800f59a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002534:	1d3b      	adds	r3, r7, #4
 8002536:	2200      	movs	r2, #0
 8002538:	601a      	str	r2, [r3, #0]
 800253a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800253c:	4b20      	ldr	r3, [pc, #128]	@ (80025c0 <MX_TIM5_Init+0xa0>)
 800253e:	4a21      	ldr	r2, [pc, #132]	@ (80025c4 <MX_TIM5_Init+0xa4>)
 8002540:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002542:	4b1f      	ldr	r3, [pc, #124]	@ (80025c0 <MX_TIM5_Init+0xa0>)
 8002544:	2200      	movs	r2, #0
 8002546:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002548:	4b1d      	ldr	r3, [pc, #116]	@ (80025c0 <MX_TIM5_Init+0xa0>)
 800254a:	2200      	movs	r2, #0
 800254c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 800254e:	4b1c      	ldr	r3, [pc, #112]	@ (80025c0 <MX_TIM5_Init+0xa0>)
 8002550:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002554:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002556:	4b1a      	ldr	r3, [pc, #104]	@ (80025c0 <MX_TIM5_Init+0xa0>)
 8002558:	2200      	movs	r2, #0
 800255a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800255c:	4b18      	ldr	r3, [pc, #96]	@ (80025c0 <MX_TIM5_Init+0xa0>)
 800255e:	2200      	movs	r2, #0
 8002560:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002562:	2303      	movs	r3, #3
 8002564:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002566:	2300      	movs	r3, #0
 8002568:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800256a:	2301      	movs	r3, #1
 800256c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800256e:	2300      	movs	r3, #0
 8002570:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8002572:	230a      	movs	r3, #10
 8002574:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002576:	2300      	movs	r3, #0
 8002578:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800257a:	2301      	movs	r3, #1
 800257c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800257e:	2300      	movs	r3, #0
 8002580:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002582:	2300      	movs	r3, #0
 8002584:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8002586:	f107 030c 	add.w	r3, r7, #12
 800258a:	4619      	mov	r1, r3
 800258c:	480c      	ldr	r0, [pc, #48]	@ (80025c0 <MX_TIM5_Init+0xa0>)
 800258e:	f006 fdc5 	bl	800911c <HAL_TIM_Encoder_Init>
 8002592:	4603      	mov	r3, r0
 8002594:	2b00      	cmp	r3, #0
 8002596:	d001      	beq.n	800259c <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8002598:	f000 fd8a 	bl	80030b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800259c:	2300      	movs	r3, #0
 800259e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025a0:	2300      	movs	r3, #0
 80025a2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80025a4:	1d3b      	adds	r3, r7, #4
 80025a6:	4619      	mov	r1, r3
 80025a8:	4805      	ldr	r0, [pc, #20]	@ (80025c0 <MX_TIM5_Init+0xa0>)
 80025aa:	f007 fea3 	bl	800a2f4 <HAL_TIMEx_MasterConfigSynchronization>
 80025ae:	4603      	mov	r3, r0
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d001      	beq.n	80025b8 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 80025b4:	f000 fd7c 	bl	80030b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80025b8:	bf00      	nop
 80025ba:	3730      	adds	r7, #48	@ 0x30
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	20000438 	.word	0x20000438
 80025c4:	40000c00 	.word	0x40000c00

080025c8 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b088      	sub	sp, #32
 80025cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025ce:	f107 0310 	add.w	r3, r7, #16
 80025d2:	2200      	movs	r2, #0
 80025d4:	601a      	str	r2, [r3, #0]
 80025d6:	605a      	str	r2, [r3, #4]
 80025d8:	609a      	str	r2, [r3, #8]
 80025da:	60da      	str	r2, [r3, #12]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80025dc:	463b      	mov	r3, r7
 80025de:	2200      	movs	r2, #0
 80025e0:	601a      	str	r2, [r3, #0]
 80025e2:	605a      	str	r2, [r3, #4]
 80025e4:	609a      	str	r2, [r3, #8]
 80025e6:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80025e8:	4b23      	ldr	r3, [pc, #140]	@ (8002678 <MX_TIM12_Init+0xb0>)
 80025ea:	4a24      	ldr	r2, [pc, #144]	@ (800267c <MX_TIM12_Init+0xb4>)
 80025ec:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 15;
 80025ee:	4b22      	ldr	r3, [pc, #136]	@ (8002678 <MX_TIM12_Init+0xb0>)
 80025f0:	220f      	movs	r2, #15
 80025f2:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025f4:	4b20      	ldr	r3, [pc, #128]	@ (8002678 <MX_TIM12_Init+0xb0>)
 80025f6:	2200      	movs	r2, #0
 80025f8:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 80025fa:	4b1f      	ldr	r3, [pc, #124]	@ (8002678 <MX_TIM12_Init+0xb0>)
 80025fc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002600:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002602:	4b1d      	ldr	r3, [pc, #116]	@ (8002678 <MX_TIM12_Init+0xb0>)
 8002604:	2200      	movs	r2, #0
 8002606:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002608:	4b1b      	ldr	r3, [pc, #108]	@ (8002678 <MX_TIM12_Init+0xb0>)
 800260a:	2200      	movs	r2, #0
 800260c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 800260e:	481a      	ldr	r0, [pc, #104]	@ (8002678 <MX_TIM12_Init+0xb0>)
 8002610:	f006 f986 	bl	8008920 <HAL_TIM_Base_Init>
 8002614:	4603      	mov	r3, r0
 8002616:	2b00      	cmp	r3, #0
 8002618:	d001      	beq.n	800261e <MX_TIM12_Init+0x56>
  {
    Error_Handler();
 800261a:	f000 fd49 	bl	80030b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800261e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002622:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8002624:	f107 0310 	add.w	r3, r7, #16
 8002628:	4619      	mov	r1, r3
 800262a:	4813      	ldr	r0, [pc, #76]	@ (8002678 <MX_TIM12_Init+0xb0>)
 800262c:	f007 f8f8 	bl	8009820 <HAL_TIM_ConfigClockSource>
 8002630:	4603      	mov	r3, r0
 8002632:	2b00      	cmp	r3, #0
 8002634:	d001      	beq.n	800263a <MX_TIM12_Init+0x72>
  {
    Error_Handler();
 8002636:	f000 fd3b 	bl	80030b0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim12) != HAL_OK)
 800263a:	480f      	ldr	r0, [pc, #60]	@ (8002678 <MX_TIM12_Init+0xb0>)
 800263c:	f006 fb48 	bl	8008cd0 <HAL_TIM_IC_Init>
 8002640:	4603      	mov	r3, r0
 8002642:	2b00      	cmp	r3, #0
 8002644:	d001      	beq.n	800264a <MX_TIM12_Init+0x82>
  {
    Error_Handler();
 8002646:	f000 fd33 	bl	80030b0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800264a:	2300      	movs	r3, #0
 800264c:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800264e:	2301      	movs	r3, #1
 8002650:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002652:	2300      	movs	r3, #0
 8002654:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 8;
 8002656:	2308      	movs	r3, #8
 8002658:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim12, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800265a:	463b      	mov	r3, r7
 800265c:	2200      	movs	r2, #0
 800265e:	4619      	mov	r1, r3
 8002660:	4805      	ldr	r0, [pc, #20]	@ (8002678 <MX_TIM12_Init+0xb0>)
 8002662:	f006 ff7f 	bl	8009564 <HAL_TIM_IC_ConfigChannel>
 8002666:	4603      	mov	r3, r0
 8002668:	2b00      	cmp	r3, #0
 800266a:	d001      	beq.n	8002670 <MX_TIM12_Init+0xa8>
  {
    Error_Handler();
 800266c:	f000 fd20 	bl	80030b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 8002670:	bf00      	nop
 8002672:	3720      	adds	r7, #32
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}
 8002678:	20000480 	.word	0x20000480
 800267c:	40001800 	.word	0x40001800

08002680 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002684:	4b11      	ldr	r3, [pc, #68]	@ (80026cc <MX_USART1_UART_Init+0x4c>)
 8002686:	4a12      	ldr	r2, [pc, #72]	@ (80026d0 <MX_USART1_UART_Init+0x50>)
 8002688:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800268a:	4b10      	ldr	r3, [pc, #64]	@ (80026cc <MX_USART1_UART_Init+0x4c>)
 800268c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002690:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002692:	4b0e      	ldr	r3, [pc, #56]	@ (80026cc <MX_USART1_UART_Init+0x4c>)
 8002694:	2200      	movs	r2, #0
 8002696:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002698:	4b0c      	ldr	r3, [pc, #48]	@ (80026cc <MX_USART1_UART_Init+0x4c>)
 800269a:	2200      	movs	r2, #0
 800269c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800269e:	4b0b      	ldr	r3, [pc, #44]	@ (80026cc <MX_USART1_UART_Init+0x4c>)
 80026a0:	2200      	movs	r2, #0
 80026a2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80026a4:	4b09      	ldr	r3, [pc, #36]	@ (80026cc <MX_USART1_UART_Init+0x4c>)
 80026a6:	220c      	movs	r2, #12
 80026a8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026aa:	4b08      	ldr	r3, [pc, #32]	@ (80026cc <MX_USART1_UART_Init+0x4c>)
 80026ac:	2200      	movs	r2, #0
 80026ae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80026b0:	4b06      	ldr	r3, [pc, #24]	@ (80026cc <MX_USART1_UART_Init+0x4c>)
 80026b2:	2200      	movs	r2, #0
 80026b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80026b6:	4805      	ldr	r0, [pc, #20]	@ (80026cc <MX_USART1_UART_Init+0x4c>)
 80026b8:	f007 fefe 	bl	800a4b8 <HAL_UART_Init>
 80026bc:	4603      	mov	r3, r0
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d001      	beq.n	80026c6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80026c2:	f000 fcf5 	bl	80030b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80026c6:	bf00      	nop
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	200004c8 	.word	0x200004c8
 80026d0:	40011000 	.word	0x40011000

080026d4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80026d8:	4b13      	ldr	r3, [pc, #76]	@ (8002728 <MX_USART3_UART_Init+0x54>)
 80026da:	4a14      	ldr	r2, [pc, #80]	@ (800272c <MX_USART3_UART_Init+0x58>)
 80026dc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80026de:	4b12      	ldr	r3, [pc, #72]	@ (8002728 <MX_USART3_UART_Init+0x54>)
 80026e0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80026e4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80026e6:	4b10      	ldr	r3, [pc, #64]	@ (8002728 <MX_USART3_UART_Init+0x54>)
 80026e8:	2200      	movs	r2, #0
 80026ea:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80026ec:	4b0e      	ldr	r3, [pc, #56]	@ (8002728 <MX_USART3_UART_Init+0x54>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80026f2:	4b0d      	ldr	r3, [pc, #52]	@ (8002728 <MX_USART3_UART_Init+0x54>)
 80026f4:	2200      	movs	r2, #0
 80026f6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80026f8:	4b0b      	ldr	r3, [pc, #44]	@ (8002728 <MX_USART3_UART_Init+0x54>)
 80026fa:	220c      	movs	r2, #12
 80026fc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026fe:	4b0a      	ldr	r3, [pc, #40]	@ (8002728 <MX_USART3_UART_Init+0x54>)
 8002700:	2200      	movs	r2, #0
 8002702:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002704:	4b08      	ldr	r3, [pc, #32]	@ (8002728 <MX_USART3_UART_Init+0x54>)
 8002706:	2200      	movs	r2, #0
 8002708:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800270a:	4807      	ldr	r0, [pc, #28]	@ (8002728 <MX_USART3_UART_Init+0x54>)
 800270c:	f007 fed4 	bl	800a4b8 <HAL_UART_Init>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d001      	beq.n	800271a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002716:	f000 fccb 	bl	80030b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */
  // NEW: Start listening for a 10-byte packet using DMA
  HAL_UART_Receive_DMA(&huart3, (uint8_t*)uart_dma_rx_buffer, 10);
 800271a:	220a      	movs	r2, #10
 800271c:	4904      	ldr	r1, [pc, #16]	@ (8002730 <MX_USART3_UART_Init+0x5c>)
 800271e:	4802      	ldr	r0, [pc, #8]	@ (8002728 <MX_USART3_UART_Init+0x54>)
 8002720:	f007 ffa5 	bl	800a66e <HAL_UART_Receive_DMA>
  /* USER CODE END USART3_Init 2 */

}
 8002724:	bf00      	nop
 8002726:	bd80      	pop	{r7, pc}
 8002728:	20000510 	.word	0x20000510
 800272c:	40004800 	.word	0x40004800
 8002730:	200005f8 	.word	0x200005f8

08002734 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b082      	sub	sp, #8
 8002738:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800273a:	2300      	movs	r3, #0
 800273c:	607b      	str	r3, [r7, #4]
 800273e:	4b0c      	ldr	r3, [pc, #48]	@ (8002770 <MX_DMA_Init+0x3c>)
 8002740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002742:	4a0b      	ldr	r2, [pc, #44]	@ (8002770 <MX_DMA_Init+0x3c>)
 8002744:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002748:	6313      	str	r3, [r2, #48]	@ 0x30
 800274a:	4b09      	ldr	r3, [pc, #36]	@ (8002770 <MX_DMA_Init+0x3c>)
 800274c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800274e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002752:	607b      	str	r3, [r7, #4]
 8002754:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8002756:	2200      	movs	r2, #0
 8002758:	2105      	movs	r1, #5
 800275a:	200c      	movs	r0, #12
 800275c:	f003 fe28 	bl	80063b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002760:	200c      	movs	r0, #12
 8002762:	f003 fe41 	bl	80063e8 <HAL_NVIC_EnableIRQ>

}
 8002766:	bf00      	nop
 8002768:	3708      	adds	r7, #8
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	40023800 	.word	0x40023800

08002774 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b08a      	sub	sp, #40	@ 0x28
 8002778:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800277a:	f107 0314 	add.w	r3, r7, #20
 800277e:	2200      	movs	r2, #0
 8002780:	601a      	str	r2, [r3, #0]
 8002782:	605a      	str	r2, [r3, #4]
 8002784:	609a      	str	r2, [r3, #8]
 8002786:	60da      	str	r2, [r3, #12]
 8002788:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800278a:	2300      	movs	r3, #0
 800278c:	613b      	str	r3, [r7, #16]
 800278e:	4b49      	ldr	r3, [pc, #292]	@ (80028b4 <MX_GPIO_Init+0x140>)
 8002790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002792:	4a48      	ldr	r2, [pc, #288]	@ (80028b4 <MX_GPIO_Init+0x140>)
 8002794:	f043 0301 	orr.w	r3, r3, #1
 8002798:	6313      	str	r3, [r2, #48]	@ 0x30
 800279a:	4b46      	ldr	r3, [pc, #280]	@ (80028b4 <MX_GPIO_Init+0x140>)
 800279c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800279e:	f003 0301 	and.w	r3, r3, #1
 80027a2:	613b      	str	r3, [r7, #16]
 80027a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80027a6:	2300      	movs	r3, #0
 80027a8:	60fb      	str	r3, [r7, #12]
 80027aa:	4b42      	ldr	r3, [pc, #264]	@ (80028b4 <MX_GPIO_Init+0x140>)
 80027ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ae:	4a41      	ldr	r2, [pc, #260]	@ (80028b4 <MX_GPIO_Init+0x140>)
 80027b0:	f043 0310 	orr.w	r3, r3, #16
 80027b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80027b6:	4b3f      	ldr	r3, [pc, #252]	@ (80028b4 <MX_GPIO_Init+0x140>)
 80027b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ba:	f003 0310 	and.w	r3, r3, #16
 80027be:	60fb      	str	r3, [r7, #12]
 80027c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80027c2:	2300      	movs	r3, #0
 80027c4:	60bb      	str	r3, [r7, #8]
 80027c6:	4b3b      	ldr	r3, [pc, #236]	@ (80028b4 <MX_GPIO_Init+0x140>)
 80027c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ca:	4a3a      	ldr	r2, [pc, #232]	@ (80028b4 <MX_GPIO_Init+0x140>)
 80027cc:	f043 0302 	orr.w	r3, r3, #2
 80027d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80027d2:	4b38      	ldr	r3, [pc, #224]	@ (80028b4 <MX_GPIO_Init+0x140>)
 80027d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027d6:	f003 0302 	and.w	r3, r3, #2
 80027da:	60bb      	str	r3, [r7, #8]
 80027dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80027de:	2300      	movs	r3, #0
 80027e0:	607b      	str	r3, [r7, #4]
 80027e2:	4b34      	ldr	r3, [pc, #208]	@ (80028b4 <MX_GPIO_Init+0x140>)
 80027e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027e6:	4a33      	ldr	r2, [pc, #204]	@ (80028b4 <MX_GPIO_Init+0x140>)
 80027e8:	f043 0308 	orr.w	r3, r3, #8
 80027ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80027ee:	4b31      	ldr	r3, [pc, #196]	@ (80028b4 <MX_GPIO_Init+0x140>)
 80027f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027f2:	f003 0308 	and.w	r3, r3, #8
 80027f6:	607b      	str	r3, [r7, #4]
 80027f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80027fa:	2300      	movs	r3, #0
 80027fc:	603b      	str	r3, [r7, #0]
 80027fe:	4b2d      	ldr	r3, [pc, #180]	@ (80028b4 <MX_GPIO_Init+0x140>)
 8002800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002802:	4a2c      	ldr	r2, [pc, #176]	@ (80028b4 <MX_GPIO_Init+0x140>)
 8002804:	f043 0304 	orr.w	r3, r3, #4
 8002808:	6313      	str	r3, [r2, #48]	@ 0x30
 800280a:	4b2a      	ldr	r3, [pc, #168]	@ (80028b4 <MX_GPIO_Init+0x140>)
 800280c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800280e:	f003 0304 	and.w	r3, r3, #4
 8002812:	603b      	str	r3, [r7, #0]
 8002814:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8002816:	2200      	movs	r2, #0
 8002818:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800281c:	4826      	ldr	r0, [pc, #152]	@ (80028b8 <MX_GPIO_Init+0x144>)
 800281e:	f004 fb8f 	bl	8006f40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8002822:	2200      	movs	r2, #0
 8002824:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002828:	4824      	ldr	r0, [pc, #144]	@ (80028bc <MX_GPIO_Init+0x148>)
 800282a:	f004 fb89 	bl	8006f40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, OLED_DC_Pin|OLED_RST_Pin|OLED_SDA_Pin|OLED_SCL_Pin, GPIO_PIN_RESET);
 800282e:	2200      	movs	r2, #0
 8002830:	f44f 41f0 	mov.w	r1, #30720	@ 0x7800
 8002834:	4822      	ldr	r0, [pc, #136]	@ (80028c0 <MX_GPIO_Init+0x14c>)
 8002836:	f004 fb83 	bl	8006f40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED3_Pin */
  GPIO_InitStruct.Pin = LED3_Pin;
 800283a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800283e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002840:	2301      	movs	r3, #1
 8002842:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002844:	2300      	movs	r3, #0
 8002846:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002848:	2300      	movs	r3, #0
 800284a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED3_GPIO_Port, &GPIO_InitStruct);
 800284c:	f107 0314 	add.w	r3, r7, #20
 8002850:	4619      	mov	r1, r3
 8002852:	4819      	ldr	r0, [pc, #100]	@ (80028b8 <MX_GPIO_Init+0x144>)
 8002854:	f004 f9d8 	bl	8006c08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002858:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800285c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800285e:	2301      	movs	r3, #1
 8002860:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002862:	2300      	movs	r3, #0
 8002864:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002866:	2300      	movs	r3, #0
 8002868:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800286a:	f107 0314 	add.w	r3, r7, #20
 800286e:	4619      	mov	r1, r3
 8002870:	4812      	ldr	r0, [pc, #72]	@ (80028bc <MX_GPIO_Init+0x148>)
 8002872:	f004 f9c9 	bl	8006c08 <HAL_GPIO_Init>

  /*Configure GPIO pins : OLED_DC_Pin OLED_RST_Pin OLED_SDA_Pin OLED_SCL_Pin */
  GPIO_InitStruct.Pin = OLED_DC_Pin|OLED_RST_Pin|OLED_SDA_Pin|OLED_SCL_Pin;
 8002876:	f44f 43f0 	mov.w	r3, #30720	@ 0x7800
 800287a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800287c:	2301      	movs	r3, #1
 800287e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002880:	2300      	movs	r3, #0
 8002882:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002884:	2300      	movs	r3, #0
 8002886:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002888:	f107 0314 	add.w	r3, r7, #20
 800288c:	4619      	mov	r1, r3
 800288e:	480c      	ldr	r0, [pc, #48]	@ (80028c0 <MX_GPIO_Init+0x14c>)
 8002890:	f004 f9ba 	bl	8006c08 <HAL_GPIO_Init>

  /*Configure GPIO pin : UESR_BUTTON_Pin */
  GPIO_InitStruct.Pin = UESR_BUTTON_Pin;
 8002894:	2301      	movs	r3, #1
 8002896:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002898:	2300      	movs	r3, #0
 800289a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800289c:	2300      	movs	r3, #0
 800289e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(UESR_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80028a0:	f107 0314 	add.w	r3, r7, #20
 80028a4:	4619      	mov	r1, r3
 80028a6:	4804      	ldr	r0, [pc, #16]	@ (80028b8 <MX_GPIO_Init+0x144>)
 80028a8:	f004 f9ae 	bl	8006c08 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80028ac:	bf00      	nop
 80028ae:	3728      	adds	r7, #40	@ 0x28
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	40023800 	.word	0x40023800
 80028b8:	40021000 	.word	0x40021000
 80028bc:	40020400 	.word	0x40020400
 80028c0:	40020c00 	.word	0x40020c00

080028c4 <HAL_TIM_IC_MspInit>:
/* USER CODE BEGIN 4 */
/**
* @brief TIM_IC MSP Initialization
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b08a      	sub	sp, #40	@ 0x28
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028cc:	f107 0314 	add.w	r3, r7, #20
 80028d0:	2200      	movs	r2, #0
 80028d2:	601a      	str	r2, [r3, #0]
 80028d4:	605a      	str	r2, [r3, #4]
 80028d6:	609a      	str	r2, [r3, #8]
 80028d8:	60da      	str	r2, [r3, #12]
 80028da:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM12)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a1d      	ldr	r2, [pc, #116]	@ (8002958 <HAL_TIM_IC_MspInit+0x94>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d134      	bne.n	8002950 <HAL_TIM_IC_MspInit+0x8c>
  {
    __HAL_RCC_TIM12_CLK_ENABLE();
 80028e6:	2300      	movs	r3, #0
 80028e8:	613b      	str	r3, [r7, #16]
 80028ea:	4b1c      	ldr	r3, [pc, #112]	@ (800295c <HAL_TIM_IC_MspInit+0x98>)
 80028ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ee:	4a1b      	ldr	r2, [pc, #108]	@ (800295c <HAL_TIM_IC_MspInit+0x98>)
 80028f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80028f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80028f6:	4b19      	ldr	r3, [pc, #100]	@ (800295c <HAL_TIM_IC_MspInit+0x98>)
 80028f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028fe:	613b      	str	r3, [r7, #16]
 8002900:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002902:	2300      	movs	r3, #0
 8002904:	60fb      	str	r3, [r7, #12]
 8002906:	4b15      	ldr	r3, [pc, #84]	@ (800295c <HAL_TIM_IC_MspInit+0x98>)
 8002908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800290a:	4a14      	ldr	r2, [pc, #80]	@ (800295c <HAL_TIM_IC_MspInit+0x98>)
 800290c:	f043 0302 	orr.w	r3, r3, #2
 8002910:	6313      	str	r3, [r2, #48]	@ 0x30
 8002912:	4b12      	ldr	r3, [pc, #72]	@ (800295c <HAL_TIM_IC_MspInit+0x98>)
 8002914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002916:	f003 0302 	and.w	r3, r3, #2
 800291a:	60fb      	str	r3, [r7, #12]
 800291c:	68fb      	ldr	r3, [r7, #12]
    /**TIM12 GPIO Configuration: PB14 -> TIM12_CH1 */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800291e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002922:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002924:	2302      	movs	r3, #2
 8002926:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002928:	2300      	movs	r3, #0
 800292a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800292c:	2300      	movs	r3, #0
 800292e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8002930:	2309      	movs	r3, #9
 8002932:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002934:	f107 0314 	add.w	r3, r7, #20
 8002938:	4619      	mov	r1, r3
 800293a:	4809      	ldr	r0, [pc, #36]	@ (8002960 <HAL_TIM_IC_MspInit+0x9c>)
 800293c:	f004 f964 	bl	8006c08 <HAL_GPIO_Init>

    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 5, 0);
 8002940:	2200      	movs	r2, #0
 8002942:	2105      	movs	r1, #5
 8002944:	202b      	movs	r0, #43	@ 0x2b
 8002946:	f003 fd33 	bl	80063b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 800294a:	202b      	movs	r0, #43	@ 0x2b
 800294c:	f003 fd4c 	bl	80063e8 <HAL_NVIC_EnableIRQ>
  }
}
 8002950:	bf00      	nop
 8002952:	3728      	adds	r7, #40	@ 0x28
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}
 8002958:	40001800 	.word	0x40001800
 800295c:	40023800 	.word	0x40023800
 8002960:	40020400 	.word	0x40020400

08002964 <HAL_TIM_IC_CaptureCallback>:
// volatile uint32_t ic_val1 = 0;
// volatile uint32_t ic_val2 = 0;
// volatile uint32_t pulse_width = 0;

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b082      	sub	sp, #8
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM12 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a45      	ldr	r2, [pc, #276]	@ (8002a88 <HAL_TIM_IC_CaptureCallback+0x124>)
 8002972:	4293      	cmp	r3, r2
 8002974:	f040 8084 	bne.w	8002a80 <HAL_TIM_IC_CaptureCallback+0x11c>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	7f1b      	ldrb	r3, [r3, #28]
 800297c:	2b01      	cmp	r3, #1
 800297e:	d17f      	bne.n	8002a80 <HAL_TIM_IC_CaptureCallback+0x11c>
    {
        if (capture_state == 0) // rising edge just captured
 8002980:	4b42      	ldr	r3, [pc, #264]	@ (8002a8c <HAL_TIM_IC_CaptureCallback+0x128>)
 8002982:	781b      	ldrb	r3, [r3, #0]
 8002984:	b2db      	uxtb	r3, r3
 8002986:	2b00      	cmp	r3, #0
 8002988:	d12f      	bne.n	80029ea <HAL_TIM_IC_CaptureCallback+0x86>
        {
            capture_val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 800298a:	2100      	movs	r1, #0
 800298c:	6878      	ldr	r0, [r7, #4]
 800298e:	f007 f80f 	bl	80099b0 <HAL_TIM_ReadCapturedValue>
 8002992:	4603      	mov	r3, r0
 8002994:	4a3e      	ldr	r2, [pc, #248]	@ (8002a90 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8002996:	6013      	str	r3, [r2, #0]
            capture_state = 1;
 8002998:	4b3c      	ldr	r3, [pc, #240]	@ (8002a8c <HAL_TIM_IC_CaptureCallback+0x128>)
 800299a:	2201      	movs	r2, #1
 800299c:	701a      	strb	r2, [r3, #0]

            // --- SAFE SWITCH to FALLING ---
            __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	68da      	ldr	r2, [r3, #12]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f022 0202 	bic.w	r2, r2, #2
 80029ac:	60da      	str	r2, [r3, #12]
            __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	6a1a      	ldr	r2, [r3, #32]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f022 020a 	bic.w	r2, r2, #10
 80029bc:	621a      	str	r2, [r3, #32]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	6a1a      	ldr	r2, [r3, #32]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f042 0202 	orr.w	r2, r2, #2
 80029cc:	621a      	str	r2, [r3, #32]
            __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f06f 0202 	mvn.w	r2, #2
 80029d6:	611a      	str	r2, [r3, #16]
            __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	68da      	ldr	r2, [r3, #12]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f042 0202 	orr.w	r2, r2, #2
 80029e6:	60da      	str	r2, [r3, #12]
            __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);

            HAL_TIM_IC_Stop_IT(&htim12, TIM_CHANNEL_1);
        }
    }
}
 80029e8:	e04a      	b.n	8002a80 <HAL_TIM_IC_CaptureCallback+0x11c>
            capture_val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80029ea:	2100      	movs	r1, #0
 80029ec:	6878      	ldr	r0, [r7, #4]
 80029ee:	f006 ffdf 	bl	80099b0 <HAL_TIM_ReadCapturedValue>
 80029f2:	4603      	mov	r3, r0
 80029f4:	4a27      	ldr	r2, [pc, #156]	@ (8002a94 <HAL_TIM_IC_CaptureCallback+0x130>)
 80029f6:	6013      	str	r3, [r2, #0]
            if (capture_val2 >= capture_val1)
 80029f8:	4b26      	ldr	r3, [pc, #152]	@ (8002a94 <HAL_TIM_IC_CaptureCallback+0x130>)
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	4b24      	ldr	r3, [pc, #144]	@ (8002a90 <HAL_TIM_IC_CaptureCallback+0x12c>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d307      	bcc.n	8002a14 <HAL_TIM_IC_CaptureCallback+0xb0>
                pulse_width = capture_val2 - capture_val1;
 8002a04:	4b23      	ldr	r3, [pc, #140]	@ (8002a94 <HAL_TIM_IC_CaptureCallback+0x130>)
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	4b21      	ldr	r3, [pc, #132]	@ (8002a90 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	1ad3      	subs	r3, r2, r3
 8002a0e:	4a22      	ldr	r2, [pc, #136]	@ (8002a98 <HAL_TIM_IC_CaptureCallback+0x134>)
 8002a10:	6013      	str	r3, [r2, #0]
 8002a12:	e008      	b.n	8002a26 <HAL_TIM_IC_CaptureCallback+0xc2>
                pulse_width = (0xFFFFu - capture_val1) + capture_val2 + 1u;
 8002a14:	4b1f      	ldr	r3, [pc, #124]	@ (8002a94 <HAL_TIM_IC_CaptureCallback+0x130>)
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	4b1d      	ldr	r3, [pc, #116]	@ (8002a90 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8002a22:	4a1d      	ldr	r2, [pc, #116]	@ (8002a98 <HAL_TIM_IC_CaptureCallback+0x134>)
 8002a24:	6013      	str	r3, [r2, #0]
            is_capture_done = 1;
 8002a26:	4b1d      	ldr	r3, [pc, #116]	@ (8002a9c <HAL_TIM_IC_CaptureCallback+0x138>)
 8002a28:	2201      	movs	r2, #1
 8002a2a:	701a      	strb	r2, [r3, #0]
            capture_state = 0;
 8002a2c:	4b17      	ldr	r3, [pc, #92]	@ (8002a8c <HAL_TIM_IC_CaptureCallback+0x128>)
 8002a2e:	2200      	movs	r2, #0
 8002a30:	701a      	strb	r2, [r3, #0]
            __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	68da      	ldr	r2, [r3, #12]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f022 0202 	bic.w	r2, r2, #2
 8002a40:	60da      	str	r2, [r3, #12]
            __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	6a1a      	ldr	r2, [r3, #32]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f022 020a 	bic.w	r2, r2, #10
 8002a50:	621a      	str	r2, [r3, #32]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	6a12      	ldr	r2, [r2, #32]
 8002a5c:	621a      	str	r2, [r3, #32]
            __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f06f 0202 	mvn.w	r2, #2
 8002a66:	611a      	str	r2, [r3, #16]
            __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	68da      	ldr	r2, [r3, #12]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f042 0202 	orr.w	r2, r2, #2
 8002a76:	60da      	str	r2, [r3, #12]
            HAL_TIM_IC_Stop_IT(&htim12, TIM_CHANNEL_1);
 8002a78:	2100      	movs	r1, #0
 8002a7a:	4809      	ldr	r0, [pc, #36]	@ (8002aa0 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8002a7c:	f006 faa0 	bl	8008fc0 <HAL_TIM_IC_Stop_IT>
}
 8002a80:	bf00      	nop
 8002a82:	3708      	adds	r7, #8
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}
 8002a88:	40001800 	.word	0x40001800
 8002a8c:	2000025a 	.word	0x2000025a
 8002a90:	2000025c 	.word	0x2000025c
 8002a94:	20000260 	.word	0x20000260
 8002a98:	20000264 	.word	0x20000264
 8002a9c:	20000268 	.word	0x20000268
 8002aa0:	20000480 	.word	0x20000480

08002aa4 <DWT_Delay_us>:


void DWT_Delay_us(volatile uint32_t microseconds)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b084      	sub	sp, #16
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8002aac:	4b0d      	ldr	r3, [pc, #52]	@ (8002ae4 <DWT_Delay_us+0x40>)
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	60fb      	str	r3, [r7, #12]
  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8002ab2:	f005 fecf 	bl	8008854 <HAL_RCC_GetHCLKFreq>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	4a0b      	ldr	r2, [pc, #44]	@ (8002ae8 <DWT_Delay_us+0x44>)
 8002aba:	fba2 2303 	umull	r2, r3, r2, r3
 8002abe:	0c9b      	lsrs	r3, r3, #18
 8002ac0:	687a      	ldr	r2, [r7, #4]
 8002ac2:	fb02 f303 	mul.w	r3, r2, r3
 8002ac6:	607b      	str	r3, [r7, #4]
  /* Wait until the cycles are counted */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8002ac8:	bf00      	nop
 8002aca:	4b06      	ldr	r3, [pc, #24]	@ (8002ae4 <DWT_Delay_us+0x40>)
 8002acc:	685a      	ldr	r2, [r3, #4]
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	1ad2      	subs	r2, r2, r3
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d3f8      	bcc.n	8002aca <DWT_Delay_us+0x26>
}
 8002ad8:	bf00      	nop
 8002ada:	bf00      	nop
 8002adc:	3710      	adds	r7, #16
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	e0001000 	.word	0xe0001000
 8002ae8:	431bde83 	.word	0x431bde83

08002aec <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b086      	sub	sp, #24
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART3) {
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a0d      	ldr	r2, [pc, #52]	@ (8002b30 <HAL_UART_RxCpltCallback+0x44>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d114      	bne.n	8002b28 <HAL_UART_RxCpltCallback+0x3c>
      AppMessage_t msg;
      memcpy(msg.buffer, (void*)uart_dma_rx_buffer, 10);
 8002afe:	4a0d      	ldr	r2, [pc, #52]	@ (8002b34 <HAL_UART_RxCpltCallback+0x48>)
 8002b00:	f107 0308 	add.w	r3, r7, #8
 8002b04:	ca07      	ldmia	r2, {r0, r1, r2}
 8002b06:	c303      	stmia	r3!, {r0, r1}
 8002b08:	801a      	strh	r2, [r3, #0]
      msg.length = 10;
 8002b0a:	230a      	movs	r3, #10
 8002b0c:	617b      	str	r3, [r7, #20]

      // Send the received data to the communication task's queue from within the ISR
      osMessageQueuePut(uart_rx_msg_queue, &msg, 0, 0);
 8002b0e:	4b0a      	ldr	r3, [pc, #40]	@ (8002b38 <HAL_UART_RxCpltCallback+0x4c>)
 8002b10:	6818      	ldr	r0, [r3, #0]
 8002b12:	f107 0108 	add.w	r1, r7, #8
 8002b16:	2300      	movs	r3, #0
 8002b18:	2200      	movs	r2, #0
 8002b1a:	f009 f883 	bl	800bc24 <osMessageQueuePut>

      // Re-enable the DMA reception for the next packet
      HAL_UART_Receive_DMA(&huart3, (uint8_t*)uart_dma_rx_buffer, 10);
 8002b1e:	220a      	movs	r2, #10
 8002b20:	4904      	ldr	r1, [pc, #16]	@ (8002b34 <HAL_UART_RxCpltCallback+0x48>)
 8002b22:	4806      	ldr	r0, [pc, #24]	@ (8002b3c <HAL_UART_RxCpltCallback+0x50>)
 8002b24:	f007 fda3 	bl	800a66e <HAL_UART_Receive_DMA>
  }
}
 8002b28:	bf00      	nop
 8002b2a:	3718      	adds	r7, #24
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}
 8002b30:	40004800 	.word	0x40004800
 8002b34:	200005f8 	.word	0x200005f8
 8002b38:	200005e0 	.word	0x200005e0
 8002b3c:	20000510 	.word	0x20000510

08002b40 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b082      	sub	sp, #8
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002b48:	2001      	movs	r0, #1
 8002b4a:	f008 ffdd 	bl	800bb08 <osDelay>
 8002b4e:	e7fb      	b.n	8002b48 <StartDefaultTask+0x8>

08002b50 <StartMotorTask>:
}



void StartMotorTask(void *argument)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b08a      	sub	sp, #40	@ 0x28
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMotorTask */
  MOTION_PKT_t received_pkt;
  osStatus_t status;

  Motion_Init();
 8002b58:	f000 fbee 	bl	8003338 <Motion_Init>
  osDelay(500);
 8002b5c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002b60:	f008 ffd2 	bl	800bb08 <osDelay>

  for (;;)
  {
    // Wait for a command to arrive in the queue from the parser
    status = osMessageQueueGet(motor_cmd_queue, &received_pkt, NULL, osWaitForever);
 8002b64:	4b68      	ldr	r3, [pc, #416]	@ (8002d08 <StartMotorTask+0x1b8>)
 8002b66:	6818      	ldr	r0, [r3, #0]
 8002b68:	f107 0108 	add.w	r1, r7, #8
 8002b6c:	f04f 33ff 	mov.w	r3, #4294967295
 8002b70:	2200      	movs	r2, #0
 8002b72:	f009 f8b7 	bl	800bce4 <osMessageQueueGet>
 8002b76:	6278      	str	r0, [r7, #36]	@ 0x24


    if (status == osOK)
 8002b78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d1f2      	bne.n	8002b64 <StartMotorTask+0x14>
    {
      switch (received_pkt.cmd)
 8002b7e:	7a3b      	ldrb	r3, [r7, #8]
 8002b80:	2b06      	cmp	r3, #6
 8002b82:	f200 80aa 	bhi.w	8002cda <StartMotorTask+0x18a>
 8002b86:	a201      	add	r2, pc, #4	@ (adr r2, 8002b8c <StartMotorTask+0x3c>)
 8002b88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b8c:	08002ba9 	.word	0x08002ba9
 8002b90:	08002bb7 	.word	0x08002bb7
 8002b94:	08002c19 	.word	0x08002c19
 8002b98:	08002c01 	.word	0x08002c01
 8002b9c:	08002c87 	.word	0x08002c87
 8002ba0:	08002c31 	.word	0x08002c31
 8002ba4:	08002cd5 	.word	0x08002cd5
      {
        case MOVE_FWD:
          initial_ultrasound_distance = Front_Distance_cm;
 8002ba8:	4b58      	ldr	r3, [pc, #352]	@ (8002d0c <StartMotorTask+0x1bc>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a58      	ldr	r2, [pc, #352]	@ (8002d10 <StartMotorTask+0x1c0>)
 8002bae:	6013      	str	r3, [r2, #0]
          Motion_Sonny_Move_To_O1();
 8002bb0:	f001 f9ba 	bl	8003f28 <Motion_Sonny_Move_To_O1>
          break;
 8002bb4:	e095      	b.n	8002ce2 <StartMotorTask+0x192>

        case MOVE_BWD:
        	if((float)received_pkt.arg == 0.0f){
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	ee07 3a90 	vmov	s15, r3
 8002bbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bc0:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002bc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bc8:	d106      	bne.n	8002bd8 <StartMotorTask+0x88>
				Motion_Sonny_Dodge_O2_Left_And_Home(initial_ultrasound_distance);
 8002bca:	4b51      	ldr	r3, [pc, #324]	@ (8002d10 <StartMotorTask+0x1c0>)
 8002bcc:	edd3 7a00 	vldr	s15, [r3]
 8002bd0:	eeb0 0a67 	vmov.f32	s0, s15
 8002bd4:	f001 fb64 	bl	80042a0 <Motion_Sonny_Dodge_O2_Left_And_Home>
        	}
        	if((float)received_pkt.arg == 1.0f){
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	ee07 3a90 	vmov	s15, r3
 8002bde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002be2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002be6:	eef4 7a47 	vcmp.f32	s15, s14
 8002bea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bee:	d177      	bne.n	8002ce0 <StartMotorTask+0x190>
        		Motion_Sonny_Dodge_O2_Right_And_Home(initial_ultrasound_distance);
 8002bf0:	4b47      	ldr	r3, [pc, #284]	@ (8002d10 <StartMotorTask+0x1c0>)
 8002bf2:	edd3 7a00 	vldr	s15, [r3]
 8002bf6:	eeb0 0a67 	vmov.f32	s0, s15
 8002bfa:	f001 fd0b 	bl	8004614 <Motion_Sonny_Dodge_O2_Right_And_Home>
        	}
         break;
 8002bfe:	e06f      	b.n	8002ce0 <StartMotorTask+0x190>

        case MOVE_LEFT_FWD:
          if (!received_pkt.linear)
 8002c00:	7cfb      	ldrb	r3, [r7, #19]
 8002c02:	f083 0301 	eor.w	r3, r3, #1
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d002      	beq.n	8002c12 <StartMotorTask+0xc2>
          { // In-place pivot turn
            Motion_Sonny_Dodge_O1_Left();
 8002c0c:	f001 f9be 	bl	8003f8c <Motion_Sonny_Dodge_O1_Left>
          }
          else
          { // Forward arc turn
        	Motion_Sonny_Dodge_O1_Left();
          }
          break;
 8002c10:	e067      	b.n	8002ce2 <StartMotorTask+0x192>
        	Motion_Sonny_Dodge_O1_Left();
 8002c12:	f001 f9bb 	bl	8003f8c <Motion_Sonny_Dodge_O1_Left>
          break;
 8002c16:	e064      	b.n	8002ce2 <StartMotorTask+0x192>

        case MOVE_RIGHT_FWD:
          if (!received_pkt.linear)
 8002c18:	7cfb      	ldrb	r3, [r7, #19]
 8002c1a:	f083 0301 	eor.w	r3, r3, #1
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d002      	beq.n	8002c2a <StartMotorTask+0xda>
          { // In-place pivot turn
        	 Motion_Sonny_Dodge_O1_Right();
 8002c24:	f001 fa80 	bl	8004128 <Motion_Sonny_Dodge_O1_Right>
          }
          else
          { // Forward arc turn
        	 Motion_Sonny_Dodge_O1_Right();
          }
          break;
 8002c28:	e05b      	b.n	8002ce2 <StartMotorTask+0x192>
        	 Motion_Sonny_Dodge_O1_Right();
 8002c2a:	f001 fa7d 	bl	8004128 <Motion_Sonny_Dodge_O1_Right>
          break;
 8002c2e:	e058      	b.n	8002ce2 <StartMotorTask+0x192>

        case MOVE_LEFT_BWD:
          if (!received_pkt.linear)
 8002c30:	7cfb      	ldrb	r3, [r7, #19]
 8002c32:	f083 0301 	eor.w	r3, r3, #1
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d00b      	beq.n	8002c54 <StartMotorTask+0x104>
          { // Backward pivot is same as forward
            Motion_Turn_Angle(-(float)received_pkt.arg);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	ee07 3a90 	vmov	s15, r3
 8002c42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c46:	eef1 7a67 	vneg.f32	s15, s15
 8002c4a:	eeb0 0a67 	vmov.f32	s0, s15
 8002c4e:	f000 ffb1 	bl	8003bb4 <Motion_Turn_Angle>
          { // Backward arc turn
            int steer_deg = 50;
            int32_t pwm_bw = received_pkt.is_crawl ? 1200 : 2500;
            Motion_Turn_Angle_Arc_Backward(-(float)received_pkt.arg, steer_deg, pwm_bw);
          }
          break;
 8002c52:	e046      	b.n	8002ce2 <StartMotorTask+0x192>
            int steer_deg = 50;
 8002c54:	2332      	movs	r3, #50	@ 0x32
 8002c56:	623b      	str	r3, [r7, #32]
            int32_t pwm_bw = received_pkt.is_crawl ? 1200 : 2500;
 8002c58:	7cbb      	ldrb	r3, [r7, #18]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d002      	beq.n	8002c64 <StartMotorTask+0x114>
 8002c5e:	f44f 6396 	mov.w	r3, #1200	@ 0x4b0
 8002c62:	e001      	b.n	8002c68 <StartMotorTask+0x118>
 8002c64:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8002c68:	61fb      	str	r3, [r7, #28]
            Motion_Turn_Angle_Arc_Backward(-(float)received_pkt.arg, steer_deg, pwm_bw);
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	ee07 3a90 	vmov	s15, r3
 8002c70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c74:	eef1 7a67 	vneg.f32	s15, s15
 8002c78:	69f9      	ldr	r1, [r7, #28]
 8002c7a:	6a38      	ldr	r0, [r7, #32]
 8002c7c:	eeb0 0a67 	vmov.f32	s0, s15
 8002c80:	f001 f892 	bl	8003da8 <Motion_Turn_Angle_Arc_Backward>
          break;
 8002c84:	e02d      	b.n	8002ce2 <StartMotorTask+0x192>

        case MOVE_RIGHT_BWD:
          if (!received_pkt.linear)
 8002c86:	7cfb      	ldrb	r3, [r7, #19]
 8002c88:	f083 0301 	eor.w	r3, r3, #1
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d009      	beq.n	8002ca6 <StartMotorTask+0x156>
          { // Backward pivot is same as forward
            Motion_Turn_Angle(+(float)received_pkt.arg);
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	ee07 3a90 	vmov	s15, r3
 8002c98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c9c:	eeb0 0a67 	vmov.f32	s0, s15
 8002ca0:	f000 ff88 	bl	8003bb4 <Motion_Turn_Angle>
          { // Backward arc turn
            int steer_deg = 50;
            int32_t pwm_bw = received_pkt.is_crawl ? 1200 : 2500;
            Motion_Turn_Angle_Arc_Backward(+(float)received_pkt.arg, steer_deg, pwm_bw);
          }
          break;
 8002ca4:	e01d      	b.n	8002ce2 <StartMotorTask+0x192>
            int steer_deg = 50;
 8002ca6:	2332      	movs	r3, #50	@ 0x32
 8002ca8:	61bb      	str	r3, [r7, #24]
            int32_t pwm_bw = received_pkt.is_crawl ? 1200 : 2500;
 8002caa:	7cbb      	ldrb	r3, [r7, #18]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d002      	beq.n	8002cb6 <StartMotorTask+0x166>
 8002cb0:	f44f 6396 	mov.w	r3, #1200	@ 0x4b0
 8002cb4:	e001      	b.n	8002cba <StartMotorTask+0x16a>
 8002cb6:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8002cba:	617b      	str	r3, [r7, #20]
            Motion_Turn_Angle_Arc_Backward(+(float)received_pkt.arg, steer_deg, pwm_bw);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	ee07 3a90 	vmov	s15, r3
 8002cc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cc6:	6979      	ldr	r1, [r7, #20]
 8002cc8:	69b8      	ldr	r0, [r7, #24]
 8002cca:	eeb0 0a67 	vmov.f32	s0, s15
 8002cce:	f001 f86b 	bl	8003da8 <Motion_Turn_Angle_Arc_Backward>
          break;
 8002cd2:	e006      	b.n	8002ce2 <StartMotorTask+0x192>

        case MOVE_HALT:
          Motion_Stop();
 8002cd4:	f001 f8f4 	bl	8003ec0 <Motion_Stop>
          break;
 8002cd8:	e003      	b.n	8002ce2 <StartMotorTask+0x192>

        default:
          Motion_Stop();
 8002cda:	f001 f8f1 	bl	8003ec0 <Motion_Stop>
          break;
 8002cde:	e000      	b.n	8002ce2 <StartMotorTask+0x192>
         break;
 8002ce0:	bf00      	nop
      }

      // Run the motion controller until it reports done
      if (received_pkt.cmd != MOVE_HALT)
 8002ce2:	7a3b      	ldrb	r3, [r7, #8]
 8002ce4:	2b06      	cmp	r3, #6
 8002ce6:	f43f af3d 	beq.w	8002b64 <StartMotorTask+0x14>
      {
        while (Motion_Is_Busy())
 8002cea:	e004      	b.n	8002cf6 <StartMotorTask+0x1a6>
        {
          Motion_Process();
 8002cec:	f000 fc44 	bl	8003578 <Motion_Process>
          osDelay(20); // main control loop cadence
 8002cf0:	2014      	movs	r0, #20
 8002cf2:	f008 ff09 	bl	800bb08 <osDelay>
        while (Motion_Is_Busy())
 8002cf6:	f000 ff2f 	bl	8003b58 <Motion_Is_Busy>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d1f5      	bne.n	8002cec <StartMotorTask+0x19c>
        }
        // Short dwell after a move/turn finishes
        osDelay(150);
 8002d00:	2096      	movs	r0, #150	@ 0x96
 8002d02:	f008 ff01 	bl	800bb08 <osDelay>
    status = osMessageQueueGet(motor_cmd_queue, &received_pkt, NULL, osWaitForever);
 8002d06:	e72d      	b.n	8002b64 <StartMotorTask+0x14>
 8002d08:	200005dc 	.word	0x200005dc
 8002d0c:	20000278 	.word	0x20000278
 8002d10:	20000274 	.word	0x20000274

08002d14 <StartOLEDTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartOLEDTask */
void StartOLEDTask(void *argument)
{
 8002d14:	b5b0      	push	{r4, r5, r7, lr}
 8002d16:	b090      	sub	sp, #64	@ 0x40
 8002d18:	af04      	add	r7, sp, #16
 8002d1a:	6078      	str	r0, [r7, #4]
  extern void OLED_Refresh_Gram(void);
  extern volatile float IR_Left_cm;  // <-- Add extern for new variables
  extern volatile float IR_Right_cm; // <-- Add extern for new variable
  extern volatile float Front_Distance_cm;

  OLED_Init(); // Initialize OLED
 8002d1c:	f001 ffe0 	bl	8004ce0 <OLED_Init>

      // Display Yaw Angle


      // Display Gyro Z-axis raw data
      snprintf(buffer, sizeof(buffer), "Gyro Z: %.2f", IMU_GetGyroZLatest());
 8002d20:	f7fe fc5e 	bl	80015e0 <IMU_GetGyroZLatest>
 8002d24:	ee10 3a10 	vmov	r3, s0
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f7fd fc0d 	bl	8000548 <__aeabi_f2d>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	460b      	mov	r3, r1
 8002d32:	f107 0008 	add.w	r0, r7, #8
 8002d36:	e9cd 2300 	strd	r2, r3, [sp]
 8002d3a:	4a23      	ldr	r2, [pc, #140]	@ (8002dc8 <StartOLEDTask+0xb4>)
 8002d3c:	2128      	movs	r1, #40	@ 0x28
 8002d3e:	f00c fbb3 	bl	800f4a8 <sniprintf>
      OLED_ShowString(0, 0, (uint8_t*)buffer);
 8002d42:	f107 0308 	add.w	r3, r7, #8
 8002d46:	461a      	mov	r2, r3
 8002d48:	2100      	movs	r1, #0
 8002d4a:	2000      	movs	r0, #0
 8002d4c:	f001 ff96 	bl	8004c7c <OLED_ShowString>

      snprintf(buffer, sizeof(buffer), "FDist: %.1f cm", Front_Distance_cm);
 8002d50:	4b1e      	ldr	r3, [pc, #120]	@ (8002dcc <StartOLEDTask+0xb8>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4618      	mov	r0, r3
 8002d56:	f7fd fbf7 	bl	8000548 <__aeabi_f2d>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	460b      	mov	r3, r1
 8002d5e:	f107 0008 	add.w	r0, r7, #8
 8002d62:	e9cd 2300 	strd	r2, r3, [sp]
 8002d66:	4a1a      	ldr	r2, [pc, #104]	@ (8002dd0 <StartOLEDTask+0xbc>)
 8002d68:	2128      	movs	r1, #40	@ 0x28
 8002d6a:	f00c fb9d 	bl	800f4a8 <sniprintf>
            OLED_ShowString(0, 12, (uint8_t*)buffer);
 8002d6e:	f107 0308 	add.w	r3, r7, #8
 8002d72:	461a      	mov	r2, r3
 8002d74:	210c      	movs	r1, #12
 8002d76:	2000      	movs	r0, #0
 8002d78:	f001 ff80 	bl	8004c7c <OLED_ShowString>

       snprintf(buffer, sizeof(buffer), "L:%.1f R:%.1f", IR_Left_cm, IR_Right_cm);
 8002d7c:	4b15      	ldr	r3, [pc, #84]	@ (8002dd4 <StartOLEDTask+0xc0>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4618      	mov	r0, r3
 8002d82:	f7fd fbe1 	bl	8000548 <__aeabi_f2d>
 8002d86:	4604      	mov	r4, r0
 8002d88:	460d      	mov	r5, r1
 8002d8a:	4b13      	ldr	r3, [pc, #76]	@ (8002dd8 <StartOLEDTask+0xc4>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f7fd fbda 	bl	8000548 <__aeabi_f2d>
 8002d94:	4602      	mov	r2, r0
 8002d96:	460b      	mov	r3, r1
 8002d98:	f107 0008 	add.w	r0, r7, #8
 8002d9c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002da0:	e9cd 4500 	strd	r4, r5, [sp]
 8002da4:	4a0d      	ldr	r2, [pc, #52]	@ (8002ddc <StartOLEDTask+0xc8>)
 8002da6:	2128      	movs	r1, #40	@ 0x28
 8002da8:	f00c fb7e 	bl	800f4a8 <sniprintf>
            OLED_ShowString(0, 24, (uint8_t*)buffer); // Display on the last line
 8002dac:	f107 0308 	add.w	r3, r7, #8
 8002db0:	461a      	mov	r2, r3
 8002db2:	2118      	movs	r1, #24
 8002db4:	2000      	movs	r0, #0
 8002db6:	f001 ff61 	bl	8004c7c <OLED_ShowString>

      OLED_Refresh_Gram();
 8002dba:	f001 fde7 	bl	800498c <OLED_Refresh_Gram>
      osDelay(200);
 8002dbe:	20c8      	movs	r0, #200	@ 0xc8
 8002dc0:	f008 fea2 	bl	800bb08 <osDelay>
  {
 8002dc4:	bf00      	nop
 8002dc6:	e7ab      	b.n	8002d20 <StartOLEDTask+0xc>
 8002dc8:	08012070 	.word	0x08012070
 8002dcc:	20000278 	.word	0x20000278
 8002dd0:	08012080 	.word	0x08012080
 8002dd4:	2000026c 	.word	0x2000026c
 8002dd8:	20000270 	.word	0x20000270
 8002ddc:	08012090 	.word	0x08012090

08002de0 <StartGyroTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartGyroTask */
void StartGyroTask(void *argument)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b084      	sub	sp, #16
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartGyroTask */

  // ---- 1) Choose device params ----
  // I2C address select: 0 -> 0x68, 1 -> 0x69
  const uint8_t addrSel   = 0;                       // use 0x68
 8002de8:	2300      	movs	r3, #0
 8002dea:	73fb      	strb	r3, [r7, #15]
  const uint8_t gyroFS    = GYRO_FULL_SCALE_500DPS;  // good resolution / low noise
 8002dec:	2301      	movs	r3, #1
 8002dee:	73bb      	strb	r3, [r7, #14]
  const uint8_t accelFS   = ACCEL_FULL_SCALE_2G;     // (used by init only)
 8002df0:	2300      	movs	r3, #0
 8002df2:	737b      	strb	r3, [r7, #13]

  // ---- 2) Init IMU + AK09916 and calibrate gyro Z ----
  ICM20948_init(&hi2c2, addrSel, gyroFS, accelFS);
 8002df4:	7b7b      	ldrb	r3, [r7, #13]
 8002df6:	7bba      	ldrb	r2, [r7, #14]
 8002df8:	7bf9      	ldrb	r1, [r7, #15]
 8002dfa:	481d      	ldr	r0, [pc, #116]	@ (8002e70 <StartGyroTask+0x90>)
 8002dfc:	f7fe f99a 	bl	8001134 <ICM20948_init>
  HAL_Delay(300);
 8002e00:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8002e04:	f002 fdf8 	bl	80059f8 <HAL_Delay>
  IMU_CalibrateGyroZ(&hi2c2, addrSel, gyroFS);  // ~1s quick bias, robot still
 8002e08:	7bba      	ldrb	r2, [r7, #14]
 8002e0a:	7bfb      	ldrb	r3, [r7, #15]
 8002e0c:	4619      	mov	r1, r3
 8002e0e:	4818      	ldr	r0, [pc, #96]	@ (8002e70 <StartGyroTask+0x90>)
 8002e10:	f7fe fbf4 	bl	80015fc <IMU_CalibrateGyroZ>

  // ---- 3) Run at fixed cadence using FreeRTOS tick ----
  TickType_t lastWake = xTaskGetTickCount();
 8002e14:	f00a f9f4 	bl	800d200 <xTaskGetTickCount>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	60bb      	str	r3, [r7, #8]

  // Optional: zero outputs
  yaw = 0.0f; pitch = 0.0f; roll = 0.0f;
 8002e1c:	4b15      	ldr	r3, [pc, #84]	@ (8002e74 <StartGyroTask+0x94>)
 8002e1e:	f04f 0200 	mov.w	r2, #0
 8002e22:	601a      	str	r2, [r3, #0]
 8002e24:	4b14      	ldr	r3, [pc, #80]	@ (8002e78 <StartGyroTask+0x98>)
 8002e26:	f04f 0200 	mov.w	r2, #0
 8002e2a:	601a      	str	r2, [r3, #0]
 8002e2c:	4b13      	ldr	r3, [pc, #76]	@ (8002e7c <StartGyroTask+0x9c>)
 8002e2e:	f04f 0200 	mov.w	r2, #0
 8002e32:	601a      	str	r2, [r3, #0]

  for (;;)
  {
    // 3a) Update fused yaw (gyro-only with optional mag assist inside IMU_Update)
    IMU_Update(&hi2c2, addrSel, gyroFS);
 8002e34:	7bba      	ldrb	r2, [r7, #14]
 8002e36:	7bfb      	ldrb	r3, [r7, #15]
 8002e38:	4619      	mov	r1, r3
 8002e3a:	480d      	ldr	r0, [pc, #52]	@ (8002e70 <StartGyroTask+0x90>)
 8002e3c:	f7fe fab0 	bl	80013a0 <IMU_Update>

    // 3b) Publish yaw for the rest of the system
    yaw = IMU_GetYawLatest() ;
 8002e40:	f7fe fbc0 	bl	80015c4 <IMU_GetYawLatest>
 8002e44:	eef0 7a40 	vmov.f32	s15, s0
 8002e48:	4b0a      	ldr	r3, [pc, #40]	@ (8002e74 <StartGyroTask+0x94>)
 8002e4a:	edc3 7a00 	vstr	s15, [r3]
    // If your robot expects CW to be +yaw and you observe the opposite,
    // uncomment the next line once (don’t flip elsewhere):
    // yaw = -yaw;

    // We’re not estimating pitch/roll in this lightweight path:
    pitch = 0.0f;
 8002e4e:	4b0a      	ldr	r3, [pc, #40]	@ (8002e78 <StartGyroTask+0x98>)
 8002e50:	f04f 0200 	mov.w	r2, #0
 8002e54:	601a      	str	r2, [r3, #0]
    roll  = 0.0f;
 8002e56:	4b09      	ldr	r3, [pc, #36]	@ (8002e7c <StartGyroTask+0x9c>)
 8002e58:	f04f 0200 	mov.w	r2, #0
 8002e5c:	601a      	str	r2, [r3, #0]

    // 3c) Sleep exactly IMU_UPDATE_PERIOD_MS (from your header)
    vTaskDelayUntil(&lastWake, pdMS_TO_TICKS(IMU_UPDATE_PERIOD_MS));
 8002e5e:	f107 0308 	add.w	r3, r7, #8
 8002e62:	210a      	movs	r1, #10
 8002e64:	4618      	mov	r0, r3
 8002e66:	f009 fff9 	bl	800ce5c <vTaskDelayUntil>
    IMU_Update(&hi2c2, addrSel, gyroFS);
 8002e6a:	bf00      	nop
 8002e6c:	e7e2      	b.n	8002e34 <StartGyroTask+0x54>
 8002e6e:	bf00      	nop
 8002e70:	200002c4 	.word	0x200002c4
 8002e74:	200005f4 	.word	0x200005f4
 8002e78:	200005ec 	.word	0x200005ec
 8002e7c:	200005f0 	.word	0x200005f0

08002e80 <StartUltrasonicTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUltrasonicTask */
void StartUltrasonicTask(void *argument)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b082      	sub	sp, #8
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartUltrasonicTask */
  // Initialize the DWT for microsecond delays. Do this once.
  DWT_Delay_Init();
 8002e88:	f7fe ffc0 	bl	8001e0c <DWT_Delay_Init>

  /* Infinite loop */
  for(;;)
  {
    // --- 1. Prepare for a new measurement ---
    is_capture_done = 0; // Reset the completion flag
 8002e8c:	4b19      	ldr	r3, [pc, #100]	@ (8002ef4 <StartUltrasonicTask+0x74>)
 8002e8e:	2200      	movs	r2, #0
 8002e90:	701a      	strb	r2, [r3, #0]

    // --- 2. Send the 10us Trigger Pulse ---
    HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);
 8002e92:	2201      	movs	r2, #1
 8002e94:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002e98:	4817      	ldr	r0, [pc, #92]	@ (8002ef8 <StartUltrasonicTask+0x78>)
 8002e9a:	f004 f851 	bl	8006f40 <HAL_GPIO_WritePin>
    DWT_Delay_us(10);
 8002e9e:	200a      	movs	r0, #10
 8002ea0:	f7ff fe00 	bl	8002aa4 <DWT_Delay_us>
    HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002eaa:	4813      	ldr	r0, [pc, #76]	@ (8002ef8 <StartUltrasonicTask+0x78>)
 8002eac:	f004 f848 	bl	8006f40 <HAL_GPIO_WritePin>

    // --- 3. Start listening for the echo pulse ---
    // Enable the timer and its interrupt. The callback will handle the rest.
    HAL_TIM_IC_Start_IT(&htim12, TIM_CHANNEL_1);
 8002eb0:	2100      	movs	r1, #0
 8002eb2:	4812      	ldr	r0, [pc, #72]	@ (8002efc <StartUltrasonicTask+0x7c>)
 8002eb4:	f005 ff5c 	bl	8008d70 <HAL_TIM_IC_Start_IT>

    // --- 4. Wait for the measurement to complete (with a timeout) ---
    // Give the sensor up to 40ms to get a reading.
    osDelay(40);
 8002eb8:	2028      	movs	r0, #40	@ 0x28
 8002eba:	f008 fe25 	bl	800bb08 <osDelay>

    // --- 5. Calculate Distance if measurement was successful ---
    if (is_capture_done)
 8002ebe:	4b0d      	ldr	r3, [pc, #52]	@ (8002ef4 <StartUltrasonicTask+0x74>)
 8002ec0:	781b      	ldrb	r3, [r3, #0]
 8002ec2:	b2db      	uxtb	r3, r3
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d00d      	beq.n	8002ee4 <StartUltrasonicTask+0x64>
       * PLEASE VERIFY YOUR APB1 TIMER CLOCK FREQUENCY IN CUBEMX.
      */

      // Distance (cm) = (Time_of_flight_in_us / 58.3)
      // The constant 58.3 is derived from (2 / speed_of_sound_in_cm_per_us)
      Front_Distance_cm = (float)pulse_width / 58.3f;
 8002ec8:	4b0d      	ldr	r3, [pc, #52]	@ (8002f00 <StartUltrasonicTask+0x80>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	ee07 3a90 	vmov	s15, r3
 8002ed0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002ed4:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 8002f04 <StartUltrasonicTask+0x84>
 8002ed8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002edc:	4b0a      	ldr	r3, [pc, #40]	@ (8002f08 <StartUltrasonicTask+0x88>)
 8002ede:	edc3 7a00 	vstr	s15, [r3]
 8002ee2:	e002      	b.n	8002eea <StartUltrasonicTask+0x6a>
    else
    {
      // The capture did not complete within the 40ms timeout.
      // This means the object is out of range or there was no echo.
      // You can set a specific value to indicate this error state.
      Front_Distance_cm = -1.0f; // Or a large value like 999.0f
 8002ee4:	4b08      	ldr	r3, [pc, #32]	@ (8002f08 <StartUltrasonicTask+0x88>)
 8002ee6:	4a09      	ldr	r2, [pc, #36]	@ (8002f0c <StartUltrasonicTask+0x8c>)
 8002ee8:	601a      	str	r2, [r3, #0]
    }

    // --- 6. Delay before the next measurement cycle ---
    // Wait a bit to prevent echo interference from the previous ping.
    osDelay(60);
 8002eea:	203c      	movs	r0, #60	@ 0x3c
 8002eec:	f008 fe0c 	bl	800bb08 <osDelay>
    is_capture_done = 0; // Reset the completion flag
 8002ef0:	e7cc      	b.n	8002e8c <StartUltrasonicTask+0xc>
 8002ef2:	bf00      	nop
 8002ef4:	20000268 	.word	0x20000268
 8002ef8:	40020400 	.word	0x40020400
 8002efc:	20000480 	.word	0x20000480
 8002f00:	20000264 	.word	0x20000264
 8002f04:	42693333 	.word	0x42693333
 8002f08:	20000278 	.word	0x20000278
 8002f0c:	bf800000 	.word	0xbf800000

08002f10 <StartCommunicateTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartCommunicateTask */
void StartCommunicateTask(void *argument)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b082      	sub	sp, #8
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCommunicateTask */
  // NEW: Initialize the parser with the motor command queue
  Parser_Init(motor_cmd_queue);
 8002f18:	4b03      	ldr	r3, [pc, #12]	@ (8002f28 <StartCommunicateTask+0x18>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f7fe fd6d 	bl	80019fc <Parser_Init>
  /* Infinite loop */
  for(;;)
  {
    // The new Parser_Process function will now handle everything.
    // It internally waits on the uart_rx_msg_queue.
    Parser_Process();
 8002f22:	f7fe fd7b 	bl	8001a1c <Parser_Process>
 8002f26:	e7fc      	b.n	8002f22 <StartCommunicateTask+0x12>
 8002f28:	200005dc 	.word	0x200005dc

08002f2c <StartEncoderRTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartEncoderRTask */
void StartEncoderRTask(void *argument)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b084      	sub	sp, #16
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartEncoderRTask */
  uint16_t last_counter = 0;
 8002f34:	2300      	movs	r3, #0
 8002f36:	81fb      	strh	r3, [r7, #14]
  HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL); // TIM5 for Encoder D (Right)
 8002f38:	213c      	movs	r1, #60	@ 0x3c
 8002f3a:	480d      	ldr	r0, [pc, #52]	@ (8002f70 <StartEncoderRTask+0x44>)
 8002f3c:	f006 f994 	bl	8009268 <HAL_TIM_Encoder_Start>
  /* Infinite loop */
  for(;;)
  {
    uint16_t current_counter = __HAL_TIM_GET_COUNTER(&htim5);
 8002f40:	4b0b      	ldr	r3, [pc, #44]	@ (8002f70 <StartEncoderRTask+0x44>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f46:	81bb      	strh	r3, [r7, #12]
    // This handles timer overflow correctly
    int16_t diff = current_counter - last_counter;
 8002f48:	89ba      	ldrh	r2, [r7, #12]
 8002f4a:	89fb      	ldrh	r3, [r7, #14]
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	b29b      	uxth	r3, r3
 8002f50:	817b      	strh	r3, [r7, #10]
    encoder_count_D += diff;
 8002f52:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8002f56:	4b07      	ldr	r3, [pc, #28]	@ (8002f74 <StartEncoderRTask+0x48>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4413      	add	r3, r2
 8002f5c:	4a05      	ldr	r2, [pc, #20]	@ (8002f74 <StartEncoderRTask+0x48>)
 8002f5e:	6013      	str	r3, [r2, #0]
    last_counter = current_counter;
 8002f60:	89bb      	ldrh	r3, [r7, #12]
 8002f62:	81fb      	strh	r3, [r7, #14]
    osDelay(10); // Update 100 times per second
 8002f64:	200a      	movs	r0, #10
 8002f66:	f008 fdcf 	bl	800bb08 <osDelay>
  {
 8002f6a:	bf00      	nop
 8002f6c:	e7e8      	b.n	8002f40 <StartEncoderRTask+0x14>
 8002f6e:	bf00      	nop
 8002f70:	20000438 	.word	0x20000438
 8002f74:	200005e8 	.word	0x200005e8

08002f78 <StartEncoderLTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartEncoderLTask */
void StartEncoderLTask(void *argument)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b084      	sub	sp, #16
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartEncoderLTask */
  uint16_t last_counter = 0;
 8002f80:	2300      	movs	r3, #0
 8002f82:	81fb      	strh	r3, [r7, #14]
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL); // TIM2 for Encoder A (Left)
 8002f84:	213c      	movs	r1, #60	@ 0x3c
 8002f86:	480d      	ldr	r0, [pc, #52]	@ (8002fbc <StartEncoderLTask+0x44>)
 8002f88:	f006 f96e 	bl	8009268 <HAL_TIM_Encoder_Start>
  /* Infinite loop */
  for(;;)
  {
    uint16_t current_counter = __HAL_TIM_GET_COUNTER(&htim2);
 8002f8c:	4b0b      	ldr	r3, [pc, #44]	@ (8002fbc <StartEncoderLTask+0x44>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f92:	81bb      	strh	r3, [r7, #12]
    int16_t diff = current_counter - last_counter;
 8002f94:	89ba      	ldrh	r2, [r7, #12]
 8002f96:	89fb      	ldrh	r3, [r7, #14]
 8002f98:	1ad3      	subs	r3, r2, r3
 8002f9a:	b29b      	uxth	r3, r3
 8002f9c:	817b      	strh	r3, [r7, #10]
    encoder_count_A += diff;
 8002f9e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8002fa2:	4b07      	ldr	r3, [pc, #28]	@ (8002fc0 <StartEncoderLTask+0x48>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4413      	add	r3, r2
 8002fa8:	4a05      	ldr	r2, [pc, #20]	@ (8002fc0 <StartEncoderLTask+0x48>)
 8002faa:	6013      	str	r3, [r2, #0]
    last_counter = current_counter;
 8002fac:	89bb      	ldrh	r3, [r7, #12]
 8002fae:	81fb      	strh	r3, [r7, #14]
    osDelay(10); // Update 100 times per second
 8002fb0:	200a      	movs	r0, #10
 8002fb2:	f008 fda9 	bl	800bb08 <osDelay>
  {
 8002fb6:	bf00      	nop
 8002fb8:	e7e8      	b.n	8002f8c <StartEncoderLTask+0x14>
 8002fba:	bf00      	nop
 8002fbc:	20000360 	.word	0x20000360
 8002fc0:	200005e4 	.word	0x200005e4

08002fc4 <StartIR_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartIR_Task */
void StartIR_Task(void *argument)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b08c      	sub	sp, #48	@ 0x30
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartIR_Task */

  for(;;)
  {
    /* Read VDDA once per cycle (or every N cycles if you prefer) */
    float vdda_now = IR_ReadVDDA_Vrefint();
 8002fcc:	f7fe fb70 	bl	80016b0 <IR_ReadVDDA_Vrefint>
 8002fd0:	ed87 0a07 	vstr	s0, [r7, #28]

    // --- LEFT (PA5 / ADC1_IN5) ---
    uint32_t sum_left = 0;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (int i = 0; i < 16; i++) {
 8002fd8:	2300      	movs	r3, #0
 8002fda:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002fdc:	e00d      	b.n	8002ffa <StartIR_Task+0x36>
      sum_left += ADC1_Read_Channel(ADC_CHANNEL_5);
 8002fde:	2005      	movs	r0, #5
 8002fe0:	f7fe fbc4 	bl	800176c <ADC1_Read_Channel>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	461a      	mov	r2, r3
 8002fe8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fea:	4413      	add	r3, r2
 8002fec:	62fb      	str	r3, [r7, #44]	@ 0x2c
      osDelay(1);
 8002fee:	2001      	movs	r0, #1
 8002ff0:	f008 fd8a 	bl	800bb08 <osDelay>
    for (int i = 0; i < 16; i++) {
 8002ff4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ff6:	3301      	adds	r3, #1
 8002ff8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002ffa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ffc:	2b0f      	cmp	r3, #15
 8002ffe:	ddee      	ble.n	8002fde <StartIR_Task+0x1a>
    }
    uint16_t avg_left = sum_left / 16;
 8003000:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003002:	091b      	lsrs	r3, r3, #4
 8003004:	837b      	strh	r3, [r7, #26]
    float volts_left  = IR_RawToVolts(avg_left, vdda_now);
 8003006:	8b7b      	ldrh	r3, [r7, #26]
 8003008:	ed97 0a07 	vldr	s0, [r7, #28]
 800300c:	4618      	mov	r0, r3
 800300e:	f7fe fbdf 	bl	80017d0 <IR_RawToVolts>
 8003012:	ed87 0a05 	vstr	s0, [r7, #20]
    IR_Left_cm        = IR_VoltsToCm(volts_left);
 8003016:	ed97 0a05 	vldr	s0, [r7, #20]
 800301a:	f7fe fbf9 	bl	8001810 <IR_VoltsToCm>
 800301e:	eef0 7a40 	vmov.f32	s15, s0
 8003022:	4b18      	ldr	r3, [pc, #96]	@ (8003084 <StartIR_Task+0xc0>)
 8003024:	edc3 7a00 	vstr	s15, [r3]

    // --- RIGHT (PA4 / ADC1_IN4) ---
    uint32_t sum_right = 0;
 8003028:	2300      	movs	r3, #0
 800302a:	627b      	str	r3, [r7, #36]	@ 0x24
    for (int i = 0; i < 16; i++) {
 800302c:	2300      	movs	r3, #0
 800302e:	623b      	str	r3, [r7, #32]
 8003030:	e00d      	b.n	800304e <StartIR_Task+0x8a>
      sum_right += ADC1_Read_Channel(ADC_CHANNEL_4);
 8003032:	2004      	movs	r0, #4
 8003034:	f7fe fb9a 	bl	800176c <ADC1_Read_Channel>
 8003038:	4603      	mov	r3, r0
 800303a:	461a      	mov	r2, r3
 800303c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800303e:	4413      	add	r3, r2
 8003040:	627b      	str	r3, [r7, #36]	@ 0x24
      osDelay(1);
 8003042:	2001      	movs	r0, #1
 8003044:	f008 fd60 	bl	800bb08 <osDelay>
    for (int i = 0; i < 16; i++) {
 8003048:	6a3b      	ldr	r3, [r7, #32]
 800304a:	3301      	adds	r3, #1
 800304c:	623b      	str	r3, [r7, #32]
 800304e:	6a3b      	ldr	r3, [r7, #32]
 8003050:	2b0f      	cmp	r3, #15
 8003052:	ddee      	ble.n	8003032 <StartIR_Task+0x6e>
    }
    uint16_t avg_right = sum_right / 16;
 8003054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003056:	091b      	lsrs	r3, r3, #4
 8003058:	827b      	strh	r3, [r7, #18]
    float volts_right  = IR_RawToVolts(avg_right, vdda_now);
 800305a:	8a7b      	ldrh	r3, [r7, #18]
 800305c:	ed97 0a07 	vldr	s0, [r7, #28]
 8003060:	4618      	mov	r0, r3
 8003062:	f7fe fbb5 	bl	80017d0 <IR_RawToVolts>
 8003066:	ed87 0a03 	vstr	s0, [r7, #12]
    IR_Right_cm        = IR_VoltsToCm(volts_right);
 800306a:	ed97 0a03 	vldr	s0, [r7, #12]
 800306e:	f7fe fbcf 	bl	8001810 <IR_VoltsToCm>
 8003072:	eef0 7a40 	vmov.f32	s15, s0
 8003076:	4b04      	ldr	r3, [pc, #16]	@ (8003088 <StartIR_Task+0xc4>)
 8003078:	edc3 7a00 	vstr	s15, [r3]

    osDelay(20);
 800307c:	2014      	movs	r0, #20
 800307e:	f008 fd43 	bl	800bb08 <osDelay>
  {
 8003082:	e7a3      	b.n	8002fcc <StartIR_Task+0x8>
 8003084:	2000026c 	.word	0x2000026c
 8003088:	20000270 	.word	0x20000270

0800308c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b082      	sub	sp, #8
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a04      	ldr	r2, [pc, #16]	@ (80030ac <HAL_TIM_PeriodElapsedCallback+0x20>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d101      	bne.n	80030a2 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 800309e:	f002 fc8b 	bl	80059b8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80030a2:	bf00      	nop
 80030a4:	3708      	adds	r7, #8
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}
 80030aa:	bf00      	nop
 80030ac:	40001000 	.word	0x40001000

080030b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80030b0:	b480      	push	{r7}
 80030b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80030b4:	b672      	cpsid	i
}
 80030b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80030b8:	bf00      	nop
 80030ba:	e7fd      	b.n	80030b8 <Error_Handler+0x8>

080030bc <set_motor_speed_raw>:

// ================== Helpers =========================
static inline void set_motor_speed_raw(TIM_HandleTypeDef* htim,
                                       uint32_t channel1, uint32_t channel2,
                                       int32_t speed)
{
 80030bc:	b480      	push	{r7}
 80030be:	b085      	sub	sp, #20
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	60f8      	str	r0, [r7, #12]
 80030c4:	60b9      	str	r1, [r7, #8]
 80030c6:	607a      	str	r2, [r7, #4]
 80030c8:	603b      	str	r3, [r7, #0]
    if (speed > MOTOR_PWM_PERIOD)  speed = MOTOR_PWM_PERIOD;
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	f5b3 5fe1 	cmp.w	r3, #7200	@ 0x1c20
 80030d0:	db02      	blt.n	80030d8 <set_motor_speed_raw+0x1c>
 80030d2:	f641 431f 	movw	r3, #7199	@ 0x1c1f
 80030d6:	603b      	str	r3, [r7, #0]
    if (speed < -MOTOR_PWM_PERIOD) speed = -MOTOR_PWM_PERIOD;
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	f513 5fe1 	cmn.w	r3, #7200	@ 0x1c20
 80030de:	dc01      	bgt.n	80030e4 <set_motor_speed_raw+0x28>
 80030e0:	4b5f      	ldr	r3, [pc, #380]	@ (8003260 <set_motor_speed_raw+0x1a4>)
 80030e2:	603b      	str	r3, [r7, #0]

    if (speed > 0) {
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	dd38      	ble.n	800315c <set_motor_speed_raw+0xa0>
        __HAL_TIM_SET_COMPARE(htim, channel1, 0);
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d104      	bne.n	80030fa <set_motor_speed_raw+0x3e>
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	2200      	movs	r2, #0
 80030f6:	635a      	str	r2, [r3, #52]	@ 0x34
 80030f8:	e013      	b.n	8003122 <set_motor_speed_raw+0x66>
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	2b04      	cmp	r3, #4
 80030fe:	d104      	bne.n	800310a <set_motor_speed_raw+0x4e>
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681a      	ldr	r2, [r3, #0]
 8003104:	2300      	movs	r3, #0
 8003106:	6393      	str	r3, [r2, #56]	@ 0x38
 8003108:	e00b      	b.n	8003122 <set_motor_speed_raw+0x66>
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	2b08      	cmp	r3, #8
 800310e:	d104      	bne.n	800311a <set_motor_speed_raw+0x5e>
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	2300      	movs	r3, #0
 8003116:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8003118:	e003      	b.n	8003122 <set_motor_speed_raw+0x66>
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	2300      	movs	r3, #0
 8003120:	6413      	str	r3, [r2, #64]	@ 0x40
        __HAL_TIM_SET_COMPARE(htim, channel2, (uint32_t)speed);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d104      	bne.n	8003132 <set_motor_speed_raw+0x76>
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	683a      	ldr	r2, [r7, #0]
 800312e:	635a      	str	r2, [r3, #52]	@ 0x34
        __HAL_TIM_SET_COMPARE(htim, channel2, 0);
    } else {
        __HAL_TIM_SET_COMPARE(htim, channel1, 0);
        __HAL_TIM_SET_COMPARE(htim, channel2, 0);
    }
}
 8003130:	e090      	b.n	8003254 <set_motor_speed_raw+0x198>
        __HAL_TIM_SET_COMPARE(htim, channel2, (uint32_t)speed);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2b04      	cmp	r3, #4
 8003136:	d104      	bne.n	8003142 <set_motor_speed_raw+0x86>
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681a      	ldr	r2, [r3, #0]
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	6393      	str	r3, [r2, #56]	@ 0x38
 8003140:	e088      	b.n	8003254 <set_motor_speed_raw+0x198>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2b08      	cmp	r3, #8
 8003146:	d104      	bne.n	8003152 <set_motor_speed_raw+0x96>
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8003150:	e080      	b.n	8003254 <set_motor_speed_raw+0x198>
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800315a:	e07b      	b.n	8003254 <set_motor_speed_raw+0x198>
    } else if (speed < 0) {
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	2b00      	cmp	r3, #0
 8003160:	da3f      	bge.n	80031e2 <set_motor_speed_raw+0x126>
        __HAL_TIM_SET_COMPARE(htim, channel1, (uint32_t)(-speed));
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d105      	bne.n	8003174 <set_motor_speed_raw+0xb8>
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	425a      	negs	r2, r3
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	635a      	str	r2, [r3, #52]	@ 0x34
 8003172:	e019      	b.n	80031a8 <set_motor_speed_raw+0xec>
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	2b04      	cmp	r3, #4
 8003178:	d106      	bne.n	8003188 <set_motor_speed_raw+0xcc>
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	4259      	negs	r1, r3
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	460b      	mov	r3, r1
 8003184:	6393      	str	r3, [r2, #56]	@ 0x38
 8003186:	e00f      	b.n	80031a8 <set_motor_speed_raw+0xec>
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	2b08      	cmp	r3, #8
 800318c:	d106      	bne.n	800319c <set_motor_speed_raw+0xe0>
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	4259      	negs	r1, r3
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	460b      	mov	r3, r1
 8003198:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800319a:	e005      	b.n	80031a8 <set_motor_speed_raw+0xec>
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	4259      	negs	r1, r3
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	460b      	mov	r3, r1
 80031a6:	6413      	str	r3, [r2, #64]	@ 0x40
        __HAL_TIM_SET_COMPARE(htim, channel2, 0);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d104      	bne.n	80031b8 <set_motor_speed_raw+0xfc>
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	2200      	movs	r2, #0
 80031b4:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80031b6:	e04d      	b.n	8003254 <set_motor_speed_raw+0x198>
        __HAL_TIM_SET_COMPARE(htim, channel2, 0);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2b04      	cmp	r3, #4
 80031bc:	d104      	bne.n	80031c8 <set_motor_speed_raw+0x10c>
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	2300      	movs	r3, #0
 80031c4:	6393      	str	r3, [r2, #56]	@ 0x38
 80031c6:	e045      	b.n	8003254 <set_motor_speed_raw+0x198>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2b08      	cmp	r3, #8
 80031cc:	d104      	bne.n	80031d8 <set_motor_speed_raw+0x11c>
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	2300      	movs	r3, #0
 80031d4:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80031d6:	e03d      	b.n	8003254 <set_motor_speed_raw+0x198>
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	2300      	movs	r3, #0
 80031de:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80031e0:	e038      	b.n	8003254 <set_motor_speed_raw+0x198>
        __HAL_TIM_SET_COMPARE(htim, channel1, 0);
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d104      	bne.n	80031f2 <set_motor_speed_raw+0x136>
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	2200      	movs	r2, #0
 80031ee:	635a      	str	r2, [r3, #52]	@ 0x34
 80031f0:	e013      	b.n	800321a <set_motor_speed_raw+0x15e>
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	2b04      	cmp	r3, #4
 80031f6:	d104      	bne.n	8003202 <set_motor_speed_raw+0x146>
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681a      	ldr	r2, [r3, #0]
 80031fc:	2300      	movs	r3, #0
 80031fe:	6393      	str	r3, [r2, #56]	@ 0x38
 8003200:	e00b      	b.n	800321a <set_motor_speed_raw+0x15e>
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	2b08      	cmp	r3, #8
 8003206:	d104      	bne.n	8003212 <set_motor_speed_raw+0x156>
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	2300      	movs	r3, #0
 800320e:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8003210:	e003      	b.n	800321a <set_motor_speed_raw+0x15e>
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	2300      	movs	r3, #0
 8003218:	6413      	str	r3, [r2, #64]	@ 0x40
        __HAL_TIM_SET_COMPARE(htim, channel2, 0);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d104      	bne.n	800322a <set_motor_speed_raw+0x16e>
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	2200      	movs	r2, #0
 8003226:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8003228:	e014      	b.n	8003254 <set_motor_speed_raw+0x198>
        __HAL_TIM_SET_COMPARE(htim, channel2, 0);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2b04      	cmp	r3, #4
 800322e:	d104      	bne.n	800323a <set_motor_speed_raw+0x17e>
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	2300      	movs	r3, #0
 8003236:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8003238:	e00c      	b.n	8003254 <set_motor_speed_raw+0x198>
        __HAL_TIM_SET_COMPARE(htim, channel2, 0);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2b08      	cmp	r3, #8
 800323e:	d104      	bne.n	800324a <set_motor_speed_raw+0x18e>
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681a      	ldr	r2, [r3, #0]
 8003244:	2300      	movs	r3, #0
 8003246:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8003248:	e004      	b.n	8003254 <set_motor_speed_raw+0x198>
        __HAL_TIM_SET_COMPARE(htim, channel2, 0);
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	2300      	movs	r3, #0
 8003250:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8003252:	e7ff      	b.n	8003254 <set_motor_speed_raw+0x198>
 8003254:	bf00      	nop
 8003256:	3714      	adds	r7, #20
 8003258:	46bd      	mov	sp, r7
 800325a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325e:	4770      	bx	lr
 8003260:	ffffe3e1 	.word	0xffffe3e1

08003264 <set_left_speed>:

static inline void set_left_speed(int32_t speed_left)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b082      	sub	sp, #8
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
    set_motor_speed_raw(&htim4, TIM_CHANNEL_4, TIM_CHANNEL_3, MOTOR_A_POL * speed_left);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2208      	movs	r2, #8
 8003270:	210c      	movs	r1, #12
 8003272:	4803      	ldr	r0, [pc, #12]	@ (8003280 <set_left_speed+0x1c>)
 8003274:	f7ff ff22 	bl	80030bc <set_motor_speed_raw>
}
 8003278:	bf00      	nop
 800327a:	3708      	adds	r7, #8
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}
 8003280:	200003f0 	.word	0x200003f0

08003284 <set_right_speed>:
static inline void set_right_speed(int32_t speed_right)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b082      	sub	sp, #8
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
    set_motor_speed_raw(&htim1, TIM_CHANNEL_4, TIM_CHANNEL_3, MOTOR_D_POL * speed_right);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	425b      	negs	r3, r3
 8003290:	2208      	movs	r2, #8
 8003292:	210c      	movs	r1, #12
 8003294:	4803      	ldr	r0, [pc, #12]	@ (80032a4 <set_right_speed+0x20>)
 8003296:	f7ff ff11 	bl	80030bc <set_motor_speed_raw>
}
 800329a:	bf00      	nop
 800329c:	3708      	adds	r7, #8
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}
 80032a2:	bf00      	nop
 80032a4:	20000318 	.word	0x20000318

080032a8 <set_forward_speed>:

static inline void set_forward_speed(int32_t speed_forward)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b082      	sub	sp, #8
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
    set_left_speed(speed_forward);
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	f7ff ffd7 	bl	8003264 <set_left_speed>
    set_right_speed(speed_forward);
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f7ff ffe4 	bl	8003284 <set_right_speed>
}
 80032bc:	bf00      	nop
 80032be:	3708      	adds	r7, #8
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}

080032c4 <wrap180>:

static inline float wrap180(float a)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b083      	sub	sp, #12
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	ed87 0a01 	vstr	s0, [r7, #4]
    while (a <= -180.0f) a += 360.0f;
 80032ce:	e007      	b.n	80032e0 <wrap180+0x1c>
 80032d0:	edd7 7a01 	vldr	s15, [r7, #4]
 80032d4:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 800332c <wrap180+0x68>
 80032d8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80032dc:	edc7 7a01 	vstr	s15, [r7, #4]
 80032e0:	edd7 7a01 	vldr	s15, [r7, #4]
 80032e4:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8003330 <wrap180+0x6c>
 80032e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032f0:	d9ee      	bls.n	80032d0 <wrap180+0xc>
    while (a >   180.0f) a -= 360.0f;
 80032f2:	e007      	b.n	8003304 <wrap180+0x40>
 80032f4:	edd7 7a01 	vldr	s15, [r7, #4]
 80032f8:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 800332c <wrap180+0x68>
 80032fc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003300:	edc7 7a01 	vstr	s15, [r7, #4]
 8003304:	edd7 7a01 	vldr	s15, [r7, #4]
 8003308:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8003334 <wrap180+0x70>
 800330c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003310:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003314:	dcee      	bgt.n	80032f4 <wrap180+0x30>
    return a;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	ee07 3a90 	vmov	s15, r3
}
 800331c:	eeb0 0a67 	vmov.f32	s0, s15
 8003320:	370c      	adds	r7, #12
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr
 800332a:	bf00      	nop
 800332c:	43b40000 	.word	0x43b40000
 8003330:	c3340000 	.word	0xc3340000
 8003334:	43340000 	.word	0x43340000

08003338 <Motion_Init>:

// ================== Public API ======================
void Motion_Init(void)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b082      	sub	sp, #8
 800333c:	af00      	add	r7, sp, #0
    const int32_t MAX_DRIVE_SPEED = 3300;
 800333e:	f640 43e4 	movw	r3, #3300	@ 0xce4
 8003342:	607b      	str	r3, [r7, #4]

    PID_Init(&motor_pid_A, 10.0f, 0.0f, 0.0f, -MAX_DRIVE_SPEED, MAX_DRIVE_SPEED);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	425b      	negs	r3, r3
 8003348:	ee07 3a90 	vmov	s15, r3
 800334c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	ee07 3a10 	vmov	s14, r3
 8003356:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800335a:	eeb0 2a47 	vmov.f32	s4, s14
 800335e:	eef0 1a67 	vmov.f32	s3, s15
 8003362:	ed9f 1a24 	vldr	s2, [pc, #144]	@ 80033f4 <Motion_Init+0xbc>
 8003366:	eddf 0a23 	vldr	s1, [pc, #140]	@ 80033f4 <Motion_Init+0xbc>
 800336a:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 800336e:	4822      	ldr	r0, [pc, #136]	@ (80033f8 <Motion_Init+0xc0>)
 8003370:	f001 fd44 	bl	8004dfc <PID_Init>
     PID_Init(&motor_pid_D, 10.0f, 0.0f, 0.0f, -MAX_DRIVE_SPEED, MAX_DRIVE_SPEED);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	425b      	negs	r3, r3
 8003378:	ee07 3a90 	vmov	s15, r3
 800337c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	ee07 3a10 	vmov	s14, r3
 8003386:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800338a:	eeb0 2a47 	vmov.f32	s4, s14
 800338e:	eef0 1a67 	vmov.f32	s3, s15
 8003392:	ed9f 1a18 	vldr	s2, [pc, #96]	@ 80033f4 <Motion_Init+0xbc>
 8003396:	eddf 0a17 	vldr	s1, [pc, #92]	@ 80033f4 <Motion_Init+0xbc>
 800339a:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 800339e:	4817      	ldr	r0, [pc, #92]	@ (80033fc <Motion_Init+0xc4>)
 80033a0:	f001 fd2c 	bl	8004dfc <PID_Init>
     PID_Init(&heading_pid, 13.0f, 0.0f, 3.0f, -1000, 1000);
 80033a4:	ed9f 2a16 	vldr	s4, [pc, #88]	@ 8003400 <Motion_Init+0xc8>
 80033a8:	eddf 1a16 	vldr	s3, [pc, #88]	@ 8003404 <Motion_Init+0xcc>
 80033ac:	eeb0 1a08 	vmov.f32	s2, #8	@ 0x40400000  3.0
 80033b0:	eddf 0a10 	vldr	s1, [pc, #64]	@ 80033f4 <Motion_Init+0xbc>
 80033b4:	eeb2 0a0a 	vmov.f32	s0, #42	@ 0x41500000  13.0
 80033b8:	4813      	ldr	r0, [pc, #76]	@ (8003408 <Motion_Init+0xd0>)
 80033ba:	f001 fd1f 	bl	8004dfc <PID_Init>

    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80033be:	2108      	movs	r1, #8
 80033c0:	4812      	ldr	r0, [pc, #72]	@ (800340c <Motion_Init+0xd4>)
 80033c2:	f005 fbbd 	bl	8008b40 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 80033c6:	210c      	movs	r1, #12
 80033c8:	4810      	ldr	r0, [pc, #64]	@ (800340c <Motion_Init+0xd4>)
 80033ca:	f005 fbb9 	bl	8008b40 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80033ce:	2108      	movs	r1, #8
 80033d0:	480f      	ldr	r0, [pc, #60]	@ (8003410 <Motion_Init+0xd8>)
 80033d2:	f005 fbb5 	bl	8008b40 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80033d6:	210c      	movs	r1, #12
 80033d8:	480d      	ldr	r0, [pc, #52]	@ (8003410 <Motion_Init+0xd8>)
 80033da:	f005 fbb1 	bl	8008b40 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 80033de:	210c      	movs	r1, #12
 80033e0:	480c      	ldr	r0, [pc, #48]	@ (8003414 <Motion_Init+0xdc>)
 80033e2:	f005 fbad 	bl	8008b40 <HAL_TIM_PWM_Start>

    Motion_Set_Steering(0);
 80033e6:	2000      	movs	r0, #0
 80033e8:	f000 f816 	bl	8003418 <Motion_Set_Steering>
}
 80033ec:	bf00      	nop
 80033ee:	3708      	adds	r7, #8
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}
 80033f4:	00000000 	.word	0x00000000
 80033f8:	20000610 	.word	0x20000610
 80033fc:	20000630 	.word	0x20000630
 8003400:	447a0000 	.word	0x447a0000
 8003404:	c47a0000 	.word	0xc47a0000
 8003408:	20000650 	.word	0x20000650
 800340c:	200003f0 	.word	0x200003f0
 8003410:	20000318 	.word	0x20000318
 8003414:	200003a8 	.word	0x200003a8

08003418 <Motion_Set_Steering>:

void Motion_Set_Steering(int angle_deg)
{
 8003418:	b480      	push	{r7}
 800341a:	b087      	sub	sp, #28
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
    if (angle_deg > 90)  angle_deg = 90;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2b5a      	cmp	r3, #90	@ 0x5a
 8003424:	dd01      	ble.n	800342a <Motion_Set_Steering+0x12>
 8003426:	235a      	movs	r3, #90	@ 0x5a
 8003428:	607b      	str	r3, [r7, #4]
    if (angle_deg < -90) angle_deg = -90;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	f113 0f5a 	cmn.w	r3, #90	@ 0x5a
 8003430:	da02      	bge.n	8003438 <Motion_Set_Steering+0x20>
 8003432:	f06f 0359 	mvn.w	r3, #89	@ 0x59
 8003436:	607b      	str	r3, [r7, #4]

    const float us_per_deg = (float)(SERVO_MAX_PULSE_US - SERVO_MIN_PULSE_US) / 180.0f;
 8003438:	4b1b      	ldr	r3, [pc, #108]	@ (80034a8 <Motion_Set_Steering+0x90>)
 800343a:	613b      	str	r3, [r7, #16]
    int32_t pulse_us = (int32_t)((float)SERVO_CENTER_PULSE_US + angle_deg * us_per_deg);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	ee07 3a90 	vmov	s15, r3
 8003442:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003446:	edd7 7a04 	vldr	s15, [r7, #16]
 800344a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800344e:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 80034ac <Motion_Set_Steering+0x94>
 8003452:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003456:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800345a:	ee17 3a90 	vmov	r3, s15
 800345e:	617b      	str	r3, [r7, #20]

    if (pulse_us < SERVO_MIN_PULSE_US) pulse_us = SERVO_MIN_PULSE_US;
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8003466:	da02      	bge.n	800346e <Motion_Set_Steering+0x56>
 8003468:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800346c:	617b      	str	r3, [r7, #20]
    if (pulse_us > SERVO_MAX_PULSE_US) pulse_us = SERVO_MAX_PULSE_US;
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8003474:	4293      	cmp	r3, r2
 8003476:	dd02      	ble.n	800347e <Motion_Set_Steering+0x66>
 8003478:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 800347c:	617b      	str	r3, [r7, #20]

    last_servo_pulse = pulse_us;
 800347e:	4a0c      	ldr	r2, [pc, #48]	@ (80034b0 <Motion_Set_Steering+0x98>)
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	6013      	str	r3, [r2, #0]

    uint32_t pulse_ticks = (uint32_t)(pulse_us / SERVO_TICK_US);
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	4a0b      	ldr	r2, [pc, #44]	@ (80034b4 <Motion_Set_Steering+0x9c>)
 8003488:	fb82 1203 	smull	r1, r2, r2, r3
 800348c:	1092      	asrs	r2, r2, #2
 800348e:	17db      	asrs	r3, r3, #31
 8003490:	1ad3      	subs	r3, r2, r3
 8003492:	60fb      	str	r3, [r7, #12]
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, pulse_ticks);
 8003494:	4b08      	ldr	r3, [pc, #32]	@ (80034b8 <Motion_Set_Steering+0xa0>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	68fa      	ldr	r2, [r7, #12]
 800349a:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800349c:	bf00      	nop
 800349e:	371c      	adds	r7, #28
 80034a0:	46bd      	mov	sp, r7
 80034a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a6:	4770      	bx	lr
 80034a8:	4131c71c 	.word	0x4131c71c
 80034ac:	44bb8000 	.word	0x44bb8000
 80034b0:	20000604 	.word	0x20000604
 80034b4:	66666667 	.word	0x66666667
 80034b8:	200003a8 	.word	0x200003a8

080034bc <Motion_Move_Distance>:

void Motion_Move_Distance(float distance_cm)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b084      	sub	sp, #16
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	ed87 0a01 	vstr	s0, [r7, #4]
	Motion_Set_Steering(0);
 80034c6:	2000      	movs	r0, #0
 80034c8:	f7ff ffa6 	bl	8003418 <Motion_Set_Steering>
    encoder_count_A = 0;
 80034cc:	4b1f      	ldr	r3, [pc, #124]	@ (800354c <Motion_Move_Distance+0x90>)
 80034ce:	2200      	movs	r2, #0
 80034d0:	601a      	str	r2, [r3, #0]
    encoder_count_D = 0;
 80034d2:	4b1f      	ldr	r3, [pc, #124]	@ (8003550 <Motion_Move_Distance+0x94>)
 80034d4:	2200      	movs	r2, #0
 80034d6:	601a      	str	r2, [r3, #0]

    PID_Reset(&motor_pid_A);
 80034d8:	481e      	ldr	r0, [pc, #120]	@ (8003554 <Motion_Move_Distance+0x98>)
 80034da:	f001 fd41 	bl	8004f60 <PID_Reset>
    PID_Reset(&motor_pid_D);
 80034de:	481e      	ldr	r0, [pc, #120]	@ (8003558 <Motion_Move_Distance+0x9c>)
 80034e0:	f001 fd3e 	bl	8004f60 <PID_Reset>
    PID_Reset(&heading_pid);
 80034e4:	481d      	ldr	r0, [pc, #116]	@ (800355c <Motion_Move_Distance+0xa0>)
 80034e6:	f001 fd3b 	bl	8004f60 <PID_Reset>

    drive_target_heading = yaw;
 80034ea:	4b1d      	ldr	r3, [pc, #116]	@ (8003560 <Motion_Move_Distance+0xa4>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a1d      	ldr	r2, [pc, #116]	@ (8003564 <Motion_Move_Distance+0xa8>)
 80034f0:	6013      	str	r3, [r2, #0]
    heading_pid.setpoint = drive_target_heading;
 80034f2:	4b1c      	ldr	r3, [pc, #112]	@ (8003564 <Motion_Move_Distance+0xa8>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a19      	ldr	r2, [pc, #100]	@ (800355c <Motion_Move_Distance+0xa0>)
 80034f8:	60d3      	str	r3, [r2, #12]

    int32_t target_counts = (int32_t)(distance_cm * (float)(COUNTS_PER_CM));
 80034fa:	edd7 7a01 	vldr	s15, [r7, #4]
 80034fe:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8003568 <Motion_Move_Distance+0xac>
 8003502:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003506:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800350a:	ee17 3a90 	vmov	r3, s15
 800350e:	60fb      	str	r3, [r7, #12]
    motor_pid_A.setpoint = target_counts;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	ee07 3a90 	vmov	s15, r3
 8003516:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800351a:	4b0e      	ldr	r3, [pc, #56]	@ (8003554 <Motion_Move_Distance+0x98>)
 800351c:	edc3 7a03 	vstr	s15, [r3, #12]
    motor_pid_D.setpoint = target_counts;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	ee07 3a90 	vmov	s15, r3
 8003526:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800352a:	4b0b      	ldr	r3, [pc, #44]	@ (8003558 <Motion_Move_Distance+0x9c>)
 800352c:	edc3 7a03 	vstr	s15, [r3, #12]

    is_turning  = false;
 8003530:	4b0e      	ldr	r3, [pc, #56]	@ (800356c <Motion_Move_Distance+0xb0>)
 8003532:	2200      	movs	r2, #0
 8003534:	701a      	strb	r2, [r3, #0]
    is_arc_turn = false;
 8003536:	4b0e      	ldr	r3, [pc, #56]	@ (8003570 <Motion_Move_Distance+0xb4>)
 8003538:	2200      	movs	r2, #0
 800353a:	701a      	strb	r2, [r3, #0]
    turn_deadband_enter_tick = 0;
 800353c:	4b0d      	ldr	r3, [pc, #52]	@ (8003574 <Motion_Move_Distance+0xb8>)
 800353e:	2200      	movs	r2, #0
 8003540:	601a      	str	r2, [r3, #0]
}
 8003542:	bf00      	nop
 8003544:	3710      	adds	r7, #16
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}
 800354a:	bf00      	nop
 800354c:	200005e4 	.word	0x200005e4
 8003550:	200005e8 	.word	0x200005e8
 8003554:	20000610 	.word	0x20000610
 8003558:	20000630 	.word	0x20000630
 800355c:	20000650 	.word	0x20000650
 8003560:	200005f4 	.word	0x200005f4
 8003564:	20000608 	.word	0x20000608
 8003568:	42926666 	.word	0x42926666
 800356c:	20000670 	.word	0x20000670
 8003570:	20000680 	.word	0x20000680
 8003574:	2000067c 	.word	0x2000067c

08003578 <Motion_Process>:

void Motion_Process(void)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b0a2      	sub	sp, #136	@ 0x88
 800357c:	af00      	add	r7, sp, #0
	static uint32_t last_tick = 0;

	if (last_tick == 0) {
 800357e:	4bbf      	ldr	r3, [pc, #764]	@ (800387c <Motion_Process+0x304>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d104      	bne.n	8003590 <Motion_Process+0x18>

	last_tick = HAL_GetTick();
 8003586:	f002 fa2b 	bl	80059e0 <HAL_GetTick>
 800358a:	4603      	mov	r3, r0
 800358c:	4abb      	ldr	r2, [pc, #748]	@ (800387c <Motion_Process+0x304>)
 800358e:	6013      	str	r3, [r2, #0]

	}

	uint32_t current_tick = HAL_GetTick();
 8003590:	f002 fa26 	bl	80059e0 <HAL_GetTick>
 8003594:	6778      	str	r0, [r7, #116]	@ 0x74

	float dt = (current_tick - last_tick) / 1000.0f; // dt in seconds
 8003596:	4bb9      	ldr	r3, [pc, #740]	@ (800387c <Motion_Process+0x304>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800359c:	1ad3      	subs	r3, r2, r3
 800359e:	ee07 3a90 	vmov	s15, r3
 80035a2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80035a6:	eddf 6ab6 	vldr	s13, [pc, #728]	@ 8003880 <Motion_Process+0x308>
 80035aa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80035ae:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70

	last_tick = current_tick;
 80035b2:	4ab2      	ldr	r2, [pc, #712]	@ (800387c <Motion_Process+0x304>)
 80035b4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80035b6:	6013      	str	r3, [r2, #0]
	// ---- Straight driving branch ----
	if (motor_pid_A.setpoint != 0) {
 80035b8:	4bb2      	ldr	r3, [pc, #712]	@ (8003884 <Motion_Process+0x30c>)
 80035ba:	edd3 7a03 	vldr	s15, [r3, #12]
 80035be:	eef5 7a40 	vcmp.f32	s15, #0.0
 80035c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035c6:	f000 813f 	beq.w	8003848 <Motion_Process+0x2d0>

	    float a_counts = (float)(ENCODER_A_POL * encoder_count_A);
 80035ca:	4baf      	ldr	r3, [pc, #700]	@ (8003888 <Motion_Process+0x310>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	ee07 3a90 	vmov	s15, r3
 80035d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80035d6:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
	    float d_counts = (float)(ENCODER_D_POL * encoder_count_D);
 80035da:	4bac      	ldr	r3, [pc, #688]	@ (800388c <Motion_Process+0x314>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	425b      	negs	r3, r3
 80035e0:	ee07 3a90 	vmov	s15, r3
 80035e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80035e8:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

	    int32_t base_A = (int32_t)PID_Compute(&motor_pid_A, motor_pid_A.setpoint, a_counts, dt);
 80035ec:	4ba5      	ldr	r3, [pc, #660]	@ (8003884 <Motion_Process+0x30c>)
 80035ee:	edd3 7a03 	vldr	s15, [r3, #12]
 80035f2:	ed97 1a1c 	vldr	s2, [r7, #112]	@ 0x70
 80035f6:	edd7 0a0c 	vldr	s1, [r7, #48]	@ 0x30
 80035fa:	eeb0 0a67 	vmov.f32	s0, s15
 80035fe:	48a1      	ldr	r0, [pc, #644]	@ (8003884 <Motion_Process+0x30c>)
 8003600:	f001 fc20 	bl	8004e44 <PID_Compute>
 8003604:	eef0 7a40 	vmov.f32	s15, s0
 8003608:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800360c:	ee17 3a90 	vmov	r3, s15
 8003610:	62bb      	str	r3, [r7, #40]	@ 0x28
	    int32_t base_D = (int32_t)PID_Compute(&motor_pid_D, motor_pid_D.setpoint, d_counts, dt);
 8003612:	4b9f      	ldr	r3, [pc, #636]	@ (8003890 <Motion_Process+0x318>)
 8003614:	edd3 7a03 	vldr	s15, [r3, #12]
 8003618:	ed97 1a1c 	vldr	s2, [r7, #112]	@ 0x70
 800361c:	edd7 0a0b 	vldr	s1, [r7, #44]	@ 0x2c
 8003620:	eeb0 0a67 	vmov.f32	s0, s15
 8003624:	489a      	ldr	r0, [pc, #616]	@ (8003890 <Motion_Process+0x318>)
 8003626:	f001 fc0d 	bl	8004e44 <PID_Compute>
 800362a:	eef0 7a40 	vmov.f32	s15, s0
 800362e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003632:	ee17 3a90 	vmov	r3, s15
 8003636:	627b      	str	r3, [r7, #36]	@ 0x24

	    // Wheel mixing correction from your existing heading PID
	    int32_t heading_correction = (int32_t)PID_Compute(&heading_pid, heading_pid.setpoint, yaw, dt);
 8003638:	4b96      	ldr	r3, [pc, #600]	@ (8003894 <Motion_Process+0x31c>)
 800363a:	edd3 7a03 	vldr	s15, [r3, #12]
 800363e:	4b96      	ldr	r3, [pc, #600]	@ (8003898 <Motion_Process+0x320>)
 8003640:	ed93 7a00 	vldr	s14, [r3]
 8003644:	ed97 1a1c 	vldr	s2, [r7, #112]	@ 0x70
 8003648:	eef0 0a47 	vmov.f32	s1, s14
 800364c:	eeb0 0a67 	vmov.f32	s0, s15
 8003650:	4890      	ldr	r0, [pc, #576]	@ (8003894 <Motion_Process+0x31c>)
 8003652:	f001 fbf7 	bl	8004e44 <PID_Compute>
 8003656:	eef0 7a40 	vmov.f32	s15, s0
 800365a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800365e:	ee17 3a90 	vmov	r3, s15
 8003662:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

	    // Detect reverse by average base command
	    int32_t avg_base = (base_A + base_D);
 8003666:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800366a:	4413      	add	r3, r2
 800366c:	623b      	str	r3, [r7, #32]
	    if (avg_base < 0) {
 800366e:	6a3b      	ldr	r3, [r7, #32]
 8003670:	2b00      	cmp	r3, #0
 8003672:	da04      	bge.n	800367e <Motion_Process+0x106>
	        heading_correction = -heading_correction; // invert when reversing
 8003674:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003678:	425b      	negs	r3, r3
 800367a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
	    }

	    // ===== Snappy servo trim: PD on heading error with gyro rate =====
	    float target_yaw = heading_pid.setpoint;                 // set in Motion_Move_Distance()
 800367e:	4b85      	ldr	r3, [pc, #532]	@ (8003894 <Motion_Process+0x31c>)
 8003680:	68db      	ldr	r3, [r3, #12]
 8003682:	61fb      	str	r3, [r7, #28]
	    float err_deg    = wrap180(target_yaw - yaw);
 8003684:	4b84      	ldr	r3, [pc, #528]	@ (8003898 <Motion_Process+0x320>)
 8003686:	edd3 7a00 	vldr	s15, [r3]
 800368a:	ed97 7a07 	vldr	s14, [r7, #28]
 800368e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003692:	eeb0 0a67 	vmov.f32	s0, s15
 8003696:	f7ff fe15 	bl	80032c4 <wrap180>
 800369a:	ed87 0a06 	vstr	s0, [r7, #24]
	    float abs_err    = fabsf(err_deg);
 800369e:	edd7 7a06 	vldr	s15, [r7, #24]
 80036a2:	eef0 7ae7 	vabs.f32	s15, s15
 80036a6:	edc7 7a05 	vstr	s15, [r7, #20]

	    // Deadband with hysteresis
	    if (steer_db_active) {
 80036aa:	4b7c      	ldr	r3, [pc, #496]	@ (800389c <Motion_Process+0x324>)
 80036ac:	781b      	ldrb	r3, [r3, #0]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d00c      	beq.n	80036cc <Motion_Process+0x154>
	        if (abs_err > STEER_DB_ENTER_DEG) steer_db_active = false;
 80036b2:	edd7 7a05 	vldr	s15, [r7, #20]
 80036b6:	ed9f 7a7a 	vldr	s14, [pc, #488]	@ 80038a0 <Motion_Process+0x328>
 80036ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80036be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036c2:	dd0f      	ble.n	80036e4 <Motion_Process+0x16c>
 80036c4:	4b75      	ldr	r3, [pc, #468]	@ (800389c <Motion_Process+0x324>)
 80036c6:	2200      	movs	r2, #0
 80036c8:	701a      	strb	r2, [r3, #0]
 80036ca:	e00b      	b.n	80036e4 <Motion_Process+0x16c>
	    } else {
	        if (abs_err < STEER_DB_EXIT_DEG)  steer_db_active = true;
 80036cc:	edd7 7a05 	vldr	s15, [r7, #20]
 80036d0:	ed9f 7a74 	vldr	s14, [pc, #464]	@ 80038a4 <Motion_Process+0x32c>
 80036d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80036d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036dc:	d502      	bpl.n	80036e4 <Motion_Process+0x16c>
 80036de:	4b6f      	ldr	r3, [pc, #444]	@ (800389c <Motion_Process+0x324>)
 80036e0:	2201      	movs	r2, #1
 80036e2:	701a      	strb	r2, [r3, #0]
	    }

	    int trim_deg = 0;
 80036e4:	2300      	movs	r3, #0
 80036e6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
	    if (!steer_db_active) {
 80036ea:	4b6c      	ldr	r3, [pc, #432]	@ (800389c <Motion_Process+0x324>)
 80036ec:	781b      	ldrb	r3, [r3, #0]
 80036ee:	f083 0301 	eor.w	r3, r3, #1
 80036f2:	b2db      	uxtb	r3, r3
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d066      	beq.n	80037c6 <Motion_Process+0x24e>
	        // Read gyro rate (deg/s) and lightly low-pass it
	        float z_dps_raw = IMU_GetGyroZLatest();                 // +ve = yaw increasing
 80036f8:	f7fd ff72 	bl	80015e0 <IMU_GetGyroZLatest>
 80036fc:	ed87 0a04 	vstr	s0, [r7, #16]
	        z_dps_filt += GYRO_LPF_ALPHA * (z_dps_raw - z_dps_filt);
 8003700:	4b69      	ldr	r3, [pc, #420]	@ (80038a8 <Motion_Process+0x330>)
 8003702:	edd3 7a00 	vldr	s15, [r3]
 8003706:	ed97 7a04 	vldr	s14, [r7, #16]
 800370a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800370e:	ed9f 7a67 	vldr	s14, [pc, #412]	@ 80038ac <Motion_Process+0x334>
 8003712:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003716:	4b64      	ldr	r3, [pc, #400]	@ (80038a8 <Motion_Process+0x330>)
 8003718:	edd3 7a00 	vldr	s15, [r3]
 800371c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003720:	4b61      	ldr	r3, [pc, #388]	@ (80038a8 <Motion_Process+0x330>)
 8003722:	edc3 7a00 	vstr	s15, [r3]

	        // PD + “kick” (kick helps break static friction when trim is tiny)
	        float trim = (STEER_KP_DEG * err_deg) + (STEER_KD_DPS2DEG * (-z_dps_filt));
 8003726:	edd7 7a06 	vldr	s15, [r7, #24]
 800372a:	ed9f 7a61 	vldr	s14, [pc, #388]	@ 80038b0 <Motion_Process+0x338>
 800372e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003732:	4b5d      	ldr	r3, [pc, #372]	@ (80038a8 <Motion_Process+0x330>)
 8003734:	edd3 7a00 	vldr	s15, [r3]
 8003738:	eef1 7a67 	vneg.f32	s15, s15
 800373c:	eddf 6a5d 	vldr	s13, [pc, #372]	@ 80038b4 <Motion_Process+0x33c>
 8003740:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003744:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003748:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c
	        if (fabsf(trim) < STEER_MIN_KICK_DEG) {
 800374c:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 8003750:	eef0 7ae7 	vabs.f32	s15, s15
 8003754:	eeb1 7a08 	vmov.f32	s14, #24	@ 0x40c00000  6.0
 8003758:	eef4 7ac7 	vcmpe.f32	s15, s14
 800375c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003760:	d50a      	bpl.n	8003778 <Motion_Process+0x200>
	            trim = (err_deg >= 0.0f) ? +STEER_MIN_KICK_DEG : -STEER_MIN_KICK_DEG;
 8003762:	edd7 7a06 	vldr	s15, [r7, #24]
 8003766:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800376a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800376e:	db01      	blt.n	8003774 <Motion_Process+0x1fc>
 8003770:	4b51      	ldr	r3, [pc, #324]	@ (80038b8 <Motion_Process+0x340>)
 8003772:	e000      	b.n	8003776 <Motion_Process+0x1fe>
 8003774:	4b51      	ldr	r3, [pc, #324]	@ (80038bc <Motion_Process+0x344>)
 8003776:	67fb      	str	r3, [r7, #124]	@ 0x7c
	        }

	        // Invert servo effect when reversing
	        if (avg_base < 0) trim = -trim;
 8003778:	6a3b      	ldr	r3, [r7, #32]
 800377a:	2b00      	cmp	r3, #0
 800377c:	da05      	bge.n	800378a <Motion_Process+0x212>
 800377e:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 8003782:	eef1 7a67 	vneg.f32	s15, s15
 8003786:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c

	        // Clamp
	        if (trim >  STEER_MAX_TRIM_DEG) trim =  STEER_MAX_TRIM_DEG;
 800378a:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 800378e:	ed9f 7a4c 	vldr	s14, [pc, #304]	@ 80038c0 <Motion_Process+0x348>
 8003792:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800379a:	dd01      	ble.n	80037a0 <Motion_Process+0x228>
 800379c:	4b49      	ldr	r3, [pc, #292]	@ (80038c4 <Motion_Process+0x34c>)
 800379e:	67fb      	str	r3, [r7, #124]	@ 0x7c
	        if (trim < -STEER_MAX_TRIM_DEG) trim = -STEER_MAX_TRIM_DEG;
 80037a0:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 80037a4:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 80038c8 <Motion_Process+0x350>
 80037a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037b0:	d501      	bpl.n	80037b6 <Motion_Process+0x23e>
 80037b2:	4b46      	ldr	r3, [pc, #280]	@ (80038cc <Motion_Process+0x354>)
 80037b4:	67fb      	str	r3, [r7, #124]	@ 0x7c

	        trim_deg = (int)trim;
 80037b6:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 80037ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80037be:	ee17 3a90 	vmov	r3, s15
 80037c2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
	    }

	    // Apply servo trim (center if inside deadband)
	    Motion_Set_Steering(trim_deg);
 80037c6:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 80037ca:	f7ff fe25 	bl	8003418 <Motion_Set_Steering>

	    // Wheel speed mixing
	    int32_t speed_A = base_A + heading_correction;
 80037ce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80037d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80037d4:	4413      	add	r3, r2
 80037d6:	60fb      	str	r3, [r7, #12]
	    int32_t speed_D = base_D - heading_correction;
 80037d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037da:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80037de:	1ad3      	subs	r3, r2, r3
 80037e0:	60bb      	str	r3, [r7, #8]

	    set_left_speed(speed_A);
 80037e2:	68f8      	ldr	r0, [r7, #12]
 80037e4:	f7ff fd3e 	bl	8003264 <set_left_speed>
	    set_right_speed(speed_D);
 80037e8:	68b8      	ldr	r0, [r7, #8]
 80037ea:	f7ff fd4b 	bl	8003284 <set_right_speed>

	    // Completion check
	    float err_A = (float)motor_pid_A.setpoint - a_counts;
 80037ee:	4b25      	ldr	r3, [pc, #148]	@ (8003884 <Motion_Process+0x30c>)
 80037f0:	ed93 7a03 	vldr	s14, [r3, #12]
 80037f4:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80037f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80037fc:	edc7 7a01 	vstr	s15, [r7, #4]
	    float err_D = (float)motor_pid_D.setpoint - d_counts;
 8003800:	4b23      	ldr	r3, [pc, #140]	@ (8003890 <Motion_Process+0x318>)
 8003802:	ed93 7a03 	vldr	s14, [r3, #12]
 8003806:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800380a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800380e:	edc7 7a00 	vstr	s15, [r7]
	    if (fabsf(err_A) < 100.0f && fabsf(err_D) < 100.0f) {
 8003812:	edd7 7a01 	vldr	s15, [r7, #4]
 8003816:	eef0 7ae7 	vabs.f32	s15, s15
 800381a:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 80038d0 <Motion_Process+0x358>
 800381e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003822:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003826:	f140 817f 	bpl.w	8003b28 <Motion_Process+0x5b0>
 800382a:	edd7 7a00 	vldr	s15, [r7]
 800382e:	eef0 7ae7 	vabs.f32	s15, s15
 8003832:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 80038d0 <Motion_Process+0x358>
 8003836:	eef4 7ac7 	vcmpe.f32	s15, s14
 800383a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800383e:	f140 8173 	bpl.w	8003b28 <Motion_Process+0x5b0>
	        Motion_Stop();
 8003842:	f000 fb3d 	bl	8003ec0 <Motion_Stop>
 8003846:	e16f      	b.n	8003b28 <Motion_Process+0x5b0>
	}


    // ---- In-place turning branch ----
	// ---- In-place turning branch ----
	    else if (is_turning) {
 8003848:	4b22      	ldr	r3, [pc, #136]	@ (80038d4 <Motion_Process+0x35c>)
 800384a:	781b      	ldrb	r3, [r3, #0]
 800384c:	b2db      	uxtb	r3, r3
 800384e:	2b00      	cmp	r3, #0
 8003850:	f000 80db 	beq.w	8003a0a <Motion_Process+0x492>
	        if ((HAL_GetTick() - turn_start_tick) > 3000U) {
 8003854:	f002 f8c4 	bl	80059e0 <HAL_GetTick>
 8003858:	4602      	mov	r2, r0
 800385a:	4b1f      	ldr	r3, [pc, #124]	@ (80038d8 <Motion_Process+0x360>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	1ad3      	subs	r3, r2, r3
 8003860:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8003864:	4293      	cmp	r3, r2
 8003866:	d93b      	bls.n	80038e0 <Motion_Process+0x368>
	            Motion_Stop();
 8003868:	f000 fb2a 	bl	8003ec0 <Motion_Stop>
	            Motion_Set_Steering(0);
 800386c:	2000      	movs	r0, #0
 800386e:	f7ff fdd3 	bl	8003418 <Motion_Set_Steering>
	            turn_deadband_enter_tick = 0;
 8003872:	4b1a      	ldr	r3, [pc, #104]	@ (80038dc <Motion_Process+0x364>)
 8003874:	2200      	movs	r2, #0
 8003876:	601a      	str	r2, [r3, #0]
	            return;
 8003878:	e156      	b.n	8003b28 <Motion_Process+0x5b0>
 800387a:	bf00      	nop
 800387c:	20000690 	.word	0x20000690
 8003880:	447a0000 	.word	0x447a0000
 8003884:	20000610 	.word	0x20000610
 8003888:	200005e4 	.word	0x200005e4
 800388c:	200005e8 	.word	0x200005e8
 8003890:	20000630 	.word	0x20000630
 8003894:	20000650 	.word	0x20000650
 8003898:	200005f4 	.word	0x200005f4
 800389c:	20000004 	.word	0x20000004
 80038a0:	3f19999a 	.word	0x3f19999a
 80038a4:	3e99999a 	.word	0x3e99999a
 80038a8:	2000060c 	.word	0x2000060c
 80038ac:	3ecccccd 	.word	0x3ecccccd
 80038b0:	3fcccccd 	.word	0x3fcccccd
 80038b4:	3d75c28f 	.word	0x3d75c28f
 80038b8:	40c00000 	.word	0x40c00000
 80038bc:	c0c00000 	.word	0xc0c00000
 80038c0:	420c0000 	.word	0x420c0000
 80038c4:	420c0000 	.word	0x420c0000
 80038c8:	c20c0000 	.word	0xc20c0000
 80038cc:	c20c0000 	.word	0xc20c0000
 80038d0:	42c80000 	.word	0x42c80000
 80038d4:	20000670 	.word	0x20000670
 80038d8:	20000678 	.word	0x20000678
 80038dc:	2000067c 	.word	0x2000067c
	        }

	        float err     = wrap180(turn_target_heading - yaw);
 80038e0:	4b93      	ldr	r3, [pc, #588]	@ (8003b30 <Motion_Process+0x5b8>)
 80038e2:	ed93 7a00 	vldr	s14, [r3]
 80038e6:	4b93      	ldr	r3, [pc, #588]	@ (8003b34 <Motion_Process+0x5bc>)
 80038e8:	edd3 7a00 	vldr	s15, [r3]
 80038ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80038f0:	eeb0 0a67 	vmov.f32	s0, s15
 80038f4:	f7ff fce6 	bl	80032c4 <wrap180>
 80038f8:	ed87 0a14 	vstr	s0, [r7, #80]	@ 0x50
	        float abs_err = fabsf(err);
 80038fc:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8003900:	eef0 7ae7 	vabs.f32	s15, s15
 8003904:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c

	        // FIX #1: TIGHTEN DEADBAND FOR BETTER ACCURACY
	        const int32_t MIN_TURN_PWM   = 2000;
 8003908:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800390c:	64bb      	str	r3, [r7, #72]	@ 0x48
	        const int32_t MAX_TURN_PWM   = 3000;
 800390e:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8003912:	647b      	str	r3, [r7, #68]	@ 0x44
	        const float   SLOWDOWN_ANGLE = 55.0f;
 8003914:	4b88      	ldr	r3, [pc, #544]	@ (8003b38 <Motion_Process+0x5c0>)
 8003916:	643b      	str	r3, [r7, #64]	@ 0x40
	        const float   STOP_DEADBAND  = 1.0f; // Reduced from 3.0f
 8003918:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800391c:	63fb      	str	r3, [r7, #60]	@ 0x3c

	        // FIX #2: IMPROVED LOGIC TO STOP IMMEDIATELY AND PREVENT COASTING
	        if (abs_err < STOP_DEADBAND) {
 800391e:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8003922:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8003926:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800392a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800392e:	d522      	bpl.n	8003976 <Motion_Process+0x3fe>
	            // We've entered the target zone.
	            if (turn_deadband_enter_tick == 0) {
 8003930:	4b82      	ldr	r3, [pc, #520]	@ (8003b3c <Motion_Process+0x5c4>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d10a      	bne.n	800394e <Motion_Process+0x3d6>
	                // First time entering: stop motors immediately to kill momentum.
	                set_left_speed(0);
 8003938:	2000      	movs	r0, #0
 800393a:	f7ff fc93 	bl	8003264 <set_left_speed>
	                set_right_speed(0);
 800393e:	2000      	movs	r0, #0
 8003940:	f7ff fca0 	bl	8003284 <set_right_speed>
	                turn_deadband_enter_tick = HAL_GetTick();
 8003944:	f002 f84c 	bl	80059e0 <HAL_GetTick>
 8003948:	4603      	mov	r3, r0
 800394a:	4a7c      	ldr	r2, [pc, #496]	@ (8003b3c <Motion_Process+0x5c4>)
 800394c:	6013      	str	r3, [r2, #0]
	            }

	            // If we have successfully stayed in the deadband for the hold time, the turn is complete.
	            if ((HAL_GetTick() - turn_deadband_enter_tick) >= TURN_HOLD_MS) {
 800394e:	f002 f847 	bl	80059e0 <HAL_GetTick>
 8003952:	4602      	mov	r2, r0
 8003954:	4b79      	ldr	r3, [pc, #484]	@ (8003b3c <Motion_Process+0x5c4>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	1ad3      	subs	r3, r2, r3
 800395a:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800395e:	4293      	cmp	r3, r2
 8003960:	f0c0 80e2 	bcc.w	8003b28 <Motion_Process+0x5b0>
	                Motion_Stop(); // Resets flags etc.
 8003964:	f000 faac 	bl	8003ec0 <Motion_Stop>
	                Motion_Set_Steering(0);
 8003968:	2000      	movs	r0, #0
 800396a:	f7ff fd55 	bl	8003418 <Motion_Set_Steering>
	                turn_deadband_enter_tick = 0;
 800396e:	4b73      	ldr	r3, [pc, #460]	@ (8003b3c <Motion_Process+0x5c4>)
 8003970:	2200      	movs	r2, #0
 8003972:	601a      	str	r2, [r3, #0]
 8003974:	e0d8      	b.n	8003b28 <Motion_Process+0x5b0>
	            }
	        } else {
	            // We are outside the target zone, so apply power.
	            int32_t turn_speed;
	            if (abs_err > SLOWDOWN_ANGLE) {
 8003976:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 800397a:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 800397e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003982:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003986:	dd02      	ble.n	800398e <Motion_Process+0x416>
	                turn_speed = MAX_TURN_PWM;
 8003988:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800398a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800398c:	e01e      	b.n	80039cc <Motion_Process+0x454>
	            } else {
	                float scale = abs_err / SLOWDOWN_ANGLE;
 800398e:	edd7 6a13 	vldr	s13, [r7, #76]	@ 0x4c
 8003992:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8003996:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800399a:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
	                turn_speed = (int32_t)(MIN_TURN_PWM + scale * (MAX_TURN_PWM - MIN_TURN_PWM));
 800399e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80039a0:	ee07 3a90 	vmov	s15, r3
 80039a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80039a8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80039aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80039ac:	1ad3      	subs	r3, r2, r3
 80039ae:	ee07 3a90 	vmov	s15, r3
 80039b2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80039b6:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80039ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80039be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80039c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80039c6:	ee17 3a90 	vmov	r3, s15
 80039ca:	67bb      	str	r3, [r7, #120]	@ 0x78
	            }

	            int dir = (err > 0.0f) ? +1 : -1;
 80039cc:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 80039d0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80039d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039d8:	dd01      	ble.n	80039de <Motion_Process+0x466>
 80039da:	2301      	movs	r3, #1
 80039dc:	e001      	b.n	80039e2 <Motion_Process+0x46a>
 80039de:	f04f 33ff 	mov.w	r3, #4294967295
 80039e2:	637b      	str	r3, [r7, #52]	@ 0x34
	            set_left_speed(  dir * turn_speed);
 80039e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039e6:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80039e8:	fb02 f303 	mul.w	r3, r2, r3
 80039ec:	4618      	mov	r0, r3
 80039ee:	f7ff fc39 	bl	8003264 <set_left_speed>
	            set_right_speed(- dir * turn_speed);
 80039f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039f4:	425b      	negs	r3, r3
 80039f6:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80039f8:	fb02 f303 	mul.w	r3, r2, r3
 80039fc:	4618      	mov	r0, r3
 80039fe:	f7ff fc41 	bl	8003284 <set_right_speed>

	            // Reset the timer since we've left the deadband.
	            turn_deadband_enter_tick = 0;
 8003a02:	4b4e      	ldr	r3, [pc, #312]	@ (8003b3c <Motion_Process+0x5c4>)
 8003a04:	2200      	movs	r2, #0
 8003a06:	601a      	str	r2, [r3, #0]
 8003a08:	e08e      	b.n	8003b28 <Motion_Process+0x5b0>
	        }
	    }
    // ---- Arc turning branch ----
    else if (is_arc_turn) {
 8003a0a:	4b4d      	ldr	r3, [pc, #308]	@ (8003b40 <Motion_Process+0x5c8>)
 8003a0c:	781b      	ldrb	r3, [r3, #0]
 8003a0e:	b2db      	uxtb	r3, r3
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	f000 8089 	beq.w	8003b28 <Motion_Process+0x5b0>
        float err = wrap180(arc_target_heading - yaw);
 8003a16:	4b4b      	ldr	r3, [pc, #300]	@ (8003b44 <Motion_Process+0x5cc>)
 8003a18:	ed93 7a00 	vldr	s14, [r3]
 8003a1c:	4b45      	ldr	r3, [pc, #276]	@ (8003b34 <Motion_Process+0x5bc>)
 8003a1e:	edd3 7a00 	vldr	s15, [r3]
 8003a22:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a26:	eeb0 0a67 	vmov.f32	s0, s15
 8003a2a:	f7ff fc4b 	bl	80032c4 <wrap180>
 8003a2e:	ed87 0a1b 	vstr	s0, [r7, #108]	@ 0x6c

        if ((HAL_GetTick() - arc_start_tick) > 5000U) {
 8003a32:	f001 ffd5 	bl	80059e0 <HAL_GetTick>
 8003a36:	4602      	mov	r2, r0
 8003a38:	4b43      	ldr	r3, [pc, #268]	@ (8003b48 <Motion_Process+0x5d0>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	1ad3      	subs	r3, r2, r3
 8003a3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d905      	bls.n	8003a52 <Motion_Process+0x4da>
            Motion_Stop();
 8003a46:	f000 fa3b 	bl	8003ec0 <Motion_Stop>
            Motion_Set_Steering(0);
 8003a4a:	2000      	movs	r0, #0
 8003a4c:	f7ff fce4 	bl	8003418 <Motion_Set_Steering>
            return;
 8003a50:	e06a      	b.n	8003b28 <Motion_Process+0x5b0>
        }

        const int32_t MIN_FWD_ABS = 1000;
 8003a52:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003a56:	66bb      	str	r3, [r7, #104]	@ 0x68
        const int32_t MAX_FWD_ABS = abs(arc_base_pwm);
 8003a58:	4b3c      	ldr	r3, [pc, #240]	@ (8003b4c <Motion_Process+0x5d4>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	bfb8      	it	lt
 8003a60:	425b      	neglt	r3, r3
 8003a62:	667b      	str	r3, [r7, #100]	@ 0x64
        float mag   = fabsf(err);
 8003a64:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 8003a68:	eef0 7ae7 	vabs.f32	s15, s15
 8003a6c:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
        float scale = (mag >= 15.0f) ? 1.0f
                      : (mag <= 2.0f ? 0.0f : (mag - 2.0f) / (15.0f - 2.0f));
 8003a70:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8003a74:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 8003a78:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a80:	db02      	blt.n	8003a88 <Motion_Process+0x510>
 8003a82:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8003a86:	e015      	b.n	8003ab4 <Motion_Process+0x53c>
 8003a88:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8003a8c:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8003a90:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a98:	d802      	bhi.n	8003aa0 <Motion_Process+0x528>
 8003a9a:	eddf 7a2d 	vldr	s15, [pc, #180]	@ 8003b50 <Motion_Process+0x5d8>
 8003a9e:	e009      	b.n	8003ab4 <Motion_Process+0x53c>
 8003aa0:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8003aa4:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8003aa8:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8003aac:	eef2 6a0a 	vmov.f32	s13, #42	@ 0x41500000  13.0
 8003ab0:	eec7 7a26 	vdiv.f32	s15, s14, s13
        float scale = (mag >= 15.0f) ? 1.0f
 8003ab4:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
        int32_t fwd_pwm_abs = (int32_t)(MIN_FWD_ABS + scale * (MAX_FWD_ABS - MIN_FWD_ABS));
 8003ab8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003aba:	ee07 3a90 	vmov	s15, r3
 8003abe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003ac2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003ac4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003ac6:	1ad3      	subs	r3, r2, r3
 8003ac8:	ee07 3a90 	vmov	s15, r3
 8003acc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003ad0:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8003ad4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003ad8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003adc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003ae0:	ee17 3a90 	vmov	r3, s15
 8003ae4:	65bb      	str	r3, [r7, #88]	@ 0x58

        int32_t fwd_pwm = (arc_base_pwm > 0) ? fwd_pwm_abs : -fwd_pwm_abs;
 8003ae6:	4b19      	ldr	r3, [pc, #100]	@ (8003b4c <Motion_Process+0x5d4>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	dc02      	bgt.n	8003af4 <Motion_Process+0x57c>
 8003aee:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003af0:	425b      	negs	r3, r3
 8003af2:	e000      	b.n	8003af6 <Motion_Process+0x57e>
 8003af4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003af6:	657b      	str	r3, [r7, #84]	@ 0x54

        Motion_Set_Steering(arc_steer_deg);
 8003af8:	4b16      	ldr	r3, [pc, #88]	@ (8003b54 <Motion_Process+0x5dc>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4618      	mov	r0, r3
 8003afe:	f7ff fc8b 	bl	8003418 <Motion_Set_Steering>
        set_forward_speed(fwd_pwm);
 8003b02:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8003b04:	f7ff fbd0 	bl	80032a8 <set_forward_speed>

        if (fabsf(err) < 2.0f) {
 8003b08:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 8003b0c:	eef0 7ae7 	vabs.f32	s15, s15
 8003b10:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8003b14:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b1c:	d504      	bpl.n	8003b28 <Motion_Process+0x5b0>
            Motion_Stop();
 8003b1e:	f000 f9cf 	bl	8003ec0 <Motion_Stop>
            Motion_Set_Steering(0);
 8003b22:	2000      	movs	r0, #0
 8003b24:	f7ff fc78 	bl	8003418 <Motion_Set_Steering>
        }
    }
}
 8003b28:	3788      	adds	r7, #136	@ 0x88
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}
 8003b2e:	bf00      	nop
 8003b30:	20000674 	.word	0x20000674
 8003b34:	200005f4 	.word	0x200005f4
 8003b38:	425c0000 	.word	0x425c0000
 8003b3c:	2000067c 	.word	0x2000067c
 8003b40:	20000680 	.word	0x20000680
 8003b44:	20000684 	.word	0x20000684
 8003b48:	20000688 	.word	0x20000688
 8003b4c:	20000008 	.word	0x20000008
 8003b50:	00000000 	.word	0x00000000
 8003b54:	2000000c 	.word	0x2000000c

08003b58 <Motion_Is_Busy>:

bool Motion_Is_Busy(void)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	af00      	add	r7, sp, #0
    if ((int32_t)(HAL_GetTick() - settle_until_tick) < 0) {
 8003b5c:	f001 ff40 	bl	80059e0 <HAL_GetTick>
 8003b60:	4602      	mov	r2, r0
 8003b62:	4b10      	ldr	r3, [pc, #64]	@ (8003ba4 <Motion_Is_Busy+0x4c>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	1ad3      	subs	r3, r2, r3
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	da01      	bge.n	8003b70 <Motion_Is_Busy+0x18>
        return true;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	e017      	b.n	8003ba0 <Motion_Is_Busy+0x48>
    }
    return (motor_pid_A.setpoint != 0) || is_turning || is_arc_turn;
 8003b70:	4b0d      	ldr	r3, [pc, #52]	@ (8003ba8 <Motion_Is_Busy+0x50>)
 8003b72:	edd3 7a03 	vldr	s15, [r3, #12]
 8003b76:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003b7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b7e:	d109      	bne.n	8003b94 <Motion_Is_Busy+0x3c>
 8003b80:	4b0a      	ldr	r3, [pc, #40]	@ (8003bac <Motion_Is_Busy+0x54>)
 8003b82:	781b      	ldrb	r3, [r3, #0]
 8003b84:	b2db      	uxtb	r3, r3
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d104      	bne.n	8003b94 <Motion_Is_Busy+0x3c>
 8003b8a:	4b09      	ldr	r3, [pc, #36]	@ (8003bb0 <Motion_Is_Busy+0x58>)
 8003b8c:	781b      	ldrb	r3, [r3, #0]
 8003b8e:	b2db      	uxtb	r3, r3
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d001      	beq.n	8003b98 <Motion_Is_Busy+0x40>
 8003b94:	2301      	movs	r3, #1
 8003b96:	e000      	b.n	8003b9a <Motion_Is_Busy+0x42>
 8003b98:	2300      	movs	r3, #0
 8003b9a:	f003 0301 	and.w	r3, r3, #1
 8003b9e:	b2db      	uxtb	r3, r3
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	bd80      	pop	{r7, pc}
 8003ba4:	2000068c 	.word	0x2000068c
 8003ba8:	20000610 	.word	0x20000610
 8003bac:	20000670 	.word	0x20000670
 8003bb0:	20000680 	.word	0x20000680

08003bb4 <Motion_Turn_Angle>:

void Motion_Turn_Angle(float angle_deg)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b082      	sub	sp, #8
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	ed87 0a01 	vstr	s0, [r7, #4]
    angle_deg = wrap180(angle_deg);
 8003bbe:	ed97 0a01 	vldr	s0, [r7, #4]
 8003bc2:	f7ff fb7f 	bl	80032c4 <wrap180>
 8003bc6:	ed87 0a01 	vstr	s0, [r7, #4]

    if (fabsf(angle_deg) < 0.5f) {
 8003bca:	edd7 7a01 	vldr	s15, [r7, #4]
 8003bce:	eef0 7ae7 	vabs.f32	s15, s15
 8003bd2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003bd6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003bda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bde:	d50c      	bpl.n	8003bfa <Motion_Turn_Angle+0x46>
        Motion_Set_Steering(0);
 8003be0:	2000      	movs	r0, #0
 8003be2:	f7ff fc19 	bl	8003418 <Motion_Set_Steering>
        is_turning  = false;
 8003be6:	4b23      	ldr	r3, [pc, #140]	@ (8003c74 <Motion_Turn_Angle+0xc0>)
 8003be8:	2200      	movs	r2, #0
 8003bea:	701a      	strb	r2, [r3, #0]
        is_arc_turn = false;
 8003bec:	4b22      	ldr	r3, [pc, #136]	@ (8003c78 <Motion_Turn_Angle+0xc4>)
 8003bee:	2200      	movs	r2, #0
 8003bf0:	701a      	strb	r2, [r3, #0]
        turn_deadband_enter_tick = 0;
 8003bf2:	4b22      	ldr	r3, [pc, #136]	@ (8003c7c <Motion_Turn_Angle+0xc8>)
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	601a      	str	r2, [r3, #0]
        return;
 8003bf8:	e038      	b.n	8003c6c <Motion_Turn_Angle+0xb8>
    }

    if (angle_deg > 0.0f) {
 8003bfa:	edd7 7a01 	vldr	s15, [r7, #4]
 8003bfe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003c02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c06:	dd04      	ble.n	8003c12 <Motion_Turn_Angle+0x5e>
        Motion_Set_Steering(-45);
 8003c08:	f06f 002c 	mvn.w	r0, #44	@ 0x2c
 8003c0c:	f7ff fc04 	bl	8003418 <Motion_Set_Steering>
 8003c10:	e002      	b.n	8003c18 <Motion_Turn_Angle+0x64>
    } else {
        Motion_Set_Steering(45);
 8003c12:	202d      	movs	r0, #45	@ 0x2d
 8003c14:	f7ff fc00 	bl	8003418 <Motion_Set_Steering>
    }
    osDelay(500);
 8003c18:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003c1c:	f007 ff74 	bl	800bb08 <osDelay>
    turn_target_heading = wrap180(yaw + angle_deg);
 8003c20:	4b17      	ldr	r3, [pc, #92]	@ (8003c80 <Motion_Turn_Angle+0xcc>)
 8003c22:	ed93 7a00 	vldr	s14, [r3]
 8003c26:	edd7 7a01 	vldr	s15, [r7, #4]
 8003c2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c2e:	eeb0 0a67 	vmov.f32	s0, s15
 8003c32:	f7ff fb47 	bl	80032c4 <wrap180>
 8003c36:	eef0 7a40 	vmov.f32	s15, s0
 8003c3a:	4b12      	ldr	r3, [pc, #72]	@ (8003c84 <Motion_Turn_Angle+0xd0>)
 8003c3c:	edc3 7a00 	vstr	s15, [r3]


    turn_start_tick     = HAL_GetTick();
 8003c40:	f001 fece 	bl	80059e0 <HAL_GetTick>
 8003c44:	4603      	mov	r3, r0
 8003c46:	4a10      	ldr	r2, [pc, #64]	@ (8003c88 <Motion_Turn_Angle+0xd4>)
 8003c48:	6013      	str	r3, [r2, #0]

    motor_pid_A.setpoint = 0;
 8003c4a:	4b10      	ldr	r3, [pc, #64]	@ (8003c8c <Motion_Turn_Angle+0xd8>)
 8003c4c:	f04f 0200 	mov.w	r2, #0
 8003c50:	60da      	str	r2, [r3, #12]
    motor_pid_D.setpoint = 0;
 8003c52:	4b0f      	ldr	r3, [pc, #60]	@ (8003c90 <Motion_Turn_Angle+0xdc>)
 8003c54:	f04f 0200 	mov.w	r2, #0
 8003c58:	60da      	str	r2, [r3, #12]
    is_arc_turn          = false;
 8003c5a:	4b07      	ldr	r3, [pc, #28]	@ (8003c78 <Motion_Turn_Angle+0xc4>)
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	701a      	strb	r2, [r3, #0]
    is_turning           = true;
 8003c60:	4b04      	ldr	r3, [pc, #16]	@ (8003c74 <Motion_Turn_Angle+0xc0>)
 8003c62:	2201      	movs	r2, #1
 8003c64:	701a      	strb	r2, [r3, #0]
    turn_deadband_enter_tick = 0;
 8003c66:	4b05      	ldr	r3, [pc, #20]	@ (8003c7c <Motion_Turn_Angle+0xc8>)
 8003c68:	2200      	movs	r2, #0
 8003c6a:	601a      	str	r2, [r3, #0]
}
 8003c6c:	3708      	adds	r7, #8
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}
 8003c72:	bf00      	nop
 8003c74:	20000670 	.word	0x20000670
 8003c78:	20000680 	.word	0x20000680
 8003c7c:	2000067c 	.word	0x2000067c
 8003c80:	200005f4 	.word	0x200005f4
 8003c84:	20000674 	.word	0x20000674
 8003c88:	20000678 	.word	0x20000678
 8003c8c:	20000610 	.word	0x20000610
 8003c90:	20000630 	.word	0x20000630

08003c94 <Motion_Turn_Angle_Arc>:

void Motion_Turn_Angle_Arc(float angle_deg, int steer_deg, int32_t pwm_forward)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b086      	sub	sp, #24
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	ed87 0a03 	vstr	s0, [r7, #12]
 8003c9e:	60b8      	str	r0, [r7, #8]
 8003ca0:	6079      	str	r1, [r7, #4]
    angle_deg = wrap180(angle_deg);
 8003ca2:	ed97 0a03 	vldr	s0, [r7, #12]
 8003ca6:	f7ff fb0d 	bl	80032c4 <wrap180>
 8003caa:	ed87 0a03 	vstr	s0, [r7, #12]

    if (fabsf(angle_deg) < 0.5f) {
 8003cae:	edd7 7a03 	vldr	s15, [r7, #12]
 8003cb2:	eef0 7ae7 	vabs.f32	s15, s15
 8003cb6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003cba:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003cbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cc2:	d506      	bpl.n	8003cd2 <Motion_Turn_Angle_Arc+0x3e>
        Motion_Set_Steering(0);
 8003cc4:	2000      	movs	r0, #0
 8003cc6:	f7ff fba7 	bl	8003418 <Motion_Set_Steering>
        is_arc_turn = false;
 8003cca:	4b2e      	ldr	r3, [pc, #184]	@ (8003d84 <Motion_Turn_Angle_Arc+0xf0>)
 8003ccc:	2200      	movs	r2, #0
 8003cce:	701a      	strb	r2, [r3, #0]
        return;
 8003cd0:	e055      	b.n	8003d7e <Motion_Turn_Angle_Arc+0xea>
    }

    int steer = (angle_deg > 0.0f) ? -abs(steer_deg) : +abs(steer_deg);
 8003cd2:	edd7 7a03 	vldr	s15, [r7, #12]
 8003cd6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003cda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cde:	dd05      	ble.n	8003cec <Motion_Turn_Angle_Arc+0x58>
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	bfb8      	it	lt
 8003ce6:	425b      	neglt	r3, r3
 8003ce8:	425b      	negs	r3, r3
 8003cea:	e003      	b.n	8003cf4 <Motion_Turn_Angle_Arc+0x60>
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	bfb8      	it	lt
 8003cf2:	425b      	neglt	r3, r3
 8003cf4:	617b      	str	r3, [r7, #20]
    if (steer >  90) steer =  90;
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	2b5a      	cmp	r3, #90	@ 0x5a
 8003cfa:	dd01      	ble.n	8003d00 <Motion_Turn_Angle_Arc+0x6c>
 8003cfc:	235a      	movs	r3, #90	@ 0x5a
 8003cfe:	617b      	str	r3, [r7, #20]
    if (steer < -90) steer = -90;
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	f113 0f5a 	cmn.w	r3, #90	@ 0x5a
 8003d06:	da02      	bge.n	8003d0e <Motion_Turn_Angle_Arc+0x7a>
 8003d08:	f06f 0359 	mvn.w	r3, #89	@ 0x59
 8003d0c:	617b      	str	r3, [r7, #20]

    arc_steer_deg       = -steer;
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	425b      	negs	r3, r3
 8003d12:	4a1d      	ldr	r2, [pc, #116]	@ (8003d88 <Motion_Turn_Angle_Arc+0xf4>)
 8003d14:	6013      	str	r3, [r2, #0]
    arc_base_pwm        = abs((pwm_forward != 0) ? pwm_forward : 1700);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d004      	beq.n	8003d26 <Motion_Turn_Angle_Arc+0x92>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	bfb8      	it	lt
 8003d22:	425b      	neglt	r3, r3
 8003d24:	e001      	b.n	8003d2a <Motion_Turn_Angle_Arc+0x96>
 8003d26:	f240 63a4 	movw	r3, #1700	@ 0x6a4
 8003d2a:	4a18      	ldr	r2, [pc, #96]	@ (8003d8c <Motion_Turn_Angle_Arc+0xf8>)
 8003d2c:	6013      	str	r3, [r2, #0]
    arc_target_heading  = wrap180(yaw + angle_deg);
 8003d2e:	4b18      	ldr	r3, [pc, #96]	@ (8003d90 <Motion_Turn_Angle_Arc+0xfc>)
 8003d30:	ed93 7a00 	vldr	s14, [r3]
 8003d34:	edd7 7a03 	vldr	s15, [r7, #12]
 8003d38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d3c:	eeb0 0a67 	vmov.f32	s0, s15
 8003d40:	f7ff fac0 	bl	80032c4 <wrap180>
 8003d44:	eef0 7a40 	vmov.f32	s15, s0
 8003d48:	4b12      	ldr	r3, [pc, #72]	@ (8003d94 <Motion_Turn_Angle_Arc+0x100>)
 8003d4a:	edc3 7a00 	vstr	s15, [r3]
    arc_start_tick      = HAL_GetTick();
 8003d4e:	f001 fe47 	bl	80059e0 <HAL_GetTick>
 8003d52:	4603      	mov	r3, r0
 8003d54:	4a10      	ldr	r2, [pc, #64]	@ (8003d98 <Motion_Turn_Angle_Arc+0x104>)
 8003d56:	6013      	str	r3, [r2, #0]

    motor_pid_A.setpoint = 0;
 8003d58:	4b10      	ldr	r3, [pc, #64]	@ (8003d9c <Motion_Turn_Angle_Arc+0x108>)
 8003d5a:	f04f 0200 	mov.w	r2, #0
 8003d5e:	60da      	str	r2, [r3, #12]
    motor_pid_D.setpoint = 0;
 8003d60:	4b0f      	ldr	r3, [pc, #60]	@ (8003da0 <Motion_Turn_Angle_Arc+0x10c>)
 8003d62:	f04f 0200 	mov.w	r2, #0
 8003d66:	60da      	str	r2, [r3, #12]
    is_turning           = false;
 8003d68:	4b0e      	ldr	r3, [pc, #56]	@ (8003da4 <Motion_Turn_Angle_Arc+0x110>)
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	701a      	strb	r2, [r3, #0]

    Motion_Set_Steering(arc_steer_deg);
 8003d6e:	4b06      	ldr	r3, [pc, #24]	@ (8003d88 <Motion_Turn_Angle_Arc+0xf4>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4618      	mov	r0, r3
 8003d74:	f7ff fb50 	bl	8003418 <Motion_Set_Steering>
    is_arc_turn = true;
 8003d78:	4b02      	ldr	r3, [pc, #8]	@ (8003d84 <Motion_Turn_Angle_Arc+0xf0>)
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	701a      	strb	r2, [r3, #0]
}
 8003d7e:	3718      	adds	r7, #24
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}
 8003d84:	20000680 	.word	0x20000680
 8003d88:	2000000c 	.word	0x2000000c
 8003d8c:	20000008 	.word	0x20000008
 8003d90:	200005f4 	.word	0x200005f4
 8003d94:	20000684 	.word	0x20000684
 8003d98:	20000688 	.word	0x20000688
 8003d9c:	20000610 	.word	0x20000610
 8003da0:	20000630 	.word	0x20000630
 8003da4:	20000670 	.word	0x20000670

08003da8 <Motion_Turn_Angle_Arc_Backward>:

void Motion_Turn_Angle_Arc_Backward(float angle_deg, int steer_deg, int32_t pwm_backward)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b086      	sub	sp, #24
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	ed87 0a03 	vstr	s0, [r7, #12]
 8003db2:	60b8      	str	r0, [r7, #8]
 8003db4:	6079      	str	r1, [r7, #4]
    angle_deg = wrap180(angle_deg);
 8003db6:	ed97 0a03 	vldr	s0, [r7, #12]
 8003dba:	f7ff fa83 	bl	80032c4 <wrap180>
 8003dbe:	ed87 0a03 	vstr	s0, [r7, #12]

    if (fabsf(angle_deg) < 0.5f) {
 8003dc2:	edd7 7a03 	vldr	s15, [r7, #12]
 8003dc6:	eef0 7ae7 	vabs.f32	s15, s15
 8003dca:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003dce:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003dd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dd6:	d506      	bpl.n	8003de6 <Motion_Turn_Angle_Arc_Backward+0x3e>
        Motion_Set_Steering(0);
 8003dd8:	2000      	movs	r0, #0
 8003dda:	f7ff fb1d 	bl	8003418 <Motion_Set_Steering>
        is_arc_turn = false;
 8003dde:	4b2e      	ldr	r3, [pc, #184]	@ (8003e98 <Motion_Turn_Angle_Arc_Backward+0xf0>)
 8003de0:	2200      	movs	r2, #0
 8003de2:	701a      	strb	r2, [r3, #0]
        return;
 8003de4:	e054      	b.n	8003e90 <Motion_Turn_Angle_Arc_Backward+0xe8>
    }

    int steer = (angle_deg > 0.0f) ? -abs(steer_deg) : +abs(steer_deg);
 8003de6:	edd7 7a03 	vldr	s15, [r7, #12]
 8003dea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003dee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003df2:	dd05      	ble.n	8003e00 <Motion_Turn_Angle_Arc_Backward+0x58>
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	bfb8      	it	lt
 8003dfa:	425b      	neglt	r3, r3
 8003dfc:	425b      	negs	r3, r3
 8003dfe:	e003      	b.n	8003e08 <Motion_Turn_Angle_Arc_Backward+0x60>
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	bfb8      	it	lt
 8003e06:	425b      	neglt	r3, r3
 8003e08:	617b      	str	r3, [r7, #20]
    if (steer >  90) steer =  90;
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	2b5a      	cmp	r3, #90	@ 0x5a
 8003e0e:	dd01      	ble.n	8003e14 <Motion_Turn_Angle_Arc_Backward+0x6c>
 8003e10:	235a      	movs	r3, #90	@ 0x5a
 8003e12:	617b      	str	r3, [r7, #20]
    if (steer < -90) steer = -90;
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	f113 0f5a 	cmn.w	r3, #90	@ 0x5a
 8003e1a:	da02      	bge.n	8003e22 <Motion_Turn_Angle_Arc_Backward+0x7a>
 8003e1c:	f06f 0359 	mvn.w	r3, #89	@ 0x59
 8003e20:	617b      	str	r3, [r7, #20]

    arc_steer_deg       = steer;
 8003e22:	4a1e      	ldr	r2, [pc, #120]	@ (8003e9c <Motion_Turn_Angle_Arc_Backward+0xf4>)
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	6013      	str	r3, [r2, #0]
    arc_base_pwm        = -abs((pwm_backward != 0) ? pwm_backward : 1700);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d005      	beq.n	8003e3a <Motion_Turn_Angle_Arc_Backward+0x92>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	bfb8      	it	lt
 8003e34:	425b      	neglt	r3, r3
 8003e36:	425b      	negs	r3, r3
 8003e38:	e000      	b.n	8003e3c <Motion_Turn_Angle_Arc_Backward+0x94>
 8003e3a:	4b19      	ldr	r3, [pc, #100]	@ (8003ea0 <Motion_Turn_Angle_Arc_Backward+0xf8>)
 8003e3c:	4a19      	ldr	r2, [pc, #100]	@ (8003ea4 <Motion_Turn_Angle_Arc_Backward+0xfc>)
 8003e3e:	6013      	str	r3, [r2, #0]
    arc_target_heading  = wrap180(yaw + angle_deg);
 8003e40:	4b19      	ldr	r3, [pc, #100]	@ (8003ea8 <Motion_Turn_Angle_Arc_Backward+0x100>)
 8003e42:	ed93 7a00 	vldr	s14, [r3]
 8003e46:	edd7 7a03 	vldr	s15, [r7, #12]
 8003e4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e4e:	eeb0 0a67 	vmov.f32	s0, s15
 8003e52:	f7ff fa37 	bl	80032c4 <wrap180>
 8003e56:	eef0 7a40 	vmov.f32	s15, s0
 8003e5a:	4b14      	ldr	r3, [pc, #80]	@ (8003eac <Motion_Turn_Angle_Arc_Backward+0x104>)
 8003e5c:	edc3 7a00 	vstr	s15, [r3]
    arc_start_tick      = HAL_GetTick();
 8003e60:	f001 fdbe 	bl	80059e0 <HAL_GetTick>
 8003e64:	4603      	mov	r3, r0
 8003e66:	4a12      	ldr	r2, [pc, #72]	@ (8003eb0 <Motion_Turn_Angle_Arc_Backward+0x108>)
 8003e68:	6013      	str	r3, [r2, #0]

    motor_pid_A.setpoint = 0;
 8003e6a:	4b12      	ldr	r3, [pc, #72]	@ (8003eb4 <Motion_Turn_Angle_Arc_Backward+0x10c>)
 8003e6c:	f04f 0200 	mov.w	r2, #0
 8003e70:	60da      	str	r2, [r3, #12]
    motor_pid_D.setpoint = 0;
 8003e72:	4b11      	ldr	r3, [pc, #68]	@ (8003eb8 <Motion_Turn_Angle_Arc_Backward+0x110>)
 8003e74:	f04f 0200 	mov.w	r2, #0
 8003e78:	60da      	str	r2, [r3, #12]
    is_turning           = false;
 8003e7a:	4b10      	ldr	r3, [pc, #64]	@ (8003ebc <Motion_Turn_Angle_Arc_Backward+0x114>)
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	701a      	strb	r2, [r3, #0]

    Motion_Set_Steering(arc_steer_deg);
 8003e80:	4b06      	ldr	r3, [pc, #24]	@ (8003e9c <Motion_Turn_Angle_Arc_Backward+0xf4>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4618      	mov	r0, r3
 8003e86:	f7ff fac7 	bl	8003418 <Motion_Set_Steering>
    is_arc_turn = true;
 8003e8a:	4b03      	ldr	r3, [pc, #12]	@ (8003e98 <Motion_Turn_Angle_Arc_Backward+0xf0>)
 8003e8c:	2201      	movs	r2, #1
 8003e8e:	701a      	strb	r2, [r3, #0]
}
 8003e90:	3718      	adds	r7, #24
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}
 8003e96:	bf00      	nop
 8003e98:	20000680 	.word	0x20000680
 8003e9c:	2000000c 	.word	0x2000000c
 8003ea0:	fffff95c 	.word	0xfffff95c
 8003ea4:	20000008 	.word	0x20000008
 8003ea8:	200005f4 	.word	0x200005f4
 8003eac:	20000684 	.word	0x20000684
 8003eb0:	20000688 	.word	0x20000688
 8003eb4:	20000610 	.word	0x20000610
 8003eb8:	20000630 	.word	0x20000630
 8003ebc:	20000670 	.word	0x20000670

08003ec0 <Motion_Stop>:

void Motion_Stop(void)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	af00      	add	r7, sp, #0
    PID_Reset(&motor_pid_A);
 8003ec4:	4812      	ldr	r0, [pc, #72]	@ (8003f10 <Motion_Stop+0x50>)
 8003ec6:	f001 f84b 	bl	8004f60 <PID_Reset>
    PID_Reset(&motor_pid_D);
 8003eca:	4812      	ldr	r0, [pc, #72]	@ (8003f14 <Motion_Stop+0x54>)
 8003ecc:	f001 f848 	bl	8004f60 <PID_Reset>
    PID_Reset(&heading_pid);
 8003ed0:	4811      	ldr	r0, [pc, #68]	@ (8003f18 <Motion_Stop+0x58>)
 8003ed2:	f001 f845 	bl	8004f60 <PID_Reset>

    motor_pid_A.setpoint = 0;
 8003ed6:	4b0e      	ldr	r3, [pc, #56]	@ (8003f10 <Motion_Stop+0x50>)
 8003ed8:	f04f 0200 	mov.w	r2, #0
 8003edc:	60da      	str	r2, [r3, #12]
    motor_pid_D.setpoint = 0;
 8003ede:	4b0d      	ldr	r3, [pc, #52]	@ (8003f14 <Motion_Stop+0x54>)
 8003ee0:	f04f 0200 	mov.w	r2, #0
 8003ee4:	60da      	str	r2, [r3, #12]

    set_left_speed(0);
 8003ee6:	2000      	movs	r0, #0
 8003ee8:	f7ff f9bc 	bl	8003264 <set_left_speed>
    set_right_speed(0);
 8003eec:	2000      	movs	r0, #0
 8003eee:	f7ff f9c9 	bl	8003284 <set_right_speed>

    is_turning  = false;
 8003ef2:	4b0a      	ldr	r3, [pc, #40]	@ (8003f1c <Motion_Stop+0x5c>)
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	701a      	strb	r2, [r3, #0]
    is_arc_turn = false;
 8003ef8:	4b09      	ldr	r3, [pc, #36]	@ (8003f20 <Motion_Stop+0x60>)
 8003efa:	2200      	movs	r2, #0
 8003efc:	701a      	strb	r2, [r3, #0]

    settle_until_tick = HAL_GetTick() + 150;
 8003efe:	f001 fd6f 	bl	80059e0 <HAL_GetTick>
 8003f02:	4603      	mov	r3, r0
 8003f04:	3396      	adds	r3, #150	@ 0x96
 8003f06:	4a07      	ldr	r2, [pc, #28]	@ (8003f24 <Motion_Stop+0x64>)
 8003f08:	6013      	str	r3, [r2, #0]
}
 8003f0a:	bf00      	nop
 8003f0c:	bd80      	pop	{r7, pc}
 8003f0e:	bf00      	nop
 8003f10:	20000610 	.word	0x20000610
 8003f14:	20000630 	.word	0x20000630
 8003f18:	20000650 	.word	0x20000650
 8003f1c:	20000670 	.word	0x20000670
 8003f20:	20000680 	.word	0x20000680
 8003f24:	2000068c 	.word	0x2000068c

08003f28 <Motion_Sonny_Move_To_O1>:

  // General Timing
  const int SETTLE_TIME_MS = 100;

void Motion_Sonny_Move_To_O1(void)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	af00      	add	r7, sp, #0
	 // === PART 1: Approach & Bypass Obstacle 1 (Forward Trip) ===
	       Motion_Move_Distance(FORWARD_TRAVEL_MAX_CM);
 8003f2c:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8003f84 <Motion_Sonny_Move_To_O1+0x5c>
 8003f30:	eeb0 0a67 	vmov.f32	s0, s15
 8003f34:	f7ff fac2 	bl	80034bc <Motion_Move_Distance>
	       while (Motion_Is_Busy() && (Front_Distance_cm > OB1_APPROACH_DISTANCE_CM || Front_Distance_cm < 0.0f))
 8003f38:	e004      	b.n	8003f44 <Motion_Sonny_Move_To_O1+0x1c>
	       {
	         Motion_Process(); osDelay(20);
 8003f3a:	f7ff fb1d 	bl	8003578 <Motion_Process>
 8003f3e:	2014      	movs	r0, #20
 8003f40:	f007 fde2 	bl	800bb08 <osDelay>
	       while (Motion_Is_Busy() && (Front_Distance_cm > OB1_APPROACH_DISTANCE_CM || Front_Distance_cm < 0.0f))
 8003f44:	f7ff fe08 	bl	8003b58 <Motion_Is_Busy>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d011      	beq.n	8003f72 <Motion_Sonny_Move_To_O1+0x4a>
 8003f4e:	4b0e      	ldr	r3, [pc, #56]	@ (8003f88 <Motion_Sonny_Move_To_O1+0x60>)
 8003f50:	edd3 7a00 	vldr	s15, [r3]
 8003f54:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8003f58:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f60:	dceb      	bgt.n	8003f3a <Motion_Sonny_Move_To_O1+0x12>
 8003f62:	4b09      	ldr	r3, [pc, #36]	@ (8003f88 <Motion_Sonny_Move_To_O1+0x60>)
 8003f64:	edd3 7a00 	vldr	s15, [r3]
 8003f68:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003f6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f70:	d4e3      	bmi.n	8003f3a <Motion_Sonny_Move_To_O1+0x12>
	       }
	       Motion_Stop(); osDelay(SETTLE_TIME_MS);
 8003f72:	f7ff ffa5 	bl	8003ec0 <Motion_Stop>
 8003f76:	2364      	movs	r3, #100	@ 0x64
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f007 fdc5 	bl	800bb08 <osDelay>

}
 8003f7e:	bf00      	nop
 8003f80:	bd80      	pop	{r7, pc}
 8003f82:	bf00      	nop
 8003f84:	43fa0000 	.word	0x43fa0000
 8003f88:	20000278 	.word	0x20000278

08003f8c <Motion_Sonny_Dodge_O1_Left>:

void Motion_Sonny_Dodge_O1_Left(void){
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	af00      	add	r7, sp, #0
	       // S-Curve to pass on the left
	       Motion_Turn_Angle_Arc(-ARC_HEADING_CHANGE_DEG, ARC_STEER_ANGLE_DEG, ARC_PWM_SPEED);
 8003f90:	eddf 7a61 	vldr	s15, [pc, #388]	@ 8004118 <Motion_Sonny_Dodge_O1_Left+0x18c>
 8003f94:	eef1 7a67 	vneg.f32	s15, s15
 8003f98:	233c      	movs	r3, #60	@ 0x3c
 8003f9a:	f640 0234 	movw	r2, #2100	@ 0x834
 8003f9e:	4611      	mov	r1, r2
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	eeb0 0a67 	vmov.f32	s0, s15
 8003fa6:	f7ff fe75 	bl	8003c94 <Motion_Turn_Angle_Arc>
	       while (Motion_Is_Busy()) { Motion_Process(); osDelay(20); }
 8003faa:	e004      	b.n	8003fb6 <Motion_Sonny_Dodge_O1_Left+0x2a>
 8003fac:	f7ff fae4 	bl	8003578 <Motion_Process>
 8003fb0:	2014      	movs	r0, #20
 8003fb2:	f007 fda9 	bl	800bb08 <osDelay>
 8003fb6:	f7ff fdcf 	bl	8003b58 <Motion_Is_Busy>
 8003fba:	4603      	mov	r3, r0
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d1f5      	bne.n	8003fac <Motion_Sonny_Dodge_O1_Left+0x20>
	       osDelay(SETTLE_TIME_MS);
 8003fc0:	2364      	movs	r3, #100	@ 0x64
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f007 fda0 	bl	800bb08 <osDelay>
	       while (Motion_Is_Busy()) { Motion_Process(); osDelay(20); }
 8003fc8:	e004      	b.n	8003fd4 <Motion_Sonny_Dodge_O1_Left+0x48>
 8003fca:	f7ff fad5 	bl	8003578 <Motion_Process>
 8003fce:	2014      	movs	r0, #20
 8003fd0:	f007 fd9a 	bl	800bb08 <osDelay>
 8003fd4:	f7ff fdc0 	bl	8003b58 <Motion_Is_Busy>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d1f5      	bne.n	8003fca <Motion_Sonny_Dodge_O1_Left+0x3e>
	       osDelay(SETTLE_TIME_MS);
 8003fde:	2364      	movs	r3, #100	@ 0x64
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	f007 fd91 	bl	800bb08 <osDelay>
	       Motion_Turn_Angle_Arc(ARC_HEADING_CHANGE_DEG * 2.0f, ARC_STEER_ANGLE_DEG, ARC_PWM_SPEED);
 8003fe6:	eddf 7a4c 	vldr	s15, [pc, #304]	@ 8004118 <Motion_Sonny_Dodge_O1_Left+0x18c>
 8003fea:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003fee:	233c      	movs	r3, #60	@ 0x3c
 8003ff0:	f640 0234 	movw	r2, #2100	@ 0x834
 8003ff4:	4611      	mov	r1, r2
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	eeb0 0a67 	vmov.f32	s0, s15
 8003ffc:	f7ff fe4a 	bl	8003c94 <Motion_Turn_Angle_Arc>
	       while (Motion_Is_Busy()) { Motion_Process(); osDelay(20); }
 8004000:	e004      	b.n	800400c <Motion_Sonny_Dodge_O1_Left+0x80>
 8004002:	f7ff fab9 	bl	8003578 <Motion_Process>
 8004006:	2014      	movs	r0, #20
 8004008:	f007 fd7e 	bl	800bb08 <osDelay>
 800400c:	f7ff fda4 	bl	8003b58 <Motion_Is_Busy>
 8004010:	4603      	mov	r3, r0
 8004012:	2b00      	cmp	r3, #0
 8004014:	d1f5      	bne.n	8004002 <Motion_Sonny_Dodge_O1_Left+0x76>
	       osDelay(SETTLE_TIME_MS);
 8004016:	2364      	movs	r3, #100	@ 0x64
 8004018:	4618      	mov	r0, r3
 800401a:	f007 fd75 	bl	800bb08 <osDelay>
	       Motion_Turn_Angle_Arc(-ARC_HEADING_CHANGE_DEG, ARC_STEER_ANGLE_DEG, ARC_PWM_SPEED);
 800401e:	eddf 7a3e 	vldr	s15, [pc, #248]	@ 8004118 <Motion_Sonny_Dodge_O1_Left+0x18c>
 8004022:	eef1 7a67 	vneg.f32	s15, s15
 8004026:	233c      	movs	r3, #60	@ 0x3c
 8004028:	f640 0234 	movw	r2, #2100	@ 0x834
 800402c:	4611      	mov	r1, r2
 800402e:	4618      	mov	r0, r3
 8004030:	eeb0 0a67 	vmov.f32	s0, s15
 8004034:	f7ff fe2e 	bl	8003c94 <Motion_Turn_Angle_Arc>
	       while (Motion_Is_Busy()) { Motion_Process(); osDelay(20); }
 8004038:	e004      	b.n	8004044 <Motion_Sonny_Dodge_O1_Left+0xb8>
 800403a:	f7ff fa9d 	bl	8003578 <Motion_Process>
 800403e:	2014      	movs	r0, #20
 8004040:	f007 fd62 	bl	800bb08 <osDelay>
 8004044:	f7ff fd88 	bl	8003b58 <Motion_Is_Busy>
 8004048:	4603      	mov	r3, r0
 800404a:	2b00      	cmp	r3, #0
 800404c:	d1f5      	bne.n	800403a <Motion_Sonny_Dodge_O1_Left+0xae>
	       osDelay(SETTLE_TIME_MS);
 800404e:	2364      	movs	r3, #100	@ 0x64
 8004050:	4618      	mov	r0, r3
 8004052:	f007 fd59 	bl	800bb08 <osDelay>

	       Motion_Move_Distance(FORWARD_TRAVEL_MAX_CM);
 8004056:	eddf 7a31 	vldr	s15, [pc, #196]	@ 800411c <Motion_Sonny_Dodge_O1_Left+0x190>
 800405a:	eeb0 0a67 	vmov.f32	s0, s15
 800405e:	f7ff fa2d 	bl	80034bc <Motion_Move_Distance>
	      	      	      while (Motion_Is_Busy() && (Front_Distance_cm > OB2_APPROACH_DISTANCE_CM || Front_Distance_cm < 0.0f))
 8004062:	e004      	b.n	800406e <Motion_Sonny_Dodge_O1_Left+0xe2>
	      	      	      {
	      	      	        Motion_Process(); osDelay(20);
 8004064:	f7ff fa88 	bl	8003578 <Motion_Process>
 8004068:	2014      	movs	r0, #20
 800406a:	f007 fd4d 	bl	800bb08 <osDelay>
	      	      	      while (Motion_Is_Busy() && (Front_Distance_cm > OB2_APPROACH_DISTANCE_CM || Front_Distance_cm < 0.0f))
 800406e:	f7ff fd73 	bl	8003b58 <Motion_Is_Busy>
 8004072:	4603      	mov	r3, r0
 8004074:	2b00      	cmp	r3, #0
 8004076:	d011      	beq.n	800409c <Motion_Sonny_Dodge_O1_Left+0x110>
 8004078:	4b29      	ldr	r3, [pc, #164]	@ (8004120 <Motion_Sonny_Dodge_O1_Left+0x194>)
 800407a:	edd3 7a00 	vldr	s15, [r3]
 800407e:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 8004124 <Motion_Sonny_Dodge_O1_Left+0x198>
 8004082:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004086:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800408a:	dceb      	bgt.n	8004064 <Motion_Sonny_Dodge_O1_Left+0xd8>
 800408c:	4b24      	ldr	r3, [pc, #144]	@ (8004120 <Motion_Sonny_Dodge_O1_Left+0x194>)
 800408e:	edd3 7a00 	vldr	s15, [r3]
 8004092:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004096:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800409a:	d4e3      	bmi.n	8004064 <Motion_Sonny_Dodge_O1_Left+0xd8>
	      	      	      }
	      	      	      Motion_Stop(); osDelay(SETTLE_TIME_MS);
 800409c:	f7ff ff10 	bl	8003ec0 <Motion_Stop>
 80040a0:	2364      	movs	r3, #100	@ 0x64
 80040a2:	4618      	mov	r0, r3
 80040a4:	f007 fd30 	bl	800bb08 <osDelay>

	       // Safety Reverse Logic After Obstacle 1
	       if (Front_Distance_cm < ULTRASOUND_SAFETY_STOP_CM && Front_Distance_cm > 0.0f)
 80040a8:	4b1d      	ldr	r3, [pc, #116]	@ (8004120 <Motion_Sonny_Dodge_O1_Left+0x194>)
 80040aa:	edd3 7a00 	vldr	s15, [r3]
 80040ae:	eeb3 7a06 	vmov.f32	s14, #54	@ 0x41b00000  22.0
 80040b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80040b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040ba:	d400      	bmi.n	80040be <Motion_Sonny_Dodge_O1_Left+0x132>
	           Motion_Stop(); // Stop the reverse motion
	           osDelay(SETTLE_TIME_MS);
	       }


}
 80040bc:	e029      	b.n	8004112 <Motion_Sonny_Dodge_O1_Left+0x186>
	       if (Front_Distance_cm < ULTRASOUND_SAFETY_STOP_CM && Front_Distance_cm > 0.0f)
 80040be:	4b18      	ldr	r3, [pc, #96]	@ (8004120 <Motion_Sonny_Dodge_O1_Left+0x194>)
 80040c0:	edd3 7a00 	vldr	s15, [r3]
 80040c4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80040c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040cc:	dc00      	bgt.n	80040d0 <Motion_Sonny_Dodge_O1_Left+0x144>
}
 80040ce:	e020      	b.n	8004112 <Motion_Sonny_Dodge_O1_Left+0x186>
	           Motion_Move_Distance(REVERSE_TRAVEL_MAX_CM); // Start reversing
 80040d0:	eefb 7a09 	vmov.f32	s15, #185	@ 0xc1c80000 -25.0
 80040d4:	eeb0 0a67 	vmov.f32	s0, s15
 80040d8:	f7ff f9f0 	bl	80034bc <Motion_Move_Distance>
	           while(Motion_Is_Busy() && (Front_Distance_cm < ULTRASOUND_REVERSE_TARGET_CM)) {
 80040dc:	e004      	b.n	80040e8 <Motion_Sonny_Dodge_O1_Left+0x15c>
	               Motion_Process(); osDelay(20);
 80040de:	f7ff fa4b 	bl	8003578 <Motion_Process>
 80040e2:	2014      	movs	r0, #20
 80040e4:	f007 fd10 	bl	800bb08 <osDelay>
	           while(Motion_Is_Busy() && (Front_Distance_cm < ULTRASOUND_REVERSE_TARGET_CM)) {
 80040e8:	f7ff fd36 	bl	8003b58 <Motion_Is_Busy>
 80040ec:	4603      	mov	r3, r0
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d009      	beq.n	8004106 <Motion_Sonny_Dodge_O1_Left+0x17a>
 80040f2:	4b0b      	ldr	r3, [pc, #44]	@ (8004120 <Motion_Sonny_Dodge_O1_Left+0x194>)
 80040f4:	edd3 7a00 	vldr	s15, [r3]
 80040f8:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8004124 <Motion_Sonny_Dodge_O1_Left+0x198>
 80040fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004100:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004104:	d4eb      	bmi.n	80040de <Motion_Sonny_Dodge_O1_Left+0x152>
	           Motion_Stop(); // Stop the reverse motion
 8004106:	f7ff fedb 	bl	8003ec0 <Motion_Stop>
	           osDelay(SETTLE_TIME_MS);
 800410a:	2364      	movs	r3, #100	@ 0x64
 800410c:	4618      	mov	r0, r3
 800410e:	f007 fcfb 	bl	800bb08 <osDelay>
}
 8004112:	bf00      	nop
 8004114:	bd80      	pop	{r7, pc}
 8004116:	bf00      	nop
 8004118:	42340000 	.word	0x42340000
 800411c:	43fa0000 	.word	0x43fa0000
 8004120:	20000278 	.word	0x20000278
 8004124:	420c0000 	.word	0x420c0000

08004128 <Motion_Sonny_Dodge_O1_Right>:
void Motion_Sonny_Dodge_O1_Right(void){
 8004128:	b580      	push	{r7, lr}
 800412a:	af00      	add	r7, sp, #0
	       // S-Curve to pass on the right
	       Motion_Turn_Angle_Arc(ARC_HEADING_CHANGE_DEG, ARC_STEER_ANGLE_DEG, ARC_PWM_SPEED);
 800412c:	eddf 7a58 	vldr	s15, [pc, #352]	@ 8004290 <Motion_Sonny_Dodge_O1_Right+0x168>
 8004130:	233c      	movs	r3, #60	@ 0x3c
 8004132:	f640 0234 	movw	r2, #2100	@ 0x834
 8004136:	4611      	mov	r1, r2
 8004138:	4618      	mov	r0, r3
 800413a:	eeb0 0a67 	vmov.f32	s0, s15
 800413e:	f7ff fda9 	bl	8003c94 <Motion_Turn_Angle_Arc>
	       while (Motion_Is_Busy()) { Motion_Process(); osDelay(20); }
 8004142:	e004      	b.n	800414e <Motion_Sonny_Dodge_O1_Right+0x26>
 8004144:	f7ff fa18 	bl	8003578 <Motion_Process>
 8004148:	2014      	movs	r0, #20
 800414a:	f007 fcdd 	bl	800bb08 <osDelay>
 800414e:	f7ff fd03 	bl	8003b58 <Motion_Is_Busy>
 8004152:	4603      	mov	r3, r0
 8004154:	2b00      	cmp	r3, #0
 8004156:	d1f5      	bne.n	8004144 <Motion_Sonny_Dodge_O1_Right+0x1c>
	       osDelay(SETTLE_TIME_MS);
 8004158:	2364      	movs	r3, #100	@ 0x64
 800415a:	4618      	mov	r0, r3
 800415c:	f007 fcd4 	bl	800bb08 <osDelay>

	       Motion_Turn_Angle_Arc(-ARC_HEADING_CHANGE_DEG * 2.0f, ARC_STEER_ANGLE_DEG, ARC_PWM_SPEED);
 8004160:	eddf 7a4b 	vldr	s15, [pc, #300]	@ 8004290 <Motion_Sonny_Dodge_O1_Right+0x168>
 8004164:	eef1 7a67 	vneg.f32	s15, s15
 8004168:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800416c:	233c      	movs	r3, #60	@ 0x3c
 800416e:	f640 0234 	movw	r2, #2100	@ 0x834
 8004172:	4611      	mov	r1, r2
 8004174:	4618      	mov	r0, r3
 8004176:	eeb0 0a67 	vmov.f32	s0, s15
 800417a:	f7ff fd8b 	bl	8003c94 <Motion_Turn_Angle_Arc>
	       while (Motion_Is_Busy()) { Motion_Process(); osDelay(20); }
 800417e:	e004      	b.n	800418a <Motion_Sonny_Dodge_O1_Right+0x62>
 8004180:	f7ff f9fa 	bl	8003578 <Motion_Process>
 8004184:	2014      	movs	r0, #20
 8004186:	f007 fcbf 	bl	800bb08 <osDelay>
 800418a:	f7ff fce5 	bl	8003b58 <Motion_Is_Busy>
 800418e:	4603      	mov	r3, r0
 8004190:	2b00      	cmp	r3, #0
 8004192:	d1f5      	bne.n	8004180 <Motion_Sonny_Dodge_O1_Right+0x58>
	       osDelay(SETTLE_TIME_MS);
 8004194:	2364      	movs	r3, #100	@ 0x64
 8004196:	4618      	mov	r0, r3
 8004198:	f007 fcb6 	bl	800bb08 <osDelay>
	       Motion_Turn_Angle_Arc(ARC_HEADING_CHANGE_DEG, ARC_STEER_ANGLE_DEG, ARC_PWM_SPEED);
 800419c:	eddf 7a3c 	vldr	s15, [pc, #240]	@ 8004290 <Motion_Sonny_Dodge_O1_Right+0x168>
 80041a0:	233c      	movs	r3, #60	@ 0x3c
 80041a2:	f640 0234 	movw	r2, #2100	@ 0x834
 80041a6:	4611      	mov	r1, r2
 80041a8:	4618      	mov	r0, r3
 80041aa:	eeb0 0a67 	vmov.f32	s0, s15
 80041ae:	f7ff fd71 	bl	8003c94 <Motion_Turn_Angle_Arc>
	       while (Motion_Is_Busy()) { Motion_Process(); osDelay(20); }
 80041b2:	e004      	b.n	80041be <Motion_Sonny_Dodge_O1_Right+0x96>
 80041b4:	f7ff f9e0 	bl	8003578 <Motion_Process>
 80041b8:	2014      	movs	r0, #20
 80041ba:	f007 fca5 	bl	800bb08 <osDelay>
 80041be:	f7ff fccb 	bl	8003b58 <Motion_Is_Busy>
 80041c2:	4603      	mov	r3, r0
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d1f5      	bne.n	80041b4 <Motion_Sonny_Dodge_O1_Right+0x8c>
	       osDelay(SETTLE_TIME_MS);
 80041c8:	2364      	movs	r3, #100	@ 0x64
 80041ca:	4618      	mov	r0, r3
 80041cc:	f007 fc9c 	bl	800bb08 <osDelay>

	       Motion_Move_Distance(FORWARD_TRAVEL_MAX_CM);
 80041d0:	eddf 7a30 	vldr	s15, [pc, #192]	@ 8004294 <Motion_Sonny_Dodge_O1_Right+0x16c>
 80041d4:	eeb0 0a67 	vmov.f32	s0, s15
 80041d8:	f7ff f970 	bl	80034bc <Motion_Move_Distance>

		  while (Motion_Is_Busy() && (Front_Distance_cm > OB2_APPROACH_DISTANCE_CM || Front_Distance_cm < 0.0f))
 80041dc:	e004      	b.n	80041e8 <Motion_Sonny_Dodge_O1_Right+0xc0>
		  {
			Motion_Process(); osDelay(20);
 80041de:	f7ff f9cb 	bl	8003578 <Motion_Process>
 80041e2:	2014      	movs	r0, #20
 80041e4:	f007 fc90 	bl	800bb08 <osDelay>
		  while (Motion_Is_Busy() && (Front_Distance_cm > OB2_APPROACH_DISTANCE_CM || Front_Distance_cm < 0.0f))
 80041e8:	f7ff fcb6 	bl	8003b58 <Motion_Is_Busy>
 80041ec:	4603      	mov	r3, r0
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d011      	beq.n	8004216 <Motion_Sonny_Dodge_O1_Right+0xee>
 80041f2:	4b29      	ldr	r3, [pc, #164]	@ (8004298 <Motion_Sonny_Dodge_O1_Right+0x170>)
 80041f4:	edd3 7a00 	vldr	s15, [r3]
 80041f8:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 800429c <Motion_Sonny_Dodge_O1_Right+0x174>
 80041fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004200:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004204:	dceb      	bgt.n	80041de <Motion_Sonny_Dodge_O1_Right+0xb6>
 8004206:	4b24      	ldr	r3, [pc, #144]	@ (8004298 <Motion_Sonny_Dodge_O1_Right+0x170>)
 8004208:	edd3 7a00 	vldr	s15, [r3]
 800420c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004210:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004214:	d4e3      	bmi.n	80041de <Motion_Sonny_Dodge_O1_Right+0xb6>
		  }
		  Motion_Stop(); osDelay(SETTLE_TIME_MS);
 8004216:	f7ff fe53 	bl	8003ec0 <Motion_Stop>
 800421a:	2364      	movs	r3, #100	@ 0x64
 800421c:	4618      	mov	r0, r3
 800421e:	f007 fc73 	bl	800bb08 <osDelay>

	       // Safety Reverse Logic After Obstacle 1
	       if (Front_Distance_cm < ULTRASOUND_SAFETY_STOP_CM && Front_Distance_cm > 0.0f)
 8004222:	4b1d      	ldr	r3, [pc, #116]	@ (8004298 <Motion_Sonny_Dodge_O1_Right+0x170>)
 8004224:	edd3 7a00 	vldr	s15, [r3]
 8004228:	eeb3 7a06 	vmov.f32	s14, #54	@ 0x41b00000  22.0
 800422c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004230:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004234:	d400      	bmi.n	8004238 <Motion_Sonny_Dodge_O1_Right+0x110>
	           Motion_Stop(); // Stop the reverse motion
	           osDelay(SETTLE_TIME_MS);
	       }


}
 8004236:	e029      	b.n	800428c <Motion_Sonny_Dodge_O1_Right+0x164>
	       if (Front_Distance_cm < ULTRASOUND_SAFETY_STOP_CM && Front_Distance_cm > 0.0f)
 8004238:	4b17      	ldr	r3, [pc, #92]	@ (8004298 <Motion_Sonny_Dodge_O1_Right+0x170>)
 800423a:	edd3 7a00 	vldr	s15, [r3]
 800423e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004242:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004246:	dc00      	bgt.n	800424a <Motion_Sonny_Dodge_O1_Right+0x122>
}
 8004248:	e020      	b.n	800428c <Motion_Sonny_Dodge_O1_Right+0x164>
	           Motion_Move_Distance(REVERSE_TRAVEL_MAX_CM); // Start reversing
 800424a:	eefb 7a09 	vmov.f32	s15, #185	@ 0xc1c80000 -25.0
 800424e:	eeb0 0a67 	vmov.f32	s0, s15
 8004252:	f7ff f933 	bl	80034bc <Motion_Move_Distance>
	           while(Motion_Is_Busy() && (Front_Distance_cm < ULTRASOUND_REVERSE_TARGET_CM)) {
 8004256:	e004      	b.n	8004262 <Motion_Sonny_Dodge_O1_Right+0x13a>
	               Motion_Process(); osDelay(20);
 8004258:	f7ff f98e 	bl	8003578 <Motion_Process>
 800425c:	2014      	movs	r0, #20
 800425e:	f007 fc53 	bl	800bb08 <osDelay>
	           while(Motion_Is_Busy() && (Front_Distance_cm < ULTRASOUND_REVERSE_TARGET_CM)) {
 8004262:	f7ff fc79 	bl	8003b58 <Motion_Is_Busy>
 8004266:	4603      	mov	r3, r0
 8004268:	2b00      	cmp	r3, #0
 800426a:	d009      	beq.n	8004280 <Motion_Sonny_Dodge_O1_Right+0x158>
 800426c:	4b0a      	ldr	r3, [pc, #40]	@ (8004298 <Motion_Sonny_Dodge_O1_Right+0x170>)
 800426e:	edd3 7a00 	vldr	s15, [r3]
 8004272:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 800429c <Motion_Sonny_Dodge_O1_Right+0x174>
 8004276:	eef4 7ac7 	vcmpe.f32	s15, s14
 800427a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800427e:	d4eb      	bmi.n	8004258 <Motion_Sonny_Dodge_O1_Right+0x130>
	           Motion_Stop(); // Stop the reverse motion
 8004280:	f7ff fe1e 	bl	8003ec0 <Motion_Stop>
	           osDelay(SETTLE_TIME_MS);
 8004284:	2364      	movs	r3, #100	@ 0x64
 8004286:	4618      	mov	r0, r3
 8004288:	f007 fc3e 	bl	800bb08 <osDelay>
}
 800428c:	bf00      	nop
 800428e:	bd80      	pop	{r7, pc}
 8004290:	42340000 	.word	0x42340000
 8004294:	43fa0000 	.word	0x43fa0000
 8004298:	20000278 	.word	0x20000278
 800429c:	420c0000 	.word	0x420c0000

080042a0 <Motion_Sonny_Dodge_O2_Left_And_Home>:

void Motion_Sonny_Dodge_O2_Left_And_Home(float initial_ultrasound_distance){
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b082      	sub	sp, #8
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	ed87 0a01 	vstr	s0, [r7, #4]
	// === PART 2: U-Turn Maneuver around Obstacle 2 ===

	      // (U-Turn logic is unchanged as it was correct)
	      Motion_Turn_Angle_Arc(-TURN_90_DEG, NINETY_DEG_ARC_STEER_DEG, NINETY_DEG_ARC_PWM_SPEED); //left turn
 80042aa:	eddf 7ad2 	vldr	s15, [pc, #840]	@ 80045f4 <Motion_Sonny_Dodge_O2_Left_And_Home+0x354>
 80042ae:	eef1 7a67 	vneg.f32	s15, s15
 80042b2:	233c      	movs	r3, #60	@ 0x3c
 80042b4:	f640 0234 	movw	r2, #2100	@ 0x834
 80042b8:	4611      	mov	r1, r2
 80042ba:	4618      	mov	r0, r3
 80042bc:	eeb0 0a67 	vmov.f32	s0, s15
 80042c0:	f7ff fce8 	bl	8003c94 <Motion_Turn_Angle_Arc>
	      while (Motion_Is_Busy()) { Motion_Process(); osDelay(20); }
 80042c4:	e004      	b.n	80042d0 <Motion_Sonny_Dodge_O2_Left_And_Home+0x30>
 80042c6:	f7ff f957 	bl	8003578 <Motion_Process>
 80042ca:	2014      	movs	r0, #20
 80042cc:	f007 fc1c 	bl	800bb08 <osDelay>
 80042d0:	f7ff fc42 	bl	8003b58 <Motion_Is_Busy>
 80042d4:	4603      	mov	r3, r0
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d1f5      	bne.n	80042c6 <Motion_Sonny_Dodge_O2_Left_And_Home+0x26>
	      osDelay(SETTLE_TIME_MS);
 80042da:	2364      	movs	r3, #100	@ 0x64
 80042dc:	4618      	mov	r0, r3
 80042de:	f007 fc13 	bl	800bb08 <osDelay>

	      Motion_Move_Distance(FORWARD_TRAVEL_MAX_CM); //max forward
 80042e2:	eddf 7ac5 	vldr	s15, [pc, #788]	@ 80045f8 <Motion_Sonny_Dodge_O2_Left_And_Home+0x358>
 80042e6:	eeb0 0a67 	vmov.f32	s0, s15
 80042ea:	f7ff f8e7 	bl	80034bc <Motion_Move_Distance>
	      while (Motion_Is_Busy() && (IR_Right_cm < IR_OBSTACLE_THRESH_CM && IR_Right_cm > 0.0f)) { Motion_Process(); osDelay(20); }
 80042ee:	e004      	b.n	80042fa <Motion_Sonny_Dodge_O2_Left_And_Home+0x5a>
 80042f0:	f7ff f942 	bl	8003578 <Motion_Process>
 80042f4:	2014      	movs	r0, #20
 80042f6:	f007 fc07 	bl	800bb08 <osDelay>
 80042fa:	f7ff fc2d 	bl	8003b58 <Motion_Is_Busy>
 80042fe:	4603      	mov	r3, r0
 8004300:	2b00      	cmp	r3, #0
 8004302:	d011      	beq.n	8004328 <Motion_Sonny_Dodge_O2_Left_And_Home+0x88>
 8004304:	4bbd      	ldr	r3, [pc, #756]	@ (80045fc <Motion_Sonny_Dodge_O2_Left_And_Home+0x35c>)
 8004306:	edd3 7a00 	vldr	s15, [r3]
 800430a:	ed9f 7abd 	vldr	s14, [pc, #756]	@ 8004600 <Motion_Sonny_Dodge_O2_Left_And_Home+0x360>
 800430e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004312:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004316:	d507      	bpl.n	8004328 <Motion_Sonny_Dodge_O2_Left_And_Home+0x88>
 8004318:	4bb8      	ldr	r3, [pc, #736]	@ (80045fc <Motion_Sonny_Dodge_O2_Left_And_Home+0x35c>)
 800431a:	edd3 7a00 	vldr	s15, [r3]
 800431e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004322:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004326:	dce3      	bgt.n	80042f0 <Motion_Sonny_Dodge_O2_Left_And_Home+0x50>
	      Motion_Stop(); osDelay(SETTLE_TIME_MS);
 8004328:	f7ff fdca 	bl	8003ec0 <Motion_Stop>
 800432c:	2364      	movs	r3, #100	@ 0x64
 800432e:	4618      	mov	r0, r3
 8004330:	f007 fbea 	bl	800bb08 <osDelay>
	      Motion_Turn_Angle_Arc(UTURN_ARC_HEADING_DEG, UTURN_ARC_STEER_DEG, UTURN_ARC_PWM_SPEED); //uturn
 8004334:	eddf 7ab3 	vldr	s15, [pc, #716]	@ 8004604 <Motion_Sonny_Dodge_O2_Left_And_Home+0x364>
 8004338:	233c      	movs	r3, #60	@ 0x3c
 800433a:	f640 0234 	movw	r2, #2100	@ 0x834
 800433e:	4611      	mov	r1, r2
 8004340:	4618      	mov	r0, r3
 8004342:	eeb0 0a67 	vmov.f32	s0, s15
 8004346:	f7ff fca5 	bl	8003c94 <Motion_Turn_Angle_Arc>
	      while (Motion_Is_Busy()) { Motion_Process(); osDelay(20); }
 800434a:	e004      	b.n	8004356 <Motion_Sonny_Dodge_O2_Left_And_Home+0xb6>
 800434c:	f7ff f914 	bl	8003578 <Motion_Process>
 8004350:	2014      	movs	r0, #20
 8004352:	f007 fbd9 	bl	800bb08 <osDelay>
 8004356:	f7ff fbff 	bl	8003b58 <Motion_Is_Busy>
 800435a:	4603      	mov	r3, r0
 800435c:	2b00      	cmp	r3, #0
 800435e:	d1f5      	bne.n	800434c <Motion_Sonny_Dodge_O2_Left_And_Home+0xac>
	      osDelay(SETTLE_TIME_MS);
 8004360:	2364      	movs	r3, #100	@ 0x64
 8004362:	4618      	mov	r0, r3
 8004364:	f007 fbd0 	bl	800bb08 <osDelay>
	      Motion_Move_Distance(20.0f); // forward 20 for short ob 2
 8004368:	eeb3 0a04 	vmov.f32	s0, #52	@ 0x41a00000  20.0
 800436c:	f7ff f8a6 	bl	80034bc <Motion_Move_Distance>
	        while (Motion_Is_Busy())
 8004370:	e004      	b.n	800437c <Motion_Sonny_Dodge_O2_Left_And_Home+0xdc>
	        {
	          Motion_Process(); osDelay(20);
 8004372:	f7ff f901 	bl	8003578 <Motion_Process>
 8004376:	2014      	movs	r0, #20
 8004378:	f007 fbc6 	bl	800bb08 <osDelay>
	        while (Motion_Is_Busy())
 800437c:	f7ff fbec 	bl	8003b58 <Motion_Is_Busy>
 8004380:	4603      	mov	r3, r0
 8004382:	2b00      	cmp	r3, #0
 8004384:	d1f5      	bne.n	8004372 <Motion_Sonny_Dodge_O2_Left_And_Home+0xd2>
	        }
	      Motion_Move_Distance(FORWARD_TRAVEL_MAX_CM); //max foward
 8004386:	eddf 7a9c 	vldr	s15, [pc, #624]	@ 80045f8 <Motion_Sonny_Dodge_O2_Left_And_Home+0x358>
 800438a:	eeb0 0a67 	vmov.f32	s0, s15
 800438e:	f7ff f895 	bl	80034bc <Motion_Move_Distance>
	      while (Motion_Is_Busy() && (IR_Right_cm < IR_OBSTACLE_THRESH_CM && IR_Right_cm > 0.0f)) { Motion_Process(); osDelay(20); }
 8004392:	e004      	b.n	800439e <Motion_Sonny_Dodge_O2_Left_And_Home+0xfe>
 8004394:	f7ff f8f0 	bl	8003578 <Motion_Process>
 8004398:	2014      	movs	r0, #20
 800439a:	f007 fbb5 	bl	800bb08 <osDelay>
 800439e:	f7ff fbdb 	bl	8003b58 <Motion_Is_Busy>
 80043a2:	4603      	mov	r3, r0
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d011      	beq.n	80043cc <Motion_Sonny_Dodge_O2_Left_And_Home+0x12c>
 80043a8:	4b94      	ldr	r3, [pc, #592]	@ (80045fc <Motion_Sonny_Dodge_O2_Left_And_Home+0x35c>)
 80043aa:	edd3 7a00 	vldr	s15, [r3]
 80043ae:	ed9f 7a94 	vldr	s14, [pc, #592]	@ 8004600 <Motion_Sonny_Dodge_O2_Left_And_Home+0x360>
 80043b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80043b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043ba:	d507      	bpl.n	80043cc <Motion_Sonny_Dodge_O2_Left_And_Home+0x12c>
 80043bc:	4b8f      	ldr	r3, [pc, #572]	@ (80045fc <Motion_Sonny_Dodge_O2_Left_And_Home+0x35c>)
 80043be:	edd3 7a00 	vldr	s15, [r3]
 80043c2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80043c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043ca:	dce3      	bgt.n	8004394 <Motion_Sonny_Dodge_O2_Left_And_Home+0xf4>
	      Motion_Stop(); osDelay(SETTLE_TIME_MS);
 80043cc:	f7ff fd78 	bl	8003ec0 <Motion_Stop>
 80043d0:	2364      	movs	r3, #100	@ 0x64
 80043d2:	4618      	mov	r0, r3
 80043d4:	f007 fb98 	bl	800bb08 <osDelay>
	      Motion_Turn_Angle_Arc(TURN_90_DEG, NINETY_DEG_ARC_STEER_DEG, NINETY_DEG_ARC_PWM_SPEED); //90 turn
 80043d8:	eddf 7a86 	vldr	s15, [pc, #536]	@ 80045f4 <Motion_Sonny_Dodge_O2_Left_And_Home+0x354>
 80043dc:	233c      	movs	r3, #60	@ 0x3c
 80043de:	f640 0234 	movw	r2, #2100	@ 0x834
 80043e2:	4611      	mov	r1, r2
 80043e4:	4618      	mov	r0, r3
 80043e6:	eeb0 0a67 	vmov.f32	s0, s15
 80043ea:	f7ff fc53 	bl	8003c94 <Motion_Turn_Angle_Arc>
	      while (Motion_Is_Busy()) { Motion_Process(); osDelay(20); }
 80043ee:	e004      	b.n	80043fa <Motion_Sonny_Dodge_O2_Left_And_Home+0x15a>
 80043f0:	f7ff f8c2 	bl	8003578 <Motion_Process>
 80043f4:	2014      	movs	r0, #20
 80043f6:	f007 fb87 	bl	800bb08 <osDelay>
 80043fa:	f7ff fbad 	bl	8003b58 <Motion_Is_Busy>
 80043fe:	4603      	mov	r3, r0
 8004400:	2b00      	cmp	r3, #0
 8004402:	d1f5      	bne.n	80043f0 <Motion_Sonny_Dodge_O2_Left_And_Home+0x150>
	      osDelay(SETTLE_TIME_MS);
 8004404:	2364      	movs	r3, #100	@ 0x64
 8004406:	4618      	mov	r0, r3
 8004408:	f007 fb7e 	bl	800bb08 <osDelay>

	      // === PART 3: Approach & Bypass Obstacle 1 (Return Trip) ===

	      Motion_Move_Distance(30.0f);//avoid ob 2
 800440c:	eeb3 0a0e 	vmov.f32	s0, #62	@ 0x41f00000  30.0
 8004410:	f7ff f854 	bl	80034bc <Motion_Move_Distance>
	      while(Motion_Is_Busy()){
 8004414:	e004      	b.n	8004420 <Motion_Sonny_Dodge_O2_Left_And_Home+0x180>
	    	  Motion_Process(); osDelay(20);
 8004416:	f7ff f8af 	bl	8003578 <Motion_Process>
 800441a:	2014      	movs	r0, #20
 800441c:	f007 fb74 	bl	800bb08 <osDelay>
	      while(Motion_Is_Busy()){
 8004420:	f7ff fb9a 	bl	8003b58 <Motion_Is_Busy>
 8004424:	4603      	mov	r3, r0
 8004426:	2b00      	cmp	r3, #0
 8004428:	d1f5      	bne.n	8004416 <Motion_Sonny_Dodge_O2_Left_And_Home+0x176>
	      }
	      Motion_Stop();
 800442a:	f7ff fd49 	bl	8003ec0 <Motion_Stop>
	      osDelay(SETTLE_TIME_MS);
 800442e:	2364      	movs	r3, #100	@ 0x64
 8004430:	4618      	mov	r0, r3
 8004432:	f007 fb69 	bl	800bb08 <osDelay>

	      Motion_Move_Distance(FORWARD_TRAVEL_MAX_CM); // till ob 1
 8004436:	eddf 7a70 	vldr	s15, [pc, #448]	@ 80045f8 <Motion_Sonny_Dodge_O2_Left_And_Home+0x358>
 800443a:	eeb0 0a67 	vmov.f32	s0, s15
 800443e:	f7ff f83d 	bl	80034bc <Motion_Move_Distance>
	      // Keep moving forward until the RIGHT IR sensor detects the edge of Obstacle 1
	      while (Motion_Is_Busy() && (IR_Right_cm > 79.9f || IR_Right_cm < 0.0f))
 8004442:	e004      	b.n	800444e <Motion_Sonny_Dodge_O2_Left_And_Home+0x1ae>
	      {
	        Motion_Process(); osDelay(20);
 8004444:	f7ff f898 	bl	8003578 <Motion_Process>
 8004448:	2014      	movs	r0, #20
 800444a:	f007 fb5d 	bl	800bb08 <osDelay>
	      while (Motion_Is_Busy() && (IR_Right_cm > 79.9f || IR_Right_cm < 0.0f))
 800444e:	f7ff fb83 	bl	8003b58 <Motion_Is_Busy>
 8004452:	4603      	mov	r3, r0
 8004454:	2b00      	cmp	r3, #0
 8004456:	d011      	beq.n	800447c <Motion_Sonny_Dodge_O2_Left_And_Home+0x1dc>
 8004458:	4b68      	ldr	r3, [pc, #416]	@ (80045fc <Motion_Sonny_Dodge_O2_Left_And_Home+0x35c>)
 800445a:	edd3 7a00 	vldr	s15, [r3]
 800445e:	ed9f 7a6a 	vldr	s14, [pc, #424]	@ 8004608 <Motion_Sonny_Dodge_O2_Left_And_Home+0x368>
 8004462:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004466:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800446a:	dceb      	bgt.n	8004444 <Motion_Sonny_Dodge_O2_Left_And_Home+0x1a4>
 800446c:	4b63      	ldr	r3, [pc, #396]	@ (80045fc <Motion_Sonny_Dodge_O2_Left_And_Home+0x35c>)
 800446e:	edd3 7a00 	vldr	s15, [r3]
 8004472:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004476:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800447a:	d4e3      	bmi.n	8004444 <Motion_Sonny_Dodge_O2_Left_And_Home+0x1a4>
	      }
	      Motion_Stop(); // Stop immediately when the obstacle is detected
 800447c:	f7ff fd20 	bl	8003ec0 <Motion_Stop>
	      Motion_Move_Distance(10.0f);
 8004480:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 8004484:	f7ff f81a 	bl	80034bc <Motion_Move_Distance>
	      while(Motion_Is_Busy()){
 8004488:	e004      	b.n	8004494 <Motion_Sonny_Dodge_O2_Left_And_Home+0x1f4>
	    	  Motion_Process(); osDelay(20);
 800448a:	f7ff f875 	bl	8003578 <Motion_Process>
 800448e:	2014      	movs	r0, #20
 8004490:	f007 fb3a 	bl	800bb08 <osDelay>
	      while(Motion_Is_Busy()){
 8004494:	f7ff fb60 	bl	8003b58 <Motion_Is_Busy>
 8004498:	4603      	mov	r3, r0
 800449a:	2b00      	cmp	r3, #0
 800449c:	d1f5      	bne.n	800448a <Motion_Sonny_Dodge_O2_Left_And_Home+0x1ea>
	      }
	      Motion_Stop();
 800449e:	f7ff fd0f 	bl	8003ec0 <Motion_Stop>
	      osDelay(SETTLE_TIME_MS);
 80044a2:	2364      	movs	r3, #100	@ 0x64
 80044a4:	4618      	mov	r0, r3
 80044a6:	f007 fb2f 	bl	800bb08 <osDelay>
	      Motion_Turn_Angle_Arc(TURN_90_DEG, NINETY_DEG_ARC_STEER_DEG, NINETY_DEG_ARC_PWM_SPEED);
 80044aa:	eddf 7a52 	vldr	s15, [pc, #328]	@ 80045f4 <Motion_Sonny_Dodge_O2_Left_And_Home+0x354>
 80044ae:	233c      	movs	r3, #60	@ 0x3c
 80044b0:	f640 0234 	movw	r2, #2100	@ 0x834
 80044b4:	4611      	mov	r1, r2
 80044b6:	4618      	mov	r0, r3
 80044b8:	eeb0 0a67 	vmov.f32	s0, s15
 80044bc:	f7ff fbea 	bl	8003c94 <Motion_Turn_Angle_Arc>
	      while (Motion_Is_Busy()) { Motion_Process(); osDelay(20); }
 80044c0:	e004      	b.n	80044cc <Motion_Sonny_Dodge_O2_Left_And_Home+0x22c>
 80044c2:	f7ff f859 	bl	8003578 <Motion_Process>
 80044c6:	2014      	movs	r0, #20
 80044c8:	f007 fb1e 	bl	800bb08 <osDelay>
 80044cc:	f7ff fb44 	bl	8003b58 <Motion_Is_Busy>
 80044d0:	4603      	mov	r3, r0
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d1f5      	bne.n	80044c2 <Motion_Sonny_Dodge_O2_Left_And_Home+0x222>
	      osDelay(SETTLE_TIME_MS);
 80044d6:	2364      	movs	r3, #100	@ 0x64
 80044d8:	4618      	mov	r0, r3
 80044da:	f007 fb15 	bl	800bb08 <osDelay>
	      Motion_Move_Distance(-25.0f);
 80044de:	eebb 0a09 	vmov.f32	s0, #185	@ 0xc1c80000 -25.0
 80044e2:	f7fe ffeb 	bl	80034bc <Motion_Move_Distance>
	    	      while(Motion_Is_Busy()){
 80044e6:	e004      	b.n	80044f2 <Motion_Sonny_Dodge_O2_Left_And_Home+0x252>
	    	    	  Motion_Process(); osDelay(20);
 80044e8:	f7ff f846 	bl	8003578 <Motion_Process>
 80044ec:	2014      	movs	r0, #20
 80044ee:	f007 fb0b 	bl	800bb08 <osDelay>
	    	      while(Motion_Is_Busy()){
 80044f2:	f7ff fb31 	bl	8003b58 <Motion_Is_Busy>
 80044f6:	4603      	mov	r3, r0
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d1f5      	bne.n	80044e8 <Motion_Sonny_Dodge_O2_Left_And_Home+0x248>
	    	      }
	      Motion_Stop();
 80044fc:	f7ff fce0 	bl	8003ec0 <Motion_Stop>
	      osDelay(SETTLE_TIME_MS);
 8004500:	2364      	movs	r3, #100	@ 0x64
 8004502:	4618      	mov	r0, r3
 8004504:	f007 fb00 	bl	800bb08 <osDelay>
	      Motion_Move_Distance(FORWARD_TRAVEL_MAX_CM); //max forward
 8004508:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 80045f8 <Motion_Sonny_Dodge_O2_Left_And_Home+0x358>
 800450c:	eeb0 0a67 	vmov.f32	s0, s15
 8004510:	f7fe ffd4 	bl	80034bc <Motion_Move_Distance>
	      while (Motion_Is_Busy() && (IR_Right_cm > 30.0f || IR_Right_cm < 0.0f))
 8004514:	e004      	b.n	8004520 <Motion_Sonny_Dodge_O2_Left_And_Home+0x280>
	      {
	        Motion_Process(); osDelay(20);
 8004516:	f7ff f82f 	bl	8003578 <Motion_Process>
 800451a:	2014      	movs	r0, #20
 800451c:	f007 faf4 	bl	800bb08 <osDelay>
	      while (Motion_Is_Busy() && (IR_Right_cm > 30.0f || IR_Right_cm < 0.0f))
 8004520:	f7ff fb1a 	bl	8003b58 <Motion_Is_Busy>
 8004524:	4603      	mov	r3, r0
 8004526:	2b00      	cmp	r3, #0
 8004528:	d011      	beq.n	800454e <Motion_Sonny_Dodge_O2_Left_And_Home+0x2ae>
 800452a:	4b34      	ldr	r3, [pc, #208]	@ (80045fc <Motion_Sonny_Dodge_O2_Left_And_Home+0x35c>)
 800452c:	edd3 7a00 	vldr	s15, [r3]
 8004530:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8004534:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004538:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800453c:	dceb      	bgt.n	8004516 <Motion_Sonny_Dodge_O2_Left_And_Home+0x276>
 800453e:	4b2f      	ldr	r3, [pc, #188]	@ (80045fc <Motion_Sonny_Dodge_O2_Left_And_Home+0x35c>)
 8004540:	edd3 7a00 	vldr	s15, [r3]
 8004544:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004548:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800454c:	d4e3      	bmi.n	8004516 <Motion_Sonny_Dodge_O2_Left_And_Home+0x276>
	      }
	      Motion_Stop();
 800454e:	f7ff fcb7 	bl	8003ec0 <Motion_Stop>
	      Motion_Move_Distance(-20.0f);
 8004552:	eebb 0a04 	vmov.f32	s0, #180	@ 0xc1a00000 -20.0
 8004556:	f7fe ffb1 	bl	80034bc <Motion_Move_Distance>
	    	      while(Motion_Is_Busy()){
 800455a:	e004      	b.n	8004566 <Motion_Sonny_Dodge_O2_Left_And_Home+0x2c6>
	    	    	  Motion_Process(); osDelay(20);
 800455c:	f7ff f80c 	bl	8003578 <Motion_Process>
 8004560:	2014      	movs	r0, #20
 8004562:	f007 fad1 	bl	800bb08 <osDelay>
	    	      while(Motion_Is_Busy()){
 8004566:	f7ff faf7 	bl	8003b58 <Motion_Is_Busy>
 800456a:	4603      	mov	r3, r0
 800456c:	2b00      	cmp	r3, #0
 800456e:	d1f5      	bne.n	800455c <Motion_Sonny_Dodge_O2_Left_And_Home+0x2bc>
	    	      }
	      Motion_Turn_Angle_Arc(-90.0f, NINETY_DEG_ARC_STEER_DEG, NINETY_DEG_ARC_PWM_SPEED);
 8004570:	233c      	movs	r3, #60	@ 0x3c
 8004572:	f640 0234 	movw	r2, #2100	@ 0x834
 8004576:	4611      	mov	r1, r2
 8004578:	4618      	mov	r0, r3
 800457a:	ed9f 0a24 	vldr	s0, [pc, #144]	@ 800460c <Motion_Sonny_Dodge_O2_Left_And_Home+0x36c>
 800457e:	f7ff fb89 	bl	8003c94 <Motion_Turn_Angle_Arc>
	      while(Motion_Is_Busy()){
 8004582:	e004      	b.n	800458e <Motion_Sonny_Dodge_O2_Left_And_Home+0x2ee>
	    	  Motion_Process(); osDelay(20);
 8004584:	f7fe fff8 	bl	8003578 <Motion_Process>
 8004588:	2014      	movs	r0, #20
 800458a:	f007 fabd 	bl	800bb08 <osDelay>
	      while(Motion_Is_Busy()){
 800458e:	f7ff fae3 	bl	8003b58 <Motion_Is_Busy>
 8004592:	4603      	mov	r3, r0
 8004594:	2b00      	cmp	r3, #0
 8004596:	d1f5      	bne.n	8004584 <Motion_Sonny_Dodge_O2_Left_And_Home+0x2e4>
	      }

	      Motion_Move_Distance(FORWARD_TRAVEL_MAX_CM);
 8004598:	eddf 7a17 	vldr	s15, [pc, #92]	@ 80045f8 <Motion_Sonny_Dodge_O2_Left_And_Home+0x358>
 800459c:	eeb0 0a67 	vmov.f32	s0, s15
 80045a0:	f7fe ff8c 	bl	80034bc <Motion_Move_Distance>

	             while (Motion_Is_Busy() && (Front_Distance_cm > PARK_DISTANCE_CM || Front_Distance_cm < 0.0f))
 80045a4:	e004      	b.n	80045b0 <Motion_Sonny_Dodge_O2_Left_And_Home+0x310>
	                   {
	                    Motion_Process(); osDelay(20);
 80045a6:	f7fe ffe7 	bl	8003578 <Motion_Process>
 80045aa:	2014      	movs	r0, #20
 80045ac:	f007 faac 	bl	800bb08 <osDelay>
	             while (Motion_Is_Busy() && (Front_Distance_cm > PARK_DISTANCE_CM || Front_Distance_cm < 0.0f))
 80045b0:	f7ff fad2 	bl	8003b58 <Motion_Is_Busy>
 80045b4:	4603      	mov	r3, r0
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d011      	beq.n	80045de <Motion_Sonny_Dodge_O2_Left_And_Home+0x33e>
 80045ba:	4b15      	ldr	r3, [pc, #84]	@ (8004610 <Motion_Sonny_Dodge_O2_Left_And_Home+0x370>)
 80045bc:	edd3 7a00 	vldr	s15, [r3]
 80045c0:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 80045c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80045c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045cc:	dceb      	bgt.n	80045a6 <Motion_Sonny_Dodge_O2_Left_And_Home+0x306>
 80045ce:	4b10      	ldr	r3, [pc, #64]	@ (8004610 <Motion_Sonny_Dodge_O2_Left_And_Home+0x370>)
 80045d0:	edd3 7a00 	vldr	s15, [r3]
 80045d4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80045d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045dc:	d4e3      	bmi.n	80045a6 <Motion_Sonny_Dodge_O2_Left_And_Home+0x306>
	                    }
	      Motion_Stop(); osDelay(SETTLE_TIME_MS);
 80045de:	f7ff fc6f 	bl	8003ec0 <Motion_Stop>
 80045e2:	2364      	movs	r3, #100	@ 0x64
 80045e4:	4618      	mov	r0, r3
 80045e6:	f007 fa8f 	bl	800bb08 <osDelay>


}
 80045ea:	bf00      	nop
 80045ec:	3708      	adds	r7, #8
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}
 80045f2:	bf00      	nop
 80045f4:	42b40000 	.word	0x42b40000
 80045f8:	43fa0000 	.word	0x43fa0000
 80045fc:	20000270 	.word	0x20000270
 8004600:	42340000 	.word	0x42340000
 8004604:	4333e666 	.word	0x4333e666
 8004608:	429fcccd 	.word	0x429fcccd
 800460c:	c2b40000 	.word	0xc2b40000
 8004610:	20000278 	.word	0x20000278

08004614 <Motion_Sonny_Dodge_O2_Right_And_Home>:

void Motion_Sonny_Dodge_O2_Right_And_Home(float initial_ultrasound_distance){
 8004614:	b580      	push	{r7, lr}
 8004616:	b082      	sub	sp, #8
 8004618:	af00      	add	r7, sp, #0
 800461a:	ed87 0a01 	vstr	s0, [r7, #4]
	// === PART 2: U-Turn Maneuver around Obstacle 2 ===



	      // (U-Turn logic is unchanged as it was correct)
	      Motion_Turn_Angle_Arc(TURN_90_DEG, NINETY_DEG_ARC_STEER_DEG, NINETY_DEG_ARC_PWM_SPEED);
 800461e:	eddf 7ad4 	vldr	s15, [pc, #848]	@ 8004970 <Motion_Sonny_Dodge_O2_Right_And_Home+0x35c>
 8004622:	233c      	movs	r3, #60	@ 0x3c
 8004624:	f640 0234 	movw	r2, #2100	@ 0x834
 8004628:	4611      	mov	r1, r2
 800462a:	4618      	mov	r0, r3
 800462c:	eeb0 0a67 	vmov.f32	s0, s15
 8004630:	f7ff fb30 	bl	8003c94 <Motion_Turn_Angle_Arc>
	      while (Motion_Is_Busy()) { Motion_Process(); osDelay(20); }
 8004634:	e004      	b.n	8004640 <Motion_Sonny_Dodge_O2_Right_And_Home+0x2c>
 8004636:	f7fe ff9f 	bl	8003578 <Motion_Process>
 800463a:	2014      	movs	r0, #20
 800463c:	f007 fa64 	bl	800bb08 <osDelay>
 8004640:	f7ff fa8a 	bl	8003b58 <Motion_Is_Busy>
 8004644:	4603      	mov	r3, r0
 8004646:	2b00      	cmp	r3, #0
 8004648:	d1f5      	bne.n	8004636 <Motion_Sonny_Dodge_O2_Right_And_Home+0x22>
	      osDelay(SETTLE_TIME_MS);
 800464a:	2364      	movs	r3, #100	@ 0x64
 800464c:	4618      	mov	r0, r3
 800464e:	f007 fa5b 	bl	800bb08 <osDelay>

	      Motion_Move_Distance(FORWARD_TRAVEL_MAX_CM);
 8004652:	eddf 7ac8 	vldr	s15, [pc, #800]	@ 8004974 <Motion_Sonny_Dodge_O2_Right_And_Home+0x360>
 8004656:	eeb0 0a67 	vmov.f32	s0, s15
 800465a:	f7fe ff2f 	bl	80034bc <Motion_Move_Distance>
	      while (Motion_Is_Busy() && (IR_Left_cm < IR_OBSTACLE_THRESH_CM && IR_Left_cm > 0.0f)) { Motion_Process(); osDelay(20); }
 800465e:	e004      	b.n	800466a <Motion_Sonny_Dodge_O2_Right_And_Home+0x56>
 8004660:	f7fe ff8a 	bl	8003578 <Motion_Process>
 8004664:	2014      	movs	r0, #20
 8004666:	f007 fa4f 	bl	800bb08 <osDelay>
 800466a:	f7ff fa75 	bl	8003b58 <Motion_Is_Busy>
 800466e:	4603      	mov	r3, r0
 8004670:	2b00      	cmp	r3, #0
 8004672:	d011      	beq.n	8004698 <Motion_Sonny_Dodge_O2_Right_And_Home+0x84>
 8004674:	4bc0      	ldr	r3, [pc, #768]	@ (8004978 <Motion_Sonny_Dodge_O2_Right_And_Home+0x364>)
 8004676:	edd3 7a00 	vldr	s15, [r3]
 800467a:	ed9f 7ac0 	vldr	s14, [pc, #768]	@ 800497c <Motion_Sonny_Dodge_O2_Right_And_Home+0x368>
 800467e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004682:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004686:	d507      	bpl.n	8004698 <Motion_Sonny_Dodge_O2_Right_And_Home+0x84>
 8004688:	4bbb      	ldr	r3, [pc, #748]	@ (8004978 <Motion_Sonny_Dodge_O2_Right_And_Home+0x364>)
 800468a:	edd3 7a00 	vldr	s15, [r3]
 800468e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004692:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004696:	dce3      	bgt.n	8004660 <Motion_Sonny_Dodge_O2_Right_And_Home+0x4c>
	      Motion_Stop(); osDelay(SETTLE_TIME_MS);
 8004698:	f7ff fc12 	bl	8003ec0 <Motion_Stop>
 800469c:	2364      	movs	r3, #100	@ 0x64
 800469e:	4618      	mov	r0, r3
 80046a0:	f007 fa32 	bl	800bb08 <osDelay>
	      Motion_Turn_Angle_Arc(-UTURN_ARC_HEADING_DEG, UTURN_ARC_STEER_DEG, UTURN_ARC_PWM_SPEED);
 80046a4:	eddf 7ab6 	vldr	s15, [pc, #728]	@ 8004980 <Motion_Sonny_Dodge_O2_Right_And_Home+0x36c>
 80046a8:	eef1 7a67 	vneg.f32	s15, s15
 80046ac:	233c      	movs	r3, #60	@ 0x3c
 80046ae:	f640 0234 	movw	r2, #2100	@ 0x834
 80046b2:	4611      	mov	r1, r2
 80046b4:	4618      	mov	r0, r3
 80046b6:	eeb0 0a67 	vmov.f32	s0, s15
 80046ba:	f7ff faeb 	bl	8003c94 <Motion_Turn_Angle_Arc>
	      while (Motion_Is_Busy()) { Motion_Process(); osDelay(20); }
 80046be:	e004      	b.n	80046ca <Motion_Sonny_Dodge_O2_Right_And_Home+0xb6>
 80046c0:	f7fe ff5a 	bl	8003578 <Motion_Process>
 80046c4:	2014      	movs	r0, #20
 80046c6:	f007 fa1f 	bl	800bb08 <osDelay>
 80046ca:	f7ff fa45 	bl	8003b58 <Motion_Is_Busy>
 80046ce:	4603      	mov	r3, r0
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d1f5      	bne.n	80046c0 <Motion_Sonny_Dodge_O2_Right_And_Home+0xac>
	      osDelay(SETTLE_TIME_MS);
 80046d4:	2364      	movs	r3, #100	@ 0x64
 80046d6:	4618      	mov	r0, r3
 80046d8:	f007 fa16 	bl	800bb08 <osDelay>
	      Motion_Move_Distance(20.0f); // forward 20 for short ob 2
 80046dc:	eeb3 0a04 	vmov.f32	s0, #52	@ 0x41a00000  20.0
 80046e0:	f7fe feec 	bl	80034bc <Motion_Move_Distance>
	        while (Motion_Is_Busy())
 80046e4:	e004      	b.n	80046f0 <Motion_Sonny_Dodge_O2_Right_And_Home+0xdc>
	        {
	          Motion_Process(); osDelay(20);
 80046e6:	f7fe ff47 	bl	8003578 <Motion_Process>
 80046ea:	2014      	movs	r0, #20
 80046ec:	f007 fa0c 	bl	800bb08 <osDelay>
	        while (Motion_Is_Busy())
 80046f0:	f7ff fa32 	bl	8003b58 <Motion_Is_Busy>
 80046f4:	4603      	mov	r3, r0
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d1f5      	bne.n	80046e6 <Motion_Sonny_Dodge_O2_Right_And_Home+0xd2>
	        }
	      Motion_Move_Distance(FORWARD_TRAVEL_MAX_CM);
 80046fa:	eddf 7a9e 	vldr	s15, [pc, #632]	@ 8004974 <Motion_Sonny_Dodge_O2_Right_And_Home+0x360>
 80046fe:	eeb0 0a67 	vmov.f32	s0, s15
 8004702:	f7fe fedb 	bl	80034bc <Motion_Move_Distance>
	      while (Motion_Is_Busy() && (IR_Left_cm < IR_OBSTACLE_THRESH_CM && IR_Left_cm > 0.0f)) { Motion_Process(); osDelay(20); }
 8004706:	e004      	b.n	8004712 <Motion_Sonny_Dodge_O2_Right_And_Home+0xfe>
 8004708:	f7fe ff36 	bl	8003578 <Motion_Process>
 800470c:	2014      	movs	r0, #20
 800470e:	f007 f9fb 	bl	800bb08 <osDelay>
 8004712:	f7ff fa21 	bl	8003b58 <Motion_Is_Busy>
 8004716:	4603      	mov	r3, r0
 8004718:	2b00      	cmp	r3, #0
 800471a:	d011      	beq.n	8004740 <Motion_Sonny_Dodge_O2_Right_And_Home+0x12c>
 800471c:	4b96      	ldr	r3, [pc, #600]	@ (8004978 <Motion_Sonny_Dodge_O2_Right_And_Home+0x364>)
 800471e:	edd3 7a00 	vldr	s15, [r3]
 8004722:	ed9f 7a96 	vldr	s14, [pc, #600]	@ 800497c <Motion_Sonny_Dodge_O2_Right_And_Home+0x368>
 8004726:	eef4 7ac7 	vcmpe.f32	s15, s14
 800472a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800472e:	d507      	bpl.n	8004740 <Motion_Sonny_Dodge_O2_Right_And_Home+0x12c>
 8004730:	4b91      	ldr	r3, [pc, #580]	@ (8004978 <Motion_Sonny_Dodge_O2_Right_And_Home+0x364>)
 8004732:	edd3 7a00 	vldr	s15, [r3]
 8004736:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800473a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800473e:	dce3      	bgt.n	8004708 <Motion_Sonny_Dodge_O2_Right_And_Home+0xf4>
	      Motion_Stop(); osDelay(SETTLE_TIME_MS);
 8004740:	f7ff fbbe 	bl	8003ec0 <Motion_Stop>
 8004744:	2364      	movs	r3, #100	@ 0x64
 8004746:	4618      	mov	r0, r3
 8004748:	f007 f9de 	bl	800bb08 <osDelay>
	      Motion_Turn_Angle_Arc(-TURN_90_DEG, NINETY_DEG_ARC_STEER_DEG, NINETY_DEG_ARC_PWM_SPEED);
 800474c:	eddf 7a88 	vldr	s15, [pc, #544]	@ 8004970 <Motion_Sonny_Dodge_O2_Right_And_Home+0x35c>
 8004750:	eef1 7a67 	vneg.f32	s15, s15
 8004754:	233c      	movs	r3, #60	@ 0x3c
 8004756:	f640 0234 	movw	r2, #2100	@ 0x834
 800475a:	4611      	mov	r1, r2
 800475c:	4618      	mov	r0, r3
 800475e:	eeb0 0a67 	vmov.f32	s0, s15
 8004762:	f7ff fa97 	bl	8003c94 <Motion_Turn_Angle_Arc>
	      while (Motion_Is_Busy()) { Motion_Process(); osDelay(20); }
 8004766:	e004      	b.n	8004772 <Motion_Sonny_Dodge_O2_Right_And_Home+0x15e>
 8004768:	f7fe ff06 	bl	8003578 <Motion_Process>
 800476c:	2014      	movs	r0, #20
 800476e:	f007 f9cb 	bl	800bb08 <osDelay>
 8004772:	f7ff f9f1 	bl	8003b58 <Motion_Is_Busy>
 8004776:	4603      	mov	r3, r0
 8004778:	2b00      	cmp	r3, #0
 800477a:	d1f5      	bne.n	8004768 <Motion_Sonny_Dodge_O2_Right_And_Home+0x154>
	      osDelay(SETTLE_TIME_MS);
 800477c:	2364      	movs	r3, #100	@ 0x64
 800477e:	4618      	mov	r0, r3
 8004780:	f007 f9c2 	bl	800bb08 <osDelay>

	      // === PART 3: Approach & Bypass Obstacle 1 (Return Trip) ===

	      Motion_Move_Distance(30.0f);//avoid ob 2
 8004784:	eeb3 0a0e 	vmov.f32	s0, #62	@ 0x41f00000  30.0
 8004788:	f7fe fe98 	bl	80034bc <Motion_Move_Distance>
	      while(Motion_Is_Busy()){
 800478c:	e004      	b.n	8004798 <Motion_Sonny_Dodge_O2_Right_And_Home+0x184>
	    	  Motion_Process(); osDelay(20);
 800478e:	f7fe fef3 	bl	8003578 <Motion_Process>
 8004792:	2014      	movs	r0, #20
 8004794:	f007 f9b8 	bl	800bb08 <osDelay>
	      while(Motion_Is_Busy()){
 8004798:	f7ff f9de 	bl	8003b58 <Motion_Is_Busy>
 800479c:	4603      	mov	r3, r0
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d1f5      	bne.n	800478e <Motion_Sonny_Dodge_O2_Right_And_Home+0x17a>
	      }
	      Motion_Stop();
 80047a2:	f7ff fb8d 	bl	8003ec0 <Motion_Stop>
	      osDelay(SETTLE_TIME_MS);
 80047a6:	2364      	movs	r3, #100	@ 0x64
 80047a8:	4618      	mov	r0, r3
 80047aa:	f007 f9ad 	bl	800bb08 <osDelay>

	      Motion_Move_Distance(FORWARD_TRAVEL_MAX_CM);
 80047ae:	eddf 7a71 	vldr	s15, [pc, #452]	@ 8004974 <Motion_Sonny_Dodge_O2_Right_And_Home+0x360>
 80047b2:	eeb0 0a67 	vmov.f32	s0, s15
 80047b6:	f7fe fe81 	bl	80034bc <Motion_Move_Distance>
	      // Keep moving forward until the LEFT IR sensor detects the edge of Obstacle 1
	      while (Motion_Is_Busy() && (IR_Left_cm > 79.9f || IR_Left_cm < 0.0f))
 80047ba:	e004      	b.n	80047c6 <Motion_Sonny_Dodge_O2_Right_And_Home+0x1b2>
	      {
	        Motion_Process(); osDelay(20);
 80047bc:	f7fe fedc 	bl	8003578 <Motion_Process>
 80047c0:	2014      	movs	r0, #20
 80047c2:	f007 f9a1 	bl	800bb08 <osDelay>
	      while (Motion_Is_Busy() && (IR_Left_cm > 79.9f || IR_Left_cm < 0.0f))
 80047c6:	f7ff f9c7 	bl	8003b58 <Motion_Is_Busy>
 80047ca:	4603      	mov	r3, r0
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d011      	beq.n	80047f4 <Motion_Sonny_Dodge_O2_Right_And_Home+0x1e0>
 80047d0:	4b69      	ldr	r3, [pc, #420]	@ (8004978 <Motion_Sonny_Dodge_O2_Right_And_Home+0x364>)
 80047d2:	edd3 7a00 	vldr	s15, [r3]
 80047d6:	ed9f 7a6b 	vldr	s14, [pc, #428]	@ 8004984 <Motion_Sonny_Dodge_O2_Right_And_Home+0x370>
 80047da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80047de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047e2:	dceb      	bgt.n	80047bc <Motion_Sonny_Dodge_O2_Right_And_Home+0x1a8>
 80047e4:	4b64      	ldr	r3, [pc, #400]	@ (8004978 <Motion_Sonny_Dodge_O2_Right_And_Home+0x364>)
 80047e6:	edd3 7a00 	vldr	s15, [r3]
 80047ea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80047ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047f2:	d4e3      	bmi.n	80047bc <Motion_Sonny_Dodge_O2_Right_And_Home+0x1a8>
	      }
	      Motion_Stop(); // Stop immediately when the obstacle is detected
 80047f4:	f7ff fb64 	bl	8003ec0 <Motion_Stop>


	      Motion_Move_Distance(10.0f);
 80047f8:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 80047fc:	f7fe fe5e 	bl	80034bc <Motion_Move_Distance>
	      while(Motion_Is_Busy()){
 8004800:	e004      	b.n	800480c <Motion_Sonny_Dodge_O2_Right_And_Home+0x1f8>
	    	  Motion_Process(); osDelay(20);
 8004802:	f7fe feb9 	bl	8003578 <Motion_Process>
 8004806:	2014      	movs	r0, #20
 8004808:	f007 f97e 	bl	800bb08 <osDelay>
	      while(Motion_Is_Busy()){
 800480c:	f7ff f9a4 	bl	8003b58 <Motion_Is_Busy>
 8004810:	4603      	mov	r3, r0
 8004812:	2b00      	cmp	r3, #0
 8004814:	d1f5      	bne.n	8004802 <Motion_Sonny_Dodge_O2_Right_And_Home+0x1ee>
	      }
	      Motion_Stop();
 8004816:	f7ff fb53 	bl	8003ec0 <Motion_Stop>
	      osDelay(SETTLE_TIME_MS);
 800481a:	2364      	movs	r3, #100	@ 0x64
 800481c:	4618      	mov	r0, r3
 800481e:	f007 f973 	bl	800bb08 <osDelay>
	      Motion_Turn_Angle_Arc(-TURN_90_DEG, NINETY_DEG_ARC_STEER_DEG, NINETY_DEG_ARC_PWM_SPEED);
 8004822:	eddf 7a53 	vldr	s15, [pc, #332]	@ 8004970 <Motion_Sonny_Dodge_O2_Right_And_Home+0x35c>
 8004826:	eef1 7a67 	vneg.f32	s15, s15
 800482a:	233c      	movs	r3, #60	@ 0x3c
 800482c:	f640 0234 	movw	r2, #2100	@ 0x834
 8004830:	4611      	mov	r1, r2
 8004832:	4618      	mov	r0, r3
 8004834:	eeb0 0a67 	vmov.f32	s0, s15
 8004838:	f7ff fa2c 	bl	8003c94 <Motion_Turn_Angle_Arc>
	      while (Motion_Is_Busy()) { Motion_Process(); osDelay(20); }
 800483c:	e004      	b.n	8004848 <Motion_Sonny_Dodge_O2_Right_And_Home+0x234>
 800483e:	f7fe fe9b 	bl	8003578 <Motion_Process>
 8004842:	2014      	movs	r0, #20
 8004844:	f007 f960 	bl	800bb08 <osDelay>
 8004848:	f7ff f986 	bl	8003b58 <Motion_Is_Busy>
 800484c:	4603      	mov	r3, r0
 800484e:	2b00      	cmp	r3, #0
 8004850:	d1f5      	bne.n	800483e <Motion_Sonny_Dodge_O2_Right_And_Home+0x22a>
	      osDelay(SETTLE_TIME_MS);
 8004852:	2364      	movs	r3, #100	@ 0x64
 8004854:	4618      	mov	r0, r3
 8004856:	f007 f957 	bl	800bb08 <osDelay>
	      Motion_Move_Distance(-25.0f);
 800485a:	eebb 0a09 	vmov.f32	s0, #185	@ 0xc1c80000 -25.0
 800485e:	f7fe fe2d 	bl	80034bc <Motion_Move_Distance>
	    	      while(Motion_Is_Busy()){
 8004862:	e004      	b.n	800486e <Motion_Sonny_Dodge_O2_Right_And_Home+0x25a>
	    	    	  Motion_Process(); osDelay(20);
 8004864:	f7fe fe88 	bl	8003578 <Motion_Process>
 8004868:	2014      	movs	r0, #20
 800486a:	f007 f94d 	bl	800bb08 <osDelay>
	    	      while(Motion_Is_Busy()){
 800486e:	f7ff f973 	bl	8003b58 <Motion_Is_Busy>
 8004872:	4603      	mov	r3, r0
 8004874:	2b00      	cmp	r3, #0
 8004876:	d1f5      	bne.n	8004864 <Motion_Sonny_Dodge_O2_Right_And_Home+0x250>
	    	      }
	    	      Motion_Stop();
 8004878:	f7ff fb22 	bl	8003ec0 <Motion_Stop>
	    	      osDelay(SETTLE_TIME_MS);
 800487c:	2364      	movs	r3, #100	@ 0x64
 800487e:	4618      	mov	r0, r3
 8004880:	f007 f942 	bl	800bb08 <osDelay>
	      Motion_Move_Distance(FORWARD_TRAVEL_MAX_CM);
 8004884:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 8004974 <Motion_Sonny_Dodge_O2_Right_And_Home+0x360>
 8004888:	eeb0 0a67 	vmov.f32	s0, s15
 800488c:	f7fe fe16 	bl	80034bc <Motion_Move_Distance>
	    	      // Keep moving forward until the LEFT IR sensor detects the edge of Obstacle 1
	    	      while (Motion_Is_Busy() && (IR_Left_cm > 30.0f || IR_Left_cm < 0.0f))
 8004890:	e004      	b.n	800489c <Motion_Sonny_Dodge_O2_Right_And_Home+0x288>
	    	      {
	    	        Motion_Process(); osDelay(20);
 8004892:	f7fe fe71 	bl	8003578 <Motion_Process>
 8004896:	2014      	movs	r0, #20
 8004898:	f007 f936 	bl	800bb08 <osDelay>
	    	      while (Motion_Is_Busy() && (IR_Left_cm > 30.0f || IR_Left_cm < 0.0f))
 800489c:	f7ff f95c 	bl	8003b58 <Motion_Is_Busy>
 80048a0:	4603      	mov	r3, r0
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d011      	beq.n	80048ca <Motion_Sonny_Dodge_O2_Right_And_Home+0x2b6>
 80048a6:	4b34      	ldr	r3, [pc, #208]	@ (8004978 <Motion_Sonny_Dodge_O2_Right_And_Home+0x364>)
 80048a8:	edd3 7a00 	vldr	s15, [r3]
 80048ac:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 80048b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80048b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048b8:	dceb      	bgt.n	8004892 <Motion_Sonny_Dodge_O2_Right_And_Home+0x27e>
 80048ba:	4b2f      	ldr	r3, [pc, #188]	@ (8004978 <Motion_Sonny_Dodge_O2_Right_And_Home+0x364>)
 80048bc:	edd3 7a00 	vldr	s15, [r3]
 80048c0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80048c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048c8:	d4e3      	bmi.n	8004892 <Motion_Sonny_Dodge_O2_Right_And_Home+0x27e>
	    	      }
	    	      Motion_Stop();
 80048ca:	f7ff faf9 	bl	8003ec0 <Motion_Stop>
	      Motion_Move_Distance(-20.0f);
 80048ce:	eebb 0a04 	vmov.f32	s0, #180	@ 0xc1a00000 -20.0
 80048d2:	f7fe fdf3 	bl	80034bc <Motion_Move_Distance>
	    	      while(Motion_Is_Busy()){
 80048d6:	e004      	b.n	80048e2 <Motion_Sonny_Dodge_O2_Right_And_Home+0x2ce>
	    	    	  Motion_Process(); osDelay(20);
 80048d8:	f7fe fe4e 	bl	8003578 <Motion_Process>
 80048dc:	2014      	movs	r0, #20
 80048de:	f007 f913 	bl	800bb08 <osDelay>
	    	      while(Motion_Is_Busy()){
 80048e2:	f7ff f939 	bl	8003b58 <Motion_Is_Busy>
 80048e6:	4603      	mov	r3, r0
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d1f5      	bne.n	80048d8 <Motion_Sonny_Dodge_O2_Right_And_Home+0x2c4>
	    	      }
	      Motion_Turn_Angle_Arc(90.0f, NINETY_DEG_ARC_STEER_DEG, NINETY_DEG_ARC_PWM_SPEED);
 80048ec:	233c      	movs	r3, #60	@ 0x3c
 80048ee:	f640 0234 	movw	r2, #2100	@ 0x834
 80048f2:	4611      	mov	r1, r2
 80048f4:	4618      	mov	r0, r3
 80048f6:	ed9f 0a1e 	vldr	s0, [pc, #120]	@ 8004970 <Motion_Sonny_Dodge_O2_Right_And_Home+0x35c>
 80048fa:	f7ff f9cb 	bl	8003c94 <Motion_Turn_Angle_Arc>
	      while(Motion_Is_Busy()){
 80048fe:	e004      	b.n	800490a <Motion_Sonny_Dodge_O2_Right_And_Home+0x2f6>
	    	  Motion_Process(); osDelay(20);
 8004900:	f7fe fe3a 	bl	8003578 <Motion_Process>
 8004904:	2014      	movs	r0, #20
 8004906:	f007 f8ff 	bl	800bb08 <osDelay>
	      while(Motion_Is_Busy()){
 800490a:	f7ff f925 	bl	8003b58 <Motion_Is_Busy>
 800490e:	4603      	mov	r3, r0
 8004910:	2b00      	cmp	r3, #0
 8004912:	d1f5      	bne.n	8004900 <Motion_Sonny_Dodge_O2_Right_And_Home+0x2ec>
	      }
	      Motion_Move_Distance(FORWARD_TRAVEL_MAX_CM);
 8004914:	eddf 7a17 	vldr	s15, [pc, #92]	@ 8004974 <Motion_Sonny_Dodge_O2_Right_And_Home+0x360>
 8004918:	eeb0 0a67 	vmov.f32	s0, s15
 800491c:	f7fe fdce 	bl	80034bc <Motion_Move_Distance>

	             while (Motion_Is_Busy() && (Front_Distance_cm > PARK_DISTANCE_CM || Front_Distance_cm < 0.0f))
 8004920:	e004      	b.n	800492c <Motion_Sonny_Dodge_O2_Right_And_Home+0x318>
	                   {
	                    Motion_Process(); osDelay(20);
 8004922:	f7fe fe29 	bl	8003578 <Motion_Process>
 8004926:	2014      	movs	r0, #20
 8004928:	f007 f8ee 	bl	800bb08 <osDelay>
	             while (Motion_Is_Busy() && (Front_Distance_cm > PARK_DISTANCE_CM || Front_Distance_cm < 0.0f))
 800492c:	f7ff f914 	bl	8003b58 <Motion_Is_Busy>
 8004930:	4603      	mov	r3, r0
 8004932:	2b00      	cmp	r3, #0
 8004934:	d011      	beq.n	800495a <Motion_Sonny_Dodge_O2_Right_And_Home+0x346>
 8004936:	4b14      	ldr	r3, [pc, #80]	@ (8004988 <Motion_Sonny_Dodge_O2_Right_And_Home+0x374>)
 8004938:	edd3 7a00 	vldr	s15, [r3]
 800493c:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8004940:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004944:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004948:	dceb      	bgt.n	8004922 <Motion_Sonny_Dodge_O2_Right_And_Home+0x30e>
 800494a:	4b0f      	ldr	r3, [pc, #60]	@ (8004988 <Motion_Sonny_Dodge_O2_Right_And_Home+0x374>)
 800494c:	edd3 7a00 	vldr	s15, [r3]
 8004950:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004954:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004958:	d4e3      	bmi.n	8004922 <Motion_Sonny_Dodge_O2_Right_And_Home+0x30e>
	                    }
	      Motion_Stop(); osDelay(SETTLE_TIME_MS);
 800495a:	f7ff fab1 	bl	8003ec0 <Motion_Stop>
 800495e:	2364      	movs	r3, #100	@ 0x64
 8004960:	4618      	mov	r0, r3
 8004962:	f007 f8d1 	bl	800bb08 <osDelay>

}
 8004966:	bf00      	nop
 8004968:	3708      	adds	r7, #8
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}
 800496e:	bf00      	nop
 8004970:	42b40000 	.word	0x42b40000
 8004974:	43fa0000 	.word	0x43fa0000
 8004978:	2000026c 	.word	0x2000026c
 800497c:	42340000 	.word	0x42340000
 8004980:	4333e666 	.word	0x4333e666
 8004984:	429fcccd 	.word	0x429fcccd
 8004988:	20000278 	.word	0x20000278

0800498c <OLED_Refresh_Gram>:
#include "oled.h"
#include "oledfont.h"

uint8_t OLED_GRAM[128][8];	 
void OLED_Refresh_Gram(void)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b082      	sub	sp, #8
 8004990:	af00      	add	r7, sp, #0
	uint8_t i,n;		    
	for(i=0;i<8;i++)  
 8004992:	2300      	movs	r3, #0
 8004994:	71fb      	strb	r3, [r7, #7]
 8004996:	e026      	b.n	80049e6 <OLED_Refresh_Gram+0x5a>
	{  
		OLED_WR_Byte (0xb0+i,OLED_CMD);    
 8004998:	79fb      	ldrb	r3, [r7, #7]
 800499a:	3b50      	subs	r3, #80	@ 0x50
 800499c:	b2db      	uxtb	r3, r3
 800499e:	2100      	movs	r1, #0
 80049a0:	4618      	mov	r0, r3
 80049a2:	f000 f82b 	bl	80049fc <OLED_WR_Byte>
		OLED_WR_Byte (0x00,OLED_CMD);      
 80049a6:	2100      	movs	r1, #0
 80049a8:	2000      	movs	r0, #0
 80049aa:	f000 f827 	bl	80049fc <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);        
 80049ae:	2100      	movs	r1, #0
 80049b0:	2010      	movs	r0, #16
 80049b2:	f000 f823 	bl	80049fc <OLED_WR_Byte>
		for(n=0;n<128;n++)OLED_WR_Byte(OLED_GRAM[n][i],OLED_DATA); 
 80049b6:	2300      	movs	r3, #0
 80049b8:	71bb      	strb	r3, [r7, #6]
 80049ba:	e00d      	b.n	80049d8 <OLED_Refresh_Gram+0x4c>
 80049bc:	79ba      	ldrb	r2, [r7, #6]
 80049be:	79fb      	ldrb	r3, [r7, #7]
 80049c0:	490d      	ldr	r1, [pc, #52]	@ (80049f8 <OLED_Refresh_Gram+0x6c>)
 80049c2:	00d2      	lsls	r2, r2, #3
 80049c4:	440a      	add	r2, r1
 80049c6:	4413      	add	r3, r2
 80049c8:	781b      	ldrb	r3, [r3, #0]
 80049ca:	2101      	movs	r1, #1
 80049cc:	4618      	mov	r0, r3
 80049ce:	f000 f815 	bl	80049fc <OLED_WR_Byte>
 80049d2:	79bb      	ldrb	r3, [r7, #6]
 80049d4:	3301      	adds	r3, #1
 80049d6:	71bb      	strb	r3, [r7, #6]
 80049d8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	daed      	bge.n	80049bc <OLED_Refresh_Gram+0x30>
	for(i=0;i<8;i++)  
 80049e0:	79fb      	ldrb	r3, [r7, #7]
 80049e2:	3301      	adds	r3, #1
 80049e4:	71fb      	strb	r3, [r7, #7]
 80049e6:	79fb      	ldrb	r3, [r7, #7]
 80049e8:	2b07      	cmp	r3, #7
 80049ea:	d9d5      	bls.n	8004998 <OLED_Refresh_Gram+0xc>
	}   
}
 80049ec:	bf00      	nop
 80049ee:	bf00      	nop
 80049f0:	3708      	adds	r7, #8
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}
 80049f6:	bf00      	nop
 80049f8:	20000694 	.word	0x20000694

080049fc <OLED_WR_Byte>:

void OLED_WR_Byte(uint8_t dat,uint8_t cmd)
{	
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b084      	sub	sp, #16
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	4603      	mov	r3, r0
 8004a04:	460a      	mov	r2, r1
 8004a06:	71fb      	strb	r3, [r7, #7]
 8004a08:	4613      	mov	r3, r2
 8004a0a:	71bb      	strb	r3, [r7, #6]
	uint8_t i;			  
	if(cmd)
 8004a0c:	79bb      	ldrb	r3, [r7, #6]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d006      	beq.n	8004a20 <OLED_WR_Byte+0x24>
	  OLED_RS_Set();
 8004a12:	2201      	movs	r2, #1
 8004a14:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004a18:	481e      	ldr	r0, [pc, #120]	@ (8004a94 <OLED_WR_Byte+0x98>)
 8004a1a:	f002 fa91 	bl	8006f40 <HAL_GPIO_WritePin>
 8004a1e:	e005      	b.n	8004a2c <OLED_WR_Byte+0x30>
	else 
	  OLED_RS_Clr();		  
 8004a20:	2200      	movs	r2, #0
 8004a22:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004a26:	481b      	ldr	r0, [pc, #108]	@ (8004a94 <OLED_WR_Byte+0x98>)
 8004a28:	f002 fa8a 	bl	8006f40 <HAL_GPIO_WritePin>
	for(i=0;i<8;i++)
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	73fb      	strb	r3, [r7, #15]
 8004a30:	e022      	b.n	8004a78 <OLED_WR_Byte+0x7c>
	{			  
		OLED_SCLK_Clr();
 8004a32:	2200      	movs	r2, #0
 8004a34:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004a38:	4816      	ldr	r0, [pc, #88]	@ (8004a94 <OLED_WR_Byte+0x98>)
 8004a3a:	f002 fa81 	bl	8006f40 <HAL_GPIO_WritePin>
		if(dat&0x80)
 8004a3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	da06      	bge.n	8004a54 <OLED_WR_Byte+0x58>
		   OLED_SDIN_Set();
 8004a46:	2201      	movs	r2, #1
 8004a48:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004a4c:	4811      	ldr	r0, [pc, #68]	@ (8004a94 <OLED_WR_Byte+0x98>)
 8004a4e:	f002 fa77 	bl	8006f40 <HAL_GPIO_WritePin>
 8004a52:	e005      	b.n	8004a60 <OLED_WR_Byte+0x64>
		else 
		   OLED_SDIN_Clr();
 8004a54:	2200      	movs	r2, #0
 8004a56:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004a5a:	480e      	ldr	r0, [pc, #56]	@ (8004a94 <OLED_WR_Byte+0x98>)
 8004a5c:	f002 fa70 	bl	8006f40 <HAL_GPIO_WritePin>
		OLED_SCLK_Set();
 8004a60:	2201      	movs	r2, #1
 8004a62:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004a66:	480b      	ldr	r0, [pc, #44]	@ (8004a94 <OLED_WR_Byte+0x98>)
 8004a68:	f002 fa6a 	bl	8006f40 <HAL_GPIO_WritePin>
		dat<<=1;   
 8004a6c:	79fb      	ldrb	r3, [r7, #7]
 8004a6e:	005b      	lsls	r3, r3, #1
 8004a70:	71fb      	strb	r3, [r7, #7]
	for(i=0;i<8;i++)
 8004a72:	7bfb      	ldrb	r3, [r7, #15]
 8004a74:	3301      	adds	r3, #1
 8004a76:	73fb      	strb	r3, [r7, #15]
 8004a78:	7bfb      	ldrb	r3, [r7, #15]
 8004a7a:	2b07      	cmp	r3, #7
 8004a7c:	d9d9      	bls.n	8004a32 <OLED_WR_Byte+0x36>
	}				 		  
	OLED_RS_Set();   	  
 8004a7e:	2201      	movs	r2, #1
 8004a80:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004a84:	4803      	ldr	r0, [pc, #12]	@ (8004a94 <OLED_WR_Byte+0x98>)
 8004a86:	f002 fa5b 	bl	8006f40 <HAL_GPIO_WritePin>
} 
 8004a8a:	bf00      	nop
 8004a8c:	3710      	adds	r7, #16
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bd80      	pop	{r7, pc}
 8004a92:	bf00      	nop
 8004a94:	40020c00 	.word	0x40020c00

08004a98 <OLED_Clear>:

/**************************************************************************
Clear OLED
**************************************************************************/  
void OLED_Clear(void)  
{  
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b082      	sub	sp, #8
 8004a9c:	af00      	add	r7, sp, #0
	uint8_t i,n;  
	for(i=0;i<8;i++)for(n=0;n<128;n++)OLED_GRAM[n][i]=0X00;  
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	71fb      	strb	r3, [r7, #7]
 8004aa2:	e014      	b.n	8004ace <OLED_Clear+0x36>
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	71bb      	strb	r3, [r7, #6]
 8004aa8:	e00a      	b.n	8004ac0 <OLED_Clear+0x28>
 8004aaa:	79ba      	ldrb	r2, [r7, #6]
 8004aac:	79fb      	ldrb	r3, [r7, #7]
 8004aae:	490c      	ldr	r1, [pc, #48]	@ (8004ae0 <OLED_Clear+0x48>)
 8004ab0:	00d2      	lsls	r2, r2, #3
 8004ab2:	440a      	add	r2, r1
 8004ab4:	4413      	add	r3, r2
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	701a      	strb	r2, [r3, #0]
 8004aba:	79bb      	ldrb	r3, [r7, #6]
 8004abc:	3301      	adds	r3, #1
 8004abe:	71bb      	strb	r3, [r7, #6]
 8004ac0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	daf0      	bge.n	8004aaa <OLED_Clear+0x12>
 8004ac8:	79fb      	ldrb	r3, [r7, #7]
 8004aca:	3301      	adds	r3, #1
 8004acc:	71fb      	strb	r3, [r7, #7]
 8004ace:	79fb      	ldrb	r3, [r7, #7]
 8004ad0:	2b07      	cmp	r3, #7
 8004ad2:	d9e7      	bls.n	8004aa4 <OLED_Clear+0xc>
	OLED_Refresh_Gram();//Refresh
 8004ad4:	f7ff ff5a 	bl	800498c <OLED_Refresh_Gram>
}
 8004ad8:	bf00      	nop
 8004ada:	3708      	adds	r7, #8
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bd80      	pop	{r7, pc}
 8004ae0:	20000694 	.word	0x20000694

08004ae4 <OLED_DrawPoint>:

/**************************************************************************
Draw A Point
**************************************************************************/ 
void OLED_DrawPoint(uint8_t x,uint8_t y,uint8_t t)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b085      	sub	sp, #20
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	4603      	mov	r3, r0
 8004aec:	71fb      	strb	r3, [r7, #7]
 8004aee:	460b      	mov	r3, r1
 8004af0:	71bb      	strb	r3, [r7, #6]
 8004af2:	4613      	mov	r3, r2
 8004af4:	717b      	strb	r3, [r7, #5]
	uint8_t pos,bx,temp=0;
 8004af6:	2300      	movs	r3, #0
 8004af8:	73fb      	strb	r3, [r7, #15]
	if(x>127||y>63)return;//Out of reach
 8004afa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	db41      	blt.n	8004b86 <OLED_DrawPoint+0xa2>
 8004b02:	79bb      	ldrb	r3, [r7, #6]
 8004b04:	2b3f      	cmp	r3, #63	@ 0x3f
 8004b06:	d83e      	bhi.n	8004b86 <OLED_DrawPoint+0xa2>
	pos=7-y/8;
 8004b08:	79bb      	ldrb	r3, [r7, #6]
 8004b0a:	08db      	lsrs	r3, r3, #3
 8004b0c:	b2db      	uxtb	r3, r3
 8004b0e:	f1c3 0307 	rsb	r3, r3, #7
 8004b12:	73bb      	strb	r3, [r7, #14]
	bx=y%8;
 8004b14:	79bb      	ldrb	r3, [r7, #6]
 8004b16:	f003 0307 	and.w	r3, r3, #7
 8004b1a:	737b      	strb	r3, [r7, #13]
	temp=1<<(7-bx);
 8004b1c:	7b7b      	ldrb	r3, [r7, #13]
 8004b1e:	f1c3 0307 	rsb	r3, r3, #7
 8004b22:	2201      	movs	r2, #1
 8004b24:	fa02 f303 	lsl.w	r3, r2, r3
 8004b28:	73fb      	strb	r3, [r7, #15]
	if(t)OLED_GRAM[x][pos]|=temp;
 8004b2a:	797b      	ldrb	r3, [r7, #5]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d012      	beq.n	8004b56 <OLED_DrawPoint+0x72>
 8004b30:	79fa      	ldrb	r2, [r7, #7]
 8004b32:	7bbb      	ldrb	r3, [r7, #14]
 8004b34:	4917      	ldr	r1, [pc, #92]	@ (8004b94 <OLED_DrawPoint+0xb0>)
 8004b36:	00d2      	lsls	r2, r2, #3
 8004b38:	440a      	add	r2, r1
 8004b3a:	4413      	add	r3, r2
 8004b3c:	7818      	ldrb	r0, [r3, #0]
 8004b3e:	79fa      	ldrb	r2, [r7, #7]
 8004b40:	7bbb      	ldrb	r3, [r7, #14]
 8004b42:	7bf9      	ldrb	r1, [r7, #15]
 8004b44:	4301      	orrs	r1, r0
 8004b46:	b2c8      	uxtb	r0, r1
 8004b48:	4912      	ldr	r1, [pc, #72]	@ (8004b94 <OLED_DrawPoint+0xb0>)
 8004b4a:	00d2      	lsls	r2, r2, #3
 8004b4c:	440a      	add	r2, r1
 8004b4e:	4413      	add	r3, r2
 8004b50:	4602      	mov	r2, r0
 8004b52:	701a      	strb	r2, [r3, #0]
 8004b54:	e018      	b.n	8004b88 <OLED_DrawPoint+0xa4>
	else OLED_GRAM[x][pos]&=~temp;	    
 8004b56:	79fa      	ldrb	r2, [r7, #7]
 8004b58:	7bbb      	ldrb	r3, [r7, #14]
 8004b5a:	490e      	ldr	r1, [pc, #56]	@ (8004b94 <OLED_DrawPoint+0xb0>)
 8004b5c:	00d2      	lsls	r2, r2, #3
 8004b5e:	440a      	add	r2, r1
 8004b60:	4413      	add	r3, r2
 8004b62:	781b      	ldrb	r3, [r3, #0]
 8004b64:	b25a      	sxtb	r2, r3
 8004b66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b6a:	43db      	mvns	r3, r3
 8004b6c:	b25b      	sxtb	r3, r3
 8004b6e:	4013      	ands	r3, r2
 8004b70:	b259      	sxtb	r1, r3
 8004b72:	79fa      	ldrb	r2, [r7, #7]
 8004b74:	7bbb      	ldrb	r3, [r7, #14]
 8004b76:	b2c8      	uxtb	r0, r1
 8004b78:	4906      	ldr	r1, [pc, #24]	@ (8004b94 <OLED_DrawPoint+0xb0>)
 8004b7a:	00d2      	lsls	r2, r2, #3
 8004b7c:	440a      	add	r2, r1
 8004b7e:	4413      	add	r3, r2
 8004b80:	4602      	mov	r2, r0
 8004b82:	701a      	strb	r2, [r3, #0]
 8004b84:	e000      	b.n	8004b88 <OLED_DrawPoint+0xa4>
	if(x>127||y>63)return;//Out of reach
 8004b86:	bf00      	nop
}
 8004b88:	3714      	adds	r7, #20
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b90:	4770      	bx	lr
 8004b92:	bf00      	nop
 8004b94:	20000694 	.word	0x20000694

08004b98 <OLED_ShowChar>:
/**************************************************************************
Show Char
**************************************************************************/
void OLED_ShowChar(uint8_t x,uint8_t y,uint8_t chr,uint8_t size,uint8_t mode)
{      			    
 8004b98:	b590      	push	{r4, r7, lr}
 8004b9a:	b085      	sub	sp, #20
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	4604      	mov	r4, r0
 8004ba0:	4608      	mov	r0, r1
 8004ba2:	4611      	mov	r1, r2
 8004ba4:	461a      	mov	r2, r3
 8004ba6:	4623      	mov	r3, r4
 8004ba8:	71fb      	strb	r3, [r7, #7]
 8004baa:	4603      	mov	r3, r0
 8004bac:	71bb      	strb	r3, [r7, #6]
 8004bae:	460b      	mov	r3, r1
 8004bb0:	717b      	strb	r3, [r7, #5]
 8004bb2:	4613      	mov	r3, r2
 8004bb4:	713b      	strb	r3, [r7, #4]
	uint8_t temp,t,t1;
	uint8_t y0=y;
 8004bb6:	79bb      	ldrb	r3, [r7, #6]
 8004bb8:	733b      	strb	r3, [r7, #12]
	chr=chr-' ';				   
 8004bba:	797b      	ldrb	r3, [r7, #5]
 8004bbc:	3b20      	subs	r3, #32
 8004bbe:	717b      	strb	r3, [r7, #5]
    for(t=0;t<size;t++)
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	73bb      	strb	r3, [r7, #14]
 8004bc4:	e04d      	b.n	8004c62 <OLED_ShowChar+0xca>
    {   
		if(size==12)temp=oled_asc2_1206[chr][t];  //1206 Size
 8004bc6:	793b      	ldrb	r3, [r7, #4]
 8004bc8:	2b0c      	cmp	r3, #12
 8004bca:	d10b      	bne.n	8004be4 <OLED_ShowChar+0x4c>
 8004bcc:	797a      	ldrb	r2, [r7, #5]
 8004bce:	7bb9      	ldrb	r1, [r7, #14]
 8004bd0:	4828      	ldr	r0, [pc, #160]	@ (8004c74 <OLED_ShowChar+0xdc>)
 8004bd2:	4613      	mov	r3, r2
 8004bd4:	005b      	lsls	r3, r3, #1
 8004bd6:	4413      	add	r3, r2
 8004bd8:	009b      	lsls	r3, r3, #2
 8004bda:	4403      	add	r3, r0
 8004bdc:	440b      	add	r3, r1
 8004bde:	781b      	ldrb	r3, [r3, #0]
 8004be0:	73fb      	strb	r3, [r7, #15]
 8004be2:	e007      	b.n	8004bf4 <OLED_ShowChar+0x5c>
		else temp=oled_asc2_1608[chr][t];		 //1608 Size	                          
 8004be4:	797a      	ldrb	r2, [r7, #5]
 8004be6:	7bbb      	ldrb	r3, [r7, #14]
 8004be8:	4923      	ldr	r1, [pc, #140]	@ (8004c78 <OLED_ShowChar+0xe0>)
 8004bea:	0112      	lsls	r2, r2, #4
 8004bec:	440a      	add	r2, r1
 8004bee:	4413      	add	r3, r2
 8004bf0:	781b      	ldrb	r3, [r3, #0]
 8004bf2:	73fb      	strb	r3, [r7, #15]
        for(t1=0;t1<8;t1++)
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	737b      	strb	r3, [r7, #13]
 8004bf8:	e02d      	b.n	8004c56 <OLED_ShowChar+0xbe>
		{
        	if(temp&0x80)OLED_DrawPoint(x,y,mode);
 8004bfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	da07      	bge.n	8004c12 <OLED_ShowChar+0x7a>
 8004c02:	f897 2020 	ldrb.w	r2, [r7, #32]
 8004c06:	79b9      	ldrb	r1, [r7, #6]
 8004c08:	79fb      	ldrb	r3, [r7, #7]
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	f7ff ff6a 	bl	8004ae4 <OLED_DrawPoint>
 8004c10:	e00c      	b.n	8004c2c <OLED_ShowChar+0x94>
			else OLED_DrawPoint(x,y,!mode);
 8004c12:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	bf0c      	ite	eq
 8004c1a:	2301      	moveq	r3, #1
 8004c1c:	2300      	movne	r3, #0
 8004c1e:	b2db      	uxtb	r3, r3
 8004c20:	461a      	mov	r2, r3
 8004c22:	79b9      	ldrb	r1, [r7, #6]
 8004c24:	79fb      	ldrb	r3, [r7, #7]
 8004c26:	4618      	mov	r0, r3
 8004c28:	f7ff ff5c 	bl	8004ae4 <OLED_DrawPoint>
			temp<<=1;
 8004c2c:	7bfb      	ldrb	r3, [r7, #15]
 8004c2e:	005b      	lsls	r3, r3, #1
 8004c30:	73fb      	strb	r3, [r7, #15]
			y++;
 8004c32:	79bb      	ldrb	r3, [r7, #6]
 8004c34:	3301      	adds	r3, #1
 8004c36:	71bb      	strb	r3, [r7, #6]
			if((y-y0)==size)
 8004c38:	79ba      	ldrb	r2, [r7, #6]
 8004c3a:	7b3b      	ldrb	r3, [r7, #12]
 8004c3c:	1ad2      	subs	r2, r2, r3
 8004c3e:	793b      	ldrb	r3, [r7, #4]
 8004c40:	429a      	cmp	r2, r3
 8004c42:	d105      	bne.n	8004c50 <OLED_ShowChar+0xb8>
			{
				y=y0;
 8004c44:	7b3b      	ldrb	r3, [r7, #12]
 8004c46:	71bb      	strb	r3, [r7, #6]
				x++;
 8004c48:	79fb      	ldrb	r3, [r7, #7]
 8004c4a:	3301      	adds	r3, #1
 8004c4c:	71fb      	strb	r3, [r7, #7]
				break;
 8004c4e:	e005      	b.n	8004c5c <OLED_ShowChar+0xc4>
        for(t1=0;t1<8;t1++)
 8004c50:	7b7b      	ldrb	r3, [r7, #13]
 8004c52:	3301      	adds	r3, #1
 8004c54:	737b      	strb	r3, [r7, #13]
 8004c56:	7b7b      	ldrb	r3, [r7, #13]
 8004c58:	2b07      	cmp	r3, #7
 8004c5a:	d9ce      	bls.n	8004bfa <OLED_ShowChar+0x62>
    for(t=0;t<size;t++)
 8004c5c:	7bbb      	ldrb	r3, [r7, #14]
 8004c5e:	3301      	adds	r3, #1
 8004c60:	73bb      	strb	r3, [r7, #14]
 8004c62:	7bba      	ldrb	r2, [r7, #14]
 8004c64:	793b      	ldrb	r3, [r7, #4]
 8004c66:	429a      	cmp	r2, r3
 8004c68:	d3ad      	bcc.n	8004bc6 <OLED_ShowChar+0x2e>
			}
		}  	 
    }          
}
 8004c6a:	bf00      	nop
 8004c6c:	bf00      	nop
 8004c6e:	3714      	adds	r7, #20
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bd90      	pop	{r4, r7, pc}
 8004c74:	0801222c 	.word	0x0801222c
 8004c78:	080126a0 	.word	0x080126a0

08004c7c <OLED_ShowString>:
} 
/**************************************************************************
Show The String
**************************************************************************/
void OLED_ShowString(uint8_t x,uint8_t y,const uint8_t *p)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b084      	sub	sp, #16
 8004c80:	af02      	add	r7, sp, #8
 8004c82:	4603      	mov	r3, r0
 8004c84:	603a      	str	r2, [r7, #0]
 8004c86:	71fb      	strb	r3, [r7, #7]
 8004c88:	460b      	mov	r3, r1
 8004c8a:	71bb      	strb	r3, [r7, #6]
#define MAX_CHAR_POSX 122
#define MAX_CHAR_POSY 58          
    while(*p!='\0')
 8004c8c:	e01f      	b.n	8004cce <OLED_ShowString+0x52>
    {       
        if(x>MAX_CHAR_POSX){x=0;y+=16;}
 8004c8e:	79fb      	ldrb	r3, [r7, #7]
 8004c90:	2b7a      	cmp	r3, #122	@ 0x7a
 8004c92:	d904      	bls.n	8004c9e <OLED_ShowString+0x22>
 8004c94:	2300      	movs	r3, #0
 8004c96:	71fb      	strb	r3, [r7, #7]
 8004c98:	79bb      	ldrb	r3, [r7, #6]
 8004c9a:	3310      	adds	r3, #16
 8004c9c:	71bb      	strb	r3, [r7, #6]
        if(y>MAX_CHAR_POSY){y=x=0;OLED_Clear();}
 8004c9e:	79bb      	ldrb	r3, [r7, #6]
 8004ca0:	2b3a      	cmp	r3, #58	@ 0x3a
 8004ca2:	d905      	bls.n	8004cb0 <OLED_ShowString+0x34>
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	71fb      	strb	r3, [r7, #7]
 8004ca8:	79fb      	ldrb	r3, [r7, #7]
 8004caa:	71bb      	strb	r3, [r7, #6]
 8004cac:	f7ff fef4 	bl	8004a98 <OLED_Clear>
        OLED_ShowChar(x,y,*p,12,1);	 
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	781a      	ldrb	r2, [r3, #0]
 8004cb4:	79b9      	ldrb	r1, [r7, #6]
 8004cb6:	79f8      	ldrb	r0, [r7, #7]
 8004cb8:	2301      	movs	r3, #1
 8004cba:	9300      	str	r3, [sp, #0]
 8004cbc:	230c      	movs	r3, #12
 8004cbe:	f7ff ff6b 	bl	8004b98 <OLED_ShowChar>
        x+=8;
 8004cc2:	79fb      	ldrb	r3, [r7, #7]
 8004cc4:	3308      	adds	r3, #8
 8004cc6:	71fb      	strb	r3, [r7, #7]
        p++;
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	3301      	adds	r3, #1
 8004ccc:	603b      	str	r3, [r7, #0]
    while(*p!='\0')
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	781b      	ldrb	r3, [r3, #0]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d1db      	bne.n	8004c8e <OLED_ShowString+0x12>
    }  
}	 
 8004cd6:	bf00      	nop
 8004cd8:	bf00      	nop
 8004cda:	3708      	adds	r7, #8
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bd80      	pop	{r7, pc}

08004ce0 <OLED_Init>:

void OLED_Init(void)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	af00      	add	r7, sp, #0
	HAL_PWR_EnableBkUpAccess(); //Enable access to the RTC and Backup Register
 8004ce4:	f003 f96a 	bl	8007fbc <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSE_CONFIG(RCC_LSE_OFF); //turn OFF the LSE oscillator, LSERDY flag goes low after 6 LSE oscillator clock cycles.
 8004ce8:	4b42      	ldr	r3, [pc, #264]	@ (8004df4 <OLED_Init+0x114>)
 8004cea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cec:	4a41      	ldr	r2, [pc, #260]	@ (8004df4 <OLED_Init+0x114>)
 8004cee:	f023 0301 	bic.w	r3, r3, #1
 8004cf2:	6713      	str	r3, [r2, #112]	@ 0x70
 8004cf4:	4b3f      	ldr	r3, [pc, #252]	@ (8004df4 <OLED_Init+0x114>)
 8004cf6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cf8:	4a3e      	ldr	r2, [pc, #248]	@ (8004df4 <OLED_Init+0x114>)
 8004cfa:	f023 0304 	bic.w	r3, r3, #4
 8004cfe:	6713      	str	r3, [r2, #112]	@ 0x70
	                                   //LSE oscillator switch off to let PC13 PC14 PC15 be IO
	
	
	HAL_PWR_DisableBkUpAccess();
 8004d00:	f003 f970 	bl	8007fe4 <HAL_PWR_DisableBkUpAccess>
	
	OLED_RST_Clr();
 8004d04:	2200      	movs	r2, #0
 8004d06:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004d0a:	483b      	ldr	r0, [pc, #236]	@ (8004df8 <OLED_Init+0x118>)
 8004d0c:	f002 f918 	bl	8006f40 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8004d10:	2064      	movs	r0, #100	@ 0x64
 8004d12:	f000 fe71 	bl	80059f8 <HAL_Delay>
	OLED_RST_Set();
 8004d16:	2201      	movs	r2, #1
 8004d18:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004d1c:	4836      	ldr	r0, [pc, #216]	@ (8004df8 <OLED_Init+0x118>)
 8004d1e:	f002 f90f 	bl	8006f40 <HAL_GPIO_WritePin>
	
	OLED_WR_Byte(0xAE,OLED_CMD); //Off Display
 8004d22:	2100      	movs	r1, #0
 8004d24:	20ae      	movs	r0, #174	@ 0xae
 8004d26:	f7ff fe69 	bl	80049fc <OLED_WR_Byte>
	
	OLED_WR_Byte(0xD5,OLED_CMD); //Set Oscillator Division
 8004d2a:	2100      	movs	r1, #0
 8004d2c:	20d5      	movs	r0, #213	@ 0xd5
 8004d2e:	f7ff fe65 	bl	80049fc <OLED_WR_Byte>
	OLED_WR_Byte(80,OLED_CMD);    //[3:0]: divide ratio of the DCLK, [7:4], set the oscillator frequency. Reset
 8004d32:	2100      	movs	r1, #0
 8004d34:	2050      	movs	r0, #80	@ 0x50
 8004d36:	f7ff fe61 	bl	80049fc <OLED_WR_Byte>
	OLED_WR_Byte(0xA8,OLED_CMD); //multiplex ratio
 8004d3a:	2100      	movs	r1, #0
 8004d3c:	20a8      	movs	r0, #168	@ 0xa8
 8004d3e:	f7ff fe5d 	bl	80049fc <OLED_WR_Byte>
	OLED_WR_Byte(0X3F,OLED_CMD); //duty = 0X3F(1/64) 
 8004d42:	2100      	movs	r1, #0
 8004d44:	203f      	movs	r0, #63	@ 0x3f
 8004d46:	f7ff fe59 	bl	80049fc <OLED_WR_Byte>
	OLED_WR_Byte(0xD3,OLED_CMD);  //set display offset
 8004d4a:	2100      	movs	r1, #0
 8004d4c:	20d3      	movs	r0, #211	@ 0xd3
 8004d4e:	f7ff fe55 	bl	80049fc <OLED_WR_Byte>
	OLED_WR_Byte(0X00,OLED_CMD); //0
 8004d52:	2100      	movs	r1, #0
 8004d54:	2000      	movs	r0, #0
 8004d56:	f7ff fe51 	bl	80049fc <OLED_WR_Byte>

	OLED_WR_Byte(0x40,OLED_CMD); //set display start line [5:0]- from 0-63. RESET
 8004d5a:	2100      	movs	r1, #0
 8004d5c:	2040      	movs	r0, #64	@ 0x40
 8004d5e:	f7ff fe4d 	bl	80049fc <OLED_WR_Byte>
													
	OLED_WR_Byte(0x8D,OLED_CMD); //Set charge pump
 8004d62:	2100      	movs	r1, #0
 8004d64:	208d      	movs	r0, #141	@ 0x8d
 8004d66:	f7ff fe49 	bl	80049fc <OLED_WR_Byte>
	OLED_WR_Byte(0x14,OLED_CMD); //Enable Charge Pump
 8004d6a:	2100      	movs	r1, #0
 8004d6c:	2014      	movs	r0, #20
 8004d6e:	f7ff fe45 	bl	80049fc <OLED_WR_Byte>
	OLED_WR_Byte(0x20,OLED_CMD); //Set Memory Addressing Mode
 8004d72:	2100      	movs	r1, #0
 8004d74:	2020      	movs	r0, #32
 8004d76:	f7ff fe41 	bl	80049fc <OLED_WR_Byte>
	OLED_WR_Byte(0x02,OLED_CMD); //Page Addressing Mode (RESET)
 8004d7a:	2100      	movs	r1, #0
 8004d7c:	2002      	movs	r0, #2
 8004d7e:	f7ff fe3d 	bl	80049fc <OLED_WR_Byte>
	OLED_WR_Byte(0xA1,OLED_CMD); //Set segment remap, bit0:0,0->0;1,0->127;
 8004d82:	2100      	movs	r1, #0
 8004d84:	20a1      	movs	r0, #161	@ 0xa1
 8004d86:	f7ff fe39 	bl	80049fc <OLED_WR_Byte>
	OLED_WR_Byte(0xC0,OLED_CMD); //Set COM Output Scan Direction
 8004d8a:	2100      	movs	r1, #0
 8004d8c:	20c0      	movs	r0, #192	@ 0xc0
 8004d8e:	f7ff fe35 	bl	80049fc <OLED_WR_Byte>
	OLED_WR_Byte(0xDA,OLED_CMD); //Set COM Pins
 8004d92:	2100      	movs	r1, #0
 8004d94:	20da      	movs	r0, #218	@ 0xda
 8004d96:	f7ff fe31 	bl	80049fc <OLED_WR_Byte>
	OLED_WR_Byte(0x12,OLED_CMD); //[5:4] setting
 8004d9a:	2100      	movs	r1, #0
 8004d9c:	2012      	movs	r0, #18
 8004d9e:	f7ff fe2d 	bl	80049fc <OLED_WR_Byte>
	 
	OLED_WR_Byte(0x81,OLED_CMD); //Contrast Control
 8004da2:	2100      	movs	r1, #0
 8004da4:	2081      	movs	r0, #129	@ 0x81
 8004da6:	f7ff fe29 	bl	80049fc <OLED_WR_Byte>
	OLED_WR_Byte(0xEF,OLED_CMD); //1~256; Default: 0X7F
 8004daa:	2100      	movs	r1, #0
 8004dac:	20ef      	movs	r0, #239	@ 0xef
 8004dae:	f7ff fe25 	bl	80049fc <OLED_WR_Byte>
	OLED_WR_Byte(0xD9,OLED_CMD); //Set Pre-charge Period
 8004db2:	2100      	movs	r1, #0
 8004db4:	20d9      	movs	r0, #217	@ 0xd9
 8004db6:	f7ff fe21 	bl	80049fc <OLED_WR_Byte>
	OLED_WR_Byte(0xf1,OLED_CMD); //[3:0],PHASE 1;[7:4],PHASE 2;
 8004dba:	2100      	movs	r1, #0
 8004dbc:	20f1      	movs	r0, #241	@ 0xf1
 8004dbe:	f7ff fe1d 	bl	80049fc <OLED_WR_Byte>
	OLED_WR_Byte(0xDB,OLED_CMD); //Set VCOMH
 8004dc2:	2100      	movs	r1, #0
 8004dc4:	20db      	movs	r0, #219	@ 0xdb
 8004dc6:	f7ff fe19 	bl	80049fc <OLED_WR_Byte>
	OLED_WR_Byte(0x30,OLED_CMD);  //[6:4] 000,0.65*vcc;001,0.77*vcc;011,0.83*vcc;
 8004dca:	2100      	movs	r1, #0
 8004dcc:	2030      	movs	r0, #48	@ 0x30
 8004dce:	f7ff fe15 	bl	80049fc <OLED_WR_Byte>

	OLED_WR_Byte(0xA4,OLED_CMD); //Enable display outputs according to the GDDRAM contents
 8004dd2:	2100      	movs	r1, #0
 8004dd4:	20a4      	movs	r0, #164	@ 0xa4
 8004dd6:	f7ff fe11 	bl	80049fc <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD); //Set normal display   						   
 8004dda:	2100      	movs	r1, #0
 8004ddc:	20a6      	movs	r0, #166	@ 0xa6
 8004dde:	f7ff fe0d 	bl	80049fc <OLED_WR_Byte>
	OLED_WR_Byte(0xAF,OLED_CMD); //DISPLAY ON	 
 8004de2:	2100      	movs	r1, #0
 8004de4:	20af      	movs	r0, #175	@ 0xaf
 8004de6:	f7ff fe09 	bl	80049fc <OLED_WR_Byte>
	OLED_Clear(); 
 8004dea:	f7ff fe55 	bl	8004a98 <OLED_Clear>
}
 8004dee:	bf00      	nop
 8004df0:	bd80      	pop	{r7, pc}
 8004df2:	bf00      	nop
 8004df4:	40023800 	.word	0x40023800
 8004df8:	40020c00 	.word	0x40020c00

08004dfc <PID_Init>:
// Core/Src/pid.c

#include "pid.h"

void PID_Init(PID_Controller_t *pid, float kp, float ki, float kd,
              float out_min, float out_max) {
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b086      	sub	sp, #24
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6178      	str	r0, [r7, #20]
 8004e04:	ed87 0a04 	vstr	s0, [r7, #16]
 8004e08:	edc7 0a03 	vstr	s1, [r7, #12]
 8004e0c:	ed87 1a02 	vstr	s2, [r7, #8]
 8004e10:	edc7 1a01 	vstr	s3, [r7, #4]
 8004e14:	ed87 2a00 	vstr	s4, [r7]
    // Initialize gains
    pid->kp = kp;
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	693a      	ldr	r2, [r7, #16]
 8004e1c:	601a      	str	r2, [r3, #0]
    pid->ki = ki;
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	68fa      	ldr	r2, [r7, #12]
 8004e22:	605a      	str	r2, [r3, #4]
    pid->kd = kd;
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	68ba      	ldr	r2, [r7, #8]
 8004e28:	609a      	str	r2, [r3, #8]

    // Initialize output limits
    pid->output_min = out_min;
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	687a      	ldr	r2, [r7, #4]
 8004e2e:	619a      	str	r2, [r3, #24]
    pid->output_max = out_max;
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	683a      	ldr	r2, [r7, #0]
 8004e34:	61da      	str	r2, [r3, #28]

    // Reset the controller's state
    PID_Reset(pid);
 8004e36:	6978      	ldr	r0, [r7, #20]
 8004e38:	f000 f892 	bl	8004f60 <PID_Reset>
}
 8004e3c:	bf00      	nop
 8004e3e:	3718      	adds	r7, #24
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd80      	pop	{r7, pc}

08004e44 <PID_Compute>:

float PID_Compute(PID_Controller_t *pid, float setpoint, float current_value, float dt) {
 8004e44:	b480      	push	{r7}
 8004e46:	b08d      	sub	sp, #52	@ 0x34
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	60f8      	str	r0, [r7, #12]
 8004e4c:	ed87 0a02 	vstr	s0, [r7, #8]
 8004e50:	edc7 0a01 	vstr	s1, [r7, #4]
 8004e54:	ed87 1a00 	vstr	s2, [r7]
    if (dt <= 0) {
 8004e58:	edd7 7a00 	vldr	s15, [r7]
 8004e5c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004e60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e64:	d802      	bhi.n	8004e6c <PID_Compute+0x28>
        // Avoid division by zero or weird behavior
        return 0;
 8004e66:	f04f 0300 	mov.w	r3, #0
 8004e6a:	e070      	b.n	8004f4e <PID_Compute+0x10a>
    }

    float error = setpoint - current_value;
 8004e6c:	ed97 7a02 	vldr	s14, [r7, #8]
 8004e70:	edd7 7a01 	vldr	s15, [r7, #4]
 8004e74:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004e78:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28

    // Proportional term
    float p_out = pid->kp * error;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	edd3 7a00 	vldr	s15, [r3]
 8004e82:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8004e86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e8a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    // Derivative term (on measurement to prevent kick)
    float derivative = -(current_value - pid->last_measurement) / dt;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	edd3 7a05 	vldr	s15, [r3, #20]
 8004e94:	ed97 7a01 	vldr	s14, [r7, #4]
 8004e98:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004e9c:	eef1 6a67 	vneg.f32	s13, s15
 8004ea0:	ed97 7a00 	vldr	s14, [r7]
 8004ea4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ea8:	edc7 7a08 	vstr	s15, [r7, #32]
    float d_out = pid->kd * derivative;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	edd3 7a02 	vldr	s15, [r3, #8]
 8004eb2:	ed97 7a08 	vldr	s14, [r7, #32]
 8004eb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004eba:	edc7 7a07 	vstr	s15, [r7, #28]

    // Calculate preliminary output without the integral term
    float pre_output = p_out + d_out;
 8004ebe:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8004ec2:	edd7 7a07 	vldr	s15, [r7, #28]
 8004ec6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004eca:	edc7 7a06 	vstr	s15, [r7, #24]

    // Calculate integral term
    float i_out = pid->ki * pid->integral_error;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	ed93 7a01 	vldr	s14, [r3, #4]
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	edd3 7a04 	vldr	s15, [r3, #16]
 8004eda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ede:	edc7 7a05 	vstr	s15, [r7, #20]

    // Final output before clamping
    float output = pre_output + i_out;
 8004ee2:	ed97 7a06 	vldr	s14, [r7, #24]
 8004ee6:	edd7 7a05 	vldr	s15, [r7, #20]
 8004eea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004eee:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

    // --- Anti-windup and Output Clamping ---
    // If output is saturated, we might need to adjust the integral.
    // If not, we can update the integral normally.
    if (output > pid->output_max) {
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	edd3 7a07 	vldr	s15, [r3, #28]
 8004ef8:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8004efc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004f00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f04:	dd03      	ble.n	8004f0e <PID_Compute+0xca>
        output = pid->output_max;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	69db      	ldr	r3, [r3, #28]
 8004f0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004f0c:	e01b      	b.n	8004f46 <PID_Compute+0x102>
    } else if (output < pid->output_min) {
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	edd3 7a06 	vldr	s15, [r3, #24]
 8004f14:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8004f18:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004f1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f20:	d503      	bpl.n	8004f2a <PID_Compute+0xe6>
        output = pid->output_min;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	699b      	ldr	r3, [r3, #24]
 8004f26:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004f28:	e00d      	b.n	8004f46 <PID_Compute+0x102>
    } else {
        // Only integrate if we are not saturated
        pid->integral_error += error * dt;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	ed93 7a04 	vldr	s14, [r3, #16]
 8004f30:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8004f34:	edd7 7a00 	vldr	s15, [r7]
 8004f38:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004f3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	edc3 7a04 	vstr	s15, [r3, #16]
    }

    // Update state for next iteration
    pid->last_measurement = current_value;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	687a      	ldr	r2, [r7, #4]
 8004f4a:	615a      	str	r2, [r3, #20]

    return output;
 8004f4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8004f4e:	ee07 3a90 	vmov	s15, r3
 8004f52:	eeb0 0a67 	vmov.f32	s0, s15
 8004f56:	3734      	adds	r7, #52	@ 0x34
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5e:	4770      	bx	lr

08004f60 <PID_Reset>:

void PID_Reset(PID_Controller_t *pid) {
 8004f60:	b480      	push	{r7}
 8004f62:	b083      	sub	sp, #12
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
    pid->integral_error = 0.0f;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	f04f 0200 	mov.w	r2, #0
 8004f6e:	611a      	str	r2, [r3, #16]
    pid->last_measurement = 0.0f; // Reset last measurement
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	f04f 0200 	mov.w	r2, #0
 8004f76:	615a      	str	r2, [r3, #20]
}
 8004f78:	bf00      	nop
 8004f7a:	370c      	adds	r7, #12
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f82:	4770      	bx	lr

08004f84 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b082      	sub	sp, #8
 8004f88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	607b      	str	r3, [r7, #4]
 8004f8e:	4b12      	ldr	r3, [pc, #72]	@ (8004fd8 <HAL_MspInit+0x54>)
 8004f90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f92:	4a11      	ldr	r2, [pc, #68]	@ (8004fd8 <HAL_MspInit+0x54>)
 8004f94:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004f98:	6453      	str	r3, [r2, #68]	@ 0x44
 8004f9a:	4b0f      	ldr	r3, [pc, #60]	@ (8004fd8 <HAL_MspInit+0x54>)
 8004f9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f9e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004fa2:	607b      	str	r3, [r7, #4]
 8004fa4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	603b      	str	r3, [r7, #0]
 8004faa:	4b0b      	ldr	r3, [pc, #44]	@ (8004fd8 <HAL_MspInit+0x54>)
 8004fac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fae:	4a0a      	ldr	r2, [pc, #40]	@ (8004fd8 <HAL_MspInit+0x54>)
 8004fb0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004fb4:	6413      	str	r3, [r2, #64]	@ 0x40
 8004fb6:	4b08      	ldr	r3, [pc, #32]	@ (8004fd8 <HAL_MspInit+0x54>)
 8004fb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004fbe:	603b      	str	r3, [r7, #0]
 8004fc0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	210f      	movs	r1, #15
 8004fc6:	f06f 0001 	mvn.w	r0, #1
 8004fca:	f001 f9f1 	bl	80063b0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004fce:	bf00      	nop
 8004fd0:	3708      	adds	r7, #8
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}
 8004fd6:	bf00      	nop
 8004fd8:	40023800 	.word	0x40023800

08004fdc <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b08a      	sub	sp, #40	@ 0x28
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004fe4:	f107 0314 	add.w	r3, r7, #20
 8004fe8:	2200      	movs	r2, #0
 8004fea:	601a      	str	r2, [r3, #0]
 8004fec:	605a      	str	r2, [r3, #4]
 8004fee:	609a      	str	r2, [r3, #8]
 8004ff0:	60da      	str	r2, [r3, #12]
 8004ff2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a17      	ldr	r2, [pc, #92]	@ (8005058 <HAL_ADC_MspInit+0x7c>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d127      	bne.n	800504e <HAL_ADC_MspInit+0x72>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004ffe:	2300      	movs	r3, #0
 8005000:	613b      	str	r3, [r7, #16]
 8005002:	4b16      	ldr	r3, [pc, #88]	@ (800505c <HAL_ADC_MspInit+0x80>)
 8005004:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005006:	4a15      	ldr	r2, [pc, #84]	@ (800505c <HAL_ADC_MspInit+0x80>)
 8005008:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800500c:	6453      	str	r3, [r2, #68]	@ 0x44
 800500e:	4b13      	ldr	r3, [pc, #76]	@ (800505c <HAL_ADC_MspInit+0x80>)
 8005010:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005012:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005016:	613b      	str	r3, [r7, #16]
 8005018:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800501a:	2300      	movs	r3, #0
 800501c:	60fb      	str	r3, [r7, #12]
 800501e:	4b0f      	ldr	r3, [pc, #60]	@ (800505c <HAL_ADC_MspInit+0x80>)
 8005020:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005022:	4a0e      	ldr	r2, [pc, #56]	@ (800505c <HAL_ADC_MspInit+0x80>)
 8005024:	f043 0301 	orr.w	r3, r3, #1
 8005028:	6313      	str	r3, [r2, #48]	@ 0x30
 800502a:	4b0c      	ldr	r3, [pc, #48]	@ (800505c <HAL_ADC_MspInit+0x80>)
 800502c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800502e:	f003 0301 	and.w	r3, r3, #1
 8005032:	60fb      	str	r3, [r7, #12]
 8005034:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8005036:	2330      	movs	r3, #48	@ 0x30
 8005038:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800503a:	2303      	movs	r3, #3
 800503c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800503e:	2300      	movs	r3, #0
 8005040:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005042:	f107 0314 	add.w	r3, r7, #20
 8005046:	4619      	mov	r1, r3
 8005048:	4805      	ldr	r0, [pc, #20]	@ (8005060 <HAL_ADC_MspInit+0x84>)
 800504a:	f001 fddd 	bl	8006c08 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 800504e:	bf00      	nop
 8005050:	3728      	adds	r7, #40	@ 0x28
 8005052:	46bd      	mov	sp, r7
 8005054:	bd80      	pop	{r7, pc}
 8005056:	bf00      	nop
 8005058:	40012000 	.word	0x40012000
 800505c:	40023800 	.word	0x40023800
 8005060:	40020000 	.word	0x40020000

08005064 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b08a      	sub	sp, #40	@ 0x28
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800506c:	f107 0314 	add.w	r3, r7, #20
 8005070:	2200      	movs	r2, #0
 8005072:	601a      	str	r2, [r3, #0]
 8005074:	605a      	str	r2, [r3, #4]
 8005076:	609a      	str	r2, [r3, #8]
 8005078:	60da      	str	r2, [r3, #12]
 800507a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a19      	ldr	r2, [pc, #100]	@ (80050e8 <HAL_I2C_MspInit+0x84>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d12c      	bne.n	80050e0 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C2_MspInit 0 */

    /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005086:	2300      	movs	r3, #0
 8005088:	613b      	str	r3, [r7, #16]
 800508a:	4b18      	ldr	r3, [pc, #96]	@ (80050ec <HAL_I2C_MspInit+0x88>)
 800508c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800508e:	4a17      	ldr	r2, [pc, #92]	@ (80050ec <HAL_I2C_MspInit+0x88>)
 8005090:	f043 0302 	orr.w	r3, r3, #2
 8005094:	6313      	str	r3, [r2, #48]	@ 0x30
 8005096:	4b15      	ldr	r3, [pc, #84]	@ (80050ec <HAL_I2C_MspInit+0x88>)
 8005098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800509a:	f003 0302 	and.w	r3, r3, #2
 800509e:	613b      	str	r3, [r7, #16]
 80050a0:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80050a2:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80050a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80050a8:	2312      	movs	r3, #18
 80050aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050ac:	2300      	movs	r3, #0
 80050ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80050b0:	2303      	movs	r3, #3
 80050b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80050b4:	2304      	movs	r3, #4
 80050b6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80050b8:	f107 0314 	add.w	r3, r7, #20
 80050bc:	4619      	mov	r1, r3
 80050be:	480c      	ldr	r0, [pc, #48]	@ (80050f0 <HAL_I2C_MspInit+0x8c>)
 80050c0:	f001 fda2 	bl	8006c08 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80050c4:	2300      	movs	r3, #0
 80050c6:	60fb      	str	r3, [r7, #12]
 80050c8:	4b08      	ldr	r3, [pc, #32]	@ (80050ec <HAL_I2C_MspInit+0x88>)
 80050ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050cc:	4a07      	ldr	r2, [pc, #28]	@ (80050ec <HAL_I2C_MspInit+0x88>)
 80050ce:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80050d2:	6413      	str	r3, [r2, #64]	@ 0x40
 80050d4:	4b05      	ldr	r3, [pc, #20]	@ (80050ec <HAL_I2C_MspInit+0x88>)
 80050d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050d8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80050dc:	60fb      	str	r3, [r7, #12]
 80050de:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 80050e0:	bf00      	nop
 80050e2:	3728      	adds	r7, #40	@ 0x28
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bd80      	pop	{r7, pc}
 80050e8:	40005800 	.word	0x40005800
 80050ec:	40023800 	.word	0x40023800
 80050f0:	40020400 	.word	0x40020400

080050f4 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80050f4:	b480      	push	{r7}
 80050f6:	b085      	sub	sp, #20
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a15      	ldr	r2, [pc, #84]	@ (8005158 <HAL_TIM_PWM_MspInit+0x64>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d10e      	bne.n	8005124 <HAL_TIM_PWM_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005106:	2300      	movs	r3, #0
 8005108:	60fb      	str	r3, [r7, #12]
 800510a:	4b14      	ldr	r3, [pc, #80]	@ (800515c <HAL_TIM_PWM_MspInit+0x68>)
 800510c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800510e:	4a13      	ldr	r2, [pc, #76]	@ (800515c <HAL_TIM_PWM_MspInit+0x68>)
 8005110:	f043 0301 	orr.w	r3, r3, #1
 8005114:	6453      	str	r3, [r2, #68]	@ 0x44
 8005116:	4b11      	ldr	r3, [pc, #68]	@ (800515c <HAL_TIM_PWM_MspInit+0x68>)
 8005118:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800511a:	f003 0301 	and.w	r3, r3, #1
 800511e:	60fb      	str	r3, [r7, #12]
 8005120:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 8005122:	e012      	b.n	800514a <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM4)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a0d      	ldr	r2, [pc, #52]	@ (8005160 <HAL_TIM_PWM_MspInit+0x6c>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d10d      	bne.n	800514a <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800512e:	2300      	movs	r3, #0
 8005130:	60bb      	str	r3, [r7, #8]
 8005132:	4b0a      	ldr	r3, [pc, #40]	@ (800515c <HAL_TIM_PWM_MspInit+0x68>)
 8005134:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005136:	4a09      	ldr	r2, [pc, #36]	@ (800515c <HAL_TIM_PWM_MspInit+0x68>)
 8005138:	f043 0304 	orr.w	r3, r3, #4
 800513c:	6413      	str	r3, [r2, #64]	@ 0x40
 800513e:	4b07      	ldr	r3, [pc, #28]	@ (800515c <HAL_TIM_PWM_MspInit+0x68>)
 8005140:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005142:	f003 0304 	and.w	r3, r3, #4
 8005146:	60bb      	str	r3, [r7, #8]
 8005148:	68bb      	ldr	r3, [r7, #8]
}
 800514a:	bf00      	nop
 800514c:	3714      	adds	r7, #20
 800514e:	46bd      	mov	sp, r7
 8005150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005154:	4770      	bx	lr
 8005156:	bf00      	nop
 8005158:	40010000 	.word	0x40010000
 800515c:	40023800 	.word	0x40023800
 8005160:	40000800 	.word	0x40000800

08005164 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b08c      	sub	sp, #48	@ 0x30
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800516c:	f107 031c 	add.w	r3, r7, #28
 8005170:	2200      	movs	r2, #0
 8005172:	601a      	str	r2, [r3, #0]
 8005174:	605a      	str	r2, [r3, #4]
 8005176:	609a      	str	r2, [r3, #8]
 8005178:	60da      	str	r2, [r3, #12]
 800517a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005184:	d14b      	bne.n	800521e <HAL_TIM_Encoder_MspInit+0xba>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005186:	2300      	movs	r3, #0
 8005188:	61bb      	str	r3, [r7, #24]
 800518a:	4b3f      	ldr	r3, [pc, #252]	@ (8005288 <HAL_TIM_Encoder_MspInit+0x124>)
 800518c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800518e:	4a3e      	ldr	r2, [pc, #248]	@ (8005288 <HAL_TIM_Encoder_MspInit+0x124>)
 8005190:	f043 0301 	orr.w	r3, r3, #1
 8005194:	6413      	str	r3, [r2, #64]	@ 0x40
 8005196:	4b3c      	ldr	r3, [pc, #240]	@ (8005288 <HAL_TIM_Encoder_MspInit+0x124>)
 8005198:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800519a:	f003 0301 	and.w	r3, r3, #1
 800519e:	61bb      	str	r3, [r7, #24]
 80051a0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80051a2:	2300      	movs	r3, #0
 80051a4:	617b      	str	r3, [r7, #20]
 80051a6:	4b38      	ldr	r3, [pc, #224]	@ (8005288 <HAL_TIM_Encoder_MspInit+0x124>)
 80051a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051aa:	4a37      	ldr	r2, [pc, #220]	@ (8005288 <HAL_TIM_Encoder_MspInit+0x124>)
 80051ac:	f043 0301 	orr.w	r3, r3, #1
 80051b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80051b2:	4b35      	ldr	r3, [pc, #212]	@ (8005288 <HAL_TIM_Encoder_MspInit+0x124>)
 80051b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051b6:	f003 0301 	and.w	r3, r3, #1
 80051ba:	617b      	str	r3, [r7, #20]
 80051bc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80051be:	2300      	movs	r3, #0
 80051c0:	613b      	str	r3, [r7, #16]
 80051c2:	4b31      	ldr	r3, [pc, #196]	@ (8005288 <HAL_TIM_Encoder_MspInit+0x124>)
 80051c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051c6:	4a30      	ldr	r2, [pc, #192]	@ (8005288 <HAL_TIM_Encoder_MspInit+0x124>)
 80051c8:	f043 0302 	orr.w	r3, r3, #2
 80051cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80051ce:	4b2e      	ldr	r3, [pc, #184]	@ (8005288 <HAL_TIM_Encoder_MspInit+0x124>)
 80051d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051d2:	f003 0302 	and.w	r3, r3, #2
 80051d6:	613b      	str	r3, [r7, #16]
 80051d8:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = EncoderA_Pin;
 80051da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80051de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051e0:	2302      	movs	r3, #2
 80051e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051e4:	2300      	movs	r3, #0
 80051e6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051e8:	2300      	movs	r3, #0
 80051ea:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80051ec:	2301      	movs	r3, #1
 80051ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(EncoderA_GPIO_Port, &GPIO_InitStruct);
 80051f0:	f107 031c 	add.w	r3, r7, #28
 80051f4:	4619      	mov	r1, r3
 80051f6:	4825      	ldr	r0, [pc, #148]	@ (800528c <HAL_TIM_Encoder_MspInit+0x128>)
 80051f8:	f001 fd06 	bl	8006c08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = EncoderAB3_Pin;
 80051fc:	2308      	movs	r3, #8
 80051fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005200:	2302      	movs	r3, #2
 8005202:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005204:	2300      	movs	r3, #0
 8005206:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005208:	2300      	movs	r3, #0
 800520a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800520c:	2301      	movs	r3, #1
 800520e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(EncoderAB3_GPIO_Port, &GPIO_InitStruct);
 8005210:	f107 031c 	add.w	r3, r7, #28
 8005214:	4619      	mov	r1, r3
 8005216:	481e      	ldr	r0, [pc, #120]	@ (8005290 <HAL_TIM_Encoder_MspInit+0x12c>)
 8005218:	f001 fcf6 	bl	8006c08 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM5_MspInit 1 */

    /* USER CODE END TIM5_MspInit 1 */
  }

}
 800521c:	e030      	b.n	8005280 <HAL_TIM_Encoder_MspInit+0x11c>
  else if(htim_encoder->Instance==TIM5)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4a1c      	ldr	r2, [pc, #112]	@ (8005294 <HAL_TIM_Encoder_MspInit+0x130>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d12b      	bne.n	8005280 <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8005228:	2300      	movs	r3, #0
 800522a:	60fb      	str	r3, [r7, #12]
 800522c:	4b16      	ldr	r3, [pc, #88]	@ (8005288 <HAL_TIM_Encoder_MspInit+0x124>)
 800522e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005230:	4a15      	ldr	r2, [pc, #84]	@ (8005288 <HAL_TIM_Encoder_MspInit+0x124>)
 8005232:	f043 0308 	orr.w	r3, r3, #8
 8005236:	6413      	str	r3, [r2, #64]	@ 0x40
 8005238:	4b13      	ldr	r3, [pc, #76]	@ (8005288 <HAL_TIM_Encoder_MspInit+0x124>)
 800523a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800523c:	f003 0308 	and.w	r3, r3, #8
 8005240:	60fb      	str	r3, [r7, #12]
 8005242:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005244:	2300      	movs	r3, #0
 8005246:	60bb      	str	r3, [r7, #8]
 8005248:	4b0f      	ldr	r3, [pc, #60]	@ (8005288 <HAL_TIM_Encoder_MspInit+0x124>)
 800524a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800524c:	4a0e      	ldr	r2, [pc, #56]	@ (8005288 <HAL_TIM_Encoder_MspInit+0x124>)
 800524e:	f043 0301 	orr.w	r3, r3, #1
 8005252:	6313      	str	r3, [r2, #48]	@ 0x30
 8005254:	4b0c      	ldr	r3, [pc, #48]	@ (8005288 <HAL_TIM_Encoder_MspInit+0x124>)
 8005256:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005258:	f003 0301 	and.w	r3, r3, #1
 800525c:	60bb      	str	r3, [r7, #8]
 800525e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = EncoderD_Pin|EncoderDA1_Pin;
 8005260:	2303      	movs	r3, #3
 8005262:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005264:	2302      	movs	r3, #2
 8005266:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005268:	2300      	movs	r3, #0
 800526a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800526c:	2300      	movs	r3, #0
 800526e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8005270:	2302      	movs	r3, #2
 8005272:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005274:	f107 031c 	add.w	r3, r7, #28
 8005278:	4619      	mov	r1, r3
 800527a:	4804      	ldr	r0, [pc, #16]	@ (800528c <HAL_TIM_Encoder_MspInit+0x128>)
 800527c:	f001 fcc4 	bl	8006c08 <HAL_GPIO_Init>
}
 8005280:	bf00      	nop
 8005282:	3730      	adds	r7, #48	@ 0x30
 8005284:	46bd      	mov	sp, r7
 8005286:	bd80      	pop	{r7, pc}
 8005288:	40023800 	.word	0x40023800
 800528c:	40020000 	.word	0x40020000
 8005290:	40020400 	.word	0x40020400
 8005294:	40000c00 	.word	0x40000c00

08005298 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b08a      	sub	sp, #40	@ 0x28
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80052a0:	f107 0314 	add.w	r3, r7, #20
 80052a4:	2200      	movs	r2, #0
 80052a6:	601a      	str	r2, [r3, #0]
 80052a8:	605a      	str	r2, [r3, #4]
 80052aa:	609a      	str	r2, [r3, #8]
 80052ac:	60da      	str	r2, [r3, #12]
 80052ae:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM3)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a27      	ldr	r2, [pc, #156]	@ (8005354 <HAL_TIM_Base_MspInit+0xbc>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d10e      	bne.n	80052d8 <HAL_TIM_Base_MspInit+0x40>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80052ba:	2300      	movs	r3, #0
 80052bc:	613b      	str	r3, [r7, #16]
 80052be:	4b26      	ldr	r3, [pc, #152]	@ (8005358 <HAL_TIM_Base_MspInit+0xc0>)
 80052c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052c2:	4a25      	ldr	r2, [pc, #148]	@ (8005358 <HAL_TIM_Base_MspInit+0xc0>)
 80052c4:	f043 0302 	orr.w	r3, r3, #2
 80052c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80052ca:	4b23      	ldr	r3, [pc, #140]	@ (8005358 <HAL_TIM_Base_MspInit+0xc0>)
 80052cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052ce:	f003 0302 	and.w	r3, r3, #2
 80052d2:	613b      	str	r3, [r7, #16]
 80052d4:	693b      	ldr	r3, [r7, #16]
    /* USER CODE BEGIN TIM12_MspInit 1 */

    /* USER CODE END TIM12_MspInit 1 */
  }

}
 80052d6:	e039      	b.n	800534c <HAL_TIM_Base_MspInit+0xb4>
  else if(htim_base->Instance==TIM12)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a1f      	ldr	r2, [pc, #124]	@ (800535c <HAL_TIM_Base_MspInit+0xc4>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d134      	bne.n	800534c <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM12_CLK_ENABLE();
 80052e2:	2300      	movs	r3, #0
 80052e4:	60fb      	str	r3, [r7, #12]
 80052e6:	4b1c      	ldr	r3, [pc, #112]	@ (8005358 <HAL_TIM_Base_MspInit+0xc0>)
 80052e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052ea:	4a1b      	ldr	r2, [pc, #108]	@ (8005358 <HAL_TIM_Base_MspInit+0xc0>)
 80052ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80052f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80052f2:	4b19      	ldr	r3, [pc, #100]	@ (8005358 <HAL_TIM_Base_MspInit+0xc0>)
 80052f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052fa:	60fb      	str	r3, [r7, #12]
 80052fc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80052fe:	2300      	movs	r3, #0
 8005300:	60bb      	str	r3, [r7, #8]
 8005302:	4b15      	ldr	r3, [pc, #84]	@ (8005358 <HAL_TIM_Base_MspInit+0xc0>)
 8005304:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005306:	4a14      	ldr	r2, [pc, #80]	@ (8005358 <HAL_TIM_Base_MspInit+0xc0>)
 8005308:	f043 0302 	orr.w	r3, r3, #2
 800530c:	6313      	str	r3, [r2, #48]	@ 0x30
 800530e:	4b12      	ldr	r3, [pc, #72]	@ (8005358 <HAL_TIM_Base_MspInit+0xc0>)
 8005310:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005312:	f003 0302 	and.w	r3, r3, #2
 8005316:	60bb      	str	r3, [r7, #8]
 8005318:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800531a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800531e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005320:	2302      	movs	r3, #2
 8005322:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005324:	2300      	movs	r3, #0
 8005326:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005328:	2300      	movs	r3, #0
 800532a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 800532c:	2309      	movs	r3, #9
 800532e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005330:	f107 0314 	add.w	r3, r7, #20
 8005334:	4619      	mov	r1, r3
 8005336:	480a      	ldr	r0, [pc, #40]	@ (8005360 <HAL_TIM_Base_MspInit+0xc8>)
 8005338:	f001 fc66 	bl	8006c08 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 5, 0);
 800533c:	2200      	movs	r2, #0
 800533e:	2105      	movs	r1, #5
 8005340:	202b      	movs	r0, #43	@ 0x2b
 8005342:	f001 f835 	bl	80063b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8005346:	202b      	movs	r0, #43	@ 0x2b
 8005348:	f001 f84e 	bl	80063e8 <HAL_NVIC_EnableIRQ>
}
 800534c:	bf00      	nop
 800534e:	3728      	adds	r7, #40	@ 0x28
 8005350:	46bd      	mov	sp, r7
 8005352:	bd80      	pop	{r7, pc}
 8005354:	40000400 	.word	0x40000400
 8005358:	40023800 	.word	0x40023800
 800535c:	40001800 	.word	0x40001800
 8005360:	40020400 	.word	0x40020400

08005364 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b08a      	sub	sp, #40	@ 0x28
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800536c:	f107 0314 	add.w	r3, r7, #20
 8005370:	2200      	movs	r2, #0
 8005372:	601a      	str	r2, [r3, #0]
 8005374:	605a      	str	r2, [r3, #4]
 8005376:	609a      	str	r2, [r3, #8]
 8005378:	60da      	str	r2, [r3, #12]
 800537a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a37      	ldr	r2, [pc, #220]	@ (8005460 <HAL_TIM_MspPostInit+0xfc>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d11f      	bne.n	80053c6 <HAL_TIM_MspPostInit+0x62>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005386:	2300      	movs	r3, #0
 8005388:	613b      	str	r3, [r7, #16]
 800538a:	4b36      	ldr	r3, [pc, #216]	@ (8005464 <HAL_TIM_MspPostInit+0x100>)
 800538c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800538e:	4a35      	ldr	r2, [pc, #212]	@ (8005464 <HAL_TIM_MspPostInit+0x100>)
 8005390:	f043 0310 	orr.w	r3, r3, #16
 8005394:	6313      	str	r3, [r2, #48]	@ 0x30
 8005396:	4b33      	ldr	r3, [pc, #204]	@ (8005464 <HAL_TIM_MspPostInit+0x100>)
 8005398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800539a:	f003 0310 	and.w	r3, r3, #16
 800539e:	613b      	str	r3, [r7, #16]
 80053a0:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = MotorD_IN2_Pin|MotorD_IN1_Pin;
 80053a2:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80053a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053a8:	2302      	movs	r3, #2
 80053aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053ac:	2300      	movs	r3, #0
 80053ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80053b0:	2300      	movs	r3, #0
 80053b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80053b4:	2301      	movs	r3, #1
 80053b6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80053b8:	f107 0314 	add.w	r3, r7, #20
 80053bc:	4619      	mov	r1, r3
 80053be:	482a      	ldr	r0, [pc, #168]	@ (8005468 <HAL_TIM_MspPostInit+0x104>)
 80053c0:	f001 fc22 	bl	8006c08 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM4_MspPostInit 1 */

    /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80053c4:	e048      	b.n	8005458 <HAL_TIM_MspPostInit+0xf4>
  else if(htim->Instance==TIM3)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4a28      	ldr	r2, [pc, #160]	@ (800546c <HAL_TIM_MspPostInit+0x108>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d11f      	bne.n	8005410 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80053d0:	2300      	movs	r3, #0
 80053d2:	60fb      	str	r3, [r7, #12]
 80053d4:	4b23      	ldr	r3, [pc, #140]	@ (8005464 <HAL_TIM_MspPostInit+0x100>)
 80053d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053d8:	4a22      	ldr	r2, [pc, #136]	@ (8005464 <HAL_TIM_MspPostInit+0x100>)
 80053da:	f043 0304 	orr.w	r3, r3, #4
 80053de:	6313      	str	r3, [r2, #48]	@ 0x30
 80053e0:	4b20      	ldr	r3, [pc, #128]	@ (8005464 <HAL_TIM_MspPostInit+0x100>)
 80053e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053e4:	f003 0304 	and.w	r3, r3, #4
 80053e8:	60fb      	str	r3, [r7, #12]
 80053ea:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80053ec:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80053f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053f2:	2302      	movs	r3, #2
 80053f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053f6:	2300      	movs	r3, #0
 80053f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80053fa:	2300      	movs	r3, #0
 80053fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80053fe:	2302      	movs	r3, #2
 8005400:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005402:	f107 0314 	add.w	r3, r7, #20
 8005406:	4619      	mov	r1, r3
 8005408:	4819      	ldr	r0, [pc, #100]	@ (8005470 <HAL_TIM_MspPostInit+0x10c>)
 800540a:	f001 fbfd 	bl	8006c08 <HAL_GPIO_Init>
}
 800540e:	e023      	b.n	8005458 <HAL_TIM_MspPostInit+0xf4>
  else if(htim->Instance==TIM4)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4a17      	ldr	r2, [pc, #92]	@ (8005474 <HAL_TIM_MspPostInit+0x110>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d11e      	bne.n	8005458 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800541a:	2300      	movs	r3, #0
 800541c:	60bb      	str	r3, [r7, #8]
 800541e:	4b11      	ldr	r3, [pc, #68]	@ (8005464 <HAL_TIM_MspPostInit+0x100>)
 8005420:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005422:	4a10      	ldr	r2, [pc, #64]	@ (8005464 <HAL_TIM_MspPostInit+0x100>)
 8005424:	f043 0302 	orr.w	r3, r3, #2
 8005428:	6313      	str	r3, [r2, #48]	@ 0x30
 800542a:	4b0e      	ldr	r3, [pc, #56]	@ (8005464 <HAL_TIM_MspPostInit+0x100>)
 800542c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800542e:	f003 0302 	and.w	r3, r3, #2
 8005432:	60bb      	str	r3, [r7, #8]
 8005434:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MotorA_IN2_Pin|MotorA_IN1_Pin;
 8005436:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800543a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800543c:	2302      	movs	r3, #2
 800543e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005440:	2300      	movs	r3, #0
 8005442:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005444:	2300      	movs	r3, #0
 8005446:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8005448:	2302      	movs	r3, #2
 800544a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800544c:	f107 0314 	add.w	r3, r7, #20
 8005450:	4619      	mov	r1, r3
 8005452:	4809      	ldr	r0, [pc, #36]	@ (8005478 <HAL_TIM_MspPostInit+0x114>)
 8005454:	f001 fbd8 	bl	8006c08 <HAL_GPIO_Init>
}
 8005458:	bf00      	nop
 800545a:	3728      	adds	r7, #40	@ 0x28
 800545c:	46bd      	mov	sp, r7
 800545e:	bd80      	pop	{r7, pc}
 8005460:	40010000 	.word	0x40010000
 8005464:	40023800 	.word	0x40023800
 8005468:	40021000 	.word	0x40021000
 800546c:	40000400 	.word	0x40000400
 8005470:	40020800 	.word	0x40020800
 8005474:	40000800 	.word	0x40000800
 8005478:	40020400 	.word	0x40020400

0800547c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b08c      	sub	sp, #48	@ 0x30
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005484:	f107 031c 	add.w	r3, r7, #28
 8005488:	2200      	movs	r2, #0
 800548a:	601a      	str	r2, [r3, #0]
 800548c:	605a      	str	r2, [r3, #4]
 800548e:	609a      	str	r2, [r3, #8]
 8005490:	60da      	str	r2, [r3, #12]
 8005492:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a4e      	ldr	r2, [pc, #312]	@ (80055d4 <HAL_UART_MspInit+0x158>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d12d      	bne.n	80054fa <HAL_UART_MspInit+0x7e>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800549e:	2300      	movs	r3, #0
 80054a0:	61bb      	str	r3, [r7, #24]
 80054a2:	4b4d      	ldr	r3, [pc, #308]	@ (80055d8 <HAL_UART_MspInit+0x15c>)
 80054a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054a6:	4a4c      	ldr	r2, [pc, #304]	@ (80055d8 <HAL_UART_MspInit+0x15c>)
 80054a8:	f043 0310 	orr.w	r3, r3, #16
 80054ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80054ae:	4b4a      	ldr	r3, [pc, #296]	@ (80055d8 <HAL_UART_MspInit+0x15c>)
 80054b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054b2:	f003 0310 	and.w	r3, r3, #16
 80054b6:	61bb      	str	r3, [r7, #24]
 80054b8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80054ba:	2300      	movs	r3, #0
 80054bc:	617b      	str	r3, [r7, #20]
 80054be:	4b46      	ldr	r3, [pc, #280]	@ (80055d8 <HAL_UART_MspInit+0x15c>)
 80054c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054c2:	4a45      	ldr	r2, [pc, #276]	@ (80055d8 <HAL_UART_MspInit+0x15c>)
 80054c4:	f043 0301 	orr.w	r3, r3, #1
 80054c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80054ca:	4b43      	ldr	r3, [pc, #268]	@ (80055d8 <HAL_UART_MspInit+0x15c>)
 80054cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054ce:	f003 0301 	and.w	r3, r3, #1
 80054d2:	617b      	str	r3, [r7, #20]
 80054d4:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80054d6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80054da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054dc:	2302      	movs	r3, #2
 80054de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054e0:	2300      	movs	r3, #0
 80054e2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80054e4:	2303      	movs	r3, #3
 80054e6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80054e8:	2307      	movs	r3, #7
 80054ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80054ec:	f107 031c 	add.w	r3, r7, #28
 80054f0:	4619      	mov	r1, r3
 80054f2:	483a      	ldr	r0, [pc, #232]	@ (80055dc <HAL_UART_MspInit+0x160>)
 80054f4:	f001 fb88 	bl	8006c08 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 80054f8:	e067      	b.n	80055ca <HAL_UART_MspInit+0x14e>
  else if(huart->Instance==USART3)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4a38      	ldr	r2, [pc, #224]	@ (80055e0 <HAL_UART_MspInit+0x164>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d162      	bne.n	80055ca <HAL_UART_MspInit+0x14e>
    __HAL_RCC_USART3_CLK_ENABLE();
 8005504:	2300      	movs	r3, #0
 8005506:	613b      	str	r3, [r7, #16]
 8005508:	4b33      	ldr	r3, [pc, #204]	@ (80055d8 <HAL_UART_MspInit+0x15c>)
 800550a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800550c:	4a32      	ldr	r2, [pc, #200]	@ (80055d8 <HAL_UART_MspInit+0x15c>)
 800550e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005512:	6413      	str	r3, [r2, #64]	@ 0x40
 8005514:	4b30      	ldr	r3, [pc, #192]	@ (80055d8 <HAL_UART_MspInit+0x15c>)
 8005516:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005518:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800551c:	613b      	str	r3, [r7, #16]
 800551e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005520:	2300      	movs	r3, #0
 8005522:	60fb      	str	r3, [r7, #12]
 8005524:	4b2c      	ldr	r3, [pc, #176]	@ (80055d8 <HAL_UART_MspInit+0x15c>)
 8005526:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005528:	4a2b      	ldr	r2, [pc, #172]	@ (80055d8 <HAL_UART_MspInit+0x15c>)
 800552a:	f043 0308 	orr.w	r3, r3, #8
 800552e:	6313      	str	r3, [r2, #48]	@ 0x30
 8005530:	4b29      	ldr	r3, [pc, #164]	@ (80055d8 <HAL_UART_MspInit+0x15c>)
 8005532:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005534:	f003 0308 	and.w	r3, r3, #8
 8005538:	60fb      	str	r3, [r7, #12]
 800553a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800553c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8005540:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005542:	2302      	movs	r3, #2
 8005544:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005546:	2300      	movs	r3, #0
 8005548:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800554a:	2303      	movs	r3, #3
 800554c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800554e:	2307      	movs	r3, #7
 8005550:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005552:	f107 031c 	add.w	r3, r7, #28
 8005556:	4619      	mov	r1, r3
 8005558:	4822      	ldr	r0, [pc, #136]	@ (80055e4 <HAL_UART_MspInit+0x168>)
 800555a:	f001 fb55 	bl	8006c08 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 800555e:	4b22      	ldr	r3, [pc, #136]	@ (80055e8 <HAL_UART_MspInit+0x16c>)
 8005560:	4a22      	ldr	r2, [pc, #136]	@ (80055ec <HAL_UART_MspInit+0x170>)
 8005562:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8005564:	4b20      	ldr	r3, [pc, #128]	@ (80055e8 <HAL_UART_MspInit+0x16c>)
 8005566:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800556a:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800556c:	4b1e      	ldr	r3, [pc, #120]	@ (80055e8 <HAL_UART_MspInit+0x16c>)
 800556e:	2200      	movs	r2, #0
 8005570:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005572:	4b1d      	ldr	r3, [pc, #116]	@ (80055e8 <HAL_UART_MspInit+0x16c>)
 8005574:	2200      	movs	r2, #0
 8005576:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005578:	4b1b      	ldr	r3, [pc, #108]	@ (80055e8 <HAL_UART_MspInit+0x16c>)
 800557a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800557e:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005580:	4b19      	ldr	r3, [pc, #100]	@ (80055e8 <HAL_UART_MspInit+0x16c>)
 8005582:	2200      	movs	r2, #0
 8005584:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005586:	4b18      	ldr	r3, [pc, #96]	@ (80055e8 <HAL_UART_MspInit+0x16c>)
 8005588:	2200      	movs	r2, #0
 800558a:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 800558c:	4b16      	ldr	r3, [pc, #88]	@ (80055e8 <HAL_UART_MspInit+0x16c>)
 800558e:	2200      	movs	r2, #0
 8005590:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005592:	4b15      	ldr	r3, [pc, #84]	@ (80055e8 <HAL_UART_MspInit+0x16c>)
 8005594:	2200      	movs	r2, #0
 8005596:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005598:	4b13      	ldr	r3, [pc, #76]	@ (80055e8 <HAL_UART_MspInit+0x16c>)
 800559a:	2200      	movs	r2, #0
 800559c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800559e:	4812      	ldr	r0, [pc, #72]	@ (80055e8 <HAL_UART_MspInit+0x16c>)
 80055a0:	f000 ff30 	bl	8006404 <HAL_DMA_Init>
 80055a4:	4603      	mov	r3, r0
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d001      	beq.n	80055ae <HAL_UART_MspInit+0x132>
      Error_Handler();
 80055aa:	f7fd fd81 	bl	80030b0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	4a0d      	ldr	r2, [pc, #52]	@ (80055e8 <HAL_UART_MspInit+0x16c>)
 80055b2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80055b4:	4a0c      	ldr	r2, [pc, #48]	@ (80055e8 <HAL_UART_MspInit+0x16c>)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80055ba:	2200      	movs	r2, #0
 80055bc:	2105      	movs	r1, #5
 80055be:	2027      	movs	r0, #39	@ 0x27
 80055c0:	f000 fef6 	bl	80063b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80055c4:	2027      	movs	r0, #39	@ 0x27
 80055c6:	f000 ff0f 	bl	80063e8 <HAL_NVIC_EnableIRQ>
}
 80055ca:	bf00      	nop
 80055cc:	3730      	adds	r7, #48	@ 0x30
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}
 80055d2:	bf00      	nop
 80055d4:	40011000 	.word	0x40011000
 80055d8:	40023800 	.word	0x40023800
 80055dc:	40020000 	.word	0x40020000
 80055e0:	40004800 	.word	0x40004800
 80055e4:	40020c00 	.word	0x40020c00
 80055e8:	20000558 	.word	0x20000558
 80055ec:	40026028 	.word	0x40026028

080055f0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b08e      	sub	sp, #56	@ 0x38
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80055f8:	2300      	movs	r3, #0
 80055fa:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80055fc:	2300      	movs	r3, #0
 80055fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8005600:	2300      	movs	r3, #0
 8005602:	60fb      	str	r3, [r7, #12]
 8005604:	4b33      	ldr	r3, [pc, #204]	@ (80056d4 <HAL_InitTick+0xe4>)
 8005606:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005608:	4a32      	ldr	r2, [pc, #200]	@ (80056d4 <HAL_InitTick+0xe4>)
 800560a:	f043 0310 	orr.w	r3, r3, #16
 800560e:	6413      	str	r3, [r2, #64]	@ 0x40
 8005610:	4b30      	ldr	r3, [pc, #192]	@ (80056d4 <HAL_InitTick+0xe4>)
 8005612:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005614:	f003 0310 	and.w	r3, r3, #16
 8005618:	60fb      	str	r3, [r7, #12]
 800561a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800561c:	f107 0210 	add.w	r2, r7, #16
 8005620:	f107 0314 	add.w	r3, r7, #20
 8005624:	4611      	mov	r1, r2
 8005626:	4618      	mov	r0, r3
 8005628:	f003 f948 	bl	80088bc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800562c:	6a3b      	ldr	r3, [r7, #32]
 800562e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8005630:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005632:	2b00      	cmp	r3, #0
 8005634:	d103      	bne.n	800563e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8005636:	f003 f919 	bl	800886c <HAL_RCC_GetPCLK1Freq>
 800563a:	6378      	str	r0, [r7, #52]	@ 0x34
 800563c:	e004      	b.n	8005648 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800563e:	f003 f915 	bl	800886c <HAL_RCC_GetPCLK1Freq>
 8005642:	4603      	mov	r3, r0
 8005644:	005b      	lsls	r3, r3, #1
 8005646:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8005648:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800564a:	4a23      	ldr	r2, [pc, #140]	@ (80056d8 <HAL_InitTick+0xe8>)
 800564c:	fba2 2303 	umull	r2, r3, r2, r3
 8005650:	0c9b      	lsrs	r3, r3, #18
 8005652:	3b01      	subs	r3, #1
 8005654:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8005656:	4b21      	ldr	r3, [pc, #132]	@ (80056dc <HAL_InitTick+0xec>)
 8005658:	4a21      	ldr	r2, [pc, #132]	@ (80056e0 <HAL_InitTick+0xf0>)
 800565a:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800565c:	4b1f      	ldr	r3, [pc, #124]	@ (80056dc <HAL_InitTick+0xec>)
 800565e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8005662:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8005664:	4a1d      	ldr	r2, [pc, #116]	@ (80056dc <HAL_InitTick+0xec>)
 8005666:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005668:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800566a:	4b1c      	ldr	r3, [pc, #112]	@ (80056dc <HAL_InitTick+0xec>)
 800566c:	2200      	movs	r2, #0
 800566e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005670:	4b1a      	ldr	r3, [pc, #104]	@ (80056dc <HAL_InitTick+0xec>)
 8005672:	2200      	movs	r2, #0
 8005674:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005676:	4b19      	ldr	r3, [pc, #100]	@ (80056dc <HAL_InitTick+0xec>)
 8005678:	2200      	movs	r2, #0
 800567a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800567c:	4817      	ldr	r0, [pc, #92]	@ (80056dc <HAL_InitTick+0xec>)
 800567e:	f003 f94f 	bl	8008920 <HAL_TIM_Base_Init>
 8005682:	4603      	mov	r3, r0
 8005684:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8005688:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800568c:	2b00      	cmp	r3, #0
 800568e:	d11b      	bne.n	80056c8 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8005690:	4812      	ldr	r0, [pc, #72]	@ (80056dc <HAL_InitTick+0xec>)
 8005692:	f003 f995 	bl	80089c0 <HAL_TIM_Base_Start_IT>
 8005696:	4603      	mov	r3, r0
 8005698:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800569c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d111      	bne.n	80056c8 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80056a4:	2036      	movs	r0, #54	@ 0x36
 80056a6:	f000 fe9f 	bl	80063e8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2b0f      	cmp	r3, #15
 80056ae:	d808      	bhi.n	80056c2 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80056b0:	2200      	movs	r2, #0
 80056b2:	6879      	ldr	r1, [r7, #4]
 80056b4:	2036      	movs	r0, #54	@ 0x36
 80056b6:	f000 fe7b 	bl	80063b0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80056ba:	4a0a      	ldr	r2, [pc, #40]	@ (80056e4 <HAL_InitTick+0xf4>)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6013      	str	r3, [r2, #0]
 80056c0:	e002      	b.n	80056c8 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80056c2:	2301      	movs	r3, #1
 80056c4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80056c8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80056cc:	4618      	mov	r0, r3
 80056ce:	3738      	adds	r7, #56	@ 0x38
 80056d0:	46bd      	mov	sp, r7
 80056d2:	bd80      	pop	{r7, pc}
 80056d4:	40023800 	.word	0x40023800
 80056d8:	431bde83 	.word	0x431bde83
 80056dc:	20000a94 	.word	0x20000a94
 80056e0:	40001000 	.word	0x40001000
 80056e4:	20000014 	.word	0x20000014

080056e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80056e8:	b480      	push	{r7}
 80056ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80056ec:	bf00      	nop
 80056ee:	e7fd      	b.n	80056ec <NMI_Handler+0x4>

080056f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80056f0:	b480      	push	{r7}
 80056f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80056f4:	bf00      	nop
 80056f6:	e7fd      	b.n	80056f4 <HardFault_Handler+0x4>

080056f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80056f8:	b480      	push	{r7}
 80056fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80056fc:	bf00      	nop
 80056fe:	e7fd      	b.n	80056fc <MemManage_Handler+0x4>

08005700 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005700:	b480      	push	{r7}
 8005702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005704:	bf00      	nop
 8005706:	e7fd      	b.n	8005704 <BusFault_Handler+0x4>

08005708 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005708:	b480      	push	{r7}
 800570a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800570c:	bf00      	nop
 800570e:	e7fd      	b.n	800570c <UsageFault_Handler+0x4>

08005710 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005710:	b480      	push	{r7}
 8005712:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005714:	bf00      	nop
 8005716:	46bd      	mov	sp, r7
 8005718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571c:	4770      	bx	lr
	...

08005720 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8005724:	4802      	ldr	r0, [pc, #8]	@ (8005730 <DMA1_Stream1_IRQHandler+0x10>)
 8005726:	f001 f805 	bl	8006734 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800572a:	bf00      	nop
 800572c:	bd80      	pop	{r7, pc}
 800572e:	bf00      	nop
 8005730:	20000558 	.word	0x20000558

08005734 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8005738:	4802      	ldr	r0, [pc, #8]	@ (8005744 <USART3_IRQHandler+0x10>)
 800573a:	f004 ffbd 	bl	800a6b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800573e:	bf00      	nop
 8005740:	bd80      	pop	{r7, pc}
 8005742:	bf00      	nop
 8005744:	20000510 	.word	0x20000510

08005748 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 800574c:	4802      	ldr	r0, [pc, #8]	@ (8005758 <TIM8_BRK_TIM12_IRQHandler+0x10>)
 800574e:	f003 fe19 	bl	8009384 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8005752:	bf00      	nop
 8005754:	bd80      	pop	{r7, pc}
 8005756:	bf00      	nop
 8005758:	20000480 	.word	0x20000480

0800575c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8005760:	4802      	ldr	r0, [pc, #8]	@ (800576c <TIM6_DAC_IRQHandler+0x10>)
 8005762:	f003 fe0f 	bl	8009384 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8005766:	bf00      	nop
 8005768:	bd80      	pop	{r7, pc}
 800576a:	bf00      	nop
 800576c:	20000a94 	.word	0x20000a94

08005770 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005770:	b480      	push	{r7}
 8005772:	af00      	add	r7, sp, #0
  return 1;
 8005774:	2301      	movs	r3, #1
}
 8005776:	4618      	mov	r0, r3
 8005778:	46bd      	mov	sp, r7
 800577a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577e:	4770      	bx	lr

08005780 <_kill>:

int _kill(int pid, int sig)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b082      	sub	sp, #8
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
 8005788:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800578a:	f009 ffc5 	bl	800f718 <__errno>
 800578e:	4603      	mov	r3, r0
 8005790:	2216      	movs	r2, #22
 8005792:	601a      	str	r2, [r3, #0]
  return -1;
 8005794:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005798:	4618      	mov	r0, r3
 800579a:	3708      	adds	r7, #8
 800579c:	46bd      	mov	sp, r7
 800579e:	bd80      	pop	{r7, pc}

080057a0 <_exit>:

void _exit (int status)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b082      	sub	sp, #8
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80057a8:	f04f 31ff 	mov.w	r1, #4294967295
 80057ac:	6878      	ldr	r0, [r7, #4]
 80057ae:	f7ff ffe7 	bl	8005780 <_kill>
  while (1) {}    /* Make sure we hang here */
 80057b2:	bf00      	nop
 80057b4:	e7fd      	b.n	80057b2 <_exit+0x12>

080057b6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80057b6:	b580      	push	{r7, lr}
 80057b8:	b086      	sub	sp, #24
 80057ba:	af00      	add	r7, sp, #0
 80057bc:	60f8      	str	r0, [r7, #12]
 80057be:	60b9      	str	r1, [r7, #8]
 80057c0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80057c2:	2300      	movs	r3, #0
 80057c4:	617b      	str	r3, [r7, #20]
 80057c6:	e00a      	b.n	80057de <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80057c8:	f3af 8000 	nop.w
 80057cc:	4601      	mov	r1, r0
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	1c5a      	adds	r2, r3, #1
 80057d2:	60ba      	str	r2, [r7, #8]
 80057d4:	b2ca      	uxtb	r2, r1
 80057d6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80057d8:	697b      	ldr	r3, [r7, #20]
 80057da:	3301      	adds	r3, #1
 80057dc:	617b      	str	r3, [r7, #20]
 80057de:	697a      	ldr	r2, [r7, #20]
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	429a      	cmp	r2, r3
 80057e4:	dbf0      	blt.n	80057c8 <_read+0x12>
  }

  return len;
 80057e6:	687b      	ldr	r3, [r7, #4]
}
 80057e8:	4618      	mov	r0, r3
 80057ea:	3718      	adds	r7, #24
 80057ec:	46bd      	mov	sp, r7
 80057ee:	bd80      	pop	{r7, pc}

080057f0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b086      	sub	sp, #24
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	60f8      	str	r0, [r7, #12]
 80057f8:	60b9      	str	r1, [r7, #8]
 80057fa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80057fc:	2300      	movs	r3, #0
 80057fe:	617b      	str	r3, [r7, #20]
 8005800:	e009      	b.n	8005816 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	1c5a      	adds	r2, r3, #1
 8005806:	60ba      	str	r2, [r7, #8]
 8005808:	781b      	ldrb	r3, [r3, #0]
 800580a:	4618      	mov	r0, r3
 800580c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005810:	697b      	ldr	r3, [r7, #20]
 8005812:	3301      	adds	r3, #1
 8005814:	617b      	str	r3, [r7, #20]
 8005816:	697a      	ldr	r2, [r7, #20]
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	429a      	cmp	r2, r3
 800581c:	dbf1      	blt.n	8005802 <_write+0x12>
  }
  return len;
 800581e:	687b      	ldr	r3, [r7, #4]
}
 8005820:	4618      	mov	r0, r3
 8005822:	3718      	adds	r7, #24
 8005824:	46bd      	mov	sp, r7
 8005826:	bd80      	pop	{r7, pc}

08005828 <_close>:

int _close(int file)
{
 8005828:	b480      	push	{r7}
 800582a:	b083      	sub	sp, #12
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8005830:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005834:	4618      	mov	r0, r3
 8005836:	370c      	adds	r7, #12
 8005838:	46bd      	mov	sp, r7
 800583a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583e:	4770      	bx	lr

08005840 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005840:	b480      	push	{r7}
 8005842:	b083      	sub	sp, #12
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
 8005848:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005850:	605a      	str	r2, [r3, #4]
  return 0;
 8005852:	2300      	movs	r3, #0
}
 8005854:	4618      	mov	r0, r3
 8005856:	370c      	adds	r7, #12
 8005858:	46bd      	mov	sp, r7
 800585a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585e:	4770      	bx	lr

08005860 <_isatty>:

int _isatty(int file)
{
 8005860:	b480      	push	{r7}
 8005862:	b083      	sub	sp, #12
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005868:	2301      	movs	r3, #1
}
 800586a:	4618      	mov	r0, r3
 800586c:	370c      	adds	r7, #12
 800586e:	46bd      	mov	sp, r7
 8005870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005874:	4770      	bx	lr

08005876 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005876:	b480      	push	{r7}
 8005878:	b085      	sub	sp, #20
 800587a:	af00      	add	r7, sp, #0
 800587c:	60f8      	str	r0, [r7, #12]
 800587e:	60b9      	str	r1, [r7, #8]
 8005880:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005882:	2300      	movs	r3, #0
}
 8005884:	4618      	mov	r0, r3
 8005886:	3714      	adds	r7, #20
 8005888:	46bd      	mov	sp, r7
 800588a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588e:	4770      	bx	lr

08005890 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b086      	sub	sp, #24
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005898:	4a14      	ldr	r2, [pc, #80]	@ (80058ec <_sbrk+0x5c>)
 800589a:	4b15      	ldr	r3, [pc, #84]	@ (80058f0 <_sbrk+0x60>)
 800589c:	1ad3      	subs	r3, r2, r3
 800589e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80058a4:	4b13      	ldr	r3, [pc, #76]	@ (80058f4 <_sbrk+0x64>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d102      	bne.n	80058b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80058ac:	4b11      	ldr	r3, [pc, #68]	@ (80058f4 <_sbrk+0x64>)
 80058ae:	4a12      	ldr	r2, [pc, #72]	@ (80058f8 <_sbrk+0x68>)
 80058b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80058b2:	4b10      	ldr	r3, [pc, #64]	@ (80058f4 <_sbrk+0x64>)
 80058b4:	681a      	ldr	r2, [r3, #0]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	4413      	add	r3, r2
 80058ba:	693a      	ldr	r2, [r7, #16]
 80058bc:	429a      	cmp	r2, r3
 80058be:	d207      	bcs.n	80058d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80058c0:	f009 ff2a 	bl	800f718 <__errno>
 80058c4:	4603      	mov	r3, r0
 80058c6:	220c      	movs	r2, #12
 80058c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80058ca:	f04f 33ff 	mov.w	r3, #4294967295
 80058ce:	e009      	b.n	80058e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80058d0:	4b08      	ldr	r3, [pc, #32]	@ (80058f4 <_sbrk+0x64>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80058d6:	4b07      	ldr	r3, [pc, #28]	@ (80058f4 <_sbrk+0x64>)
 80058d8:	681a      	ldr	r2, [r3, #0]
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	4413      	add	r3, r2
 80058de:	4a05      	ldr	r2, [pc, #20]	@ (80058f4 <_sbrk+0x64>)
 80058e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80058e2:	68fb      	ldr	r3, [r7, #12]
}
 80058e4:	4618      	mov	r0, r3
 80058e6:	3718      	adds	r7, #24
 80058e8:	46bd      	mov	sp, r7
 80058ea:	bd80      	pop	{r7, pc}
 80058ec:	20020000 	.word	0x20020000
 80058f0:	00000400 	.word	0x00000400
 80058f4:	20000adc 	.word	0x20000adc
 80058f8:	20005618 	.word	0x20005618

080058fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80058fc:	b480      	push	{r7}
 80058fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005900:	4b06      	ldr	r3, [pc, #24]	@ (800591c <SystemInit+0x20>)
 8005902:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005906:	4a05      	ldr	r2, [pc, #20]	@ (800591c <SystemInit+0x20>)
 8005908:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800590c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005910:	bf00      	nop
 8005912:	46bd      	mov	sp, r7
 8005914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005918:	4770      	bx	lr
 800591a:	bf00      	nop
 800591c:	e000ed00 	.word	0xe000ed00

08005920 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
	  ldr   sp, =_estack     /* set stack pointer */
 8005920:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8005958 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8005924:	f7ff ffea 	bl	80058fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005928:	480c      	ldr	r0, [pc, #48]	@ (800595c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800592a:	490d      	ldr	r1, [pc, #52]	@ (8005960 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800592c:	4a0d      	ldr	r2, [pc, #52]	@ (8005964 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800592e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005930:	e002      	b.n	8005938 <LoopCopyDataInit>

08005932 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005932:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005934:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005936:	3304      	adds	r3, #4

08005938 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005938:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800593a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800593c:	d3f9      	bcc.n	8005932 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800593e:	4a0a      	ldr	r2, [pc, #40]	@ (8005968 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005940:	4c0a      	ldr	r4, [pc, #40]	@ (800596c <LoopFillZerobss+0x22>)
  movs r3, #0
 8005942:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005944:	e001      	b.n	800594a <LoopFillZerobss>

08005946 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005946:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005948:	3204      	adds	r2, #4

0800594a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800594a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800594c:	d3fb      	bcc.n	8005946 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800594e:	f009 fee9 	bl	800f724 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005952:	f7fc fa75 	bl	8001e40 <main>
  bx  lr    
 8005956:	4770      	bx	lr
	  ldr   sp, =_estack     /* set stack pointer */
 8005958:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800595c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005960:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8005964:	08013080 	.word	0x08013080
  ldr r2, =_sbss
 8005968:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 800596c:	20005618 	.word	0x20005618

08005970 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005970:	e7fe      	b.n	8005970 <ADC_IRQHandler>
	...

08005974 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005978:	4b0e      	ldr	r3, [pc, #56]	@ (80059b4 <HAL_Init+0x40>)
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a0d      	ldr	r2, [pc, #52]	@ (80059b4 <HAL_Init+0x40>)
 800597e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005982:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005984:	4b0b      	ldr	r3, [pc, #44]	@ (80059b4 <HAL_Init+0x40>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a0a      	ldr	r2, [pc, #40]	@ (80059b4 <HAL_Init+0x40>)
 800598a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800598e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005990:	4b08      	ldr	r3, [pc, #32]	@ (80059b4 <HAL_Init+0x40>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a07      	ldr	r2, [pc, #28]	@ (80059b4 <HAL_Init+0x40>)
 8005996:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800599a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800599c:	2003      	movs	r0, #3
 800599e:	f000 fcfc 	bl	800639a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80059a2:	200f      	movs	r0, #15
 80059a4:	f7ff fe24 	bl	80055f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80059a8:	f7ff faec 	bl	8004f84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80059ac:	2300      	movs	r3, #0
}
 80059ae:	4618      	mov	r0, r3
 80059b0:	bd80      	pop	{r7, pc}
 80059b2:	bf00      	nop
 80059b4:	40023c00 	.word	0x40023c00

080059b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80059b8:	b480      	push	{r7}
 80059ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80059bc:	4b06      	ldr	r3, [pc, #24]	@ (80059d8 <HAL_IncTick+0x20>)
 80059be:	781b      	ldrb	r3, [r3, #0]
 80059c0:	461a      	mov	r2, r3
 80059c2:	4b06      	ldr	r3, [pc, #24]	@ (80059dc <HAL_IncTick+0x24>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4413      	add	r3, r2
 80059c8:	4a04      	ldr	r2, [pc, #16]	@ (80059dc <HAL_IncTick+0x24>)
 80059ca:	6013      	str	r3, [r2, #0]
}
 80059cc:	bf00      	nop
 80059ce:	46bd      	mov	sp, r7
 80059d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d4:	4770      	bx	lr
 80059d6:	bf00      	nop
 80059d8:	20000018 	.word	0x20000018
 80059dc:	20000ae0 	.word	0x20000ae0

080059e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80059e0:	b480      	push	{r7}
 80059e2:	af00      	add	r7, sp, #0
  return uwTick;
 80059e4:	4b03      	ldr	r3, [pc, #12]	@ (80059f4 <HAL_GetTick+0x14>)
 80059e6:	681b      	ldr	r3, [r3, #0]
}
 80059e8:	4618      	mov	r0, r3
 80059ea:	46bd      	mov	sp, r7
 80059ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f0:	4770      	bx	lr
 80059f2:	bf00      	nop
 80059f4:	20000ae0 	.word	0x20000ae0

080059f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b084      	sub	sp, #16
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005a00:	f7ff ffee 	bl	80059e0 <HAL_GetTick>
 8005a04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a10:	d005      	beq.n	8005a1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005a12:	4b0a      	ldr	r3, [pc, #40]	@ (8005a3c <HAL_Delay+0x44>)
 8005a14:	781b      	ldrb	r3, [r3, #0]
 8005a16:	461a      	mov	r2, r3
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	4413      	add	r3, r2
 8005a1c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005a1e:	bf00      	nop
 8005a20:	f7ff ffde 	bl	80059e0 <HAL_GetTick>
 8005a24:	4602      	mov	r2, r0
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	1ad3      	subs	r3, r2, r3
 8005a2a:	68fa      	ldr	r2, [r7, #12]
 8005a2c:	429a      	cmp	r2, r3
 8005a2e:	d8f7      	bhi.n	8005a20 <HAL_Delay+0x28>
  {
  }
}
 8005a30:	bf00      	nop
 8005a32:	bf00      	nop
 8005a34:	3710      	adds	r7, #16
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bd80      	pop	{r7, pc}
 8005a3a:	bf00      	nop
 8005a3c:	20000018 	.word	0x20000018

08005a40 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b084      	sub	sp, #16
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005a48:	2300      	movs	r3, #0
 8005a4a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d101      	bne.n	8005a56 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005a52:	2301      	movs	r3, #1
 8005a54:	e033      	b.n	8005abe <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d109      	bne.n	8005a72 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f7ff fabc 	bl	8004fdc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2200      	movs	r2, #0
 8005a68:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a76:	f003 0310 	and.w	r3, r3, #16
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d118      	bne.n	8005ab0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a82:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8005a86:	f023 0302 	bic.w	r3, r3, #2
 8005a8a:	f043 0202 	orr.w	r2, r3, #2
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	f000 fad8 	bl	8006048 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005aa2:	f023 0303 	bic.w	r3, r3, #3
 8005aa6:	f043 0201 	orr.w	r2, r3, #1
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	641a      	str	r2, [r3, #64]	@ 0x40
 8005aae:	e001      	b.n	8005ab4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005ab0:	2301      	movs	r3, #1
 8005ab2:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005abc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005abe:	4618      	mov	r0, r3
 8005ac0:	3710      	adds	r7, #16
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bd80      	pop	{r7, pc}
	...

08005ac8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8005ac8:	b480      	push	{r7}
 8005aca:	b085      	sub	sp, #20
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005ada:	2b01      	cmp	r3, #1
 8005adc:	d101      	bne.n	8005ae2 <HAL_ADC_Start+0x1a>
 8005ade:	2302      	movs	r3, #2
 8005ae0:	e0b2      	b.n	8005c48 <HAL_ADC_Start+0x180>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2201      	movs	r2, #1
 8005ae6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	689b      	ldr	r3, [r3, #8]
 8005af0:	f003 0301 	and.w	r3, r3, #1
 8005af4:	2b01      	cmp	r3, #1
 8005af6:	d018      	beq.n	8005b2a <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	689a      	ldr	r2, [r3, #8]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f042 0201 	orr.w	r2, r2, #1
 8005b06:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005b08:	4b52      	ldr	r3, [pc, #328]	@ (8005c54 <HAL_ADC_Start+0x18c>)
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4a52      	ldr	r2, [pc, #328]	@ (8005c58 <HAL_ADC_Start+0x190>)
 8005b0e:	fba2 2303 	umull	r2, r3, r2, r3
 8005b12:	0c9a      	lsrs	r2, r3, #18
 8005b14:	4613      	mov	r3, r2
 8005b16:	005b      	lsls	r3, r3, #1
 8005b18:	4413      	add	r3, r2
 8005b1a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8005b1c:	e002      	b.n	8005b24 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8005b1e:	68bb      	ldr	r3, [r7, #8]
 8005b20:	3b01      	subs	r3, #1
 8005b22:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d1f9      	bne.n	8005b1e <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	689b      	ldr	r3, [r3, #8]
 8005b30:	f003 0301 	and.w	r3, r3, #1
 8005b34:	2b01      	cmp	r3, #1
 8005b36:	d17a      	bne.n	8005c2e <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b3c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8005b40:	f023 0301 	bic.w	r3, r3, #1
 8005b44:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d007      	beq.n	8005b6a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b5e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8005b62:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b6e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005b72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b76:	d106      	bne.n	8005b86 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b7c:	f023 0206 	bic.w	r2, r3, #6
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	645a      	str	r2, [r3, #68]	@ 0x44
 8005b84:	e002      	b.n	8005b8c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005b94:	4b31      	ldr	r3, [pc, #196]	@ (8005c5c <HAL_ADC_Start+0x194>)
 8005b96:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8005ba0:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	685b      	ldr	r3, [r3, #4]
 8005ba6:	f003 031f 	and.w	r3, r3, #31
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d12a      	bne.n	8005c04 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4a2b      	ldr	r2, [pc, #172]	@ (8005c60 <HAL_ADC_Start+0x198>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d015      	beq.n	8005be4 <HAL_ADC_Start+0x11c>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4a29      	ldr	r2, [pc, #164]	@ (8005c64 <HAL_ADC_Start+0x19c>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d105      	bne.n	8005bce <HAL_ADC_Start+0x106>
 8005bc2:	4b26      	ldr	r3, [pc, #152]	@ (8005c5c <HAL_ADC_Start+0x194>)
 8005bc4:	685b      	ldr	r3, [r3, #4]
 8005bc6:	f003 031f 	and.w	r3, r3, #31
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d00a      	beq.n	8005be4 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4a25      	ldr	r2, [pc, #148]	@ (8005c68 <HAL_ADC_Start+0x1a0>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d136      	bne.n	8005c46 <HAL_ADC_Start+0x17e>
 8005bd8:	4b20      	ldr	r3, [pc, #128]	@ (8005c5c <HAL_ADC_Start+0x194>)
 8005bda:	685b      	ldr	r3, [r3, #4]
 8005bdc:	f003 0310 	and.w	r3, r3, #16
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d130      	bne.n	8005c46 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	689b      	ldr	r3, [r3, #8]
 8005bea:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d129      	bne.n	8005c46 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	689a      	ldr	r2, [r3, #8]
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8005c00:	609a      	str	r2, [r3, #8]
 8005c02:	e020      	b.n	8005c46 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4a15      	ldr	r2, [pc, #84]	@ (8005c60 <HAL_ADC_Start+0x198>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d11b      	bne.n	8005c46 <HAL_ADC_Start+0x17e>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	689b      	ldr	r3, [r3, #8]
 8005c14:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d114      	bne.n	8005c46 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	689a      	ldr	r2, [r3, #8]
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8005c2a:	609a      	str	r2, [r3, #8]
 8005c2c:	e00b      	b.n	8005c46 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c32:	f043 0210 	orr.w	r2, r3, #16
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c3e:	f043 0201 	orr.w	r2, r3, #1
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8005c46:	2300      	movs	r3, #0
}
 8005c48:	4618      	mov	r0, r3
 8005c4a:	3714      	adds	r7, #20
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c52:	4770      	bx	lr
 8005c54:	20000010 	.word	0x20000010
 8005c58:	431bde83 	.word	0x431bde83
 8005c5c:	40012300 	.word	0x40012300
 8005c60:	40012000 	.word	0x40012000
 8005c64:	40012100 	.word	0x40012100
 8005c68:	40012200 	.word	0x40012200

08005c6c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b083      	sub	sp, #12
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005c7a:	2b01      	cmp	r3, #1
 8005c7c:	d101      	bne.n	8005c82 <HAL_ADC_Stop+0x16>
 8005c7e:	2302      	movs	r3, #2
 8005c80:	e021      	b.n	8005cc6 <HAL_ADC_Stop+0x5a>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2201      	movs	r2, #1
 8005c86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	689a      	ldr	r2, [r3, #8]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f022 0201 	bic.w	r2, r2, #1
 8005c98:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	689b      	ldr	r3, [r3, #8]
 8005ca0:	f003 0301 	and.w	r3, r3, #1
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d109      	bne.n	8005cbc <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cac:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8005cb0:	f023 0301 	bic.w	r3, r3, #1
 8005cb4:	f043 0201 	orr.w	r2, r3, #1
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8005cc4:	2300      	movs	r3, #0
}
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	370c      	adds	r7, #12
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd0:	4770      	bx	lr

08005cd2 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8005cd2:	b580      	push	{r7, lr}
 8005cd4:	b084      	sub	sp, #16
 8005cd6:	af00      	add	r7, sp, #0
 8005cd8:	6078      	str	r0, [r7, #4]
 8005cda:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005cdc:	2300      	movs	r3, #0
 8005cde:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	689b      	ldr	r3, [r3, #8]
 8005ce6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005cea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005cee:	d113      	bne.n	8005d18 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	689b      	ldr	r3, [r3, #8]
 8005cf6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8005cfa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005cfe:	d10b      	bne.n	8005d18 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d04:	f043 0220 	orr.w	r2, r3, #32
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005d14:	2301      	movs	r3, #1
 8005d16:	e063      	b.n	8005de0 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8005d18:	f7ff fe62 	bl	80059e0 <HAL_GetTick>
 8005d1c:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005d1e:	e021      	b.n	8005d64 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d26:	d01d      	beq.n	8005d64 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d007      	beq.n	8005d3e <HAL_ADC_PollForConversion+0x6c>
 8005d2e:	f7ff fe57 	bl	80059e0 <HAL_GetTick>
 8005d32:	4602      	mov	r2, r0
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	1ad3      	subs	r3, r2, r3
 8005d38:	683a      	ldr	r2, [r7, #0]
 8005d3a:	429a      	cmp	r2, r3
 8005d3c:	d212      	bcs.n	8005d64 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f003 0302 	and.w	r3, r3, #2
 8005d48:	2b02      	cmp	r3, #2
 8005d4a:	d00b      	beq.n	8005d64 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d50:	f043 0204 	orr.w	r2, r3, #4
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8005d60:	2303      	movs	r3, #3
 8005d62:	e03d      	b.n	8005de0 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f003 0302 	and.w	r3, r3, #2
 8005d6e:	2b02      	cmp	r3, #2
 8005d70:	d1d6      	bne.n	8005d20 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f06f 0212 	mvn.w	r2, #18
 8005d7a:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d80:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	689b      	ldr	r3, [r3, #8]
 8005d8e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d123      	bne.n	8005dde <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d11f      	bne.n	8005dde <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005da4:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d006      	beq.n	8005dba <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	689b      	ldr	r3, [r3, #8]
 8005db2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d111      	bne.n	8005dde <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dbe:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dca:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d105      	bne.n	8005dde <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dd6:	f043 0201 	orr.w	r2, r3, #1
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8005dde:	2300      	movs	r3, #0
}
 8005de0:	4618      	mov	r0, r3
 8005de2:	3710      	adds	r7, #16
 8005de4:	46bd      	mov	sp, r7
 8005de6:	bd80      	pop	{r7, pc}

08005de8 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8005de8:	b480      	push	{r7}
 8005dea:	b083      	sub	sp, #12
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	370c      	adds	r7, #12
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e00:	4770      	bx	lr
	...

08005e04 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8005e04:	b480      	push	{r7}
 8005e06:	b085      	sub	sp, #20
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
 8005e0c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8005e0e:	2300      	movs	r3, #0
 8005e10:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e18:	2b01      	cmp	r3, #1
 8005e1a:	d101      	bne.n	8005e20 <HAL_ADC_ConfigChannel+0x1c>
 8005e1c:	2302      	movs	r3, #2
 8005e1e:	e105      	b.n	800602c <HAL_ADC_ConfigChannel+0x228>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2201      	movs	r2, #1
 8005e24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	2b09      	cmp	r3, #9
 8005e2e:	d925      	bls.n	8005e7c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	68d9      	ldr	r1, [r3, #12]
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	b29b      	uxth	r3, r3
 8005e3c:	461a      	mov	r2, r3
 8005e3e:	4613      	mov	r3, r2
 8005e40:	005b      	lsls	r3, r3, #1
 8005e42:	4413      	add	r3, r2
 8005e44:	3b1e      	subs	r3, #30
 8005e46:	2207      	movs	r2, #7
 8005e48:	fa02 f303 	lsl.w	r3, r2, r3
 8005e4c:	43da      	mvns	r2, r3
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	400a      	ands	r2, r1
 8005e54:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	68d9      	ldr	r1, [r3, #12]
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	689a      	ldr	r2, [r3, #8]
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	b29b      	uxth	r3, r3
 8005e66:	4618      	mov	r0, r3
 8005e68:	4603      	mov	r3, r0
 8005e6a:	005b      	lsls	r3, r3, #1
 8005e6c:	4403      	add	r3, r0
 8005e6e:	3b1e      	subs	r3, #30
 8005e70:	409a      	lsls	r2, r3
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	430a      	orrs	r2, r1
 8005e78:	60da      	str	r2, [r3, #12]
 8005e7a:	e022      	b.n	8005ec2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	6919      	ldr	r1, [r3, #16]
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	b29b      	uxth	r3, r3
 8005e88:	461a      	mov	r2, r3
 8005e8a:	4613      	mov	r3, r2
 8005e8c:	005b      	lsls	r3, r3, #1
 8005e8e:	4413      	add	r3, r2
 8005e90:	2207      	movs	r2, #7
 8005e92:	fa02 f303 	lsl.w	r3, r2, r3
 8005e96:	43da      	mvns	r2, r3
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	400a      	ands	r2, r1
 8005e9e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	6919      	ldr	r1, [r3, #16]
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	689a      	ldr	r2, [r3, #8]
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	b29b      	uxth	r3, r3
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	005b      	lsls	r3, r3, #1
 8005eb6:	4403      	add	r3, r0
 8005eb8:	409a      	lsls	r2, r3
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	430a      	orrs	r2, r1
 8005ec0:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	685b      	ldr	r3, [r3, #4]
 8005ec6:	2b06      	cmp	r3, #6
 8005ec8:	d824      	bhi.n	8005f14 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	685a      	ldr	r2, [r3, #4]
 8005ed4:	4613      	mov	r3, r2
 8005ed6:	009b      	lsls	r3, r3, #2
 8005ed8:	4413      	add	r3, r2
 8005eda:	3b05      	subs	r3, #5
 8005edc:	221f      	movs	r2, #31
 8005ede:	fa02 f303 	lsl.w	r3, r2, r3
 8005ee2:	43da      	mvns	r2, r3
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	400a      	ands	r2, r1
 8005eea:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	b29b      	uxth	r3, r3
 8005ef8:	4618      	mov	r0, r3
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	685a      	ldr	r2, [r3, #4]
 8005efe:	4613      	mov	r3, r2
 8005f00:	009b      	lsls	r3, r3, #2
 8005f02:	4413      	add	r3, r2
 8005f04:	3b05      	subs	r3, #5
 8005f06:	fa00 f203 	lsl.w	r2, r0, r3
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	430a      	orrs	r2, r1
 8005f10:	635a      	str	r2, [r3, #52]	@ 0x34
 8005f12:	e04c      	b.n	8005fae <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	685b      	ldr	r3, [r3, #4]
 8005f18:	2b0c      	cmp	r3, #12
 8005f1a:	d824      	bhi.n	8005f66 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	685a      	ldr	r2, [r3, #4]
 8005f26:	4613      	mov	r3, r2
 8005f28:	009b      	lsls	r3, r3, #2
 8005f2a:	4413      	add	r3, r2
 8005f2c:	3b23      	subs	r3, #35	@ 0x23
 8005f2e:	221f      	movs	r2, #31
 8005f30:	fa02 f303 	lsl.w	r3, r2, r3
 8005f34:	43da      	mvns	r2, r3
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	400a      	ands	r2, r1
 8005f3c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	b29b      	uxth	r3, r3
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	685a      	ldr	r2, [r3, #4]
 8005f50:	4613      	mov	r3, r2
 8005f52:	009b      	lsls	r3, r3, #2
 8005f54:	4413      	add	r3, r2
 8005f56:	3b23      	subs	r3, #35	@ 0x23
 8005f58:	fa00 f203 	lsl.w	r2, r0, r3
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	430a      	orrs	r2, r1
 8005f62:	631a      	str	r2, [r3, #48]	@ 0x30
 8005f64:	e023      	b.n	8005fae <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	685a      	ldr	r2, [r3, #4]
 8005f70:	4613      	mov	r3, r2
 8005f72:	009b      	lsls	r3, r3, #2
 8005f74:	4413      	add	r3, r2
 8005f76:	3b41      	subs	r3, #65	@ 0x41
 8005f78:	221f      	movs	r2, #31
 8005f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8005f7e:	43da      	mvns	r2, r3
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	400a      	ands	r2, r1
 8005f86:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	b29b      	uxth	r3, r3
 8005f94:	4618      	mov	r0, r3
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	685a      	ldr	r2, [r3, #4]
 8005f9a:	4613      	mov	r3, r2
 8005f9c:	009b      	lsls	r3, r3, #2
 8005f9e:	4413      	add	r3, r2
 8005fa0:	3b41      	subs	r3, #65	@ 0x41
 8005fa2:	fa00 f203 	lsl.w	r2, r0, r3
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	430a      	orrs	r2, r1
 8005fac:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005fae:	4b22      	ldr	r3, [pc, #136]	@ (8006038 <HAL_ADC_ConfigChannel+0x234>)
 8005fb0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4a21      	ldr	r2, [pc, #132]	@ (800603c <HAL_ADC_ConfigChannel+0x238>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d109      	bne.n	8005fd0 <HAL_ADC_ConfigChannel+0x1cc>
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	2b12      	cmp	r3, #18
 8005fc2:	d105      	bne.n	8005fd0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	685b      	ldr	r3, [r3, #4]
 8005fc8:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4a19      	ldr	r2, [pc, #100]	@ (800603c <HAL_ADC_ConfigChannel+0x238>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d123      	bne.n	8006022 <HAL_ADC_ConfigChannel+0x21e>
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	2b10      	cmp	r3, #16
 8005fe0:	d003      	beq.n	8005fea <HAL_ADC_ConfigChannel+0x1e6>
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	2b11      	cmp	r3, #17
 8005fe8:	d11b      	bne.n	8006022 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	685b      	ldr	r3, [r3, #4]
 8005fee:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	2b10      	cmp	r3, #16
 8005ffc:	d111      	bne.n	8006022 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005ffe:	4b10      	ldr	r3, [pc, #64]	@ (8006040 <HAL_ADC_ConfigChannel+0x23c>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4a10      	ldr	r2, [pc, #64]	@ (8006044 <HAL_ADC_ConfigChannel+0x240>)
 8006004:	fba2 2303 	umull	r2, r3, r2, r3
 8006008:	0c9a      	lsrs	r2, r3, #18
 800600a:	4613      	mov	r3, r2
 800600c:	009b      	lsls	r3, r3, #2
 800600e:	4413      	add	r3, r2
 8006010:	005b      	lsls	r3, r3, #1
 8006012:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8006014:	e002      	b.n	800601c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	3b01      	subs	r3, #1
 800601a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d1f9      	bne.n	8006016 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2200      	movs	r2, #0
 8006026:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800602a:	2300      	movs	r3, #0
}
 800602c:	4618      	mov	r0, r3
 800602e:	3714      	adds	r7, #20
 8006030:	46bd      	mov	sp, r7
 8006032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006036:	4770      	bx	lr
 8006038:	40012300 	.word	0x40012300
 800603c:	40012000 	.word	0x40012000
 8006040:	20000010 	.word	0x20000010
 8006044:	431bde83 	.word	0x431bde83

08006048 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8006048:	b480      	push	{r7}
 800604a:	b085      	sub	sp, #20
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006050:	4b79      	ldr	r3, [pc, #484]	@ (8006238 <ADC_Init+0x1f0>)
 8006052:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	685b      	ldr	r3, [r3, #4]
 8006058:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	685a      	ldr	r2, [r3, #4]
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	685b      	ldr	r3, [r3, #4]
 8006068:	431a      	orrs	r2, r3
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	685a      	ldr	r2, [r3, #4]
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800607c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	6859      	ldr	r1, [r3, #4]
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	691b      	ldr	r3, [r3, #16]
 8006088:	021a      	lsls	r2, r3, #8
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	430a      	orrs	r2, r1
 8006090:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	685a      	ldr	r2, [r3, #4]
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80060a0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	6859      	ldr	r1, [r3, #4]
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	689a      	ldr	r2, [r3, #8]
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	430a      	orrs	r2, r1
 80060b2:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	689a      	ldr	r2, [r3, #8]
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80060c2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	6899      	ldr	r1, [r3, #8]
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	68da      	ldr	r2, [r3, #12]
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	430a      	orrs	r2, r1
 80060d4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060da:	4a58      	ldr	r2, [pc, #352]	@ (800623c <ADC_Init+0x1f4>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d022      	beq.n	8006126 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	689a      	ldr	r2, [r3, #8]
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80060ee:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	6899      	ldr	r1, [r3, #8]
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	430a      	orrs	r2, r1
 8006100:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	689a      	ldr	r2, [r3, #8]
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8006110:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	6899      	ldr	r1, [r3, #8]
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	430a      	orrs	r2, r1
 8006122:	609a      	str	r2, [r3, #8]
 8006124:	e00f      	b.n	8006146 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	689a      	ldr	r2, [r3, #8]
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006134:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	689a      	ldr	r2, [r3, #8]
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8006144:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	689a      	ldr	r2, [r3, #8]
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f022 0202 	bic.w	r2, r2, #2
 8006154:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	6899      	ldr	r1, [r3, #8]
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	7e1b      	ldrb	r3, [r3, #24]
 8006160:	005a      	lsls	r2, r3, #1
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	430a      	orrs	r2, r1
 8006168:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d01b      	beq.n	80061ac <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	685a      	ldr	r2, [r3, #4]
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006182:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	685a      	ldr	r2, [r3, #4]
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8006192:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	6859      	ldr	r1, [r3, #4]
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800619e:	3b01      	subs	r3, #1
 80061a0:	035a      	lsls	r2, r3, #13
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	430a      	orrs	r2, r1
 80061a8:	605a      	str	r2, [r3, #4]
 80061aa:	e007      	b.n	80061bc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	685a      	ldr	r2, [r3, #4]
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80061ba:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80061ca:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	69db      	ldr	r3, [r3, #28]
 80061d6:	3b01      	subs	r3, #1
 80061d8:	051a      	lsls	r2, r3, #20
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	430a      	orrs	r2, r1
 80061e0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	689a      	ldr	r2, [r3, #8]
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80061f0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	6899      	ldr	r1, [r3, #8]
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80061fe:	025a      	lsls	r2, r3, #9
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	430a      	orrs	r2, r1
 8006206:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	689a      	ldr	r2, [r3, #8]
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006216:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	6899      	ldr	r1, [r3, #8]
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	695b      	ldr	r3, [r3, #20]
 8006222:	029a      	lsls	r2, r3, #10
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	430a      	orrs	r2, r1
 800622a:	609a      	str	r2, [r3, #8]
}
 800622c:	bf00      	nop
 800622e:	3714      	adds	r7, #20
 8006230:	46bd      	mov	sp, r7
 8006232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006236:	4770      	bx	lr
 8006238:	40012300 	.word	0x40012300
 800623c:	0f000001 	.word	0x0f000001

08006240 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006240:	b480      	push	{r7}
 8006242:	b085      	sub	sp, #20
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	f003 0307 	and.w	r3, r3, #7
 800624e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006250:	4b0c      	ldr	r3, [pc, #48]	@ (8006284 <__NVIC_SetPriorityGrouping+0x44>)
 8006252:	68db      	ldr	r3, [r3, #12]
 8006254:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006256:	68ba      	ldr	r2, [r7, #8]
 8006258:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800625c:	4013      	ands	r3, r2
 800625e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006268:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800626c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006270:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006272:	4a04      	ldr	r2, [pc, #16]	@ (8006284 <__NVIC_SetPriorityGrouping+0x44>)
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	60d3      	str	r3, [r2, #12]
}
 8006278:	bf00      	nop
 800627a:	3714      	adds	r7, #20
 800627c:	46bd      	mov	sp, r7
 800627e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006282:	4770      	bx	lr
 8006284:	e000ed00 	.word	0xe000ed00

08006288 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006288:	b480      	push	{r7}
 800628a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800628c:	4b04      	ldr	r3, [pc, #16]	@ (80062a0 <__NVIC_GetPriorityGrouping+0x18>)
 800628e:	68db      	ldr	r3, [r3, #12]
 8006290:	0a1b      	lsrs	r3, r3, #8
 8006292:	f003 0307 	and.w	r3, r3, #7
}
 8006296:	4618      	mov	r0, r3
 8006298:	46bd      	mov	sp, r7
 800629a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629e:	4770      	bx	lr
 80062a0:	e000ed00 	.word	0xe000ed00

080062a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80062a4:	b480      	push	{r7}
 80062a6:	b083      	sub	sp, #12
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	4603      	mov	r3, r0
 80062ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80062ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	db0b      	blt.n	80062ce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80062b6:	79fb      	ldrb	r3, [r7, #7]
 80062b8:	f003 021f 	and.w	r2, r3, #31
 80062bc:	4907      	ldr	r1, [pc, #28]	@ (80062dc <__NVIC_EnableIRQ+0x38>)
 80062be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80062c2:	095b      	lsrs	r3, r3, #5
 80062c4:	2001      	movs	r0, #1
 80062c6:	fa00 f202 	lsl.w	r2, r0, r2
 80062ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80062ce:	bf00      	nop
 80062d0:	370c      	adds	r7, #12
 80062d2:	46bd      	mov	sp, r7
 80062d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d8:	4770      	bx	lr
 80062da:	bf00      	nop
 80062dc:	e000e100 	.word	0xe000e100

080062e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80062e0:	b480      	push	{r7}
 80062e2:	b083      	sub	sp, #12
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	4603      	mov	r3, r0
 80062e8:	6039      	str	r1, [r7, #0]
 80062ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80062ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	db0a      	blt.n	800630a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	b2da      	uxtb	r2, r3
 80062f8:	490c      	ldr	r1, [pc, #48]	@ (800632c <__NVIC_SetPriority+0x4c>)
 80062fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80062fe:	0112      	lsls	r2, r2, #4
 8006300:	b2d2      	uxtb	r2, r2
 8006302:	440b      	add	r3, r1
 8006304:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006308:	e00a      	b.n	8006320 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	b2da      	uxtb	r2, r3
 800630e:	4908      	ldr	r1, [pc, #32]	@ (8006330 <__NVIC_SetPriority+0x50>)
 8006310:	79fb      	ldrb	r3, [r7, #7]
 8006312:	f003 030f 	and.w	r3, r3, #15
 8006316:	3b04      	subs	r3, #4
 8006318:	0112      	lsls	r2, r2, #4
 800631a:	b2d2      	uxtb	r2, r2
 800631c:	440b      	add	r3, r1
 800631e:	761a      	strb	r2, [r3, #24]
}
 8006320:	bf00      	nop
 8006322:	370c      	adds	r7, #12
 8006324:	46bd      	mov	sp, r7
 8006326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632a:	4770      	bx	lr
 800632c:	e000e100 	.word	0xe000e100
 8006330:	e000ed00 	.word	0xe000ed00

08006334 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006334:	b480      	push	{r7}
 8006336:	b089      	sub	sp, #36	@ 0x24
 8006338:	af00      	add	r7, sp, #0
 800633a:	60f8      	str	r0, [r7, #12]
 800633c:	60b9      	str	r1, [r7, #8]
 800633e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	f003 0307 	and.w	r3, r3, #7
 8006346:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006348:	69fb      	ldr	r3, [r7, #28]
 800634a:	f1c3 0307 	rsb	r3, r3, #7
 800634e:	2b04      	cmp	r3, #4
 8006350:	bf28      	it	cs
 8006352:	2304      	movcs	r3, #4
 8006354:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006356:	69fb      	ldr	r3, [r7, #28]
 8006358:	3304      	adds	r3, #4
 800635a:	2b06      	cmp	r3, #6
 800635c:	d902      	bls.n	8006364 <NVIC_EncodePriority+0x30>
 800635e:	69fb      	ldr	r3, [r7, #28]
 8006360:	3b03      	subs	r3, #3
 8006362:	e000      	b.n	8006366 <NVIC_EncodePriority+0x32>
 8006364:	2300      	movs	r3, #0
 8006366:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006368:	f04f 32ff 	mov.w	r2, #4294967295
 800636c:	69bb      	ldr	r3, [r7, #24]
 800636e:	fa02 f303 	lsl.w	r3, r2, r3
 8006372:	43da      	mvns	r2, r3
 8006374:	68bb      	ldr	r3, [r7, #8]
 8006376:	401a      	ands	r2, r3
 8006378:	697b      	ldr	r3, [r7, #20]
 800637a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800637c:	f04f 31ff 	mov.w	r1, #4294967295
 8006380:	697b      	ldr	r3, [r7, #20]
 8006382:	fa01 f303 	lsl.w	r3, r1, r3
 8006386:	43d9      	mvns	r1, r3
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800638c:	4313      	orrs	r3, r2
         );
}
 800638e:	4618      	mov	r0, r3
 8006390:	3724      	adds	r7, #36	@ 0x24
 8006392:	46bd      	mov	sp, r7
 8006394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006398:	4770      	bx	lr

0800639a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800639a:	b580      	push	{r7, lr}
 800639c:	b082      	sub	sp, #8
 800639e:	af00      	add	r7, sp, #0
 80063a0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	f7ff ff4c 	bl	8006240 <__NVIC_SetPriorityGrouping>
}
 80063a8:	bf00      	nop
 80063aa:	3708      	adds	r7, #8
 80063ac:	46bd      	mov	sp, r7
 80063ae:	bd80      	pop	{r7, pc}

080063b0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b086      	sub	sp, #24
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	4603      	mov	r3, r0
 80063b8:	60b9      	str	r1, [r7, #8]
 80063ba:	607a      	str	r2, [r7, #4]
 80063bc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80063be:	2300      	movs	r3, #0
 80063c0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80063c2:	f7ff ff61 	bl	8006288 <__NVIC_GetPriorityGrouping>
 80063c6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80063c8:	687a      	ldr	r2, [r7, #4]
 80063ca:	68b9      	ldr	r1, [r7, #8]
 80063cc:	6978      	ldr	r0, [r7, #20]
 80063ce:	f7ff ffb1 	bl	8006334 <NVIC_EncodePriority>
 80063d2:	4602      	mov	r2, r0
 80063d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80063d8:	4611      	mov	r1, r2
 80063da:	4618      	mov	r0, r3
 80063dc:	f7ff ff80 	bl	80062e0 <__NVIC_SetPriority>
}
 80063e0:	bf00      	nop
 80063e2:	3718      	adds	r7, #24
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}

080063e8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b082      	sub	sp, #8
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	4603      	mov	r3, r0
 80063f0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80063f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80063f6:	4618      	mov	r0, r3
 80063f8:	f7ff ff54 	bl	80062a4 <__NVIC_EnableIRQ>
}
 80063fc:	bf00      	nop
 80063fe:	3708      	adds	r7, #8
 8006400:	46bd      	mov	sp, r7
 8006402:	bd80      	pop	{r7, pc}

08006404 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b086      	sub	sp, #24
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800640c:	2300      	movs	r3, #0
 800640e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006410:	f7ff fae6 	bl	80059e0 <HAL_GetTick>
 8006414:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d101      	bne.n	8006420 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800641c:	2301      	movs	r3, #1
 800641e:	e099      	b.n	8006554 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2202      	movs	r2, #2
 8006424:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2200      	movs	r2, #0
 800642c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	681a      	ldr	r2, [r3, #0]
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f022 0201 	bic.w	r2, r2, #1
 800643e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006440:	e00f      	b.n	8006462 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006442:	f7ff facd 	bl	80059e0 <HAL_GetTick>
 8006446:	4602      	mov	r2, r0
 8006448:	693b      	ldr	r3, [r7, #16]
 800644a:	1ad3      	subs	r3, r2, r3
 800644c:	2b05      	cmp	r3, #5
 800644e:	d908      	bls.n	8006462 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2220      	movs	r2, #32
 8006454:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2203      	movs	r2, #3
 800645a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800645e:	2303      	movs	r3, #3
 8006460:	e078      	b.n	8006554 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f003 0301 	and.w	r3, r3, #1
 800646c:	2b00      	cmp	r3, #0
 800646e:	d1e8      	bne.n	8006442 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006478:	697a      	ldr	r2, [r7, #20]
 800647a:	4b38      	ldr	r3, [pc, #224]	@ (800655c <HAL_DMA_Init+0x158>)
 800647c:	4013      	ands	r3, r2
 800647e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	685a      	ldr	r2, [r3, #4]
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	689b      	ldr	r3, [r3, #8]
 8006488:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800648e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	691b      	ldr	r3, [r3, #16]
 8006494:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800649a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	699b      	ldr	r3, [r3, #24]
 80064a0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80064a6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6a1b      	ldr	r3, [r3, #32]
 80064ac:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80064ae:	697a      	ldr	r2, [r7, #20]
 80064b0:	4313      	orrs	r3, r2
 80064b2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064b8:	2b04      	cmp	r3, #4
 80064ba:	d107      	bne.n	80064cc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064c4:	4313      	orrs	r3, r2
 80064c6:	697a      	ldr	r2, [r7, #20]
 80064c8:	4313      	orrs	r3, r2
 80064ca:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	697a      	ldr	r2, [r7, #20]
 80064d2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	695b      	ldr	r3, [r3, #20]
 80064da:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80064dc:	697b      	ldr	r3, [r7, #20]
 80064de:	f023 0307 	bic.w	r3, r3, #7
 80064e2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064e8:	697a      	ldr	r2, [r7, #20]
 80064ea:	4313      	orrs	r3, r2
 80064ec:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064f2:	2b04      	cmp	r3, #4
 80064f4:	d117      	bne.n	8006526 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064fa:	697a      	ldr	r2, [r7, #20]
 80064fc:	4313      	orrs	r3, r2
 80064fe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006504:	2b00      	cmp	r3, #0
 8006506:	d00e      	beq.n	8006526 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006508:	6878      	ldr	r0, [r7, #4]
 800650a:	f000 fb01 	bl	8006b10 <DMA_CheckFifoParam>
 800650e:	4603      	mov	r3, r0
 8006510:	2b00      	cmp	r3, #0
 8006512:	d008      	beq.n	8006526 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2240      	movs	r2, #64	@ 0x40
 8006518:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2201      	movs	r2, #1
 800651e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8006522:	2301      	movs	r3, #1
 8006524:	e016      	b.n	8006554 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	697a      	ldr	r2, [r7, #20]
 800652c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800652e:	6878      	ldr	r0, [r7, #4]
 8006530:	f000 fab8 	bl	8006aa4 <DMA_CalcBaseAndBitshift>
 8006534:	4603      	mov	r3, r0
 8006536:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800653c:	223f      	movs	r2, #63	@ 0x3f
 800653e:	409a      	lsls	r2, r3
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2200      	movs	r2, #0
 8006548:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	2201      	movs	r2, #1
 800654e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8006552:	2300      	movs	r3, #0
}
 8006554:	4618      	mov	r0, r3
 8006556:	3718      	adds	r7, #24
 8006558:	46bd      	mov	sp, r7
 800655a:	bd80      	pop	{r7, pc}
 800655c:	f010803f 	.word	0xf010803f

08006560 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b086      	sub	sp, #24
 8006564:	af00      	add	r7, sp, #0
 8006566:	60f8      	str	r0, [r7, #12]
 8006568:	60b9      	str	r1, [r7, #8]
 800656a:	607a      	str	r2, [r7, #4]
 800656c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800656e:	2300      	movs	r3, #0
 8006570:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006576:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800657e:	2b01      	cmp	r3, #1
 8006580:	d101      	bne.n	8006586 <HAL_DMA_Start_IT+0x26>
 8006582:	2302      	movs	r3, #2
 8006584:	e040      	b.n	8006608 <HAL_DMA_Start_IT+0xa8>
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	2201      	movs	r2, #1
 800658a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006594:	b2db      	uxtb	r3, r3
 8006596:	2b01      	cmp	r3, #1
 8006598:	d12f      	bne.n	80065fa <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	2202      	movs	r2, #2
 800659e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	2200      	movs	r2, #0
 80065a6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	687a      	ldr	r2, [r7, #4]
 80065ac:	68b9      	ldr	r1, [r7, #8]
 80065ae:	68f8      	ldr	r0, [r7, #12]
 80065b0:	f000 fa4a 	bl	8006a48 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80065b8:	223f      	movs	r2, #63	@ 0x3f
 80065ba:	409a      	lsls	r2, r3
 80065bc:	693b      	ldr	r3, [r7, #16]
 80065be:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	681a      	ldr	r2, [r3, #0]
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f042 0216 	orr.w	r2, r2, #22
 80065ce:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d007      	beq.n	80065e8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	681a      	ldr	r2, [r3, #0]
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f042 0208 	orr.w	r2, r2, #8
 80065e6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	681a      	ldr	r2, [r3, #0]
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f042 0201 	orr.w	r2, r2, #1
 80065f6:	601a      	str	r2, [r3, #0]
 80065f8:	e005      	b.n	8006606 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	2200      	movs	r2, #0
 80065fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8006602:	2302      	movs	r3, #2
 8006604:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8006606:	7dfb      	ldrb	r3, [r7, #23]
}
 8006608:	4618      	mov	r0, r3
 800660a:	3718      	adds	r7, #24
 800660c:	46bd      	mov	sp, r7
 800660e:	bd80      	pop	{r7, pc}

08006610 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b084      	sub	sp, #16
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800661c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800661e:	f7ff f9df 	bl	80059e0 <HAL_GetTick>
 8006622:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800662a:	b2db      	uxtb	r3, r3
 800662c:	2b02      	cmp	r3, #2
 800662e:	d008      	beq.n	8006642 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2280      	movs	r2, #128	@ 0x80
 8006634:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2200      	movs	r2, #0
 800663a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800663e:	2301      	movs	r3, #1
 8006640:	e052      	b.n	80066e8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	681a      	ldr	r2, [r3, #0]
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f022 0216 	bic.w	r2, r2, #22
 8006650:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	695a      	ldr	r2, [r3, #20]
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006660:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006666:	2b00      	cmp	r3, #0
 8006668:	d103      	bne.n	8006672 <HAL_DMA_Abort+0x62>
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800666e:	2b00      	cmp	r3, #0
 8006670:	d007      	beq.n	8006682 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	681a      	ldr	r2, [r3, #0]
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f022 0208 	bic.w	r2, r2, #8
 8006680:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	681a      	ldr	r2, [r3, #0]
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f022 0201 	bic.w	r2, r2, #1
 8006690:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006692:	e013      	b.n	80066bc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006694:	f7ff f9a4 	bl	80059e0 <HAL_GetTick>
 8006698:	4602      	mov	r2, r0
 800669a:	68bb      	ldr	r3, [r7, #8]
 800669c:	1ad3      	subs	r3, r2, r3
 800669e:	2b05      	cmp	r3, #5
 80066a0:	d90c      	bls.n	80066bc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2220      	movs	r2, #32
 80066a6:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2203      	movs	r2, #3
 80066ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2200      	movs	r2, #0
 80066b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80066b8:	2303      	movs	r3, #3
 80066ba:	e015      	b.n	80066e8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f003 0301 	and.w	r3, r3, #1
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d1e4      	bne.n	8006694 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80066ce:	223f      	movs	r2, #63	@ 0x3f
 80066d0:	409a      	lsls	r2, r3
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2201      	movs	r2, #1
 80066da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2200      	movs	r2, #0
 80066e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80066e6:	2300      	movs	r3, #0
}
 80066e8:	4618      	mov	r0, r3
 80066ea:	3710      	adds	r7, #16
 80066ec:	46bd      	mov	sp, r7
 80066ee:	bd80      	pop	{r7, pc}

080066f0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80066f0:	b480      	push	{r7}
 80066f2:	b083      	sub	sp, #12
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80066fe:	b2db      	uxtb	r3, r3
 8006700:	2b02      	cmp	r3, #2
 8006702:	d004      	beq.n	800670e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2280      	movs	r2, #128	@ 0x80
 8006708:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800670a:	2301      	movs	r3, #1
 800670c:	e00c      	b.n	8006728 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2205      	movs	r2, #5
 8006712:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	681a      	ldr	r2, [r3, #0]
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f022 0201 	bic.w	r2, r2, #1
 8006724:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006726:	2300      	movs	r3, #0
}
 8006728:	4618      	mov	r0, r3
 800672a:	370c      	adds	r7, #12
 800672c:	46bd      	mov	sp, r7
 800672e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006732:	4770      	bx	lr

08006734 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b086      	sub	sp, #24
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800673c:	2300      	movs	r3, #0
 800673e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006740:	4b8e      	ldr	r3, [pc, #568]	@ (800697c <HAL_DMA_IRQHandler+0x248>)
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	4a8e      	ldr	r2, [pc, #568]	@ (8006980 <HAL_DMA_IRQHandler+0x24c>)
 8006746:	fba2 2303 	umull	r2, r3, r2, r3
 800674a:	0a9b      	lsrs	r3, r3, #10
 800674c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006752:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8006754:	693b      	ldr	r3, [r7, #16]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800675e:	2208      	movs	r2, #8
 8006760:	409a      	lsls	r2, r3
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	4013      	ands	r3, r2
 8006766:	2b00      	cmp	r3, #0
 8006768:	d01a      	beq.n	80067a0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f003 0304 	and.w	r3, r3, #4
 8006774:	2b00      	cmp	r3, #0
 8006776:	d013      	beq.n	80067a0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	681a      	ldr	r2, [r3, #0]
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f022 0204 	bic.w	r2, r2, #4
 8006786:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800678c:	2208      	movs	r2, #8
 800678e:	409a      	lsls	r2, r3
 8006790:	693b      	ldr	r3, [r7, #16]
 8006792:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006798:	f043 0201 	orr.w	r2, r3, #1
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80067a4:	2201      	movs	r2, #1
 80067a6:	409a      	lsls	r2, r3
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	4013      	ands	r3, r2
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d012      	beq.n	80067d6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	695b      	ldr	r3, [r3, #20]
 80067b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d00b      	beq.n	80067d6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80067c2:	2201      	movs	r2, #1
 80067c4:	409a      	lsls	r2, r3
 80067c6:	693b      	ldr	r3, [r7, #16]
 80067c8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067ce:	f043 0202 	orr.w	r2, r3, #2
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80067da:	2204      	movs	r2, #4
 80067dc:	409a      	lsls	r2, r3
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	4013      	ands	r3, r2
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d012      	beq.n	800680c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f003 0302 	and.w	r3, r3, #2
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d00b      	beq.n	800680c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80067f8:	2204      	movs	r2, #4
 80067fa:	409a      	lsls	r2, r3
 80067fc:	693b      	ldr	r3, [r7, #16]
 80067fe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006804:	f043 0204 	orr.w	r2, r3, #4
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006810:	2210      	movs	r2, #16
 8006812:	409a      	lsls	r2, r3
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	4013      	ands	r3, r2
 8006818:	2b00      	cmp	r3, #0
 800681a:	d043      	beq.n	80068a4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f003 0308 	and.w	r3, r3, #8
 8006826:	2b00      	cmp	r3, #0
 8006828:	d03c      	beq.n	80068a4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800682e:	2210      	movs	r2, #16
 8006830:	409a      	lsls	r2, r3
 8006832:	693b      	ldr	r3, [r7, #16]
 8006834:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006840:	2b00      	cmp	r3, #0
 8006842:	d018      	beq.n	8006876 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800684e:	2b00      	cmp	r3, #0
 8006850:	d108      	bne.n	8006864 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006856:	2b00      	cmp	r3, #0
 8006858:	d024      	beq.n	80068a4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	4798      	blx	r3
 8006862:	e01f      	b.n	80068a4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006868:	2b00      	cmp	r3, #0
 800686a:	d01b      	beq.n	80068a4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006870:	6878      	ldr	r0, [r7, #4]
 8006872:	4798      	blx	r3
 8006874:	e016      	b.n	80068a4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006880:	2b00      	cmp	r3, #0
 8006882:	d107      	bne.n	8006894 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	681a      	ldr	r2, [r3, #0]
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f022 0208 	bic.w	r2, r2, #8
 8006892:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006898:	2b00      	cmp	r3, #0
 800689a:	d003      	beq.n	80068a4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068a0:	6878      	ldr	r0, [r7, #4]
 80068a2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80068a8:	2220      	movs	r2, #32
 80068aa:	409a      	lsls	r2, r3
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	4013      	ands	r3, r2
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	f000 808f 	beq.w	80069d4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f003 0310 	and.w	r3, r3, #16
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	f000 8087 	beq.w	80069d4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80068ca:	2220      	movs	r2, #32
 80068cc:	409a      	lsls	r2, r3
 80068ce:	693b      	ldr	r3, [r7, #16]
 80068d0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80068d8:	b2db      	uxtb	r3, r3
 80068da:	2b05      	cmp	r3, #5
 80068dc:	d136      	bne.n	800694c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	681a      	ldr	r2, [r3, #0]
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f022 0216 	bic.w	r2, r2, #22
 80068ec:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	695a      	ldr	r2, [r3, #20]
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80068fc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006902:	2b00      	cmp	r3, #0
 8006904:	d103      	bne.n	800690e <HAL_DMA_IRQHandler+0x1da>
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800690a:	2b00      	cmp	r3, #0
 800690c:	d007      	beq.n	800691e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	681a      	ldr	r2, [r3, #0]
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f022 0208 	bic.w	r2, r2, #8
 800691c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006922:	223f      	movs	r2, #63	@ 0x3f
 8006924:	409a      	lsls	r2, r3
 8006926:	693b      	ldr	r3, [r7, #16]
 8006928:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2201      	movs	r2, #1
 800692e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2200      	movs	r2, #0
 8006936:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800693e:	2b00      	cmp	r3, #0
 8006940:	d07e      	beq.n	8006a40 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006946:	6878      	ldr	r0, [r7, #4]
 8006948:	4798      	blx	r3
        }
        return;
 800694a:	e079      	b.n	8006a40 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006956:	2b00      	cmp	r3, #0
 8006958:	d01d      	beq.n	8006996 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006964:	2b00      	cmp	r3, #0
 8006966:	d10d      	bne.n	8006984 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800696c:	2b00      	cmp	r3, #0
 800696e:	d031      	beq.n	80069d4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006974:	6878      	ldr	r0, [r7, #4]
 8006976:	4798      	blx	r3
 8006978:	e02c      	b.n	80069d4 <HAL_DMA_IRQHandler+0x2a0>
 800697a:	bf00      	nop
 800697c:	20000010 	.word	0x20000010
 8006980:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006988:	2b00      	cmp	r3, #0
 800698a:	d023      	beq.n	80069d4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006990:	6878      	ldr	r0, [r7, #4]
 8006992:	4798      	blx	r3
 8006994:	e01e      	b.n	80069d4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d10f      	bne.n	80069c4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	681a      	ldr	r2, [r3, #0]
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f022 0210 	bic.w	r2, r2, #16
 80069b2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2201      	movs	r2, #1
 80069b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2200      	movs	r2, #0
 80069c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d003      	beq.n	80069d4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069d0:	6878      	ldr	r0, [r7, #4]
 80069d2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d032      	beq.n	8006a42 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069e0:	f003 0301 	and.w	r3, r3, #1
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d022      	beq.n	8006a2e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2205      	movs	r2, #5
 80069ec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	681a      	ldr	r2, [r3, #0]
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f022 0201 	bic.w	r2, r2, #1
 80069fe:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	3301      	adds	r3, #1
 8006a04:	60bb      	str	r3, [r7, #8]
 8006a06:	697a      	ldr	r2, [r7, #20]
 8006a08:	429a      	cmp	r2, r3
 8006a0a:	d307      	bcc.n	8006a1c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f003 0301 	and.w	r3, r3, #1
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d1f2      	bne.n	8006a00 <HAL_DMA_IRQHandler+0x2cc>
 8006a1a:	e000      	b.n	8006a1e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8006a1c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2201      	movs	r2, #1
 8006a22:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2200      	movs	r2, #0
 8006a2a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d005      	beq.n	8006a42 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006a3a:	6878      	ldr	r0, [r7, #4]
 8006a3c:	4798      	blx	r3
 8006a3e:	e000      	b.n	8006a42 <HAL_DMA_IRQHandler+0x30e>
        return;
 8006a40:	bf00      	nop
    }
  }
}
 8006a42:	3718      	adds	r7, #24
 8006a44:	46bd      	mov	sp, r7
 8006a46:	bd80      	pop	{r7, pc}

08006a48 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006a48:	b480      	push	{r7}
 8006a4a:	b085      	sub	sp, #20
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	60f8      	str	r0, [r7, #12]
 8006a50:	60b9      	str	r1, [r7, #8]
 8006a52:	607a      	str	r2, [r7, #4]
 8006a54:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	681a      	ldr	r2, [r3, #0]
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8006a64:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	683a      	ldr	r2, [r7, #0]
 8006a6c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	689b      	ldr	r3, [r3, #8]
 8006a72:	2b40      	cmp	r3, #64	@ 0x40
 8006a74:	d108      	bne.n	8006a88 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	687a      	ldr	r2, [r7, #4]
 8006a7c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	68ba      	ldr	r2, [r7, #8]
 8006a84:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006a86:	e007      	b.n	8006a98 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	68ba      	ldr	r2, [r7, #8]
 8006a8e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	687a      	ldr	r2, [r7, #4]
 8006a96:	60da      	str	r2, [r3, #12]
}
 8006a98:	bf00      	nop
 8006a9a:	3714      	adds	r7, #20
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa2:	4770      	bx	lr

08006aa4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006aa4:	b480      	push	{r7}
 8006aa6:	b085      	sub	sp, #20
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	b2db      	uxtb	r3, r3
 8006ab2:	3b10      	subs	r3, #16
 8006ab4:	4a14      	ldr	r2, [pc, #80]	@ (8006b08 <DMA_CalcBaseAndBitshift+0x64>)
 8006ab6:	fba2 2303 	umull	r2, r3, r2, r3
 8006aba:	091b      	lsrs	r3, r3, #4
 8006abc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006abe:	4a13      	ldr	r2, [pc, #76]	@ (8006b0c <DMA_CalcBaseAndBitshift+0x68>)
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	4413      	add	r3, r2
 8006ac4:	781b      	ldrb	r3, [r3, #0]
 8006ac6:	461a      	mov	r2, r3
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	2b03      	cmp	r3, #3
 8006ad0:	d909      	bls.n	8006ae6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8006ada:	f023 0303 	bic.w	r3, r3, #3
 8006ade:	1d1a      	adds	r2, r3, #4
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	659a      	str	r2, [r3, #88]	@ 0x58
 8006ae4:	e007      	b.n	8006af6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8006aee:	f023 0303 	bic.w	r3, r3, #3
 8006af2:	687a      	ldr	r2, [r7, #4]
 8006af4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8006afa:	4618      	mov	r0, r3
 8006afc:	3714      	adds	r7, #20
 8006afe:	46bd      	mov	sp, r7
 8006b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b04:	4770      	bx	lr
 8006b06:	bf00      	nop
 8006b08:	aaaaaaab 	.word	0xaaaaaaab
 8006b0c:	08012ca8 	.word	0x08012ca8

08006b10 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006b10:	b480      	push	{r7}
 8006b12:	b085      	sub	sp, #20
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006b18:	2300      	movs	r3, #0
 8006b1a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b20:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	699b      	ldr	r3, [r3, #24]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d11f      	bne.n	8006b6a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8006b2a:	68bb      	ldr	r3, [r7, #8]
 8006b2c:	2b03      	cmp	r3, #3
 8006b2e:	d856      	bhi.n	8006bde <DMA_CheckFifoParam+0xce>
 8006b30:	a201      	add	r2, pc, #4	@ (adr r2, 8006b38 <DMA_CheckFifoParam+0x28>)
 8006b32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b36:	bf00      	nop
 8006b38:	08006b49 	.word	0x08006b49
 8006b3c:	08006b5b 	.word	0x08006b5b
 8006b40:	08006b49 	.word	0x08006b49
 8006b44:	08006bdf 	.word	0x08006bdf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b4c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d046      	beq.n	8006be2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006b54:	2301      	movs	r3, #1
 8006b56:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006b58:	e043      	b.n	8006be2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b5e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006b62:	d140      	bne.n	8006be6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006b64:	2301      	movs	r3, #1
 8006b66:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006b68:	e03d      	b.n	8006be6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	699b      	ldr	r3, [r3, #24]
 8006b6e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006b72:	d121      	bne.n	8006bb8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006b74:	68bb      	ldr	r3, [r7, #8]
 8006b76:	2b03      	cmp	r3, #3
 8006b78:	d837      	bhi.n	8006bea <DMA_CheckFifoParam+0xda>
 8006b7a:	a201      	add	r2, pc, #4	@ (adr r2, 8006b80 <DMA_CheckFifoParam+0x70>)
 8006b7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b80:	08006b91 	.word	0x08006b91
 8006b84:	08006b97 	.word	0x08006b97
 8006b88:	08006b91 	.word	0x08006b91
 8006b8c:	08006ba9 	.word	0x08006ba9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006b90:	2301      	movs	r3, #1
 8006b92:	73fb      	strb	r3, [r7, #15]
      break;
 8006b94:	e030      	b.n	8006bf8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b9a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d025      	beq.n	8006bee <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006ba6:	e022      	b.n	8006bee <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bac:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006bb0:	d11f      	bne.n	8006bf2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006bb6:	e01c      	b.n	8006bf2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	2b02      	cmp	r3, #2
 8006bbc:	d903      	bls.n	8006bc6 <DMA_CheckFifoParam+0xb6>
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	2b03      	cmp	r3, #3
 8006bc2:	d003      	beq.n	8006bcc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006bc4:	e018      	b.n	8006bf8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006bc6:	2301      	movs	r3, #1
 8006bc8:	73fb      	strb	r3, [r7, #15]
      break;
 8006bca:	e015      	b.n	8006bf8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bd0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d00e      	beq.n	8006bf6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006bd8:	2301      	movs	r3, #1
 8006bda:	73fb      	strb	r3, [r7, #15]
      break;
 8006bdc:	e00b      	b.n	8006bf6 <DMA_CheckFifoParam+0xe6>
      break;
 8006bde:	bf00      	nop
 8006be0:	e00a      	b.n	8006bf8 <DMA_CheckFifoParam+0xe8>
      break;
 8006be2:	bf00      	nop
 8006be4:	e008      	b.n	8006bf8 <DMA_CheckFifoParam+0xe8>
      break;
 8006be6:	bf00      	nop
 8006be8:	e006      	b.n	8006bf8 <DMA_CheckFifoParam+0xe8>
      break;
 8006bea:	bf00      	nop
 8006bec:	e004      	b.n	8006bf8 <DMA_CheckFifoParam+0xe8>
      break;
 8006bee:	bf00      	nop
 8006bf0:	e002      	b.n	8006bf8 <DMA_CheckFifoParam+0xe8>
      break;   
 8006bf2:	bf00      	nop
 8006bf4:	e000      	b.n	8006bf8 <DMA_CheckFifoParam+0xe8>
      break;
 8006bf6:	bf00      	nop
    }
  } 
  
  return status; 
 8006bf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	3714      	adds	r7, #20
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c04:	4770      	bx	lr
 8006c06:	bf00      	nop

08006c08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006c08:	b480      	push	{r7}
 8006c0a:	b089      	sub	sp, #36	@ 0x24
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
 8006c10:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006c12:	2300      	movs	r3, #0
 8006c14:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006c16:	2300      	movs	r3, #0
 8006c18:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006c1e:	2300      	movs	r3, #0
 8006c20:	61fb      	str	r3, [r7, #28]
 8006c22:	e16b      	b.n	8006efc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006c24:	2201      	movs	r2, #1
 8006c26:	69fb      	ldr	r3, [r7, #28]
 8006c28:	fa02 f303 	lsl.w	r3, r2, r3
 8006c2c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	697a      	ldr	r2, [r7, #20]
 8006c34:	4013      	ands	r3, r2
 8006c36:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006c38:	693a      	ldr	r2, [r7, #16]
 8006c3a:	697b      	ldr	r3, [r7, #20]
 8006c3c:	429a      	cmp	r2, r3
 8006c3e:	f040 815a 	bne.w	8006ef6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	685b      	ldr	r3, [r3, #4]
 8006c46:	f003 0303 	and.w	r3, r3, #3
 8006c4a:	2b01      	cmp	r3, #1
 8006c4c:	d005      	beq.n	8006c5a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	685b      	ldr	r3, [r3, #4]
 8006c52:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006c56:	2b02      	cmp	r3, #2
 8006c58:	d130      	bne.n	8006cbc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	689b      	ldr	r3, [r3, #8]
 8006c5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006c60:	69fb      	ldr	r3, [r7, #28]
 8006c62:	005b      	lsls	r3, r3, #1
 8006c64:	2203      	movs	r2, #3
 8006c66:	fa02 f303 	lsl.w	r3, r2, r3
 8006c6a:	43db      	mvns	r3, r3
 8006c6c:	69ba      	ldr	r2, [r7, #24]
 8006c6e:	4013      	ands	r3, r2
 8006c70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	68da      	ldr	r2, [r3, #12]
 8006c76:	69fb      	ldr	r3, [r7, #28]
 8006c78:	005b      	lsls	r3, r3, #1
 8006c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8006c7e:	69ba      	ldr	r2, [r7, #24]
 8006c80:	4313      	orrs	r3, r2
 8006c82:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	69ba      	ldr	r2, [r7, #24]
 8006c88:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	685b      	ldr	r3, [r3, #4]
 8006c8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006c90:	2201      	movs	r2, #1
 8006c92:	69fb      	ldr	r3, [r7, #28]
 8006c94:	fa02 f303 	lsl.w	r3, r2, r3
 8006c98:	43db      	mvns	r3, r3
 8006c9a:	69ba      	ldr	r2, [r7, #24]
 8006c9c:	4013      	ands	r3, r2
 8006c9e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	685b      	ldr	r3, [r3, #4]
 8006ca4:	091b      	lsrs	r3, r3, #4
 8006ca6:	f003 0201 	and.w	r2, r3, #1
 8006caa:	69fb      	ldr	r3, [r7, #28]
 8006cac:	fa02 f303 	lsl.w	r3, r2, r3
 8006cb0:	69ba      	ldr	r2, [r7, #24]
 8006cb2:	4313      	orrs	r3, r2
 8006cb4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	69ba      	ldr	r2, [r7, #24]
 8006cba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	685b      	ldr	r3, [r3, #4]
 8006cc0:	f003 0303 	and.w	r3, r3, #3
 8006cc4:	2b03      	cmp	r3, #3
 8006cc6:	d017      	beq.n	8006cf8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	68db      	ldr	r3, [r3, #12]
 8006ccc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006cce:	69fb      	ldr	r3, [r7, #28]
 8006cd0:	005b      	lsls	r3, r3, #1
 8006cd2:	2203      	movs	r2, #3
 8006cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8006cd8:	43db      	mvns	r3, r3
 8006cda:	69ba      	ldr	r2, [r7, #24]
 8006cdc:	4013      	ands	r3, r2
 8006cde:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	689a      	ldr	r2, [r3, #8]
 8006ce4:	69fb      	ldr	r3, [r7, #28]
 8006ce6:	005b      	lsls	r3, r3, #1
 8006ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8006cec:	69ba      	ldr	r2, [r7, #24]
 8006cee:	4313      	orrs	r3, r2
 8006cf0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	69ba      	ldr	r2, [r7, #24]
 8006cf6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	685b      	ldr	r3, [r3, #4]
 8006cfc:	f003 0303 	and.w	r3, r3, #3
 8006d00:	2b02      	cmp	r3, #2
 8006d02:	d123      	bne.n	8006d4c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006d04:	69fb      	ldr	r3, [r7, #28]
 8006d06:	08da      	lsrs	r2, r3, #3
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	3208      	adds	r2, #8
 8006d0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d10:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006d12:	69fb      	ldr	r3, [r7, #28]
 8006d14:	f003 0307 	and.w	r3, r3, #7
 8006d18:	009b      	lsls	r3, r3, #2
 8006d1a:	220f      	movs	r2, #15
 8006d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8006d20:	43db      	mvns	r3, r3
 8006d22:	69ba      	ldr	r2, [r7, #24]
 8006d24:	4013      	ands	r3, r2
 8006d26:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	691a      	ldr	r2, [r3, #16]
 8006d2c:	69fb      	ldr	r3, [r7, #28]
 8006d2e:	f003 0307 	and.w	r3, r3, #7
 8006d32:	009b      	lsls	r3, r3, #2
 8006d34:	fa02 f303 	lsl.w	r3, r2, r3
 8006d38:	69ba      	ldr	r2, [r7, #24]
 8006d3a:	4313      	orrs	r3, r2
 8006d3c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006d3e:	69fb      	ldr	r3, [r7, #28]
 8006d40:	08da      	lsrs	r2, r3, #3
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	3208      	adds	r2, #8
 8006d46:	69b9      	ldr	r1, [r7, #24]
 8006d48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006d52:	69fb      	ldr	r3, [r7, #28]
 8006d54:	005b      	lsls	r3, r3, #1
 8006d56:	2203      	movs	r2, #3
 8006d58:	fa02 f303 	lsl.w	r3, r2, r3
 8006d5c:	43db      	mvns	r3, r3
 8006d5e:	69ba      	ldr	r2, [r7, #24]
 8006d60:	4013      	ands	r3, r2
 8006d62:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	685b      	ldr	r3, [r3, #4]
 8006d68:	f003 0203 	and.w	r2, r3, #3
 8006d6c:	69fb      	ldr	r3, [r7, #28]
 8006d6e:	005b      	lsls	r3, r3, #1
 8006d70:	fa02 f303 	lsl.w	r3, r2, r3
 8006d74:	69ba      	ldr	r2, [r7, #24]
 8006d76:	4313      	orrs	r3, r2
 8006d78:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	69ba      	ldr	r2, [r7, #24]
 8006d7e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	685b      	ldr	r3, [r3, #4]
 8006d84:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	f000 80b4 	beq.w	8006ef6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006d8e:	2300      	movs	r3, #0
 8006d90:	60fb      	str	r3, [r7, #12]
 8006d92:	4b60      	ldr	r3, [pc, #384]	@ (8006f14 <HAL_GPIO_Init+0x30c>)
 8006d94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d96:	4a5f      	ldr	r2, [pc, #380]	@ (8006f14 <HAL_GPIO_Init+0x30c>)
 8006d98:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006d9c:	6453      	str	r3, [r2, #68]	@ 0x44
 8006d9e:	4b5d      	ldr	r3, [pc, #372]	@ (8006f14 <HAL_GPIO_Init+0x30c>)
 8006da0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006da2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006da6:	60fb      	str	r3, [r7, #12]
 8006da8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006daa:	4a5b      	ldr	r2, [pc, #364]	@ (8006f18 <HAL_GPIO_Init+0x310>)
 8006dac:	69fb      	ldr	r3, [r7, #28]
 8006dae:	089b      	lsrs	r3, r3, #2
 8006db0:	3302      	adds	r3, #2
 8006db2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006db6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006db8:	69fb      	ldr	r3, [r7, #28]
 8006dba:	f003 0303 	and.w	r3, r3, #3
 8006dbe:	009b      	lsls	r3, r3, #2
 8006dc0:	220f      	movs	r2, #15
 8006dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8006dc6:	43db      	mvns	r3, r3
 8006dc8:	69ba      	ldr	r2, [r7, #24]
 8006dca:	4013      	ands	r3, r2
 8006dcc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	4a52      	ldr	r2, [pc, #328]	@ (8006f1c <HAL_GPIO_Init+0x314>)
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d02b      	beq.n	8006e2e <HAL_GPIO_Init+0x226>
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	4a51      	ldr	r2, [pc, #324]	@ (8006f20 <HAL_GPIO_Init+0x318>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d025      	beq.n	8006e2a <HAL_GPIO_Init+0x222>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	4a50      	ldr	r2, [pc, #320]	@ (8006f24 <HAL_GPIO_Init+0x31c>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d01f      	beq.n	8006e26 <HAL_GPIO_Init+0x21e>
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	4a4f      	ldr	r2, [pc, #316]	@ (8006f28 <HAL_GPIO_Init+0x320>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d019      	beq.n	8006e22 <HAL_GPIO_Init+0x21a>
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	4a4e      	ldr	r2, [pc, #312]	@ (8006f2c <HAL_GPIO_Init+0x324>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d013      	beq.n	8006e1e <HAL_GPIO_Init+0x216>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	4a4d      	ldr	r2, [pc, #308]	@ (8006f30 <HAL_GPIO_Init+0x328>)
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	d00d      	beq.n	8006e1a <HAL_GPIO_Init+0x212>
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	4a4c      	ldr	r2, [pc, #304]	@ (8006f34 <HAL_GPIO_Init+0x32c>)
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d007      	beq.n	8006e16 <HAL_GPIO_Init+0x20e>
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	4a4b      	ldr	r2, [pc, #300]	@ (8006f38 <HAL_GPIO_Init+0x330>)
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d101      	bne.n	8006e12 <HAL_GPIO_Init+0x20a>
 8006e0e:	2307      	movs	r3, #7
 8006e10:	e00e      	b.n	8006e30 <HAL_GPIO_Init+0x228>
 8006e12:	2308      	movs	r3, #8
 8006e14:	e00c      	b.n	8006e30 <HAL_GPIO_Init+0x228>
 8006e16:	2306      	movs	r3, #6
 8006e18:	e00a      	b.n	8006e30 <HAL_GPIO_Init+0x228>
 8006e1a:	2305      	movs	r3, #5
 8006e1c:	e008      	b.n	8006e30 <HAL_GPIO_Init+0x228>
 8006e1e:	2304      	movs	r3, #4
 8006e20:	e006      	b.n	8006e30 <HAL_GPIO_Init+0x228>
 8006e22:	2303      	movs	r3, #3
 8006e24:	e004      	b.n	8006e30 <HAL_GPIO_Init+0x228>
 8006e26:	2302      	movs	r3, #2
 8006e28:	e002      	b.n	8006e30 <HAL_GPIO_Init+0x228>
 8006e2a:	2301      	movs	r3, #1
 8006e2c:	e000      	b.n	8006e30 <HAL_GPIO_Init+0x228>
 8006e2e:	2300      	movs	r3, #0
 8006e30:	69fa      	ldr	r2, [r7, #28]
 8006e32:	f002 0203 	and.w	r2, r2, #3
 8006e36:	0092      	lsls	r2, r2, #2
 8006e38:	4093      	lsls	r3, r2
 8006e3a:	69ba      	ldr	r2, [r7, #24]
 8006e3c:	4313      	orrs	r3, r2
 8006e3e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006e40:	4935      	ldr	r1, [pc, #212]	@ (8006f18 <HAL_GPIO_Init+0x310>)
 8006e42:	69fb      	ldr	r3, [r7, #28]
 8006e44:	089b      	lsrs	r3, r3, #2
 8006e46:	3302      	adds	r3, #2
 8006e48:	69ba      	ldr	r2, [r7, #24]
 8006e4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006e4e:	4b3b      	ldr	r3, [pc, #236]	@ (8006f3c <HAL_GPIO_Init+0x334>)
 8006e50:	689b      	ldr	r3, [r3, #8]
 8006e52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006e54:	693b      	ldr	r3, [r7, #16]
 8006e56:	43db      	mvns	r3, r3
 8006e58:	69ba      	ldr	r2, [r7, #24]
 8006e5a:	4013      	ands	r3, r2
 8006e5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	685b      	ldr	r3, [r3, #4]
 8006e62:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d003      	beq.n	8006e72 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8006e6a:	69ba      	ldr	r2, [r7, #24]
 8006e6c:	693b      	ldr	r3, [r7, #16]
 8006e6e:	4313      	orrs	r3, r2
 8006e70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006e72:	4a32      	ldr	r2, [pc, #200]	@ (8006f3c <HAL_GPIO_Init+0x334>)
 8006e74:	69bb      	ldr	r3, [r7, #24]
 8006e76:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006e78:	4b30      	ldr	r3, [pc, #192]	@ (8006f3c <HAL_GPIO_Init+0x334>)
 8006e7a:	68db      	ldr	r3, [r3, #12]
 8006e7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006e7e:	693b      	ldr	r3, [r7, #16]
 8006e80:	43db      	mvns	r3, r3
 8006e82:	69ba      	ldr	r2, [r7, #24]
 8006e84:	4013      	ands	r3, r2
 8006e86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	685b      	ldr	r3, [r3, #4]
 8006e8c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d003      	beq.n	8006e9c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8006e94:	69ba      	ldr	r2, [r7, #24]
 8006e96:	693b      	ldr	r3, [r7, #16]
 8006e98:	4313      	orrs	r3, r2
 8006e9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006e9c:	4a27      	ldr	r2, [pc, #156]	@ (8006f3c <HAL_GPIO_Init+0x334>)
 8006e9e:	69bb      	ldr	r3, [r7, #24]
 8006ea0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006ea2:	4b26      	ldr	r3, [pc, #152]	@ (8006f3c <HAL_GPIO_Init+0x334>)
 8006ea4:	685b      	ldr	r3, [r3, #4]
 8006ea6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006ea8:	693b      	ldr	r3, [r7, #16]
 8006eaa:	43db      	mvns	r3, r3
 8006eac:	69ba      	ldr	r2, [r7, #24]
 8006eae:	4013      	ands	r3, r2
 8006eb0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	685b      	ldr	r3, [r3, #4]
 8006eb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d003      	beq.n	8006ec6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8006ebe:	69ba      	ldr	r2, [r7, #24]
 8006ec0:	693b      	ldr	r3, [r7, #16]
 8006ec2:	4313      	orrs	r3, r2
 8006ec4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006ec6:	4a1d      	ldr	r2, [pc, #116]	@ (8006f3c <HAL_GPIO_Init+0x334>)
 8006ec8:	69bb      	ldr	r3, [r7, #24]
 8006eca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006ecc:	4b1b      	ldr	r3, [pc, #108]	@ (8006f3c <HAL_GPIO_Init+0x334>)
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006ed2:	693b      	ldr	r3, [r7, #16]
 8006ed4:	43db      	mvns	r3, r3
 8006ed6:	69ba      	ldr	r2, [r7, #24]
 8006ed8:	4013      	ands	r3, r2
 8006eda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	685b      	ldr	r3, [r3, #4]
 8006ee0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d003      	beq.n	8006ef0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8006ee8:	69ba      	ldr	r2, [r7, #24]
 8006eea:	693b      	ldr	r3, [r7, #16]
 8006eec:	4313      	orrs	r3, r2
 8006eee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006ef0:	4a12      	ldr	r2, [pc, #72]	@ (8006f3c <HAL_GPIO_Init+0x334>)
 8006ef2:	69bb      	ldr	r3, [r7, #24]
 8006ef4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006ef6:	69fb      	ldr	r3, [r7, #28]
 8006ef8:	3301      	adds	r3, #1
 8006efa:	61fb      	str	r3, [r7, #28]
 8006efc:	69fb      	ldr	r3, [r7, #28]
 8006efe:	2b0f      	cmp	r3, #15
 8006f00:	f67f ae90 	bls.w	8006c24 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006f04:	bf00      	nop
 8006f06:	bf00      	nop
 8006f08:	3724      	adds	r7, #36	@ 0x24
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f10:	4770      	bx	lr
 8006f12:	bf00      	nop
 8006f14:	40023800 	.word	0x40023800
 8006f18:	40013800 	.word	0x40013800
 8006f1c:	40020000 	.word	0x40020000
 8006f20:	40020400 	.word	0x40020400
 8006f24:	40020800 	.word	0x40020800
 8006f28:	40020c00 	.word	0x40020c00
 8006f2c:	40021000 	.word	0x40021000
 8006f30:	40021400 	.word	0x40021400
 8006f34:	40021800 	.word	0x40021800
 8006f38:	40021c00 	.word	0x40021c00
 8006f3c:	40013c00 	.word	0x40013c00

08006f40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006f40:	b480      	push	{r7}
 8006f42:	b083      	sub	sp, #12
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
 8006f48:	460b      	mov	r3, r1
 8006f4a:	807b      	strh	r3, [r7, #2]
 8006f4c:	4613      	mov	r3, r2
 8006f4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006f50:	787b      	ldrb	r3, [r7, #1]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d003      	beq.n	8006f5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006f56:	887a      	ldrh	r2, [r7, #2]
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006f5c:	e003      	b.n	8006f66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006f5e:	887b      	ldrh	r3, [r7, #2]
 8006f60:	041a      	lsls	r2, r3, #16
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	619a      	str	r2, [r3, #24]
}
 8006f66:	bf00      	nop
 8006f68:	370c      	adds	r7, #12
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f70:	4770      	bx	lr
	...

08006f74 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b084      	sub	sp, #16
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d101      	bne.n	8006f86 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006f82:	2301      	movs	r3, #1
 8006f84:	e12b      	b.n	80071de <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006f8c:	b2db      	uxtb	r3, r3
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d106      	bne.n	8006fa0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2200      	movs	r2, #0
 8006f96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	f7fe f862 	bl	8005064 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2224      	movs	r2, #36	@ 0x24
 8006fa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	681a      	ldr	r2, [r3, #0]
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f022 0201 	bic.w	r2, r2, #1
 8006fb6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	681a      	ldr	r2, [r3, #0]
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006fc6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	681a      	ldr	r2, [r3, #0]
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006fd6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006fd8:	f001 fc48 	bl	800886c <HAL_RCC_GetPCLK1Freq>
 8006fdc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	685b      	ldr	r3, [r3, #4]
 8006fe2:	4a81      	ldr	r2, [pc, #516]	@ (80071e8 <HAL_I2C_Init+0x274>)
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d807      	bhi.n	8006ff8 <HAL_I2C_Init+0x84>
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	4a80      	ldr	r2, [pc, #512]	@ (80071ec <HAL_I2C_Init+0x278>)
 8006fec:	4293      	cmp	r3, r2
 8006fee:	bf94      	ite	ls
 8006ff0:	2301      	movls	r3, #1
 8006ff2:	2300      	movhi	r3, #0
 8006ff4:	b2db      	uxtb	r3, r3
 8006ff6:	e006      	b.n	8007006 <HAL_I2C_Init+0x92>
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	4a7d      	ldr	r2, [pc, #500]	@ (80071f0 <HAL_I2C_Init+0x27c>)
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	bf94      	ite	ls
 8007000:	2301      	movls	r3, #1
 8007002:	2300      	movhi	r3, #0
 8007004:	b2db      	uxtb	r3, r3
 8007006:	2b00      	cmp	r3, #0
 8007008:	d001      	beq.n	800700e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800700a:	2301      	movs	r3, #1
 800700c:	e0e7      	b.n	80071de <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	4a78      	ldr	r2, [pc, #480]	@ (80071f4 <HAL_I2C_Init+0x280>)
 8007012:	fba2 2303 	umull	r2, r3, r2, r3
 8007016:	0c9b      	lsrs	r3, r3, #18
 8007018:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	685b      	ldr	r3, [r3, #4]
 8007020:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	68ba      	ldr	r2, [r7, #8]
 800702a:	430a      	orrs	r2, r1
 800702c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	6a1b      	ldr	r3, [r3, #32]
 8007034:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	685b      	ldr	r3, [r3, #4]
 800703c:	4a6a      	ldr	r2, [pc, #424]	@ (80071e8 <HAL_I2C_Init+0x274>)
 800703e:	4293      	cmp	r3, r2
 8007040:	d802      	bhi.n	8007048 <HAL_I2C_Init+0xd4>
 8007042:	68bb      	ldr	r3, [r7, #8]
 8007044:	3301      	adds	r3, #1
 8007046:	e009      	b.n	800705c <HAL_I2C_Init+0xe8>
 8007048:	68bb      	ldr	r3, [r7, #8]
 800704a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800704e:	fb02 f303 	mul.w	r3, r2, r3
 8007052:	4a69      	ldr	r2, [pc, #420]	@ (80071f8 <HAL_I2C_Init+0x284>)
 8007054:	fba2 2303 	umull	r2, r3, r2, r3
 8007058:	099b      	lsrs	r3, r3, #6
 800705a:	3301      	adds	r3, #1
 800705c:	687a      	ldr	r2, [r7, #4]
 800705e:	6812      	ldr	r2, [r2, #0]
 8007060:	430b      	orrs	r3, r1
 8007062:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	69db      	ldr	r3, [r3, #28]
 800706a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800706e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	685b      	ldr	r3, [r3, #4]
 8007076:	495c      	ldr	r1, [pc, #368]	@ (80071e8 <HAL_I2C_Init+0x274>)
 8007078:	428b      	cmp	r3, r1
 800707a:	d819      	bhi.n	80070b0 <HAL_I2C_Init+0x13c>
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	1e59      	subs	r1, r3, #1
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	685b      	ldr	r3, [r3, #4]
 8007084:	005b      	lsls	r3, r3, #1
 8007086:	fbb1 f3f3 	udiv	r3, r1, r3
 800708a:	1c59      	adds	r1, r3, #1
 800708c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8007090:	400b      	ands	r3, r1
 8007092:	2b00      	cmp	r3, #0
 8007094:	d00a      	beq.n	80070ac <HAL_I2C_Init+0x138>
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	1e59      	subs	r1, r3, #1
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	685b      	ldr	r3, [r3, #4]
 800709e:	005b      	lsls	r3, r3, #1
 80070a0:	fbb1 f3f3 	udiv	r3, r1, r3
 80070a4:	3301      	adds	r3, #1
 80070a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80070aa:	e051      	b.n	8007150 <HAL_I2C_Init+0x1dc>
 80070ac:	2304      	movs	r3, #4
 80070ae:	e04f      	b.n	8007150 <HAL_I2C_Init+0x1dc>
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	689b      	ldr	r3, [r3, #8]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d111      	bne.n	80070dc <HAL_I2C_Init+0x168>
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	1e58      	subs	r0, r3, #1
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	6859      	ldr	r1, [r3, #4]
 80070c0:	460b      	mov	r3, r1
 80070c2:	005b      	lsls	r3, r3, #1
 80070c4:	440b      	add	r3, r1
 80070c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80070ca:	3301      	adds	r3, #1
 80070cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	bf0c      	ite	eq
 80070d4:	2301      	moveq	r3, #1
 80070d6:	2300      	movne	r3, #0
 80070d8:	b2db      	uxtb	r3, r3
 80070da:	e012      	b.n	8007102 <HAL_I2C_Init+0x18e>
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	1e58      	subs	r0, r3, #1
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	6859      	ldr	r1, [r3, #4]
 80070e4:	460b      	mov	r3, r1
 80070e6:	009b      	lsls	r3, r3, #2
 80070e8:	440b      	add	r3, r1
 80070ea:	0099      	lsls	r1, r3, #2
 80070ec:	440b      	add	r3, r1
 80070ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80070f2:	3301      	adds	r3, #1
 80070f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	bf0c      	ite	eq
 80070fc:	2301      	moveq	r3, #1
 80070fe:	2300      	movne	r3, #0
 8007100:	b2db      	uxtb	r3, r3
 8007102:	2b00      	cmp	r3, #0
 8007104:	d001      	beq.n	800710a <HAL_I2C_Init+0x196>
 8007106:	2301      	movs	r3, #1
 8007108:	e022      	b.n	8007150 <HAL_I2C_Init+0x1dc>
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	689b      	ldr	r3, [r3, #8]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d10e      	bne.n	8007130 <HAL_I2C_Init+0x1bc>
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	1e58      	subs	r0, r3, #1
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6859      	ldr	r1, [r3, #4]
 800711a:	460b      	mov	r3, r1
 800711c:	005b      	lsls	r3, r3, #1
 800711e:	440b      	add	r3, r1
 8007120:	fbb0 f3f3 	udiv	r3, r0, r3
 8007124:	3301      	adds	r3, #1
 8007126:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800712a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800712e:	e00f      	b.n	8007150 <HAL_I2C_Init+0x1dc>
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	1e58      	subs	r0, r3, #1
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	6859      	ldr	r1, [r3, #4]
 8007138:	460b      	mov	r3, r1
 800713a:	009b      	lsls	r3, r3, #2
 800713c:	440b      	add	r3, r1
 800713e:	0099      	lsls	r1, r3, #2
 8007140:	440b      	add	r3, r1
 8007142:	fbb0 f3f3 	udiv	r3, r0, r3
 8007146:	3301      	adds	r3, #1
 8007148:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800714c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007150:	6879      	ldr	r1, [r7, #4]
 8007152:	6809      	ldr	r1, [r1, #0]
 8007154:	4313      	orrs	r3, r2
 8007156:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	69da      	ldr	r2, [r3, #28]
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6a1b      	ldr	r3, [r3, #32]
 800716a:	431a      	orrs	r2, r3
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	430a      	orrs	r2, r1
 8007172:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	689b      	ldr	r3, [r3, #8]
 800717a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800717e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8007182:	687a      	ldr	r2, [r7, #4]
 8007184:	6911      	ldr	r1, [r2, #16]
 8007186:	687a      	ldr	r2, [r7, #4]
 8007188:	68d2      	ldr	r2, [r2, #12]
 800718a:	4311      	orrs	r1, r2
 800718c:	687a      	ldr	r2, [r7, #4]
 800718e:	6812      	ldr	r2, [r2, #0]
 8007190:	430b      	orrs	r3, r1
 8007192:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	68db      	ldr	r3, [r3, #12]
 800719a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	695a      	ldr	r2, [r3, #20]
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	699b      	ldr	r3, [r3, #24]
 80071a6:	431a      	orrs	r2, r3
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	430a      	orrs	r2, r1
 80071ae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	681a      	ldr	r2, [r3, #0]
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f042 0201 	orr.w	r2, r2, #1
 80071be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2200      	movs	r2, #0
 80071c4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2220      	movs	r2, #32
 80071ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2200      	movs	r2, #0
 80071d2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2200      	movs	r2, #0
 80071d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80071dc:	2300      	movs	r3, #0
}
 80071de:	4618      	mov	r0, r3
 80071e0:	3710      	adds	r7, #16
 80071e2:	46bd      	mov	sp, r7
 80071e4:	bd80      	pop	{r7, pc}
 80071e6:	bf00      	nop
 80071e8:	000186a0 	.word	0x000186a0
 80071ec:	001e847f 	.word	0x001e847f
 80071f0:	003d08ff 	.word	0x003d08ff
 80071f4:	431bde83 	.word	0x431bde83
 80071f8:	10624dd3 	.word	0x10624dd3

080071fc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b088      	sub	sp, #32
 8007200:	af02      	add	r7, sp, #8
 8007202:	60f8      	str	r0, [r7, #12]
 8007204:	4608      	mov	r0, r1
 8007206:	4611      	mov	r1, r2
 8007208:	461a      	mov	r2, r3
 800720a:	4603      	mov	r3, r0
 800720c:	817b      	strh	r3, [r7, #10]
 800720e:	460b      	mov	r3, r1
 8007210:	813b      	strh	r3, [r7, #8]
 8007212:	4613      	mov	r3, r2
 8007214:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007216:	f7fe fbe3 	bl	80059e0 <HAL_GetTick>
 800721a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007222:	b2db      	uxtb	r3, r3
 8007224:	2b20      	cmp	r3, #32
 8007226:	f040 80d9 	bne.w	80073dc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800722a:	697b      	ldr	r3, [r7, #20]
 800722c:	9300      	str	r3, [sp, #0]
 800722e:	2319      	movs	r3, #25
 8007230:	2201      	movs	r2, #1
 8007232:	496d      	ldr	r1, [pc, #436]	@ (80073e8 <HAL_I2C_Mem_Write+0x1ec>)
 8007234:	68f8      	ldr	r0, [r7, #12]
 8007236:	f000 fc8b 	bl	8007b50 <I2C_WaitOnFlagUntilTimeout>
 800723a:	4603      	mov	r3, r0
 800723c:	2b00      	cmp	r3, #0
 800723e:	d001      	beq.n	8007244 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8007240:	2302      	movs	r3, #2
 8007242:	e0cc      	b.n	80073de <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800724a:	2b01      	cmp	r3, #1
 800724c:	d101      	bne.n	8007252 <HAL_I2C_Mem_Write+0x56>
 800724e:	2302      	movs	r3, #2
 8007250:	e0c5      	b.n	80073de <HAL_I2C_Mem_Write+0x1e2>
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	2201      	movs	r2, #1
 8007256:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f003 0301 	and.w	r3, r3, #1
 8007264:	2b01      	cmp	r3, #1
 8007266:	d007      	beq.n	8007278 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	681a      	ldr	r2, [r3, #0]
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f042 0201 	orr.w	r2, r2, #1
 8007276:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	681a      	ldr	r2, [r3, #0]
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007286:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	2221      	movs	r2, #33	@ 0x21
 800728c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	2240      	movs	r2, #64	@ 0x40
 8007294:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	2200      	movs	r2, #0
 800729c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	6a3a      	ldr	r2, [r7, #32]
 80072a2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80072a8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80072ae:	b29a      	uxth	r2, r3
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	4a4d      	ldr	r2, [pc, #308]	@ (80073ec <HAL_I2C_Mem_Write+0x1f0>)
 80072b8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80072ba:	88f8      	ldrh	r0, [r7, #6]
 80072bc:	893a      	ldrh	r2, [r7, #8]
 80072be:	8979      	ldrh	r1, [r7, #10]
 80072c0:	697b      	ldr	r3, [r7, #20]
 80072c2:	9301      	str	r3, [sp, #4]
 80072c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072c6:	9300      	str	r3, [sp, #0]
 80072c8:	4603      	mov	r3, r0
 80072ca:	68f8      	ldr	r0, [r7, #12]
 80072cc:	f000 fac2 	bl	8007854 <I2C_RequestMemoryWrite>
 80072d0:	4603      	mov	r3, r0
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d052      	beq.n	800737c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80072d6:	2301      	movs	r3, #1
 80072d8:	e081      	b.n	80073de <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80072da:	697a      	ldr	r2, [r7, #20]
 80072dc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80072de:	68f8      	ldr	r0, [r7, #12]
 80072e0:	f000 fd50 	bl	8007d84 <I2C_WaitOnTXEFlagUntilTimeout>
 80072e4:	4603      	mov	r3, r0
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d00d      	beq.n	8007306 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072ee:	2b04      	cmp	r3, #4
 80072f0:	d107      	bne.n	8007302 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	681a      	ldr	r2, [r3, #0]
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007300:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007302:	2301      	movs	r3, #1
 8007304:	e06b      	b.n	80073de <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800730a:	781a      	ldrb	r2, [r3, #0]
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007316:	1c5a      	adds	r2, r3, #1
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007320:	3b01      	subs	r3, #1
 8007322:	b29a      	uxth	r2, r3
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800732c:	b29b      	uxth	r3, r3
 800732e:	3b01      	subs	r3, #1
 8007330:	b29a      	uxth	r2, r3
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	695b      	ldr	r3, [r3, #20]
 800733c:	f003 0304 	and.w	r3, r3, #4
 8007340:	2b04      	cmp	r3, #4
 8007342:	d11b      	bne.n	800737c <HAL_I2C_Mem_Write+0x180>
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007348:	2b00      	cmp	r3, #0
 800734a:	d017      	beq.n	800737c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007350:	781a      	ldrb	r2, [r3, #0]
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800735c:	1c5a      	adds	r2, r3, #1
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007366:	3b01      	subs	r3, #1
 8007368:	b29a      	uxth	r2, r3
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007372:	b29b      	uxth	r3, r3
 8007374:	3b01      	subs	r3, #1
 8007376:	b29a      	uxth	r2, r3
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007380:	2b00      	cmp	r3, #0
 8007382:	d1aa      	bne.n	80072da <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007384:	697a      	ldr	r2, [r7, #20]
 8007386:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007388:	68f8      	ldr	r0, [r7, #12]
 800738a:	f000 fd43 	bl	8007e14 <I2C_WaitOnBTFFlagUntilTimeout>
 800738e:	4603      	mov	r3, r0
 8007390:	2b00      	cmp	r3, #0
 8007392:	d00d      	beq.n	80073b0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007398:	2b04      	cmp	r3, #4
 800739a:	d107      	bne.n	80073ac <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	681a      	ldr	r2, [r3, #0]
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80073aa:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80073ac:	2301      	movs	r3, #1
 80073ae:	e016      	b.n	80073de <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	681a      	ldr	r2, [r3, #0]
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80073be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	2220      	movs	r2, #32
 80073c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	2200      	movs	r2, #0
 80073cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	2200      	movs	r2, #0
 80073d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80073d8:	2300      	movs	r3, #0
 80073da:	e000      	b.n	80073de <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80073dc:	2302      	movs	r3, #2
  }
}
 80073de:	4618      	mov	r0, r3
 80073e0:	3718      	adds	r7, #24
 80073e2:	46bd      	mov	sp, r7
 80073e4:	bd80      	pop	{r7, pc}
 80073e6:	bf00      	nop
 80073e8:	00100002 	.word	0x00100002
 80073ec:	ffff0000 	.word	0xffff0000

080073f0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b08c      	sub	sp, #48	@ 0x30
 80073f4:	af02      	add	r7, sp, #8
 80073f6:	60f8      	str	r0, [r7, #12]
 80073f8:	4608      	mov	r0, r1
 80073fa:	4611      	mov	r1, r2
 80073fc:	461a      	mov	r2, r3
 80073fe:	4603      	mov	r3, r0
 8007400:	817b      	strh	r3, [r7, #10]
 8007402:	460b      	mov	r3, r1
 8007404:	813b      	strh	r3, [r7, #8]
 8007406:	4613      	mov	r3, r2
 8007408:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800740a:	f7fe fae9 	bl	80059e0 <HAL_GetTick>
 800740e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007416:	b2db      	uxtb	r3, r3
 8007418:	2b20      	cmp	r3, #32
 800741a:	f040 8214 	bne.w	8007846 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800741e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007420:	9300      	str	r3, [sp, #0]
 8007422:	2319      	movs	r3, #25
 8007424:	2201      	movs	r2, #1
 8007426:	497b      	ldr	r1, [pc, #492]	@ (8007614 <HAL_I2C_Mem_Read+0x224>)
 8007428:	68f8      	ldr	r0, [r7, #12]
 800742a:	f000 fb91 	bl	8007b50 <I2C_WaitOnFlagUntilTimeout>
 800742e:	4603      	mov	r3, r0
 8007430:	2b00      	cmp	r3, #0
 8007432:	d001      	beq.n	8007438 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8007434:	2302      	movs	r3, #2
 8007436:	e207      	b.n	8007848 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800743e:	2b01      	cmp	r3, #1
 8007440:	d101      	bne.n	8007446 <HAL_I2C_Mem_Read+0x56>
 8007442:	2302      	movs	r3, #2
 8007444:	e200      	b.n	8007848 <HAL_I2C_Mem_Read+0x458>
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	2201      	movs	r2, #1
 800744a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f003 0301 	and.w	r3, r3, #1
 8007458:	2b01      	cmp	r3, #1
 800745a:	d007      	beq.n	800746c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	681a      	ldr	r2, [r3, #0]
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f042 0201 	orr.w	r2, r2, #1
 800746a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	681a      	ldr	r2, [r3, #0]
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800747a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	2222      	movs	r2, #34	@ 0x22
 8007480:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	2240      	movs	r2, #64	@ 0x40
 8007488:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	2200      	movs	r2, #0
 8007490:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007496:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800749c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80074a2:	b29a      	uxth	r2, r3
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	4a5b      	ldr	r2, [pc, #364]	@ (8007618 <HAL_I2C_Mem_Read+0x228>)
 80074ac:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80074ae:	88f8      	ldrh	r0, [r7, #6]
 80074b0:	893a      	ldrh	r2, [r7, #8]
 80074b2:	8979      	ldrh	r1, [r7, #10]
 80074b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074b6:	9301      	str	r3, [sp, #4]
 80074b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074ba:	9300      	str	r3, [sp, #0]
 80074bc:	4603      	mov	r3, r0
 80074be:	68f8      	ldr	r0, [r7, #12]
 80074c0:	f000 fa5e 	bl	8007980 <I2C_RequestMemoryRead>
 80074c4:	4603      	mov	r3, r0
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d001      	beq.n	80074ce <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80074ca:	2301      	movs	r3, #1
 80074cc:	e1bc      	b.n	8007848 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d113      	bne.n	80074fe <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80074d6:	2300      	movs	r3, #0
 80074d8:	623b      	str	r3, [r7, #32]
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	695b      	ldr	r3, [r3, #20]
 80074e0:	623b      	str	r3, [r7, #32]
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	699b      	ldr	r3, [r3, #24]
 80074e8:	623b      	str	r3, [r7, #32]
 80074ea:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	681a      	ldr	r2, [r3, #0]
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80074fa:	601a      	str	r2, [r3, #0]
 80074fc:	e190      	b.n	8007820 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007502:	2b01      	cmp	r3, #1
 8007504:	d11b      	bne.n	800753e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	681a      	ldr	r2, [r3, #0]
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007514:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007516:	2300      	movs	r3, #0
 8007518:	61fb      	str	r3, [r7, #28]
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	695b      	ldr	r3, [r3, #20]
 8007520:	61fb      	str	r3, [r7, #28]
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	699b      	ldr	r3, [r3, #24]
 8007528:	61fb      	str	r3, [r7, #28]
 800752a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	681a      	ldr	r2, [r3, #0]
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800753a:	601a      	str	r2, [r3, #0]
 800753c:	e170      	b.n	8007820 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007542:	2b02      	cmp	r3, #2
 8007544:	d11b      	bne.n	800757e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	681a      	ldr	r2, [r3, #0]
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007554:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	681a      	ldr	r2, [r3, #0]
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007564:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007566:	2300      	movs	r3, #0
 8007568:	61bb      	str	r3, [r7, #24]
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	695b      	ldr	r3, [r3, #20]
 8007570:	61bb      	str	r3, [r7, #24]
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	699b      	ldr	r3, [r3, #24]
 8007578:	61bb      	str	r3, [r7, #24]
 800757a:	69bb      	ldr	r3, [r7, #24]
 800757c:	e150      	b.n	8007820 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800757e:	2300      	movs	r3, #0
 8007580:	617b      	str	r3, [r7, #20]
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	695b      	ldr	r3, [r3, #20]
 8007588:	617b      	str	r3, [r7, #20]
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	699b      	ldr	r3, [r3, #24]
 8007590:	617b      	str	r3, [r7, #20]
 8007592:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8007594:	e144      	b.n	8007820 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800759a:	2b03      	cmp	r3, #3
 800759c:	f200 80f1 	bhi.w	8007782 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80075a4:	2b01      	cmp	r3, #1
 80075a6:	d123      	bne.n	80075f0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80075a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80075aa:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80075ac:	68f8      	ldr	r0, [r7, #12]
 80075ae:	f000 fc79 	bl	8007ea4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80075b2:	4603      	mov	r3, r0
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d001      	beq.n	80075bc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80075b8:	2301      	movs	r3, #1
 80075ba:	e145      	b.n	8007848 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	691a      	ldr	r2, [r3, #16]
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075c6:	b2d2      	uxtb	r2, r2
 80075c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075ce:	1c5a      	adds	r2, r3, #1
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80075d8:	3b01      	subs	r3, #1
 80075da:	b29a      	uxth	r2, r3
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80075e4:	b29b      	uxth	r3, r3
 80075e6:	3b01      	subs	r3, #1
 80075e8:	b29a      	uxth	r2, r3
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80075ee:	e117      	b.n	8007820 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80075f4:	2b02      	cmp	r3, #2
 80075f6:	d14e      	bne.n	8007696 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80075f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075fa:	9300      	str	r3, [sp, #0]
 80075fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075fe:	2200      	movs	r2, #0
 8007600:	4906      	ldr	r1, [pc, #24]	@ (800761c <HAL_I2C_Mem_Read+0x22c>)
 8007602:	68f8      	ldr	r0, [r7, #12]
 8007604:	f000 faa4 	bl	8007b50 <I2C_WaitOnFlagUntilTimeout>
 8007608:	4603      	mov	r3, r0
 800760a:	2b00      	cmp	r3, #0
 800760c:	d008      	beq.n	8007620 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800760e:	2301      	movs	r3, #1
 8007610:	e11a      	b.n	8007848 <HAL_I2C_Mem_Read+0x458>
 8007612:	bf00      	nop
 8007614:	00100002 	.word	0x00100002
 8007618:	ffff0000 	.word	0xffff0000
 800761c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	681a      	ldr	r2, [r3, #0]
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800762e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	691a      	ldr	r2, [r3, #16]
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800763a:	b2d2      	uxtb	r2, r2
 800763c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007642:	1c5a      	adds	r2, r3, #1
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800764c:	3b01      	subs	r3, #1
 800764e:	b29a      	uxth	r2, r3
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007658:	b29b      	uxth	r3, r3
 800765a:	3b01      	subs	r3, #1
 800765c:	b29a      	uxth	r2, r3
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	691a      	ldr	r2, [r3, #16]
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800766c:	b2d2      	uxtb	r2, r2
 800766e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007674:	1c5a      	adds	r2, r3, #1
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800767e:	3b01      	subs	r3, #1
 8007680:	b29a      	uxth	r2, r3
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800768a:	b29b      	uxth	r3, r3
 800768c:	3b01      	subs	r3, #1
 800768e:	b29a      	uxth	r2, r3
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007694:	e0c4      	b.n	8007820 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007698:	9300      	str	r3, [sp, #0]
 800769a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800769c:	2200      	movs	r2, #0
 800769e:	496c      	ldr	r1, [pc, #432]	@ (8007850 <HAL_I2C_Mem_Read+0x460>)
 80076a0:	68f8      	ldr	r0, [r7, #12]
 80076a2:	f000 fa55 	bl	8007b50 <I2C_WaitOnFlagUntilTimeout>
 80076a6:	4603      	mov	r3, r0
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d001      	beq.n	80076b0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80076ac:	2301      	movs	r3, #1
 80076ae:	e0cb      	b.n	8007848 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	681a      	ldr	r2, [r3, #0]
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80076be:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	691a      	ldr	r2, [r3, #16]
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076ca:	b2d2      	uxtb	r2, r2
 80076cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076d2:	1c5a      	adds	r2, r3, #1
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80076dc:	3b01      	subs	r3, #1
 80076de:	b29a      	uxth	r2, r3
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80076e8:	b29b      	uxth	r3, r3
 80076ea:	3b01      	subs	r3, #1
 80076ec:	b29a      	uxth	r2, r3
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80076f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076f4:	9300      	str	r3, [sp, #0]
 80076f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076f8:	2200      	movs	r2, #0
 80076fa:	4955      	ldr	r1, [pc, #340]	@ (8007850 <HAL_I2C_Mem_Read+0x460>)
 80076fc:	68f8      	ldr	r0, [r7, #12]
 80076fe:	f000 fa27 	bl	8007b50 <I2C_WaitOnFlagUntilTimeout>
 8007702:	4603      	mov	r3, r0
 8007704:	2b00      	cmp	r3, #0
 8007706:	d001      	beq.n	800770c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8007708:	2301      	movs	r3, #1
 800770a:	e09d      	b.n	8007848 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	681a      	ldr	r2, [r3, #0]
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800771a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	691a      	ldr	r2, [r3, #16]
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007726:	b2d2      	uxtb	r2, r2
 8007728:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800772e:	1c5a      	adds	r2, r3, #1
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007738:	3b01      	subs	r3, #1
 800773a:	b29a      	uxth	r2, r3
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007744:	b29b      	uxth	r3, r3
 8007746:	3b01      	subs	r3, #1
 8007748:	b29a      	uxth	r2, r3
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	691a      	ldr	r2, [r3, #16]
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007758:	b2d2      	uxtb	r2, r2
 800775a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007760:	1c5a      	adds	r2, r3, #1
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800776a:	3b01      	subs	r3, #1
 800776c:	b29a      	uxth	r2, r3
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007776:	b29b      	uxth	r3, r3
 8007778:	3b01      	subs	r3, #1
 800777a:	b29a      	uxth	r2, r3
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007780:	e04e      	b.n	8007820 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007782:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007784:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007786:	68f8      	ldr	r0, [r7, #12]
 8007788:	f000 fb8c 	bl	8007ea4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800778c:	4603      	mov	r3, r0
 800778e:	2b00      	cmp	r3, #0
 8007790:	d001      	beq.n	8007796 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8007792:	2301      	movs	r3, #1
 8007794:	e058      	b.n	8007848 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	691a      	ldr	r2, [r3, #16]
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077a0:	b2d2      	uxtb	r2, r2
 80077a2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077a8:	1c5a      	adds	r2, r3, #1
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80077b2:	3b01      	subs	r3, #1
 80077b4:	b29a      	uxth	r2, r3
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80077be:	b29b      	uxth	r3, r3
 80077c0:	3b01      	subs	r3, #1
 80077c2:	b29a      	uxth	r2, r3
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	695b      	ldr	r3, [r3, #20]
 80077ce:	f003 0304 	and.w	r3, r3, #4
 80077d2:	2b04      	cmp	r3, #4
 80077d4:	d124      	bne.n	8007820 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80077da:	2b03      	cmp	r3, #3
 80077dc:	d107      	bne.n	80077ee <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	681a      	ldr	r2, [r3, #0]
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80077ec:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	691a      	ldr	r2, [r3, #16]
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077f8:	b2d2      	uxtb	r2, r2
 80077fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007800:	1c5a      	adds	r2, r3, #1
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800780a:	3b01      	subs	r3, #1
 800780c:	b29a      	uxth	r2, r3
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007816:	b29b      	uxth	r3, r3
 8007818:	3b01      	subs	r3, #1
 800781a:	b29a      	uxth	r2, r3
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007824:	2b00      	cmp	r3, #0
 8007826:	f47f aeb6 	bne.w	8007596 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	2220      	movs	r2, #32
 800782e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	2200      	movs	r2, #0
 8007836:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	2200      	movs	r2, #0
 800783e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8007842:	2300      	movs	r3, #0
 8007844:	e000      	b.n	8007848 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8007846:	2302      	movs	r3, #2
  }
}
 8007848:	4618      	mov	r0, r3
 800784a:	3728      	adds	r7, #40	@ 0x28
 800784c:	46bd      	mov	sp, r7
 800784e:	bd80      	pop	{r7, pc}
 8007850:	00010004 	.word	0x00010004

08007854 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007854:	b580      	push	{r7, lr}
 8007856:	b088      	sub	sp, #32
 8007858:	af02      	add	r7, sp, #8
 800785a:	60f8      	str	r0, [r7, #12]
 800785c:	4608      	mov	r0, r1
 800785e:	4611      	mov	r1, r2
 8007860:	461a      	mov	r2, r3
 8007862:	4603      	mov	r3, r0
 8007864:	817b      	strh	r3, [r7, #10]
 8007866:	460b      	mov	r3, r1
 8007868:	813b      	strh	r3, [r7, #8]
 800786a:	4613      	mov	r3, r2
 800786c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	681a      	ldr	r2, [r3, #0]
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800787c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800787e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007880:	9300      	str	r3, [sp, #0]
 8007882:	6a3b      	ldr	r3, [r7, #32]
 8007884:	2200      	movs	r2, #0
 8007886:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800788a:	68f8      	ldr	r0, [r7, #12]
 800788c:	f000 f960 	bl	8007b50 <I2C_WaitOnFlagUntilTimeout>
 8007890:	4603      	mov	r3, r0
 8007892:	2b00      	cmp	r3, #0
 8007894:	d00d      	beq.n	80078b2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80078a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80078a4:	d103      	bne.n	80078ae <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80078ac:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80078ae:	2303      	movs	r3, #3
 80078b0:	e05f      	b.n	8007972 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80078b2:	897b      	ldrh	r3, [r7, #10]
 80078b4:	b2db      	uxtb	r3, r3
 80078b6:	461a      	mov	r2, r3
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80078c0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80078c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078c4:	6a3a      	ldr	r2, [r7, #32]
 80078c6:	492d      	ldr	r1, [pc, #180]	@ (800797c <I2C_RequestMemoryWrite+0x128>)
 80078c8:	68f8      	ldr	r0, [r7, #12]
 80078ca:	f000 f9bb 	bl	8007c44 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80078ce:	4603      	mov	r3, r0
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d001      	beq.n	80078d8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80078d4:	2301      	movs	r3, #1
 80078d6:	e04c      	b.n	8007972 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80078d8:	2300      	movs	r3, #0
 80078da:	617b      	str	r3, [r7, #20]
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	695b      	ldr	r3, [r3, #20]
 80078e2:	617b      	str	r3, [r7, #20]
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	699b      	ldr	r3, [r3, #24]
 80078ea:	617b      	str	r3, [r7, #20]
 80078ec:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80078ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80078f0:	6a39      	ldr	r1, [r7, #32]
 80078f2:	68f8      	ldr	r0, [r7, #12]
 80078f4:	f000 fa46 	bl	8007d84 <I2C_WaitOnTXEFlagUntilTimeout>
 80078f8:	4603      	mov	r3, r0
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d00d      	beq.n	800791a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007902:	2b04      	cmp	r3, #4
 8007904:	d107      	bne.n	8007916 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	681a      	ldr	r2, [r3, #0]
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007914:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007916:	2301      	movs	r3, #1
 8007918:	e02b      	b.n	8007972 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800791a:	88fb      	ldrh	r3, [r7, #6]
 800791c:	2b01      	cmp	r3, #1
 800791e:	d105      	bne.n	800792c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007920:	893b      	ldrh	r3, [r7, #8]
 8007922:	b2da      	uxtb	r2, r3
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	611a      	str	r2, [r3, #16]
 800792a:	e021      	b.n	8007970 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800792c:	893b      	ldrh	r3, [r7, #8]
 800792e:	0a1b      	lsrs	r3, r3, #8
 8007930:	b29b      	uxth	r3, r3
 8007932:	b2da      	uxtb	r2, r3
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800793a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800793c:	6a39      	ldr	r1, [r7, #32]
 800793e:	68f8      	ldr	r0, [r7, #12]
 8007940:	f000 fa20 	bl	8007d84 <I2C_WaitOnTXEFlagUntilTimeout>
 8007944:	4603      	mov	r3, r0
 8007946:	2b00      	cmp	r3, #0
 8007948:	d00d      	beq.n	8007966 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800794e:	2b04      	cmp	r3, #4
 8007950:	d107      	bne.n	8007962 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	681a      	ldr	r2, [r3, #0]
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007960:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007962:	2301      	movs	r3, #1
 8007964:	e005      	b.n	8007972 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007966:	893b      	ldrh	r3, [r7, #8]
 8007968:	b2da      	uxtb	r2, r3
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007970:	2300      	movs	r3, #0
}
 8007972:	4618      	mov	r0, r3
 8007974:	3718      	adds	r7, #24
 8007976:	46bd      	mov	sp, r7
 8007978:	bd80      	pop	{r7, pc}
 800797a:	bf00      	nop
 800797c:	00010002 	.word	0x00010002

08007980 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b088      	sub	sp, #32
 8007984:	af02      	add	r7, sp, #8
 8007986:	60f8      	str	r0, [r7, #12]
 8007988:	4608      	mov	r0, r1
 800798a:	4611      	mov	r1, r2
 800798c:	461a      	mov	r2, r3
 800798e:	4603      	mov	r3, r0
 8007990:	817b      	strh	r3, [r7, #10]
 8007992:	460b      	mov	r3, r1
 8007994:	813b      	strh	r3, [r7, #8]
 8007996:	4613      	mov	r3, r2
 8007998:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	681a      	ldr	r2, [r3, #0]
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80079a8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	681a      	ldr	r2, [r3, #0]
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80079b8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80079ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079bc:	9300      	str	r3, [sp, #0]
 80079be:	6a3b      	ldr	r3, [r7, #32]
 80079c0:	2200      	movs	r2, #0
 80079c2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80079c6:	68f8      	ldr	r0, [r7, #12]
 80079c8:	f000 f8c2 	bl	8007b50 <I2C_WaitOnFlagUntilTimeout>
 80079cc:	4603      	mov	r3, r0
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d00d      	beq.n	80079ee <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80079dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80079e0:	d103      	bne.n	80079ea <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80079e8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80079ea:	2303      	movs	r3, #3
 80079ec:	e0aa      	b.n	8007b44 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80079ee:	897b      	ldrh	r3, [r7, #10]
 80079f0:	b2db      	uxtb	r3, r3
 80079f2:	461a      	mov	r2, r3
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80079fc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80079fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a00:	6a3a      	ldr	r2, [r7, #32]
 8007a02:	4952      	ldr	r1, [pc, #328]	@ (8007b4c <I2C_RequestMemoryRead+0x1cc>)
 8007a04:	68f8      	ldr	r0, [r7, #12]
 8007a06:	f000 f91d 	bl	8007c44 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007a0a:	4603      	mov	r3, r0
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d001      	beq.n	8007a14 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8007a10:	2301      	movs	r3, #1
 8007a12:	e097      	b.n	8007b44 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007a14:	2300      	movs	r3, #0
 8007a16:	617b      	str	r3, [r7, #20]
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	695b      	ldr	r3, [r3, #20]
 8007a1e:	617b      	str	r3, [r7, #20]
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	699b      	ldr	r3, [r3, #24]
 8007a26:	617b      	str	r3, [r7, #20]
 8007a28:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007a2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007a2c:	6a39      	ldr	r1, [r7, #32]
 8007a2e:	68f8      	ldr	r0, [r7, #12]
 8007a30:	f000 f9a8 	bl	8007d84 <I2C_WaitOnTXEFlagUntilTimeout>
 8007a34:	4603      	mov	r3, r0
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d00d      	beq.n	8007a56 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a3e:	2b04      	cmp	r3, #4
 8007a40:	d107      	bne.n	8007a52 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	681a      	ldr	r2, [r3, #0]
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007a50:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007a52:	2301      	movs	r3, #1
 8007a54:	e076      	b.n	8007b44 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007a56:	88fb      	ldrh	r3, [r7, #6]
 8007a58:	2b01      	cmp	r3, #1
 8007a5a:	d105      	bne.n	8007a68 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007a5c:	893b      	ldrh	r3, [r7, #8]
 8007a5e:	b2da      	uxtb	r2, r3
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	611a      	str	r2, [r3, #16]
 8007a66:	e021      	b.n	8007aac <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007a68:	893b      	ldrh	r3, [r7, #8]
 8007a6a:	0a1b      	lsrs	r3, r3, #8
 8007a6c:	b29b      	uxth	r3, r3
 8007a6e:	b2da      	uxtb	r2, r3
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007a76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007a78:	6a39      	ldr	r1, [r7, #32]
 8007a7a:	68f8      	ldr	r0, [r7, #12]
 8007a7c:	f000 f982 	bl	8007d84 <I2C_WaitOnTXEFlagUntilTimeout>
 8007a80:	4603      	mov	r3, r0
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d00d      	beq.n	8007aa2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a8a:	2b04      	cmp	r3, #4
 8007a8c:	d107      	bne.n	8007a9e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	681a      	ldr	r2, [r3, #0]
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007a9c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007a9e:	2301      	movs	r3, #1
 8007aa0:	e050      	b.n	8007b44 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007aa2:	893b      	ldrh	r3, [r7, #8]
 8007aa4:	b2da      	uxtb	r2, r3
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007aac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007aae:	6a39      	ldr	r1, [r7, #32]
 8007ab0:	68f8      	ldr	r0, [r7, #12]
 8007ab2:	f000 f967 	bl	8007d84 <I2C_WaitOnTXEFlagUntilTimeout>
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d00d      	beq.n	8007ad8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ac0:	2b04      	cmp	r3, #4
 8007ac2:	d107      	bne.n	8007ad4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	681a      	ldr	r2, [r3, #0]
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007ad2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007ad4:	2301      	movs	r3, #1
 8007ad6:	e035      	b.n	8007b44 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	681a      	ldr	r2, [r3, #0]
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007ae6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007ae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007aea:	9300      	str	r3, [sp, #0]
 8007aec:	6a3b      	ldr	r3, [r7, #32]
 8007aee:	2200      	movs	r2, #0
 8007af0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007af4:	68f8      	ldr	r0, [r7, #12]
 8007af6:	f000 f82b 	bl	8007b50 <I2C_WaitOnFlagUntilTimeout>
 8007afa:	4603      	mov	r3, r0
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d00d      	beq.n	8007b1c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b0a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007b0e:	d103      	bne.n	8007b18 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007b16:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8007b18:	2303      	movs	r3, #3
 8007b1a:	e013      	b.n	8007b44 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007b1c:	897b      	ldrh	r3, [r7, #10]
 8007b1e:	b2db      	uxtb	r3, r3
 8007b20:	f043 0301 	orr.w	r3, r3, #1
 8007b24:	b2da      	uxtb	r2, r3
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b2e:	6a3a      	ldr	r2, [r7, #32]
 8007b30:	4906      	ldr	r1, [pc, #24]	@ (8007b4c <I2C_RequestMemoryRead+0x1cc>)
 8007b32:	68f8      	ldr	r0, [r7, #12]
 8007b34:	f000 f886 	bl	8007c44 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007b38:	4603      	mov	r3, r0
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d001      	beq.n	8007b42 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8007b3e:	2301      	movs	r3, #1
 8007b40:	e000      	b.n	8007b44 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8007b42:	2300      	movs	r3, #0
}
 8007b44:	4618      	mov	r0, r3
 8007b46:	3718      	adds	r7, #24
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	bd80      	pop	{r7, pc}
 8007b4c:	00010002 	.word	0x00010002

08007b50 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b084      	sub	sp, #16
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	60f8      	str	r0, [r7, #12]
 8007b58:	60b9      	str	r1, [r7, #8]
 8007b5a:	603b      	str	r3, [r7, #0]
 8007b5c:	4613      	mov	r3, r2
 8007b5e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007b60:	e048      	b.n	8007bf4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b68:	d044      	beq.n	8007bf4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b6a:	f7fd ff39 	bl	80059e0 <HAL_GetTick>
 8007b6e:	4602      	mov	r2, r0
 8007b70:	69bb      	ldr	r3, [r7, #24]
 8007b72:	1ad3      	subs	r3, r2, r3
 8007b74:	683a      	ldr	r2, [r7, #0]
 8007b76:	429a      	cmp	r2, r3
 8007b78:	d302      	bcc.n	8007b80 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007b7a:	683b      	ldr	r3, [r7, #0]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d139      	bne.n	8007bf4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8007b80:	68bb      	ldr	r3, [r7, #8]
 8007b82:	0c1b      	lsrs	r3, r3, #16
 8007b84:	b2db      	uxtb	r3, r3
 8007b86:	2b01      	cmp	r3, #1
 8007b88:	d10d      	bne.n	8007ba6 <I2C_WaitOnFlagUntilTimeout+0x56>
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	695b      	ldr	r3, [r3, #20]
 8007b90:	43da      	mvns	r2, r3
 8007b92:	68bb      	ldr	r3, [r7, #8]
 8007b94:	4013      	ands	r3, r2
 8007b96:	b29b      	uxth	r3, r3
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	bf0c      	ite	eq
 8007b9c:	2301      	moveq	r3, #1
 8007b9e:	2300      	movne	r3, #0
 8007ba0:	b2db      	uxtb	r3, r3
 8007ba2:	461a      	mov	r2, r3
 8007ba4:	e00c      	b.n	8007bc0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	699b      	ldr	r3, [r3, #24]
 8007bac:	43da      	mvns	r2, r3
 8007bae:	68bb      	ldr	r3, [r7, #8]
 8007bb0:	4013      	ands	r3, r2
 8007bb2:	b29b      	uxth	r3, r3
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	bf0c      	ite	eq
 8007bb8:	2301      	moveq	r3, #1
 8007bba:	2300      	movne	r3, #0
 8007bbc:	b2db      	uxtb	r3, r3
 8007bbe:	461a      	mov	r2, r3
 8007bc0:	79fb      	ldrb	r3, [r7, #7]
 8007bc2:	429a      	cmp	r2, r3
 8007bc4:	d116      	bne.n	8007bf4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	2200      	movs	r2, #0
 8007bca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	2220      	movs	r2, #32
 8007bd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007be0:	f043 0220 	orr.w	r2, r3, #32
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	2200      	movs	r2, #0
 8007bec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007bf0:	2301      	movs	r3, #1
 8007bf2:	e023      	b.n	8007c3c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007bf4:	68bb      	ldr	r3, [r7, #8]
 8007bf6:	0c1b      	lsrs	r3, r3, #16
 8007bf8:	b2db      	uxtb	r3, r3
 8007bfa:	2b01      	cmp	r3, #1
 8007bfc:	d10d      	bne.n	8007c1a <I2C_WaitOnFlagUntilTimeout+0xca>
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	695b      	ldr	r3, [r3, #20]
 8007c04:	43da      	mvns	r2, r3
 8007c06:	68bb      	ldr	r3, [r7, #8]
 8007c08:	4013      	ands	r3, r2
 8007c0a:	b29b      	uxth	r3, r3
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	bf0c      	ite	eq
 8007c10:	2301      	moveq	r3, #1
 8007c12:	2300      	movne	r3, #0
 8007c14:	b2db      	uxtb	r3, r3
 8007c16:	461a      	mov	r2, r3
 8007c18:	e00c      	b.n	8007c34 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	699b      	ldr	r3, [r3, #24]
 8007c20:	43da      	mvns	r2, r3
 8007c22:	68bb      	ldr	r3, [r7, #8]
 8007c24:	4013      	ands	r3, r2
 8007c26:	b29b      	uxth	r3, r3
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	bf0c      	ite	eq
 8007c2c:	2301      	moveq	r3, #1
 8007c2e:	2300      	movne	r3, #0
 8007c30:	b2db      	uxtb	r3, r3
 8007c32:	461a      	mov	r2, r3
 8007c34:	79fb      	ldrb	r3, [r7, #7]
 8007c36:	429a      	cmp	r2, r3
 8007c38:	d093      	beq.n	8007b62 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007c3a:	2300      	movs	r3, #0
}
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	3710      	adds	r7, #16
 8007c40:	46bd      	mov	sp, r7
 8007c42:	bd80      	pop	{r7, pc}

08007c44 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b084      	sub	sp, #16
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	60f8      	str	r0, [r7, #12]
 8007c4c:	60b9      	str	r1, [r7, #8]
 8007c4e:	607a      	str	r2, [r7, #4]
 8007c50:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007c52:	e071      	b.n	8007d38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	695b      	ldr	r3, [r3, #20]
 8007c5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007c5e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007c62:	d123      	bne.n	8007cac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	681a      	ldr	r2, [r3, #0]
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007c72:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007c7c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	2200      	movs	r2, #0
 8007c82:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	2220      	movs	r2, #32
 8007c88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	2200      	movs	r2, #0
 8007c90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c98:	f043 0204 	orr.w	r2, r3, #4
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8007ca8:	2301      	movs	r3, #1
 8007caa:	e067      	b.n	8007d7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cb2:	d041      	beq.n	8007d38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007cb4:	f7fd fe94 	bl	80059e0 <HAL_GetTick>
 8007cb8:	4602      	mov	r2, r0
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	1ad3      	subs	r3, r2, r3
 8007cbe:	687a      	ldr	r2, [r7, #4]
 8007cc0:	429a      	cmp	r2, r3
 8007cc2:	d302      	bcc.n	8007cca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d136      	bne.n	8007d38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8007cca:	68bb      	ldr	r3, [r7, #8]
 8007ccc:	0c1b      	lsrs	r3, r3, #16
 8007cce:	b2db      	uxtb	r3, r3
 8007cd0:	2b01      	cmp	r3, #1
 8007cd2:	d10c      	bne.n	8007cee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	695b      	ldr	r3, [r3, #20]
 8007cda:	43da      	mvns	r2, r3
 8007cdc:	68bb      	ldr	r3, [r7, #8]
 8007cde:	4013      	ands	r3, r2
 8007ce0:	b29b      	uxth	r3, r3
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	bf14      	ite	ne
 8007ce6:	2301      	movne	r3, #1
 8007ce8:	2300      	moveq	r3, #0
 8007cea:	b2db      	uxtb	r3, r3
 8007cec:	e00b      	b.n	8007d06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	699b      	ldr	r3, [r3, #24]
 8007cf4:	43da      	mvns	r2, r3
 8007cf6:	68bb      	ldr	r3, [r7, #8]
 8007cf8:	4013      	ands	r3, r2
 8007cfa:	b29b      	uxth	r3, r3
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	bf14      	ite	ne
 8007d00:	2301      	movne	r3, #1
 8007d02:	2300      	moveq	r3, #0
 8007d04:	b2db      	uxtb	r3, r3
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d016      	beq.n	8007d38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	2220      	movs	r2, #32
 8007d14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d24:	f043 0220 	orr.w	r2, r3, #32
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	2200      	movs	r2, #0
 8007d30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007d34:	2301      	movs	r3, #1
 8007d36:	e021      	b.n	8007d7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007d38:	68bb      	ldr	r3, [r7, #8]
 8007d3a:	0c1b      	lsrs	r3, r3, #16
 8007d3c:	b2db      	uxtb	r3, r3
 8007d3e:	2b01      	cmp	r3, #1
 8007d40:	d10c      	bne.n	8007d5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	695b      	ldr	r3, [r3, #20]
 8007d48:	43da      	mvns	r2, r3
 8007d4a:	68bb      	ldr	r3, [r7, #8]
 8007d4c:	4013      	ands	r3, r2
 8007d4e:	b29b      	uxth	r3, r3
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	bf14      	ite	ne
 8007d54:	2301      	movne	r3, #1
 8007d56:	2300      	moveq	r3, #0
 8007d58:	b2db      	uxtb	r3, r3
 8007d5a:	e00b      	b.n	8007d74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	699b      	ldr	r3, [r3, #24]
 8007d62:	43da      	mvns	r2, r3
 8007d64:	68bb      	ldr	r3, [r7, #8]
 8007d66:	4013      	ands	r3, r2
 8007d68:	b29b      	uxth	r3, r3
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	bf14      	ite	ne
 8007d6e:	2301      	movne	r3, #1
 8007d70:	2300      	moveq	r3, #0
 8007d72:	b2db      	uxtb	r3, r3
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	f47f af6d 	bne.w	8007c54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8007d7a:	2300      	movs	r3, #0
}
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	3710      	adds	r7, #16
 8007d80:	46bd      	mov	sp, r7
 8007d82:	bd80      	pop	{r7, pc}

08007d84 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b084      	sub	sp, #16
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	60f8      	str	r0, [r7, #12]
 8007d8c:	60b9      	str	r1, [r7, #8]
 8007d8e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007d90:	e034      	b.n	8007dfc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007d92:	68f8      	ldr	r0, [r7, #12]
 8007d94:	f000 f8e3 	bl	8007f5e <I2C_IsAcknowledgeFailed>
 8007d98:	4603      	mov	r3, r0
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d001      	beq.n	8007da2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007d9e:	2301      	movs	r3, #1
 8007da0:	e034      	b.n	8007e0c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007da2:	68bb      	ldr	r3, [r7, #8]
 8007da4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007da8:	d028      	beq.n	8007dfc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007daa:	f7fd fe19 	bl	80059e0 <HAL_GetTick>
 8007dae:	4602      	mov	r2, r0
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	1ad3      	subs	r3, r2, r3
 8007db4:	68ba      	ldr	r2, [r7, #8]
 8007db6:	429a      	cmp	r2, r3
 8007db8:	d302      	bcc.n	8007dc0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007dba:	68bb      	ldr	r3, [r7, #8]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d11d      	bne.n	8007dfc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	695b      	ldr	r3, [r3, #20]
 8007dc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007dca:	2b80      	cmp	r3, #128	@ 0x80
 8007dcc:	d016      	beq.n	8007dfc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	2220      	movs	r2, #32
 8007dd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	2200      	movs	r2, #0
 8007de0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007de8:	f043 0220 	orr.w	r2, r3, #32
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	2200      	movs	r2, #0
 8007df4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007df8:	2301      	movs	r3, #1
 8007dfa:	e007      	b.n	8007e0c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	695b      	ldr	r3, [r3, #20]
 8007e02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e06:	2b80      	cmp	r3, #128	@ 0x80
 8007e08:	d1c3      	bne.n	8007d92 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007e0a:	2300      	movs	r3, #0
}
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	3710      	adds	r7, #16
 8007e10:	46bd      	mov	sp, r7
 8007e12:	bd80      	pop	{r7, pc}

08007e14 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007e14:	b580      	push	{r7, lr}
 8007e16:	b084      	sub	sp, #16
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	60f8      	str	r0, [r7, #12]
 8007e1c:	60b9      	str	r1, [r7, #8]
 8007e1e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007e20:	e034      	b.n	8007e8c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007e22:	68f8      	ldr	r0, [r7, #12]
 8007e24:	f000 f89b 	bl	8007f5e <I2C_IsAcknowledgeFailed>
 8007e28:	4603      	mov	r3, r0
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d001      	beq.n	8007e32 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007e2e:	2301      	movs	r3, #1
 8007e30:	e034      	b.n	8007e9c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007e32:	68bb      	ldr	r3, [r7, #8]
 8007e34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e38:	d028      	beq.n	8007e8c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e3a:	f7fd fdd1 	bl	80059e0 <HAL_GetTick>
 8007e3e:	4602      	mov	r2, r0
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	1ad3      	subs	r3, r2, r3
 8007e44:	68ba      	ldr	r2, [r7, #8]
 8007e46:	429a      	cmp	r2, r3
 8007e48:	d302      	bcc.n	8007e50 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007e4a:	68bb      	ldr	r3, [r7, #8]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d11d      	bne.n	8007e8c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	695b      	ldr	r3, [r3, #20]
 8007e56:	f003 0304 	and.w	r3, r3, #4
 8007e5a:	2b04      	cmp	r3, #4
 8007e5c:	d016      	beq.n	8007e8c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	2200      	movs	r2, #0
 8007e62:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	2220      	movs	r2, #32
 8007e68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	2200      	movs	r2, #0
 8007e70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e78:	f043 0220 	orr.w	r2, r3, #32
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	2200      	movs	r2, #0
 8007e84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007e88:	2301      	movs	r3, #1
 8007e8a:	e007      	b.n	8007e9c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	695b      	ldr	r3, [r3, #20]
 8007e92:	f003 0304 	and.w	r3, r3, #4
 8007e96:	2b04      	cmp	r3, #4
 8007e98:	d1c3      	bne.n	8007e22 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007e9a:	2300      	movs	r3, #0
}
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	3710      	adds	r7, #16
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	bd80      	pop	{r7, pc}

08007ea4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b084      	sub	sp, #16
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	60f8      	str	r0, [r7, #12]
 8007eac:	60b9      	str	r1, [r7, #8]
 8007eae:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007eb0:	e049      	b.n	8007f46 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	695b      	ldr	r3, [r3, #20]
 8007eb8:	f003 0310 	and.w	r3, r3, #16
 8007ebc:	2b10      	cmp	r3, #16
 8007ebe:	d119      	bne.n	8007ef4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	f06f 0210 	mvn.w	r2, #16
 8007ec8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	2200      	movs	r2, #0
 8007ece:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	2220      	movs	r2, #32
 8007ed4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	2200      	movs	r2, #0
 8007edc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	2200      	movs	r2, #0
 8007eec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8007ef0:	2301      	movs	r3, #1
 8007ef2:	e030      	b.n	8007f56 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ef4:	f7fd fd74 	bl	80059e0 <HAL_GetTick>
 8007ef8:	4602      	mov	r2, r0
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	1ad3      	subs	r3, r2, r3
 8007efe:	68ba      	ldr	r2, [r7, #8]
 8007f00:	429a      	cmp	r2, r3
 8007f02:	d302      	bcc.n	8007f0a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007f04:	68bb      	ldr	r3, [r7, #8]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d11d      	bne.n	8007f46 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	695b      	ldr	r3, [r3, #20]
 8007f10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f14:	2b40      	cmp	r3, #64	@ 0x40
 8007f16:	d016      	beq.n	8007f46 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	2220      	movs	r2, #32
 8007f22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	2200      	movs	r2, #0
 8007f2a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f32:	f043 0220 	orr.w	r2, r3, #32
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8007f42:	2301      	movs	r3, #1
 8007f44:	e007      	b.n	8007f56 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	695b      	ldr	r3, [r3, #20]
 8007f4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f50:	2b40      	cmp	r3, #64	@ 0x40
 8007f52:	d1ae      	bne.n	8007eb2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007f54:	2300      	movs	r3, #0
}
 8007f56:	4618      	mov	r0, r3
 8007f58:	3710      	adds	r7, #16
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	bd80      	pop	{r7, pc}

08007f5e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007f5e:	b480      	push	{r7}
 8007f60:	b083      	sub	sp, #12
 8007f62:	af00      	add	r7, sp, #0
 8007f64:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	695b      	ldr	r3, [r3, #20]
 8007f6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007f70:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007f74:	d11b      	bne.n	8007fae <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007f7e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2200      	movs	r2, #0
 8007f84:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2220      	movs	r2, #32
 8007f8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	2200      	movs	r2, #0
 8007f92:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f9a:	f043 0204 	orr.w	r2, r3, #4
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8007faa:	2301      	movs	r3, #1
 8007fac:	e000      	b.n	8007fb0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007fae:	2300      	movs	r3, #0
}
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	370c      	adds	r7, #12
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fba:	4770      	bx	lr

08007fbc <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8007fbc:	b480      	push	{r7}
 8007fbe:	b083      	sub	sp, #12
 8007fc0:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8007fc2:	4b06      	ldr	r3, [pc, #24]	@ (8007fdc <HAL_PWR_EnableBkUpAccess+0x20>)
 8007fc4:	2201      	movs	r2, #1
 8007fc6:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8007fc8:	4b05      	ldr	r3, [pc, #20]	@ (8007fe0 <HAL_PWR_EnableBkUpAccess+0x24>)
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8007fce:	687b      	ldr	r3, [r7, #4]
}
 8007fd0:	bf00      	nop
 8007fd2:	370c      	adds	r7, #12
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fda:	4770      	bx	lr
 8007fdc:	420e0020 	.word	0x420e0020
 8007fe0:	40007000 	.word	0x40007000

08007fe4 <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8007fe4:	b480      	push	{r7}
 8007fe6:	b083      	sub	sp, #12
 8007fe8:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 8007fea:	4b06      	ldr	r3, [pc, #24]	@ (8008004 <HAL_PWR_DisableBkUpAccess+0x20>)
 8007fec:	2200      	movs	r2, #0
 8007fee:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8007ff0:	4b05      	ldr	r3, [pc, #20]	@ (8008008 <HAL_PWR_DisableBkUpAccess+0x24>)
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8007ff6:	687b      	ldr	r3, [r7, #4]
}
 8007ff8:	bf00      	nop
 8007ffa:	370c      	adds	r7, #12
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008002:	4770      	bx	lr
 8008004:	420e0020 	.word	0x420e0020
 8008008:	40007000 	.word	0x40007000

0800800c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800800c:	b580      	push	{r7, lr}
 800800e:	b086      	sub	sp, #24
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d101      	bne.n	800801e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800801a:	2301      	movs	r3, #1
 800801c:	e267      	b.n	80084ee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	f003 0301 	and.w	r3, r3, #1
 8008026:	2b00      	cmp	r3, #0
 8008028:	d075      	beq.n	8008116 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800802a:	4b88      	ldr	r3, [pc, #544]	@ (800824c <HAL_RCC_OscConfig+0x240>)
 800802c:	689b      	ldr	r3, [r3, #8]
 800802e:	f003 030c 	and.w	r3, r3, #12
 8008032:	2b04      	cmp	r3, #4
 8008034:	d00c      	beq.n	8008050 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008036:	4b85      	ldr	r3, [pc, #532]	@ (800824c <HAL_RCC_OscConfig+0x240>)
 8008038:	689b      	ldr	r3, [r3, #8]
 800803a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800803e:	2b08      	cmp	r3, #8
 8008040:	d112      	bne.n	8008068 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008042:	4b82      	ldr	r3, [pc, #520]	@ (800824c <HAL_RCC_OscConfig+0x240>)
 8008044:	685b      	ldr	r3, [r3, #4]
 8008046:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800804a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800804e:	d10b      	bne.n	8008068 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008050:	4b7e      	ldr	r3, [pc, #504]	@ (800824c <HAL_RCC_OscConfig+0x240>)
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008058:	2b00      	cmp	r3, #0
 800805a:	d05b      	beq.n	8008114 <HAL_RCC_OscConfig+0x108>
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	685b      	ldr	r3, [r3, #4]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d157      	bne.n	8008114 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008064:	2301      	movs	r3, #1
 8008066:	e242      	b.n	80084ee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	685b      	ldr	r3, [r3, #4]
 800806c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008070:	d106      	bne.n	8008080 <HAL_RCC_OscConfig+0x74>
 8008072:	4b76      	ldr	r3, [pc, #472]	@ (800824c <HAL_RCC_OscConfig+0x240>)
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	4a75      	ldr	r2, [pc, #468]	@ (800824c <HAL_RCC_OscConfig+0x240>)
 8008078:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800807c:	6013      	str	r3, [r2, #0]
 800807e:	e01d      	b.n	80080bc <HAL_RCC_OscConfig+0xb0>
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	685b      	ldr	r3, [r3, #4]
 8008084:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008088:	d10c      	bne.n	80080a4 <HAL_RCC_OscConfig+0x98>
 800808a:	4b70      	ldr	r3, [pc, #448]	@ (800824c <HAL_RCC_OscConfig+0x240>)
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	4a6f      	ldr	r2, [pc, #444]	@ (800824c <HAL_RCC_OscConfig+0x240>)
 8008090:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008094:	6013      	str	r3, [r2, #0]
 8008096:	4b6d      	ldr	r3, [pc, #436]	@ (800824c <HAL_RCC_OscConfig+0x240>)
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	4a6c      	ldr	r2, [pc, #432]	@ (800824c <HAL_RCC_OscConfig+0x240>)
 800809c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80080a0:	6013      	str	r3, [r2, #0]
 80080a2:	e00b      	b.n	80080bc <HAL_RCC_OscConfig+0xb0>
 80080a4:	4b69      	ldr	r3, [pc, #420]	@ (800824c <HAL_RCC_OscConfig+0x240>)
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	4a68      	ldr	r2, [pc, #416]	@ (800824c <HAL_RCC_OscConfig+0x240>)
 80080aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80080ae:	6013      	str	r3, [r2, #0]
 80080b0:	4b66      	ldr	r3, [pc, #408]	@ (800824c <HAL_RCC_OscConfig+0x240>)
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	4a65      	ldr	r2, [pc, #404]	@ (800824c <HAL_RCC_OscConfig+0x240>)
 80080b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80080ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	685b      	ldr	r3, [r3, #4]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d013      	beq.n	80080ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80080c4:	f7fd fc8c 	bl	80059e0 <HAL_GetTick>
 80080c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80080ca:	e008      	b.n	80080de <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80080cc:	f7fd fc88 	bl	80059e0 <HAL_GetTick>
 80080d0:	4602      	mov	r2, r0
 80080d2:	693b      	ldr	r3, [r7, #16]
 80080d4:	1ad3      	subs	r3, r2, r3
 80080d6:	2b64      	cmp	r3, #100	@ 0x64
 80080d8:	d901      	bls.n	80080de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80080da:	2303      	movs	r3, #3
 80080dc:	e207      	b.n	80084ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80080de:	4b5b      	ldr	r3, [pc, #364]	@ (800824c <HAL_RCC_OscConfig+0x240>)
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d0f0      	beq.n	80080cc <HAL_RCC_OscConfig+0xc0>
 80080ea:	e014      	b.n	8008116 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80080ec:	f7fd fc78 	bl	80059e0 <HAL_GetTick>
 80080f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80080f2:	e008      	b.n	8008106 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80080f4:	f7fd fc74 	bl	80059e0 <HAL_GetTick>
 80080f8:	4602      	mov	r2, r0
 80080fa:	693b      	ldr	r3, [r7, #16]
 80080fc:	1ad3      	subs	r3, r2, r3
 80080fe:	2b64      	cmp	r3, #100	@ 0x64
 8008100:	d901      	bls.n	8008106 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008102:	2303      	movs	r3, #3
 8008104:	e1f3      	b.n	80084ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008106:	4b51      	ldr	r3, [pc, #324]	@ (800824c <HAL_RCC_OscConfig+0x240>)
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800810e:	2b00      	cmp	r3, #0
 8008110:	d1f0      	bne.n	80080f4 <HAL_RCC_OscConfig+0xe8>
 8008112:	e000      	b.n	8008116 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008114:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	f003 0302 	and.w	r3, r3, #2
 800811e:	2b00      	cmp	r3, #0
 8008120:	d063      	beq.n	80081ea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8008122:	4b4a      	ldr	r3, [pc, #296]	@ (800824c <HAL_RCC_OscConfig+0x240>)
 8008124:	689b      	ldr	r3, [r3, #8]
 8008126:	f003 030c 	and.w	r3, r3, #12
 800812a:	2b00      	cmp	r3, #0
 800812c:	d00b      	beq.n	8008146 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800812e:	4b47      	ldr	r3, [pc, #284]	@ (800824c <HAL_RCC_OscConfig+0x240>)
 8008130:	689b      	ldr	r3, [r3, #8]
 8008132:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8008136:	2b08      	cmp	r3, #8
 8008138:	d11c      	bne.n	8008174 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800813a:	4b44      	ldr	r3, [pc, #272]	@ (800824c <HAL_RCC_OscConfig+0x240>)
 800813c:	685b      	ldr	r3, [r3, #4]
 800813e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008142:	2b00      	cmp	r3, #0
 8008144:	d116      	bne.n	8008174 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008146:	4b41      	ldr	r3, [pc, #260]	@ (800824c <HAL_RCC_OscConfig+0x240>)
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	f003 0302 	and.w	r3, r3, #2
 800814e:	2b00      	cmp	r3, #0
 8008150:	d005      	beq.n	800815e <HAL_RCC_OscConfig+0x152>
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	68db      	ldr	r3, [r3, #12]
 8008156:	2b01      	cmp	r3, #1
 8008158:	d001      	beq.n	800815e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800815a:	2301      	movs	r3, #1
 800815c:	e1c7      	b.n	80084ee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800815e:	4b3b      	ldr	r3, [pc, #236]	@ (800824c <HAL_RCC_OscConfig+0x240>)
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	691b      	ldr	r3, [r3, #16]
 800816a:	00db      	lsls	r3, r3, #3
 800816c:	4937      	ldr	r1, [pc, #220]	@ (800824c <HAL_RCC_OscConfig+0x240>)
 800816e:	4313      	orrs	r3, r2
 8008170:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008172:	e03a      	b.n	80081ea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	68db      	ldr	r3, [r3, #12]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d020      	beq.n	80081be <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800817c:	4b34      	ldr	r3, [pc, #208]	@ (8008250 <HAL_RCC_OscConfig+0x244>)
 800817e:	2201      	movs	r2, #1
 8008180:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008182:	f7fd fc2d 	bl	80059e0 <HAL_GetTick>
 8008186:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008188:	e008      	b.n	800819c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800818a:	f7fd fc29 	bl	80059e0 <HAL_GetTick>
 800818e:	4602      	mov	r2, r0
 8008190:	693b      	ldr	r3, [r7, #16]
 8008192:	1ad3      	subs	r3, r2, r3
 8008194:	2b02      	cmp	r3, #2
 8008196:	d901      	bls.n	800819c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008198:	2303      	movs	r3, #3
 800819a:	e1a8      	b.n	80084ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800819c:	4b2b      	ldr	r3, [pc, #172]	@ (800824c <HAL_RCC_OscConfig+0x240>)
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	f003 0302 	and.w	r3, r3, #2
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d0f0      	beq.n	800818a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80081a8:	4b28      	ldr	r3, [pc, #160]	@ (800824c <HAL_RCC_OscConfig+0x240>)
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	691b      	ldr	r3, [r3, #16]
 80081b4:	00db      	lsls	r3, r3, #3
 80081b6:	4925      	ldr	r1, [pc, #148]	@ (800824c <HAL_RCC_OscConfig+0x240>)
 80081b8:	4313      	orrs	r3, r2
 80081ba:	600b      	str	r3, [r1, #0]
 80081bc:	e015      	b.n	80081ea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80081be:	4b24      	ldr	r3, [pc, #144]	@ (8008250 <HAL_RCC_OscConfig+0x244>)
 80081c0:	2200      	movs	r2, #0
 80081c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081c4:	f7fd fc0c 	bl	80059e0 <HAL_GetTick>
 80081c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80081ca:	e008      	b.n	80081de <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80081cc:	f7fd fc08 	bl	80059e0 <HAL_GetTick>
 80081d0:	4602      	mov	r2, r0
 80081d2:	693b      	ldr	r3, [r7, #16]
 80081d4:	1ad3      	subs	r3, r2, r3
 80081d6:	2b02      	cmp	r3, #2
 80081d8:	d901      	bls.n	80081de <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80081da:	2303      	movs	r3, #3
 80081dc:	e187      	b.n	80084ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80081de:	4b1b      	ldr	r3, [pc, #108]	@ (800824c <HAL_RCC_OscConfig+0x240>)
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	f003 0302 	and.w	r3, r3, #2
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d1f0      	bne.n	80081cc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	f003 0308 	and.w	r3, r3, #8
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d036      	beq.n	8008264 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	695b      	ldr	r3, [r3, #20]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d016      	beq.n	800822c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80081fe:	4b15      	ldr	r3, [pc, #84]	@ (8008254 <HAL_RCC_OscConfig+0x248>)
 8008200:	2201      	movs	r2, #1
 8008202:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008204:	f7fd fbec 	bl	80059e0 <HAL_GetTick>
 8008208:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800820a:	e008      	b.n	800821e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800820c:	f7fd fbe8 	bl	80059e0 <HAL_GetTick>
 8008210:	4602      	mov	r2, r0
 8008212:	693b      	ldr	r3, [r7, #16]
 8008214:	1ad3      	subs	r3, r2, r3
 8008216:	2b02      	cmp	r3, #2
 8008218:	d901      	bls.n	800821e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800821a:	2303      	movs	r3, #3
 800821c:	e167      	b.n	80084ee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800821e:	4b0b      	ldr	r3, [pc, #44]	@ (800824c <HAL_RCC_OscConfig+0x240>)
 8008220:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008222:	f003 0302 	and.w	r3, r3, #2
 8008226:	2b00      	cmp	r3, #0
 8008228:	d0f0      	beq.n	800820c <HAL_RCC_OscConfig+0x200>
 800822a:	e01b      	b.n	8008264 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800822c:	4b09      	ldr	r3, [pc, #36]	@ (8008254 <HAL_RCC_OscConfig+0x248>)
 800822e:	2200      	movs	r2, #0
 8008230:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008232:	f7fd fbd5 	bl	80059e0 <HAL_GetTick>
 8008236:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008238:	e00e      	b.n	8008258 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800823a:	f7fd fbd1 	bl	80059e0 <HAL_GetTick>
 800823e:	4602      	mov	r2, r0
 8008240:	693b      	ldr	r3, [r7, #16]
 8008242:	1ad3      	subs	r3, r2, r3
 8008244:	2b02      	cmp	r3, #2
 8008246:	d907      	bls.n	8008258 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008248:	2303      	movs	r3, #3
 800824a:	e150      	b.n	80084ee <HAL_RCC_OscConfig+0x4e2>
 800824c:	40023800 	.word	0x40023800
 8008250:	42470000 	.word	0x42470000
 8008254:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008258:	4b88      	ldr	r3, [pc, #544]	@ (800847c <HAL_RCC_OscConfig+0x470>)
 800825a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800825c:	f003 0302 	and.w	r3, r3, #2
 8008260:	2b00      	cmp	r3, #0
 8008262:	d1ea      	bne.n	800823a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	f003 0304 	and.w	r3, r3, #4
 800826c:	2b00      	cmp	r3, #0
 800826e:	f000 8097 	beq.w	80083a0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008272:	2300      	movs	r3, #0
 8008274:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008276:	4b81      	ldr	r3, [pc, #516]	@ (800847c <HAL_RCC_OscConfig+0x470>)
 8008278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800827a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800827e:	2b00      	cmp	r3, #0
 8008280:	d10f      	bne.n	80082a2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008282:	2300      	movs	r3, #0
 8008284:	60bb      	str	r3, [r7, #8]
 8008286:	4b7d      	ldr	r3, [pc, #500]	@ (800847c <HAL_RCC_OscConfig+0x470>)
 8008288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800828a:	4a7c      	ldr	r2, [pc, #496]	@ (800847c <HAL_RCC_OscConfig+0x470>)
 800828c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008290:	6413      	str	r3, [r2, #64]	@ 0x40
 8008292:	4b7a      	ldr	r3, [pc, #488]	@ (800847c <HAL_RCC_OscConfig+0x470>)
 8008294:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008296:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800829a:	60bb      	str	r3, [r7, #8]
 800829c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800829e:	2301      	movs	r3, #1
 80082a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80082a2:	4b77      	ldr	r3, [pc, #476]	@ (8008480 <HAL_RCC_OscConfig+0x474>)
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d118      	bne.n	80082e0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80082ae:	4b74      	ldr	r3, [pc, #464]	@ (8008480 <HAL_RCC_OscConfig+0x474>)
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	4a73      	ldr	r2, [pc, #460]	@ (8008480 <HAL_RCC_OscConfig+0x474>)
 80082b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80082b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80082ba:	f7fd fb91 	bl	80059e0 <HAL_GetTick>
 80082be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80082c0:	e008      	b.n	80082d4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80082c2:	f7fd fb8d 	bl	80059e0 <HAL_GetTick>
 80082c6:	4602      	mov	r2, r0
 80082c8:	693b      	ldr	r3, [r7, #16]
 80082ca:	1ad3      	subs	r3, r2, r3
 80082cc:	2b02      	cmp	r3, #2
 80082ce:	d901      	bls.n	80082d4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80082d0:	2303      	movs	r3, #3
 80082d2:	e10c      	b.n	80084ee <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80082d4:	4b6a      	ldr	r3, [pc, #424]	@ (8008480 <HAL_RCC_OscConfig+0x474>)
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d0f0      	beq.n	80082c2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	689b      	ldr	r3, [r3, #8]
 80082e4:	2b01      	cmp	r3, #1
 80082e6:	d106      	bne.n	80082f6 <HAL_RCC_OscConfig+0x2ea>
 80082e8:	4b64      	ldr	r3, [pc, #400]	@ (800847c <HAL_RCC_OscConfig+0x470>)
 80082ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80082ec:	4a63      	ldr	r2, [pc, #396]	@ (800847c <HAL_RCC_OscConfig+0x470>)
 80082ee:	f043 0301 	orr.w	r3, r3, #1
 80082f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80082f4:	e01c      	b.n	8008330 <HAL_RCC_OscConfig+0x324>
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	689b      	ldr	r3, [r3, #8]
 80082fa:	2b05      	cmp	r3, #5
 80082fc:	d10c      	bne.n	8008318 <HAL_RCC_OscConfig+0x30c>
 80082fe:	4b5f      	ldr	r3, [pc, #380]	@ (800847c <HAL_RCC_OscConfig+0x470>)
 8008300:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008302:	4a5e      	ldr	r2, [pc, #376]	@ (800847c <HAL_RCC_OscConfig+0x470>)
 8008304:	f043 0304 	orr.w	r3, r3, #4
 8008308:	6713      	str	r3, [r2, #112]	@ 0x70
 800830a:	4b5c      	ldr	r3, [pc, #368]	@ (800847c <HAL_RCC_OscConfig+0x470>)
 800830c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800830e:	4a5b      	ldr	r2, [pc, #364]	@ (800847c <HAL_RCC_OscConfig+0x470>)
 8008310:	f043 0301 	orr.w	r3, r3, #1
 8008314:	6713      	str	r3, [r2, #112]	@ 0x70
 8008316:	e00b      	b.n	8008330 <HAL_RCC_OscConfig+0x324>
 8008318:	4b58      	ldr	r3, [pc, #352]	@ (800847c <HAL_RCC_OscConfig+0x470>)
 800831a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800831c:	4a57      	ldr	r2, [pc, #348]	@ (800847c <HAL_RCC_OscConfig+0x470>)
 800831e:	f023 0301 	bic.w	r3, r3, #1
 8008322:	6713      	str	r3, [r2, #112]	@ 0x70
 8008324:	4b55      	ldr	r3, [pc, #340]	@ (800847c <HAL_RCC_OscConfig+0x470>)
 8008326:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008328:	4a54      	ldr	r2, [pc, #336]	@ (800847c <HAL_RCC_OscConfig+0x470>)
 800832a:	f023 0304 	bic.w	r3, r3, #4
 800832e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	689b      	ldr	r3, [r3, #8]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d015      	beq.n	8008364 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008338:	f7fd fb52 	bl	80059e0 <HAL_GetTick>
 800833c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800833e:	e00a      	b.n	8008356 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008340:	f7fd fb4e 	bl	80059e0 <HAL_GetTick>
 8008344:	4602      	mov	r2, r0
 8008346:	693b      	ldr	r3, [r7, #16]
 8008348:	1ad3      	subs	r3, r2, r3
 800834a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800834e:	4293      	cmp	r3, r2
 8008350:	d901      	bls.n	8008356 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8008352:	2303      	movs	r3, #3
 8008354:	e0cb      	b.n	80084ee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008356:	4b49      	ldr	r3, [pc, #292]	@ (800847c <HAL_RCC_OscConfig+0x470>)
 8008358:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800835a:	f003 0302 	and.w	r3, r3, #2
 800835e:	2b00      	cmp	r3, #0
 8008360:	d0ee      	beq.n	8008340 <HAL_RCC_OscConfig+0x334>
 8008362:	e014      	b.n	800838e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008364:	f7fd fb3c 	bl	80059e0 <HAL_GetTick>
 8008368:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800836a:	e00a      	b.n	8008382 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800836c:	f7fd fb38 	bl	80059e0 <HAL_GetTick>
 8008370:	4602      	mov	r2, r0
 8008372:	693b      	ldr	r3, [r7, #16]
 8008374:	1ad3      	subs	r3, r2, r3
 8008376:	f241 3288 	movw	r2, #5000	@ 0x1388
 800837a:	4293      	cmp	r3, r2
 800837c:	d901      	bls.n	8008382 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800837e:	2303      	movs	r3, #3
 8008380:	e0b5      	b.n	80084ee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008382:	4b3e      	ldr	r3, [pc, #248]	@ (800847c <HAL_RCC_OscConfig+0x470>)
 8008384:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008386:	f003 0302 	and.w	r3, r3, #2
 800838a:	2b00      	cmp	r3, #0
 800838c:	d1ee      	bne.n	800836c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800838e:	7dfb      	ldrb	r3, [r7, #23]
 8008390:	2b01      	cmp	r3, #1
 8008392:	d105      	bne.n	80083a0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008394:	4b39      	ldr	r3, [pc, #228]	@ (800847c <HAL_RCC_OscConfig+0x470>)
 8008396:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008398:	4a38      	ldr	r2, [pc, #224]	@ (800847c <HAL_RCC_OscConfig+0x470>)
 800839a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800839e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	699b      	ldr	r3, [r3, #24]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	f000 80a1 	beq.w	80084ec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80083aa:	4b34      	ldr	r3, [pc, #208]	@ (800847c <HAL_RCC_OscConfig+0x470>)
 80083ac:	689b      	ldr	r3, [r3, #8]
 80083ae:	f003 030c 	and.w	r3, r3, #12
 80083b2:	2b08      	cmp	r3, #8
 80083b4:	d05c      	beq.n	8008470 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	699b      	ldr	r3, [r3, #24]
 80083ba:	2b02      	cmp	r3, #2
 80083bc:	d141      	bne.n	8008442 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80083be:	4b31      	ldr	r3, [pc, #196]	@ (8008484 <HAL_RCC_OscConfig+0x478>)
 80083c0:	2200      	movs	r2, #0
 80083c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80083c4:	f7fd fb0c 	bl	80059e0 <HAL_GetTick>
 80083c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80083ca:	e008      	b.n	80083de <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80083cc:	f7fd fb08 	bl	80059e0 <HAL_GetTick>
 80083d0:	4602      	mov	r2, r0
 80083d2:	693b      	ldr	r3, [r7, #16]
 80083d4:	1ad3      	subs	r3, r2, r3
 80083d6:	2b02      	cmp	r3, #2
 80083d8:	d901      	bls.n	80083de <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80083da:	2303      	movs	r3, #3
 80083dc:	e087      	b.n	80084ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80083de:	4b27      	ldr	r3, [pc, #156]	@ (800847c <HAL_RCC_OscConfig+0x470>)
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d1f0      	bne.n	80083cc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	69da      	ldr	r2, [r3, #28]
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	6a1b      	ldr	r3, [r3, #32]
 80083f2:	431a      	orrs	r2, r3
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083f8:	019b      	lsls	r3, r3, #6
 80083fa:	431a      	orrs	r2, r3
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008400:	085b      	lsrs	r3, r3, #1
 8008402:	3b01      	subs	r3, #1
 8008404:	041b      	lsls	r3, r3, #16
 8008406:	431a      	orrs	r2, r3
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800840c:	061b      	lsls	r3, r3, #24
 800840e:	491b      	ldr	r1, [pc, #108]	@ (800847c <HAL_RCC_OscConfig+0x470>)
 8008410:	4313      	orrs	r3, r2
 8008412:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008414:	4b1b      	ldr	r3, [pc, #108]	@ (8008484 <HAL_RCC_OscConfig+0x478>)
 8008416:	2201      	movs	r2, #1
 8008418:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800841a:	f7fd fae1 	bl	80059e0 <HAL_GetTick>
 800841e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008420:	e008      	b.n	8008434 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008422:	f7fd fadd 	bl	80059e0 <HAL_GetTick>
 8008426:	4602      	mov	r2, r0
 8008428:	693b      	ldr	r3, [r7, #16]
 800842a:	1ad3      	subs	r3, r2, r3
 800842c:	2b02      	cmp	r3, #2
 800842e:	d901      	bls.n	8008434 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008430:	2303      	movs	r3, #3
 8008432:	e05c      	b.n	80084ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008434:	4b11      	ldr	r3, [pc, #68]	@ (800847c <HAL_RCC_OscConfig+0x470>)
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800843c:	2b00      	cmp	r3, #0
 800843e:	d0f0      	beq.n	8008422 <HAL_RCC_OscConfig+0x416>
 8008440:	e054      	b.n	80084ec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008442:	4b10      	ldr	r3, [pc, #64]	@ (8008484 <HAL_RCC_OscConfig+0x478>)
 8008444:	2200      	movs	r2, #0
 8008446:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008448:	f7fd faca 	bl	80059e0 <HAL_GetTick>
 800844c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800844e:	e008      	b.n	8008462 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008450:	f7fd fac6 	bl	80059e0 <HAL_GetTick>
 8008454:	4602      	mov	r2, r0
 8008456:	693b      	ldr	r3, [r7, #16]
 8008458:	1ad3      	subs	r3, r2, r3
 800845a:	2b02      	cmp	r3, #2
 800845c:	d901      	bls.n	8008462 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800845e:	2303      	movs	r3, #3
 8008460:	e045      	b.n	80084ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008462:	4b06      	ldr	r3, [pc, #24]	@ (800847c <HAL_RCC_OscConfig+0x470>)
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800846a:	2b00      	cmp	r3, #0
 800846c:	d1f0      	bne.n	8008450 <HAL_RCC_OscConfig+0x444>
 800846e:	e03d      	b.n	80084ec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	699b      	ldr	r3, [r3, #24]
 8008474:	2b01      	cmp	r3, #1
 8008476:	d107      	bne.n	8008488 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008478:	2301      	movs	r3, #1
 800847a:	e038      	b.n	80084ee <HAL_RCC_OscConfig+0x4e2>
 800847c:	40023800 	.word	0x40023800
 8008480:	40007000 	.word	0x40007000
 8008484:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008488:	4b1b      	ldr	r3, [pc, #108]	@ (80084f8 <HAL_RCC_OscConfig+0x4ec>)
 800848a:	685b      	ldr	r3, [r3, #4]
 800848c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	699b      	ldr	r3, [r3, #24]
 8008492:	2b01      	cmp	r3, #1
 8008494:	d028      	beq.n	80084e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80084a0:	429a      	cmp	r2, r3
 80084a2:	d121      	bne.n	80084e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80084ae:	429a      	cmp	r2, r3
 80084b0:	d11a      	bne.n	80084e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80084b2:	68fa      	ldr	r2, [r7, #12]
 80084b4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80084b8:	4013      	ands	r3, r2
 80084ba:	687a      	ldr	r2, [r7, #4]
 80084bc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80084be:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80084c0:	4293      	cmp	r3, r2
 80084c2:	d111      	bne.n	80084e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084ce:	085b      	lsrs	r3, r3, #1
 80084d0:	3b01      	subs	r3, #1
 80084d2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80084d4:	429a      	cmp	r2, r3
 80084d6:	d107      	bne.n	80084e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084e2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80084e4:	429a      	cmp	r2, r3
 80084e6:	d001      	beq.n	80084ec <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80084e8:	2301      	movs	r3, #1
 80084ea:	e000      	b.n	80084ee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80084ec:	2300      	movs	r3, #0
}
 80084ee:	4618      	mov	r0, r3
 80084f0:	3718      	adds	r7, #24
 80084f2:	46bd      	mov	sp, r7
 80084f4:	bd80      	pop	{r7, pc}
 80084f6:	bf00      	nop
 80084f8:	40023800 	.word	0x40023800

080084fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80084fc:	b580      	push	{r7, lr}
 80084fe:	b084      	sub	sp, #16
 8008500:	af00      	add	r7, sp, #0
 8008502:	6078      	str	r0, [r7, #4]
 8008504:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d101      	bne.n	8008510 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800850c:	2301      	movs	r3, #1
 800850e:	e0cc      	b.n	80086aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008510:	4b68      	ldr	r3, [pc, #416]	@ (80086b4 <HAL_RCC_ClockConfig+0x1b8>)
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	f003 0307 	and.w	r3, r3, #7
 8008518:	683a      	ldr	r2, [r7, #0]
 800851a:	429a      	cmp	r2, r3
 800851c:	d90c      	bls.n	8008538 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800851e:	4b65      	ldr	r3, [pc, #404]	@ (80086b4 <HAL_RCC_ClockConfig+0x1b8>)
 8008520:	683a      	ldr	r2, [r7, #0]
 8008522:	b2d2      	uxtb	r2, r2
 8008524:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008526:	4b63      	ldr	r3, [pc, #396]	@ (80086b4 <HAL_RCC_ClockConfig+0x1b8>)
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	f003 0307 	and.w	r3, r3, #7
 800852e:	683a      	ldr	r2, [r7, #0]
 8008530:	429a      	cmp	r2, r3
 8008532:	d001      	beq.n	8008538 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008534:	2301      	movs	r3, #1
 8008536:	e0b8      	b.n	80086aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	f003 0302 	and.w	r3, r3, #2
 8008540:	2b00      	cmp	r3, #0
 8008542:	d020      	beq.n	8008586 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	f003 0304 	and.w	r3, r3, #4
 800854c:	2b00      	cmp	r3, #0
 800854e:	d005      	beq.n	800855c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008550:	4b59      	ldr	r3, [pc, #356]	@ (80086b8 <HAL_RCC_ClockConfig+0x1bc>)
 8008552:	689b      	ldr	r3, [r3, #8]
 8008554:	4a58      	ldr	r2, [pc, #352]	@ (80086b8 <HAL_RCC_ClockConfig+0x1bc>)
 8008556:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800855a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	f003 0308 	and.w	r3, r3, #8
 8008564:	2b00      	cmp	r3, #0
 8008566:	d005      	beq.n	8008574 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008568:	4b53      	ldr	r3, [pc, #332]	@ (80086b8 <HAL_RCC_ClockConfig+0x1bc>)
 800856a:	689b      	ldr	r3, [r3, #8]
 800856c:	4a52      	ldr	r2, [pc, #328]	@ (80086b8 <HAL_RCC_ClockConfig+0x1bc>)
 800856e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8008572:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008574:	4b50      	ldr	r3, [pc, #320]	@ (80086b8 <HAL_RCC_ClockConfig+0x1bc>)
 8008576:	689b      	ldr	r3, [r3, #8]
 8008578:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	689b      	ldr	r3, [r3, #8]
 8008580:	494d      	ldr	r1, [pc, #308]	@ (80086b8 <HAL_RCC_ClockConfig+0x1bc>)
 8008582:	4313      	orrs	r3, r2
 8008584:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	f003 0301 	and.w	r3, r3, #1
 800858e:	2b00      	cmp	r3, #0
 8008590:	d044      	beq.n	800861c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	685b      	ldr	r3, [r3, #4]
 8008596:	2b01      	cmp	r3, #1
 8008598:	d107      	bne.n	80085aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800859a:	4b47      	ldr	r3, [pc, #284]	@ (80086b8 <HAL_RCC_ClockConfig+0x1bc>)
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d119      	bne.n	80085da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80085a6:	2301      	movs	r3, #1
 80085a8:	e07f      	b.n	80086aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	685b      	ldr	r3, [r3, #4]
 80085ae:	2b02      	cmp	r3, #2
 80085b0:	d003      	beq.n	80085ba <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80085b6:	2b03      	cmp	r3, #3
 80085b8:	d107      	bne.n	80085ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80085ba:	4b3f      	ldr	r3, [pc, #252]	@ (80086b8 <HAL_RCC_ClockConfig+0x1bc>)
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d109      	bne.n	80085da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80085c6:	2301      	movs	r3, #1
 80085c8:	e06f      	b.n	80086aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80085ca:	4b3b      	ldr	r3, [pc, #236]	@ (80086b8 <HAL_RCC_ClockConfig+0x1bc>)
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	f003 0302 	and.w	r3, r3, #2
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d101      	bne.n	80085da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80085d6:	2301      	movs	r3, #1
 80085d8:	e067      	b.n	80086aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80085da:	4b37      	ldr	r3, [pc, #220]	@ (80086b8 <HAL_RCC_ClockConfig+0x1bc>)
 80085dc:	689b      	ldr	r3, [r3, #8]
 80085de:	f023 0203 	bic.w	r2, r3, #3
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	685b      	ldr	r3, [r3, #4]
 80085e6:	4934      	ldr	r1, [pc, #208]	@ (80086b8 <HAL_RCC_ClockConfig+0x1bc>)
 80085e8:	4313      	orrs	r3, r2
 80085ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80085ec:	f7fd f9f8 	bl	80059e0 <HAL_GetTick>
 80085f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80085f2:	e00a      	b.n	800860a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80085f4:	f7fd f9f4 	bl	80059e0 <HAL_GetTick>
 80085f8:	4602      	mov	r2, r0
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	1ad3      	subs	r3, r2, r3
 80085fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008602:	4293      	cmp	r3, r2
 8008604:	d901      	bls.n	800860a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008606:	2303      	movs	r3, #3
 8008608:	e04f      	b.n	80086aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800860a:	4b2b      	ldr	r3, [pc, #172]	@ (80086b8 <HAL_RCC_ClockConfig+0x1bc>)
 800860c:	689b      	ldr	r3, [r3, #8]
 800860e:	f003 020c 	and.w	r2, r3, #12
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	685b      	ldr	r3, [r3, #4]
 8008616:	009b      	lsls	r3, r3, #2
 8008618:	429a      	cmp	r2, r3
 800861a:	d1eb      	bne.n	80085f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800861c:	4b25      	ldr	r3, [pc, #148]	@ (80086b4 <HAL_RCC_ClockConfig+0x1b8>)
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	f003 0307 	and.w	r3, r3, #7
 8008624:	683a      	ldr	r2, [r7, #0]
 8008626:	429a      	cmp	r2, r3
 8008628:	d20c      	bcs.n	8008644 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800862a:	4b22      	ldr	r3, [pc, #136]	@ (80086b4 <HAL_RCC_ClockConfig+0x1b8>)
 800862c:	683a      	ldr	r2, [r7, #0]
 800862e:	b2d2      	uxtb	r2, r2
 8008630:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008632:	4b20      	ldr	r3, [pc, #128]	@ (80086b4 <HAL_RCC_ClockConfig+0x1b8>)
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	f003 0307 	and.w	r3, r3, #7
 800863a:	683a      	ldr	r2, [r7, #0]
 800863c:	429a      	cmp	r2, r3
 800863e:	d001      	beq.n	8008644 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008640:	2301      	movs	r3, #1
 8008642:	e032      	b.n	80086aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	f003 0304 	and.w	r3, r3, #4
 800864c:	2b00      	cmp	r3, #0
 800864e:	d008      	beq.n	8008662 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008650:	4b19      	ldr	r3, [pc, #100]	@ (80086b8 <HAL_RCC_ClockConfig+0x1bc>)
 8008652:	689b      	ldr	r3, [r3, #8]
 8008654:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	68db      	ldr	r3, [r3, #12]
 800865c:	4916      	ldr	r1, [pc, #88]	@ (80086b8 <HAL_RCC_ClockConfig+0x1bc>)
 800865e:	4313      	orrs	r3, r2
 8008660:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	f003 0308 	and.w	r3, r3, #8
 800866a:	2b00      	cmp	r3, #0
 800866c:	d009      	beq.n	8008682 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800866e:	4b12      	ldr	r3, [pc, #72]	@ (80086b8 <HAL_RCC_ClockConfig+0x1bc>)
 8008670:	689b      	ldr	r3, [r3, #8]
 8008672:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	691b      	ldr	r3, [r3, #16]
 800867a:	00db      	lsls	r3, r3, #3
 800867c:	490e      	ldr	r1, [pc, #56]	@ (80086b8 <HAL_RCC_ClockConfig+0x1bc>)
 800867e:	4313      	orrs	r3, r2
 8008680:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008682:	f000 f821 	bl	80086c8 <HAL_RCC_GetSysClockFreq>
 8008686:	4602      	mov	r2, r0
 8008688:	4b0b      	ldr	r3, [pc, #44]	@ (80086b8 <HAL_RCC_ClockConfig+0x1bc>)
 800868a:	689b      	ldr	r3, [r3, #8]
 800868c:	091b      	lsrs	r3, r3, #4
 800868e:	f003 030f 	and.w	r3, r3, #15
 8008692:	490a      	ldr	r1, [pc, #40]	@ (80086bc <HAL_RCC_ClockConfig+0x1c0>)
 8008694:	5ccb      	ldrb	r3, [r1, r3]
 8008696:	fa22 f303 	lsr.w	r3, r2, r3
 800869a:	4a09      	ldr	r2, [pc, #36]	@ (80086c0 <HAL_RCC_ClockConfig+0x1c4>)
 800869c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800869e:	4b09      	ldr	r3, [pc, #36]	@ (80086c4 <HAL_RCC_ClockConfig+0x1c8>)
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	4618      	mov	r0, r3
 80086a4:	f7fc ffa4 	bl	80055f0 <HAL_InitTick>

  return HAL_OK;
 80086a8:	2300      	movs	r3, #0
}
 80086aa:	4618      	mov	r0, r3
 80086ac:	3710      	adds	r7, #16
 80086ae:	46bd      	mov	sp, r7
 80086b0:	bd80      	pop	{r7, pc}
 80086b2:	bf00      	nop
 80086b4:	40023c00 	.word	0x40023c00
 80086b8:	40023800 	.word	0x40023800
 80086bc:	08012c90 	.word	0x08012c90
 80086c0:	20000010 	.word	0x20000010
 80086c4:	20000014 	.word	0x20000014

080086c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80086c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80086cc:	b090      	sub	sp, #64	@ 0x40
 80086ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80086d0:	2300      	movs	r3, #0
 80086d2:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80086d4:	2300      	movs	r3, #0
 80086d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80086d8:	2300      	movs	r3, #0
 80086da:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80086dc:	2300      	movs	r3, #0
 80086de:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80086e0:	4b59      	ldr	r3, [pc, #356]	@ (8008848 <HAL_RCC_GetSysClockFreq+0x180>)
 80086e2:	689b      	ldr	r3, [r3, #8]
 80086e4:	f003 030c 	and.w	r3, r3, #12
 80086e8:	2b08      	cmp	r3, #8
 80086ea:	d00d      	beq.n	8008708 <HAL_RCC_GetSysClockFreq+0x40>
 80086ec:	2b08      	cmp	r3, #8
 80086ee:	f200 80a1 	bhi.w	8008834 <HAL_RCC_GetSysClockFreq+0x16c>
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d002      	beq.n	80086fc <HAL_RCC_GetSysClockFreq+0x34>
 80086f6:	2b04      	cmp	r3, #4
 80086f8:	d003      	beq.n	8008702 <HAL_RCC_GetSysClockFreq+0x3a>
 80086fa:	e09b      	b.n	8008834 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80086fc:	4b53      	ldr	r3, [pc, #332]	@ (800884c <HAL_RCC_GetSysClockFreq+0x184>)
 80086fe:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008700:	e09b      	b.n	800883a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008702:	4b53      	ldr	r3, [pc, #332]	@ (8008850 <HAL_RCC_GetSysClockFreq+0x188>)
 8008704:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008706:	e098      	b.n	800883a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008708:	4b4f      	ldr	r3, [pc, #316]	@ (8008848 <HAL_RCC_GetSysClockFreq+0x180>)
 800870a:	685b      	ldr	r3, [r3, #4]
 800870c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008710:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008712:	4b4d      	ldr	r3, [pc, #308]	@ (8008848 <HAL_RCC_GetSysClockFreq+0x180>)
 8008714:	685b      	ldr	r3, [r3, #4]
 8008716:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800871a:	2b00      	cmp	r3, #0
 800871c:	d028      	beq.n	8008770 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800871e:	4b4a      	ldr	r3, [pc, #296]	@ (8008848 <HAL_RCC_GetSysClockFreq+0x180>)
 8008720:	685b      	ldr	r3, [r3, #4]
 8008722:	099b      	lsrs	r3, r3, #6
 8008724:	2200      	movs	r2, #0
 8008726:	623b      	str	r3, [r7, #32]
 8008728:	627a      	str	r2, [r7, #36]	@ 0x24
 800872a:	6a3b      	ldr	r3, [r7, #32]
 800872c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8008730:	2100      	movs	r1, #0
 8008732:	4b47      	ldr	r3, [pc, #284]	@ (8008850 <HAL_RCC_GetSysClockFreq+0x188>)
 8008734:	fb03 f201 	mul.w	r2, r3, r1
 8008738:	2300      	movs	r3, #0
 800873a:	fb00 f303 	mul.w	r3, r0, r3
 800873e:	4413      	add	r3, r2
 8008740:	4a43      	ldr	r2, [pc, #268]	@ (8008850 <HAL_RCC_GetSysClockFreq+0x188>)
 8008742:	fba0 1202 	umull	r1, r2, r0, r2
 8008746:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008748:	460a      	mov	r2, r1
 800874a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800874c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800874e:	4413      	add	r3, r2
 8008750:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008752:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008754:	2200      	movs	r2, #0
 8008756:	61bb      	str	r3, [r7, #24]
 8008758:	61fa      	str	r2, [r7, #28]
 800875a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800875e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8008762:	f7f8 fa71 	bl	8000c48 <__aeabi_uldivmod>
 8008766:	4602      	mov	r2, r0
 8008768:	460b      	mov	r3, r1
 800876a:	4613      	mov	r3, r2
 800876c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800876e:	e053      	b.n	8008818 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008770:	4b35      	ldr	r3, [pc, #212]	@ (8008848 <HAL_RCC_GetSysClockFreq+0x180>)
 8008772:	685b      	ldr	r3, [r3, #4]
 8008774:	099b      	lsrs	r3, r3, #6
 8008776:	2200      	movs	r2, #0
 8008778:	613b      	str	r3, [r7, #16]
 800877a:	617a      	str	r2, [r7, #20]
 800877c:	693b      	ldr	r3, [r7, #16]
 800877e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8008782:	f04f 0b00 	mov.w	fp, #0
 8008786:	4652      	mov	r2, sl
 8008788:	465b      	mov	r3, fp
 800878a:	f04f 0000 	mov.w	r0, #0
 800878e:	f04f 0100 	mov.w	r1, #0
 8008792:	0159      	lsls	r1, r3, #5
 8008794:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008798:	0150      	lsls	r0, r2, #5
 800879a:	4602      	mov	r2, r0
 800879c:	460b      	mov	r3, r1
 800879e:	ebb2 080a 	subs.w	r8, r2, sl
 80087a2:	eb63 090b 	sbc.w	r9, r3, fp
 80087a6:	f04f 0200 	mov.w	r2, #0
 80087aa:	f04f 0300 	mov.w	r3, #0
 80087ae:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80087b2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80087b6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80087ba:	ebb2 0408 	subs.w	r4, r2, r8
 80087be:	eb63 0509 	sbc.w	r5, r3, r9
 80087c2:	f04f 0200 	mov.w	r2, #0
 80087c6:	f04f 0300 	mov.w	r3, #0
 80087ca:	00eb      	lsls	r3, r5, #3
 80087cc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80087d0:	00e2      	lsls	r2, r4, #3
 80087d2:	4614      	mov	r4, r2
 80087d4:	461d      	mov	r5, r3
 80087d6:	eb14 030a 	adds.w	r3, r4, sl
 80087da:	603b      	str	r3, [r7, #0]
 80087dc:	eb45 030b 	adc.w	r3, r5, fp
 80087e0:	607b      	str	r3, [r7, #4]
 80087e2:	f04f 0200 	mov.w	r2, #0
 80087e6:	f04f 0300 	mov.w	r3, #0
 80087ea:	e9d7 4500 	ldrd	r4, r5, [r7]
 80087ee:	4629      	mov	r1, r5
 80087f0:	028b      	lsls	r3, r1, #10
 80087f2:	4621      	mov	r1, r4
 80087f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80087f8:	4621      	mov	r1, r4
 80087fa:	028a      	lsls	r2, r1, #10
 80087fc:	4610      	mov	r0, r2
 80087fe:	4619      	mov	r1, r3
 8008800:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008802:	2200      	movs	r2, #0
 8008804:	60bb      	str	r3, [r7, #8]
 8008806:	60fa      	str	r2, [r7, #12]
 8008808:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800880c:	f7f8 fa1c 	bl	8000c48 <__aeabi_uldivmod>
 8008810:	4602      	mov	r2, r0
 8008812:	460b      	mov	r3, r1
 8008814:	4613      	mov	r3, r2
 8008816:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8008818:	4b0b      	ldr	r3, [pc, #44]	@ (8008848 <HAL_RCC_GetSysClockFreq+0x180>)
 800881a:	685b      	ldr	r3, [r3, #4]
 800881c:	0c1b      	lsrs	r3, r3, #16
 800881e:	f003 0303 	and.w	r3, r3, #3
 8008822:	3301      	adds	r3, #1
 8008824:	005b      	lsls	r3, r3, #1
 8008826:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8008828:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800882a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800882c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008830:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008832:	e002      	b.n	800883a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008834:	4b05      	ldr	r3, [pc, #20]	@ (800884c <HAL_RCC_GetSysClockFreq+0x184>)
 8008836:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008838:	bf00      	nop
    }
  }
  return sysclockfreq;
 800883a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800883c:	4618      	mov	r0, r3
 800883e:	3740      	adds	r7, #64	@ 0x40
 8008840:	46bd      	mov	sp, r7
 8008842:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008846:	bf00      	nop
 8008848:	40023800 	.word	0x40023800
 800884c:	00f42400 	.word	0x00f42400
 8008850:	017d7840 	.word	0x017d7840

08008854 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008854:	b480      	push	{r7}
 8008856:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008858:	4b03      	ldr	r3, [pc, #12]	@ (8008868 <HAL_RCC_GetHCLKFreq+0x14>)
 800885a:	681b      	ldr	r3, [r3, #0]
}
 800885c:	4618      	mov	r0, r3
 800885e:	46bd      	mov	sp, r7
 8008860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008864:	4770      	bx	lr
 8008866:	bf00      	nop
 8008868:	20000010 	.word	0x20000010

0800886c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800886c:	b580      	push	{r7, lr}
 800886e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008870:	f7ff fff0 	bl	8008854 <HAL_RCC_GetHCLKFreq>
 8008874:	4602      	mov	r2, r0
 8008876:	4b05      	ldr	r3, [pc, #20]	@ (800888c <HAL_RCC_GetPCLK1Freq+0x20>)
 8008878:	689b      	ldr	r3, [r3, #8]
 800887a:	0a9b      	lsrs	r3, r3, #10
 800887c:	f003 0307 	and.w	r3, r3, #7
 8008880:	4903      	ldr	r1, [pc, #12]	@ (8008890 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008882:	5ccb      	ldrb	r3, [r1, r3]
 8008884:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008888:	4618      	mov	r0, r3
 800888a:	bd80      	pop	{r7, pc}
 800888c:	40023800 	.word	0x40023800
 8008890:	08012ca0 	.word	0x08012ca0

08008894 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008894:	b580      	push	{r7, lr}
 8008896:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008898:	f7ff ffdc 	bl	8008854 <HAL_RCC_GetHCLKFreq>
 800889c:	4602      	mov	r2, r0
 800889e:	4b05      	ldr	r3, [pc, #20]	@ (80088b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80088a0:	689b      	ldr	r3, [r3, #8]
 80088a2:	0b5b      	lsrs	r3, r3, #13
 80088a4:	f003 0307 	and.w	r3, r3, #7
 80088a8:	4903      	ldr	r1, [pc, #12]	@ (80088b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80088aa:	5ccb      	ldrb	r3, [r1, r3]
 80088ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80088b0:	4618      	mov	r0, r3
 80088b2:	bd80      	pop	{r7, pc}
 80088b4:	40023800 	.word	0x40023800
 80088b8:	08012ca0 	.word	0x08012ca0

080088bc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80088bc:	b480      	push	{r7}
 80088be:	b083      	sub	sp, #12
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
 80088c4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	220f      	movs	r2, #15
 80088ca:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80088cc:	4b12      	ldr	r3, [pc, #72]	@ (8008918 <HAL_RCC_GetClockConfig+0x5c>)
 80088ce:	689b      	ldr	r3, [r3, #8]
 80088d0:	f003 0203 	and.w	r2, r3, #3
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80088d8:	4b0f      	ldr	r3, [pc, #60]	@ (8008918 <HAL_RCC_GetClockConfig+0x5c>)
 80088da:	689b      	ldr	r3, [r3, #8]
 80088dc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80088e4:	4b0c      	ldr	r3, [pc, #48]	@ (8008918 <HAL_RCC_GetClockConfig+0x5c>)
 80088e6:	689b      	ldr	r3, [r3, #8]
 80088e8:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80088f0:	4b09      	ldr	r3, [pc, #36]	@ (8008918 <HAL_RCC_GetClockConfig+0x5c>)
 80088f2:	689b      	ldr	r3, [r3, #8]
 80088f4:	08db      	lsrs	r3, r3, #3
 80088f6:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80088fe:	4b07      	ldr	r3, [pc, #28]	@ (800891c <HAL_RCC_GetClockConfig+0x60>)
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	f003 0207 	and.w	r2, r3, #7
 8008906:	683b      	ldr	r3, [r7, #0]
 8008908:	601a      	str	r2, [r3, #0]
}
 800890a:	bf00      	nop
 800890c:	370c      	adds	r7, #12
 800890e:	46bd      	mov	sp, r7
 8008910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008914:	4770      	bx	lr
 8008916:	bf00      	nop
 8008918:	40023800 	.word	0x40023800
 800891c:	40023c00 	.word	0x40023c00

08008920 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008920:	b580      	push	{r7, lr}
 8008922:	b082      	sub	sp, #8
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	2b00      	cmp	r3, #0
 800892c:	d101      	bne.n	8008932 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800892e:	2301      	movs	r3, #1
 8008930:	e041      	b.n	80089b6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008938:	b2db      	uxtb	r3, r3
 800893a:	2b00      	cmp	r3, #0
 800893c:	d106      	bne.n	800894c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	2200      	movs	r2, #0
 8008942:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008946:	6878      	ldr	r0, [r7, #4]
 8008948:	f7fc fca6 	bl	8005298 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2202      	movs	r2, #2
 8008950:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681a      	ldr	r2, [r3, #0]
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	3304      	adds	r3, #4
 800895c:	4619      	mov	r1, r3
 800895e:	4610      	mov	r0, r2
 8008960:	f001 f888 	bl	8009a74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2201      	movs	r2, #1
 8008968:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2201      	movs	r2, #1
 8008970:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	2201      	movs	r2, #1
 8008978:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	2201      	movs	r2, #1
 8008980:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	2201      	movs	r2, #1
 8008988:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	2201      	movs	r2, #1
 8008990:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	2201      	movs	r2, #1
 8008998:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	2201      	movs	r2, #1
 80089a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	2201      	movs	r2, #1
 80089a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	2201      	movs	r2, #1
 80089b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80089b4:	2300      	movs	r3, #0
}
 80089b6:	4618      	mov	r0, r3
 80089b8:	3708      	adds	r7, #8
 80089ba:	46bd      	mov	sp, r7
 80089bc:	bd80      	pop	{r7, pc}
	...

080089c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80089c0:	b480      	push	{r7}
 80089c2:	b085      	sub	sp, #20
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80089ce:	b2db      	uxtb	r3, r3
 80089d0:	2b01      	cmp	r3, #1
 80089d2:	d001      	beq.n	80089d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80089d4:	2301      	movs	r3, #1
 80089d6:	e04e      	b.n	8008a76 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	2202      	movs	r2, #2
 80089dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	68da      	ldr	r2, [r3, #12]
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	f042 0201 	orr.w	r2, r2, #1
 80089ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	4a23      	ldr	r2, [pc, #140]	@ (8008a84 <HAL_TIM_Base_Start_IT+0xc4>)
 80089f6:	4293      	cmp	r3, r2
 80089f8:	d022      	beq.n	8008a40 <HAL_TIM_Base_Start_IT+0x80>
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a02:	d01d      	beq.n	8008a40 <HAL_TIM_Base_Start_IT+0x80>
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	4a1f      	ldr	r2, [pc, #124]	@ (8008a88 <HAL_TIM_Base_Start_IT+0xc8>)
 8008a0a:	4293      	cmp	r3, r2
 8008a0c:	d018      	beq.n	8008a40 <HAL_TIM_Base_Start_IT+0x80>
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	4a1e      	ldr	r2, [pc, #120]	@ (8008a8c <HAL_TIM_Base_Start_IT+0xcc>)
 8008a14:	4293      	cmp	r3, r2
 8008a16:	d013      	beq.n	8008a40 <HAL_TIM_Base_Start_IT+0x80>
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	4a1c      	ldr	r2, [pc, #112]	@ (8008a90 <HAL_TIM_Base_Start_IT+0xd0>)
 8008a1e:	4293      	cmp	r3, r2
 8008a20:	d00e      	beq.n	8008a40 <HAL_TIM_Base_Start_IT+0x80>
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	4a1b      	ldr	r2, [pc, #108]	@ (8008a94 <HAL_TIM_Base_Start_IT+0xd4>)
 8008a28:	4293      	cmp	r3, r2
 8008a2a:	d009      	beq.n	8008a40 <HAL_TIM_Base_Start_IT+0x80>
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	4a19      	ldr	r2, [pc, #100]	@ (8008a98 <HAL_TIM_Base_Start_IT+0xd8>)
 8008a32:	4293      	cmp	r3, r2
 8008a34:	d004      	beq.n	8008a40 <HAL_TIM_Base_Start_IT+0x80>
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	4a18      	ldr	r2, [pc, #96]	@ (8008a9c <HAL_TIM_Base_Start_IT+0xdc>)
 8008a3c:	4293      	cmp	r3, r2
 8008a3e:	d111      	bne.n	8008a64 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	689b      	ldr	r3, [r3, #8]
 8008a46:	f003 0307 	and.w	r3, r3, #7
 8008a4a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	2b06      	cmp	r3, #6
 8008a50:	d010      	beq.n	8008a74 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	681a      	ldr	r2, [r3, #0]
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	f042 0201 	orr.w	r2, r2, #1
 8008a60:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a62:	e007      	b.n	8008a74 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	681a      	ldr	r2, [r3, #0]
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	f042 0201 	orr.w	r2, r2, #1
 8008a72:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008a74:	2300      	movs	r3, #0
}
 8008a76:	4618      	mov	r0, r3
 8008a78:	3714      	adds	r7, #20
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a80:	4770      	bx	lr
 8008a82:	bf00      	nop
 8008a84:	40010000 	.word	0x40010000
 8008a88:	40000400 	.word	0x40000400
 8008a8c:	40000800 	.word	0x40000800
 8008a90:	40000c00 	.word	0x40000c00
 8008a94:	40010400 	.word	0x40010400
 8008a98:	40014000 	.word	0x40014000
 8008a9c:	40001800 	.word	0x40001800

08008aa0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b082      	sub	sp, #8
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d101      	bne.n	8008ab2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008aae:	2301      	movs	r3, #1
 8008ab0:	e041      	b.n	8008b36 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008ab8:	b2db      	uxtb	r3, r3
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d106      	bne.n	8008acc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008ac6:	6878      	ldr	r0, [r7, #4]
 8008ac8:	f7fc fb14 	bl	80050f4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	2202      	movs	r2, #2
 8008ad0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681a      	ldr	r2, [r3, #0]
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	3304      	adds	r3, #4
 8008adc:	4619      	mov	r1, r3
 8008ade:	4610      	mov	r0, r2
 8008ae0:	f000 ffc8 	bl	8009a74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	2201      	movs	r2, #1
 8008ae8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	2201      	movs	r2, #1
 8008af0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	2201      	movs	r2, #1
 8008af8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	2201      	movs	r2, #1
 8008b00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	2201      	movs	r2, #1
 8008b08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	2201      	movs	r2, #1
 8008b10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	2201      	movs	r2, #1
 8008b18:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	2201      	movs	r2, #1
 8008b20:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	2201      	movs	r2, #1
 8008b28:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	2201      	movs	r2, #1
 8008b30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008b34:	2300      	movs	r3, #0
}
 8008b36:	4618      	mov	r0, r3
 8008b38:	3708      	adds	r7, #8
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	bd80      	pop	{r7, pc}
	...

08008b40 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b084      	sub	sp, #16
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
 8008b48:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008b4a:	683b      	ldr	r3, [r7, #0]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d109      	bne.n	8008b64 <HAL_TIM_PWM_Start+0x24>
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008b56:	b2db      	uxtb	r3, r3
 8008b58:	2b01      	cmp	r3, #1
 8008b5a:	bf14      	ite	ne
 8008b5c:	2301      	movne	r3, #1
 8008b5e:	2300      	moveq	r3, #0
 8008b60:	b2db      	uxtb	r3, r3
 8008b62:	e022      	b.n	8008baa <HAL_TIM_PWM_Start+0x6a>
 8008b64:	683b      	ldr	r3, [r7, #0]
 8008b66:	2b04      	cmp	r3, #4
 8008b68:	d109      	bne.n	8008b7e <HAL_TIM_PWM_Start+0x3e>
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008b70:	b2db      	uxtb	r3, r3
 8008b72:	2b01      	cmp	r3, #1
 8008b74:	bf14      	ite	ne
 8008b76:	2301      	movne	r3, #1
 8008b78:	2300      	moveq	r3, #0
 8008b7a:	b2db      	uxtb	r3, r3
 8008b7c:	e015      	b.n	8008baa <HAL_TIM_PWM_Start+0x6a>
 8008b7e:	683b      	ldr	r3, [r7, #0]
 8008b80:	2b08      	cmp	r3, #8
 8008b82:	d109      	bne.n	8008b98 <HAL_TIM_PWM_Start+0x58>
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008b8a:	b2db      	uxtb	r3, r3
 8008b8c:	2b01      	cmp	r3, #1
 8008b8e:	bf14      	ite	ne
 8008b90:	2301      	movne	r3, #1
 8008b92:	2300      	moveq	r3, #0
 8008b94:	b2db      	uxtb	r3, r3
 8008b96:	e008      	b.n	8008baa <HAL_TIM_PWM_Start+0x6a>
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008b9e:	b2db      	uxtb	r3, r3
 8008ba0:	2b01      	cmp	r3, #1
 8008ba2:	bf14      	ite	ne
 8008ba4:	2301      	movne	r3, #1
 8008ba6:	2300      	moveq	r3, #0
 8008ba8:	b2db      	uxtb	r3, r3
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d001      	beq.n	8008bb2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8008bae:	2301      	movs	r3, #1
 8008bb0:	e07c      	b.n	8008cac <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008bb2:	683b      	ldr	r3, [r7, #0]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d104      	bne.n	8008bc2 <HAL_TIM_PWM_Start+0x82>
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	2202      	movs	r2, #2
 8008bbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008bc0:	e013      	b.n	8008bea <HAL_TIM_PWM_Start+0xaa>
 8008bc2:	683b      	ldr	r3, [r7, #0]
 8008bc4:	2b04      	cmp	r3, #4
 8008bc6:	d104      	bne.n	8008bd2 <HAL_TIM_PWM_Start+0x92>
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	2202      	movs	r2, #2
 8008bcc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008bd0:	e00b      	b.n	8008bea <HAL_TIM_PWM_Start+0xaa>
 8008bd2:	683b      	ldr	r3, [r7, #0]
 8008bd4:	2b08      	cmp	r3, #8
 8008bd6:	d104      	bne.n	8008be2 <HAL_TIM_PWM_Start+0xa2>
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	2202      	movs	r2, #2
 8008bdc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008be0:	e003      	b.n	8008bea <HAL_TIM_PWM_Start+0xaa>
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	2202      	movs	r2, #2
 8008be6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	2201      	movs	r2, #1
 8008bf0:	6839      	ldr	r1, [r7, #0]
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	f001 fb58 	bl	800a2a8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	4a2d      	ldr	r2, [pc, #180]	@ (8008cb4 <HAL_TIM_PWM_Start+0x174>)
 8008bfe:	4293      	cmp	r3, r2
 8008c00:	d004      	beq.n	8008c0c <HAL_TIM_PWM_Start+0xcc>
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	4a2c      	ldr	r2, [pc, #176]	@ (8008cb8 <HAL_TIM_PWM_Start+0x178>)
 8008c08:	4293      	cmp	r3, r2
 8008c0a:	d101      	bne.n	8008c10 <HAL_TIM_PWM_Start+0xd0>
 8008c0c:	2301      	movs	r3, #1
 8008c0e:	e000      	b.n	8008c12 <HAL_TIM_PWM_Start+0xd2>
 8008c10:	2300      	movs	r3, #0
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d007      	beq.n	8008c26 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008c24:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	4a22      	ldr	r2, [pc, #136]	@ (8008cb4 <HAL_TIM_PWM_Start+0x174>)
 8008c2c:	4293      	cmp	r3, r2
 8008c2e:	d022      	beq.n	8008c76 <HAL_TIM_PWM_Start+0x136>
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c38:	d01d      	beq.n	8008c76 <HAL_TIM_PWM_Start+0x136>
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	4a1f      	ldr	r2, [pc, #124]	@ (8008cbc <HAL_TIM_PWM_Start+0x17c>)
 8008c40:	4293      	cmp	r3, r2
 8008c42:	d018      	beq.n	8008c76 <HAL_TIM_PWM_Start+0x136>
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	4a1d      	ldr	r2, [pc, #116]	@ (8008cc0 <HAL_TIM_PWM_Start+0x180>)
 8008c4a:	4293      	cmp	r3, r2
 8008c4c:	d013      	beq.n	8008c76 <HAL_TIM_PWM_Start+0x136>
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	4a1c      	ldr	r2, [pc, #112]	@ (8008cc4 <HAL_TIM_PWM_Start+0x184>)
 8008c54:	4293      	cmp	r3, r2
 8008c56:	d00e      	beq.n	8008c76 <HAL_TIM_PWM_Start+0x136>
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	4a16      	ldr	r2, [pc, #88]	@ (8008cb8 <HAL_TIM_PWM_Start+0x178>)
 8008c5e:	4293      	cmp	r3, r2
 8008c60:	d009      	beq.n	8008c76 <HAL_TIM_PWM_Start+0x136>
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	4a18      	ldr	r2, [pc, #96]	@ (8008cc8 <HAL_TIM_PWM_Start+0x188>)
 8008c68:	4293      	cmp	r3, r2
 8008c6a:	d004      	beq.n	8008c76 <HAL_TIM_PWM_Start+0x136>
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	4a16      	ldr	r2, [pc, #88]	@ (8008ccc <HAL_TIM_PWM_Start+0x18c>)
 8008c72:	4293      	cmp	r3, r2
 8008c74:	d111      	bne.n	8008c9a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	689b      	ldr	r3, [r3, #8]
 8008c7c:	f003 0307 	and.w	r3, r3, #7
 8008c80:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	2b06      	cmp	r3, #6
 8008c86:	d010      	beq.n	8008caa <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	681a      	ldr	r2, [r3, #0]
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	f042 0201 	orr.w	r2, r2, #1
 8008c96:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c98:	e007      	b.n	8008caa <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	681a      	ldr	r2, [r3, #0]
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	f042 0201 	orr.w	r2, r2, #1
 8008ca8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008caa:	2300      	movs	r3, #0
}
 8008cac:	4618      	mov	r0, r3
 8008cae:	3710      	adds	r7, #16
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	bd80      	pop	{r7, pc}
 8008cb4:	40010000 	.word	0x40010000
 8008cb8:	40010400 	.word	0x40010400
 8008cbc:	40000400 	.word	0x40000400
 8008cc0:	40000800 	.word	0x40000800
 8008cc4:	40000c00 	.word	0x40000c00
 8008cc8:	40014000 	.word	0x40014000
 8008ccc:	40001800 	.word	0x40001800

08008cd0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8008cd0:	b580      	push	{r7, lr}
 8008cd2:	b082      	sub	sp, #8
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d101      	bne.n	8008ce2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8008cde:	2301      	movs	r3, #1
 8008ce0:	e041      	b.n	8008d66 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008ce8:	b2db      	uxtb	r3, r3
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d106      	bne.n	8008cfc <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	2200      	movs	r2, #0
 8008cf2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8008cf6:	6878      	ldr	r0, [r7, #4]
 8008cf8:	f7f9 fde4 	bl	80028c4 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	2202      	movs	r2, #2
 8008d00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681a      	ldr	r2, [r3, #0]
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	3304      	adds	r3, #4
 8008d0c:	4619      	mov	r1, r3
 8008d0e:	4610      	mov	r0, r2
 8008d10:	f000 feb0 	bl	8009a74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	2201      	movs	r2, #1
 8008d18:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	2201      	movs	r2, #1
 8008d20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	2201      	movs	r2, #1
 8008d28:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	2201      	movs	r2, #1
 8008d30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	2201      	movs	r2, #1
 8008d38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2201      	movs	r2, #1
 8008d40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	2201      	movs	r2, #1
 8008d48:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	2201      	movs	r2, #1
 8008d50:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	2201      	movs	r2, #1
 8008d58:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	2201      	movs	r2, #1
 8008d60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008d64:	2300      	movs	r3, #0
}
 8008d66:	4618      	mov	r0, r3
 8008d68:	3708      	adds	r7, #8
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	bd80      	pop	{r7, pc}
	...

08008d70 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008d70:	b580      	push	{r7, lr}
 8008d72:	b084      	sub	sp, #16
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
 8008d78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8008d7e:	683b      	ldr	r3, [r7, #0]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d104      	bne.n	8008d8e <HAL_TIM_IC_Start_IT+0x1e>
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008d8a:	b2db      	uxtb	r3, r3
 8008d8c:	e013      	b.n	8008db6 <HAL_TIM_IC_Start_IT+0x46>
 8008d8e:	683b      	ldr	r3, [r7, #0]
 8008d90:	2b04      	cmp	r3, #4
 8008d92:	d104      	bne.n	8008d9e <HAL_TIM_IC_Start_IT+0x2e>
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008d9a:	b2db      	uxtb	r3, r3
 8008d9c:	e00b      	b.n	8008db6 <HAL_TIM_IC_Start_IT+0x46>
 8008d9e:	683b      	ldr	r3, [r7, #0]
 8008da0:	2b08      	cmp	r3, #8
 8008da2:	d104      	bne.n	8008dae <HAL_TIM_IC_Start_IT+0x3e>
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008daa:	b2db      	uxtb	r3, r3
 8008dac:	e003      	b.n	8008db6 <HAL_TIM_IC_Start_IT+0x46>
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008db4:	b2db      	uxtb	r3, r3
 8008db6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8008db8:	683b      	ldr	r3, [r7, #0]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d104      	bne.n	8008dc8 <HAL_TIM_IC_Start_IT+0x58>
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008dc4:	b2db      	uxtb	r3, r3
 8008dc6:	e013      	b.n	8008df0 <HAL_TIM_IC_Start_IT+0x80>
 8008dc8:	683b      	ldr	r3, [r7, #0]
 8008dca:	2b04      	cmp	r3, #4
 8008dcc:	d104      	bne.n	8008dd8 <HAL_TIM_IC_Start_IT+0x68>
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008dd4:	b2db      	uxtb	r3, r3
 8008dd6:	e00b      	b.n	8008df0 <HAL_TIM_IC_Start_IT+0x80>
 8008dd8:	683b      	ldr	r3, [r7, #0]
 8008dda:	2b08      	cmp	r3, #8
 8008ddc:	d104      	bne.n	8008de8 <HAL_TIM_IC_Start_IT+0x78>
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008de4:	b2db      	uxtb	r3, r3
 8008de6:	e003      	b.n	8008df0 <HAL_TIM_IC_Start_IT+0x80>
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008dee:	b2db      	uxtb	r3, r3
 8008df0:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8008df2:	7bbb      	ldrb	r3, [r7, #14]
 8008df4:	2b01      	cmp	r3, #1
 8008df6:	d102      	bne.n	8008dfe <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8008df8:	7b7b      	ldrb	r3, [r7, #13]
 8008dfa:	2b01      	cmp	r3, #1
 8008dfc:	d001      	beq.n	8008e02 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8008dfe:	2301      	movs	r3, #1
 8008e00:	e0cc      	b.n	8008f9c <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008e02:	683b      	ldr	r3, [r7, #0]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d104      	bne.n	8008e12 <HAL_TIM_IC_Start_IT+0xa2>
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	2202      	movs	r2, #2
 8008e0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008e10:	e013      	b.n	8008e3a <HAL_TIM_IC_Start_IT+0xca>
 8008e12:	683b      	ldr	r3, [r7, #0]
 8008e14:	2b04      	cmp	r3, #4
 8008e16:	d104      	bne.n	8008e22 <HAL_TIM_IC_Start_IT+0xb2>
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	2202      	movs	r2, #2
 8008e1c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008e20:	e00b      	b.n	8008e3a <HAL_TIM_IC_Start_IT+0xca>
 8008e22:	683b      	ldr	r3, [r7, #0]
 8008e24:	2b08      	cmp	r3, #8
 8008e26:	d104      	bne.n	8008e32 <HAL_TIM_IC_Start_IT+0xc2>
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	2202      	movs	r2, #2
 8008e2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008e30:	e003      	b.n	8008e3a <HAL_TIM_IC_Start_IT+0xca>
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	2202      	movs	r2, #2
 8008e36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008e3a:	683b      	ldr	r3, [r7, #0]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d104      	bne.n	8008e4a <HAL_TIM_IC_Start_IT+0xda>
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	2202      	movs	r2, #2
 8008e44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008e48:	e013      	b.n	8008e72 <HAL_TIM_IC_Start_IT+0x102>
 8008e4a:	683b      	ldr	r3, [r7, #0]
 8008e4c:	2b04      	cmp	r3, #4
 8008e4e:	d104      	bne.n	8008e5a <HAL_TIM_IC_Start_IT+0xea>
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	2202      	movs	r2, #2
 8008e54:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008e58:	e00b      	b.n	8008e72 <HAL_TIM_IC_Start_IT+0x102>
 8008e5a:	683b      	ldr	r3, [r7, #0]
 8008e5c:	2b08      	cmp	r3, #8
 8008e5e:	d104      	bne.n	8008e6a <HAL_TIM_IC_Start_IT+0xfa>
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	2202      	movs	r2, #2
 8008e64:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008e68:	e003      	b.n	8008e72 <HAL_TIM_IC_Start_IT+0x102>
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	2202      	movs	r2, #2
 8008e6e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8008e72:	683b      	ldr	r3, [r7, #0]
 8008e74:	2b0c      	cmp	r3, #12
 8008e76:	d841      	bhi.n	8008efc <HAL_TIM_IC_Start_IT+0x18c>
 8008e78:	a201      	add	r2, pc, #4	@ (adr r2, 8008e80 <HAL_TIM_IC_Start_IT+0x110>)
 8008e7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e7e:	bf00      	nop
 8008e80:	08008eb5 	.word	0x08008eb5
 8008e84:	08008efd 	.word	0x08008efd
 8008e88:	08008efd 	.word	0x08008efd
 8008e8c:	08008efd 	.word	0x08008efd
 8008e90:	08008ec7 	.word	0x08008ec7
 8008e94:	08008efd 	.word	0x08008efd
 8008e98:	08008efd 	.word	0x08008efd
 8008e9c:	08008efd 	.word	0x08008efd
 8008ea0:	08008ed9 	.word	0x08008ed9
 8008ea4:	08008efd 	.word	0x08008efd
 8008ea8:	08008efd 	.word	0x08008efd
 8008eac:	08008efd 	.word	0x08008efd
 8008eb0:	08008eeb 	.word	0x08008eeb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	68da      	ldr	r2, [r3, #12]
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	f042 0202 	orr.w	r2, r2, #2
 8008ec2:	60da      	str	r2, [r3, #12]
      break;
 8008ec4:	e01d      	b.n	8008f02 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	68da      	ldr	r2, [r3, #12]
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	f042 0204 	orr.w	r2, r2, #4
 8008ed4:	60da      	str	r2, [r3, #12]
      break;
 8008ed6:	e014      	b.n	8008f02 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	68da      	ldr	r2, [r3, #12]
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	f042 0208 	orr.w	r2, r2, #8
 8008ee6:	60da      	str	r2, [r3, #12]
      break;
 8008ee8:	e00b      	b.n	8008f02 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	68da      	ldr	r2, [r3, #12]
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	f042 0210 	orr.w	r2, r2, #16
 8008ef8:	60da      	str	r2, [r3, #12]
      break;
 8008efa:	e002      	b.n	8008f02 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8008efc:	2301      	movs	r3, #1
 8008efe:	73fb      	strb	r3, [r7, #15]
      break;
 8008f00:	bf00      	nop
  }

  if (status == HAL_OK)
 8008f02:	7bfb      	ldrb	r3, [r7, #15]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d148      	bne.n	8008f9a <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	2201      	movs	r2, #1
 8008f0e:	6839      	ldr	r1, [r7, #0]
 8008f10:	4618      	mov	r0, r3
 8008f12:	f001 f9c9 	bl	800a2a8 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	4a22      	ldr	r2, [pc, #136]	@ (8008fa4 <HAL_TIM_IC_Start_IT+0x234>)
 8008f1c:	4293      	cmp	r3, r2
 8008f1e:	d022      	beq.n	8008f66 <HAL_TIM_IC_Start_IT+0x1f6>
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008f28:	d01d      	beq.n	8008f66 <HAL_TIM_IC_Start_IT+0x1f6>
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	4a1e      	ldr	r2, [pc, #120]	@ (8008fa8 <HAL_TIM_IC_Start_IT+0x238>)
 8008f30:	4293      	cmp	r3, r2
 8008f32:	d018      	beq.n	8008f66 <HAL_TIM_IC_Start_IT+0x1f6>
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	4a1c      	ldr	r2, [pc, #112]	@ (8008fac <HAL_TIM_IC_Start_IT+0x23c>)
 8008f3a:	4293      	cmp	r3, r2
 8008f3c:	d013      	beq.n	8008f66 <HAL_TIM_IC_Start_IT+0x1f6>
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	4a1b      	ldr	r2, [pc, #108]	@ (8008fb0 <HAL_TIM_IC_Start_IT+0x240>)
 8008f44:	4293      	cmp	r3, r2
 8008f46:	d00e      	beq.n	8008f66 <HAL_TIM_IC_Start_IT+0x1f6>
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	4a19      	ldr	r2, [pc, #100]	@ (8008fb4 <HAL_TIM_IC_Start_IT+0x244>)
 8008f4e:	4293      	cmp	r3, r2
 8008f50:	d009      	beq.n	8008f66 <HAL_TIM_IC_Start_IT+0x1f6>
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	4a18      	ldr	r2, [pc, #96]	@ (8008fb8 <HAL_TIM_IC_Start_IT+0x248>)
 8008f58:	4293      	cmp	r3, r2
 8008f5a:	d004      	beq.n	8008f66 <HAL_TIM_IC_Start_IT+0x1f6>
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	4a16      	ldr	r2, [pc, #88]	@ (8008fbc <HAL_TIM_IC_Start_IT+0x24c>)
 8008f62:	4293      	cmp	r3, r2
 8008f64:	d111      	bne.n	8008f8a <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	689b      	ldr	r3, [r3, #8]
 8008f6c:	f003 0307 	and.w	r3, r3, #7
 8008f70:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f72:	68bb      	ldr	r3, [r7, #8]
 8008f74:	2b06      	cmp	r3, #6
 8008f76:	d010      	beq.n	8008f9a <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	681a      	ldr	r2, [r3, #0]
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	f042 0201 	orr.w	r2, r2, #1
 8008f86:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f88:	e007      	b.n	8008f9a <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	681a      	ldr	r2, [r3, #0]
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	f042 0201 	orr.w	r2, r2, #1
 8008f98:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8008f9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	3710      	adds	r7, #16
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	bd80      	pop	{r7, pc}
 8008fa4:	40010000 	.word	0x40010000
 8008fa8:	40000400 	.word	0x40000400
 8008fac:	40000800 	.word	0x40000800
 8008fb0:	40000c00 	.word	0x40000c00
 8008fb4:	40010400 	.word	0x40010400
 8008fb8:	40014000 	.word	0x40014000
 8008fbc:	40001800 	.word	0x40001800

08008fc0 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b084      	sub	sp, #16
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
 8008fc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008fca:	2300      	movs	r3, #0
 8008fcc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8008fce:	683b      	ldr	r3, [r7, #0]
 8008fd0:	2b0c      	cmp	r3, #12
 8008fd2:	d841      	bhi.n	8009058 <HAL_TIM_IC_Stop_IT+0x98>
 8008fd4:	a201      	add	r2, pc, #4	@ (adr r2, 8008fdc <HAL_TIM_IC_Stop_IT+0x1c>)
 8008fd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fda:	bf00      	nop
 8008fdc:	08009011 	.word	0x08009011
 8008fe0:	08009059 	.word	0x08009059
 8008fe4:	08009059 	.word	0x08009059
 8008fe8:	08009059 	.word	0x08009059
 8008fec:	08009023 	.word	0x08009023
 8008ff0:	08009059 	.word	0x08009059
 8008ff4:	08009059 	.word	0x08009059
 8008ff8:	08009059 	.word	0x08009059
 8008ffc:	08009035 	.word	0x08009035
 8009000:	08009059 	.word	0x08009059
 8009004:	08009059 	.word	0x08009059
 8009008:	08009059 	.word	0x08009059
 800900c:	08009047 	.word	0x08009047
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	68da      	ldr	r2, [r3, #12]
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	f022 0202 	bic.w	r2, r2, #2
 800901e:	60da      	str	r2, [r3, #12]
      break;
 8009020:	e01d      	b.n	800905e <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	68da      	ldr	r2, [r3, #12]
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	f022 0204 	bic.w	r2, r2, #4
 8009030:	60da      	str	r2, [r3, #12]
      break;
 8009032:	e014      	b.n	800905e <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	68da      	ldr	r2, [r3, #12]
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	f022 0208 	bic.w	r2, r2, #8
 8009042:	60da      	str	r2, [r3, #12]
      break;
 8009044:	e00b      	b.n	800905e <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	68da      	ldr	r2, [r3, #12]
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	f022 0210 	bic.w	r2, r2, #16
 8009054:	60da      	str	r2, [r3, #12]
      break;
 8009056:	e002      	b.n	800905e <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8009058:	2301      	movs	r3, #1
 800905a:	73fb      	strb	r3, [r7, #15]
      break;
 800905c:	bf00      	nop
  }

  if (status == HAL_OK)
 800905e:	7bfb      	ldrb	r3, [r7, #15]
 8009060:	2b00      	cmp	r3, #0
 8009062:	d156      	bne.n	8009112 <HAL_TIM_IC_Stop_IT+0x152>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	2200      	movs	r2, #0
 800906a:	6839      	ldr	r1, [r7, #0]
 800906c:	4618      	mov	r0, r3
 800906e:	f001 f91b 	bl	800a2a8 <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	6a1a      	ldr	r2, [r3, #32]
 8009078:	f241 1311 	movw	r3, #4369	@ 0x1111
 800907c:	4013      	ands	r3, r2
 800907e:	2b00      	cmp	r3, #0
 8009080:	d10f      	bne.n	80090a2 <HAL_TIM_IC_Stop_IT+0xe2>
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	6a1a      	ldr	r2, [r3, #32]
 8009088:	f240 4344 	movw	r3, #1092	@ 0x444
 800908c:	4013      	ands	r3, r2
 800908e:	2b00      	cmp	r3, #0
 8009090:	d107      	bne.n	80090a2 <HAL_TIM_IC_Stop_IT+0xe2>
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	681a      	ldr	r2, [r3, #0]
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	f022 0201 	bic.w	r2, r2, #1
 80090a0:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80090a2:	683b      	ldr	r3, [r7, #0]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d104      	bne.n	80090b2 <HAL_TIM_IC_Stop_IT+0xf2>
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	2201      	movs	r2, #1
 80090ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80090b0:	e013      	b.n	80090da <HAL_TIM_IC_Stop_IT+0x11a>
 80090b2:	683b      	ldr	r3, [r7, #0]
 80090b4:	2b04      	cmp	r3, #4
 80090b6:	d104      	bne.n	80090c2 <HAL_TIM_IC_Stop_IT+0x102>
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	2201      	movs	r2, #1
 80090bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80090c0:	e00b      	b.n	80090da <HAL_TIM_IC_Stop_IT+0x11a>
 80090c2:	683b      	ldr	r3, [r7, #0]
 80090c4:	2b08      	cmp	r3, #8
 80090c6:	d104      	bne.n	80090d2 <HAL_TIM_IC_Stop_IT+0x112>
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	2201      	movs	r2, #1
 80090cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80090d0:	e003      	b.n	80090da <HAL_TIM_IC_Stop_IT+0x11a>
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	2201      	movs	r2, #1
 80090d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80090da:	683b      	ldr	r3, [r7, #0]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d104      	bne.n	80090ea <HAL_TIM_IC_Stop_IT+0x12a>
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	2201      	movs	r2, #1
 80090e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80090e8:	e013      	b.n	8009112 <HAL_TIM_IC_Stop_IT+0x152>
 80090ea:	683b      	ldr	r3, [r7, #0]
 80090ec:	2b04      	cmp	r3, #4
 80090ee:	d104      	bne.n	80090fa <HAL_TIM_IC_Stop_IT+0x13a>
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	2201      	movs	r2, #1
 80090f4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80090f8:	e00b      	b.n	8009112 <HAL_TIM_IC_Stop_IT+0x152>
 80090fa:	683b      	ldr	r3, [r7, #0]
 80090fc:	2b08      	cmp	r3, #8
 80090fe:	d104      	bne.n	800910a <HAL_TIM_IC_Stop_IT+0x14a>
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	2201      	movs	r2, #1
 8009104:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009108:	e003      	b.n	8009112 <HAL_TIM_IC_Stop_IT+0x152>
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	2201      	movs	r2, #1
 800910e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  }

  /* Return function status */
  return status;
 8009112:	7bfb      	ldrb	r3, [r7, #15]
}
 8009114:	4618      	mov	r0, r3
 8009116:	3710      	adds	r7, #16
 8009118:	46bd      	mov	sp, r7
 800911a:	bd80      	pop	{r7, pc}

0800911c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800911c:	b580      	push	{r7, lr}
 800911e:	b086      	sub	sp, #24
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
 8009124:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d101      	bne.n	8009130 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800912c:	2301      	movs	r3, #1
 800912e:	e097      	b.n	8009260 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009136:	b2db      	uxtb	r3, r3
 8009138:	2b00      	cmp	r3, #0
 800913a:	d106      	bne.n	800914a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	2200      	movs	r2, #0
 8009140:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8009144:	6878      	ldr	r0, [r7, #4]
 8009146:	f7fc f80d 	bl	8005164 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	2202      	movs	r2, #2
 800914e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	689b      	ldr	r3, [r3, #8]
 8009158:	687a      	ldr	r2, [r7, #4]
 800915a:	6812      	ldr	r2, [r2, #0]
 800915c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009160:	f023 0307 	bic.w	r3, r3, #7
 8009164:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681a      	ldr	r2, [r3, #0]
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	3304      	adds	r3, #4
 800916e:	4619      	mov	r1, r3
 8009170:	4610      	mov	r0, r2
 8009172:	f000 fc7f 	bl	8009a74 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	689b      	ldr	r3, [r3, #8]
 800917c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	699b      	ldr	r3, [r3, #24]
 8009184:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	6a1b      	ldr	r3, [r3, #32]
 800918c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800918e:	683b      	ldr	r3, [r7, #0]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	697a      	ldr	r2, [r7, #20]
 8009194:	4313      	orrs	r3, r2
 8009196:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8009198:	693b      	ldr	r3, [r7, #16]
 800919a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800919e:	f023 0303 	bic.w	r3, r3, #3
 80091a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80091a4:	683b      	ldr	r3, [r7, #0]
 80091a6:	689a      	ldr	r2, [r3, #8]
 80091a8:	683b      	ldr	r3, [r7, #0]
 80091aa:	699b      	ldr	r3, [r3, #24]
 80091ac:	021b      	lsls	r3, r3, #8
 80091ae:	4313      	orrs	r3, r2
 80091b0:	693a      	ldr	r2, [r7, #16]
 80091b2:	4313      	orrs	r3, r2
 80091b4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80091b6:	693b      	ldr	r3, [r7, #16]
 80091b8:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80091bc:	f023 030c 	bic.w	r3, r3, #12
 80091c0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80091c2:	693b      	ldr	r3, [r7, #16]
 80091c4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80091c8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80091cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80091ce:	683b      	ldr	r3, [r7, #0]
 80091d0:	68da      	ldr	r2, [r3, #12]
 80091d2:	683b      	ldr	r3, [r7, #0]
 80091d4:	69db      	ldr	r3, [r3, #28]
 80091d6:	021b      	lsls	r3, r3, #8
 80091d8:	4313      	orrs	r3, r2
 80091da:	693a      	ldr	r2, [r7, #16]
 80091dc:	4313      	orrs	r3, r2
 80091de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80091e0:	683b      	ldr	r3, [r7, #0]
 80091e2:	691b      	ldr	r3, [r3, #16]
 80091e4:	011a      	lsls	r2, r3, #4
 80091e6:	683b      	ldr	r3, [r7, #0]
 80091e8:	6a1b      	ldr	r3, [r3, #32]
 80091ea:	031b      	lsls	r3, r3, #12
 80091ec:	4313      	orrs	r3, r2
 80091ee:	693a      	ldr	r2, [r7, #16]
 80091f0:	4313      	orrs	r3, r2
 80091f2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80091fa:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8009202:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8009204:	683b      	ldr	r3, [r7, #0]
 8009206:	685a      	ldr	r2, [r3, #4]
 8009208:	683b      	ldr	r3, [r7, #0]
 800920a:	695b      	ldr	r3, [r3, #20]
 800920c:	011b      	lsls	r3, r3, #4
 800920e:	4313      	orrs	r3, r2
 8009210:	68fa      	ldr	r2, [r7, #12]
 8009212:	4313      	orrs	r3, r2
 8009214:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	697a      	ldr	r2, [r7, #20]
 800921c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	693a      	ldr	r2, [r7, #16]
 8009224:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	68fa      	ldr	r2, [r7, #12]
 800922c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	2201      	movs	r2, #1
 8009232:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	2201      	movs	r2, #1
 800923a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	2201      	movs	r2, #1
 8009242:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	2201      	movs	r2, #1
 800924a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	2201      	movs	r2, #1
 8009252:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	2201      	movs	r2, #1
 800925a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800925e:	2300      	movs	r3, #0
}
 8009260:	4618      	mov	r0, r3
 8009262:	3718      	adds	r7, #24
 8009264:	46bd      	mov	sp, r7
 8009266:	bd80      	pop	{r7, pc}

08009268 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009268:	b580      	push	{r7, lr}
 800926a:	b084      	sub	sp, #16
 800926c:	af00      	add	r7, sp, #0
 800926e:	6078      	str	r0, [r7, #4]
 8009270:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009278:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8009280:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009288:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8009290:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8009292:	683b      	ldr	r3, [r7, #0]
 8009294:	2b00      	cmp	r3, #0
 8009296:	d110      	bne.n	80092ba <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009298:	7bfb      	ldrb	r3, [r7, #15]
 800929a:	2b01      	cmp	r3, #1
 800929c:	d102      	bne.n	80092a4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800929e:	7b7b      	ldrb	r3, [r7, #13]
 80092a0:	2b01      	cmp	r3, #1
 80092a2:	d001      	beq.n	80092a8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80092a4:	2301      	movs	r3, #1
 80092a6:	e069      	b.n	800937c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	2202      	movs	r2, #2
 80092ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	2202      	movs	r2, #2
 80092b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80092b8:	e031      	b.n	800931e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80092ba:	683b      	ldr	r3, [r7, #0]
 80092bc:	2b04      	cmp	r3, #4
 80092be:	d110      	bne.n	80092e2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80092c0:	7bbb      	ldrb	r3, [r7, #14]
 80092c2:	2b01      	cmp	r3, #1
 80092c4:	d102      	bne.n	80092cc <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80092c6:	7b3b      	ldrb	r3, [r7, #12]
 80092c8:	2b01      	cmp	r3, #1
 80092ca:	d001      	beq.n	80092d0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80092cc:	2301      	movs	r3, #1
 80092ce:	e055      	b.n	800937c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	2202      	movs	r2, #2
 80092d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	2202      	movs	r2, #2
 80092dc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80092e0:	e01d      	b.n	800931e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80092e2:	7bfb      	ldrb	r3, [r7, #15]
 80092e4:	2b01      	cmp	r3, #1
 80092e6:	d108      	bne.n	80092fa <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80092e8:	7bbb      	ldrb	r3, [r7, #14]
 80092ea:	2b01      	cmp	r3, #1
 80092ec:	d105      	bne.n	80092fa <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80092ee:	7b7b      	ldrb	r3, [r7, #13]
 80092f0:	2b01      	cmp	r3, #1
 80092f2:	d102      	bne.n	80092fa <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80092f4:	7b3b      	ldrb	r3, [r7, #12]
 80092f6:	2b01      	cmp	r3, #1
 80092f8:	d001      	beq.n	80092fe <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80092fa:	2301      	movs	r3, #1
 80092fc:	e03e      	b.n	800937c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	2202      	movs	r2, #2
 8009302:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	2202      	movs	r2, #2
 800930a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	2202      	movs	r2, #2
 8009312:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	2202      	movs	r2, #2
 800931a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800931e:	683b      	ldr	r3, [r7, #0]
 8009320:	2b00      	cmp	r3, #0
 8009322:	d003      	beq.n	800932c <HAL_TIM_Encoder_Start+0xc4>
 8009324:	683b      	ldr	r3, [r7, #0]
 8009326:	2b04      	cmp	r3, #4
 8009328:	d008      	beq.n	800933c <HAL_TIM_Encoder_Start+0xd4>
 800932a:	e00f      	b.n	800934c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	2201      	movs	r2, #1
 8009332:	2100      	movs	r1, #0
 8009334:	4618      	mov	r0, r3
 8009336:	f000 ffb7 	bl	800a2a8 <TIM_CCxChannelCmd>
      break;
 800933a:	e016      	b.n	800936a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	2201      	movs	r2, #1
 8009342:	2104      	movs	r1, #4
 8009344:	4618      	mov	r0, r3
 8009346:	f000 ffaf 	bl	800a2a8 <TIM_CCxChannelCmd>
      break;
 800934a:	e00e      	b.n	800936a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	2201      	movs	r2, #1
 8009352:	2100      	movs	r1, #0
 8009354:	4618      	mov	r0, r3
 8009356:	f000 ffa7 	bl	800a2a8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	2201      	movs	r2, #1
 8009360:	2104      	movs	r1, #4
 8009362:	4618      	mov	r0, r3
 8009364:	f000 ffa0 	bl	800a2a8 <TIM_CCxChannelCmd>
      break;
 8009368:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	681a      	ldr	r2, [r3, #0]
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	f042 0201 	orr.w	r2, r2, #1
 8009378:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800937a:	2300      	movs	r3, #0
}
 800937c:	4618      	mov	r0, r3
 800937e:	3710      	adds	r7, #16
 8009380:	46bd      	mov	sp, r7
 8009382:	bd80      	pop	{r7, pc}

08009384 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009384:	b580      	push	{r7, lr}
 8009386:	b084      	sub	sp, #16
 8009388:	af00      	add	r7, sp, #0
 800938a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	68db      	ldr	r3, [r3, #12]
 8009392:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	691b      	ldr	r3, [r3, #16]
 800939a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800939c:	68bb      	ldr	r3, [r7, #8]
 800939e:	f003 0302 	and.w	r3, r3, #2
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d020      	beq.n	80093e8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	f003 0302 	and.w	r3, r3, #2
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d01b      	beq.n	80093e8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	f06f 0202 	mvn.w	r2, #2
 80093b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	2201      	movs	r2, #1
 80093be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	699b      	ldr	r3, [r3, #24]
 80093c6:	f003 0303 	and.w	r3, r3, #3
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d003      	beq.n	80093d6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80093ce:	6878      	ldr	r0, [r7, #4]
 80093d0:	f7f9 fac8 	bl	8002964 <HAL_TIM_IC_CaptureCallback>
 80093d4:	e005      	b.n	80093e2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80093d6:	6878      	ldr	r0, [r7, #4]
 80093d8:	f000 fb2e 	bl	8009a38 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80093dc:	6878      	ldr	r0, [r7, #4]
 80093de:	f000 fb35 	bl	8009a4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	2200      	movs	r2, #0
 80093e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80093e8:	68bb      	ldr	r3, [r7, #8]
 80093ea:	f003 0304 	and.w	r3, r3, #4
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d020      	beq.n	8009434 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	f003 0304 	and.w	r3, r3, #4
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d01b      	beq.n	8009434 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	f06f 0204 	mvn.w	r2, #4
 8009404:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	2202      	movs	r2, #2
 800940a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	699b      	ldr	r3, [r3, #24]
 8009412:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009416:	2b00      	cmp	r3, #0
 8009418:	d003      	beq.n	8009422 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800941a:	6878      	ldr	r0, [r7, #4]
 800941c:	f7f9 faa2 	bl	8002964 <HAL_TIM_IC_CaptureCallback>
 8009420:	e005      	b.n	800942e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009422:	6878      	ldr	r0, [r7, #4]
 8009424:	f000 fb08 	bl	8009a38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009428:	6878      	ldr	r0, [r7, #4]
 800942a:	f000 fb0f 	bl	8009a4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	2200      	movs	r2, #0
 8009432:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009434:	68bb      	ldr	r3, [r7, #8]
 8009436:	f003 0308 	and.w	r3, r3, #8
 800943a:	2b00      	cmp	r3, #0
 800943c:	d020      	beq.n	8009480 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	f003 0308 	and.w	r3, r3, #8
 8009444:	2b00      	cmp	r3, #0
 8009446:	d01b      	beq.n	8009480 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	f06f 0208 	mvn.w	r2, #8
 8009450:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	2204      	movs	r2, #4
 8009456:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	69db      	ldr	r3, [r3, #28]
 800945e:	f003 0303 	and.w	r3, r3, #3
 8009462:	2b00      	cmp	r3, #0
 8009464:	d003      	beq.n	800946e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009466:	6878      	ldr	r0, [r7, #4]
 8009468:	f7f9 fa7c 	bl	8002964 <HAL_TIM_IC_CaptureCallback>
 800946c:	e005      	b.n	800947a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800946e:	6878      	ldr	r0, [r7, #4]
 8009470:	f000 fae2 	bl	8009a38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009474:	6878      	ldr	r0, [r7, #4]
 8009476:	f000 fae9 	bl	8009a4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	2200      	movs	r2, #0
 800947e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009480:	68bb      	ldr	r3, [r7, #8]
 8009482:	f003 0310 	and.w	r3, r3, #16
 8009486:	2b00      	cmp	r3, #0
 8009488:	d020      	beq.n	80094cc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	f003 0310 	and.w	r3, r3, #16
 8009490:	2b00      	cmp	r3, #0
 8009492:	d01b      	beq.n	80094cc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	f06f 0210 	mvn.w	r2, #16
 800949c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	2208      	movs	r2, #8
 80094a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	69db      	ldr	r3, [r3, #28]
 80094aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d003      	beq.n	80094ba <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80094b2:	6878      	ldr	r0, [r7, #4]
 80094b4:	f7f9 fa56 	bl	8002964 <HAL_TIM_IC_CaptureCallback>
 80094b8:	e005      	b.n	80094c6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80094ba:	6878      	ldr	r0, [r7, #4]
 80094bc:	f000 fabc 	bl	8009a38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80094c0:	6878      	ldr	r0, [r7, #4]
 80094c2:	f000 fac3 	bl	8009a4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	2200      	movs	r2, #0
 80094ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80094cc:	68bb      	ldr	r3, [r7, #8]
 80094ce:	f003 0301 	and.w	r3, r3, #1
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d00c      	beq.n	80094f0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	f003 0301 	and.w	r3, r3, #1
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d007      	beq.n	80094f0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	f06f 0201 	mvn.w	r2, #1
 80094e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80094ea:	6878      	ldr	r0, [r7, #4]
 80094ec:	f7f9 fdce 	bl	800308c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80094f0:	68bb      	ldr	r3, [r7, #8]
 80094f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d00c      	beq.n	8009514 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009500:	2b00      	cmp	r3, #0
 8009502:	d007      	beq.n	8009514 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800950c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800950e:	6878      	ldr	r0, [r7, #4]
 8009510:	f000 ffc8 	bl	800a4a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009514:	68bb      	ldr	r3, [r7, #8]
 8009516:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800951a:	2b00      	cmp	r3, #0
 800951c:	d00c      	beq.n	8009538 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009524:	2b00      	cmp	r3, #0
 8009526:	d007      	beq.n	8009538 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009530:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009532:	6878      	ldr	r0, [r7, #4]
 8009534:	f000 fa94 	bl	8009a60 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009538:	68bb      	ldr	r3, [r7, #8]
 800953a:	f003 0320 	and.w	r3, r3, #32
 800953e:	2b00      	cmp	r3, #0
 8009540:	d00c      	beq.n	800955c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	f003 0320 	and.w	r3, r3, #32
 8009548:	2b00      	cmp	r3, #0
 800954a:	d007      	beq.n	800955c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	f06f 0220 	mvn.w	r2, #32
 8009554:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009556:	6878      	ldr	r0, [r7, #4]
 8009558:	f000 ff9a 	bl	800a490 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800955c:	bf00      	nop
 800955e:	3710      	adds	r7, #16
 8009560:	46bd      	mov	sp, r7
 8009562:	bd80      	pop	{r7, pc}

08009564 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8009564:	b580      	push	{r7, lr}
 8009566:	b086      	sub	sp, #24
 8009568:	af00      	add	r7, sp, #0
 800956a:	60f8      	str	r0, [r7, #12]
 800956c:	60b9      	str	r1, [r7, #8]
 800956e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009570:	2300      	movs	r3, #0
 8009572:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800957a:	2b01      	cmp	r3, #1
 800957c:	d101      	bne.n	8009582 <HAL_TIM_IC_ConfigChannel+0x1e>
 800957e:	2302      	movs	r3, #2
 8009580:	e088      	b.n	8009694 <HAL_TIM_IC_ConfigChannel+0x130>
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	2201      	movs	r2, #1
 8009586:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	2b00      	cmp	r3, #0
 800958e:	d11b      	bne.n	80095c8 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8009594:	68bb      	ldr	r3, [r7, #8]
 8009596:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8009598:	68bb      	ldr	r3, [r7, #8]
 800959a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800959c:	68bb      	ldr	r3, [r7, #8]
 800959e:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80095a0:	f000 fcbe 	bl	8009f20 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	699a      	ldr	r2, [r3, #24]
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	f022 020c 	bic.w	r2, r2, #12
 80095b2:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	6999      	ldr	r1, [r3, #24]
 80095ba:	68bb      	ldr	r3, [r7, #8]
 80095bc:	689a      	ldr	r2, [r3, #8]
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	430a      	orrs	r2, r1
 80095c4:	619a      	str	r2, [r3, #24]
 80095c6:	e060      	b.n	800968a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	2b04      	cmp	r3, #4
 80095cc:	d11c      	bne.n	8009608 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80095d2:	68bb      	ldr	r3, [r7, #8]
 80095d4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80095d6:	68bb      	ldr	r3, [r7, #8]
 80095d8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80095da:	68bb      	ldr	r3, [r7, #8]
 80095dc:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80095de:	f000 fd42 	bl	800a066 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	699a      	ldr	r2, [r3, #24]
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80095f0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	6999      	ldr	r1, [r3, #24]
 80095f8:	68bb      	ldr	r3, [r7, #8]
 80095fa:	689b      	ldr	r3, [r3, #8]
 80095fc:	021a      	lsls	r2, r3, #8
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	430a      	orrs	r2, r1
 8009604:	619a      	str	r2, [r3, #24]
 8009606:	e040      	b.n	800968a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	2b08      	cmp	r3, #8
 800960c:	d11b      	bne.n	8009646 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8009612:	68bb      	ldr	r3, [r7, #8]
 8009614:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8009616:	68bb      	ldr	r3, [r7, #8]
 8009618:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800961a:	68bb      	ldr	r3, [r7, #8]
 800961c:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800961e:	f000 fd8f 	bl	800a140 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	69da      	ldr	r2, [r3, #28]
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	f022 020c 	bic.w	r2, r2, #12
 8009630:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	69d9      	ldr	r1, [r3, #28]
 8009638:	68bb      	ldr	r3, [r7, #8]
 800963a:	689a      	ldr	r2, [r3, #8]
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	430a      	orrs	r2, r1
 8009642:	61da      	str	r2, [r3, #28]
 8009644:	e021      	b.n	800968a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	2b0c      	cmp	r3, #12
 800964a:	d11c      	bne.n	8009686 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8009650:	68bb      	ldr	r3, [r7, #8]
 8009652:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8009654:	68bb      	ldr	r3, [r7, #8]
 8009656:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8009658:	68bb      	ldr	r3, [r7, #8]
 800965a:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800965c:	f000 fdac 	bl	800a1b8 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	69da      	ldr	r2, [r3, #28]
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800966e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	69d9      	ldr	r1, [r3, #28]
 8009676:	68bb      	ldr	r3, [r7, #8]
 8009678:	689b      	ldr	r3, [r3, #8]
 800967a:	021a      	lsls	r2, r3, #8
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	430a      	orrs	r2, r1
 8009682:	61da      	str	r2, [r3, #28]
 8009684:	e001      	b.n	800968a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8009686:	2301      	movs	r3, #1
 8009688:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	2200      	movs	r2, #0
 800968e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009692:	7dfb      	ldrb	r3, [r7, #23]
}
 8009694:	4618      	mov	r0, r3
 8009696:	3718      	adds	r7, #24
 8009698:	46bd      	mov	sp, r7
 800969a:	bd80      	pop	{r7, pc}

0800969c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800969c:	b580      	push	{r7, lr}
 800969e:	b086      	sub	sp, #24
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	60f8      	str	r0, [r7, #12]
 80096a4:	60b9      	str	r1, [r7, #8]
 80096a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80096a8:	2300      	movs	r3, #0
 80096aa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80096b2:	2b01      	cmp	r3, #1
 80096b4:	d101      	bne.n	80096ba <HAL_TIM_PWM_ConfigChannel+0x1e>
 80096b6:	2302      	movs	r3, #2
 80096b8:	e0ae      	b.n	8009818 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	2201      	movs	r2, #1
 80096be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	2b0c      	cmp	r3, #12
 80096c6:	f200 809f 	bhi.w	8009808 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80096ca:	a201      	add	r2, pc, #4	@ (adr r2, 80096d0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80096cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096d0:	08009705 	.word	0x08009705
 80096d4:	08009809 	.word	0x08009809
 80096d8:	08009809 	.word	0x08009809
 80096dc:	08009809 	.word	0x08009809
 80096e0:	08009745 	.word	0x08009745
 80096e4:	08009809 	.word	0x08009809
 80096e8:	08009809 	.word	0x08009809
 80096ec:	08009809 	.word	0x08009809
 80096f0:	08009787 	.word	0x08009787
 80096f4:	08009809 	.word	0x08009809
 80096f8:	08009809 	.word	0x08009809
 80096fc:	08009809 	.word	0x08009809
 8009700:	080097c7 	.word	0x080097c7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	68b9      	ldr	r1, [r7, #8]
 800970a:	4618      	mov	r0, r3
 800970c:	f000 fa58 	bl	8009bc0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	699a      	ldr	r2, [r3, #24]
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	f042 0208 	orr.w	r2, r2, #8
 800971e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	699a      	ldr	r2, [r3, #24]
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	f022 0204 	bic.w	r2, r2, #4
 800972e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	6999      	ldr	r1, [r3, #24]
 8009736:	68bb      	ldr	r3, [r7, #8]
 8009738:	691a      	ldr	r2, [r3, #16]
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	430a      	orrs	r2, r1
 8009740:	619a      	str	r2, [r3, #24]
      break;
 8009742:	e064      	b.n	800980e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	68b9      	ldr	r1, [r7, #8]
 800974a:	4618      	mov	r0, r3
 800974c:	f000 faa8 	bl	8009ca0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	699a      	ldr	r2, [r3, #24]
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800975e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	699a      	ldr	r2, [r3, #24]
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800976e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	6999      	ldr	r1, [r3, #24]
 8009776:	68bb      	ldr	r3, [r7, #8]
 8009778:	691b      	ldr	r3, [r3, #16]
 800977a:	021a      	lsls	r2, r3, #8
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	430a      	orrs	r2, r1
 8009782:	619a      	str	r2, [r3, #24]
      break;
 8009784:	e043      	b.n	800980e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	68b9      	ldr	r1, [r7, #8]
 800978c:	4618      	mov	r0, r3
 800978e:	f000 fafd 	bl	8009d8c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	69da      	ldr	r2, [r3, #28]
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	f042 0208 	orr.w	r2, r2, #8
 80097a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	69da      	ldr	r2, [r3, #28]
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	f022 0204 	bic.w	r2, r2, #4
 80097b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	69d9      	ldr	r1, [r3, #28]
 80097b8:	68bb      	ldr	r3, [r7, #8]
 80097ba:	691a      	ldr	r2, [r3, #16]
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	430a      	orrs	r2, r1
 80097c2:	61da      	str	r2, [r3, #28]
      break;
 80097c4:	e023      	b.n	800980e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	68b9      	ldr	r1, [r7, #8]
 80097cc:	4618      	mov	r0, r3
 80097ce:	f000 fb51 	bl	8009e74 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	69da      	ldr	r2, [r3, #28]
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80097e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	69da      	ldr	r2, [r3, #28]
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80097f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	69d9      	ldr	r1, [r3, #28]
 80097f8:	68bb      	ldr	r3, [r7, #8]
 80097fa:	691b      	ldr	r3, [r3, #16]
 80097fc:	021a      	lsls	r2, r3, #8
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	430a      	orrs	r2, r1
 8009804:	61da      	str	r2, [r3, #28]
      break;
 8009806:	e002      	b.n	800980e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8009808:	2301      	movs	r3, #1
 800980a:	75fb      	strb	r3, [r7, #23]
      break;
 800980c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	2200      	movs	r2, #0
 8009812:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009816:	7dfb      	ldrb	r3, [r7, #23]
}
 8009818:	4618      	mov	r0, r3
 800981a:	3718      	adds	r7, #24
 800981c:	46bd      	mov	sp, r7
 800981e:	bd80      	pop	{r7, pc}

08009820 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009820:	b580      	push	{r7, lr}
 8009822:	b084      	sub	sp, #16
 8009824:	af00      	add	r7, sp, #0
 8009826:	6078      	str	r0, [r7, #4]
 8009828:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800982a:	2300      	movs	r3, #0
 800982c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009834:	2b01      	cmp	r3, #1
 8009836:	d101      	bne.n	800983c <HAL_TIM_ConfigClockSource+0x1c>
 8009838:	2302      	movs	r3, #2
 800983a:	e0b4      	b.n	80099a6 <HAL_TIM_ConfigClockSource+0x186>
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	2201      	movs	r2, #1
 8009840:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	2202      	movs	r2, #2
 8009848:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	689b      	ldr	r3, [r3, #8]
 8009852:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009854:	68bb      	ldr	r3, [r7, #8]
 8009856:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800985a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800985c:	68bb      	ldr	r3, [r7, #8]
 800985e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009862:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	68ba      	ldr	r2, [r7, #8]
 800986a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800986c:	683b      	ldr	r3, [r7, #0]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009874:	d03e      	beq.n	80098f4 <HAL_TIM_ConfigClockSource+0xd4>
 8009876:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800987a:	f200 8087 	bhi.w	800998c <HAL_TIM_ConfigClockSource+0x16c>
 800987e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009882:	f000 8086 	beq.w	8009992 <HAL_TIM_ConfigClockSource+0x172>
 8009886:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800988a:	d87f      	bhi.n	800998c <HAL_TIM_ConfigClockSource+0x16c>
 800988c:	2b70      	cmp	r3, #112	@ 0x70
 800988e:	d01a      	beq.n	80098c6 <HAL_TIM_ConfigClockSource+0xa6>
 8009890:	2b70      	cmp	r3, #112	@ 0x70
 8009892:	d87b      	bhi.n	800998c <HAL_TIM_ConfigClockSource+0x16c>
 8009894:	2b60      	cmp	r3, #96	@ 0x60
 8009896:	d050      	beq.n	800993a <HAL_TIM_ConfigClockSource+0x11a>
 8009898:	2b60      	cmp	r3, #96	@ 0x60
 800989a:	d877      	bhi.n	800998c <HAL_TIM_ConfigClockSource+0x16c>
 800989c:	2b50      	cmp	r3, #80	@ 0x50
 800989e:	d03c      	beq.n	800991a <HAL_TIM_ConfigClockSource+0xfa>
 80098a0:	2b50      	cmp	r3, #80	@ 0x50
 80098a2:	d873      	bhi.n	800998c <HAL_TIM_ConfigClockSource+0x16c>
 80098a4:	2b40      	cmp	r3, #64	@ 0x40
 80098a6:	d058      	beq.n	800995a <HAL_TIM_ConfigClockSource+0x13a>
 80098a8:	2b40      	cmp	r3, #64	@ 0x40
 80098aa:	d86f      	bhi.n	800998c <HAL_TIM_ConfigClockSource+0x16c>
 80098ac:	2b30      	cmp	r3, #48	@ 0x30
 80098ae:	d064      	beq.n	800997a <HAL_TIM_ConfigClockSource+0x15a>
 80098b0:	2b30      	cmp	r3, #48	@ 0x30
 80098b2:	d86b      	bhi.n	800998c <HAL_TIM_ConfigClockSource+0x16c>
 80098b4:	2b20      	cmp	r3, #32
 80098b6:	d060      	beq.n	800997a <HAL_TIM_ConfigClockSource+0x15a>
 80098b8:	2b20      	cmp	r3, #32
 80098ba:	d867      	bhi.n	800998c <HAL_TIM_ConfigClockSource+0x16c>
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d05c      	beq.n	800997a <HAL_TIM_ConfigClockSource+0x15a>
 80098c0:	2b10      	cmp	r3, #16
 80098c2:	d05a      	beq.n	800997a <HAL_TIM_ConfigClockSource+0x15a>
 80098c4:	e062      	b.n	800998c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80098ca:	683b      	ldr	r3, [r7, #0]
 80098cc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80098ce:	683b      	ldr	r3, [r7, #0]
 80098d0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80098d2:	683b      	ldr	r3, [r7, #0]
 80098d4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80098d6:	f000 fcc7 	bl	800a268 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	689b      	ldr	r3, [r3, #8]
 80098e0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80098e2:	68bb      	ldr	r3, [r7, #8]
 80098e4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80098e8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	68ba      	ldr	r2, [r7, #8]
 80098f0:	609a      	str	r2, [r3, #8]
      break;
 80098f2:	e04f      	b.n	8009994 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80098f8:	683b      	ldr	r3, [r7, #0]
 80098fa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80098fc:	683b      	ldr	r3, [r7, #0]
 80098fe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009900:	683b      	ldr	r3, [r7, #0]
 8009902:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009904:	f000 fcb0 	bl	800a268 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	689a      	ldr	r2, [r3, #8]
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009916:	609a      	str	r2, [r3, #8]
      break;
 8009918:	e03c      	b.n	8009994 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800991e:	683b      	ldr	r3, [r7, #0]
 8009920:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009922:	683b      	ldr	r3, [r7, #0]
 8009924:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009926:	461a      	mov	r2, r3
 8009928:	f000 fb6e 	bl	800a008 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	2150      	movs	r1, #80	@ 0x50
 8009932:	4618      	mov	r0, r3
 8009934:	f000 fc7d 	bl	800a232 <TIM_ITRx_SetConfig>
      break;
 8009938:	e02c      	b.n	8009994 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800993e:	683b      	ldr	r3, [r7, #0]
 8009940:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009942:	683b      	ldr	r3, [r7, #0]
 8009944:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009946:	461a      	mov	r2, r3
 8009948:	f000 fbca 	bl	800a0e0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	2160      	movs	r1, #96	@ 0x60
 8009952:	4618      	mov	r0, r3
 8009954:	f000 fc6d 	bl	800a232 <TIM_ITRx_SetConfig>
      break;
 8009958:	e01c      	b.n	8009994 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800995e:	683b      	ldr	r3, [r7, #0]
 8009960:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009962:	683b      	ldr	r3, [r7, #0]
 8009964:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009966:	461a      	mov	r2, r3
 8009968:	f000 fb4e 	bl	800a008 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	2140      	movs	r1, #64	@ 0x40
 8009972:	4618      	mov	r0, r3
 8009974:	f000 fc5d 	bl	800a232 <TIM_ITRx_SetConfig>
      break;
 8009978:	e00c      	b.n	8009994 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681a      	ldr	r2, [r3, #0]
 800997e:	683b      	ldr	r3, [r7, #0]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	4619      	mov	r1, r3
 8009984:	4610      	mov	r0, r2
 8009986:	f000 fc54 	bl	800a232 <TIM_ITRx_SetConfig>
      break;
 800998a:	e003      	b.n	8009994 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800998c:	2301      	movs	r3, #1
 800998e:	73fb      	strb	r3, [r7, #15]
      break;
 8009990:	e000      	b.n	8009994 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009992:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	2201      	movs	r2, #1
 8009998:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	2200      	movs	r2, #0
 80099a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80099a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80099a6:	4618      	mov	r0, r3
 80099a8:	3710      	adds	r7, #16
 80099aa:	46bd      	mov	sp, r7
 80099ac:	bd80      	pop	{r7, pc}
	...

080099b0 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80099b0:	b480      	push	{r7}
 80099b2:	b085      	sub	sp, #20
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]
 80099b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80099ba:	2300      	movs	r3, #0
 80099bc:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80099be:	683b      	ldr	r3, [r7, #0]
 80099c0:	2b0c      	cmp	r3, #12
 80099c2:	d831      	bhi.n	8009a28 <HAL_TIM_ReadCapturedValue+0x78>
 80099c4:	a201      	add	r2, pc, #4	@ (adr r2, 80099cc <HAL_TIM_ReadCapturedValue+0x1c>)
 80099c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099ca:	bf00      	nop
 80099cc:	08009a01 	.word	0x08009a01
 80099d0:	08009a29 	.word	0x08009a29
 80099d4:	08009a29 	.word	0x08009a29
 80099d8:	08009a29 	.word	0x08009a29
 80099dc:	08009a0b 	.word	0x08009a0b
 80099e0:	08009a29 	.word	0x08009a29
 80099e4:	08009a29 	.word	0x08009a29
 80099e8:	08009a29 	.word	0x08009a29
 80099ec:	08009a15 	.word	0x08009a15
 80099f0:	08009a29 	.word	0x08009a29
 80099f4:	08009a29 	.word	0x08009a29
 80099f8:	08009a29 	.word	0x08009a29
 80099fc:	08009a1f 	.word	0x08009a1f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009a06:	60fb      	str	r3, [r7, #12]

      break;
 8009a08:	e00f      	b.n	8009a2a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a10:	60fb      	str	r3, [r7, #12]

      break;
 8009a12:	e00a      	b.n	8009a2a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a1a:	60fb      	str	r3, [r7, #12]

      break;
 8009a1c:	e005      	b.n	8009a2a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a24:	60fb      	str	r3, [r7, #12]

      break;
 8009a26:	e000      	b.n	8009a2a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8009a28:	bf00      	nop
  }

  return tmpreg;
 8009a2a:	68fb      	ldr	r3, [r7, #12]
}
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	3714      	adds	r7, #20
 8009a30:	46bd      	mov	sp, r7
 8009a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a36:	4770      	bx	lr

08009a38 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009a38:	b480      	push	{r7}
 8009a3a:	b083      	sub	sp, #12
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009a40:	bf00      	nop
 8009a42:	370c      	adds	r7, #12
 8009a44:	46bd      	mov	sp, r7
 8009a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a4a:	4770      	bx	lr

08009a4c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009a4c:	b480      	push	{r7}
 8009a4e:	b083      	sub	sp, #12
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009a54:	bf00      	nop
 8009a56:	370c      	adds	r7, #12
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a5e:	4770      	bx	lr

08009a60 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009a60:	b480      	push	{r7}
 8009a62:	b083      	sub	sp, #12
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009a68:	bf00      	nop
 8009a6a:	370c      	adds	r7, #12
 8009a6c:	46bd      	mov	sp, r7
 8009a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a72:	4770      	bx	lr

08009a74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009a74:	b480      	push	{r7}
 8009a76:	b085      	sub	sp, #20
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	6078      	str	r0, [r7, #4]
 8009a7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	4a43      	ldr	r2, [pc, #268]	@ (8009b94 <TIM_Base_SetConfig+0x120>)
 8009a88:	4293      	cmp	r3, r2
 8009a8a:	d013      	beq.n	8009ab4 <TIM_Base_SetConfig+0x40>
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a92:	d00f      	beq.n	8009ab4 <TIM_Base_SetConfig+0x40>
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	4a40      	ldr	r2, [pc, #256]	@ (8009b98 <TIM_Base_SetConfig+0x124>)
 8009a98:	4293      	cmp	r3, r2
 8009a9a:	d00b      	beq.n	8009ab4 <TIM_Base_SetConfig+0x40>
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	4a3f      	ldr	r2, [pc, #252]	@ (8009b9c <TIM_Base_SetConfig+0x128>)
 8009aa0:	4293      	cmp	r3, r2
 8009aa2:	d007      	beq.n	8009ab4 <TIM_Base_SetConfig+0x40>
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	4a3e      	ldr	r2, [pc, #248]	@ (8009ba0 <TIM_Base_SetConfig+0x12c>)
 8009aa8:	4293      	cmp	r3, r2
 8009aaa:	d003      	beq.n	8009ab4 <TIM_Base_SetConfig+0x40>
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	4a3d      	ldr	r2, [pc, #244]	@ (8009ba4 <TIM_Base_SetConfig+0x130>)
 8009ab0:	4293      	cmp	r3, r2
 8009ab2:	d108      	bne.n	8009ac6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009aba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009abc:	683b      	ldr	r3, [r7, #0]
 8009abe:	685b      	ldr	r3, [r3, #4]
 8009ac0:	68fa      	ldr	r2, [r7, #12]
 8009ac2:	4313      	orrs	r3, r2
 8009ac4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	4a32      	ldr	r2, [pc, #200]	@ (8009b94 <TIM_Base_SetConfig+0x120>)
 8009aca:	4293      	cmp	r3, r2
 8009acc:	d02b      	beq.n	8009b26 <TIM_Base_SetConfig+0xb2>
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009ad4:	d027      	beq.n	8009b26 <TIM_Base_SetConfig+0xb2>
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	4a2f      	ldr	r2, [pc, #188]	@ (8009b98 <TIM_Base_SetConfig+0x124>)
 8009ada:	4293      	cmp	r3, r2
 8009adc:	d023      	beq.n	8009b26 <TIM_Base_SetConfig+0xb2>
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	4a2e      	ldr	r2, [pc, #184]	@ (8009b9c <TIM_Base_SetConfig+0x128>)
 8009ae2:	4293      	cmp	r3, r2
 8009ae4:	d01f      	beq.n	8009b26 <TIM_Base_SetConfig+0xb2>
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	4a2d      	ldr	r2, [pc, #180]	@ (8009ba0 <TIM_Base_SetConfig+0x12c>)
 8009aea:	4293      	cmp	r3, r2
 8009aec:	d01b      	beq.n	8009b26 <TIM_Base_SetConfig+0xb2>
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	4a2c      	ldr	r2, [pc, #176]	@ (8009ba4 <TIM_Base_SetConfig+0x130>)
 8009af2:	4293      	cmp	r3, r2
 8009af4:	d017      	beq.n	8009b26 <TIM_Base_SetConfig+0xb2>
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	4a2b      	ldr	r2, [pc, #172]	@ (8009ba8 <TIM_Base_SetConfig+0x134>)
 8009afa:	4293      	cmp	r3, r2
 8009afc:	d013      	beq.n	8009b26 <TIM_Base_SetConfig+0xb2>
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	4a2a      	ldr	r2, [pc, #168]	@ (8009bac <TIM_Base_SetConfig+0x138>)
 8009b02:	4293      	cmp	r3, r2
 8009b04:	d00f      	beq.n	8009b26 <TIM_Base_SetConfig+0xb2>
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	4a29      	ldr	r2, [pc, #164]	@ (8009bb0 <TIM_Base_SetConfig+0x13c>)
 8009b0a:	4293      	cmp	r3, r2
 8009b0c:	d00b      	beq.n	8009b26 <TIM_Base_SetConfig+0xb2>
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	4a28      	ldr	r2, [pc, #160]	@ (8009bb4 <TIM_Base_SetConfig+0x140>)
 8009b12:	4293      	cmp	r3, r2
 8009b14:	d007      	beq.n	8009b26 <TIM_Base_SetConfig+0xb2>
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	4a27      	ldr	r2, [pc, #156]	@ (8009bb8 <TIM_Base_SetConfig+0x144>)
 8009b1a:	4293      	cmp	r3, r2
 8009b1c:	d003      	beq.n	8009b26 <TIM_Base_SetConfig+0xb2>
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	4a26      	ldr	r2, [pc, #152]	@ (8009bbc <TIM_Base_SetConfig+0x148>)
 8009b22:	4293      	cmp	r3, r2
 8009b24:	d108      	bne.n	8009b38 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009b2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009b2e:	683b      	ldr	r3, [r7, #0]
 8009b30:	68db      	ldr	r3, [r3, #12]
 8009b32:	68fa      	ldr	r2, [r7, #12]
 8009b34:	4313      	orrs	r3, r2
 8009b36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009b3e:	683b      	ldr	r3, [r7, #0]
 8009b40:	695b      	ldr	r3, [r3, #20]
 8009b42:	4313      	orrs	r3, r2
 8009b44:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009b46:	683b      	ldr	r3, [r7, #0]
 8009b48:	689a      	ldr	r2, [r3, #8]
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009b4e:	683b      	ldr	r3, [r7, #0]
 8009b50:	681a      	ldr	r2, [r3, #0]
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	4a0e      	ldr	r2, [pc, #56]	@ (8009b94 <TIM_Base_SetConfig+0x120>)
 8009b5a:	4293      	cmp	r3, r2
 8009b5c:	d003      	beq.n	8009b66 <TIM_Base_SetConfig+0xf2>
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	4a10      	ldr	r2, [pc, #64]	@ (8009ba4 <TIM_Base_SetConfig+0x130>)
 8009b62:	4293      	cmp	r3, r2
 8009b64:	d103      	bne.n	8009b6e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009b66:	683b      	ldr	r3, [r7, #0]
 8009b68:	691a      	ldr	r2, [r3, #16]
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	f043 0204 	orr.w	r2, r3, #4
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	2201      	movs	r2, #1
 8009b7e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	68fa      	ldr	r2, [r7, #12]
 8009b84:	601a      	str	r2, [r3, #0]
}
 8009b86:	bf00      	nop
 8009b88:	3714      	adds	r7, #20
 8009b8a:	46bd      	mov	sp, r7
 8009b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b90:	4770      	bx	lr
 8009b92:	bf00      	nop
 8009b94:	40010000 	.word	0x40010000
 8009b98:	40000400 	.word	0x40000400
 8009b9c:	40000800 	.word	0x40000800
 8009ba0:	40000c00 	.word	0x40000c00
 8009ba4:	40010400 	.word	0x40010400
 8009ba8:	40014000 	.word	0x40014000
 8009bac:	40014400 	.word	0x40014400
 8009bb0:	40014800 	.word	0x40014800
 8009bb4:	40001800 	.word	0x40001800
 8009bb8:	40001c00 	.word	0x40001c00
 8009bbc:	40002000 	.word	0x40002000

08009bc0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009bc0:	b480      	push	{r7}
 8009bc2:	b087      	sub	sp, #28
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	6078      	str	r0, [r7, #4]
 8009bc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	6a1b      	ldr	r3, [r3, #32]
 8009bce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	6a1b      	ldr	r3, [r3, #32]
 8009bd4:	f023 0201 	bic.w	r2, r3, #1
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	685b      	ldr	r3, [r3, #4]
 8009be0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	699b      	ldr	r3, [r3, #24]
 8009be6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009bee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	f023 0303 	bic.w	r3, r3, #3
 8009bf6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009bf8:	683b      	ldr	r3, [r7, #0]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	68fa      	ldr	r2, [r7, #12]
 8009bfe:	4313      	orrs	r3, r2
 8009c00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009c02:	697b      	ldr	r3, [r7, #20]
 8009c04:	f023 0302 	bic.w	r3, r3, #2
 8009c08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009c0a:	683b      	ldr	r3, [r7, #0]
 8009c0c:	689b      	ldr	r3, [r3, #8]
 8009c0e:	697a      	ldr	r2, [r7, #20]
 8009c10:	4313      	orrs	r3, r2
 8009c12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	4a20      	ldr	r2, [pc, #128]	@ (8009c98 <TIM_OC1_SetConfig+0xd8>)
 8009c18:	4293      	cmp	r3, r2
 8009c1a:	d003      	beq.n	8009c24 <TIM_OC1_SetConfig+0x64>
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	4a1f      	ldr	r2, [pc, #124]	@ (8009c9c <TIM_OC1_SetConfig+0xdc>)
 8009c20:	4293      	cmp	r3, r2
 8009c22:	d10c      	bne.n	8009c3e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009c24:	697b      	ldr	r3, [r7, #20]
 8009c26:	f023 0308 	bic.w	r3, r3, #8
 8009c2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009c2c:	683b      	ldr	r3, [r7, #0]
 8009c2e:	68db      	ldr	r3, [r3, #12]
 8009c30:	697a      	ldr	r2, [r7, #20]
 8009c32:	4313      	orrs	r3, r2
 8009c34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009c36:	697b      	ldr	r3, [r7, #20]
 8009c38:	f023 0304 	bic.w	r3, r3, #4
 8009c3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	4a15      	ldr	r2, [pc, #84]	@ (8009c98 <TIM_OC1_SetConfig+0xd8>)
 8009c42:	4293      	cmp	r3, r2
 8009c44:	d003      	beq.n	8009c4e <TIM_OC1_SetConfig+0x8e>
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	4a14      	ldr	r2, [pc, #80]	@ (8009c9c <TIM_OC1_SetConfig+0xdc>)
 8009c4a:	4293      	cmp	r3, r2
 8009c4c:	d111      	bne.n	8009c72 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009c4e:	693b      	ldr	r3, [r7, #16]
 8009c50:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009c54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009c56:	693b      	ldr	r3, [r7, #16]
 8009c58:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009c5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009c5e:	683b      	ldr	r3, [r7, #0]
 8009c60:	695b      	ldr	r3, [r3, #20]
 8009c62:	693a      	ldr	r2, [r7, #16]
 8009c64:	4313      	orrs	r3, r2
 8009c66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009c68:	683b      	ldr	r3, [r7, #0]
 8009c6a:	699b      	ldr	r3, [r3, #24]
 8009c6c:	693a      	ldr	r2, [r7, #16]
 8009c6e:	4313      	orrs	r3, r2
 8009c70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	693a      	ldr	r2, [r7, #16]
 8009c76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	68fa      	ldr	r2, [r7, #12]
 8009c7c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009c7e:	683b      	ldr	r3, [r7, #0]
 8009c80:	685a      	ldr	r2, [r3, #4]
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	697a      	ldr	r2, [r7, #20]
 8009c8a:	621a      	str	r2, [r3, #32]
}
 8009c8c:	bf00      	nop
 8009c8e:	371c      	adds	r7, #28
 8009c90:	46bd      	mov	sp, r7
 8009c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c96:	4770      	bx	lr
 8009c98:	40010000 	.word	0x40010000
 8009c9c:	40010400 	.word	0x40010400

08009ca0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009ca0:	b480      	push	{r7}
 8009ca2:	b087      	sub	sp, #28
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	6078      	str	r0, [r7, #4]
 8009ca8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	6a1b      	ldr	r3, [r3, #32]
 8009cae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	6a1b      	ldr	r3, [r3, #32]
 8009cb4:	f023 0210 	bic.w	r2, r3, #16
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	685b      	ldr	r3, [r3, #4]
 8009cc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	699b      	ldr	r3, [r3, #24]
 8009cc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009cce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009cd6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009cd8:	683b      	ldr	r3, [r7, #0]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	021b      	lsls	r3, r3, #8
 8009cde:	68fa      	ldr	r2, [r7, #12]
 8009ce0:	4313      	orrs	r3, r2
 8009ce2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009ce4:	697b      	ldr	r3, [r7, #20]
 8009ce6:	f023 0320 	bic.w	r3, r3, #32
 8009cea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009cec:	683b      	ldr	r3, [r7, #0]
 8009cee:	689b      	ldr	r3, [r3, #8]
 8009cf0:	011b      	lsls	r3, r3, #4
 8009cf2:	697a      	ldr	r2, [r7, #20]
 8009cf4:	4313      	orrs	r3, r2
 8009cf6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	4a22      	ldr	r2, [pc, #136]	@ (8009d84 <TIM_OC2_SetConfig+0xe4>)
 8009cfc:	4293      	cmp	r3, r2
 8009cfe:	d003      	beq.n	8009d08 <TIM_OC2_SetConfig+0x68>
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	4a21      	ldr	r2, [pc, #132]	@ (8009d88 <TIM_OC2_SetConfig+0xe8>)
 8009d04:	4293      	cmp	r3, r2
 8009d06:	d10d      	bne.n	8009d24 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009d08:	697b      	ldr	r3, [r7, #20]
 8009d0a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009d0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009d10:	683b      	ldr	r3, [r7, #0]
 8009d12:	68db      	ldr	r3, [r3, #12]
 8009d14:	011b      	lsls	r3, r3, #4
 8009d16:	697a      	ldr	r2, [r7, #20]
 8009d18:	4313      	orrs	r3, r2
 8009d1a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009d1c:	697b      	ldr	r3, [r7, #20]
 8009d1e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009d22:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	4a17      	ldr	r2, [pc, #92]	@ (8009d84 <TIM_OC2_SetConfig+0xe4>)
 8009d28:	4293      	cmp	r3, r2
 8009d2a:	d003      	beq.n	8009d34 <TIM_OC2_SetConfig+0x94>
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	4a16      	ldr	r2, [pc, #88]	@ (8009d88 <TIM_OC2_SetConfig+0xe8>)
 8009d30:	4293      	cmp	r3, r2
 8009d32:	d113      	bne.n	8009d5c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009d34:	693b      	ldr	r3, [r7, #16]
 8009d36:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009d3a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009d3c:	693b      	ldr	r3, [r7, #16]
 8009d3e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009d42:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009d44:	683b      	ldr	r3, [r7, #0]
 8009d46:	695b      	ldr	r3, [r3, #20]
 8009d48:	009b      	lsls	r3, r3, #2
 8009d4a:	693a      	ldr	r2, [r7, #16]
 8009d4c:	4313      	orrs	r3, r2
 8009d4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009d50:	683b      	ldr	r3, [r7, #0]
 8009d52:	699b      	ldr	r3, [r3, #24]
 8009d54:	009b      	lsls	r3, r3, #2
 8009d56:	693a      	ldr	r2, [r7, #16]
 8009d58:	4313      	orrs	r3, r2
 8009d5a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	693a      	ldr	r2, [r7, #16]
 8009d60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	68fa      	ldr	r2, [r7, #12]
 8009d66:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009d68:	683b      	ldr	r3, [r7, #0]
 8009d6a:	685a      	ldr	r2, [r3, #4]
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	697a      	ldr	r2, [r7, #20]
 8009d74:	621a      	str	r2, [r3, #32]
}
 8009d76:	bf00      	nop
 8009d78:	371c      	adds	r7, #28
 8009d7a:	46bd      	mov	sp, r7
 8009d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d80:	4770      	bx	lr
 8009d82:	bf00      	nop
 8009d84:	40010000 	.word	0x40010000
 8009d88:	40010400 	.word	0x40010400

08009d8c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009d8c:	b480      	push	{r7}
 8009d8e:	b087      	sub	sp, #28
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	6078      	str	r0, [r7, #4]
 8009d94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	6a1b      	ldr	r3, [r3, #32]
 8009d9a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	6a1b      	ldr	r3, [r3, #32]
 8009da0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	685b      	ldr	r3, [r3, #4]
 8009dac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	69db      	ldr	r3, [r3, #28]
 8009db2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009dba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	f023 0303 	bic.w	r3, r3, #3
 8009dc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009dc4:	683b      	ldr	r3, [r7, #0]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	68fa      	ldr	r2, [r7, #12]
 8009dca:	4313      	orrs	r3, r2
 8009dcc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009dce:	697b      	ldr	r3, [r7, #20]
 8009dd0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009dd4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009dd6:	683b      	ldr	r3, [r7, #0]
 8009dd8:	689b      	ldr	r3, [r3, #8]
 8009dda:	021b      	lsls	r3, r3, #8
 8009ddc:	697a      	ldr	r2, [r7, #20]
 8009dde:	4313      	orrs	r3, r2
 8009de0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	4a21      	ldr	r2, [pc, #132]	@ (8009e6c <TIM_OC3_SetConfig+0xe0>)
 8009de6:	4293      	cmp	r3, r2
 8009de8:	d003      	beq.n	8009df2 <TIM_OC3_SetConfig+0x66>
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	4a20      	ldr	r2, [pc, #128]	@ (8009e70 <TIM_OC3_SetConfig+0xe4>)
 8009dee:	4293      	cmp	r3, r2
 8009df0:	d10d      	bne.n	8009e0e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009df2:	697b      	ldr	r3, [r7, #20]
 8009df4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009df8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009dfa:	683b      	ldr	r3, [r7, #0]
 8009dfc:	68db      	ldr	r3, [r3, #12]
 8009dfe:	021b      	lsls	r3, r3, #8
 8009e00:	697a      	ldr	r2, [r7, #20]
 8009e02:	4313      	orrs	r3, r2
 8009e04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009e06:	697b      	ldr	r3, [r7, #20]
 8009e08:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009e0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	4a16      	ldr	r2, [pc, #88]	@ (8009e6c <TIM_OC3_SetConfig+0xe0>)
 8009e12:	4293      	cmp	r3, r2
 8009e14:	d003      	beq.n	8009e1e <TIM_OC3_SetConfig+0x92>
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	4a15      	ldr	r2, [pc, #84]	@ (8009e70 <TIM_OC3_SetConfig+0xe4>)
 8009e1a:	4293      	cmp	r3, r2
 8009e1c:	d113      	bne.n	8009e46 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009e1e:	693b      	ldr	r3, [r7, #16]
 8009e20:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009e24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009e26:	693b      	ldr	r3, [r7, #16]
 8009e28:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009e2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009e2e:	683b      	ldr	r3, [r7, #0]
 8009e30:	695b      	ldr	r3, [r3, #20]
 8009e32:	011b      	lsls	r3, r3, #4
 8009e34:	693a      	ldr	r2, [r7, #16]
 8009e36:	4313      	orrs	r3, r2
 8009e38:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009e3a:	683b      	ldr	r3, [r7, #0]
 8009e3c:	699b      	ldr	r3, [r3, #24]
 8009e3e:	011b      	lsls	r3, r3, #4
 8009e40:	693a      	ldr	r2, [r7, #16]
 8009e42:	4313      	orrs	r3, r2
 8009e44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	693a      	ldr	r2, [r7, #16]
 8009e4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	68fa      	ldr	r2, [r7, #12]
 8009e50:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009e52:	683b      	ldr	r3, [r7, #0]
 8009e54:	685a      	ldr	r2, [r3, #4]
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	697a      	ldr	r2, [r7, #20]
 8009e5e:	621a      	str	r2, [r3, #32]
}
 8009e60:	bf00      	nop
 8009e62:	371c      	adds	r7, #28
 8009e64:	46bd      	mov	sp, r7
 8009e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e6a:	4770      	bx	lr
 8009e6c:	40010000 	.word	0x40010000
 8009e70:	40010400 	.word	0x40010400

08009e74 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009e74:	b480      	push	{r7}
 8009e76:	b087      	sub	sp, #28
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	6078      	str	r0, [r7, #4]
 8009e7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	6a1b      	ldr	r3, [r3, #32]
 8009e82:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	6a1b      	ldr	r3, [r3, #32]
 8009e88:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	685b      	ldr	r3, [r3, #4]
 8009e94:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	69db      	ldr	r3, [r3, #28]
 8009e9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009ea2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009eaa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009eac:	683b      	ldr	r3, [r7, #0]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	021b      	lsls	r3, r3, #8
 8009eb2:	68fa      	ldr	r2, [r7, #12]
 8009eb4:	4313      	orrs	r3, r2
 8009eb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009eb8:	693b      	ldr	r3, [r7, #16]
 8009eba:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009ebe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009ec0:	683b      	ldr	r3, [r7, #0]
 8009ec2:	689b      	ldr	r3, [r3, #8]
 8009ec4:	031b      	lsls	r3, r3, #12
 8009ec6:	693a      	ldr	r2, [r7, #16]
 8009ec8:	4313      	orrs	r3, r2
 8009eca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	4a12      	ldr	r2, [pc, #72]	@ (8009f18 <TIM_OC4_SetConfig+0xa4>)
 8009ed0:	4293      	cmp	r3, r2
 8009ed2:	d003      	beq.n	8009edc <TIM_OC4_SetConfig+0x68>
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	4a11      	ldr	r2, [pc, #68]	@ (8009f1c <TIM_OC4_SetConfig+0xa8>)
 8009ed8:	4293      	cmp	r3, r2
 8009eda:	d109      	bne.n	8009ef0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009edc:	697b      	ldr	r3, [r7, #20]
 8009ede:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009ee2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009ee4:	683b      	ldr	r3, [r7, #0]
 8009ee6:	695b      	ldr	r3, [r3, #20]
 8009ee8:	019b      	lsls	r3, r3, #6
 8009eea:	697a      	ldr	r2, [r7, #20]
 8009eec:	4313      	orrs	r3, r2
 8009eee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	697a      	ldr	r2, [r7, #20]
 8009ef4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	68fa      	ldr	r2, [r7, #12]
 8009efa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009efc:	683b      	ldr	r3, [r7, #0]
 8009efe:	685a      	ldr	r2, [r3, #4]
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	693a      	ldr	r2, [r7, #16]
 8009f08:	621a      	str	r2, [r3, #32]
}
 8009f0a:	bf00      	nop
 8009f0c:	371c      	adds	r7, #28
 8009f0e:	46bd      	mov	sp, r7
 8009f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f14:	4770      	bx	lr
 8009f16:	bf00      	nop
 8009f18:	40010000 	.word	0x40010000
 8009f1c:	40010400 	.word	0x40010400

08009f20 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8009f20:	b480      	push	{r7}
 8009f22:	b087      	sub	sp, #28
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	60f8      	str	r0, [r7, #12]
 8009f28:	60b9      	str	r1, [r7, #8]
 8009f2a:	607a      	str	r2, [r7, #4]
 8009f2c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	6a1b      	ldr	r3, [r3, #32]
 8009f32:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	6a1b      	ldr	r3, [r3, #32]
 8009f38:	f023 0201 	bic.w	r2, r3, #1
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	699b      	ldr	r3, [r3, #24]
 8009f44:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	4a28      	ldr	r2, [pc, #160]	@ (8009fec <TIM_TI1_SetConfig+0xcc>)
 8009f4a:	4293      	cmp	r3, r2
 8009f4c:	d01b      	beq.n	8009f86 <TIM_TI1_SetConfig+0x66>
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009f54:	d017      	beq.n	8009f86 <TIM_TI1_SetConfig+0x66>
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	4a25      	ldr	r2, [pc, #148]	@ (8009ff0 <TIM_TI1_SetConfig+0xd0>)
 8009f5a:	4293      	cmp	r3, r2
 8009f5c:	d013      	beq.n	8009f86 <TIM_TI1_SetConfig+0x66>
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	4a24      	ldr	r2, [pc, #144]	@ (8009ff4 <TIM_TI1_SetConfig+0xd4>)
 8009f62:	4293      	cmp	r3, r2
 8009f64:	d00f      	beq.n	8009f86 <TIM_TI1_SetConfig+0x66>
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	4a23      	ldr	r2, [pc, #140]	@ (8009ff8 <TIM_TI1_SetConfig+0xd8>)
 8009f6a:	4293      	cmp	r3, r2
 8009f6c:	d00b      	beq.n	8009f86 <TIM_TI1_SetConfig+0x66>
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	4a22      	ldr	r2, [pc, #136]	@ (8009ffc <TIM_TI1_SetConfig+0xdc>)
 8009f72:	4293      	cmp	r3, r2
 8009f74:	d007      	beq.n	8009f86 <TIM_TI1_SetConfig+0x66>
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	4a21      	ldr	r2, [pc, #132]	@ (800a000 <TIM_TI1_SetConfig+0xe0>)
 8009f7a:	4293      	cmp	r3, r2
 8009f7c:	d003      	beq.n	8009f86 <TIM_TI1_SetConfig+0x66>
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	4a20      	ldr	r2, [pc, #128]	@ (800a004 <TIM_TI1_SetConfig+0xe4>)
 8009f82:	4293      	cmp	r3, r2
 8009f84:	d101      	bne.n	8009f8a <TIM_TI1_SetConfig+0x6a>
 8009f86:	2301      	movs	r3, #1
 8009f88:	e000      	b.n	8009f8c <TIM_TI1_SetConfig+0x6c>
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d008      	beq.n	8009fa2 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8009f90:	697b      	ldr	r3, [r7, #20]
 8009f92:	f023 0303 	bic.w	r3, r3, #3
 8009f96:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8009f98:	697a      	ldr	r2, [r7, #20]
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	4313      	orrs	r3, r2
 8009f9e:	617b      	str	r3, [r7, #20]
 8009fa0:	e003      	b.n	8009faa <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8009fa2:	697b      	ldr	r3, [r7, #20]
 8009fa4:	f043 0301 	orr.w	r3, r3, #1
 8009fa8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009faa:	697b      	ldr	r3, [r7, #20]
 8009fac:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009fb0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8009fb2:	683b      	ldr	r3, [r7, #0]
 8009fb4:	011b      	lsls	r3, r3, #4
 8009fb6:	b2db      	uxtb	r3, r3
 8009fb8:	697a      	ldr	r2, [r7, #20]
 8009fba:	4313      	orrs	r3, r2
 8009fbc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009fbe:	693b      	ldr	r3, [r7, #16]
 8009fc0:	f023 030a 	bic.w	r3, r3, #10
 8009fc4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8009fc6:	68bb      	ldr	r3, [r7, #8]
 8009fc8:	f003 030a 	and.w	r3, r3, #10
 8009fcc:	693a      	ldr	r2, [r7, #16]
 8009fce:	4313      	orrs	r3, r2
 8009fd0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	697a      	ldr	r2, [r7, #20]
 8009fd6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	693a      	ldr	r2, [r7, #16]
 8009fdc:	621a      	str	r2, [r3, #32]
}
 8009fde:	bf00      	nop
 8009fe0:	371c      	adds	r7, #28
 8009fe2:	46bd      	mov	sp, r7
 8009fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe8:	4770      	bx	lr
 8009fea:	bf00      	nop
 8009fec:	40010000 	.word	0x40010000
 8009ff0:	40000400 	.word	0x40000400
 8009ff4:	40000800 	.word	0x40000800
 8009ff8:	40000c00 	.word	0x40000c00
 8009ffc:	40010400 	.word	0x40010400
 800a000:	40014000 	.word	0x40014000
 800a004:	40001800 	.word	0x40001800

0800a008 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a008:	b480      	push	{r7}
 800a00a:	b087      	sub	sp, #28
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	60f8      	str	r0, [r7, #12]
 800a010:	60b9      	str	r1, [r7, #8]
 800a012:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	6a1b      	ldr	r3, [r3, #32]
 800a018:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	6a1b      	ldr	r3, [r3, #32]
 800a01e:	f023 0201 	bic.w	r2, r3, #1
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	699b      	ldr	r3, [r3, #24]
 800a02a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a02c:	693b      	ldr	r3, [r7, #16]
 800a02e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a032:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	011b      	lsls	r3, r3, #4
 800a038:	693a      	ldr	r2, [r7, #16]
 800a03a:	4313      	orrs	r3, r2
 800a03c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a03e:	697b      	ldr	r3, [r7, #20]
 800a040:	f023 030a 	bic.w	r3, r3, #10
 800a044:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a046:	697a      	ldr	r2, [r7, #20]
 800a048:	68bb      	ldr	r3, [r7, #8]
 800a04a:	4313      	orrs	r3, r2
 800a04c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	693a      	ldr	r2, [r7, #16]
 800a052:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	697a      	ldr	r2, [r7, #20]
 800a058:	621a      	str	r2, [r3, #32]
}
 800a05a:	bf00      	nop
 800a05c:	371c      	adds	r7, #28
 800a05e:	46bd      	mov	sp, r7
 800a060:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a064:	4770      	bx	lr

0800a066 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a066:	b480      	push	{r7}
 800a068:	b087      	sub	sp, #28
 800a06a:	af00      	add	r7, sp, #0
 800a06c:	60f8      	str	r0, [r7, #12]
 800a06e:	60b9      	str	r1, [r7, #8]
 800a070:	607a      	str	r2, [r7, #4]
 800a072:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	6a1b      	ldr	r3, [r3, #32]
 800a078:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	6a1b      	ldr	r3, [r3, #32]
 800a07e:	f023 0210 	bic.w	r2, r3, #16
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	699b      	ldr	r3, [r3, #24]
 800a08a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800a08c:	693b      	ldr	r3, [r7, #16]
 800a08e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a092:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	021b      	lsls	r3, r3, #8
 800a098:	693a      	ldr	r2, [r7, #16]
 800a09a:	4313      	orrs	r3, r2
 800a09c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a09e:	693b      	ldr	r3, [r7, #16]
 800a0a0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a0a4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800a0a6:	683b      	ldr	r3, [r7, #0]
 800a0a8:	031b      	lsls	r3, r3, #12
 800a0aa:	b29b      	uxth	r3, r3
 800a0ac:	693a      	ldr	r2, [r7, #16]
 800a0ae:	4313      	orrs	r3, r2
 800a0b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a0b2:	697b      	ldr	r3, [r7, #20]
 800a0b4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a0b8:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800a0ba:	68bb      	ldr	r3, [r7, #8]
 800a0bc:	011b      	lsls	r3, r3, #4
 800a0be:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800a0c2:	697a      	ldr	r2, [r7, #20]
 800a0c4:	4313      	orrs	r3, r2
 800a0c6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	693a      	ldr	r2, [r7, #16]
 800a0cc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	697a      	ldr	r2, [r7, #20]
 800a0d2:	621a      	str	r2, [r3, #32]
}
 800a0d4:	bf00      	nop
 800a0d6:	371c      	adds	r7, #28
 800a0d8:	46bd      	mov	sp, r7
 800a0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0de:	4770      	bx	lr

0800a0e0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a0e0:	b480      	push	{r7}
 800a0e2:	b087      	sub	sp, #28
 800a0e4:	af00      	add	r7, sp, #0
 800a0e6:	60f8      	str	r0, [r7, #12]
 800a0e8:	60b9      	str	r1, [r7, #8]
 800a0ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	6a1b      	ldr	r3, [r3, #32]
 800a0f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	6a1b      	ldr	r3, [r3, #32]
 800a0f6:	f023 0210 	bic.w	r2, r3, #16
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	699b      	ldr	r3, [r3, #24]
 800a102:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a104:	693b      	ldr	r3, [r7, #16]
 800a106:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a10a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	031b      	lsls	r3, r3, #12
 800a110:	693a      	ldr	r2, [r7, #16]
 800a112:	4313      	orrs	r3, r2
 800a114:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a116:	697b      	ldr	r3, [r7, #20]
 800a118:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a11c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a11e:	68bb      	ldr	r3, [r7, #8]
 800a120:	011b      	lsls	r3, r3, #4
 800a122:	697a      	ldr	r2, [r7, #20]
 800a124:	4313      	orrs	r3, r2
 800a126:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	693a      	ldr	r2, [r7, #16]
 800a12c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	697a      	ldr	r2, [r7, #20]
 800a132:	621a      	str	r2, [r3, #32]
}
 800a134:	bf00      	nop
 800a136:	371c      	adds	r7, #28
 800a138:	46bd      	mov	sp, r7
 800a13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a13e:	4770      	bx	lr

0800a140 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a140:	b480      	push	{r7}
 800a142:	b087      	sub	sp, #28
 800a144:	af00      	add	r7, sp, #0
 800a146:	60f8      	str	r0, [r7, #12]
 800a148:	60b9      	str	r1, [r7, #8]
 800a14a:	607a      	str	r2, [r7, #4]
 800a14c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	6a1b      	ldr	r3, [r3, #32]
 800a152:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	6a1b      	ldr	r3, [r3, #32]
 800a158:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	69db      	ldr	r3, [r3, #28]
 800a164:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800a166:	693b      	ldr	r3, [r7, #16]
 800a168:	f023 0303 	bic.w	r3, r3, #3
 800a16c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800a16e:	693a      	ldr	r2, [r7, #16]
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	4313      	orrs	r3, r2
 800a174:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800a176:	693b      	ldr	r3, [r7, #16]
 800a178:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a17c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800a17e:	683b      	ldr	r3, [r7, #0]
 800a180:	011b      	lsls	r3, r3, #4
 800a182:	b2db      	uxtb	r3, r3
 800a184:	693a      	ldr	r2, [r7, #16]
 800a186:	4313      	orrs	r3, r2
 800a188:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800a18a:	697b      	ldr	r3, [r7, #20]
 800a18c:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 800a190:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800a192:	68bb      	ldr	r3, [r7, #8]
 800a194:	021b      	lsls	r3, r3, #8
 800a196:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 800a19a:	697a      	ldr	r2, [r7, #20]
 800a19c:	4313      	orrs	r3, r2
 800a19e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	693a      	ldr	r2, [r7, #16]
 800a1a4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	697a      	ldr	r2, [r7, #20]
 800a1aa:	621a      	str	r2, [r3, #32]
}
 800a1ac:	bf00      	nop
 800a1ae:	371c      	adds	r7, #28
 800a1b0:	46bd      	mov	sp, r7
 800a1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b6:	4770      	bx	lr

0800a1b8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a1b8:	b480      	push	{r7}
 800a1ba:	b087      	sub	sp, #28
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	60f8      	str	r0, [r7, #12]
 800a1c0:	60b9      	str	r1, [r7, #8]
 800a1c2:	607a      	str	r2, [r7, #4]
 800a1c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	6a1b      	ldr	r3, [r3, #32]
 800a1ca:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	6a1b      	ldr	r3, [r3, #32]
 800a1d0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	69db      	ldr	r3, [r3, #28]
 800a1dc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800a1de:	693b      	ldr	r3, [r7, #16]
 800a1e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a1e4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	021b      	lsls	r3, r3, #8
 800a1ea:	693a      	ldr	r2, [r7, #16]
 800a1ec:	4313      	orrs	r3, r2
 800a1ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800a1f0:	693b      	ldr	r3, [r7, #16]
 800a1f2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a1f6:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800a1f8:	683b      	ldr	r3, [r7, #0]
 800a1fa:	031b      	lsls	r3, r3, #12
 800a1fc:	b29b      	uxth	r3, r3
 800a1fe:	693a      	ldr	r2, [r7, #16]
 800a200:	4313      	orrs	r3, r2
 800a202:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800a204:	697b      	ldr	r3, [r7, #20]
 800a206:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800a20a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800a20c:	68bb      	ldr	r3, [r7, #8]
 800a20e:	031b      	lsls	r3, r3, #12
 800a210:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 800a214:	697a      	ldr	r2, [r7, #20]
 800a216:	4313      	orrs	r3, r2
 800a218:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	693a      	ldr	r2, [r7, #16]
 800a21e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	697a      	ldr	r2, [r7, #20]
 800a224:	621a      	str	r2, [r3, #32]
}
 800a226:	bf00      	nop
 800a228:	371c      	adds	r7, #28
 800a22a:	46bd      	mov	sp, r7
 800a22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a230:	4770      	bx	lr

0800a232 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a232:	b480      	push	{r7}
 800a234:	b085      	sub	sp, #20
 800a236:	af00      	add	r7, sp, #0
 800a238:	6078      	str	r0, [r7, #4]
 800a23a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	689b      	ldr	r3, [r3, #8]
 800a240:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a248:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a24a:	683a      	ldr	r2, [r7, #0]
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	4313      	orrs	r3, r2
 800a250:	f043 0307 	orr.w	r3, r3, #7
 800a254:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	68fa      	ldr	r2, [r7, #12]
 800a25a:	609a      	str	r2, [r3, #8]
}
 800a25c:	bf00      	nop
 800a25e:	3714      	adds	r7, #20
 800a260:	46bd      	mov	sp, r7
 800a262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a266:	4770      	bx	lr

0800a268 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a268:	b480      	push	{r7}
 800a26a:	b087      	sub	sp, #28
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	60f8      	str	r0, [r7, #12]
 800a270:	60b9      	str	r1, [r7, #8]
 800a272:	607a      	str	r2, [r7, #4]
 800a274:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	689b      	ldr	r3, [r3, #8]
 800a27a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a27c:	697b      	ldr	r3, [r7, #20]
 800a27e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a282:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a284:	683b      	ldr	r3, [r7, #0]
 800a286:	021a      	lsls	r2, r3, #8
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	431a      	orrs	r2, r3
 800a28c:	68bb      	ldr	r3, [r7, #8]
 800a28e:	4313      	orrs	r3, r2
 800a290:	697a      	ldr	r2, [r7, #20]
 800a292:	4313      	orrs	r3, r2
 800a294:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	697a      	ldr	r2, [r7, #20]
 800a29a:	609a      	str	r2, [r3, #8]
}
 800a29c:	bf00      	nop
 800a29e:	371c      	adds	r7, #28
 800a2a0:	46bd      	mov	sp, r7
 800a2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a6:	4770      	bx	lr

0800a2a8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a2a8:	b480      	push	{r7}
 800a2aa:	b087      	sub	sp, #28
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	60f8      	str	r0, [r7, #12]
 800a2b0:	60b9      	str	r1, [r7, #8]
 800a2b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a2b4:	68bb      	ldr	r3, [r7, #8]
 800a2b6:	f003 031f 	and.w	r3, r3, #31
 800a2ba:	2201      	movs	r2, #1
 800a2bc:	fa02 f303 	lsl.w	r3, r2, r3
 800a2c0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	6a1a      	ldr	r2, [r3, #32]
 800a2c6:	697b      	ldr	r3, [r7, #20]
 800a2c8:	43db      	mvns	r3, r3
 800a2ca:	401a      	ands	r2, r3
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	6a1a      	ldr	r2, [r3, #32]
 800a2d4:	68bb      	ldr	r3, [r7, #8]
 800a2d6:	f003 031f 	and.w	r3, r3, #31
 800a2da:	6879      	ldr	r1, [r7, #4]
 800a2dc:	fa01 f303 	lsl.w	r3, r1, r3
 800a2e0:	431a      	orrs	r2, r3
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	621a      	str	r2, [r3, #32]
}
 800a2e6:	bf00      	nop
 800a2e8:	371c      	adds	r7, #28
 800a2ea:	46bd      	mov	sp, r7
 800a2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f0:	4770      	bx	lr
	...

0800a2f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a2f4:	b480      	push	{r7}
 800a2f6:	b085      	sub	sp, #20
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	6078      	str	r0, [r7, #4]
 800a2fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a304:	2b01      	cmp	r3, #1
 800a306:	d101      	bne.n	800a30c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a308:	2302      	movs	r3, #2
 800a30a:	e05a      	b.n	800a3c2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	2201      	movs	r2, #1
 800a310:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	2202      	movs	r2, #2
 800a318:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	685b      	ldr	r3, [r3, #4]
 800a322:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	689b      	ldr	r3, [r3, #8]
 800a32a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a332:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a334:	683b      	ldr	r3, [r7, #0]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	68fa      	ldr	r2, [r7, #12]
 800a33a:	4313      	orrs	r3, r2
 800a33c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	68fa      	ldr	r2, [r7, #12]
 800a344:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	4a21      	ldr	r2, [pc, #132]	@ (800a3d0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800a34c:	4293      	cmp	r3, r2
 800a34e:	d022      	beq.n	800a396 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a358:	d01d      	beq.n	800a396 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	4a1d      	ldr	r2, [pc, #116]	@ (800a3d4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800a360:	4293      	cmp	r3, r2
 800a362:	d018      	beq.n	800a396 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	4a1b      	ldr	r2, [pc, #108]	@ (800a3d8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800a36a:	4293      	cmp	r3, r2
 800a36c:	d013      	beq.n	800a396 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	4a1a      	ldr	r2, [pc, #104]	@ (800a3dc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800a374:	4293      	cmp	r3, r2
 800a376:	d00e      	beq.n	800a396 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	4a18      	ldr	r2, [pc, #96]	@ (800a3e0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a37e:	4293      	cmp	r3, r2
 800a380:	d009      	beq.n	800a396 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	4a17      	ldr	r2, [pc, #92]	@ (800a3e4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a388:	4293      	cmp	r3, r2
 800a38a:	d004      	beq.n	800a396 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	4a15      	ldr	r2, [pc, #84]	@ (800a3e8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a392:	4293      	cmp	r3, r2
 800a394:	d10c      	bne.n	800a3b0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a396:	68bb      	ldr	r3, [r7, #8]
 800a398:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a39c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a39e:	683b      	ldr	r3, [r7, #0]
 800a3a0:	685b      	ldr	r3, [r3, #4]
 800a3a2:	68ba      	ldr	r2, [r7, #8]
 800a3a4:	4313      	orrs	r3, r2
 800a3a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	68ba      	ldr	r2, [r7, #8]
 800a3ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	2201      	movs	r2, #1
 800a3b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	2200      	movs	r2, #0
 800a3bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a3c0:	2300      	movs	r3, #0
}
 800a3c2:	4618      	mov	r0, r3
 800a3c4:	3714      	adds	r7, #20
 800a3c6:	46bd      	mov	sp, r7
 800a3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3cc:	4770      	bx	lr
 800a3ce:	bf00      	nop
 800a3d0:	40010000 	.word	0x40010000
 800a3d4:	40000400 	.word	0x40000400
 800a3d8:	40000800 	.word	0x40000800
 800a3dc:	40000c00 	.word	0x40000c00
 800a3e0:	40010400 	.word	0x40010400
 800a3e4:	40014000 	.word	0x40014000
 800a3e8:	40001800 	.word	0x40001800

0800a3ec <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a3ec:	b480      	push	{r7}
 800a3ee:	b085      	sub	sp, #20
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	6078      	str	r0, [r7, #4]
 800a3f4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a3f6:	2300      	movs	r3, #0
 800a3f8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a400:	2b01      	cmp	r3, #1
 800a402:	d101      	bne.n	800a408 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a404:	2302      	movs	r3, #2
 800a406:	e03d      	b.n	800a484 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	2201      	movs	r2, #1
 800a40c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800a416:	683b      	ldr	r3, [r7, #0]
 800a418:	68db      	ldr	r3, [r3, #12]
 800a41a:	4313      	orrs	r3, r2
 800a41c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800a424:	683b      	ldr	r3, [r7, #0]
 800a426:	689b      	ldr	r3, [r3, #8]
 800a428:	4313      	orrs	r3, r2
 800a42a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800a432:	683b      	ldr	r3, [r7, #0]
 800a434:	685b      	ldr	r3, [r3, #4]
 800a436:	4313      	orrs	r3, r2
 800a438:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800a440:	683b      	ldr	r3, [r7, #0]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	4313      	orrs	r3, r2
 800a446:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a44e:	683b      	ldr	r3, [r7, #0]
 800a450:	691b      	ldr	r3, [r3, #16]
 800a452:	4313      	orrs	r3, r2
 800a454:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800a45c:	683b      	ldr	r3, [r7, #0]
 800a45e:	695b      	ldr	r3, [r3, #20]
 800a460:	4313      	orrs	r3, r2
 800a462:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800a46a:	683b      	ldr	r3, [r7, #0]
 800a46c:	69db      	ldr	r3, [r3, #28]
 800a46e:	4313      	orrs	r3, r2
 800a470:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	68fa      	ldr	r2, [r7, #12]
 800a478:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	2200      	movs	r2, #0
 800a47e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a482:	2300      	movs	r3, #0
}
 800a484:	4618      	mov	r0, r3
 800a486:	3714      	adds	r7, #20
 800a488:	46bd      	mov	sp, r7
 800a48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a48e:	4770      	bx	lr

0800a490 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a490:	b480      	push	{r7}
 800a492:	b083      	sub	sp, #12
 800a494:	af00      	add	r7, sp, #0
 800a496:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a498:	bf00      	nop
 800a49a:	370c      	adds	r7, #12
 800a49c:	46bd      	mov	sp, r7
 800a49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a2:	4770      	bx	lr

0800a4a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a4a4:	b480      	push	{r7}
 800a4a6:	b083      	sub	sp, #12
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a4ac:	bf00      	nop
 800a4ae:	370c      	adds	r7, #12
 800a4b0:	46bd      	mov	sp, r7
 800a4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b6:	4770      	bx	lr

0800a4b8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a4b8:	b580      	push	{r7, lr}
 800a4ba:	b082      	sub	sp, #8
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d101      	bne.n	800a4ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a4c6:	2301      	movs	r3, #1
 800a4c8:	e042      	b.n	800a550 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a4d0:	b2db      	uxtb	r3, r3
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d106      	bne.n	800a4e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	2200      	movs	r2, #0
 800a4da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a4de:	6878      	ldr	r0, [r7, #4]
 800a4e0:	f7fa ffcc 	bl	800547c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	2224      	movs	r2, #36	@ 0x24
 800a4e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	68da      	ldr	r2, [r3, #12]
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a4fa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a4fc:	6878      	ldr	r0, [r7, #4]
 800a4fe:	f000 ff6f 	bl	800b3e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	691a      	ldr	r2, [r3, #16]
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a510:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	695a      	ldr	r2, [r3, #20]
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a520:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	68da      	ldr	r2, [r3, #12]
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a530:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	2200      	movs	r2, #0
 800a536:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	2220      	movs	r2, #32
 800a53c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	2220      	movs	r2, #32
 800a544:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	2200      	movs	r2, #0
 800a54c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800a54e:	2300      	movs	r3, #0
}
 800a550:	4618      	mov	r0, r3
 800a552:	3708      	adds	r7, #8
 800a554:	46bd      	mov	sp, r7
 800a556:	bd80      	pop	{r7, pc}

0800a558 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a558:	b580      	push	{r7, lr}
 800a55a:	b08a      	sub	sp, #40	@ 0x28
 800a55c:	af02      	add	r7, sp, #8
 800a55e:	60f8      	str	r0, [r7, #12]
 800a560:	60b9      	str	r1, [r7, #8]
 800a562:	603b      	str	r3, [r7, #0]
 800a564:	4613      	mov	r3, r2
 800a566:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800a568:	2300      	movs	r3, #0
 800a56a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a572:	b2db      	uxtb	r3, r3
 800a574:	2b20      	cmp	r3, #32
 800a576:	d175      	bne.n	800a664 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800a578:	68bb      	ldr	r3, [r7, #8]
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d002      	beq.n	800a584 <HAL_UART_Transmit+0x2c>
 800a57e:	88fb      	ldrh	r3, [r7, #6]
 800a580:	2b00      	cmp	r3, #0
 800a582:	d101      	bne.n	800a588 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800a584:	2301      	movs	r3, #1
 800a586:	e06e      	b.n	800a666 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	2200      	movs	r2, #0
 800a58c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	2221      	movs	r2, #33	@ 0x21
 800a592:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a596:	f7fb fa23 	bl	80059e0 <HAL_GetTick>
 800a59a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	88fa      	ldrh	r2, [r7, #6]
 800a5a0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	88fa      	ldrh	r2, [r7, #6]
 800a5a6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	689b      	ldr	r3, [r3, #8]
 800a5ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a5b0:	d108      	bne.n	800a5c4 <HAL_UART_Transmit+0x6c>
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	691b      	ldr	r3, [r3, #16]
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d104      	bne.n	800a5c4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800a5ba:	2300      	movs	r3, #0
 800a5bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a5be:	68bb      	ldr	r3, [r7, #8]
 800a5c0:	61bb      	str	r3, [r7, #24]
 800a5c2:	e003      	b.n	800a5cc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800a5c4:	68bb      	ldr	r3, [r7, #8]
 800a5c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a5c8:	2300      	movs	r3, #0
 800a5ca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a5cc:	e02e      	b.n	800a62c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a5ce:	683b      	ldr	r3, [r7, #0]
 800a5d0:	9300      	str	r3, [sp, #0]
 800a5d2:	697b      	ldr	r3, [r7, #20]
 800a5d4:	2200      	movs	r2, #0
 800a5d6:	2180      	movs	r1, #128	@ 0x80
 800a5d8:	68f8      	ldr	r0, [r7, #12]
 800a5da:	f000 fc3f 	bl	800ae5c <UART_WaitOnFlagUntilTimeout>
 800a5de:	4603      	mov	r3, r0
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d005      	beq.n	800a5f0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	2220      	movs	r2, #32
 800a5e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800a5ec:	2303      	movs	r3, #3
 800a5ee:	e03a      	b.n	800a666 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800a5f0:	69fb      	ldr	r3, [r7, #28]
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d10b      	bne.n	800a60e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a5f6:	69bb      	ldr	r3, [r7, #24]
 800a5f8:	881b      	ldrh	r3, [r3, #0]
 800a5fa:	461a      	mov	r2, r3
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a604:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800a606:	69bb      	ldr	r3, [r7, #24]
 800a608:	3302      	adds	r3, #2
 800a60a:	61bb      	str	r3, [r7, #24]
 800a60c:	e007      	b.n	800a61e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800a60e:	69fb      	ldr	r3, [r7, #28]
 800a610:	781a      	ldrb	r2, [r3, #0]
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800a618:	69fb      	ldr	r3, [r7, #28]
 800a61a:	3301      	adds	r3, #1
 800a61c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800a622:	b29b      	uxth	r3, r3
 800a624:	3b01      	subs	r3, #1
 800a626:	b29a      	uxth	r2, r3
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800a630:	b29b      	uxth	r3, r3
 800a632:	2b00      	cmp	r3, #0
 800a634:	d1cb      	bne.n	800a5ce <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a636:	683b      	ldr	r3, [r7, #0]
 800a638:	9300      	str	r3, [sp, #0]
 800a63a:	697b      	ldr	r3, [r7, #20]
 800a63c:	2200      	movs	r2, #0
 800a63e:	2140      	movs	r1, #64	@ 0x40
 800a640:	68f8      	ldr	r0, [r7, #12]
 800a642:	f000 fc0b 	bl	800ae5c <UART_WaitOnFlagUntilTimeout>
 800a646:	4603      	mov	r3, r0
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d005      	beq.n	800a658 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	2220      	movs	r2, #32
 800a650:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800a654:	2303      	movs	r3, #3
 800a656:	e006      	b.n	800a666 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	2220      	movs	r2, #32
 800a65c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800a660:	2300      	movs	r3, #0
 800a662:	e000      	b.n	800a666 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800a664:	2302      	movs	r3, #2
  }
}
 800a666:	4618      	mov	r0, r3
 800a668:	3720      	adds	r7, #32
 800a66a:	46bd      	mov	sp, r7
 800a66c:	bd80      	pop	{r7, pc}

0800a66e <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a66e:	b580      	push	{r7, lr}
 800a670:	b084      	sub	sp, #16
 800a672:	af00      	add	r7, sp, #0
 800a674:	60f8      	str	r0, [r7, #12]
 800a676:	60b9      	str	r1, [r7, #8]
 800a678:	4613      	mov	r3, r2
 800a67a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a682:	b2db      	uxtb	r3, r3
 800a684:	2b20      	cmp	r3, #32
 800a686:	d112      	bne.n	800a6ae <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800a688:	68bb      	ldr	r3, [r7, #8]
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d002      	beq.n	800a694 <HAL_UART_Receive_DMA+0x26>
 800a68e:	88fb      	ldrh	r3, [r7, #6]
 800a690:	2b00      	cmp	r3, #0
 800a692:	d101      	bne.n	800a698 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800a694:	2301      	movs	r3, #1
 800a696:	e00b      	b.n	800a6b0 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	2200      	movs	r2, #0
 800a69c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800a69e:	88fb      	ldrh	r3, [r7, #6]
 800a6a0:	461a      	mov	r2, r3
 800a6a2:	68b9      	ldr	r1, [r7, #8]
 800a6a4:	68f8      	ldr	r0, [r7, #12]
 800a6a6:	f000 fc33 	bl	800af10 <UART_Start_Receive_DMA>
 800a6aa:	4603      	mov	r3, r0
 800a6ac:	e000      	b.n	800a6b0 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 800a6ae:	2302      	movs	r3, #2
  }
}
 800a6b0:	4618      	mov	r0, r3
 800a6b2:	3710      	adds	r7, #16
 800a6b4:	46bd      	mov	sp, r7
 800a6b6:	bd80      	pop	{r7, pc}

0800a6b8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a6b8:	b580      	push	{r7, lr}
 800a6ba:	b0ba      	sub	sp, #232	@ 0xe8
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	68db      	ldr	r3, [r3, #12]
 800a6d0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	695b      	ldr	r3, [r3, #20]
 800a6da:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800a6de:	2300      	movs	r3, #0
 800a6e0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800a6e4:	2300      	movs	r3, #0
 800a6e6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a6ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a6ee:	f003 030f 	and.w	r3, r3, #15
 800a6f2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800a6f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d10f      	bne.n	800a71e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a6fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a702:	f003 0320 	and.w	r3, r3, #32
 800a706:	2b00      	cmp	r3, #0
 800a708:	d009      	beq.n	800a71e <HAL_UART_IRQHandler+0x66>
 800a70a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a70e:	f003 0320 	and.w	r3, r3, #32
 800a712:	2b00      	cmp	r3, #0
 800a714:	d003      	beq.n	800a71e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800a716:	6878      	ldr	r0, [r7, #4]
 800a718:	f000 fda4 	bl	800b264 <UART_Receive_IT>
      return;
 800a71c:	e273      	b.n	800ac06 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800a71e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a722:	2b00      	cmp	r3, #0
 800a724:	f000 80de 	beq.w	800a8e4 <HAL_UART_IRQHandler+0x22c>
 800a728:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a72c:	f003 0301 	and.w	r3, r3, #1
 800a730:	2b00      	cmp	r3, #0
 800a732:	d106      	bne.n	800a742 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a734:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a738:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	f000 80d1 	beq.w	800a8e4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a742:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a746:	f003 0301 	and.w	r3, r3, #1
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d00b      	beq.n	800a766 <HAL_UART_IRQHandler+0xae>
 800a74e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a752:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a756:	2b00      	cmp	r3, #0
 800a758:	d005      	beq.n	800a766 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a75e:	f043 0201 	orr.w	r2, r3, #1
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a766:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a76a:	f003 0304 	and.w	r3, r3, #4
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d00b      	beq.n	800a78a <HAL_UART_IRQHandler+0xd2>
 800a772:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a776:	f003 0301 	and.w	r3, r3, #1
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d005      	beq.n	800a78a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a782:	f043 0202 	orr.w	r2, r3, #2
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a78a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a78e:	f003 0302 	and.w	r3, r3, #2
 800a792:	2b00      	cmp	r3, #0
 800a794:	d00b      	beq.n	800a7ae <HAL_UART_IRQHandler+0xf6>
 800a796:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a79a:	f003 0301 	and.w	r3, r3, #1
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d005      	beq.n	800a7ae <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a7a6:	f043 0204 	orr.w	r2, r3, #4
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800a7ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a7b2:	f003 0308 	and.w	r3, r3, #8
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d011      	beq.n	800a7de <HAL_UART_IRQHandler+0x126>
 800a7ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a7be:	f003 0320 	and.w	r3, r3, #32
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d105      	bne.n	800a7d2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800a7c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a7ca:	f003 0301 	and.w	r3, r3, #1
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d005      	beq.n	800a7de <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a7d6:	f043 0208 	orr.w	r2, r3, #8
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	f000 820a 	beq.w	800abfc <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a7e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a7ec:	f003 0320 	and.w	r3, r3, #32
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d008      	beq.n	800a806 <HAL_UART_IRQHandler+0x14e>
 800a7f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a7f8:	f003 0320 	and.w	r3, r3, #32
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d002      	beq.n	800a806 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800a800:	6878      	ldr	r0, [r7, #4]
 800a802:	f000 fd2f 	bl	800b264 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	695b      	ldr	r3, [r3, #20]
 800a80c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a810:	2b40      	cmp	r3, #64	@ 0x40
 800a812:	bf0c      	ite	eq
 800a814:	2301      	moveq	r3, #1
 800a816:	2300      	movne	r3, #0
 800a818:	b2db      	uxtb	r3, r3
 800a81a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a822:	f003 0308 	and.w	r3, r3, #8
 800a826:	2b00      	cmp	r3, #0
 800a828:	d103      	bne.n	800a832 <HAL_UART_IRQHandler+0x17a>
 800a82a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d04f      	beq.n	800a8d2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a832:	6878      	ldr	r0, [r7, #4]
 800a834:	f000 fc3a 	bl	800b0ac <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	695b      	ldr	r3, [r3, #20]
 800a83e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a842:	2b40      	cmp	r3, #64	@ 0x40
 800a844:	d141      	bne.n	800a8ca <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	3314      	adds	r3, #20
 800a84c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a850:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a854:	e853 3f00 	ldrex	r3, [r3]
 800a858:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800a85c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a860:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a864:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	3314      	adds	r3, #20
 800a86e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800a872:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800a876:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a87a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800a87e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800a882:	e841 2300 	strex	r3, r2, [r1]
 800a886:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800a88a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d1d9      	bne.n	800a846 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a896:	2b00      	cmp	r3, #0
 800a898:	d013      	beq.n	800a8c2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a89e:	4a8a      	ldr	r2, [pc, #552]	@ (800aac8 <HAL_UART_IRQHandler+0x410>)
 800a8a0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a8a6:	4618      	mov	r0, r3
 800a8a8:	f7fb ff22 	bl	80066f0 <HAL_DMA_Abort_IT>
 800a8ac:	4603      	mov	r3, r0
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d016      	beq.n	800a8e0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a8b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a8b8:	687a      	ldr	r2, [r7, #4]
 800a8ba:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800a8bc:	4610      	mov	r0, r2
 800a8be:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a8c0:	e00e      	b.n	800a8e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a8c2:	6878      	ldr	r0, [r7, #4]
 800a8c4:	f000 f9b6 	bl	800ac34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a8c8:	e00a      	b.n	800a8e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a8ca:	6878      	ldr	r0, [r7, #4]
 800a8cc:	f000 f9b2 	bl	800ac34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a8d0:	e006      	b.n	800a8e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a8d2:	6878      	ldr	r0, [r7, #4]
 800a8d4:	f000 f9ae 	bl	800ac34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	2200      	movs	r2, #0
 800a8dc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800a8de:	e18d      	b.n	800abfc <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a8e0:	bf00      	nop
    return;
 800a8e2:	e18b      	b.n	800abfc <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a8e8:	2b01      	cmp	r3, #1
 800a8ea:	f040 8167 	bne.w	800abbc <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800a8ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a8f2:	f003 0310 	and.w	r3, r3, #16
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	f000 8160 	beq.w	800abbc <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 800a8fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a900:	f003 0310 	and.w	r3, r3, #16
 800a904:	2b00      	cmp	r3, #0
 800a906:	f000 8159 	beq.w	800abbc <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a90a:	2300      	movs	r3, #0
 800a90c:	60bb      	str	r3, [r7, #8]
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	60bb      	str	r3, [r7, #8]
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	685b      	ldr	r3, [r3, #4]
 800a91c:	60bb      	str	r3, [r7, #8]
 800a91e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	695b      	ldr	r3, [r3, #20]
 800a926:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a92a:	2b40      	cmp	r3, #64	@ 0x40
 800a92c:	f040 80ce 	bne.w	800aacc <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	685b      	ldr	r3, [r3, #4]
 800a938:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a93c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800a940:	2b00      	cmp	r3, #0
 800a942:	f000 80a9 	beq.w	800aa98 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a94a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a94e:	429a      	cmp	r2, r3
 800a950:	f080 80a2 	bcs.w	800aa98 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a95a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a960:	69db      	ldr	r3, [r3, #28]
 800a962:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a966:	f000 8088 	beq.w	800aa7a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	330c      	adds	r3, #12
 800a970:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a974:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a978:	e853 3f00 	ldrex	r3, [r3]
 800a97c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800a980:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a984:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a988:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	330c      	adds	r3, #12
 800a992:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800a996:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800a99a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a99e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800a9a2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a9a6:	e841 2300 	strex	r3, r2, [r1]
 800a9aa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800a9ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d1d9      	bne.n	800a96a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	3314      	adds	r3, #20
 800a9bc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9be:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a9c0:	e853 3f00 	ldrex	r3, [r3]
 800a9c4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800a9c6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a9c8:	f023 0301 	bic.w	r3, r3, #1
 800a9cc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	3314      	adds	r3, #20
 800a9d6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800a9da:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800a9de:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9e0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800a9e2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a9e6:	e841 2300 	strex	r3, r2, [r1]
 800a9ea:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800a9ec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d1e1      	bne.n	800a9b6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	3314      	adds	r3, #20
 800a9f8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9fa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a9fc:	e853 3f00 	ldrex	r3, [r3]
 800aa00:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800aa02:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800aa04:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800aa08:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	3314      	adds	r3, #20
 800aa12:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800aa16:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800aa18:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa1a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800aa1c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800aa1e:	e841 2300 	strex	r3, r2, [r1]
 800aa22:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800aa24:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d1e3      	bne.n	800a9f2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	2220      	movs	r2, #32
 800aa2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	2200      	movs	r2, #0
 800aa36:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	330c      	adds	r3, #12
 800aa3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa40:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aa42:	e853 3f00 	ldrex	r3, [r3]
 800aa46:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800aa48:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800aa4a:	f023 0310 	bic.w	r3, r3, #16
 800aa4e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	330c      	adds	r3, #12
 800aa58:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800aa5c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800aa5e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa60:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800aa62:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800aa64:	e841 2300 	strex	r3, r2, [r1]
 800aa68:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800aa6a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d1e3      	bne.n	800aa38 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aa74:	4618      	mov	r0, r3
 800aa76:	f7fb fdcb 	bl	8006610 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	2202      	movs	r2, #2
 800aa7e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800aa88:	b29b      	uxth	r3, r3
 800aa8a:	1ad3      	subs	r3, r2, r3
 800aa8c:	b29b      	uxth	r3, r3
 800aa8e:	4619      	mov	r1, r3
 800aa90:	6878      	ldr	r0, [r7, #4]
 800aa92:	f000 f8d9 	bl	800ac48 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800aa96:	e0b3      	b.n	800ac00 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800aa9c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800aaa0:	429a      	cmp	r2, r3
 800aaa2:	f040 80ad 	bne.w	800ac00 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aaaa:	69db      	ldr	r3, [r3, #28]
 800aaac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aab0:	f040 80a6 	bne.w	800ac00 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	2202      	movs	r2, #2
 800aab8:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800aabe:	4619      	mov	r1, r3
 800aac0:	6878      	ldr	r0, [r7, #4]
 800aac2:	f000 f8c1 	bl	800ac48 <HAL_UARTEx_RxEventCallback>
      return;
 800aac6:	e09b      	b.n	800ac00 <HAL_UART_IRQHandler+0x548>
 800aac8:	0800b173 	.word	0x0800b173
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800aad4:	b29b      	uxth	r3, r3
 800aad6:	1ad3      	subs	r3, r2, r3
 800aad8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800aae0:	b29b      	uxth	r3, r3
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	f000 808e 	beq.w	800ac04 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 800aae8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	f000 8089 	beq.w	800ac04 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	330c      	adds	r3, #12
 800aaf8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aafa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aafc:	e853 3f00 	ldrex	r3, [r3]
 800ab00:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ab02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab04:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ab08:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	330c      	adds	r3, #12
 800ab12:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800ab16:	647a      	str	r2, [r7, #68]	@ 0x44
 800ab18:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab1a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ab1c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ab1e:	e841 2300 	strex	r3, r2, [r1]
 800ab22:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ab24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d1e3      	bne.n	800aaf2 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	3314      	adds	r3, #20
 800ab30:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab34:	e853 3f00 	ldrex	r3, [r3]
 800ab38:	623b      	str	r3, [r7, #32]
   return(result);
 800ab3a:	6a3b      	ldr	r3, [r7, #32]
 800ab3c:	f023 0301 	bic.w	r3, r3, #1
 800ab40:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	3314      	adds	r3, #20
 800ab4a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800ab4e:	633a      	str	r2, [r7, #48]	@ 0x30
 800ab50:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab52:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ab54:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ab56:	e841 2300 	strex	r3, r2, [r1]
 800ab5a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ab5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d1e3      	bne.n	800ab2a <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	2220      	movs	r2, #32
 800ab66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	2200      	movs	r2, #0
 800ab6e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	330c      	adds	r3, #12
 800ab76:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab78:	693b      	ldr	r3, [r7, #16]
 800ab7a:	e853 3f00 	ldrex	r3, [r3]
 800ab7e:	60fb      	str	r3, [r7, #12]
   return(result);
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	f023 0310 	bic.w	r3, r3, #16
 800ab86:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	330c      	adds	r3, #12
 800ab90:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800ab94:	61fa      	str	r2, [r7, #28]
 800ab96:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab98:	69b9      	ldr	r1, [r7, #24]
 800ab9a:	69fa      	ldr	r2, [r7, #28]
 800ab9c:	e841 2300 	strex	r3, r2, [r1]
 800aba0:	617b      	str	r3, [r7, #20]
   return(result);
 800aba2:	697b      	ldr	r3, [r7, #20]
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d1e3      	bne.n	800ab70 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	2202      	movs	r2, #2
 800abac:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800abae:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800abb2:	4619      	mov	r1, r3
 800abb4:	6878      	ldr	r0, [r7, #4]
 800abb6:	f000 f847 	bl	800ac48 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800abba:	e023      	b.n	800ac04 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800abbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800abc0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d009      	beq.n	800abdc <HAL_UART_IRQHandler+0x524>
 800abc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800abcc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d003      	beq.n	800abdc <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 800abd4:	6878      	ldr	r0, [r7, #4]
 800abd6:	f000 fadd 	bl	800b194 <UART_Transmit_IT>
    return;
 800abda:	e014      	b.n	800ac06 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800abdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800abe0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d00e      	beq.n	800ac06 <HAL_UART_IRQHandler+0x54e>
 800abe8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800abec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d008      	beq.n	800ac06 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 800abf4:	6878      	ldr	r0, [r7, #4]
 800abf6:	f000 fb1d 	bl	800b234 <UART_EndTransmit_IT>
    return;
 800abfa:	e004      	b.n	800ac06 <HAL_UART_IRQHandler+0x54e>
    return;
 800abfc:	bf00      	nop
 800abfe:	e002      	b.n	800ac06 <HAL_UART_IRQHandler+0x54e>
      return;
 800ac00:	bf00      	nop
 800ac02:	e000      	b.n	800ac06 <HAL_UART_IRQHandler+0x54e>
      return;
 800ac04:	bf00      	nop
  }
}
 800ac06:	37e8      	adds	r7, #232	@ 0xe8
 800ac08:	46bd      	mov	sp, r7
 800ac0a:	bd80      	pop	{r7, pc}

0800ac0c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ac0c:	b480      	push	{r7}
 800ac0e:	b083      	sub	sp, #12
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800ac14:	bf00      	nop
 800ac16:	370c      	adds	r7, #12
 800ac18:	46bd      	mov	sp, r7
 800ac1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac1e:	4770      	bx	lr

0800ac20 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800ac20:	b480      	push	{r7}
 800ac22:	b083      	sub	sp, #12
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800ac28:	bf00      	nop
 800ac2a:	370c      	adds	r7, #12
 800ac2c:	46bd      	mov	sp, r7
 800ac2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac32:	4770      	bx	lr

0800ac34 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ac34:	b480      	push	{r7}
 800ac36:	b083      	sub	sp, #12
 800ac38:	af00      	add	r7, sp, #0
 800ac3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800ac3c:	bf00      	nop
 800ac3e:	370c      	adds	r7, #12
 800ac40:	46bd      	mov	sp, r7
 800ac42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac46:	4770      	bx	lr

0800ac48 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ac48:	b480      	push	{r7}
 800ac4a:	b083      	sub	sp, #12
 800ac4c:	af00      	add	r7, sp, #0
 800ac4e:	6078      	str	r0, [r7, #4]
 800ac50:	460b      	mov	r3, r1
 800ac52:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ac54:	bf00      	nop
 800ac56:	370c      	adds	r7, #12
 800ac58:	46bd      	mov	sp, r7
 800ac5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac5e:	4770      	bx	lr

0800ac60 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ac60:	b580      	push	{r7, lr}
 800ac62:	b09c      	sub	sp, #112	@ 0x70
 800ac64:	af00      	add	r7, sp, #0
 800ac66:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac6c:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d172      	bne.n	800ad62 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800ac7c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ac7e:	2200      	movs	r2, #0
 800ac80:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ac82:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	330c      	adds	r3, #12
 800ac88:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac8a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ac8c:	e853 3f00 	ldrex	r3, [r3]
 800ac90:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800ac92:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ac94:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ac98:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ac9a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	330c      	adds	r3, #12
 800aca0:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800aca2:	65ba      	str	r2, [r7, #88]	@ 0x58
 800aca4:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aca6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800aca8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800acaa:	e841 2300 	strex	r3, r2, [r1]
 800acae:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800acb0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d1e5      	bne.n	800ac82 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800acb6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	3314      	adds	r3, #20
 800acbc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acc0:	e853 3f00 	ldrex	r3, [r3]
 800acc4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800acc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800acc8:	f023 0301 	bic.w	r3, r3, #1
 800accc:	667b      	str	r3, [r7, #100]	@ 0x64
 800acce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	3314      	adds	r3, #20
 800acd4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800acd6:	647a      	str	r2, [r7, #68]	@ 0x44
 800acd8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acda:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800acdc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800acde:	e841 2300 	strex	r3, r2, [r1]
 800ace2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ace4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d1e5      	bne.n	800acb6 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800acea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	3314      	adds	r3, #20
 800acf0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acf4:	e853 3f00 	ldrex	r3, [r3]
 800acf8:	623b      	str	r3, [r7, #32]
   return(result);
 800acfa:	6a3b      	ldr	r3, [r7, #32]
 800acfc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ad00:	663b      	str	r3, [r7, #96]	@ 0x60
 800ad02:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	3314      	adds	r3, #20
 800ad08:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800ad0a:	633a      	str	r2, [r7, #48]	@ 0x30
 800ad0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad0e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ad10:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ad12:	e841 2300 	strex	r3, r2, [r1]
 800ad16:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ad18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d1e5      	bne.n	800acea <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ad1e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ad20:	2220      	movs	r2, #32
 800ad22:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ad26:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ad28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad2a:	2b01      	cmp	r3, #1
 800ad2c:	d119      	bne.n	800ad62 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ad2e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	330c      	adds	r3, #12
 800ad34:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad36:	693b      	ldr	r3, [r7, #16]
 800ad38:	e853 3f00 	ldrex	r3, [r3]
 800ad3c:	60fb      	str	r3, [r7, #12]
   return(result);
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	f023 0310 	bic.w	r3, r3, #16
 800ad44:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ad46:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	330c      	adds	r3, #12
 800ad4c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800ad4e:	61fa      	str	r2, [r7, #28]
 800ad50:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad52:	69b9      	ldr	r1, [r7, #24]
 800ad54:	69fa      	ldr	r2, [r7, #28]
 800ad56:	e841 2300 	strex	r3, r2, [r1]
 800ad5a:	617b      	str	r3, [r7, #20]
   return(result);
 800ad5c:	697b      	ldr	r3, [r7, #20]
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d1e5      	bne.n	800ad2e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ad62:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ad64:	2200      	movs	r2, #0
 800ad66:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ad68:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ad6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad6c:	2b01      	cmp	r3, #1
 800ad6e:	d106      	bne.n	800ad7e <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ad70:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ad72:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800ad74:	4619      	mov	r1, r3
 800ad76:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800ad78:	f7ff ff66 	bl	800ac48 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ad7c:	e002      	b.n	800ad84 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800ad7e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800ad80:	f7f7 feb4 	bl	8002aec <HAL_UART_RxCpltCallback>
}
 800ad84:	bf00      	nop
 800ad86:	3770      	adds	r7, #112	@ 0x70
 800ad88:	46bd      	mov	sp, r7
 800ad8a:	bd80      	pop	{r7, pc}

0800ad8c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ad8c:	b580      	push	{r7, lr}
 800ad8e:	b084      	sub	sp, #16
 800ad90:	af00      	add	r7, sp, #0
 800ad92:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad98:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	2201      	movs	r2, #1
 800ad9e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ada4:	2b01      	cmp	r3, #1
 800ada6:	d108      	bne.n	800adba <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800adac:	085b      	lsrs	r3, r3, #1
 800adae:	b29b      	uxth	r3, r3
 800adb0:	4619      	mov	r1, r3
 800adb2:	68f8      	ldr	r0, [r7, #12]
 800adb4:	f7ff ff48 	bl	800ac48 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800adb8:	e002      	b.n	800adc0 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800adba:	68f8      	ldr	r0, [r7, #12]
 800adbc:	f7ff ff30 	bl	800ac20 <HAL_UART_RxHalfCpltCallback>
}
 800adc0:	bf00      	nop
 800adc2:	3710      	adds	r7, #16
 800adc4:	46bd      	mov	sp, r7
 800adc6:	bd80      	pop	{r7, pc}

0800adc8 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800adc8:	b580      	push	{r7, lr}
 800adca:	b084      	sub	sp, #16
 800adcc:	af00      	add	r7, sp, #0
 800adce:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800add0:	2300      	movs	r3, #0
 800add2:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800add8:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800adda:	68bb      	ldr	r3, [r7, #8]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	695b      	ldr	r3, [r3, #20]
 800ade0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ade4:	2b80      	cmp	r3, #128	@ 0x80
 800ade6:	bf0c      	ite	eq
 800ade8:	2301      	moveq	r3, #1
 800adea:	2300      	movne	r3, #0
 800adec:	b2db      	uxtb	r3, r3
 800adee:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800adf0:	68bb      	ldr	r3, [r7, #8]
 800adf2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800adf6:	b2db      	uxtb	r3, r3
 800adf8:	2b21      	cmp	r3, #33	@ 0x21
 800adfa:	d108      	bne.n	800ae0e <UART_DMAError+0x46>
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d005      	beq.n	800ae0e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800ae02:	68bb      	ldr	r3, [r7, #8]
 800ae04:	2200      	movs	r2, #0
 800ae06:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800ae08:	68b8      	ldr	r0, [r7, #8]
 800ae0a:	f000 f927 	bl	800b05c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800ae0e:	68bb      	ldr	r3, [r7, #8]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	695b      	ldr	r3, [r3, #20]
 800ae14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ae18:	2b40      	cmp	r3, #64	@ 0x40
 800ae1a:	bf0c      	ite	eq
 800ae1c:	2301      	moveq	r3, #1
 800ae1e:	2300      	movne	r3, #0
 800ae20:	b2db      	uxtb	r3, r3
 800ae22:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800ae24:	68bb      	ldr	r3, [r7, #8]
 800ae26:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ae2a:	b2db      	uxtb	r3, r3
 800ae2c:	2b22      	cmp	r3, #34	@ 0x22
 800ae2e:	d108      	bne.n	800ae42 <UART_DMAError+0x7a>
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d005      	beq.n	800ae42 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800ae36:	68bb      	ldr	r3, [r7, #8]
 800ae38:	2200      	movs	r2, #0
 800ae3a:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800ae3c:	68b8      	ldr	r0, [r7, #8]
 800ae3e:	f000 f935 	bl	800b0ac <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800ae42:	68bb      	ldr	r3, [r7, #8]
 800ae44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ae46:	f043 0210 	orr.w	r2, r3, #16
 800ae4a:	68bb      	ldr	r3, [r7, #8]
 800ae4c:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ae4e:	68b8      	ldr	r0, [r7, #8]
 800ae50:	f7ff fef0 	bl	800ac34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ae54:	bf00      	nop
 800ae56:	3710      	adds	r7, #16
 800ae58:	46bd      	mov	sp, r7
 800ae5a:	bd80      	pop	{r7, pc}

0800ae5c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800ae5c:	b580      	push	{r7, lr}
 800ae5e:	b086      	sub	sp, #24
 800ae60:	af00      	add	r7, sp, #0
 800ae62:	60f8      	str	r0, [r7, #12]
 800ae64:	60b9      	str	r1, [r7, #8]
 800ae66:	603b      	str	r3, [r7, #0]
 800ae68:	4613      	mov	r3, r2
 800ae6a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ae6c:	e03b      	b.n	800aee6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ae6e:	6a3b      	ldr	r3, [r7, #32]
 800ae70:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae74:	d037      	beq.n	800aee6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ae76:	f7fa fdb3 	bl	80059e0 <HAL_GetTick>
 800ae7a:	4602      	mov	r2, r0
 800ae7c:	683b      	ldr	r3, [r7, #0]
 800ae7e:	1ad3      	subs	r3, r2, r3
 800ae80:	6a3a      	ldr	r2, [r7, #32]
 800ae82:	429a      	cmp	r2, r3
 800ae84:	d302      	bcc.n	800ae8c <UART_WaitOnFlagUntilTimeout+0x30>
 800ae86:	6a3b      	ldr	r3, [r7, #32]
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d101      	bne.n	800ae90 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ae8c:	2303      	movs	r3, #3
 800ae8e:	e03a      	b.n	800af06 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	68db      	ldr	r3, [r3, #12]
 800ae96:	f003 0304 	and.w	r3, r3, #4
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d023      	beq.n	800aee6 <UART_WaitOnFlagUntilTimeout+0x8a>
 800ae9e:	68bb      	ldr	r3, [r7, #8]
 800aea0:	2b80      	cmp	r3, #128	@ 0x80
 800aea2:	d020      	beq.n	800aee6 <UART_WaitOnFlagUntilTimeout+0x8a>
 800aea4:	68bb      	ldr	r3, [r7, #8]
 800aea6:	2b40      	cmp	r3, #64	@ 0x40
 800aea8:	d01d      	beq.n	800aee6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	f003 0308 	and.w	r3, r3, #8
 800aeb4:	2b08      	cmp	r3, #8
 800aeb6:	d116      	bne.n	800aee6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800aeb8:	2300      	movs	r3, #0
 800aeba:	617b      	str	r3, [r7, #20]
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	617b      	str	r3, [r7, #20]
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	685b      	ldr	r3, [r3, #4]
 800aeca:	617b      	str	r3, [r7, #20]
 800aecc:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800aece:	68f8      	ldr	r0, [r7, #12]
 800aed0:	f000 f8ec 	bl	800b0ac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	2208      	movs	r2, #8
 800aed8:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	2200      	movs	r2, #0
 800aede:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800aee2:	2301      	movs	r3, #1
 800aee4:	e00f      	b.n	800af06 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	681a      	ldr	r2, [r3, #0]
 800aeec:	68bb      	ldr	r3, [r7, #8]
 800aeee:	4013      	ands	r3, r2
 800aef0:	68ba      	ldr	r2, [r7, #8]
 800aef2:	429a      	cmp	r2, r3
 800aef4:	bf0c      	ite	eq
 800aef6:	2301      	moveq	r3, #1
 800aef8:	2300      	movne	r3, #0
 800aefa:	b2db      	uxtb	r3, r3
 800aefc:	461a      	mov	r2, r3
 800aefe:	79fb      	ldrb	r3, [r7, #7]
 800af00:	429a      	cmp	r2, r3
 800af02:	d0b4      	beq.n	800ae6e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800af04:	2300      	movs	r3, #0
}
 800af06:	4618      	mov	r0, r3
 800af08:	3718      	adds	r7, #24
 800af0a:	46bd      	mov	sp, r7
 800af0c:	bd80      	pop	{r7, pc}
	...

0800af10 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800af10:	b580      	push	{r7, lr}
 800af12:	b098      	sub	sp, #96	@ 0x60
 800af14:	af00      	add	r7, sp, #0
 800af16:	60f8      	str	r0, [r7, #12]
 800af18:	60b9      	str	r1, [r7, #8]
 800af1a:	4613      	mov	r3, r2
 800af1c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800af1e:	68ba      	ldr	r2, [r7, #8]
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	88fa      	ldrh	r2, [r7, #6]
 800af28:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	2200      	movs	r2, #0
 800af2e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	2222      	movs	r2, #34	@ 0x22
 800af34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800af3c:	4a44      	ldr	r2, [pc, #272]	@ (800b050 <UART_Start_Receive_DMA+0x140>)
 800af3e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800af44:	4a43      	ldr	r2, [pc, #268]	@ (800b054 <UART_Start_Receive_DMA+0x144>)
 800af46:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800af4c:	4a42      	ldr	r2, [pc, #264]	@ (800b058 <UART_Start_Receive_DMA+0x148>)
 800af4e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800af54:	2200      	movs	r2, #0
 800af56:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800af58:	f107 0308 	add.w	r3, r7, #8
 800af5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size) != HAL_OK)
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	3304      	adds	r3, #4
 800af68:	4619      	mov	r1, r3
 800af6a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800af6c:	681a      	ldr	r2, [r3, #0]
 800af6e:	88fb      	ldrh	r3, [r7, #6]
 800af70:	f7fb faf6 	bl	8006560 <HAL_DMA_Start_IT>
 800af74:	4603      	mov	r3, r0
 800af76:	2b00      	cmp	r3, #0
 800af78:	d008      	beq.n	800af8c <UART_Start_Receive_DMA+0x7c>
  {
    /* Set error code to DMA */
    huart->ErrorCode = HAL_UART_ERROR_DMA;
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	2210      	movs	r2, #16
 800af7e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Restore huart->RxState to ready */
    huart->RxState = HAL_UART_STATE_READY;
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	2220      	movs	r2, #32
 800af84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_ERROR;
 800af88:	2301      	movs	r3, #1
 800af8a:	e05d      	b.n	800b048 <UART_Start_Receive_DMA+0x138>
  }
  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800af8c:	2300      	movs	r3, #0
 800af8e:	613b      	str	r3, [r7, #16]
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	613b      	str	r3, [r7, #16]
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	685b      	ldr	r3, [r3, #4]
 800af9e:	613b      	str	r3, [r7, #16]
 800afa0:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	691b      	ldr	r3, [r3, #16]
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d019      	beq.n	800afde <UART_Start_Receive_DMA+0xce>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	330c      	adds	r3, #12
 800afb0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afb2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800afb4:	e853 3f00 	ldrex	r3, [r3]
 800afb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800afba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800afbc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800afc0:	65bb      	str	r3, [r7, #88]	@ 0x58
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	330c      	adds	r3, #12
 800afc8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800afca:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800afcc:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afce:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800afd0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800afd2:	e841 2300 	strex	r3, r2, [r1]
 800afd6:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800afd8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d1e5      	bne.n	800afaa <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	3314      	adds	r3, #20
 800afe4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afe6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800afe8:	e853 3f00 	ldrex	r3, [r3]
 800afec:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800afee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aff0:	f043 0301 	orr.w	r3, r3, #1
 800aff4:	657b      	str	r3, [r7, #84]	@ 0x54
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	3314      	adds	r3, #20
 800affc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800affe:	63ba      	str	r2, [r7, #56]	@ 0x38
 800b000:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b002:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800b004:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b006:	e841 2300 	strex	r3, r2, [r1]
 800b00a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b00c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d1e5      	bne.n	800afde <UART_Start_Receive_DMA+0xce>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	3314      	adds	r3, #20
 800b018:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b01a:	69bb      	ldr	r3, [r7, #24]
 800b01c:	e853 3f00 	ldrex	r3, [r3]
 800b020:	617b      	str	r3, [r7, #20]
   return(result);
 800b022:	697b      	ldr	r3, [r7, #20]
 800b024:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b028:	653b      	str	r3, [r7, #80]	@ 0x50
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	3314      	adds	r3, #20
 800b030:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b032:	627a      	str	r2, [r7, #36]	@ 0x24
 800b034:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b036:	6a39      	ldr	r1, [r7, #32]
 800b038:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b03a:	e841 2300 	strex	r3, r2, [r1]
 800b03e:	61fb      	str	r3, [r7, #28]
   return(result);
 800b040:	69fb      	ldr	r3, [r7, #28]
 800b042:	2b00      	cmp	r3, #0
 800b044:	d1e5      	bne.n	800b012 <UART_Start_Receive_DMA+0x102>

  return HAL_OK;
 800b046:	2300      	movs	r3, #0
}
 800b048:	4618      	mov	r0, r3
 800b04a:	3760      	adds	r7, #96	@ 0x60
 800b04c:	46bd      	mov	sp, r7
 800b04e:	bd80      	pop	{r7, pc}
 800b050:	0800ac61 	.word	0x0800ac61
 800b054:	0800ad8d 	.word	0x0800ad8d
 800b058:	0800adc9 	.word	0x0800adc9

0800b05c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b05c:	b480      	push	{r7}
 800b05e:	b089      	sub	sp, #36	@ 0x24
 800b060:	af00      	add	r7, sp, #0
 800b062:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	330c      	adds	r3, #12
 800b06a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	e853 3f00 	ldrex	r3, [r3]
 800b072:	60bb      	str	r3, [r7, #8]
   return(result);
 800b074:	68bb      	ldr	r3, [r7, #8]
 800b076:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800b07a:	61fb      	str	r3, [r7, #28]
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	330c      	adds	r3, #12
 800b082:	69fa      	ldr	r2, [r7, #28]
 800b084:	61ba      	str	r2, [r7, #24]
 800b086:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b088:	6979      	ldr	r1, [r7, #20]
 800b08a:	69ba      	ldr	r2, [r7, #24]
 800b08c:	e841 2300 	strex	r3, r2, [r1]
 800b090:	613b      	str	r3, [r7, #16]
   return(result);
 800b092:	693b      	ldr	r3, [r7, #16]
 800b094:	2b00      	cmp	r3, #0
 800b096:	d1e5      	bne.n	800b064 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	2220      	movs	r2, #32
 800b09c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800b0a0:	bf00      	nop
 800b0a2:	3724      	adds	r7, #36	@ 0x24
 800b0a4:	46bd      	mov	sp, r7
 800b0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0aa:	4770      	bx	lr

0800b0ac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b0ac:	b480      	push	{r7}
 800b0ae:	b095      	sub	sp, #84	@ 0x54
 800b0b0:	af00      	add	r7, sp, #0
 800b0b2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	330c      	adds	r3, #12
 800b0ba:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b0be:	e853 3f00 	ldrex	r3, [r3]
 800b0c2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b0c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0c6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b0ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	330c      	adds	r3, #12
 800b0d2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b0d4:	643a      	str	r2, [r7, #64]	@ 0x40
 800b0d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0d8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b0da:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b0dc:	e841 2300 	strex	r3, r2, [r1]
 800b0e0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b0e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d1e5      	bne.n	800b0b4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	3314      	adds	r3, #20
 800b0ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0f0:	6a3b      	ldr	r3, [r7, #32]
 800b0f2:	e853 3f00 	ldrex	r3, [r3]
 800b0f6:	61fb      	str	r3, [r7, #28]
   return(result);
 800b0f8:	69fb      	ldr	r3, [r7, #28]
 800b0fa:	f023 0301 	bic.w	r3, r3, #1
 800b0fe:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	3314      	adds	r3, #20
 800b106:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b108:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b10a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b10c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b10e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b110:	e841 2300 	strex	r3, r2, [r1]
 800b114:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d1e5      	bne.n	800b0e8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b120:	2b01      	cmp	r3, #1
 800b122:	d119      	bne.n	800b158 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	330c      	adds	r3, #12
 800b12a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	e853 3f00 	ldrex	r3, [r3]
 800b132:	60bb      	str	r3, [r7, #8]
   return(result);
 800b134:	68bb      	ldr	r3, [r7, #8]
 800b136:	f023 0310 	bic.w	r3, r3, #16
 800b13a:	647b      	str	r3, [r7, #68]	@ 0x44
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	330c      	adds	r3, #12
 800b142:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b144:	61ba      	str	r2, [r7, #24]
 800b146:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b148:	6979      	ldr	r1, [r7, #20]
 800b14a:	69ba      	ldr	r2, [r7, #24]
 800b14c:	e841 2300 	strex	r3, r2, [r1]
 800b150:	613b      	str	r3, [r7, #16]
   return(result);
 800b152:	693b      	ldr	r3, [r7, #16]
 800b154:	2b00      	cmp	r3, #0
 800b156:	d1e5      	bne.n	800b124 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	2220      	movs	r2, #32
 800b15c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	2200      	movs	r2, #0
 800b164:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800b166:	bf00      	nop
 800b168:	3754      	adds	r7, #84	@ 0x54
 800b16a:	46bd      	mov	sp, r7
 800b16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b170:	4770      	bx	lr

0800b172 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b172:	b580      	push	{r7, lr}
 800b174:	b084      	sub	sp, #16
 800b176:	af00      	add	r7, sp, #0
 800b178:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b17e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	2200      	movs	r2, #0
 800b184:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b186:	68f8      	ldr	r0, [r7, #12]
 800b188:	f7ff fd54 	bl	800ac34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b18c:	bf00      	nop
 800b18e:	3710      	adds	r7, #16
 800b190:	46bd      	mov	sp, r7
 800b192:	bd80      	pop	{r7, pc}

0800b194 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b194:	b480      	push	{r7}
 800b196:	b085      	sub	sp, #20
 800b198:	af00      	add	r7, sp, #0
 800b19a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b1a2:	b2db      	uxtb	r3, r3
 800b1a4:	2b21      	cmp	r3, #33	@ 0x21
 800b1a6:	d13e      	bne.n	800b226 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	689b      	ldr	r3, [r3, #8]
 800b1ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b1b0:	d114      	bne.n	800b1dc <UART_Transmit_IT+0x48>
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	691b      	ldr	r3, [r3, #16]
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d110      	bne.n	800b1dc <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	6a1b      	ldr	r3, [r3, #32]
 800b1be:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	881b      	ldrh	r3, [r3, #0]
 800b1c4:	461a      	mov	r2, r3
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b1ce:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	6a1b      	ldr	r3, [r3, #32]
 800b1d4:	1c9a      	adds	r2, r3, #2
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	621a      	str	r2, [r3, #32]
 800b1da:	e008      	b.n	800b1ee <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	6a1b      	ldr	r3, [r3, #32]
 800b1e0:	1c59      	adds	r1, r3, #1
 800b1e2:	687a      	ldr	r2, [r7, #4]
 800b1e4:	6211      	str	r1, [r2, #32]
 800b1e6:	781a      	ldrb	r2, [r3, #0]
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800b1f2:	b29b      	uxth	r3, r3
 800b1f4:	3b01      	subs	r3, #1
 800b1f6:	b29b      	uxth	r3, r3
 800b1f8:	687a      	ldr	r2, [r7, #4]
 800b1fa:	4619      	mov	r1, r3
 800b1fc:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d10f      	bne.n	800b222 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	68da      	ldr	r2, [r3, #12]
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800b210:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	68da      	ldr	r2, [r3, #12]
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b220:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b222:	2300      	movs	r3, #0
 800b224:	e000      	b.n	800b228 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800b226:	2302      	movs	r3, #2
  }
}
 800b228:	4618      	mov	r0, r3
 800b22a:	3714      	adds	r7, #20
 800b22c:	46bd      	mov	sp, r7
 800b22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b232:	4770      	bx	lr

0800b234 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b234:	b580      	push	{r7, lr}
 800b236:	b082      	sub	sp, #8
 800b238:	af00      	add	r7, sp, #0
 800b23a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	68da      	ldr	r2, [r3, #12]
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b24a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	2220      	movs	r2, #32
 800b250:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b254:	6878      	ldr	r0, [r7, #4]
 800b256:	f7ff fcd9 	bl	800ac0c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b25a:	2300      	movs	r3, #0
}
 800b25c:	4618      	mov	r0, r3
 800b25e:	3708      	adds	r7, #8
 800b260:	46bd      	mov	sp, r7
 800b262:	bd80      	pop	{r7, pc}

0800b264 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b264:	b580      	push	{r7, lr}
 800b266:	b08c      	sub	sp, #48	@ 0x30
 800b268:	af00      	add	r7, sp, #0
 800b26a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 800b26c:	2300      	movs	r3, #0
 800b26e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 800b270:	2300      	movs	r3, #0
 800b272:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b27a:	b2db      	uxtb	r3, r3
 800b27c:	2b22      	cmp	r3, #34	@ 0x22
 800b27e:	f040 80aa 	bne.w	800b3d6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	689b      	ldr	r3, [r3, #8]
 800b286:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b28a:	d115      	bne.n	800b2b8 <UART_Receive_IT+0x54>
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	691b      	ldr	r3, [r3, #16]
 800b290:	2b00      	cmp	r3, #0
 800b292:	d111      	bne.n	800b2b8 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b298:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	685b      	ldr	r3, [r3, #4]
 800b2a0:	b29b      	uxth	r3, r3
 800b2a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b2a6:	b29a      	uxth	r2, r3
 800b2a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2aa:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b2b0:	1c9a      	adds	r2, r3, #2
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	629a      	str	r2, [r3, #40]	@ 0x28
 800b2b6:	e024      	b.n	800b302 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b2bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	689b      	ldr	r3, [r3, #8]
 800b2c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b2c6:	d007      	beq.n	800b2d8 <UART_Receive_IT+0x74>
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	689b      	ldr	r3, [r3, #8]
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d10a      	bne.n	800b2e6 <UART_Receive_IT+0x82>
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	691b      	ldr	r3, [r3, #16]
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d106      	bne.n	800b2e6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	685b      	ldr	r3, [r3, #4]
 800b2de:	b2da      	uxtb	r2, r3
 800b2e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2e2:	701a      	strb	r2, [r3, #0]
 800b2e4:	e008      	b.n	800b2f8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	685b      	ldr	r3, [r3, #4]
 800b2ec:	b2db      	uxtb	r3, r3
 800b2ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b2f2:	b2da      	uxtb	r2, r3
 800b2f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2f6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b2fc:	1c5a      	adds	r2, r3, #1
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800b306:	b29b      	uxth	r3, r3
 800b308:	3b01      	subs	r3, #1
 800b30a:	b29b      	uxth	r3, r3
 800b30c:	687a      	ldr	r2, [r7, #4]
 800b30e:	4619      	mov	r1, r3
 800b310:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800b312:	2b00      	cmp	r3, #0
 800b314:	d15d      	bne.n	800b3d2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	68da      	ldr	r2, [r3, #12]
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	f022 0220 	bic.w	r2, r2, #32
 800b324:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	68da      	ldr	r2, [r3, #12]
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800b334:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	695a      	ldr	r2, [r3, #20]
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	f022 0201 	bic.w	r2, r2, #1
 800b344:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	2220      	movs	r2, #32
 800b34a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	2200      	movs	r2, #0
 800b352:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b358:	2b01      	cmp	r3, #1
 800b35a:	d135      	bne.n	800b3c8 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	2200      	movs	r2, #0
 800b360:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	330c      	adds	r3, #12
 800b368:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b36a:	697b      	ldr	r3, [r7, #20]
 800b36c:	e853 3f00 	ldrex	r3, [r3]
 800b370:	613b      	str	r3, [r7, #16]
   return(result);
 800b372:	693b      	ldr	r3, [r7, #16]
 800b374:	f023 0310 	bic.w	r3, r3, #16
 800b378:	627b      	str	r3, [r7, #36]	@ 0x24
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	330c      	adds	r3, #12
 800b380:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b382:	623a      	str	r2, [r7, #32]
 800b384:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b386:	69f9      	ldr	r1, [r7, #28]
 800b388:	6a3a      	ldr	r2, [r7, #32]
 800b38a:	e841 2300 	strex	r3, r2, [r1]
 800b38e:	61bb      	str	r3, [r7, #24]
   return(result);
 800b390:	69bb      	ldr	r3, [r7, #24]
 800b392:	2b00      	cmp	r3, #0
 800b394:	d1e5      	bne.n	800b362 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	f003 0310 	and.w	r3, r3, #16
 800b3a0:	2b10      	cmp	r3, #16
 800b3a2:	d10a      	bne.n	800b3ba <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b3a4:	2300      	movs	r3, #0
 800b3a6:	60fb      	str	r3, [r7, #12]
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	60fb      	str	r3, [r7, #12]
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	685b      	ldr	r3, [r3, #4]
 800b3b6:	60fb      	str	r3, [r7, #12]
 800b3b8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800b3be:	4619      	mov	r1, r3
 800b3c0:	6878      	ldr	r0, [r7, #4]
 800b3c2:	f7ff fc41 	bl	800ac48 <HAL_UARTEx_RxEventCallback>
 800b3c6:	e002      	b.n	800b3ce <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800b3c8:	6878      	ldr	r0, [r7, #4]
 800b3ca:	f7f7 fb8f 	bl	8002aec <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800b3ce:	2300      	movs	r3, #0
 800b3d0:	e002      	b.n	800b3d8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800b3d2:	2300      	movs	r3, #0
 800b3d4:	e000      	b.n	800b3d8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800b3d6:	2302      	movs	r3, #2
  }
}
 800b3d8:	4618      	mov	r0, r3
 800b3da:	3730      	adds	r7, #48	@ 0x30
 800b3dc:	46bd      	mov	sp, r7
 800b3de:	bd80      	pop	{r7, pc}

0800b3e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b3e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b3e4:	b0c0      	sub	sp, #256	@ 0x100
 800b3e6:	af00      	add	r7, sp, #0
 800b3e8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b3ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	691b      	ldr	r3, [r3, #16]
 800b3f4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800b3f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b3fc:	68d9      	ldr	r1, [r3, #12]
 800b3fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b402:	681a      	ldr	r2, [r3, #0]
 800b404:	ea40 0301 	orr.w	r3, r0, r1
 800b408:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b40a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b40e:	689a      	ldr	r2, [r3, #8]
 800b410:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b414:	691b      	ldr	r3, [r3, #16]
 800b416:	431a      	orrs	r2, r3
 800b418:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b41c:	695b      	ldr	r3, [r3, #20]
 800b41e:	431a      	orrs	r2, r3
 800b420:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b424:	69db      	ldr	r3, [r3, #28]
 800b426:	4313      	orrs	r3, r2
 800b428:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800b42c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	68db      	ldr	r3, [r3, #12]
 800b434:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800b438:	f021 010c 	bic.w	r1, r1, #12
 800b43c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b440:	681a      	ldr	r2, [r3, #0]
 800b442:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800b446:	430b      	orrs	r3, r1
 800b448:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b44a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	695b      	ldr	r3, [r3, #20]
 800b452:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800b456:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b45a:	6999      	ldr	r1, [r3, #24]
 800b45c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b460:	681a      	ldr	r2, [r3, #0]
 800b462:	ea40 0301 	orr.w	r3, r0, r1
 800b466:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b468:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b46c:	681a      	ldr	r2, [r3, #0]
 800b46e:	4b8f      	ldr	r3, [pc, #572]	@ (800b6ac <UART_SetConfig+0x2cc>)
 800b470:	429a      	cmp	r2, r3
 800b472:	d005      	beq.n	800b480 <UART_SetConfig+0xa0>
 800b474:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b478:	681a      	ldr	r2, [r3, #0]
 800b47a:	4b8d      	ldr	r3, [pc, #564]	@ (800b6b0 <UART_SetConfig+0x2d0>)
 800b47c:	429a      	cmp	r2, r3
 800b47e:	d104      	bne.n	800b48a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b480:	f7fd fa08 	bl	8008894 <HAL_RCC_GetPCLK2Freq>
 800b484:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800b488:	e003      	b.n	800b492 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b48a:	f7fd f9ef 	bl	800886c <HAL_RCC_GetPCLK1Freq>
 800b48e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b492:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b496:	69db      	ldr	r3, [r3, #28]
 800b498:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b49c:	f040 810c 	bne.w	800b6b8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b4a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b4a4:	2200      	movs	r2, #0
 800b4a6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800b4aa:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800b4ae:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800b4b2:	4622      	mov	r2, r4
 800b4b4:	462b      	mov	r3, r5
 800b4b6:	1891      	adds	r1, r2, r2
 800b4b8:	65b9      	str	r1, [r7, #88]	@ 0x58
 800b4ba:	415b      	adcs	r3, r3
 800b4bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b4be:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800b4c2:	4621      	mov	r1, r4
 800b4c4:	eb12 0801 	adds.w	r8, r2, r1
 800b4c8:	4629      	mov	r1, r5
 800b4ca:	eb43 0901 	adc.w	r9, r3, r1
 800b4ce:	f04f 0200 	mov.w	r2, #0
 800b4d2:	f04f 0300 	mov.w	r3, #0
 800b4d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b4da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b4de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b4e2:	4690      	mov	r8, r2
 800b4e4:	4699      	mov	r9, r3
 800b4e6:	4623      	mov	r3, r4
 800b4e8:	eb18 0303 	adds.w	r3, r8, r3
 800b4ec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800b4f0:	462b      	mov	r3, r5
 800b4f2:	eb49 0303 	adc.w	r3, r9, r3
 800b4f6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800b4fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b4fe:	685b      	ldr	r3, [r3, #4]
 800b500:	2200      	movs	r2, #0
 800b502:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800b506:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800b50a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800b50e:	460b      	mov	r3, r1
 800b510:	18db      	adds	r3, r3, r3
 800b512:	653b      	str	r3, [r7, #80]	@ 0x50
 800b514:	4613      	mov	r3, r2
 800b516:	eb42 0303 	adc.w	r3, r2, r3
 800b51a:	657b      	str	r3, [r7, #84]	@ 0x54
 800b51c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800b520:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800b524:	f7f5 fb90 	bl	8000c48 <__aeabi_uldivmod>
 800b528:	4602      	mov	r2, r0
 800b52a:	460b      	mov	r3, r1
 800b52c:	4b61      	ldr	r3, [pc, #388]	@ (800b6b4 <UART_SetConfig+0x2d4>)
 800b52e:	fba3 2302 	umull	r2, r3, r3, r2
 800b532:	095b      	lsrs	r3, r3, #5
 800b534:	011c      	lsls	r4, r3, #4
 800b536:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b53a:	2200      	movs	r2, #0
 800b53c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b540:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800b544:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800b548:	4642      	mov	r2, r8
 800b54a:	464b      	mov	r3, r9
 800b54c:	1891      	adds	r1, r2, r2
 800b54e:	64b9      	str	r1, [r7, #72]	@ 0x48
 800b550:	415b      	adcs	r3, r3
 800b552:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b554:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800b558:	4641      	mov	r1, r8
 800b55a:	eb12 0a01 	adds.w	sl, r2, r1
 800b55e:	4649      	mov	r1, r9
 800b560:	eb43 0b01 	adc.w	fp, r3, r1
 800b564:	f04f 0200 	mov.w	r2, #0
 800b568:	f04f 0300 	mov.w	r3, #0
 800b56c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800b570:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800b574:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b578:	4692      	mov	sl, r2
 800b57a:	469b      	mov	fp, r3
 800b57c:	4643      	mov	r3, r8
 800b57e:	eb1a 0303 	adds.w	r3, sl, r3
 800b582:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b586:	464b      	mov	r3, r9
 800b588:	eb4b 0303 	adc.w	r3, fp, r3
 800b58c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800b590:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b594:	685b      	ldr	r3, [r3, #4]
 800b596:	2200      	movs	r2, #0
 800b598:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b59c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800b5a0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800b5a4:	460b      	mov	r3, r1
 800b5a6:	18db      	adds	r3, r3, r3
 800b5a8:	643b      	str	r3, [r7, #64]	@ 0x40
 800b5aa:	4613      	mov	r3, r2
 800b5ac:	eb42 0303 	adc.w	r3, r2, r3
 800b5b0:	647b      	str	r3, [r7, #68]	@ 0x44
 800b5b2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800b5b6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800b5ba:	f7f5 fb45 	bl	8000c48 <__aeabi_uldivmod>
 800b5be:	4602      	mov	r2, r0
 800b5c0:	460b      	mov	r3, r1
 800b5c2:	4611      	mov	r1, r2
 800b5c4:	4b3b      	ldr	r3, [pc, #236]	@ (800b6b4 <UART_SetConfig+0x2d4>)
 800b5c6:	fba3 2301 	umull	r2, r3, r3, r1
 800b5ca:	095b      	lsrs	r3, r3, #5
 800b5cc:	2264      	movs	r2, #100	@ 0x64
 800b5ce:	fb02 f303 	mul.w	r3, r2, r3
 800b5d2:	1acb      	subs	r3, r1, r3
 800b5d4:	00db      	lsls	r3, r3, #3
 800b5d6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800b5da:	4b36      	ldr	r3, [pc, #216]	@ (800b6b4 <UART_SetConfig+0x2d4>)
 800b5dc:	fba3 2302 	umull	r2, r3, r3, r2
 800b5e0:	095b      	lsrs	r3, r3, #5
 800b5e2:	005b      	lsls	r3, r3, #1
 800b5e4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800b5e8:	441c      	add	r4, r3
 800b5ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b5ee:	2200      	movs	r2, #0
 800b5f0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b5f4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800b5f8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800b5fc:	4642      	mov	r2, r8
 800b5fe:	464b      	mov	r3, r9
 800b600:	1891      	adds	r1, r2, r2
 800b602:	63b9      	str	r1, [r7, #56]	@ 0x38
 800b604:	415b      	adcs	r3, r3
 800b606:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b608:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800b60c:	4641      	mov	r1, r8
 800b60e:	1851      	adds	r1, r2, r1
 800b610:	6339      	str	r1, [r7, #48]	@ 0x30
 800b612:	4649      	mov	r1, r9
 800b614:	414b      	adcs	r3, r1
 800b616:	637b      	str	r3, [r7, #52]	@ 0x34
 800b618:	f04f 0200 	mov.w	r2, #0
 800b61c:	f04f 0300 	mov.w	r3, #0
 800b620:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800b624:	4659      	mov	r1, fp
 800b626:	00cb      	lsls	r3, r1, #3
 800b628:	4651      	mov	r1, sl
 800b62a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b62e:	4651      	mov	r1, sl
 800b630:	00ca      	lsls	r2, r1, #3
 800b632:	4610      	mov	r0, r2
 800b634:	4619      	mov	r1, r3
 800b636:	4603      	mov	r3, r0
 800b638:	4642      	mov	r2, r8
 800b63a:	189b      	adds	r3, r3, r2
 800b63c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b640:	464b      	mov	r3, r9
 800b642:	460a      	mov	r2, r1
 800b644:	eb42 0303 	adc.w	r3, r2, r3
 800b648:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b64c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b650:	685b      	ldr	r3, [r3, #4]
 800b652:	2200      	movs	r2, #0
 800b654:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800b658:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800b65c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800b660:	460b      	mov	r3, r1
 800b662:	18db      	adds	r3, r3, r3
 800b664:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b666:	4613      	mov	r3, r2
 800b668:	eb42 0303 	adc.w	r3, r2, r3
 800b66c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b66e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800b672:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800b676:	f7f5 fae7 	bl	8000c48 <__aeabi_uldivmod>
 800b67a:	4602      	mov	r2, r0
 800b67c:	460b      	mov	r3, r1
 800b67e:	4b0d      	ldr	r3, [pc, #52]	@ (800b6b4 <UART_SetConfig+0x2d4>)
 800b680:	fba3 1302 	umull	r1, r3, r3, r2
 800b684:	095b      	lsrs	r3, r3, #5
 800b686:	2164      	movs	r1, #100	@ 0x64
 800b688:	fb01 f303 	mul.w	r3, r1, r3
 800b68c:	1ad3      	subs	r3, r2, r3
 800b68e:	00db      	lsls	r3, r3, #3
 800b690:	3332      	adds	r3, #50	@ 0x32
 800b692:	4a08      	ldr	r2, [pc, #32]	@ (800b6b4 <UART_SetConfig+0x2d4>)
 800b694:	fba2 2303 	umull	r2, r3, r2, r3
 800b698:	095b      	lsrs	r3, r3, #5
 800b69a:	f003 0207 	and.w	r2, r3, #7
 800b69e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	4422      	add	r2, r4
 800b6a6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b6a8:	e106      	b.n	800b8b8 <UART_SetConfig+0x4d8>
 800b6aa:	bf00      	nop
 800b6ac:	40011000 	.word	0x40011000
 800b6b0:	40011400 	.word	0x40011400
 800b6b4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b6b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b6bc:	2200      	movs	r2, #0
 800b6be:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800b6c2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800b6c6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800b6ca:	4642      	mov	r2, r8
 800b6cc:	464b      	mov	r3, r9
 800b6ce:	1891      	adds	r1, r2, r2
 800b6d0:	6239      	str	r1, [r7, #32]
 800b6d2:	415b      	adcs	r3, r3
 800b6d4:	627b      	str	r3, [r7, #36]	@ 0x24
 800b6d6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b6da:	4641      	mov	r1, r8
 800b6dc:	1854      	adds	r4, r2, r1
 800b6de:	4649      	mov	r1, r9
 800b6e0:	eb43 0501 	adc.w	r5, r3, r1
 800b6e4:	f04f 0200 	mov.w	r2, #0
 800b6e8:	f04f 0300 	mov.w	r3, #0
 800b6ec:	00eb      	lsls	r3, r5, #3
 800b6ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b6f2:	00e2      	lsls	r2, r4, #3
 800b6f4:	4614      	mov	r4, r2
 800b6f6:	461d      	mov	r5, r3
 800b6f8:	4643      	mov	r3, r8
 800b6fa:	18e3      	adds	r3, r4, r3
 800b6fc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b700:	464b      	mov	r3, r9
 800b702:	eb45 0303 	adc.w	r3, r5, r3
 800b706:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800b70a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b70e:	685b      	ldr	r3, [r3, #4]
 800b710:	2200      	movs	r2, #0
 800b712:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b716:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800b71a:	f04f 0200 	mov.w	r2, #0
 800b71e:	f04f 0300 	mov.w	r3, #0
 800b722:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800b726:	4629      	mov	r1, r5
 800b728:	008b      	lsls	r3, r1, #2
 800b72a:	4621      	mov	r1, r4
 800b72c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b730:	4621      	mov	r1, r4
 800b732:	008a      	lsls	r2, r1, #2
 800b734:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800b738:	f7f5 fa86 	bl	8000c48 <__aeabi_uldivmod>
 800b73c:	4602      	mov	r2, r0
 800b73e:	460b      	mov	r3, r1
 800b740:	4b60      	ldr	r3, [pc, #384]	@ (800b8c4 <UART_SetConfig+0x4e4>)
 800b742:	fba3 2302 	umull	r2, r3, r3, r2
 800b746:	095b      	lsrs	r3, r3, #5
 800b748:	011c      	lsls	r4, r3, #4
 800b74a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b74e:	2200      	movs	r2, #0
 800b750:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800b754:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800b758:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800b75c:	4642      	mov	r2, r8
 800b75e:	464b      	mov	r3, r9
 800b760:	1891      	adds	r1, r2, r2
 800b762:	61b9      	str	r1, [r7, #24]
 800b764:	415b      	adcs	r3, r3
 800b766:	61fb      	str	r3, [r7, #28]
 800b768:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b76c:	4641      	mov	r1, r8
 800b76e:	1851      	adds	r1, r2, r1
 800b770:	6139      	str	r1, [r7, #16]
 800b772:	4649      	mov	r1, r9
 800b774:	414b      	adcs	r3, r1
 800b776:	617b      	str	r3, [r7, #20]
 800b778:	f04f 0200 	mov.w	r2, #0
 800b77c:	f04f 0300 	mov.w	r3, #0
 800b780:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b784:	4659      	mov	r1, fp
 800b786:	00cb      	lsls	r3, r1, #3
 800b788:	4651      	mov	r1, sl
 800b78a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b78e:	4651      	mov	r1, sl
 800b790:	00ca      	lsls	r2, r1, #3
 800b792:	4610      	mov	r0, r2
 800b794:	4619      	mov	r1, r3
 800b796:	4603      	mov	r3, r0
 800b798:	4642      	mov	r2, r8
 800b79a:	189b      	adds	r3, r3, r2
 800b79c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b7a0:	464b      	mov	r3, r9
 800b7a2:	460a      	mov	r2, r1
 800b7a4:	eb42 0303 	adc.w	r3, r2, r3
 800b7a8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b7ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b7b0:	685b      	ldr	r3, [r3, #4]
 800b7b2:	2200      	movs	r2, #0
 800b7b4:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b7b6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800b7b8:	f04f 0200 	mov.w	r2, #0
 800b7bc:	f04f 0300 	mov.w	r3, #0
 800b7c0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800b7c4:	4649      	mov	r1, r9
 800b7c6:	008b      	lsls	r3, r1, #2
 800b7c8:	4641      	mov	r1, r8
 800b7ca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b7ce:	4641      	mov	r1, r8
 800b7d0:	008a      	lsls	r2, r1, #2
 800b7d2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800b7d6:	f7f5 fa37 	bl	8000c48 <__aeabi_uldivmod>
 800b7da:	4602      	mov	r2, r0
 800b7dc:	460b      	mov	r3, r1
 800b7de:	4611      	mov	r1, r2
 800b7e0:	4b38      	ldr	r3, [pc, #224]	@ (800b8c4 <UART_SetConfig+0x4e4>)
 800b7e2:	fba3 2301 	umull	r2, r3, r3, r1
 800b7e6:	095b      	lsrs	r3, r3, #5
 800b7e8:	2264      	movs	r2, #100	@ 0x64
 800b7ea:	fb02 f303 	mul.w	r3, r2, r3
 800b7ee:	1acb      	subs	r3, r1, r3
 800b7f0:	011b      	lsls	r3, r3, #4
 800b7f2:	3332      	adds	r3, #50	@ 0x32
 800b7f4:	4a33      	ldr	r2, [pc, #204]	@ (800b8c4 <UART_SetConfig+0x4e4>)
 800b7f6:	fba2 2303 	umull	r2, r3, r2, r3
 800b7fa:	095b      	lsrs	r3, r3, #5
 800b7fc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b800:	441c      	add	r4, r3
 800b802:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b806:	2200      	movs	r2, #0
 800b808:	673b      	str	r3, [r7, #112]	@ 0x70
 800b80a:	677a      	str	r2, [r7, #116]	@ 0x74
 800b80c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800b810:	4642      	mov	r2, r8
 800b812:	464b      	mov	r3, r9
 800b814:	1891      	adds	r1, r2, r2
 800b816:	60b9      	str	r1, [r7, #8]
 800b818:	415b      	adcs	r3, r3
 800b81a:	60fb      	str	r3, [r7, #12]
 800b81c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b820:	4641      	mov	r1, r8
 800b822:	1851      	adds	r1, r2, r1
 800b824:	6039      	str	r1, [r7, #0]
 800b826:	4649      	mov	r1, r9
 800b828:	414b      	adcs	r3, r1
 800b82a:	607b      	str	r3, [r7, #4]
 800b82c:	f04f 0200 	mov.w	r2, #0
 800b830:	f04f 0300 	mov.w	r3, #0
 800b834:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800b838:	4659      	mov	r1, fp
 800b83a:	00cb      	lsls	r3, r1, #3
 800b83c:	4651      	mov	r1, sl
 800b83e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b842:	4651      	mov	r1, sl
 800b844:	00ca      	lsls	r2, r1, #3
 800b846:	4610      	mov	r0, r2
 800b848:	4619      	mov	r1, r3
 800b84a:	4603      	mov	r3, r0
 800b84c:	4642      	mov	r2, r8
 800b84e:	189b      	adds	r3, r3, r2
 800b850:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b852:	464b      	mov	r3, r9
 800b854:	460a      	mov	r2, r1
 800b856:	eb42 0303 	adc.w	r3, r2, r3
 800b85a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800b85c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b860:	685b      	ldr	r3, [r3, #4]
 800b862:	2200      	movs	r2, #0
 800b864:	663b      	str	r3, [r7, #96]	@ 0x60
 800b866:	667a      	str	r2, [r7, #100]	@ 0x64
 800b868:	f04f 0200 	mov.w	r2, #0
 800b86c:	f04f 0300 	mov.w	r3, #0
 800b870:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800b874:	4649      	mov	r1, r9
 800b876:	008b      	lsls	r3, r1, #2
 800b878:	4641      	mov	r1, r8
 800b87a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b87e:	4641      	mov	r1, r8
 800b880:	008a      	lsls	r2, r1, #2
 800b882:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800b886:	f7f5 f9df 	bl	8000c48 <__aeabi_uldivmod>
 800b88a:	4602      	mov	r2, r0
 800b88c:	460b      	mov	r3, r1
 800b88e:	4b0d      	ldr	r3, [pc, #52]	@ (800b8c4 <UART_SetConfig+0x4e4>)
 800b890:	fba3 1302 	umull	r1, r3, r3, r2
 800b894:	095b      	lsrs	r3, r3, #5
 800b896:	2164      	movs	r1, #100	@ 0x64
 800b898:	fb01 f303 	mul.w	r3, r1, r3
 800b89c:	1ad3      	subs	r3, r2, r3
 800b89e:	011b      	lsls	r3, r3, #4
 800b8a0:	3332      	adds	r3, #50	@ 0x32
 800b8a2:	4a08      	ldr	r2, [pc, #32]	@ (800b8c4 <UART_SetConfig+0x4e4>)
 800b8a4:	fba2 2303 	umull	r2, r3, r2, r3
 800b8a8:	095b      	lsrs	r3, r3, #5
 800b8aa:	f003 020f 	and.w	r2, r3, #15
 800b8ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	4422      	add	r2, r4
 800b8b6:	609a      	str	r2, [r3, #8]
}
 800b8b8:	bf00      	nop
 800b8ba:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800b8be:	46bd      	mov	sp, r7
 800b8c0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b8c4:	51eb851f 	.word	0x51eb851f

0800b8c8 <__NVIC_SetPriority>:
{
 800b8c8:	b480      	push	{r7}
 800b8ca:	b083      	sub	sp, #12
 800b8cc:	af00      	add	r7, sp, #0
 800b8ce:	4603      	mov	r3, r0
 800b8d0:	6039      	str	r1, [r7, #0]
 800b8d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b8d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	db0a      	blt.n	800b8f2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b8dc:	683b      	ldr	r3, [r7, #0]
 800b8de:	b2da      	uxtb	r2, r3
 800b8e0:	490c      	ldr	r1, [pc, #48]	@ (800b914 <__NVIC_SetPriority+0x4c>)
 800b8e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b8e6:	0112      	lsls	r2, r2, #4
 800b8e8:	b2d2      	uxtb	r2, r2
 800b8ea:	440b      	add	r3, r1
 800b8ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800b8f0:	e00a      	b.n	800b908 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b8f2:	683b      	ldr	r3, [r7, #0]
 800b8f4:	b2da      	uxtb	r2, r3
 800b8f6:	4908      	ldr	r1, [pc, #32]	@ (800b918 <__NVIC_SetPriority+0x50>)
 800b8f8:	79fb      	ldrb	r3, [r7, #7]
 800b8fa:	f003 030f 	and.w	r3, r3, #15
 800b8fe:	3b04      	subs	r3, #4
 800b900:	0112      	lsls	r2, r2, #4
 800b902:	b2d2      	uxtb	r2, r2
 800b904:	440b      	add	r3, r1
 800b906:	761a      	strb	r2, [r3, #24]
}
 800b908:	bf00      	nop
 800b90a:	370c      	adds	r7, #12
 800b90c:	46bd      	mov	sp, r7
 800b90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b912:	4770      	bx	lr
 800b914:	e000e100 	.word	0xe000e100
 800b918:	e000ed00 	.word	0xe000ed00

0800b91c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800b91c:	b580      	push	{r7, lr}
 800b91e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800b920:	4b05      	ldr	r3, [pc, #20]	@ (800b938 <SysTick_Handler+0x1c>)
 800b922:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800b924:	f001 ffb4 	bl	800d890 <xTaskGetSchedulerState>
 800b928:	4603      	mov	r3, r0
 800b92a:	2b01      	cmp	r3, #1
 800b92c:	d001      	beq.n	800b932 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800b92e:	f002 fdab 	bl	800e488 <xPortSysTickHandler>
  }
}
 800b932:	bf00      	nop
 800b934:	bd80      	pop	{r7, pc}
 800b936:	bf00      	nop
 800b938:	e000e010 	.word	0xe000e010

0800b93c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800b93c:	b580      	push	{r7, lr}
 800b93e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800b940:	2100      	movs	r1, #0
 800b942:	f06f 0004 	mvn.w	r0, #4
 800b946:	f7ff ffbf 	bl	800b8c8 <__NVIC_SetPriority>
#endif
}
 800b94a:	bf00      	nop
 800b94c:	bd80      	pop	{r7, pc}
	...

0800b950 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800b950:	b480      	push	{r7}
 800b952:	b083      	sub	sp, #12
 800b954:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b956:	f3ef 8305 	mrs	r3, IPSR
 800b95a:	603b      	str	r3, [r7, #0]
  return(result);
 800b95c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d003      	beq.n	800b96a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800b962:	f06f 0305 	mvn.w	r3, #5
 800b966:	607b      	str	r3, [r7, #4]
 800b968:	e00c      	b.n	800b984 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800b96a:	4b0a      	ldr	r3, [pc, #40]	@ (800b994 <osKernelInitialize+0x44>)
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d105      	bne.n	800b97e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800b972:	4b08      	ldr	r3, [pc, #32]	@ (800b994 <osKernelInitialize+0x44>)
 800b974:	2201      	movs	r2, #1
 800b976:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800b978:	2300      	movs	r3, #0
 800b97a:	607b      	str	r3, [r7, #4]
 800b97c:	e002      	b.n	800b984 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800b97e:	f04f 33ff 	mov.w	r3, #4294967295
 800b982:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b984:	687b      	ldr	r3, [r7, #4]
}
 800b986:	4618      	mov	r0, r3
 800b988:	370c      	adds	r7, #12
 800b98a:	46bd      	mov	sp, r7
 800b98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b990:	4770      	bx	lr
 800b992:	bf00      	nop
 800b994:	20000ae4 	.word	0x20000ae4

0800b998 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800b998:	b580      	push	{r7, lr}
 800b99a:	b082      	sub	sp, #8
 800b99c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b99e:	f3ef 8305 	mrs	r3, IPSR
 800b9a2:	603b      	str	r3, [r7, #0]
  return(result);
 800b9a4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d003      	beq.n	800b9b2 <osKernelStart+0x1a>
    stat = osErrorISR;
 800b9aa:	f06f 0305 	mvn.w	r3, #5
 800b9ae:	607b      	str	r3, [r7, #4]
 800b9b0:	e010      	b.n	800b9d4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800b9b2:	4b0b      	ldr	r3, [pc, #44]	@ (800b9e0 <osKernelStart+0x48>)
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	2b01      	cmp	r3, #1
 800b9b8:	d109      	bne.n	800b9ce <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800b9ba:	f7ff ffbf 	bl	800b93c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800b9be:	4b08      	ldr	r3, [pc, #32]	@ (800b9e0 <osKernelStart+0x48>)
 800b9c0:	2202      	movs	r2, #2
 800b9c2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800b9c4:	f001 fb00 	bl	800cfc8 <vTaskStartScheduler>
      stat = osOK;
 800b9c8:	2300      	movs	r3, #0
 800b9ca:	607b      	str	r3, [r7, #4]
 800b9cc:	e002      	b.n	800b9d4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800b9ce:	f04f 33ff 	mov.w	r3, #4294967295
 800b9d2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b9d4:	687b      	ldr	r3, [r7, #4]
}
 800b9d6:	4618      	mov	r0, r3
 800b9d8:	3708      	adds	r7, #8
 800b9da:	46bd      	mov	sp, r7
 800b9dc:	bd80      	pop	{r7, pc}
 800b9de:	bf00      	nop
 800b9e0:	20000ae4 	.word	0x20000ae4

0800b9e4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800b9e4:	b580      	push	{r7, lr}
 800b9e6:	b08e      	sub	sp, #56	@ 0x38
 800b9e8:	af04      	add	r7, sp, #16
 800b9ea:	60f8      	str	r0, [r7, #12]
 800b9ec:	60b9      	str	r1, [r7, #8]
 800b9ee:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800b9f0:	2300      	movs	r3, #0
 800b9f2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b9f4:	f3ef 8305 	mrs	r3, IPSR
 800b9f8:	617b      	str	r3, [r7, #20]
  return(result);
 800b9fa:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d17e      	bne.n	800bafe <osThreadNew+0x11a>
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d07b      	beq.n	800bafe <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800ba06:	2380      	movs	r3, #128	@ 0x80
 800ba08:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800ba0a:	2318      	movs	r3, #24
 800ba0c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800ba0e:	2300      	movs	r3, #0
 800ba10:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800ba12:	f04f 33ff 	mov.w	r3, #4294967295
 800ba16:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d045      	beq.n	800baaa <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d002      	beq.n	800ba2c <osThreadNew+0x48>
        name = attr->name;
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	699b      	ldr	r3, [r3, #24]
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d002      	beq.n	800ba3a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	699b      	ldr	r3, [r3, #24]
 800ba38:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800ba3a:	69fb      	ldr	r3, [r7, #28]
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d008      	beq.n	800ba52 <osThreadNew+0x6e>
 800ba40:	69fb      	ldr	r3, [r7, #28]
 800ba42:	2b38      	cmp	r3, #56	@ 0x38
 800ba44:	d805      	bhi.n	800ba52 <osThreadNew+0x6e>
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	685b      	ldr	r3, [r3, #4]
 800ba4a:	f003 0301 	and.w	r3, r3, #1
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d001      	beq.n	800ba56 <osThreadNew+0x72>
        return (NULL);
 800ba52:	2300      	movs	r3, #0
 800ba54:	e054      	b.n	800bb00 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	695b      	ldr	r3, [r3, #20]
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d003      	beq.n	800ba66 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	695b      	ldr	r3, [r3, #20]
 800ba62:	089b      	lsrs	r3, r3, #2
 800ba64:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	689b      	ldr	r3, [r3, #8]
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d00e      	beq.n	800ba8c <osThreadNew+0xa8>
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	68db      	ldr	r3, [r3, #12]
 800ba72:	2ba7      	cmp	r3, #167	@ 0xa7
 800ba74:	d90a      	bls.n	800ba8c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d006      	beq.n	800ba8c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	695b      	ldr	r3, [r3, #20]
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d002      	beq.n	800ba8c <osThreadNew+0xa8>
        mem = 1;
 800ba86:	2301      	movs	r3, #1
 800ba88:	61bb      	str	r3, [r7, #24]
 800ba8a:	e010      	b.n	800baae <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	689b      	ldr	r3, [r3, #8]
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d10c      	bne.n	800baae <osThreadNew+0xca>
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	68db      	ldr	r3, [r3, #12]
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d108      	bne.n	800baae <osThreadNew+0xca>
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	691b      	ldr	r3, [r3, #16]
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d104      	bne.n	800baae <osThreadNew+0xca>
          mem = 0;
 800baa4:	2300      	movs	r3, #0
 800baa6:	61bb      	str	r3, [r7, #24]
 800baa8:	e001      	b.n	800baae <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800baaa:	2300      	movs	r3, #0
 800baac:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800baae:	69bb      	ldr	r3, [r7, #24]
 800bab0:	2b01      	cmp	r3, #1
 800bab2:	d110      	bne.n	800bad6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800bab8:	687a      	ldr	r2, [r7, #4]
 800baba:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800babc:	9202      	str	r2, [sp, #8]
 800babe:	9301      	str	r3, [sp, #4]
 800bac0:	69fb      	ldr	r3, [r7, #28]
 800bac2:	9300      	str	r3, [sp, #0]
 800bac4:	68bb      	ldr	r3, [r7, #8]
 800bac6:	6a3a      	ldr	r2, [r7, #32]
 800bac8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800baca:	68f8      	ldr	r0, [r7, #12]
 800bacc:	f001 f808 	bl	800cae0 <xTaskCreateStatic>
 800bad0:	4603      	mov	r3, r0
 800bad2:	613b      	str	r3, [r7, #16]
 800bad4:	e013      	b.n	800bafe <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800bad6:	69bb      	ldr	r3, [r7, #24]
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d110      	bne.n	800bafe <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800badc:	6a3b      	ldr	r3, [r7, #32]
 800bade:	b29a      	uxth	r2, r3
 800bae0:	f107 0310 	add.w	r3, r7, #16
 800bae4:	9301      	str	r3, [sp, #4]
 800bae6:	69fb      	ldr	r3, [r7, #28]
 800bae8:	9300      	str	r3, [sp, #0]
 800baea:	68bb      	ldr	r3, [r7, #8]
 800baec:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800baee:	68f8      	ldr	r0, [r7, #12]
 800baf0:	f001 f856 	bl	800cba0 <xTaskCreate>
 800baf4:	4603      	mov	r3, r0
 800baf6:	2b01      	cmp	r3, #1
 800baf8:	d001      	beq.n	800bafe <osThreadNew+0x11a>
            hTask = NULL;
 800bafa:	2300      	movs	r3, #0
 800bafc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800bafe:	693b      	ldr	r3, [r7, #16]
}
 800bb00:	4618      	mov	r0, r3
 800bb02:	3728      	adds	r7, #40	@ 0x28
 800bb04:	46bd      	mov	sp, r7
 800bb06:	bd80      	pop	{r7, pc}

0800bb08 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800bb08:	b580      	push	{r7, lr}
 800bb0a:	b084      	sub	sp, #16
 800bb0c:	af00      	add	r7, sp, #0
 800bb0e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bb10:	f3ef 8305 	mrs	r3, IPSR
 800bb14:	60bb      	str	r3, [r7, #8]
  return(result);
 800bb16:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d003      	beq.n	800bb24 <osDelay+0x1c>
    stat = osErrorISR;
 800bb1c:	f06f 0305 	mvn.w	r3, #5
 800bb20:	60fb      	str	r3, [r7, #12]
 800bb22:	e007      	b.n	800bb34 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800bb24:	2300      	movs	r3, #0
 800bb26:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d002      	beq.n	800bb34 <osDelay+0x2c>
      vTaskDelay(ticks);
 800bb2e:	6878      	ldr	r0, [r7, #4]
 800bb30:	f001 fa14 	bl	800cf5c <vTaskDelay>
    }
  }

  return (stat);
 800bb34:	68fb      	ldr	r3, [r7, #12]
}
 800bb36:	4618      	mov	r0, r3
 800bb38:	3710      	adds	r7, #16
 800bb3a:	46bd      	mov	sp, r7
 800bb3c:	bd80      	pop	{r7, pc}

0800bb3e <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800bb3e:	b580      	push	{r7, lr}
 800bb40:	b08a      	sub	sp, #40	@ 0x28
 800bb42:	af02      	add	r7, sp, #8
 800bb44:	60f8      	str	r0, [r7, #12]
 800bb46:	60b9      	str	r1, [r7, #8]
 800bb48:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800bb4a:	2300      	movs	r3, #0
 800bb4c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bb4e:	f3ef 8305 	mrs	r3, IPSR
 800bb52:	613b      	str	r3, [r7, #16]
  return(result);
 800bb54:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d15f      	bne.n	800bc1a <osMessageQueueNew+0xdc>
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d05c      	beq.n	800bc1a <osMessageQueueNew+0xdc>
 800bb60:	68bb      	ldr	r3, [r7, #8]
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d059      	beq.n	800bc1a <osMessageQueueNew+0xdc>
    mem = -1;
 800bb66:	f04f 33ff 	mov.w	r3, #4294967295
 800bb6a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d029      	beq.n	800bbc6 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	689b      	ldr	r3, [r3, #8]
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d012      	beq.n	800bba0 <osMessageQueueNew+0x62>
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	68db      	ldr	r3, [r3, #12]
 800bb7e:	2b4f      	cmp	r3, #79	@ 0x4f
 800bb80:	d90e      	bls.n	800bba0 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d00a      	beq.n	800bba0 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	695a      	ldr	r2, [r3, #20]
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	68b9      	ldr	r1, [r7, #8]
 800bb92:	fb01 f303 	mul.w	r3, r1, r3
 800bb96:	429a      	cmp	r2, r3
 800bb98:	d302      	bcc.n	800bba0 <osMessageQueueNew+0x62>
        mem = 1;
 800bb9a:	2301      	movs	r3, #1
 800bb9c:	61bb      	str	r3, [r7, #24]
 800bb9e:	e014      	b.n	800bbca <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	689b      	ldr	r3, [r3, #8]
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d110      	bne.n	800bbca <osMessageQueueNew+0x8c>
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	68db      	ldr	r3, [r3, #12]
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d10c      	bne.n	800bbca <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d108      	bne.n	800bbca <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	695b      	ldr	r3, [r3, #20]
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d104      	bne.n	800bbca <osMessageQueueNew+0x8c>
          mem = 0;
 800bbc0:	2300      	movs	r3, #0
 800bbc2:	61bb      	str	r3, [r7, #24]
 800bbc4:	e001      	b.n	800bbca <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800bbc6:	2300      	movs	r3, #0
 800bbc8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800bbca:	69bb      	ldr	r3, [r7, #24]
 800bbcc:	2b01      	cmp	r3, #1
 800bbce:	d10b      	bne.n	800bbe8 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	691a      	ldr	r2, [r3, #16]
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	689b      	ldr	r3, [r3, #8]
 800bbd8:	2100      	movs	r1, #0
 800bbda:	9100      	str	r1, [sp, #0]
 800bbdc:	68b9      	ldr	r1, [r7, #8]
 800bbde:	68f8      	ldr	r0, [r7, #12]
 800bbe0:	f000 fa30 	bl	800c044 <xQueueGenericCreateStatic>
 800bbe4:	61f8      	str	r0, [r7, #28]
 800bbe6:	e008      	b.n	800bbfa <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800bbe8:	69bb      	ldr	r3, [r7, #24]
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d105      	bne.n	800bbfa <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800bbee:	2200      	movs	r2, #0
 800bbf0:	68b9      	ldr	r1, [r7, #8]
 800bbf2:	68f8      	ldr	r0, [r7, #12]
 800bbf4:	f000 faa3 	bl	800c13e <xQueueGenericCreate>
 800bbf8:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800bbfa:	69fb      	ldr	r3, [r7, #28]
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d00c      	beq.n	800bc1a <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d003      	beq.n	800bc0e <osMessageQueueNew+0xd0>
        name = attr->name;
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	617b      	str	r3, [r7, #20]
 800bc0c:	e001      	b.n	800bc12 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800bc0e:	2300      	movs	r3, #0
 800bc10:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800bc12:	6979      	ldr	r1, [r7, #20]
 800bc14:	69f8      	ldr	r0, [r7, #28]
 800bc16:	f000 ff05 	bl	800ca24 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800bc1a:	69fb      	ldr	r3, [r7, #28]
}
 800bc1c:	4618      	mov	r0, r3
 800bc1e:	3720      	adds	r7, #32
 800bc20:	46bd      	mov	sp, r7
 800bc22:	bd80      	pop	{r7, pc}

0800bc24 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800bc24:	b580      	push	{r7, lr}
 800bc26:	b088      	sub	sp, #32
 800bc28:	af00      	add	r7, sp, #0
 800bc2a:	60f8      	str	r0, [r7, #12]
 800bc2c:	60b9      	str	r1, [r7, #8]
 800bc2e:	603b      	str	r3, [r7, #0]
 800bc30:	4613      	mov	r3, r2
 800bc32:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800bc38:	2300      	movs	r3, #0
 800bc3a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bc3c:	f3ef 8305 	mrs	r3, IPSR
 800bc40:	617b      	str	r3, [r7, #20]
  return(result);
 800bc42:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d028      	beq.n	800bc9a <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800bc48:	69bb      	ldr	r3, [r7, #24]
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d005      	beq.n	800bc5a <osMessageQueuePut+0x36>
 800bc4e:	68bb      	ldr	r3, [r7, #8]
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d002      	beq.n	800bc5a <osMessageQueuePut+0x36>
 800bc54:	683b      	ldr	r3, [r7, #0]
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d003      	beq.n	800bc62 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800bc5a:	f06f 0303 	mvn.w	r3, #3
 800bc5e:	61fb      	str	r3, [r7, #28]
 800bc60:	e038      	b.n	800bcd4 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800bc62:	2300      	movs	r3, #0
 800bc64:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800bc66:	f107 0210 	add.w	r2, r7, #16
 800bc6a:	2300      	movs	r3, #0
 800bc6c:	68b9      	ldr	r1, [r7, #8]
 800bc6e:	69b8      	ldr	r0, [r7, #24]
 800bc70:	f000 fbc6 	bl	800c400 <xQueueGenericSendFromISR>
 800bc74:	4603      	mov	r3, r0
 800bc76:	2b01      	cmp	r3, #1
 800bc78:	d003      	beq.n	800bc82 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800bc7a:	f06f 0302 	mvn.w	r3, #2
 800bc7e:	61fb      	str	r3, [r7, #28]
 800bc80:	e028      	b.n	800bcd4 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800bc82:	693b      	ldr	r3, [r7, #16]
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d025      	beq.n	800bcd4 <osMessageQueuePut+0xb0>
 800bc88:	4b15      	ldr	r3, [pc, #84]	@ (800bce0 <osMessageQueuePut+0xbc>)
 800bc8a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bc8e:	601a      	str	r2, [r3, #0]
 800bc90:	f3bf 8f4f 	dsb	sy
 800bc94:	f3bf 8f6f 	isb	sy
 800bc98:	e01c      	b.n	800bcd4 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800bc9a:	69bb      	ldr	r3, [r7, #24]
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d002      	beq.n	800bca6 <osMessageQueuePut+0x82>
 800bca0:	68bb      	ldr	r3, [r7, #8]
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d103      	bne.n	800bcae <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800bca6:	f06f 0303 	mvn.w	r3, #3
 800bcaa:	61fb      	str	r3, [r7, #28]
 800bcac:	e012      	b.n	800bcd4 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800bcae:	2300      	movs	r3, #0
 800bcb0:	683a      	ldr	r2, [r7, #0]
 800bcb2:	68b9      	ldr	r1, [r7, #8]
 800bcb4:	69b8      	ldr	r0, [r7, #24]
 800bcb6:	f000 faa1 	bl	800c1fc <xQueueGenericSend>
 800bcba:	4603      	mov	r3, r0
 800bcbc:	2b01      	cmp	r3, #1
 800bcbe:	d009      	beq.n	800bcd4 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800bcc0:	683b      	ldr	r3, [r7, #0]
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d003      	beq.n	800bcce <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800bcc6:	f06f 0301 	mvn.w	r3, #1
 800bcca:	61fb      	str	r3, [r7, #28]
 800bccc:	e002      	b.n	800bcd4 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800bcce:	f06f 0302 	mvn.w	r3, #2
 800bcd2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800bcd4:	69fb      	ldr	r3, [r7, #28]
}
 800bcd6:	4618      	mov	r0, r3
 800bcd8:	3720      	adds	r7, #32
 800bcda:	46bd      	mov	sp, r7
 800bcdc:	bd80      	pop	{r7, pc}
 800bcde:	bf00      	nop
 800bce0:	e000ed04 	.word	0xe000ed04

0800bce4 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800bce4:	b580      	push	{r7, lr}
 800bce6:	b088      	sub	sp, #32
 800bce8:	af00      	add	r7, sp, #0
 800bcea:	60f8      	str	r0, [r7, #12]
 800bcec:	60b9      	str	r1, [r7, #8]
 800bcee:	607a      	str	r2, [r7, #4]
 800bcf0:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800bcf6:	2300      	movs	r3, #0
 800bcf8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bcfa:	f3ef 8305 	mrs	r3, IPSR
 800bcfe:	617b      	str	r3, [r7, #20]
  return(result);
 800bd00:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d028      	beq.n	800bd58 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800bd06:	69bb      	ldr	r3, [r7, #24]
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d005      	beq.n	800bd18 <osMessageQueueGet+0x34>
 800bd0c:	68bb      	ldr	r3, [r7, #8]
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d002      	beq.n	800bd18 <osMessageQueueGet+0x34>
 800bd12:	683b      	ldr	r3, [r7, #0]
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d003      	beq.n	800bd20 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800bd18:	f06f 0303 	mvn.w	r3, #3
 800bd1c:	61fb      	str	r3, [r7, #28]
 800bd1e:	e037      	b.n	800bd90 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800bd20:	2300      	movs	r3, #0
 800bd22:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800bd24:	f107 0310 	add.w	r3, r7, #16
 800bd28:	461a      	mov	r2, r3
 800bd2a:	68b9      	ldr	r1, [r7, #8]
 800bd2c:	69b8      	ldr	r0, [r7, #24]
 800bd2e:	f000 fce7 	bl	800c700 <xQueueReceiveFromISR>
 800bd32:	4603      	mov	r3, r0
 800bd34:	2b01      	cmp	r3, #1
 800bd36:	d003      	beq.n	800bd40 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800bd38:	f06f 0302 	mvn.w	r3, #2
 800bd3c:	61fb      	str	r3, [r7, #28]
 800bd3e:	e027      	b.n	800bd90 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800bd40:	693b      	ldr	r3, [r7, #16]
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d024      	beq.n	800bd90 <osMessageQueueGet+0xac>
 800bd46:	4b15      	ldr	r3, [pc, #84]	@ (800bd9c <osMessageQueueGet+0xb8>)
 800bd48:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bd4c:	601a      	str	r2, [r3, #0]
 800bd4e:	f3bf 8f4f 	dsb	sy
 800bd52:	f3bf 8f6f 	isb	sy
 800bd56:	e01b      	b.n	800bd90 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800bd58:	69bb      	ldr	r3, [r7, #24]
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d002      	beq.n	800bd64 <osMessageQueueGet+0x80>
 800bd5e:	68bb      	ldr	r3, [r7, #8]
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d103      	bne.n	800bd6c <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800bd64:	f06f 0303 	mvn.w	r3, #3
 800bd68:	61fb      	str	r3, [r7, #28]
 800bd6a:	e011      	b.n	800bd90 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800bd6c:	683a      	ldr	r2, [r7, #0]
 800bd6e:	68b9      	ldr	r1, [r7, #8]
 800bd70:	69b8      	ldr	r0, [r7, #24]
 800bd72:	f000 fbe3 	bl	800c53c <xQueueReceive>
 800bd76:	4603      	mov	r3, r0
 800bd78:	2b01      	cmp	r3, #1
 800bd7a:	d009      	beq.n	800bd90 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800bd7c:	683b      	ldr	r3, [r7, #0]
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d003      	beq.n	800bd8a <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800bd82:	f06f 0301 	mvn.w	r3, #1
 800bd86:	61fb      	str	r3, [r7, #28]
 800bd88:	e002      	b.n	800bd90 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800bd8a:	f06f 0302 	mvn.w	r3, #2
 800bd8e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800bd90:	69fb      	ldr	r3, [r7, #28]
}
 800bd92:	4618      	mov	r0, r3
 800bd94:	3720      	adds	r7, #32
 800bd96:	46bd      	mov	sp, r7
 800bd98:	bd80      	pop	{r7, pc}
 800bd9a:	bf00      	nop
 800bd9c:	e000ed04 	.word	0xe000ed04

0800bda0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800bda0:	b480      	push	{r7}
 800bda2:	b085      	sub	sp, #20
 800bda4:	af00      	add	r7, sp, #0
 800bda6:	60f8      	str	r0, [r7, #12]
 800bda8:	60b9      	str	r1, [r7, #8]
 800bdaa:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	4a07      	ldr	r2, [pc, #28]	@ (800bdcc <vApplicationGetIdleTaskMemory+0x2c>)
 800bdb0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800bdb2:	68bb      	ldr	r3, [r7, #8]
 800bdb4:	4a06      	ldr	r2, [pc, #24]	@ (800bdd0 <vApplicationGetIdleTaskMemory+0x30>)
 800bdb6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	2280      	movs	r2, #128	@ 0x80
 800bdbc:	601a      	str	r2, [r3, #0]
}
 800bdbe:	bf00      	nop
 800bdc0:	3714      	adds	r7, #20
 800bdc2:	46bd      	mov	sp, r7
 800bdc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc8:	4770      	bx	lr
 800bdca:	bf00      	nop
 800bdcc:	20000ae8 	.word	0x20000ae8
 800bdd0:	20000b90 	.word	0x20000b90

0800bdd4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800bdd4:	b480      	push	{r7}
 800bdd6:	b085      	sub	sp, #20
 800bdd8:	af00      	add	r7, sp, #0
 800bdda:	60f8      	str	r0, [r7, #12]
 800bddc:	60b9      	str	r1, [r7, #8]
 800bdde:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	4a07      	ldr	r2, [pc, #28]	@ (800be00 <vApplicationGetTimerTaskMemory+0x2c>)
 800bde4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800bde6:	68bb      	ldr	r3, [r7, #8]
 800bde8:	4a06      	ldr	r2, [pc, #24]	@ (800be04 <vApplicationGetTimerTaskMemory+0x30>)
 800bdea:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800bdf2:	601a      	str	r2, [r3, #0]
}
 800bdf4:	bf00      	nop
 800bdf6:	3714      	adds	r7, #20
 800bdf8:	46bd      	mov	sp, r7
 800bdfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdfe:	4770      	bx	lr
 800be00:	20000d90 	.word	0x20000d90
 800be04:	20000e38 	.word	0x20000e38

0800be08 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800be08:	b480      	push	{r7}
 800be0a:	b083      	sub	sp, #12
 800be0c:	af00      	add	r7, sp, #0
 800be0e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	f103 0208 	add.w	r2, r3, #8
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	f04f 32ff 	mov.w	r2, #4294967295
 800be20:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	f103 0208 	add.w	r2, r3, #8
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	f103 0208 	add.w	r2, r3, #8
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	2200      	movs	r2, #0
 800be3a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800be3c:	bf00      	nop
 800be3e:	370c      	adds	r7, #12
 800be40:	46bd      	mov	sp, r7
 800be42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be46:	4770      	bx	lr

0800be48 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800be48:	b480      	push	{r7}
 800be4a:	b083      	sub	sp, #12
 800be4c:	af00      	add	r7, sp, #0
 800be4e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	2200      	movs	r2, #0
 800be54:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800be56:	bf00      	nop
 800be58:	370c      	adds	r7, #12
 800be5a:	46bd      	mov	sp, r7
 800be5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be60:	4770      	bx	lr

0800be62 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800be62:	b480      	push	{r7}
 800be64:	b085      	sub	sp, #20
 800be66:	af00      	add	r7, sp, #0
 800be68:	6078      	str	r0, [r7, #4]
 800be6a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	685b      	ldr	r3, [r3, #4]
 800be70:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800be72:	683b      	ldr	r3, [r7, #0]
 800be74:	68fa      	ldr	r2, [r7, #12]
 800be76:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	689a      	ldr	r2, [r3, #8]
 800be7c:	683b      	ldr	r3, [r7, #0]
 800be7e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	689b      	ldr	r3, [r3, #8]
 800be84:	683a      	ldr	r2, [r7, #0]
 800be86:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	683a      	ldr	r2, [r7, #0]
 800be8c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800be8e:	683b      	ldr	r3, [r7, #0]
 800be90:	687a      	ldr	r2, [r7, #4]
 800be92:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	1c5a      	adds	r2, r3, #1
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	601a      	str	r2, [r3, #0]
}
 800be9e:	bf00      	nop
 800bea0:	3714      	adds	r7, #20
 800bea2:	46bd      	mov	sp, r7
 800bea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bea8:	4770      	bx	lr

0800beaa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800beaa:	b480      	push	{r7}
 800beac:	b085      	sub	sp, #20
 800beae:	af00      	add	r7, sp, #0
 800beb0:	6078      	str	r0, [r7, #4]
 800beb2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800beb4:	683b      	ldr	r3, [r7, #0]
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800beba:	68bb      	ldr	r3, [r7, #8]
 800bebc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bec0:	d103      	bne.n	800beca <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	691b      	ldr	r3, [r3, #16]
 800bec6:	60fb      	str	r3, [r7, #12]
 800bec8:	e00c      	b.n	800bee4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	3308      	adds	r3, #8
 800bece:	60fb      	str	r3, [r7, #12]
 800bed0:	e002      	b.n	800bed8 <vListInsert+0x2e>
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	685b      	ldr	r3, [r3, #4]
 800bed6:	60fb      	str	r3, [r7, #12]
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	685b      	ldr	r3, [r3, #4]
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	68ba      	ldr	r2, [r7, #8]
 800bee0:	429a      	cmp	r2, r3
 800bee2:	d2f6      	bcs.n	800bed2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	685a      	ldr	r2, [r3, #4]
 800bee8:	683b      	ldr	r3, [r7, #0]
 800beea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800beec:	683b      	ldr	r3, [r7, #0]
 800beee:	685b      	ldr	r3, [r3, #4]
 800bef0:	683a      	ldr	r2, [r7, #0]
 800bef2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800bef4:	683b      	ldr	r3, [r7, #0]
 800bef6:	68fa      	ldr	r2, [r7, #12]
 800bef8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	683a      	ldr	r2, [r7, #0]
 800befe:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800bf00:	683b      	ldr	r3, [r7, #0]
 800bf02:	687a      	ldr	r2, [r7, #4]
 800bf04:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	1c5a      	adds	r2, r3, #1
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	601a      	str	r2, [r3, #0]
}
 800bf10:	bf00      	nop
 800bf12:	3714      	adds	r7, #20
 800bf14:	46bd      	mov	sp, r7
 800bf16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf1a:	4770      	bx	lr

0800bf1c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800bf1c:	b480      	push	{r7}
 800bf1e:	b085      	sub	sp, #20
 800bf20:	af00      	add	r7, sp, #0
 800bf22:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	691b      	ldr	r3, [r3, #16]
 800bf28:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	685b      	ldr	r3, [r3, #4]
 800bf2e:	687a      	ldr	r2, [r7, #4]
 800bf30:	6892      	ldr	r2, [r2, #8]
 800bf32:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	689b      	ldr	r3, [r3, #8]
 800bf38:	687a      	ldr	r2, [r7, #4]
 800bf3a:	6852      	ldr	r2, [r2, #4]
 800bf3c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	685b      	ldr	r3, [r3, #4]
 800bf42:	687a      	ldr	r2, [r7, #4]
 800bf44:	429a      	cmp	r2, r3
 800bf46:	d103      	bne.n	800bf50 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	689a      	ldr	r2, [r3, #8]
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	2200      	movs	r2, #0
 800bf54:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	1e5a      	subs	r2, r3, #1
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	681b      	ldr	r3, [r3, #0]
}
 800bf64:	4618      	mov	r0, r3
 800bf66:	3714      	adds	r7, #20
 800bf68:	46bd      	mov	sp, r7
 800bf6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf6e:	4770      	bx	lr

0800bf70 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800bf70:	b580      	push	{r7, lr}
 800bf72:	b084      	sub	sp, #16
 800bf74:	af00      	add	r7, sp, #0
 800bf76:	6078      	str	r0, [r7, #4]
 800bf78:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d10b      	bne.n	800bf9c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800bf84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf88:	f383 8811 	msr	BASEPRI, r3
 800bf8c:	f3bf 8f6f 	isb	sy
 800bf90:	f3bf 8f4f 	dsb	sy
 800bf94:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800bf96:	bf00      	nop
 800bf98:	bf00      	nop
 800bf9a:	e7fd      	b.n	800bf98 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800bf9c:	f002 f9e4 	bl	800e368 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	681a      	ldr	r2, [r3, #0]
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bfa8:	68f9      	ldr	r1, [r7, #12]
 800bfaa:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800bfac:	fb01 f303 	mul.w	r3, r1, r3
 800bfb0:	441a      	add	r2, r3
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	2200      	movs	r2, #0
 800bfba:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	681a      	ldr	r2, [r3, #0]
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	681a      	ldr	r2, [r3, #0]
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bfcc:	3b01      	subs	r3, #1
 800bfce:	68f9      	ldr	r1, [r7, #12]
 800bfd0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800bfd2:	fb01 f303 	mul.w	r3, r1, r3
 800bfd6:	441a      	add	r2, r3
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	22ff      	movs	r2, #255	@ 0xff
 800bfe0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	22ff      	movs	r2, #255	@ 0xff
 800bfe8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800bfec:	683b      	ldr	r3, [r7, #0]
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d114      	bne.n	800c01c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	691b      	ldr	r3, [r3, #16]
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d01a      	beq.n	800c030 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	3310      	adds	r3, #16
 800bffe:	4618      	mov	r0, r3
 800c000:	f001 fa80 	bl	800d504 <xTaskRemoveFromEventList>
 800c004:	4603      	mov	r3, r0
 800c006:	2b00      	cmp	r3, #0
 800c008:	d012      	beq.n	800c030 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c00a:	4b0d      	ldr	r3, [pc, #52]	@ (800c040 <xQueueGenericReset+0xd0>)
 800c00c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c010:	601a      	str	r2, [r3, #0]
 800c012:	f3bf 8f4f 	dsb	sy
 800c016:	f3bf 8f6f 	isb	sy
 800c01a:	e009      	b.n	800c030 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	3310      	adds	r3, #16
 800c020:	4618      	mov	r0, r3
 800c022:	f7ff fef1 	bl	800be08 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	3324      	adds	r3, #36	@ 0x24
 800c02a:	4618      	mov	r0, r3
 800c02c:	f7ff feec 	bl	800be08 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c030:	f002 f9cc 	bl	800e3cc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c034:	2301      	movs	r3, #1
}
 800c036:	4618      	mov	r0, r3
 800c038:	3710      	adds	r7, #16
 800c03a:	46bd      	mov	sp, r7
 800c03c:	bd80      	pop	{r7, pc}
 800c03e:	bf00      	nop
 800c040:	e000ed04 	.word	0xe000ed04

0800c044 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c044:	b580      	push	{r7, lr}
 800c046:	b08e      	sub	sp, #56	@ 0x38
 800c048:	af02      	add	r7, sp, #8
 800c04a:	60f8      	str	r0, [r7, #12]
 800c04c:	60b9      	str	r1, [r7, #8]
 800c04e:	607a      	str	r2, [r7, #4]
 800c050:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	2b00      	cmp	r3, #0
 800c056:	d10b      	bne.n	800c070 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800c058:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c05c:	f383 8811 	msr	BASEPRI, r3
 800c060:	f3bf 8f6f 	isb	sy
 800c064:	f3bf 8f4f 	dsb	sy
 800c068:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c06a:	bf00      	nop
 800c06c:	bf00      	nop
 800c06e:	e7fd      	b.n	800c06c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c070:	683b      	ldr	r3, [r7, #0]
 800c072:	2b00      	cmp	r3, #0
 800c074:	d10b      	bne.n	800c08e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800c076:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c07a:	f383 8811 	msr	BASEPRI, r3
 800c07e:	f3bf 8f6f 	isb	sy
 800c082:	f3bf 8f4f 	dsb	sy
 800c086:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c088:	bf00      	nop
 800c08a:	bf00      	nop
 800c08c:	e7fd      	b.n	800c08a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	2b00      	cmp	r3, #0
 800c092:	d002      	beq.n	800c09a <xQueueGenericCreateStatic+0x56>
 800c094:	68bb      	ldr	r3, [r7, #8]
 800c096:	2b00      	cmp	r3, #0
 800c098:	d001      	beq.n	800c09e <xQueueGenericCreateStatic+0x5a>
 800c09a:	2301      	movs	r3, #1
 800c09c:	e000      	b.n	800c0a0 <xQueueGenericCreateStatic+0x5c>
 800c09e:	2300      	movs	r3, #0
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d10b      	bne.n	800c0bc <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800c0a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0a8:	f383 8811 	msr	BASEPRI, r3
 800c0ac:	f3bf 8f6f 	isb	sy
 800c0b0:	f3bf 8f4f 	dsb	sy
 800c0b4:	623b      	str	r3, [r7, #32]
}
 800c0b6:	bf00      	nop
 800c0b8:	bf00      	nop
 800c0ba:	e7fd      	b.n	800c0b8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d102      	bne.n	800c0c8 <xQueueGenericCreateStatic+0x84>
 800c0c2:	68bb      	ldr	r3, [r7, #8]
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d101      	bne.n	800c0cc <xQueueGenericCreateStatic+0x88>
 800c0c8:	2301      	movs	r3, #1
 800c0ca:	e000      	b.n	800c0ce <xQueueGenericCreateStatic+0x8a>
 800c0cc:	2300      	movs	r3, #0
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d10b      	bne.n	800c0ea <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800c0d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0d6:	f383 8811 	msr	BASEPRI, r3
 800c0da:	f3bf 8f6f 	isb	sy
 800c0de:	f3bf 8f4f 	dsb	sy
 800c0e2:	61fb      	str	r3, [r7, #28]
}
 800c0e4:	bf00      	nop
 800c0e6:	bf00      	nop
 800c0e8:	e7fd      	b.n	800c0e6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c0ea:	2350      	movs	r3, #80	@ 0x50
 800c0ec:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c0ee:	697b      	ldr	r3, [r7, #20]
 800c0f0:	2b50      	cmp	r3, #80	@ 0x50
 800c0f2:	d00b      	beq.n	800c10c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800c0f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0f8:	f383 8811 	msr	BASEPRI, r3
 800c0fc:	f3bf 8f6f 	isb	sy
 800c100:	f3bf 8f4f 	dsb	sy
 800c104:	61bb      	str	r3, [r7, #24]
}
 800c106:	bf00      	nop
 800c108:	bf00      	nop
 800c10a:	e7fd      	b.n	800c108 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c10c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c10e:	683b      	ldr	r3, [r7, #0]
 800c110:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800c112:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c114:	2b00      	cmp	r3, #0
 800c116:	d00d      	beq.n	800c134 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c118:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c11a:	2201      	movs	r2, #1
 800c11c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c120:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800c124:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c126:	9300      	str	r3, [sp, #0]
 800c128:	4613      	mov	r3, r2
 800c12a:	687a      	ldr	r2, [r7, #4]
 800c12c:	68b9      	ldr	r1, [r7, #8]
 800c12e:	68f8      	ldr	r0, [r7, #12]
 800c130:	f000 f840 	bl	800c1b4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c134:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800c136:	4618      	mov	r0, r3
 800c138:	3730      	adds	r7, #48	@ 0x30
 800c13a:	46bd      	mov	sp, r7
 800c13c:	bd80      	pop	{r7, pc}

0800c13e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800c13e:	b580      	push	{r7, lr}
 800c140:	b08a      	sub	sp, #40	@ 0x28
 800c142:	af02      	add	r7, sp, #8
 800c144:	60f8      	str	r0, [r7, #12]
 800c146:	60b9      	str	r1, [r7, #8]
 800c148:	4613      	mov	r3, r2
 800c14a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d10b      	bne.n	800c16a <xQueueGenericCreate+0x2c>
	__asm volatile
 800c152:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c156:	f383 8811 	msr	BASEPRI, r3
 800c15a:	f3bf 8f6f 	isb	sy
 800c15e:	f3bf 8f4f 	dsb	sy
 800c162:	613b      	str	r3, [r7, #16]
}
 800c164:	bf00      	nop
 800c166:	bf00      	nop
 800c168:	e7fd      	b.n	800c166 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	68ba      	ldr	r2, [r7, #8]
 800c16e:	fb02 f303 	mul.w	r3, r2, r3
 800c172:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800c174:	69fb      	ldr	r3, [r7, #28]
 800c176:	3350      	adds	r3, #80	@ 0x50
 800c178:	4618      	mov	r0, r3
 800c17a:	f002 fa17 	bl	800e5ac <pvPortMalloc>
 800c17e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800c180:	69bb      	ldr	r3, [r7, #24]
 800c182:	2b00      	cmp	r3, #0
 800c184:	d011      	beq.n	800c1aa <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800c186:	69bb      	ldr	r3, [r7, #24]
 800c188:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c18a:	697b      	ldr	r3, [r7, #20]
 800c18c:	3350      	adds	r3, #80	@ 0x50
 800c18e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c190:	69bb      	ldr	r3, [r7, #24]
 800c192:	2200      	movs	r2, #0
 800c194:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c198:	79fa      	ldrb	r2, [r7, #7]
 800c19a:	69bb      	ldr	r3, [r7, #24]
 800c19c:	9300      	str	r3, [sp, #0]
 800c19e:	4613      	mov	r3, r2
 800c1a0:	697a      	ldr	r2, [r7, #20]
 800c1a2:	68b9      	ldr	r1, [r7, #8]
 800c1a4:	68f8      	ldr	r0, [r7, #12]
 800c1a6:	f000 f805 	bl	800c1b4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c1aa:	69bb      	ldr	r3, [r7, #24]
	}
 800c1ac:	4618      	mov	r0, r3
 800c1ae:	3720      	adds	r7, #32
 800c1b0:	46bd      	mov	sp, r7
 800c1b2:	bd80      	pop	{r7, pc}

0800c1b4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c1b4:	b580      	push	{r7, lr}
 800c1b6:	b084      	sub	sp, #16
 800c1b8:	af00      	add	r7, sp, #0
 800c1ba:	60f8      	str	r0, [r7, #12]
 800c1bc:	60b9      	str	r1, [r7, #8]
 800c1be:	607a      	str	r2, [r7, #4]
 800c1c0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c1c2:	68bb      	ldr	r3, [r7, #8]
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d103      	bne.n	800c1d0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c1c8:	69bb      	ldr	r3, [r7, #24]
 800c1ca:	69ba      	ldr	r2, [r7, #24]
 800c1cc:	601a      	str	r2, [r3, #0]
 800c1ce:	e002      	b.n	800c1d6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c1d0:	69bb      	ldr	r3, [r7, #24]
 800c1d2:	687a      	ldr	r2, [r7, #4]
 800c1d4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c1d6:	69bb      	ldr	r3, [r7, #24]
 800c1d8:	68fa      	ldr	r2, [r7, #12]
 800c1da:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c1dc:	69bb      	ldr	r3, [r7, #24]
 800c1de:	68ba      	ldr	r2, [r7, #8]
 800c1e0:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c1e2:	2101      	movs	r1, #1
 800c1e4:	69b8      	ldr	r0, [r7, #24]
 800c1e6:	f7ff fec3 	bl	800bf70 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800c1ea:	69bb      	ldr	r3, [r7, #24]
 800c1ec:	78fa      	ldrb	r2, [r7, #3]
 800c1ee:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c1f2:	bf00      	nop
 800c1f4:	3710      	adds	r7, #16
 800c1f6:	46bd      	mov	sp, r7
 800c1f8:	bd80      	pop	{r7, pc}
	...

0800c1fc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c1fc:	b580      	push	{r7, lr}
 800c1fe:	b08e      	sub	sp, #56	@ 0x38
 800c200:	af00      	add	r7, sp, #0
 800c202:	60f8      	str	r0, [r7, #12]
 800c204:	60b9      	str	r1, [r7, #8]
 800c206:	607a      	str	r2, [r7, #4]
 800c208:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c20a:	2300      	movs	r3, #0
 800c20c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800c212:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c214:	2b00      	cmp	r3, #0
 800c216:	d10b      	bne.n	800c230 <xQueueGenericSend+0x34>
	__asm volatile
 800c218:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c21c:	f383 8811 	msr	BASEPRI, r3
 800c220:	f3bf 8f6f 	isb	sy
 800c224:	f3bf 8f4f 	dsb	sy
 800c228:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c22a:	bf00      	nop
 800c22c:	bf00      	nop
 800c22e:	e7fd      	b.n	800c22c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c230:	68bb      	ldr	r3, [r7, #8]
 800c232:	2b00      	cmp	r3, #0
 800c234:	d103      	bne.n	800c23e <xQueueGenericSend+0x42>
 800c236:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c238:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d101      	bne.n	800c242 <xQueueGenericSend+0x46>
 800c23e:	2301      	movs	r3, #1
 800c240:	e000      	b.n	800c244 <xQueueGenericSend+0x48>
 800c242:	2300      	movs	r3, #0
 800c244:	2b00      	cmp	r3, #0
 800c246:	d10b      	bne.n	800c260 <xQueueGenericSend+0x64>
	__asm volatile
 800c248:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c24c:	f383 8811 	msr	BASEPRI, r3
 800c250:	f3bf 8f6f 	isb	sy
 800c254:	f3bf 8f4f 	dsb	sy
 800c258:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c25a:	bf00      	nop
 800c25c:	bf00      	nop
 800c25e:	e7fd      	b.n	800c25c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c260:	683b      	ldr	r3, [r7, #0]
 800c262:	2b02      	cmp	r3, #2
 800c264:	d103      	bne.n	800c26e <xQueueGenericSend+0x72>
 800c266:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c268:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c26a:	2b01      	cmp	r3, #1
 800c26c:	d101      	bne.n	800c272 <xQueueGenericSend+0x76>
 800c26e:	2301      	movs	r3, #1
 800c270:	e000      	b.n	800c274 <xQueueGenericSend+0x78>
 800c272:	2300      	movs	r3, #0
 800c274:	2b00      	cmp	r3, #0
 800c276:	d10b      	bne.n	800c290 <xQueueGenericSend+0x94>
	__asm volatile
 800c278:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c27c:	f383 8811 	msr	BASEPRI, r3
 800c280:	f3bf 8f6f 	isb	sy
 800c284:	f3bf 8f4f 	dsb	sy
 800c288:	623b      	str	r3, [r7, #32]
}
 800c28a:	bf00      	nop
 800c28c:	bf00      	nop
 800c28e:	e7fd      	b.n	800c28c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c290:	f001 fafe 	bl	800d890 <xTaskGetSchedulerState>
 800c294:	4603      	mov	r3, r0
 800c296:	2b00      	cmp	r3, #0
 800c298:	d102      	bne.n	800c2a0 <xQueueGenericSend+0xa4>
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d101      	bne.n	800c2a4 <xQueueGenericSend+0xa8>
 800c2a0:	2301      	movs	r3, #1
 800c2a2:	e000      	b.n	800c2a6 <xQueueGenericSend+0xaa>
 800c2a4:	2300      	movs	r3, #0
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d10b      	bne.n	800c2c2 <xQueueGenericSend+0xc6>
	__asm volatile
 800c2aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2ae:	f383 8811 	msr	BASEPRI, r3
 800c2b2:	f3bf 8f6f 	isb	sy
 800c2b6:	f3bf 8f4f 	dsb	sy
 800c2ba:	61fb      	str	r3, [r7, #28]
}
 800c2bc:	bf00      	nop
 800c2be:	bf00      	nop
 800c2c0:	e7fd      	b.n	800c2be <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c2c2:	f002 f851 	bl	800e368 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c2c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2c8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c2ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c2ce:	429a      	cmp	r2, r3
 800c2d0:	d302      	bcc.n	800c2d8 <xQueueGenericSend+0xdc>
 800c2d2:	683b      	ldr	r3, [r7, #0]
 800c2d4:	2b02      	cmp	r3, #2
 800c2d6:	d129      	bne.n	800c32c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c2d8:	683a      	ldr	r2, [r7, #0]
 800c2da:	68b9      	ldr	r1, [r7, #8]
 800c2dc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c2de:	f000 fa91 	bl	800c804 <prvCopyDataToQueue>
 800c2e2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c2e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d010      	beq.n	800c30e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c2ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2ee:	3324      	adds	r3, #36	@ 0x24
 800c2f0:	4618      	mov	r0, r3
 800c2f2:	f001 f907 	bl	800d504 <xTaskRemoveFromEventList>
 800c2f6:	4603      	mov	r3, r0
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d013      	beq.n	800c324 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c2fc:	4b3f      	ldr	r3, [pc, #252]	@ (800c3fc <xQueueGenericSend+0x200>)
 800c2fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c302:	601a      	str	r2, [r3, #0]
 800c304:	f3bf 8f4f 	dsb	sy
 800c308:	f3bf 8f6f 	isb	sy
 800c30c:	e00a      	b.n	800c324 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c30e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c310:	2b00      	cmp	r3, #0
 800c312:	d007      	beq.n	800c324 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c314:	4b39      	ldr	r3, [pc, #228]	@ (800c3fc <xQueueGenericSend+0x200>)
 800c316:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c31a:	601a      	str	r2, [r3, #0]
 800c31c:	f3bf 8f4f 	dsb	sy
 800c320:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c324:	f002 f852 	bl	800e3cc <vPortExitCritical>
				return pdPASS;
 800c328:	2301      	movs	r3, #1
 800c32a:	e063      	b.n	800c3f4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d103      	bne.n	800c33a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c332:	f002 f84b 	bl	800e3cc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c336:	2300      	movs	r3, #0
 800c338:	e05c      	b.n	800c3f4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c33a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d106      	bne.n	800c34e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c340:	f107 0314 	add.w	r3, r7, #20
 800c344:	4618      	mov	r0, r3
 800c346:	f001 f941 	bl	800d5cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c34a:	2301      	movs	r3, #1
 800c34c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c34e:	f002 f83d 	bl	800e3cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c352:	f000 fea9 	bl	800d0a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c356:	f002 f807 	bl	800e368 <vPortEnterCritical>
 800c35a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c35c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c360:	b25b      	sxtb	r3, r3
 800c362:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c366:	d103      	bne.n	800c370 <xQueueGenericSend+0x174>
 800c368:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c36a:	2200      	movs	r2, #0
 800c36c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c370:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c372:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c376:	b25b      	sxtb	r3, r3
 800c378:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c37c:	d103      	bne.n	800c386 <xQueueGenericSend+0x18a>
 800c37e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c380:	2200      	movs	r2, #0
 800c382:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c386:	f002 f821 	bl	800e3cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c38a:	1d3a      	adds	r2, r7, #4
 800c38c:	f107 0314 	add.w	r3, r7, #20
 800c390:	4611      	mov	r1, r2
 800c392:	4618      	mov	r0, r3
 800c394:	f001 f930 	bl	800d5f8 <xTaskCheckForTimeOut>
 800c398:	4603      	mov	r3, r0
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d124      	bne.n	800c3e8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c39e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c3a0:	f000 fb28 	bl	800c9f4 <prvIsQueueFull>
 800c3a4:	4603      	mov	r3, r0
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d018      	beq.n	800c3dc <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c3aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3ac:	3310      	adds	r3, #16
 800c3ae:	687a      	ldr	r2, [r7, #4]
 800c3b0:	4611      	mov	r1, r2
 800c3b2:	4618      	mov	r0, r3
 800c3b4:	f001 f854 	bl	800d460 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c3b8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c3ba:	f000 fab3 	bl	800c924 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c3be:	f000 fe81 	bl	800d0c4 <xTaskResumeAll>
 800c3c2:	4603      	mov	r3, r0
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	f47f af7c 	bne.w	800c2c2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800c3ca:	4b0c      	ldr	r3, [pc, #48]	@ (800c3fc <xQueueGenericSend+0x200>)
 800c3cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c3d0:	601a      	str	r2, [r3, #0]
 800c3d2:	f3bf 8f4f 	dsb	sy
 800c3d6:	f3bf 8f6f 	isb	sy
 800c3da:	e772      	b.n	800c2c2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c3dc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c3de:	f000 faa1 	bl	800c924 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c3e2:	f000 fe6f 	bl	800d0c4 <xTaskResumeAll>
 800c3e6:	e76c      	b.n	800c2c2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c3e8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c3ea:	f000 fa9b 	bl	800c924 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c3ee:	f000 fe69 	bl	800d0c4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c3f2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c3f4:	4618      	mov	r0, r3
 800c3f6:	3738      	adds	r7, #56	@ 0x38
 800c3f8:	46bd      	mov	sp, r7
 800c3fa:	bd80      	pop	{r7, pc}
 800c3fc:	e000ed04 	.word	0xe000ed04

0800c400 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c400:	b580      	push	{r7, lr}
 800c402:	b090      	sub	sp, #64	@ 0x40
 800c404:	af00      	add	r7, sp, #0
 800c406:	60f8      	str	r0, [r7, #12]
 800c408:	60b9      	str	r1, [r7, #8]
 800c40a:	607a      	str	r2, [r7, #4]
 800c40c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800c412:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c414:	2b00      	cmp	r3, #0
 800c416:	d10b      	bne.n	800c430 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800c418:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c41c:	f383 8811 	msr	BASEPRI, r3
 800c420:	f3bf 8f6f 	isb	sy
 800c424:	f3bf 8f4f 	dsb	sy
 800c428:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c42a:	bf00      	nop
 800c42c:	bf00      	nop
 800c42e:	e7fd      	b.n	800c42c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c430:	68bb      	ldr	r3, [r7, #8]
 800c432:	2b00      	cmp	r3, #0
 800c434:	d103      	bne.n	800c43e <xQueueGenericSendFromISR+0x3e>
 800c436:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c438:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d101      	bne.n	800c442 <xQueueGenericSendFromISR+0x42>
 800c43e:	2301      	movs	r3, #1
 800c440:	e000      	b.n	800c444 <xQueueGenericSendFromISR+0x44>
 800c442:	2300      	movs	r3, #0
 800c444:	2b00      	cmp	r3, #0
 800c446:	d10b      	bne.n	800c460 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800c448:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c44c:	f383 8811 	msr	BASEPRI, r3
 800c450:	f3bf 8f6f 	isb	sy
 800c454:	f3bf 8f4f 	dsb	sy
 800c458:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c45a:	bf00      	nop
 800c45c:	bf00      	nop
 800c45e:	e7fd      	b.n	800c45c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c460:	683b      	ldr	r3, [r7, #0]
 800c462:	2b02      	cmp	r3, #2
 800c464:	d103      	bne.n	800c46e <xQueueGenericSendFromISR+0x6e>
 800c466:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c468:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c46a:	2b01      	cmp	r3, #1
 800c46c:	d101      	bne.n	800c472 <xQueueGenericSendFromISR+0x72>
 800c46e:	2301      	movs	r3, #1
 800c470:	e000      	b.n	800c474 <xQueueGenericSendFromISR+0x74>
 800c472:	2300      	movs	r3, #0
 800c474:	2b00      	cmp	r3, #0
 800c476:	d10b      	bne.n	800c490 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800c478:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c47c:	f383 8811 	msr	BASEPRI, r3
 800c480:	f3bf 8f6f 	isb	sy
 800c484:	f3bf 8f4f 	dsb	sy
 800c488:	623b      	str	r3, [r7, #32]
}
 800c48a:	bf00      	nop
 800c48c:	bf00      	nop
 800c48e:	e7fd      	b.n	800c48c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c490:	f002 f84a 	bl	800e528 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c494:	f3ef 8211 	mrs	r2, BASEPRI
 800c498:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c49c:	f383 8811 	msr	BASEPRI, r3
 800c4a0:	f3bf 8f6f 	isb	sy
 800c4a4:	f3bf 8f4f 	dsb	sy
 800c4a8:	61fa      	str	r2, [r7, #28]
 800c4aa:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c4ac:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c4ae:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c4b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4b2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c4b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c4b8:	429a      	cmp	r2, r3
 800c4ba:	d302      	bcc.n	800c4c2 <xQueueGenericSendFromISR+0xc2>
 800c4bc:	683b      	ldr	r3, [r7, #0]
 800c4be:	2b02      	cmp	r3, #2
 800c4c0:	d12f      	bne.n	800c522 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c4c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4c4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c4c8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c4cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c4d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c4d2:	683a      	ldr	r2, [r7, #0]
 800c4d4:	68b9      	ldr	r1, [r7, #8]
 800c4d6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c4d8:	f000 f994 	bl	800c804 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c4dc:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800c4e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4e4:	d112      	bne.n	800c50c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c4e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d016      	beq.n	800c51c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c4ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4f0:	3324      	adds	r3, #36	@ 0x24
 800c4f2:	4618      	mov	r0, r3
 800c4f4:	f001 f806 	bl	800d504 <xTaskRemoveFromEventList>
 800c4f8:	4603      	mov	r3, r0
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d00e      	beq.n	800c51c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	2b00      	cmp	r3, #0
 800c502:	d00b      	beq.n	800c51c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	2201      	movs	r2, #1
 800c508:	601a      	str	r2, [r3, #0]
 800c50a:	e007      	b.n	800c51c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c50c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800c510:	3301      	adds	r3, #1
 800c512:	b2db      	uxtb	r3, r3
 800c514:	b25a      	sxtb	r2, r3
 800c516:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c518:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800c51c:	2301      	movs	r3, #1
 800c51e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800c520:	e001      	b.n	800c526 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c522:	2300      	movs	r3, #0
 800c524:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c526:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c528:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c52a:	697b      	ldr	r3, [r7, #20]
 800c52c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c530:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c532:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800c534:	4618      	mov	r0, r3
 800c536:	3740      	adds	r7, #64	@ 0x40
 800c538:	46bd      	mov	sp, r7
 800c53a:	bd80      	pop	{r7, pc}

0800c53c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c53c:	b580      	push	{r7, lr}
 800c53e:	b08c      	sub	sp, #48	@ 0x30
 800c540:	af00      	add	r7, sp, #0
 800c542:	60f8      	str	r0, [r7, #12]
 800c544:	60b9      	str	r1, [r7, #8]
 800c546:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c548:	2300      	movs	r3, #0
 800c54a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c550:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c552:	2b00      	cmp	r3, #0
 800c554:	d10b      	bne.n	800c56e <xQueueReceive+0x32>
	__asm volatile
 800c556:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c55a:	f383 8811 	msr	BASEPRI, r3
 800c55e:	f3bf 8f6f 	isb	sy
 800c562:	f3bf 8f4f 	dsb	sy
 800c566:	623b      	str	r3, [r7, #32]
}
 800c568:	bf00      	nop
 800c56a:	bf00      	nop
 800c56c:	e7fd      	b.n	800c56a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c56e:	68bb      	ldr	r3, [r7, #8]
 800c570:	2b00      	cmp	r3, #0
 800c572:	d103      	bne.n	800c57c <xQueueReceive+0x40>
 800c574:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c576:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d101      	bne.n	800c580 <xQueueReceive+0x44>
 800c57c:	2301      	movs	r3, #1
 800c57e:	e000      	b.n	800c582 <xQueueReceive+0x46>
 800c580:	2300      	movs	r3, #0
 800c582:	2b00      	cmp	r3, #0
 800c584:	d10b      	bne.n	800c59e <xQueueReceive+0x62>
	__asm volatile
 800c586:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c58a:	f383 8811 	msr	BASEPRI, r3
 800c58e:	f3bf 8f6f 	isb	sy
 800c592:	f3bf 8f4f 	dsb	sy
 800c596:	61fb      	str	r3, [r7, #28]
}
 800c598:	bf00      	nop
 800c59a:	bf00      	nop
 800c59c:	e7fd      	b.n	800c59a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c59e:	f001 f977 	bl	800d890 <xTaskGetSchedulerState>
 800c5a2:	4603      	mov	r3, r0
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d102      	bne.n	800c5ae <xQueueReceive+0x72>
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d101      	bne.n	800c5b2 <xQueueReceive+0x76>
 800c5ae:	2301      	movs	r3, #1
 800c5b0:	e000      	b.n	800c5b4 <xQueueReceive+0x78>
 800c5b2:	2300      	movs	r3, #0
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d10b      	bne.n	800c5d0 <xQueueReceive+0x94>
	__asm volatile
 800c5b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5bc:	f383 8811 	msr	BASEPRI, r3
 800c5c0:	f3bf 8f6f 	isb	sy
 800c5c4:	f3bf 8f4f 	dsb	sy
 800c5c8:	61bb      	str	r3, [r7, #24]
}
 800c5ca:	bf00      	nop
 800c5cc:	bf00      	nop
 800c5ce:	e7fd      	b.n	800c5cc <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c5d0:	f001 feca 	bl	800e368 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c5d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c5d8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c5da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d01f      	beq.n	800c620 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c5e0:	68b9      	ldr	r1, [r7, #8]
 800c5e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c5e4:	f000 f978 	bl	800c8d8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c5e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5ea:	1e5a      	subs	r2, r3, #1
 800c5ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5ee:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c5f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5f2:	691b      	ldr	r3, [r3, #16]
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d00f      	beq.n	800c618 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c5f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5fa:	3310      	adds	r3, #16
 800c5fc:	4618      	mov	r0, r3
 800c5fe:	f000 ff81 	bl	800d504 <xTaskRemoveFromEventList>
 800c602:	4603      	mov	r3, r0
 800c604:	2b00      	cmp	r3, #0
 800c606:	d007      	beq.n	800c618 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c608:	4b3c      	ldr	r3, [pc, #240]	@ (800c6fc <xQueueReceive+0x1c0>)
 800c60a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c60e:	601a      	str	r2, [r3, #0]
 800c610:	f3bf 8f4f 	dsb	sy
 800c614:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c618:	f001 fed8 	bl	800e3cc <vPortExitCritical>
				return pdPASS;
 800c61c:	2301      	movs	r3, #1
 800c61e:	e069      	b.n	800c6f4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	2b00      	cmp	r3, #0
 800c624:	d103      	bne.n	800c62e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c626:	f001 fed1 	bl	800e3cc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c62a:	2300      	movs	r3, #0
 800c62c:	e062      	b.n	800c6f4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c62e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c630:	2b00      	cmp	r3, #0
 800c632:	d106      	bne.n	800c642 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c634:	f107 0310 	add.w	r3, r7, #16
 800c638:	4618      	mov	r0, r3
 800c63a:	f000 ffc7 	bl	800d5cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c63e:	2301      	movs	r3, #1
 800c640:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c642:	f001 fec3 	bl	800e3cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c646:	f000 fd2f 	bl	800d0a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c64a:	f001 fe8d 	bl	800e368 <vPortEnterCritical>
 800c64e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c650:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c654:	b25b      	sxtb	r3, r3
 800c656:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c65a:	d103      	bne.n	800c664 <xQueueReceive+0x128>
 800c65c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c65e:	2200      	movs	r2, #0
 800c660:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c664:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c666:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c66a:	b25b      	sxtb	r3, r3
 800c66c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c670:	d103      	bne.n	800c67a <xQueueReceive+0x13e>
 800c672:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c674:	2200      	movs	r2, #0
 800c676:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c67a:	f001 fea7 	bl	800e3cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c67e:	1d3a      	adds	r2, r7, #4
 800c680:	f107 0310 	add.w	r3, r7, #16
 800c684:	4611      	mov	r1, r2
 800c686:	4618      	mov	r0, r3
 800c688:	f000 ffb6 	bl	800d5f8 <xTaskCheckForTimeOut>
 800c68c:	4603      	mov	r3, r0
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d123      	bne.n	800c6da <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c692:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c694:	f000 f998 	bl	800c9c8 <prvIsQueueEmpty>
 800c698:	4603      	mov	r3, r0
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d017      	beq.n	800c6ce <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c69e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6a0:	3324      	adds	r3, #36	@ 0x24
 800c6a2:	687a      	ldr	r2, [r7, #4]
 800c6a4:	4611      	mov	r1, r2
 800c6a6:	4618      	mov	r0, r3
 800c6a8:	f000 feda 	bl	800d460 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c6ac:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c6ae:	f000 f939 	bl	800c924 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c6b2:	f000 fd07 	bl	800d0c4 <xTaskResumeAll>
 800c6b6:	4603      	mov	r3, r0
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d189      	bne.n	800c5d0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800c6bc:	4b0f      	ldr	r3, [pc, #60]	@ (800c6fc <xQueueReceive+0x1c0>)
 800c6be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c6c2:	601a      	str	r2, [r3, #0]
 800c6c4:	f3bf 8f4f 	dsb	sy
 800c6c8:	f3bf 8f6f 	isb	sy
 800c6cc:	e780      	b.n	800c5d0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c6ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c6d0:	f000 f928 	bl	800c924 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c6d4:	f000 fcf6 	bl	800d0c4 <xTaskResumeAll>
 800c6d8:	e77a      	b.n	800c5d0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c6da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c6dc:	f000 f922 	bl	800c924 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c6e0:	f000 fcf0 	bl	800d0c4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c6e4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c6e6:	f000 f96f 	bl	800c9c8 <prvIsQueueEmpty>
 800c6ea:	4603      	mov	r3, r0
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	f43f af6f 	beq.w	800c5d0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c6f2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c6f4:	4618      	mov	r0, r3
 800c6f6:	3730      	adds	r7, #48	@ 0x30
 800c6f8:	46bd      	mov	sp, r7
 800c6fa:	bd80      	pop	{r7, pc}
 800c6fc:	e000ed04 	.word	0xe000ed04

0800c700 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c700:	b580      	push	{r7, lr}
 800c702:	b08e      	sub	sp, #56	@ 0x38
 800c704:	af00      	add	r7, sp, #0
 800c706:	60f8      	str	r0, [r7, #12]
 800c708:	60b9      	str	r1, [r7, #8]
 800c70a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800c710:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c712:	2b00      	cmp	r3, #0
 800c714:	d10b      	bne.n	800c72e <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800c716:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c71a:	f383 8811 	msr	BASEPRI, r3
 800c71e:	f3bf 8f6f 	isb	sy
 800c722:	f3bf 8f4f 	dsb	sy
 800c726:	623b      	str	r3, [r7, #32]
}
 800c728:	bf00      	nop
 800c72a:	bf00      	nop
 800c72c:	e7fd      	b.n	800c72a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c72e:	68bb      	ldr	r3, [r7, #8]
 800c730:	2b00      	cmp	r3, #0
 800c732:	d103      	bne.n	800c73c <xQueueReceiveFromISR+0x3c>
 800c734:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c736:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d101      	bne.n	800c740 <xQueueReceiveFromISR+0x40>
 800c73c:	2301      	movs	r3, #1
 800c73e:	e000      	b.n	800c742 <xQueueReceiveFromISR+0x42>
 800c740:	2300      	movs	r3, #0
 800c742:	2b00      	cmp	r3, #0
 800c744:	d10b      	bne.n	800c75e <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800c746:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c74a:	f383 8811 	msr	BASEPRI, r3
 800c74e:	f3bf 8f6f 	isb	sy
 800c752:	f3bf 8f4f 	dsb	sy
 800c756:	61fb      	str	r3, [r7, #28]
}
 800c758:	bf00      	nop
 800c75a:	bf00      	nop
 800c75c:	e7fd      	b.n	800c75a <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c75e:	f001 fee3 	bl	800e528 <vPortValidateInterruptPriority>
	__asm volatile
 800c762:	f3ef 8211 	mrs	r2, BASEPRI
 800c766:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c76a:	f383 8811 	msr	BASEPRI, r3
 800c76e:	f3bf 8f6f 	isb	sy
 800c772:	f3bf 8f4f 	dsb	sy
 800c776:	61ba      	str	r2, [r7, #24]
 800c778:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800c77a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c77c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c77e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c780:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c782:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c784:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c786:	2b00      	cmp	r3, #0
 800c788:	d02f      	beq.n	800c7ea <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800c78a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c78c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c790:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c794:	68b9      	ldr	r1, [r7, #8]
 800c796:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c798:	f000 f89e 	bl	800c8d8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c79c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c79e:	1e5a      	subs	r2, r3, #1
 800c7a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7a2:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800c7a4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800c7a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7ac:	d112      	bne.n	800c7d4 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c7ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7b0:	691b      	ldr	r3, [r3, #16]
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d016      	beq.n	800c7e4 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c7b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7b8:	3310      	adds	r3, #16
 800c7ba:	4618      	mov	r0, r3
 800c7bc:	f000 fea2 	bl	800d504 <xTaskRemoveFromEventList>
 800c7c0:	4603      	mov	r3, r0
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d00e      	beq.n	800c7e4 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d00b      	beq.n	800c7e4 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	2201      	movs	r2, #1
 800c7d0:	601a      	str	r2, [r3, #0]
 800c7d2:	e007      	b.n	800c7e4 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800c7d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c7d8:	3301      	adds	r3, #1
 800c7da:	b2db      	uxtb	r3, r3
 800c7dc:	b25a      	sxtb	r2, r3
 800c7de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800c7e4:	2301      	movs	r3, #1
 800c7e6:	637b      	str	r3, [r7, #52]	@ 0x34
 800c7e8:	e001      	b.n	800c7ee <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800c7ea:	2300      	movs	r3, #0
 800c7ec:	637b      	str	r3, [r7, #52]	@ 0x34
 800c7ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c7f0:	613b      	str	r3, [r7, #16]
	__asm volatile
 800c7f2:	693b      	ldr	r3, [r7, #16]
 800c7f4:	f383 8811 	msr	BASEPRI, r3
}
 800c7f8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c7fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800c7fc:	4618      	mov	r0, r3
 800c7fe:	3738      	adds	r7, #56	@ 0x38
 800c800:	46bd      	mov	sp, r7
 800c802:	bd80      	pop	{r7, pc}

0800c804 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c804:	b580      	push	{r7, lr}
 800c806:	b086      	sub	sp, #24
 800c808:	af00      	add	r7, sp, #0
 800c80a:	60f8      	str	r0, [r7, #12]
 800c80c:	60b9      	str	r1, [r7, #8]
 800c80e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c810:	2300      	movs	r3, #0
 800c812:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c818:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d10d      	bne.n	800c83e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c822:	68fb      	ldr	r3, [r7, #12]
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	2b00      	cmp	r3, #0
 800c828:	d14d      	bne.n	800c8c6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	689b      	ldr	r3, [r3, #8]
 800c82e:	4618      	mov	r0, r3
 800c830:	f001 f84c 	bl	800d8cc <xTaskPriorityDisinherit>
 800c834:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	2200      	movs	r2, #0
 800c83a:	609a      	str	r2, [r3, #8]
 800c83c:	e043      	b.n	800c8c6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	2b00      	cmp	r3, #0
 800c842:	d119      	bne.n	800c878 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	6858      	ldr	r0, [r3, #4]
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c84c:	461a      	mov	r2, r3
 800c84e:	68b9      	ldr	r1, [r7, #8]
 800c850:	f002 ff8f 	bl	800f772 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	685a      	ldr	r2, [r3, #4]
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c85c:	441a      	add	r2, r3
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	685a      	ldr	r2, [r3, #4]
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	689b      	ldr	r3, [r3, #8]
 800c86a:	429a      	cmp	r2, r3
 800c86c:	d32b      	bcc.n	800c8c6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	681a      	ldr	r2, [r3, #0]
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	605a      	str	r2, [r3, #4]
 800c876:	e026      	b.n	800c8c6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	68d8      	ldr	r0, [r3, #12]
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c880:	461a      	mov	r2, r3
 800c882:	68b9      	ldr	r1, [r7, #8]
 800c884:	f002 ff75 	bl	800f772 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	68da      	ldr	r2, [r3, #12]
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c890:	425b      	negs	r3, r3
 800c892:	441a      	add	r2, r3
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	68da      	ldr	r2, [r3, #12]
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	429a      	cmp	r2, r3
 800c8a2:	d207      	bcs.n	800c8b4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	689a      	ldr	r2, [r3, #8]
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c8ac:	425b      	negs	r3, r3
 800c8ae:	441a      	add	r2, r3
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	2b02      	cmp	r3, #2
 800c8b8:	d105      	bne.n	800c8c6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c8ba:	693b      	ldr	r3, [r7, #16]
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d002      	beq.n	800c8c6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c8c0:	693b      	ldr	r3, [r7, #16]
 800c8c2:	3b01      	subs	r3, #1
 800c8c4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c8c6:	693b      	ldr	r3, [r7, #16]
 800c8c8:	1c5a      	adds	r2, r3, #1
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800c8ce:	697b      	ldr	r3, [r7, #20]
}
 800c8d0:	4618      	mov	r0, r3
 800c8d2:	3718      	adds	r7, #24
 800c8d4:	46bd      	mov	sp, r7
 800c8d6:	bd80      	pop	{r7, pc}

0800c8d8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c8d8:	b580      	push	{r7, lr}
 800c8da:	b082      	sub	sp, #8
 800c8dc:	af00      	add	r7, sp, #0
 800c8de:	6078      	str	r0, [r7, #4]
 800c8e0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d018      	beq.n	800c91c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	68da      	ldr	r2, [r3, #12]
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c8f2:	441a      	add	r2, r3
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	68da      	ldr	r2, [r3, #12]
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	689b      	ldr	r3, [r3, #8]
 800c900:	429a      	cmp	r2, r3
 800c902:	d303      	bcc.n	800c90c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	681a      	ldr	r2, [r3, #0]
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	68d9      	ldr	r1, [r3, #12]
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c914:	461a      	mov	r2, r3
 800c916:	6838      	ldr	r0, [r7, #0]
 800c918:	f002 ff2b 	bl	800f772 <memcpy>
	}
}
 800c91c:	bf00      	nop
 800c91e:	3708      	adds	r7, #8
 800c920:	46bd      	mov	sp, r7
 800c922:	bd80      	pop	{r7, pc}

0800c924 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c924:	b580      	push	{r7, lr}
 800c926:	b084      	sub	sp, #16
 800c928:	af00      	add	r7, sp, #0
 800c92a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c92c:	f001 fd1c 	bl	800e368 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c936:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c938:	e011      	b.n	800c95e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d012      	beq.n	800c968 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	3324      	adds	r3, #36	@ 0x24
 800c946:	4618      	mov	r0, r3
 800c948:	f000 fddc 	bl	800d504 <xTaskRemoveFromEventList>
 800c94c:	4603      	mov	r3, r0
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d001      	beq.n	800c956 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c952:	f000 feb5 	bl	800d6c0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c956:	7bfb      	ldrb	r3, [r7, #15]
 800c958:	3b01      	subs	r3, #1
 800c95a:	b2db      	uxtb	r3, r3
 800c95c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c95e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c962:	2b00      	cmp	r3, #0
 800c964:	dce9      	bgt.n	800c93a <prvUnlockQueue+0x16>
 800c966:	e000      	b.n	800c96a <prvUnlockQueue+0x46>
					break;
 800c968:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	22ff      	movs	r2, #255	@ 0xff
 800c96e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800c972:	f001 fd2b 	bl	800e3cc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c976:	f001 fcf7 	bl	800e368 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c980:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c982:	e011      	b.n	800c9a8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	691b      	ldr	r3, [r3, #16]
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d012      	beq.n	800c9b2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	3310      	adds	r3, #16
 800c990:	4618      	mov	r0, r3
 800c992:	f000 fdb7 	bl	800d504 <xTaskRemoveFromEventList>
 800c996:	4603      	mov	r3, r0
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d001      	beq.n	800c9a0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c99c:	f000 fe90 	bl	800d6c0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c9a0:	7bbb      	ldrb	r3, [r7, #14]
 800c9a2:	3b01      	subs	r3, #1
 800c9a4:	b2db      	uxtb	r3, r3
 800c9a6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c9a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	dce9      	bgt.n	800c984 <prvUnlockQueue+0x60>
 800c9b0:	e000      	b.n	800c9b4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c9b2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	22ff      	movs	r2, #255	@ 0xff
 800c9b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800c9bc:	f001 fd06 	bl	800e3cc <vPortExitCritical>
}
 800c9c0:	bf00      	nop
 800c9c2:	3710      	adds	r7, #16
 800c9c4:	46bd      	mov	sp, r7
 800c9c6:	bd80      	pop	{r7, pc}

0800c9c8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c9c8:	b580      	push	{r7, lr}
 800c9ca:	b084      	sub	sp, #16
 800c9cc:	af00      	add	r7, sp, #0
 800c9ce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c9d0:	f001 fcca 	bl	800e368 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d102      	bne.n	800c9e2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c9dc:	2301      	movs	r3, #1
 800c9de:	60fb      	str	r3, [r7, #12]
 800c9e0:	e001      	b.n	800c9e6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c9e2:	2300      	movs	r3, #0
 800c9e4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c9e6:	f001 fcf1 	bl	800e3cc <vPortExitCritical>

	return xReturn;
 800c9ea:	68fb      	ldr	r3, [r7, #12]
}
 800c9ec:	4618      	mov	r0, r3
 800c9ee:	3710      	adds	r7, #16
 800c9f0:	46bd      	mov	sp, r7
 800c9f2:	bd80      	pop	{r7, pc}

0800c9f4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c9f4:	b580      	push	{r7, lr}
 800c9f6:	b084      	sub	sp, #16
 800c9f8:	af00      	add	r7, sp, #0
 800c9fa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c9fc:	f001 fcb4 	bl	800e368 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ca08:	429a      	cmp	r2, r3
 800ca0a:	d102      	bne.n	800ca12 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ca0c:	2301      	movs	r3, #1
 800ca0e:	60fb      	str	r3, [r7, #12]
 800ca10:	e001      	b.n	800ca16 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ca12:	2300      	movs	r3, #0
 800ca14:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ca16:	f001 fcd9 	bl	800e3cc <vPortExitCritical>

	return xReturn;
 800ca1a:	68fb      	ldr	r3, [r7, #12]
}
 800ca1c:	4618      	mov	r0, r3
 800ca1e:	3710      	adds	r7, #16
 800ca20:	46bd      	mov	sp, r7
 800ca22:	bd80      	pop	{r7, pc}

0800ca24 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800ca24:	b480      	push	{r7}
 800ca26:	b085      	sub	sp, #20
 800ca28:	af00      	add	r7, sp, #0
 800ca2a:	6078      	str	r0, [r7, #4]
 800ca2c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ca2e:	2300      	movs	r3, #0
 800ca30:	60fb      	str	r3, [r7, #12]
 800ca32:	e014      	b.n	800ca5e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ca34:	4a0f      	ldr	r2, [pc, #60]	@ (800ca74 <vQueueAddToRegistry+0x50>)
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d10b      	bne.n	800ca58 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ca40:	490c      	ldr	r1, [pc, #48]	@ (800ca74 <vQueueAddToRegistry+0x50>)
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	683a      	ldr	r2, [r7, #0]
 800ca46:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ca4a:	4a0a      	ldr	r2, [pc, #40]	@ (800ca74 <vQueueAddToRegistry+0x50>)
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	00db      	lsls	r3, r3, #3
 800ca50:	4413      	add	r3, r2
 800ca52:	687a      	ldr	r2, [r7, #4]
 800ca54:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800ca56:	e006      	b.n	800ca66 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	3301      	adds	r3, #1
 800ca5c:	60fb      	str	r3, [r7, #12]
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	2b07      	cmp	r3, #7
 800ca62:	d9e7      	bls.n	800ca34 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ca64:	bf00      	nop
 800ca66:	bf00      	nop
 800ca68:	3714      	adds	r7, #20
 800ca6a:	46bd      	mov	sp, r7
 800ca6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca70:	4770      	bx	lr
 800ca72:	bf00      	nop
 800ca74:	20001238 	.word	0x20001238

0800ca78 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ca78:	b580      	push	{r7, lr}
 800ca7a:	b086      	sub	sp, #24
 800ca7c:	af00      	add	r7, sp, #0
 800ca7e:	60f8      	str	r0, [r7, #12]
 800ca80:	60b9      	str	r1, [r7, #8]
 800ca82:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800ca88:	f001 fc6e 	bl	800e368 <vPortEnterCritical>
 800ca8c:	697b      	ldr	r3, [r7, #20]
 800ca8e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ca92:	b25b      	sxtb	r3, r3
 800ca94:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca98:	d103      	bne.n	800caa2 <vQueueWaitForMessageRestricted+0x2a>
 800ca9a:	697b      	ldr	r3, [r7, #20]
 800ca9c:	2200      	movs	r2, #0
 800ca9e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800caa2:	697b      	ldr	r3, [r7, #20]
 800caa4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800caa8:	b25b      	sxtb	r3, r3
 800caaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800caae:	d103      	bne.n	800cab8 <vQueueWaitForMessageRestricted+0x40>
 800cab0:	697b      	ldr	r3, [r7, #20]
 800cab2:	2200      	movs	r2, #0
 800cab4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800cab8:	f001 fc88 	bl	800e3cc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800cabc:	697b      	ldr	r3, [r7, #20]
 800cabe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d106      	bne.n	800cad2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800cac4:	697b      	ldr	r3, [r7, #20]
 800cac6:	3324      	adds	r3, #36	@ 0x24
 800cac8:	687a      	ldr	r2, [r7, #4]
 800caca:	68b9      	ldr	r1, [r7, #8]
 800cacc:	4618      	mov	r0, r3
 800cace:	f000 fced 	bl	800d4ac <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800cad2:	6978      	ldr	r0, [r7, #20]
 800cad4:	f7ff ff26 	bl	800c924 <prvUnlockQueue>
	}
 800cad8:	bf00      	nop
 800cada:	3718      	adds	r7, #24
 800cadc:	46bd      	mov	sp, r7
 800cade:	bd80      	pop	{r7, pc}

0800cae0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800cae0:	b580      	push	{r7, lr}
 800cae2:	b08e      	sub	sp, #56	@ 0x38
 800cae4:	af04      	add	r7, sp, #16
 800cae6:	60f8      	str	r0, [r7, #12]
 800cae8:	60b9      	str	r1, [r7, #8]
 800caea:	607a      	str	r2, [r7, #4]
 800caec:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800caee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d10b      	bne.n	800cb0c <xTaskCreateStatic+0x2c>
	__asm volatile
 800caf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800caf8:	f383 8811 	msr	BASEPRI, r3
 800cafc:	f3bf 8f6f 	isb	sy
 800cb00:	f3bf 8f4f 	dsb	sy
 800cb04:	623b      	str	r3, [r7, #32]
}
 800cb06:	bf00      	nop
 800cb08:	bf00      	nop
 800cb0a:	e7fd      	b.n	800cb08 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800cb0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d10b      	bne.n	800cb2a <xTaskCreateStatic+0x4a>
	__asm volatile
 800cb12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb16:	f383 8811 	msr	BASEPRI, r3
 800cb1a:	f3bf 8f6f 	isb	sy
 800cb1e:	f3bf 8f4f 	dsb	sy
 800cb22:	61fb      	str	r3, [r7, #28]
}
 800cb24:	bf00      	nop
 800cb26:	bf00      	nop
 800cb28:	e7fd      	b.n	800cb26 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800cb2a:	23a8      	movs	r3, #168	@ 0xa8
 800cb2c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800cb2e:	693b      	ldr	r3, [r7, #16]
 800cb30:	2ba8      	cmp	r3, #168	@ 0xa8
 800cb32:	d00b      	beq.n	800cb4c <xTaskCreateStatic+0x6c>
	__asm volatile
 800cb34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb38:	f383 8811 	msr	BASEPRI, r3
 800cb3c:	f3bf 8f6f 	isb	sy
 800cb40:	f3bf 8f4f 	dsb	sy
 800cb44:	61bb      	str	r3, [r7, #24]
}
 800cb46:	bf00      	nop
 800cb48:	bf00      	nop
 800cb4a:	e7fd      	b.n	800cb48 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800cb4c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800cb4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d01e      	beq.n	800cb92 <xTaskCreateStatic+0xb2>
 800cb54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d01b      	beq.n	800cb92 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cb5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb5c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800cb5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb60:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cb62:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800cb64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb66:	2202      	movs	r2, #2
 800cb68:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800cb6c:	2300      	movs	r3, #0
 800cb6e:	9303      	str	r3, [sp, #12]
 800cb70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb72:	9302      	str	r3, [sp, #8]
 800cb74:	f107 0314 	add.w	r3, r7, #20
 800cb78:	9301      	str	r3, [sp, #4]
 800cb7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb7c:	9300      	str	r3, [sp, #0]
 800cb7e:	683b      	ldr	r3, [r7, #0]
 800cb80:	687a      	ldr	r2, [r7, #4]
 800cb82:	68b9      	ldr	r1, [r7, #8]
 800cb84:	68f8      	ldr	r0, [r7, #12]
 800cb86:	f000 f851 	bl	800cc2c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cb8a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800cb8c:	f000 f8f6 	bl	800cd7c <prvAddNewTaskToReadyList>
 800cb90:	e001      	b.n	800cb96 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800cb92:	2300      	movs	r3, #0
 800cb94:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800cb96:	697b      	ldr	r3, [r7, #20]
	}
 800cb98:	4618      	mov	r0, r3
 800cb9a:	3728      	adds	r7, #40	@ 0x28
 800cb9c:	46bd      	mov	sp, r7
 800cb9e:	bd80      	pop	{r7, pc}

0800cba0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800cba0:	b580      	push	{r7, lr}
 800cba2:	b08c      	sub	sp, #48	@ 0x30
 800cba4:	af04      	add	r7, sp, #16
 800cba6:	60f8      	str	r0, [r7, #12]
 800cba8:	60b9      	str	r1, [r7, #8]
 800cbaa:	603b      	str	r3, [r7, #0]
 800cbac:	4613      	mov	r3, r2
 800cbae:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800cbb0:	88fb      	ldrh	r3, [r7, #6]
 800cbb2:	009b      	lsls	r3, r3, #2
 800cbb4:	4618      	mov	r0, r3
 800cbb6:	f001 fcf9 	bl	800e5ac <pvPortMalloc>
 800cbba:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800cbbc:	697b      	ldr	r3, [r7, #20]
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d00e      	beq.n	800cbe0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800cbc2:	20a8      	movs	r0, #168	@ 0xa8
 800cbc4:	f001 fcf2 	bl	800e5ac <pvPortMalloc>
 800cbc8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800cbca:	69fb      	ldr	r3, [r7, #28]
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d003      	beq.n	800cbd8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800cbd0:	69fb      	ldr	r3, [r7, #28]
 800cbd2:	697a      	ldr	r2, [r7, #20]
 800cbd4:	631a      	str	r2, [r3, #48]	@ 0x30
 800cbd6:	e005      	b.n	800cbe4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800cbd8:	6978      	ldr	r0, [r7, #20]
 800cbda:	f001 fdb5 	bl	800e748 <vPortFree>
 800cbde:	e001      	b.n	800cbe4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800cbe0:	2300      	movs	r3, #0
 800cbe2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800cbe4:	69fb      	ldr	r3, [r7, #28]
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d017      	beq.n	800cc1a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800cbea:	69fb      	ldr	r3, [r7, #28]
 800cbec:	2200      	movs	r2, #0
 800cbee:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800cbf2:	88fa      	ldrh	r2, [r7, #6]
 800cbf4:	2300      	movs	r3, #0
 800cbf6:	9303      	str	r3, [sp, #12]
 800cbf8:	69fb      	ldr	r3, [r7, #28]
 800cbfa:	9302      	str	r3, [sp, #8]
 800cbfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbfe:	9301      	str	r3, [sp, #4]
 800cc00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc02:	9300      	str	r3, [sp, #0]
 800cc04:	683b      	ldr	r3, [r7, #0]
 800cc06:	68b9      	ldr	r1, [r7, #8]
 800cc08:	68f8      	ldr	r0, [r7, #12]
 800cc0a:	f000 f80f 	bl	800cc2c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cc0e:	69f8      	ldr	r0, [r7, #28]
 800cc10:	f000 f8b4 	bl	800cd7c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800cc14:	2301      	movs	r3, #1
 800cc16:	61bb      	str	r3, [r7, #24]
 800cc18:	e002      	b.n	800cc20 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800cc1a:	f04f 33ff 	mov.w	r3, #4294967295
 800cc1e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800cc20:	69bb      	ldr	r3, [r7, #24]
	}
 800cc22:	4618      	mov	r0, r3
 800cc24:	3720      	adds	r7, #32
 800cc26:	46bd      	mov	sp, r7
 800cc28:	bd80      	pop	{r7, pc}
	...

0800cc2c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800cc2c:	b580      	push	{r7, lr}
 800cc2e:	b088      	sub	sp, #32
 800cc30:	af00      	add	r7, sp, #0
 800cc32:	60f8      	str	r0, [r7, #12]
 800cc34:	60b9      	str	r1, [r7, #8]
 800cc36:	607a      	str	r2, [r7, #4]
 800cc38:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800cc3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc3c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	009b      	lsls	r3, r3, #2
 800cc42:	461a      	mov	r2, r3
 800cc44:	21a5      	movs	r1, #165	@ 0xa5
 800cc46:	f002 fca8 	bl	800f59a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800cc4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc4c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cc54:	3b01      	subs	r3, #1
 800cc56:	009b      	lsls	r3, r3, #2
 800cc58:	4413      	add	r3, r2
 800cc5a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800cc5c:	69bb      	ldr	r3, [r7, #24]
 800cc5e:	f023 0307 	bic.w	r3, r3, #7
 800cc62:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800cc64:	69bb      	ldr	r3, [r7, #24]
 800cc66:	f003 0307 	and.w	r3, r3, #7
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d00b      	beq.n	800cc86 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800cc6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc72:	f383 8811 	msr	BASEPRI, r3
 800cc76:	f3bf 8f6f 	isb	sy
 800cc7a:	f3bf 8f4f 	dsb	sy
 800cc7e:	617b      	str	r3, [r7, #20]
}
 800cc80:	bf00      	nop
 800cc82:	bf00      	nop
 800cc84:	e7fd      	b.n	800cc82 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800cc86:	68bb      	ldr	r3, [r7, #8]
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d01f      	beq.n	800cccc <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cc8c:	2300      	movs	r3, #0
 800cc8e:	61fb      	str	r3, [r7, #28]
 800cc90:	e012      	b.n	800ccb8 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800cc92:	68ba      	ldr	r2, [r7, #8]
 800cc94:	69fb      	ldr	r3, [r7, #28]
 800cc96:	4413      	add	r3, r2
 800cc98:	7819      	ldrb	r1, [r3, #0]
 800cc9a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cc9c:	69fb      	ldr	r3, [r7, #28]
 800cc9e:	4413      	add	r3, r2
 800cca0:	3334      	adds	r3, #52	@ 0x34
 800cca2:	460a      	mov	r2, r1
 800cca4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800cca6:	68ba      	ldr	r2, [r7, #8]
 800cca8:	69fb      	ldr	r3, [r7, #28]
 800ccaa:	4413      	add	r3, r2
 800ccac:	781b      	ldrb	r3, [r3, #0]
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d006      	beq.n	800ccc0 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ccb2:	69fb      	ldr	r3, [r7, #28]
 800ccb4:	3301      	adds	r3, #1
 800ccb6:	61fb      	str	r3, [r7, #28]
 800ccb8:	69fb      	ldr	r3, [r7, #28]
 800ccba:	2b0f      	cmp	r3, #15
 800ccbc:	d9e9      	bls.n	800cc92 <prvInitialiseNewTask+0x66>
 800ccbe:	e000      	b.n	800ccc2 <prvInitialiseNewTask+0x96>
			{
				break;
 800ccc0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ccc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccc4:	2200      	movs	r2, #0
 800ccc6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800ccca:	e003      	b.n	800ccd4 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800cccc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccce:	2200      	movs	r2, #0
 800ccd0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ccd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ccd6:	2b37      	cmp	r3, #55	@ 0x37
 800ccd8:	d901      	bls.n	800ccde <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ccda:	2337      	movs	r3, #55	@ 0x37
 800ccdc:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ccde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cce0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cce2:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800cce4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cce6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cce8:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800ccea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccec:	2200      	movs	r2, #0
 800ccee:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ccf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccf2:	3304      	adds	r3, #4
 800ccf4:	4618      	mov	r0, r3
 800ccf6:	f7ff f8a7 	bl	800be48 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ccfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccfc:	3318      	adds	r3, #24
 800ccfe:	4618      	mov	r0, r3
 800cd00:	f7ff f8a2 	bl	800be48 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800cd04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd06:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cd08:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cd0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd0c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800cd10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd12:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800cd14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cd18:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800cd1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd1c:	2200      	movs	r2, #0
 800cd1e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800cd22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd24:	2200      	movs	r2, #0
 800cd26:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800cd2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd2c:	3354      	adds	r3, #84	@ 0x54
 800cd2e:	224c      	movs	r2, #76	@ 0x4c
 800cd30:	2100      	movs	r1, #0
 800cd32:	4618      	mov	r0, r3
 800cd34:	f002 fc31 	bl	800f59a <memset>
 800cd38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd3a:	4a0d      	ldr	r2, [pc, #52]	@ (800cd70 <prvInitialiseNewTask+0x144>)
 800cd3c:	659a      	str	r2, [r3, #88]	@ 0x58
 800cd3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd40:	4a0c      	ldr	r2, [pc, #48]	@ (800cd74 <prvInitialiseNewTask+0x148>)
 800cd42:	65da      	str	r2, [r3, #92]	@ 0x5c
 800cd44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd46:	4a0c      	ldr	r2, [pc, #48]	@ (800cd78 <prvInitialiseNewTask+0x14c>)
 800cd48:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800cd4a:	683a      	ldr	r2, [r7, #0]
 800cd4c:	68f9      	ldr	r1, [r7, #12]
 800cd4e:	69b8      	ldr	r0, [r7, #24]
 800cd50:	f001 f9da 	bl	800e108 <pxPortInitialiseStack>
 800cd54:	4602      	mov	r2, r0
 800cd56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd58:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800cd5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d002      	beq.n	800cd66 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800cd60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd62:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cd64:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cd66:	bf00      	nop
 800cd68:	3720      	adds	r7, #32
 800cd6a:	46bd      	mov	sp, r7
 800cd6c:	bd80      	pop	{r7, pc}
 800cd6e:	bf00      	nop
 800cd70:	200054cc 	.word	0x200054cc
 800cd74:	20005534 	.word	0x20005534
 800cd78:	2000559c 	.word	0x2000559c

0800cd7c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800cd7c:	b580      	push	{r7, lr}
 800cd7e:	b082      	sub	sp, #8
 800cd80:	af00      	add	r7, sp, #0
 800cd82:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800cd84:	f001 faf0 	bl	800e368 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800cd88:	4b2d      	ldr	r3, [pc, #180]	@ (800ce40 <prvAddNewTaskToReadyList+0xc4>)
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	3301      	adds	r3, #1
 800cd8e:	4a2c      	ldr	r2, [pc, #176]	@ (800ce40 <prvAddNewTaskToReadyList+0xc4>)
 800cd90:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800cd92:	4b2c      	ldr	r3, [pc, #176]	@ (800ce44 <prvAddNewTaskToReadyList+0xc8>)
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d109      	bne.n	800cdae <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800cd9a:	4a2a      	ldr	r2, [pc, #168]	@ (800ce44 <prvAddNewTaskToReadyList+0xc8>)
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800cda0:	4b27      	ldr	r3, [pc, #156]	@ (800ce40 <prvAddNewTaskToReadyList+0xc4>)
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	2b01      	cmp	r3, #1
 800cda6:	d110      	bne.n	800cdca <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800cda8:	f000 fcae 	bl	800d708 <prvInitialiseTaskLists>
 800cdac:	e00d      	b.n	800cdca <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800cdae:	4b26      	ldr	r3, [pc, #152]	@ (800ce48 <prvAddNewTaskToReadyList+0xcc>)
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d109      	bne.n	800cdca <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800cdb6:	4b23      	ldr	r3, [pc, #140]	@ (800ce44 <prvAddNewTaskToReadyList+0xc8>)
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cdc0:	429a      	cmp	r2, r3
 800cdc2:	d802      	bhi.n	800cdca <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800cdc4:	4a1f      	ldr	r2, [pc, #124]	@ (800ce44 <prvAddNewTaskToReadyList+0xc8>)
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800cdca:	4b20      	ldr	r3, [pc, #128]	@ (800ce4c <prvAddNewTaskToReadyList+0xd0>)
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	3301      	adds	r3, #1
 800cdd0:	4a1e      	ldr	r2, [pc, #120]	@ (800ce4c <prvAddNewTaskToReadyList+0xd0>)
 800cdd2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800cdd4:	4b1d      	ldr	r3, [pc, #116]	@ (800ce4c <prvAddNewTaskToReadyList+0xd0>)
 800cdd6:	681a      	ldr	r2, [r3, #0]
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cde0:	4b1b      	ldr	r3, [pc, #108]	@ (800ce50 <prvAddNewTaskToReadyList+0xd4>)
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	429a      	cmp	r2, r3
 800cde6:	d903      	bls.n	800cdf0 <prvAddNewTaskToReadyList+0x74>
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cdec:	4a18      	ldr	r2, [pc, #96]	@ (800ce50 <prvAddNewTaskToReadyList+0xd4>)
 800cdee:	6013      	str	r3, [r2, #0]
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cdf4:	4613      	mov	r3, r2
 800cdf6:	009b      	lsls	r3, r3, #2
 800cdf8:	4413      	add	r3, r2
 800cdfa:	009b      	lsls	r3, r3, #2
 800cdfc:	4a15      	ldr	r2, [pc, #84]	@ (800ce54 <prvAddNewTaskToReadyList+0xd8>)
 800cdfe:	441a      	add	r2, r3
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	3304      	adds	r3, #4
 800ce04:	4619      	mov	r1, r3
 800ce06:	4610      	mov	r0, r2
 800ce08:	f7ff f82b 	bl	800be62 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ce0c:	f001 fade 	bl	800e3cc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ce10:	4b0d      	ldr	r3, [pc, #52]	@ (800ce48 <prvAddNewTaskToReadyList+0xcc>)
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d00e      	beq.n	800ce36 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ce18:	4b0a      	ldr	r3, [pc, #40]	@ (800ce44 <prvAddNewTaskToReadyList+0xc8>)
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce22:	429a      	cmp	r2, r3
 800ce24:	d207      	bcs.n	800ce36 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ce26:	4b0c      	ldr	r3, [pc, #48]	@ (800ce58 <prvAddNewTaskToReadyList+0xdc>)
 800ce28:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ce2c:	601a      	str	r2, [r3, #0]
 800ce2e:	f3bf 8f4f 	dsb	sy
 800ce32:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ce36:	bf00      	nop
 800ce38:	3708      	adds	r7, #8
 800ce3a:	46bd      	mov	sp, r7
 800ce3c:	bd80      	pop	{r7, pc}
 800ce3e:	bf00      	nop
 800ce40:	2000174c 	.word	0x2000174c
 800ce44:	20001278 	.word	0x20001278
 800ce48:	20001758 	.word	0x20001758
 800ce4c:	20001768 	.word	0x20001768
 800ce50:	20001754 	.word	0x20001754
 800ce54:	2000127c 	.word	0x2000127c
 800ce58:	e000ed04 	.word	0xe000ed04

0800ce5c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800ce5c:	b580      	push	{r7, lr}
 800ce5e:	b08a      	sub	sp, #40	@ 0x28
 800ce60:	af00      	add	r7, sp, #0
 800ce62:	6078      	str	r0, [r7, #4]
 800ce64:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800ce66:	2300      	movs	r3, #0
 800ce68:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d10b      	bne.n	800ce88 <vTaskDelayUntil+0x2c>
	__asm volatile
 800ce70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce74:	f383 8811 	msr	BASEPRI, r3
 800ce78:	f3bf 8f6f 	isb	sy
 800ce7c:	f3bf 8f4f 	dsb	sy
 800ce80:	617b      	str	r3, [r7, #20]
}
 800ce82:	bf00      	nop
 800ce84:	bf00      	nop
 800ce86:	e7fd      	b.n	800ce84 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800ce88:	683b      	ldr	r3, [r7, #0]
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d10b      	bne.n	800cea6 <vTaskDelayUntil+0x4a>
	__asm volatile
 800ce8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce92:	f383 8811 	msr	BASEPRI, r3
 800ce96:	f3bf 8f6f 	isb	sy
 800ce9a:	f3bf 8f4f 	dsb	sy
 800ce9e:	613b      	str	r3, [r7, #16]
}
 800cea0:	bf00      	nop
 800cea2:	bf00      	nop
 800cea4:	e7fd      	b.n	800cea2 <vTaskDelayUntil+0x46>
		configASSERT( uxSchedulerSuspended == 0 );
 800cea6:	4b2a      	ldr	r3, [pc, #168]	@ (800cf50 <vTaskDelayUntil+0xf4>)
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d00b      	beq.n	800cec6 <vTaskDelayUntil+0x6a>
	__asm volatile
 800ceae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ceb2:	f383 8811 	msr	BASEPRI, r3
 800ceb6:	f3bf 8f6f 	isb	sy
 800ceba:	f3bf 8f4f 	dsb	sy
 800cebe:	60fb      	str	r3, [r7, #12]
}
 800cec0:	bf00      	nop
 800cec2:	bf00      	nop
 800cec4:	e7fd      	b.n	800cec2 <vTaskDelayUntil+0x66>

		vTaskSuspendAll();
 800cec6:	f000 f8ef 	bl	800d0a8 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800ceca:	4b22      	ldr	r3, [pc, #136]	@ (800cf54 <vTaskDelayUntil+0xf8>)
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	683a      	ldr	r2, [r7, #0]
 800ced6:	4413      	add	r3, r2
 800ced8:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	6a3a      	ldr	r2, [r7, #32]
 800cee0:	429a      	cmp	r2, r3
 800cee2:	d20b      	bcs.n	800cefc <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	69fa      	ldr	r2, [r7, #28]
 800ceea:	429a      	cmp	r2, r3
 800ceec:	d211      	bcs.n	800cf12 <vTaskDelayUntil+0xb6>
 800ceee:	69fa      	ldr	r2, [r7, #28]
 800cef0:	6a3b      	ldr	r3, [r7, #32]
 800cef2:	429a      	cmp	r2, r3
 800cef4:	d90d      	bls.n	800cf12 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 800cef6:	2301      	movs	r3, #1
 800cef8:	627b      	str	r3, [r7, #36]	@ 0x24
 800cefa:	e00a      	b.n	800cf12 <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	69fa      	ldr	r2, [r7, #28]
 800cf02:	429a      	cmp	r2, r3
 800cf04:	d303      	bcc.n	800cf0e <vTaskDelayUntil+0xb2>
 800cf06:	69fa      	ldr	r2, [r7, #28]
 800cf08:	6a3b      	ldr	r3, [r7, #32]
 800cf0a:	429a      	cmp	r2, r3
 800cf0c:	d901      	bls.n	800cf12 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 800cf0e:	2301      	movs	r3, #1
 800cf10:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	69fa      	ldr	r2, [r7, #28]
 800cf16:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800cf18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d006      	beq.n	800cf2c <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800cf1e:	69fa      	ldr	r2, [r7, #28]
 800cf20:	6a3b      	ldr	r3, [r7, #32]
 800cf22:	1ad3      	subs	r3, r2, r3
 800cf24:	2100      	movs	r1, #0
 800cf26:	4618      	mov	r0, r3
 800cf28:	f000 fd40 	bl	800d9ac <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800cf2c:	f000 f8ca 	bl	800d0c4 <xTaskResumeAll>
 800cf30:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800cf32:	69bb      	ldr	r3, [r7, #24]
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d107      	bne.n	800cf48 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 800cf38:	4b07      	ldr	r3, [pc, #28]	@ (800cf58 <vTaskDelayUntil+0xfc>)
 800cf3a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cf3e:	601a      	str	r2, [r3, #0]
 800cf40:	f3bf 8f4f 	dsb	sy
 800cf44:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800cf48:	bf00      	nop
 800cf4a:	3728      	adds	r7, #40	@ 0x28
 800cf4c:	46bd      	mov	sp, r7
 800cf4e:	bd80      	pop	{r7, pc}
 800cf50:	20001774 	.word	0x20001774
 800cf54:	20001750 	.word	0x20001750
 800cf58:	e000ed04 	.word	0xe000ed04

0800cf5c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800cf5c:	b580      	push	{r7, lr}
 800cf5e:	b084      	sub	sp, #16
 800cf60:	af00      	add	r7, sp, #0
 800cf62:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800cf64:	2300      	movs	r3, #0
 800cf66:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d018      	beq.n	800cfa0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800cf6e:	4b14      	ldr	r3, [pc, #80]	@ (800cfc0 <vTaskDelay+0x64>)
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d00b      	beq.n	800cf8e <vTaskDelay+0x32>
	__asm volatile
 800cf76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf7a:	f383 8811 	msr	BASEPRI, r3
 800cf7e:	f3bf 8f6f 	isb	sy
 800cf82:	f3bf 8f4f 	dsb	sy
 800cf86:	60bb      	str	r3, [r7, #8]
}
 800cf88:	bf00      	nop
 800cf8a:	bf00      	nop
 800cf8c:	e7fd      	b.n	800cf8a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800cf8e:	f000 f88b 	bl	800d0a8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800cf92:	2100      	movs	r1, #0
 800cf94:	6878      	ldr	r0, [r7, #4]
 800cf96:	f000 fd09 	bl	800d9ac <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800cf9a:	f000 f893 	bl	800d0c4 <xTaskResumeAll>
 800cf9e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800cfa0:	68fb      	ldr	r3, [r7, #12]
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	d107      	bne.n	800cfb6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800cfa6:	4b07      	ldr	r3, [pc, #28]	@ (800cfc4 <vTaskDelay+0x68>)
 800cfa8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cfac:	601a      	str	r2, [r3, #0]
 800cfae:	f3bf 8f4f 	dsb	sy
 800cfb2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800cfb6:	bf00      	nop
 800cfb8:	3710      	adds	r7, #16
 800cfba:	46bd      	mov	sp, r7
 800cfbc:	bd80      	pop	{r7, pc}
 800cfbe:	bf00      	nop
 800cfc0:	20001774 	.word	0x20001774
 800cfc4:	e000ed04 	.word	0xe000ed04

0800cfc8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800cfc8:	b580      	push	{r7, lr}
 800cfca:	b08a      	sub	sp, #40	@ 0x28
 800cfcc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800cfce:	2300      	movs	r3, #0
 800cfd0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800cfd2:	2300      	movs	r3, #0
 800cfd4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800cfd6:	463a      	mov	r2, r7
 800cfd8:	1d39      	adds	r1, r7, #4
 800cfda:	f107 0308 	add.w	r3, r7, #8
 800cfde:	4618      	mov	r0, r3
 800cfe0:	f7fe fede 	bl	800bda0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800cfe4:	6839      	ldr	r1, [r7, #0]
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	68ba      	ldr	r2, [r7, #8]
 800cfea:	9202      	str	r2, [sp, #8]
 800cfec:	9301      	str	r3, [sp, #4]
 800cfee:	2300      	movs	r3, #0
 800cff0:	9300      	str	r3, [sp, #0]
 800cff2:	2300      	movs	r3, #0
 800cff4:	460a      	mov	r2, r1
 800cff6:	4924      	ldr	r1, [pc, #144]	@ (800d088 <vTaskStartScheduler+0xc0>)
 800cff8:	4824      	ldr	r0, [pc, #144]	@ (800d08c <vTaskStartScheduler+0xc4>)
 800cffa:	f7ff fd71 	bl	800cae0 <xTaskCreateStatic>
 800cffe:	4603      	mov	r3, r0
 800d000:	4a23      	ldr	r2, [pc, #140]	@ (800d090 <vTaskStartScheduler+0xc8>)
 800d002:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d004:	4b22      	ldr	r3, [pc, #136]	@ (800d090 <vTaskStartScheduler+0xc8>)
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d002      	beq.n	800d012 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d00c:	2301      	movs	r3, #1
 800d00e:	617b      	str	r3, [r7, #20]
 800d010:	e001      	b.n	800d016 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d012:	2300      	movs	r3, #0
 800d014:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800d016:	697b      	ldr	r3, [r7, #20]
 800d018:	2b01      	cmp	r3, #1
 800d01a:	d102      	bne.n	800d022 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800d01c:	f000 fd1a 	bl	800da54 <xTimerCreateTimerTask>
 800d020:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d022:	697b      	ldr	r3, [r7, #20]
 800d024:	2b01      	cmp	r3, #1
 800d026:	d11b      	bne.n	800d060 <vTaskStartScheduler+0x98>
	__asm volatile
 800d028:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d02c:	f383 8811 	msr	BASEPRI, r3
 800d030:	f3bf 8f6f 	isb	sy
 800d034:	f3bf 8f4f 	dsb	sy
 800d038:	613b      	str	r3, [r7, #16]
}
 800d03a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d03c:	4b15      	ldr	r3, [pc, #84]	@ (800d094 <vTaskStartScheduler+0xcc>)
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	3354      	adds	r3, #84	@ 0x54
 800d042:	4a15      	ldr	r2, [pc, #84]	@ (800d098 <vTaskStartScheduler+0xd0>)
 800d044:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d046:	4b15      	ldr	r3, [pc, #84]	@ (800d09c <vTaskStartScheduler+0xd4>)
 800d048:	f04f 32ff 	mov.w	r2, #4294967295
 800d04c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d04e:	4b14      	ldr	r3, [pc, #80]	@ (800d0a0 <vTaskStartScheduler+0xd8>)
 800d050:	2201      	movs	r2, #1
 800d052:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d054:	4b13      	ldr	r3, [pc, #76]	@ (800d0a4 <vTaskStartScheduler+0xdc>)
 800d056:	2200      	movs	r2, #0
 800d058:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d05a:	f001 f8e1 	bl	800e220 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d05e:	e00f      	b.n	800d080 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d060:	697b      	ldr	r3, [r7, #20]
 800d062:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d066:	d10b      	bne.n	800d080 <vTaskStartScheduler+0xb8>
	__asm volatile
 800d068:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d06c:	f383 8811 	msr	BASEPRI, r3
 800d070:	f3bf 8f6f 	isb	sy
 800d074:	f3bf 8f4f 	dsb	sy
 800d078:	60fb      	str	r3, [r7, #12]
}
 800d07a:	bf00      	nop
 800d07c:	bf00      	nop
 800d07e:	e7fd      	b.n	800d07c <vTaskStartScheduler+0xb4>
}
 800d080:	bf00      	nop
 800d082:	3718      	adds	r7, #24
 800d084:	46bd      	mov	sp, r7
 800d086:	bd80      	pop	{r7, pc}
 800d088:	080120a0 	.word	0x080120a0
 800d08c:	0800d6d9 	.word	0x0800d6d9
 800d090:	20001770 	.word	0x20001770
 800d094:	20001278 	.word	0x20001278
 800d098:	2000002c 	.word	0x2000002c
 800d09c:	2000176c 	.word	0x2000176c
 800d0a0:	20001758 	.word	0x20001758
 800d0a4:	20001750 	.word	0x20001750

0800d0a8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d0a8:	b480      	push	{r7}
 800d0aa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800d0ac:	4b04      	ldr	r3, [pc, #16]	@ (800d0c0 <vTaskSuspendAll+0x18>)
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	3301      	adds	r3, #1
 800d0b2:	4a03      	ldr	r2, [pc, #12]	@ (800d0c0 <vTaskSuspendAll+0x18>)
 800d0b4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800d0b6:	bf00      	nop
 800d0b8:	46bd      	mov	sp, r7
 800d0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0be:	4770      	bx	lr
 800d0c0:	20001774 	.word	0x20001774

0800d0c4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d0c4:	b580      	push	{r7, lr}
 800d0c6:	b084      	sub	sp, #16
 800d0c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d0ca:	2300      	movs	r3, #0
 800d0cc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d0ce:	2300      	movs	r3, #0
 800d0d0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d0d2:	4b42      	ldr	r3, [pc, #264]	@ (800d1dc <xTaskResumeAll+0x118>)
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d10b      	bne.n	800d0f2 <xTaskResumeAll+0x2e>
	__asm volatile
 800d0da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0de:	f383 8811 	msr	BASEPRI, r3
 800d0e2:	f3bf 8f6f 	isb	sy
 800d0e6:	f3bf 8f4f 	dsb	sy
 800d0ea:	603b      	str	r3, [r7, #0]
}
 800d0ec:	bf00      	nop
 800d0ee:	bf00      	nop
 800d0f0:	e7fd      	b.n	800d0ee <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d0f2:	f001 f939 	bl	800e368 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d0f6:	4b39      	ldr	r3, [pc, #228]	@ (800d1dc <xTaskResumeAll+0x118>)
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	3b01      	subs	r3, #1
 800d0fc:	4a37      	ldr	r2, [pc, #220]	@ (800d1dc <xTaskResumeAll+0x118>)
 800d0fe:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d100:	4b36      	ldr	r3, [pc, #216]	@ (800d1dc <xTaskResumeAll+0x118>)
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	2b00      	cmp	r3, #0
 800d106:	d162      	bne.n	800d1ce <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d108:	4b35      	ldr	r3, [pc, #212]	@ (800d1e0 <xTaskResumeAll+0x11c>)
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d05e      	beq.n	800d1ce <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d110:	e02f      	b.n	800d172 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d112:	4b34      	ldr	r3, [pc, #208]	@ (800d1e4 <xTaskResumeAll+0x120>)
 800d114:	68db      	ldr	r3, [r3, #12]
 800d116:	68db      	ldr	r3, [r3, #12]
 800d118:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	3318      	adds	r3, #24
 800d11e:	4618      	mov	r0, r3
 800d120:	f7fe fefc 	bl	800bf1c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	3304      	adds	r3, #4
 800d128:	4618      	mov	r0, r3
 800d12a:	f7fe fef7 	bl	800bf1c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d132:	4b2d      	ldr	r3, [pc, #180]	@ (800d1e8 <xTaskResumeAll+0x124>)
 800d134:	681b      	ldr	r3, [r3, #0]
 800d136:	429a      	cmp	r2, r3
 800d138:	d903      	bls.n	800d142 <xTaskResumeAll+0x7e>
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d13e:	4a2a      	ldr	r2, [pc, #168]	@ (800d1e8 <xTaskResumeAll+0x124>)
 800d140:	6013      	str	r3, [r2, #0]
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d146:	4613      	mov	r3, r2
 800d148:	009b      	lsls	r3, r3, #2
 800d14a:	4413      	add	r3, r2
 800d14c:	009b      	lsls	r3, r3, #2
 800d14e:	4a27      	ldr	r2, [pc, #156]	@ (800d1ec <xTaskResumeAll+0x128>)
 800d150:	441a      	add	r2, r3
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	3304      	adds	r3, #4
 800d156:	4619      	mov	r1, r3
 800d158:	4610      	mov	r0, r2
 800d15a:	f7fe fe82 	bl	800be62 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d15e:	68fb      	ldr	r3, [r7, #12]
 800d160:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d162:	4b23      	ldr	r3, [pc, #140]	@ (800d1f0 <xTaskResumeAll+0x12c>)
 800d164:	681b      	ldr	r3, [r3, #0]
 800d166:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d168:	429a      	cmp	r2, r3
 800d16a:	d302      	bcc.n	800d172 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800d16c:	4b21      	ldr	r3, [pc, #132]	@ (800d1f4 <xTaskResumeAll+0x130>)
 800d16e:	2201      	movs	r2, #1
 800d170:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d172:	4b1c      	ldr	r3, [pc, #112]	@ (800d1e4 <xTaskResumeAll+0x120>)
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	2b00      	cmp	r3, #0
 800d178:	d1cb      	bne.n	800d112 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d17a:	68fb      	ldr	r3, [r7, #12]
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d001      	beq.n	800d184 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d180:	f000 fb66 	bl	800d850 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d184:	4b1c      	ldr	r3, [pc, #112]	@ (800d1f8 <xTaskResumeAll+0x134>)
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d010      	beq.n	800d1b2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d190:	f000 f846 	bl	800d220 <xTaskIncrementTick>
 800d194:	4603      	mov	r3, r0
 800d196:	2b00      	cmp	r3, #0
 800d198:	d002      	beq.n	800d1a0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800d19a:	4b16      	ldr	r3, [pc, #88]	@ (800d1f4 <xTaskResumeAll+0x130>)
 800d19c:	2201      	movs	r2, #1
 800d19e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	3b01      	subs	r3, #1
 800d1a4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d1f1      	bne.n	800d190 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800d1ac:	4b12      	ldr	r3, [pc, #72]	@ (800d1f8 <xTaskResumeAll+0x134>)
 800d1ae:	2200      	movs	r2, #0
 800d1b0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d1b2:	4b10      	ldr	r3, [pc, #64]	@ (800d1f4 <xTaskResumeAll+0x130>)
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d009      	beq.n	800d1ce <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d1ba:	2301      	movs	r3, #1
 800d1bc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d1be:	4b0f      	ldr	r3, [pc, #60]	@ (800d1fc <xTaskResumeAll+0x138>)
 800d1c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d1c4:	601a      	str	r2, [r3, #0]
 800d1c6:	f3bf 8f4f 	dsb	sy
 800d1ca:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d1ce:	f001 f8fd 	bl	800e3cc <vPortExitCritical>

	return xAlreadyYielded;
 800d1d2:	68bb      	ldr	r3, [r7, #8]
}
 800d1d4:	4618      	mov	r0, r3
 800d1d6:	3710      	adds	r7, #16
 800d1d8:	46bd      	mov	sp, r7
 800d1da:	bd80      	pop	{r7, pc}
 800d1dc:	20001774 	.word	0x20001774
 800d1e0:	2000174c 	.word	0x2000174c
 800d1e4:	2000170c 	.word	0x2000170c
 800d1e8:	20001754 	.word	0x20001754
 800d1ec:	2000127c 	.word	0x2000127c
 800d1f0:	20001278 	.word	0x20001278
 800d1f4:	20001760 	.word	0x20001760
 800d1f8:	2000175c 	.word	0x2000175c
 800d1fc:	e000ed04 	.word	0xe000ed04

0800d200 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d200:	b480      	push	{r7}
 800d202:	b083      	sub	sp, #12
 800d204:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d206:	4b05      	ldr	r3, [pc, #20]	@ (800d21c <xTaskGetTickCount+0x1c>)
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d20c:	687b      	ldr	r3, [r7, #4]
}
 800d20e:	4618      	mov	r0, r3
 800d210:	370c      	adds	r7, #12
 800d212:	46bd      	mov	sp, r7
 800d214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d218:	4770      	bx	lr
 800d21a:	bf00      	nop
 800d21c:	20001750 	.word	0x20001750

0800d220 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d220:	b580      	push	{r7, lr}
 800d222:	b086      	sub	sp, #24
 800d224:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d226:	2300      	movs	r3, #0
 800d228:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d22a:	4b4f      	ldr	r3, [pc, #316]	@ (800d368 <xTaskIncrementTick+0x148>)
 800d22c:	681b      	ldr	r3, [r3, #0]
 800d22e:	2b00      	cmp	r3, #0
 800d230:	f040 8090 	bne.w	800d354 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d234:	4b4d      	ldr	r3, [pc, #308]	@ (800d36c <xTaskIncrementTick+0x14c>)
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	3301      	adds	r3, #1
 800d23a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d23c:	4a4b      	ldr	r2, [pc, #300]	@ (800d36c <xTaskIncrementTick+0x14c>)
 800d23e:	693b      	ldr	r3, [r7, #16]
 800d240:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d242:	693b      	ldr	r3, [r7, #16]
 800d244:	2b00      	cmp	r3, #0
 800d246:	d121      	bne.n	800d28c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800d248:	4b49      	ldr	r3, [pc, #292]	@ (800d370 <xTaskIncrementTick+0x150>)
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d00b      	beq.n	800d26a <xTaskIncrementTick+0x4a>
	__asm volatile
 800d252:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d256:	f383 8811 	msr	BASEPRI, r3
 800d25a:	f3bf 8f6f 	isb	sy
 800d25e:	f3bf 8f4f 	dsb	sy
 800d262:	603b      	str	r3, [r7, #0]
}
 800d264:	bf00      	nop
 800d266:	bf00      	nop
 800d268:	e7fd      	b.n	800d266 <xTaskIncrementTick+0x46>
 800d26a:	4b41      	ldr	r3, [pc, #260]	@ (800d370 <xTaskIncrementTick+0x150>)
 800d26c:	681b      	ldr	r3, [r3, #0]
 800d26e:	60fb      	str	r3, [r7, #12]
 800d270:	4b40      	ldr	r3, [pc, #256]	@ (800d374 <xTaskIncrementTick+0x154>)
 800d272:	681b      	ldr	r3, [r3, #0]
 800d274:	4a3e      	ldr	r2, [pc, #248]	@ (800d370 <xTaskIncrementTick+0x150>)
 800d276:	6013      	str	r3, [r2, #0]
 800d278:	4a3e      	ldr	r2, [pc, #248]	@ (800d374 <xTaskIncrementTick+0x154>)
 800d27a:	68fb      	ldr	r3, [r7, #12]
 800d27c:	6013      	str	r3, [r2, #0]
 800d27e:	4b3e      	ldr	r3, [pc, #248]	@ (800d378 <xTaskIncrementTick+0x158>)
 800d280:	681b      	ldr	r3, [r3, #0]
 800d282:	3301      	adds	r3, #1
 800d284:	4a3c      	ldr	r2, [pc, #240]	@ (800d378 <xTaskIncrementTick+0x158>)
 800d286:	6013      	str	r3, [r2, #0]
 800d288:	f000 fae2 	bl	800d850 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d28c:	4b3b      	ldr	r3, [pc, #236]	@ (800d37c <xTaskIncrementTick+0x15c>)
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	693a      	ldr	r2, [r7, #16]
 800d292:	429a      	cmp	r2, r3
 800d294:	d349      	bcc.n	800d32a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d296:	4b36      	ldr	r3, [pc, #216]	@ (800d370 <xTaskIncrementTick+0x150>)
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d104      	bne.n	800d2aa <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d2a0:	4b36      	ldr	r3, [pc, #216]	@ (800d37c <xTaskIncrementTick+0x15c>)
 800d2a2:	f04f 32ff 	mov.w	r2, #4294967295
 800d2a6:	601a      	str	r2, [r3, #0]
					break;
 800d2a8:	e03f      	b.n	800d32a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d2aa:	4b31      	ldr	r3, [pc, #196]	@ (800d370 <xTaskIncrementTick+0x150>)
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	68db      	ldr	r3, [r3, #12]
 800d2b0:	68db      	ldr	r3, [r3, #12]
 800d2b2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d2b4:	68bb      	ldr	r3, [r7, #8]
 800d2b6:	685b      	ldr	r3, [r3, #4]
 800d2b8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d2ba:	693a      	ldr	r2, [r7, #16]
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	429a      	cmp	r2, r3
 800d2c0:	d203      	bcs.n	800d2ca <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d2c2:	4a2e      	ldr	r2, [pc, #184]	@ (800d37c <xTaskIncrementTick+0x15c>)
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d2c8:	e02f      	b.n	800d32a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d2ca:	68bb      	ldr	r3, [r7, #8]
 800d2cc:	3304      	adds	r3, #4
 800d2ce:	4618      	mov	r0, r3
 800d2d0:	f7fe fe24 	bl	800bf1c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d2d4:	68bb      	ldr	r3, [r7, #8]
 800d2d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d004      	beq.n	800d2e6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d2dc:	68bb      	ldr	r3, [r7, #8]
 800d2de:	3318      	adds	r3, #24
 800d2e0:	4618      	mov	r0, r3
 800d2e2:	f7fe fe1b 	bl	800bf1c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d2e6:	68bb      	ldr	r3, [r7, #8]
 800d2e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d2ea:	4b25      	ldr	r3, [pc, #148]	@ (800d380 <xTaskIncrementTick+0x160>)
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	429a      	cmp	r2, r3
 800d2f0:	d903      	bls.n	800d2fa <xTaskIncrementTick+0xda>
 800d2f2:	68bb      	ldr	r3, [r7, #8]
 800d2f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d2f6:	4a22      	ldr	r2, [pc, #136]	@ (800d380 <xTaskIncrementTick+0x160>)
 800d2f8:	6013      	str	r3, [r2, #0]
 800d2fa:	68bb      	ldr	r3, [r7, #8]
 800d2fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d2fe:	4613      	mov	r3, r2
 800d300:	009b      	lsls	r3, r3, #2
 800d302:	4413      	add	r3, r2
 800d304:	009b      	lsls	r3, r3, #2
 800d306:	4a1f      	ldr	r2, [pc, #124]	@ (800d384 <xTaskIncrementTick+0x164>)
 800d308:	441a      	add	r2, r3
 800d30a:	68bb      	ldr	r3, [r7, #8]
 800d30c:	3304      	adds	r3, #4
 800d30e:	4619      	mov	r1, r3
 800d310:	4610      	mov	r0, r2
 800d312:	f7fe fda6 	bl	800be62 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d316:	68bb      	ldr	r3, [r7, #8]
 800d318:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d31a:	4b1b      	ldr	r3, [pc, #108]	@ (800d388 <xTaskIncrementTick+0x168>)
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d320:	429a      	cmp	r2, r3
 800d322:	d3b8      	bcc.n	800d296 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800d324:	2301      	movs	r3, #1
 800d326:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d328:	e7b5      	b.n	800d296 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d32a:	4b17      	ldr	r3, [pc, #92]	@ (800d388 <xTaskIncrementTick+0x168>)
 800d32c:	681b      	ldr	r3, [r3, #0]
 800d32e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d330:	4914      	ldr	r1, [pc, #80]	@ (800d384 <xTaskIncrementTick+0x164>)
 800d332:	4613      	mov	r3, r2
 800d334:	009b      	lsls	r3, r3, #2
 800d336:	4413      	add	r3, r2
 800d338:	009b      	lsls	r3, r3, #2
 800d33a:	440b      	add	r3, r1
 800d33c:	681b      	ldr	r3, [r3, #0]
 800d33e:	2b01      	cmp	r3, #1
 800d340:	d901      	bls.n	800d346 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800d342:	2301      	movs	r3, #1
 800d344:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800d346:	4b11      	ldr	r3, [pc, #68]	@ (800d38c <xTaskIncrementTick+0x16c>)
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d007      	beq.n	800d35e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800d34e:	2301      	movs	r3, #1
 800d350:	617b      	str	r3, [r7, #20]
 800d352:	e004      	b.n	800d35e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800d354:	4b0e      	ldr	r3, [pc, #56]	@ (800d390 <xTaskIncrementTick+0x170>)
 800d356:	681b      	ldr	r3, [r3, #0]
 800d358:	3301      	adds	r3, #1
 800d35a:	4a0d      	ldr	r2, [pc, #52]	@ (800d390 <xTaskIncrementTick+0x170>)
 800d35c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800d35e:	697b      	ldr	r3, [r7, #20]
}
 800d360:	4618      	mov	r0, r3
 800d362:	3718      	adds	r7, #24
 800d364:	46bd      	mov	sp, r7
 800d366:	bd80      	pop	{r7, pc}
 800d368:	20001774 	.word	0x20001774
 800d36c:	20001750 	.word	0x20001750
 800d370:	20001704 	.word	0x20001704
 800d374:	20001708 	.word	0x20001708
 800d378:	20001764 	.word	0x20001764
 800d37c:	2000176c 	.word	0x2000176c
 800d380:	20001754 	.word	0x20001754
 800d384:	2000127c 	.word	0x2000127c
 800d388:	20001278 	.word	0x20001278
 800d38c:	20001760 	.word	0x20001760
 800d390:	2000175c 	.word	0x2000175c

0800d394 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d394:	b480      	push	{r7}
 800d396:	b085      	sub	sp, #20
 800d398:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d39a:	4b2b      	ldr	r3, [pc, #172]	@ (800d448 <vTaskSwitchContext+0xb4>)
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d003      	beq.n	800d3aa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d3a2:	4b2a      	ldr	r3, [pc, #168]	@ (800d44c <vTaskSwitchContext+0xb8>)
 800d3a4:	2201      	movs	r2, #1
 800d3a6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d3a8:	e047      	b.n	800d43a <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800d3aa:	4b28      	ldr	r3, [pc, #160]	@ (800d44c <vTaskSwitchContext+0xb8>)
 800d3ac:	2200      	movs	r2, #0
 800d3ae:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d3b0:	4b27      	ldr	r3, [pc, #156]	@ (800d450 <vTaskSwitchContext+0xbc>)
 800d3b2:	681b      	ldr	r3, [r3, #0]
 800d3b4:	60fb      	str	r3, [r7, #12]
 800d3b6:	e011      	b.n	800d3dc <vTaskSwitchContext+0x48>
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d10b      	bne.n	800d3d6 <vTaskSwitchContext+0x42>
	__asm volatile
 800d3be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d3c2:	f383 8811 	msr	BASEPRI, r3
 800d3c6:	f3bf 8f6f 	isb	sy
 800d3ca:	f3bf 8f4f 	dsb	sy
 800d3ce:	607b      	str	r3, [r7, #4]
}
 800d3d0:	bf00      	nop
 800d3d2:	bf00      	nop
 800d3d4:	e7fd      	b.n	800d3d2 <vTaskSwitchContext+0x3e>
 800d3d6:	68fb      	ldr	r3, [r7, #12]
 800d3d8:	3b01      	subs	r3, #1
 800d3da:	60fb      	str	r3, [r7, #12]
 800d3dc:	491d      	ldr	r1, [pc, #116]	@ (800d454 <vTaskSwitchContext+0xc0>)
 800d3de:	68fa      	ldr	r2, [r7, #12]
 800d3e0:	4613      	mov	r3, r2
 800d3e2:	009b      	lsls	r3, r3, #2
 800d3e4:	4413      	add	r3, r2
 800d3e6:	009b      	lsls	r3, r3, #2
 800d3e8:	440b      	add	r3, r1
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d0e3      	beq.n	800d3b8 <vTaskSwitchContext+0x24>
 800d3f0:	68fa      	ldr	r2, [r7, #12]
 800d3f2:	4613      	mov	r3, r2
 800d3f4:	009b      	lsls	r3, r3, #2
 800d3f6:	4413      	add	r3, r2
 800d3f8:	009b      	lsls	r3, r3, #2
 800d3fa:	4a16      	ldr	r2, [pc, #88]	@ (800d454 <vTaskSwitchContext+0xc0>)
 800d3fc:	4413      	add	r3, r2
 800d3fe:	60bb      	str	r3, [r7, #8]
 800d400:	68bb      	ldr	r3, [r7, #8]
 800d402:	685b      	ldr	r3, [r3, #4]
 800d404:	685a      	ldr	r2, [r3, #4]
 800d406:	68bb      	ldr	r3, [r7, #8]
 800d408:	605a      	str	r2, [r3, #4]
 800d40a:	68bb      	ldr	r3, [r7, #8]
 800d40c:	685a      	ldr	r2, [r3, #4]
 800d40e:	68bb      	ldr	r3, [r7, #8]
 800d410:	3308      	adds	r3, #8
 800d412:	429a      	cmp	r2, r3
 800d414:	d104      	bne.n	800d420 <vTaskSwitchContext+0x8c>
 800d416:	68bb      	ldr	r3, [r7, #8]
 800d418:	685b      	ldr	r3, [r3, #4]
 800d41a:	685a      	ldr	r2, [r3, #4]
 800d41c:	68bb      	ldr	r3, [r7, #8]
 800d41e:	605a      	str	r2, [r3, #4]
 800d420:	68bb      	ldr	r3, [r7, #8]
 800d422:	685b      	ldr	r3, [r3, #4]
 800d424:	68db      	ldr	r3, [r3, #12]
 800d426:	4a0c      	ldr	r2, [pc, #48]	@ (800d458 <vTaskSwitchContext+0xc4>)
 800d428:	6013      	str	r3, [r2, #0]
 800d42a:	4a09      	ldr	r2, [pc, #36]	@ (800d450 <vTaskSwitchContext+0xbc>)
 800d42c:	68fb      	ldr	r3, [r7, #12]
 800d42e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d430:	4b09      	ldr	r3, [pc, #36]	@ (800d458 <vTaskSwitchContext+0xc4>)
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	3354      	adds	r3, #84	@ 0x54
 800d436:	4a09      	ldr	r2, [pc, #36]	@ (800d45c <vTaskSwitchContext+0xc8>)
 800d438:	6013      	str	r3, [r2, #0]
}
 800d43a:	bf00      	nop
 800d43c:	3714      	adds	r7, #20
 800d43e:	46bd      	mov	sp, r7
 800d440:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d444:	4770      	bx	lr
 800d446:	bf00      	nop
 800d448:	20001774 	.word	0x20001774
 800d44c:	20001760 	.word	0x20001760
 800d450:	20001754 	.word	0x20001754
 800d454:	2000127c 	.word	0x2000127c
 800d458:	20001278 	.word	0x20001278
 800d45c:	2000002c 	.word	0x2000002c

0800d460 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d460:	b580      	push	{r7, lr}
 800d462:	b084      	sub	sp, #16
 800d464:	af00      	add	r7, sp, #0
 800d466:	6078      	str	r0, [r7, #4]
 800d468:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d10b      	bne.n	800d488 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800d470:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d474:	f383 8811 	msr	BASEPRI, r3
 800d478:	f3bf 8f6f 	isb	sy
 800d47c:	f3bf 8f4f 	dsb	sy
 800d480:	60fb      	str	r3, [r7, #12]
}
 800d482:	bf00      	nop
 800d484:	bf00      	nop
 800d486:	e7fd      	b.n	800d484 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d488:	4b07      	ldr	r3, [pc, #28]	@ (800d4a8 <vTaskPlaceOnEventList+0x48>)
 800d48a:	681b      	ldr	r3, [r3, #0]
 800d48c:	3318      	adds	r3, #24
 800d48e:	4619      	mov	r1, r3
 800d490:	6878      	ldr	r0, [r7, #4]
 800d492:	f7fe fd0a 	bl	800beaa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d496:	2101      	movs	r1, #1
 800d498:	6838      	ldr	r0, [r7, #0]
 800d49a:	f000 fa87 	bl	800d9ac <prvAddCurrentTaskToDelayedList>
}
 800d49e:	bf00      	nop
 800d4a0:	3710      	adds	r7, #16
 800d4a2:	46bd      	mov	sp, r7
 800d4a4:	bd80      	pop	{r7, pc}
 800d4a6:	bf00      	nop
 800d4a8:	20001278 	.word	0x20001278

0800d4ac <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d4ac:	b580      	push	{r7, lr}
 800d4ae:	b086      	sub	sp, #24
 800d4b0:	af00      	add	r7, sp, #0
 800d4b2:	60f8      	str	r0, [r7, #12]
 800d4b4:	60b9      	str	r1, [r7, #8]
 800d4b6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d10b      	bne.n	800d4d6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800d4be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4c2:	f383 8811 	msr	BASEPRI, r3
 800d4c6:	f3bf 8f6f 	isb	sy
 800d4ca:	f3bf 8f4f 	dsb	sy
 800d4ce:	617b      	str	r3, [r7, #20]
}
 800d4d0:	bf00      	nop
 800d4d2:	bf00      	nop
 800d4d4:	e7fd      	b.n	800d4d2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d4d6:	4b0a      	ldr	r3, [pc, #40]	@ (800d500 <vTaskPlaceOnEventListRestricted+0x54>)
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	3318      	adds	r3, #24
 800d4dc:	4619      	mov	r1, r3
 800d4de:	68f8      	ldr	r0, [r7, #12]
 800d4e0:	f7fe fcbf 	bl	800be62 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d002      	beq.n	800d4f0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800d4ea:	f04f 33ff 	mov.w	r3, #4294967295
 800d4ee:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d4f0:	6879      	ldr	r1, [r7, #4]
 800d4f2:	68b8      	ldr	r0, [r7, #8]
 800d4f4:	f000 fa5a 	bl	800d9ac <prvAddCurrentTaskToDelayedList>
	}
 800d4f8:	bf00      	nop
 800d4fa:	3718      	adds	r7, #24
 800d4fc:	46bd      	mov	sp, r7
 800d4fe:	bd80      	pop	{r7, pc}
 800d500:	20001278 	.word	0x20001278

0800d504 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d504:	b580      	push	{r7, lr}
 800d506:	b086      	sub	sp, #24
 800d508:	af00      	add	r7, sp, #0
 800d50a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	68db      	ldr	r3, [r3, #12]
 800d510:	68db      	ldr	r3, [r3, #12]
 800d512:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d514:	693b      	ldr	r3, [r7, #16]
 800d516:	2b00      	cmp	r3, #0
 800d518:	d10b      	bne.n	800d532 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800d51a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d51e:	f383 8811 	msr	BASEPRI, r3
 800d522:	f3bf 8f6f 	isb	sy
 800d526:	f3bf 8f4f 	dsb	sy
 800d52a:	60fb      	str	r3, [r7, #12]
}
 800d52c:	bf00      	nop
 800d52e:	bf00      	nop
 800d530:	e7fd      	b.n	800d52e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d532:	693b      	ldr	r3, [r7, #16]
 800d534:	3318      	adds	r3, #24
 800d536:	4618      	mov	r0, r3
 800d538:	f7fe fcf0 	bl	800bf1c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d53c:	4b1d      	ldr	r3, [pc, #116]	@ (800d5b4 <xTaskRemoveFromEventList+0xb0>)
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	2b00      	cmp	r3, #0
 800d542:	d11d      	bne.n	800d580 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d544:	693b      	ldr	r3, [r7, #16]
 800d546:	3304      	adds	r3, #4
 800d548:	4618      	mov	r0, r3
 800d54a:	f7fe fce7 	bl	800bf1c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d54e:	693b      	ldr	r3, [r7, #16]
 800d550:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d552:	4b19      	ldr	r3, [pc, #100]	@ (800d5b8 <xTaskRemoveFromEventList+0xb4>)
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	429a      	cmp	r2, r3
 800d558:	d903      	bls.n	800d562 <xTaskRemoveFromEventList+0x5e>
 800d55a:	693b      	ldr	r3, [r7, #16]
 800d55c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d55e:	4a16      	ldr	r2, [pc, #88]	@ (800d5b8 <xTaskRemoveFromEventList+0xb4>)
 800d560:	6013      	str	r3, [r2, #0]
 800d562:	693b      	ldr	r3, [r7, #16]
 800d564:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d566:	4613      	mov	r3, r2
 800d568:	009b      	lsls	r3, r3, #2
 800d56a:	4413      	add	r3, r2
 800d56c:	009b      	lsls	r3, r3, #2
 800d56e:	4a13      	ldr	r2, [pc, #76]	@ (800d5bc <xTaskRemoveFromEventList+0xb8>)
 800d570:	441a      	add	r2, r3
 800d572:	693b      	ldr	r3, [r7, #16]
 800d574:	3304      	adds	r3, #4
 800d576:	4619      	mov	r1, r3
 800d578:	4610      	mov	r0, r2
 800d57a:	f7fe fc72 	bl	800be62 <vListInsertEnd>
 800d57e:	e005      	b.n	800d58c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d580:	693b      	ldr	r3, [r7, #16]
 800d582:	3318      	adds	r3, #24
 800d584:	4619      	mov	r1, r3
 800d586:	480e      	ldr	r0, [pc, #56]	@ (800d5c0 <xTaskRemoveFromEventList+0xbc>)
 800d588:	f7fe fc6b 	bl	800be62 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d58c:	693b      	ldr	r3, [r7, #16]
 800d58e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d590:	4b0c      	ldr	r3, [pc, #48]	@ (800d5c4 <xTaskRemoveFromEventList+0xc0>)
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d596:	429a      	cmp	r2, r3
 800d598:	d905      	bls.n	800d5a6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d59a:	2301      	movs	r3, #1
 800d59c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d59e:	4b0a      	ldr	r3, [pc, #40]	@ (800d5c8 <xTaskRemoveFromEventList+0xc4>)
 800d5a0:	2201      	movs	r2, #1
 800d5a2:	601a      	str	r2, [r3, #0]
 800d5a4:	e001      	b.n	800d5aa <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800d5a6:	2300      	movs	r3, #0
 800d5a8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d5aa:	697b      	ldr	r3, [r7, #20]
}
 800d5ac:	4618      	mov	r0, r3
 800d5ae:	3718      	adds	r7, #24
 800d5b0:	46bd      	mov	sp, r7
 800d5b2:	bd80      	pop	{r7, pc}
 800d5b4:	20001774 	.word	0x20001774
 800d5b8:	20001754 	.word	0x20001754
 800d5bc:	2000127c 	.word	0x2000127c
 800d5c0:	2000170c 	.word	0x2000170c
 800d5c4:	20001278 	.word	0x20001278
 800d5c8:	20001760 	.word	0x20001760

0800d5cc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d5cc:	b480      	push	{r7}
 800d5ce:	b083      	sub	sp, #12
 800d5d0:	af00      	add	r7, sp, #0
 800d5d2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d5d4:	4b06      	ldr	r3, [pc, #24]	@ (800d5f0 <vTaskInternalSetTimeOutState+0x24>)
 800d5d6:	681a      	ldr	r2, [r3, #0]
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d5dc:	4b05      	ldr	r3, [pc, #20]	@ (800d5f4 <vTaskInternalSetTimeOutState+0x28>)
 800d5de:	681a      	ldr	r2, [r3, #0]
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	605a      	str	r2, [r3, #4]
}
 800d5e4:	bf00      	nop
 800d5e6:	370c      	adds	r7, #12
 800d5e8:	46bd      	mov	sp, r7
 800d5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ee:	4770      	bx	lr
 800d5f0:	20001764 	.word	0x20001764
 800d5f4:	20001750 	.word	0x20001750

0800d5f8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d5f8:	b580      	push	{r7, lr}
 800d5fa:	b088      	sub	sp, #32
 800d5fc:	af00      	add	r7, sp, #0
 800d5fe:	6078      	str	r0, [r7, #4]
 800d600:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	2b00      	cmp	r3, #0
 800d606:	d10b      	bne.n	800d620 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800d608:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d60c:	f383 8811 	msr	BASEPRI, r3
 800d610:	f3bf 8f6f 	isb	sy
 800d614:	f3bf 8f4f 	dsb	sy
 800d618:	613b      	str	r3, [r7, #16]
}
 800d61a:	bf00      	nop
 800d61c:	bf00      	nop
 800d61e:	e7fd      	b.n	800d61c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d620:	683b      	ldr	r3, [r7, #0]
 800d622:	2b00      	cmp	r3, #0
 800d624:	d10b      	bne.n	800d63e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800d626:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d62a:	f383 8811 	msr	BASEPRI, r3
 800d62e:	f3bf 8f6f 	isb	sy
 800d632:	f3bf 8f4f 	dsb	sy
 800d636:	60fb      	str	r3, [r7, #12]
}
 800d638:	bf00      	nop
 800d63a:	bf00      	nop
 800d63c:	e7fd      	b.n	800d63a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800d63e:	f000 fe93 	bl	800e368 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d642:	4b1d      	ldr	r3, [pc, #116]	@ (800d6b8 <xTaskCheckForTimeOut+0xc0>)
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	685b      	ldr	r3, [r3, #4]
 800d64c:	69ba      	ldr	r2, [r7, #24]
 800d64e:	1ad3      	subs	r3, r2, r3
 800d650:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d652:	683b      	ldr	r3, [r7, #0]
 800d654:	681b      	ldr	r3, [r3, #0]
 800d656:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d65a:	d102      	bne.n	800d662 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d65c:	2300      	movs	r3, #0
 800d65e:	61fb      	str	r3, [r7, #28]
 800d660:	e023      	b.n	800d6aa <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	681a      	ldr	r2, [r3, #0]
 800d666:	4b15      	ldr	r3, [pc, #84]	@ (800d6bc <xTaskCheckForTimeOut+0xc4>)
 800d668:	681b      	ldr	r3, [r3, #0]
 800d66a:	429a      	cmp	r2, r3
 800d66c:	d007      	beq.n	800d67e <xTaskCheckForTimeOut+0x86>
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	685b      	ldr	r3, [r3, #4]
 800d672:	69ba      	ldr	r2, [r7, #24]
 800d674:	429a      	cmp	r2, r3
 800d676:	d302      	bcc.n	800d67e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d678:	2301      	movs	r3, #1
 800d67a:	61fb      	str	r3, [r7, #28]
 800d67c:	e015      	b.n	800d6aa <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d67e:	683b      	ldr	r3, [r7, #0]
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	697a      	ldr	r2, [r7, #20]
 800d684:	429a      	cmp	r2, r3
 800d686:	d20b      	bcs.n	800d6a0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d688:	683b      	ldr	r3, [r7, #0]
 800d68a:	681a      	ldr	r2, [r3, #0]
 800d68c:	697b      	ldr	r3, [r7, #20]
 800d68e:	1ad2      	subs	r2, r2, r3
 800d690:	683b      	ldr	r3, [r7, #0]
 800d692:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d694:	6878      	ldr	r0, [r7, #4]
 800d696:	f7ff ff99 	bl	800d5cc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d69a:	2300      	movs	r3, #0
 800d69c:	61fb      	str	r3, [r7, #28]
 800d69e:	e004      	b.n	800d6aa <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800d6a0:	683b      	ldr	r3, [r7, #0]
 800d6a2:	2200      	movs	r2, #0
 800d6a4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d6a6:	2301      	movs	r3, #1
 800d6a8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d6aa:	f000 fe8f 	bl	800e3cc <vPortExitCritical>

	return xReturn;
 800d6ae:	69fb      	ldr	r3, [r7, #28]
}
 800d6b0:	4618      	mov	r0, r3
 800d6b2:	3720      	adds	r7, #32
 800d6b4:	46bd      	mov	sp, r7
 800d6b6:	bd80      	pop	{r7, pc}
 800d6b8:	20001750 	.word	0x20001750
 800d6bc:	20001764 	.word	0x20001764

0800d6c0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d6c0:	b480      	push	{r7}
 800d6c2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d6c4:	4b03      	ldr	r3, [pc, #12]	@ (800d6d4 <vTaskMissedYield+0x14>)
 800d6c6:	2201      	movs	r2, #1
 800d6c8:	601a      	str	r2, [r3, #0]
}
 800d6ca:	bf00      	nop
 800d6cc:	46bd      	mov	sp, r7
 800d6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6d2:	4770      	bx	lr
 800d6d4:	20001760 	.word	0x20001760

0800d6d8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d6d8:	b580      	push	{r7, lr}
 800d6da:	b082      	sub	sp, #8
 800d6dc:	af00      	add	r7, sp, #0
 800d6de:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d6e0:	f000 f852 	bl	800d788 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d6e4:	4b06      	ldr	r3, [pc, #24]	@ (800d700 <prvIdleTask+0x28>)
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	2b01      	cmp	r3, #1
 800d6ea:	d9f9      	bls.n	800d6e0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800d6ec:	4b05      	ldr	r3, [pc, #20]	@ (800d704 <prvIdleTask+0x2c>)
 800d6ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d6f2:	601a      	str	r2, [r3, #0]
 800d6f4:	f3bf 8f4f 	dsb	sy
 800d6f8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d6fc:	e7f0      	b.n	800d6e0 <prvIdleTask+0x8>
 800d6fe:	bf00      	nop
 800d700:	2000127c 	.word	0x2000127c
 800d704:	e000ed04 	.word	0xe000ed04

0800d708 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d708:	b580      	push	{r7, lr}
 800d70a:	b082      	sub	sp, #8
 800d70c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d70e:	2300      	movs	r3, #0
 800d710:	607b      	str	r3, [r7, #4]
 800d712:	e00c      	b.n	800d72e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d714:	687a      	ldr	r2, [r7, #4]
 800d716:	4613      	mov	r3, r2
 800d718:	009b      	lsls	r3, r3, #2
 800d71a:	4413      	add	r3, r2
 800d71c:	009b      	lsls	r3, r3, #2
 800d71e:	4a12      	ldr	r2, [pc, #72]	@ (800d768 <prvInitialiseTaskLists+0x60>)
 800d720:	4413      	add	r3, r2
 800d722:	4618      	mov	r0, r3
 800d724:	f7fe fb70 	bl	800be08 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	3301      	adds	r3, #1
 800d72c:	607b      	str	r3, [r7, #4]
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	2b37      	cmp	r3, #55	@ 0x37
 800d732:	d9ef      	bls.n	800d714 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d734:	480d      	ldr	r0, [pc, #52]	@ (800d76c <prvInitialiseTaskLists+0x64>)
 800d736:	f7fe fb67 	bl	800be08 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d73a:	480d      	ldr	r0, [pc, #52]	@ (800d770 <prvInitialiseTaskLists+0x68>)
 800d73c:	f7fe fb64 	bl	800be08 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d740:	480c      	ldr	r0, [pc, #48]	@ (800d774 <prvInitialiseTaskLists+0x6c>)
 800d742:	f7fe fb61 	bl	800be08 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d746:	480c      	ldr	r0, [pc, #48]	@ (800d778 <prvInitialiseTaskLists+0x70>)
 800d748:	f7fe fb5e 	bl	800be08 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d74c:	480b      	ldr	r0, [pc, #44]	@ (800d77c <prvInitialiseTaskLists+0x74>)
 800d74e:	f7fe fb5b 	bl	800be08 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d752:	4b0b      	ldr	r3, [pc, #44]	@ (800d780 <prvInitialiseTaskLists+0x78>)
 800d754:	4a05      	ldr	r2, [pc, #20]	@ (800d76c <prvInitialiseTaskLists+0x64>)
 800d756:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d758:	4b0a      	ldr	r3, [pc, #40]	@ (800d784 <prvInitialiseTaskLists+0x7c>)
 800d75a:	4a05      	ldr	r2, [pc, #20]	@ (800d770 <prvInitialiseTaskLists+0x68>)
 800d75c:	601a      	str	r2, [r3, #0]
}
 800d75e:	bf00      	nop
 800d760:	3708      	adds	r7, #8
 800d762:	46bd      	mov	sp, r7
 800d764:	bd80      	pop	{r7, pc}
 800d766:	bf00      	nop
 800d768:	2000127c 	.word	0x2000127c
 800d76c:	200016dc 	.word	0x200016dc
 800d770:	200016f0 	.word	0x200016f0
 800d774:	2000170c 	.word	0x2000170c
 800d778:	20001720 	.word	0x20001720
 800d77c:	20001738 	.word	0x20001738
 800d780:	20001704 	.word	0x20001704
 800d784:	20001708 	.word	0x20001708

0800d788 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d788:	b580      	push	{r7, lr}
 800d78a:	b082      	sub	sp, #8
 800d78c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d78e:	e019      	b.n	800d7c4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d790:	f000 fdea 	bl	800e368 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d794:	4b10      	ldr	r3, [pc, #64]	@ (800d7d8 <prvCheckTasksWaitingTermination+0x50>)
 800d796:	68db      	ldr	r3, [r3, #12]
 800d798:	68db      	ldr	r3, [r3, #12]
 800d79a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	3304      	adds	r3, #4
 800d7a0:	4618      	mov	r0, r3
 800d7a2:	f7fe fbbb 	bl	800bf1c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d7a6:	4b0d      	ldr	r3, [pc, #52]	@ (800d7dc <prvCheckTasksWaitingTermination+0x54>)
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	3b01      	subs	r3, #1
 800d7ac:	4a0b      	ldr	r2, [pc, #44]	@ (800d7dc <prvCheckTasksWaitingTermination+0x54>)
 800d7ae:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d7b0:	4b0b      	ldr	r3, [pc, #44]	@ (800d7e0 <prvCheckTasksWaitingTermination+0x58>)
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	3b01      	subs	r3, #1
 800d7b6:	4a0a      	ldr	r2, [pc, #40]	@ (800d7e0 <prvCheckTasksWaitingTermination+0x58>)
 800d7b8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d7ba:	f000 fe07 	bl	800e3cc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d7be:	6878      	ldr	r0, [r7, #4]
 800d7c0:	f000 f810 	bl	800d7e4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d7c4:	4b06      	ldr	r3, [pc, #24]	@ (800d7e0 <prvCheckTasksWaitingTermination+0x58>)
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	d1e1      	bne.n	800d790 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d7cc:	bf00      	nop
 800d7ce:	bf00      	nop
 800d7d0:	3708      	adds	r7, #8
 800d7d2:	46bd      	mov	sp, r7
 800d7d4:	bd80      	pop	{r7, pc}
 800d7d6:	bf00      	nop
 800d7d8:	20001720 	.word	0x20001720
 800d7dc:	2000174c 	.word	0x2000174c
 800d7e0:	20001734 	.word	0x20001734

0800d7e4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d7e4:	b580      	push	{r7, lr}
 800d7e6:	b084      	sub	sp, #16
 800d7e8:	af00      	add	r7, sp, #0
 800d7ea:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	3354      	adds	r3, #84	@ 0x54
 800d7f0:	4618      	mov	r0, r3
 800d7f2:	f001 fefd 	bl	800f5f0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	d108      	bne.n	800d812 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d804:	4618      	mov	r0, r3
 800d806:	f000 ff9f 	bl	800e748 <vPortFree>
				vPortFree( pxTCB );
 800d80a:	6878      	ldr	r0, [r7, #4]
 800d80c:	f000 ff9c 	bl	800e748 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d810:	e019      	b.n	800d846 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800d818:	2b01      	cmp	r3, #1
 800d81a:	d103      	bne.n	800d824 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800d81c:	6878      	ldr	r0, [r7, #4]
 800d81e:	f000 ff93 	bl	800e748 <vPortFree>
	}
 800d822:	e010      	b.n	800d846 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800d82a:	2b02      	cmp	r3, #2
 800d82c:	d00b      	beq.n	800d846 <prvDeleteTCB+0x62>
	__asm volatile
 800d82e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d832:	f383 8811 	msr	BASEPRI, r3
 800d836:	f3bf 8f6f 	isb	sy
 800d83a:	f3bf 8f4f 	dsb	sy
 800d83e:	60fb      	str	r3, [r7, #12]
}
 800d840:	bf00      	nop
 800d842:	bf00      	nop
 800d844:	e7fd      	b.n	800d842 <prvDeleteTCB+0x5e>
	}
 800d846:	bf00      	nop
 800d848:	3710      	adds	r7, #16
 800d84a:	46bd      	mov	sp, r7
 800d84c:	bd80      	pop	{r7, pc}
	...

0800d850 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d850:	b480      	push	{r7}
 800d852:	b083      	sub	sp, #12
 800d854:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d856:	4b0c      	ldr	r3, [pc, #48]	@ (800d888 <prvResetNextTaskUnblockTime+0x38>)
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	681b      	ldr	r3, [r3, #0]
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d104      	bne.n	800d86a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d860:	4b0a      	ldr	r3, [pc, #40]	@ (800d88c <prvResetNextTaskUnblockTime+0x3c>)
 800d862:	f04f 32ff 	mov.w	r2, #4294967295
 800d866:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d868:	e008      	b.n	800d87c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d86a:	4b07      	ldr	r3, [pc, #28]	@ (800d888 <prvResetNextTaskUnblockTime+0x38>)
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	68db      	ldr	r3, [r3, #12]
 800d870:	68db      	ldr	r3, [r3, #12]
 800d872:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	685b      	ldr	r3, [r3, #4]
 800d878:	4a04      	ldr	r2, [pc, #16]	@ (800d88c <prvResetNextTaskUnblockTime+0x3c>)
 800d87a:	6013      	str	r3, [r2, #0]
}
 800d87c:	bf00      	nop
 800d87e:	370c      	adds	r7, #12
 800d880:	46bd      	mov	sp, r7
 800d882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d886:	4770      	bx	lr
 800d888:	20001704 	.word	0x20001704
 800d88c:	2000176c 	.word	0x2000176c

0800d890 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d890:	b480      	push	{r7}
 800d892:	b083      	sub	sp, #12
 800d894:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d896:	4b0b      	ldr	r3, [pc, #44]	@ (800d8c4 <xTaskGetSchedulerState+0x34>)
 800d898:	681b      	ldr	r3, [r3, #0]
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	d102      	bne.n	800d8a4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d89e:	2301      	movs	r3, #1
 800d8a0:	607b      	str	r3, [r7, #4]
 800d8a2:	e008      	b.n	800d8b6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d8a4:	4b08      	ldr	r3, [pc, #32]	@ (800d8c8 <xTaskGetSchedulerState+0x38>)
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d102      	bne.n	800d8b2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d8ac:	2302      	movs	r3, #2
 800d8ae:	607b      	str	r3, [r7, #4]
 800d8b0:	e001      	b.n	800d8b6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d8b2:	2300      	movs	r3, #0
 800d8b4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d8b6:	687b      	ldr	r3, [r7, #4]
	}
 800d8b8:	4618      	mov	r0, r3
 800d8ba:	370c      	adds	r7, #12
 800d8bc:	46bd      	mov	sp, r7
 800d8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8c2:	4770      	bx	lr
 800d8c4:	20001758 	.word	0x20001758
 800d8c8:	20001774 	.word	0x20001774

0800d8cc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d8cc:	b580      	push	{r7, lr}
 800d8ce:	b086      	sub	sp, #24
 800d8d0:	af00      	add	r7, sp, #0
 800d8d2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d8d8:	2300      	movs	r3, #0
 800d8da:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d058      	beq.n	800d994 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d8e2:	4b2f      	ldr	r3, [pc, #188]	@ (800d9a0 <xTaskPriorityDisinherit+0xd4>)
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	693a      	ldr	r2, [r7, #16]
 800d8e8:	429a      	cmp	r2, r3
 800d8ea:	d00b      	beq.n	800d904 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800d8ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d8f0:	f383 8811 	msr	BASEPRI, r3
 800d8f4:	f3bf 8f6f 	isb	sy
 800d8f8:	f3bf 8f4f 	dsb	sy
 800d8fc:	60fb      	str	r3, [r7, #12]
}
 800d8fe:	bf00      	nop
 800d900:	bf00      	nop
 800d902:	e7fd      	b.n	800d900 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d904:	693b      	ldr	r3, [r7, #16]
 800d906:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d908:	2b00      	cmp	r3, #0
 800d90a:	d10b      	bne.n	800d924 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800d90c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d910:	f383 8811 	msr	BASEPRI, r3
 800d914:	f3bf 8f6f 	isb	sy
 800d918:	f3bf 8f4f 	dsb	sy
 800d91c:	60bb      	str	r3, [r7, #8]
}
 800d91e:	bf00      	nop
 800d920:	bf00      	nop
 800d922:	e7fd      	b.n	800d920 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800d924:	693b      	ldr	r3, [r7, #16]
 800d926:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d928:	1e5a      	subs	r2, r3, #1
 800d92a:	693b      	ldr	r3, [r7, #16]
 800d92c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d92e:	693b      	ldr	r3, [r7, #16]
 800d930:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d932:	693b      	ldr	r3, [r7, #16]
 800d934:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d936:	429a      	cmp	r2, r3
 800d938:	d02c      	beq.n	800d994 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d93a:	693b      	ldr	r3, [r7, #16]
 800d93c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d128      	bne.n	800d994 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d942:	693b      	ldr	r3, [r7, #16]
 800d944:	3304      	adds	r3, #4
 800d946:	4618      	mov	r0, r3
 800d948:	f7fe fae8 	bl	800bf1c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d94c:	693b      	ldr	r3, [r7, #16]
 800d94e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d950:	693b      	ldr	r3, [r7, #16]
 800d952:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d954:	693b      	ldr	r3, [r7, #16]
 800d956:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d958:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800d95c:	693b      	ldr	r3, [r7, #16]
 800d95e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d960:	693b      	ldr	r3, [r7, #16]
 800d962:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d964:	4b0f      	ldr	r3, [pc, #60]	@ (800d9a4 <xTaskPriorityDisinherit+0xd8>)
 800d966:	681b      	ldr	r3, [r3, #0]
 800d968:	429a      	cmp	r2, r3
 800d96a:	d903      	bls.n	800d974 <xTaskPriorityDisinherit+0xa8>
 800d96c:	693b      	ldr	r3, [r7, #16]
 800d96e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d970:	4a0c      	ldr	r2, [pc, #48]	@ (800d9a4 <xTaskPriorityDisinherit+0xd8>)
 800d972:	6013      	str	r3, [r2, #0]
 800d974:	693b      	ldr	r3, [r7, #16]
 800d976:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d978:	4613      	mov	r3, r2
 800d97a:	009b      	lsls	r3, r3, #2
 800d97c:	4413      	add	r3, r2
 800d97e:	009b      	lsls	r3, r3, #2
 800d980:	4a09      	ldr	r2, [pc, #36]	@ (800d9a8 <xTaskPriorityDisinherit+0xdc>)
 800d982:	441a      	add	r2, r3
 800d984:	693b      	ldr	r3, [r7, #16]
 800d986:	3304      	adds	r3, #4
 800d988:	4619      	mov	r1, r3
 800d98a:	4610      	mov	r0, r2
 800d98c:	f7fe fa69 	bl	800be62 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d990:	2301      	movs	r3, #1
 800d992:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d994:	697b      	ldr	r3, [r7, #20]
	}
 800d996:	4618      	mov	r0, r3
 800d998:	3718      	adds	r7, #24
 800d99a:	46bd      	mov	sp, r7
 800d99c:	bd80      	pop	{r7, pc}
 800d99e:	bf00      	nop
 800d9a0:	20001278 	.word	0x20001278
 800d9a4:	20001754 	.word	0x20001754
 800d9a8:	2000127c 	.word	0x2000127c

0800d9ac <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d9ac:	b580      	push	{r7, lr}
 800d9ae:	b084      	sub	sp, #16
 800d9b0:	af00      	add	r7, sp, #0
 800d9b2:	6078      	str	r0, [r7, #4]
 800d9b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d9b6:	4b21      	ldr	r3, [pc, #132]	@ (800da3c <prvAddCurrentTaskToDelayedList+0x90>)
 800d9b8:	681b      	ldr	r3, [r3, #0]
 800d9ba:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d9bc:	4b20      	ldr	r3, [pc, #128]	@ (800da40 <prvAddCurrentTaskToDelayedList+0x94>)
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	3304      	adds	r3, #4
 800d9c2:	4618      	mov	r0, r3
 800d9c4:	f7fe faaa 	bl	800bf1c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9ce:	d10a      	bne.n	800d9e6 <prvAddCurrentTaskToDelayedList+0x3a>
 800d9d0:	683b      	ldr	r3, [r7, #0]
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	d007      	beq.n	800d9e6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d9d6:	4b1a      	ldr	r3, [pc, #104]	@ (800da40 <prvAddCurrentTaskToDelayedList+0x94>)
 800d9d8:	681b      	ldr	r3, [r3, #0]
 800d9da:	3304      	adds	r3, #4
 800d9dc:	4619      	mov	r1, r3
 800d9de:	4819      	ldr	r0, [pc, #100]	@ (800da44 <prvAddCurrentTaskToDelayedList+0x98>)
 800d9e0:	f7fe fa3f 	bl	800be62 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d9e4:	e026      	b.n	800da34 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d9e6:	68fa      	ldr	r2, [r7, #12]
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	4413      	add	r3, r2
 800d9ec:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d9ee:	4b14      	ldr	r3, [pc, #80]	@ (800da40 <prvAddCurrentTaskToDelayedList+0x94>)
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	68ba      	ldr	r2, [r7, #8]
 800d9f4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d9f6:	68ba      	ldr	r2, [r7, #8]
 800d9f8:	68fb      	ldr	r3, [r7, #12]
 800d9fa:	429a      	cmp	r2, r3
 800d9fc:	d209      	bcs.n	800da12 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d9fe:	4b12      	ldr	r3, [pc, #72]	@ (800da48 <prvAddCurrentTaskToDelayedList+0x9c>)
 800da00:	681a      	ldr	r2, [r3, #0]
 800da02:	4b0f      	ldr	r3, [pc, #60]	@ (800da40 <prvAddCurrentTaskToDelayedList+0x94>)
 800da04:	681b      	ldr	r3, [r3, #0]
 800da06:	3304      	adds	r3, #4
 800da08:	4619      	mov	r1, r3
 800da0a:	4610      	mov	r0, r2
 800da0c:	f7fe fa4d 	bl	800beaa <vListInsert>
}
 800da10:	e010      	b.n	800da34 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800da12:	4b0e      	ldr	r3, [pc, #56]	@ (800da4c <prvAddCurrentTaskToDelayedList+0xa0>)
 800da14:	681a      	ldr	r2, [r3, #0]
 800da16:	4b0a      	ldr	r3, [pc, #40]	@ (800da40 <prvAddCurrentTaskToDelayedList+0x94>)
 800da18:	681b      	ldr	r3, [r3, #0]
 800da1a:	3304      	adds	r3, #4
 800da1c:	4619      	mov	r1, r3
 800da1e:	4610      	mov	r0, r2
 800da20:	f7fe fa43 	bl	800beaa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800da24:	4b0a      	ldr	r3, [pc, #40]	@ (800da50 <prvAddCurrentTaskToDelayedList+0xa4>)
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	68ba      	ldr	r2, [r7, #8]
 800da2a:	429a      	cmp	r2, r3
 800da2c:	d202      	bcs.n	800da34 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800da2e:	4a08      	ldr	r2, [pc, #32]	@ (800da50 <prvAddCurrentTaskToDelayedList+0xa4>)
 800da30:	68bb      	ldr	r3, [r7, #8]
 800da32:	6013      	str	r3, [r2, #0]
}
 800da34:	bf00      	nop
 800da36:	3710      	adds	r7, #16
 800da38:	46bd      	mov	sp, r7
 800da3a:	bd80      	pop	{r7, pc}
 800da3c:	20001750 	.word	0x20001750
 800da40:	20001278 	.word	0x20001278
 800da44:	20001738 	.word	0x20001738
 800da48:	20001708 	.word	0x20001708
 800da4c:	20001704 	.word	0x20001704
 800da50:	2000176c 	.word	0x2000176c

0800da54 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800da54:	b580      	push	{r7, lr}
 800da56:	b08a      	sub	sp, #40	@ 0x28
 800da58:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800da5a:	2300      	movs	r3, #0
 800da5c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800da5e:	f000 fb13 	bl	800e088 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800da62:	4b1d      	ldr	r3, [pc, #116]	@ (800dad8 <xTimerCreateTimerTask+0x84>)
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	2b00      	cmp	r3, #0
 800da68:	d021      	beq.n	800daae <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800da6a:	2300      	movs	r3, #0
 800da6c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800da6e:	2300      	movs	r3, #0
 800da70:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800da72:	1d3a      	adds	r2, r7, #4
 800da74:	f107 0108 	add.w	r1, r7, #8
 800da78:	f107 030c 	add.w	r3, r7, #12
 800da7c:	4618      	mov	r0, r3
 800da7e:	f7fe f9a9 	bl	800bdd4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800da82:	6879      	ldr	r1, [r7, #4]
 800da84:	68bb      	ldr	r3, [r7, #8]
 800da86:	68fa      	ldr	r2, [r7, #12]
 800da88:	9202      	str	r2, [sp, #8]
 800da8a:	9301      	str	r3, [sp, #4]
 800da8c:	2302      	movs	r3, #2
 800da8e:	9300      	str	r3, [sp, #0]
 800da90:	2300      	movs	r3, #0
 800da92:	460a      	mov	r2, r1
 800da94:	4911      	ldr	r1, [pc, #68]	@ (800dadc <xTimerCreateTimerTask+0x88>)
 800da96:	4812      	ldr	r0, [pc, #72]	@ (800dae0 <xTimerCreateTimerTask+0x8c>)
 800da98:	f7ff f822 	bl	800cae0 <xTaskCreateStatic>
 800da9c:	4603      	mov	r3, r0
 800da9e:	4a11      	ldr	r2, [pc, #68]	@ (800dae4 <xTimerCreateTimerTask+0x90>)
 800daa0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800daa2:	4b10      	ldr	r3, [pc, #64]	@ (800dae4 <xTimerCreateTimerTask+0x90>)
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d001      	beq.n	800daae <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800daaa:	2301      	movs	r3, #1
 800daac:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800daae:	697b      	ldr	r3, [r7, #20]
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	d10b      	bne.n	800dacc <xTimerCreateTimerTask+0x78>
	__asm volatile
 800dab4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dab8:	f383 8811 	msr	BASEPRI, r3
 800dabc:	f3bf 8f6f 	isb	sy
 800dac0:	f3bf 8f4f 	dsb	sy
 800dac4:	613b      	str	r3, [r7, #16]
}
 800dac6:	bf00      	nop
 800dac8:	bf00      	nop
 800daca:	e7fd      	b.n	800dac8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800dacc:	697b      	ldr	r3, [r7, #20]
}
 800dace:	4618      	mov	r0, r3
 800dad0:	3718      	adds	r7, #24
 800dad2:	46bd      	mov	sp, r7
 800dad4:	bd80      	pop	{r7, pc}
 800dad6:	bf00      	nop
 800dad8:	200017a8 	.word	0x200017a8
 800dadc:	080120a8 	.word	0x080120a8
 800dae0:	0800dc21 	.word	0x0800dc21
 800dae4:	200017ac 	.word	0x200017ac

0800dae8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800dae8:	b580      	push	{r7, lr}
 800daea:	b08a      	sub	sp, #40	@ 0x28
 800daec:	af00      	add	r7, sp, #0
 800daee:	60f8      	str	r0, [r7, #12]
 800daf0:	60b9      	str	r1, [r7, #8]
 800daf2:	607a      	str	r2, [r7, #4]
 800daf4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800daf6:	2300      	movs	r3, #0
 800daf8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800dafa:	68fb      	ldr	r3, [r7, #12]
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d10b      	bne.n	800db18 <xTimerGenericCommand+0x30>
	__asm volatile
 800db00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db04:	f383 8811 	msr	BASEPRI, r3
 800db08:	f3bf 8f6f 	isb	sy
 800db0c:	f3bf 8f4f 	dsb	sy
 800db10:	623b      	str	r3, [r7, #32]
}
 800db12:	bf00      	nop
 800db14:	bf00      	nop
 800db16:	e7fd      	b.n	800db14 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800db18:	4b19      	ldr	r3, [pc, #100]	@ (800db80 <xTimerGenericCommand+0x98>)
 800db1a:	681b      	ldr	r3, [r3, #0]
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d02a      	beq.n	800db76 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800db20:	68bb      	ldr	r3, [r7, #8]
 800db22:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800db28:	68fb      	ldr	r3, [r7, #12]
 800db2a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800db2c:	68bb      	ldr	r3, [r7, #8]
 800db2e:	2b05      	cmp	r3, #5
 800db30:	dc18      	bgt.n	800db64 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800db32:	f7ff fead 	bl	800d890 <xTaskGetSchedulerState>
 800db36:	4603      	mov	r3, r0
 800db38:	2b02      	cmp	r3, #2
 800db3a:	d109      	bne.n	800db50 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800db3c:	4b10      	ldr	r3, [pc, #64]	@ (800db80 <xTimerGenericCommand+0x98>)
 800db3e:	6818      	ldr	r0, [r3, #0]
 800db40:	f107 0110 	add.w	r1, r7, #16
 800db44:	2300      	movs	r3, #0
 800db46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800db48:	f7fe fb58 	bl	800c1fc <xQueueGenericSend>
 800db4c:	6278      	str	r0, [r7, #36]	@ 0x24
 800db4e:	e012      	b.n	800db76 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800db50:	4b0b      	ldr	r3, [pc, #44]	@ (800db80 <xTimerGenericCommand+0x98>)
 800db52:	6818      	ldr	r0, [r3, #0]
 800db54:	f107 0110 	add.w	r1, r7, #16
 800db58:	2300      	movs	r3, #0
 800db5a:	2200      	movs	r2, #0
 800db5c:	f7fe fb4e 	bl	800c1fc <xQueueGenericSend>
 800db60:	6278      	str	r0, [r7, #36]	@ 0x24
 800db62:	e008      	b.n	800db76 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800db64:	4b06      	ldr	r3, [pc, #24]	@ (800db80 <xTimerGenericCommand+0x98>)
 800db66:	6818      	ldr	r0, [r3, #0]
 800db68:	f107 0110 	add.w	r1, r7, #16
 800db6c:	2300      	movs	r3, #0
 800db6e:	683a      	ldr	r2, [r7, #0]
 800db70:	f7fe fc46 	bl	800c400 <xQueueGenericSendFromISR>
 800db74:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800db76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800db78:	4618      	mov	r0, r3
 800db7a:	3728      	adds	r7, #40	@ 0x28
 800db7c:	46bd      	mov	sp, r7
 800db7e:	bd80      	pop	{r7, pc}
 800db80:	200017a8 	.word	0x200017a8

0800db84 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800db84:	b580      	push	{r7, lr}
 800db86:	b088      	sub	sp, #32
 800db88:	af02      	add	r7, sp, #8
 800db8a:	6078      	str	r0, [r7, #4]
 800db8c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800db8e:	4b23      	ldr	r3, [pc, #140]	@ (800dc1c <prvProcessExpiredTimer+0x98>)
 800db90:	681b      	ldr	r3, [r3, #0]
 800db92:	68db      	ldr	r3, [r3, #12]
 800db94:	68db      	ldr	r3, [r3, #12]
 800db96:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800db98:	697b      	ldr	r3, [r7, #20]
 800db9a:	3304      	adds	r3, #4
 800db9c:	4618      	mov	r0, r3
 800db9e:	f7fe f9bd 	bl	800bf1c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800dba2:	697b      	ldr	r3, [r7, #20]
 800dba4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800dba8:	f003 0304 	and.w	r3, r3, #4
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d023      	beq.n	800dbf8 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800dbb0:	697b      	ldr	r3, [r7, #20]
 800dbb2:	699a      	ldr	r2, [r3, #24]
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	18d1      	adds	r1, r2, r3
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	683a      	ldr	r2, [r7, #0]
 800dbbc:	6978      	ldr	r0, [r7, #20]
 800dbbe:	f000 f8d5 	bl	800dd6c <prvInsertTimerInActiveList>
 800dbc2:	4603      	mov	r3, r0
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d020      	beq.n	800dc0a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800dbc8:	2300      	movs	r3, #0
 800dbca:	9300      	str	r3, [sp, #0]
 800dbcc:	2300      	movs	r3, #0
 800dbce:	687a      	ldr	r2, [r7, #4]
 800dbd0:	2100      	movs	r1, #0
 800dbd2:	6978      	ldr	r0, [r7, #20]
 800dbd4:	f7ff ff88 	bl	800dae8 <xTimerGenericCommand>
 800dbd8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800dbda:	693b      	ldr	r3, [r7, #16]
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	d114      	bne.n	800dc0a <prvProcessExpiredTimer+0x86>
	__asm volatile
 800dbe0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dbe4:	f383 8811 	msr	BASEPRI, r3
 800dbe8:	f3bf 8f6f 	isb	sy
 800dbec:	f3bf 8f4f 	dsb	sy
 800dbf0:	60fb      	str	r3, [r7, #12]
}
 800dbf2:	bf00      	nop
 800dbf4:	bf00      	nop
 800dbf6:	e7fd      	b.n	800dbf4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800dbf8:	697b      	ldr	r3, [r7, #20]
 800dbfa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800dbfe:	f023 0301 	bic.w	r3, r3, #1
 800dc02:	b2da      	uxtb	r2, r3
 800dc04:	697b      	ldr	r3, [r7, #20]
 800dc06:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800dc0a:	697b      	ldr	r3, [r7, #20]
 800dc0c:	6a1b      	ldr	r3, [r3, #32]
 800dc0e:	6978      	ldr	r0, [r7, #20]
 800dc10:	4798      	blx	r3
}
 800dc12:	bf00      	nop
 800dc14:	3718      	adds	r7, #24
 800dc16:	46bd      	mov	sp, r7
 800dc18:	bd80      	pop	{r7, pc}
 800dc1a:	bf00      	nop
 800dc1c:	200017a0 	.word	0x200017a0

0800dc20 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800dc20:	b580      	push	{r7, lr}
 800dc22:	b084      	sub	sp, #16
 800dc24:	af00      	add	r7, sp, #0
 800dc26:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800dc28:	f107 0308 	add.w	r3, r7, #8
 800dc2c:	4618      	mov	r0, r3
 800dc2e:	f000 f859 	bl	800dce4 <prvGetNextExpireTime>
 800dc32:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800dc34:	68bb      	ldr	r3, [r7, #8]
 800dc36:	4619      	mov	r1, r3
 800dc38:	68f8      	ldr	r0, [r7, #12]
 800dc3a:	f000 f805 	bl	800dc48 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800dc3e:	f000 f8d7 	bl	800ddf0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800dc42:	bf00      	nop
 800dc44:	e7f0      	b.n	800dc28 <prvTimerTask+0x8>
	...

0800dc48 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800dc48:	b580      	push	{r7, lr}
 800dc4a:	b084      	sub	sp, #16
 800dc4c:	af00      	add	r7, sp, #0
 800dc4e:	6078      	str	r0, [r7, #4]
 800dc50:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800dc52:	f7ff fa29 	bl	800d0a8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800dc56:	f107 0308 	add.w	r3, r7, #8
 800dc5a:	4618      	mov	r0, r3
 800dc5c:	f000 f866 	bl	800dd2c <prvSampleTimeNow>
 800dc60:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800dc62:	68bb      	ldr	r3, [r7, #8]
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	d130      	bne.n	800dcca <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800dc68:	683b      	ldr	r3, [r7, #0]
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	d10a      	bne.n	800dc84 <prvProcessTimerOrBlockTask+0x3c>
 800dc6e:	687a      	ldr	r2, [r7, #4]
 800dc70:	68fb      	ldr	r3, [r7, #12]
 800dc72:	429a      	cmp	r2, r3
 800dc74:	d806      	bhi.n	800dc84 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800dc76:	f7ff fa25 	bl	800d0c4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800dc7a:	68f9      	ldr	r1, [r7, #12]
 800dc7c:	6878      	ldr	r0, [r7, #4]
 800dc7e:	f7ff ff81 	bl	800db84 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800dc82:	e024      	b.n	800dcce <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800dc84:	683b      	ldr	r3, [r7, #0]
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d008      	beq.n	800dc9c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800dc8a:	4b13      	ldr	r3, [pc, #76]	@ (800dcd8 <prvProcessTimerOrBlockTask+0x90>)
 800dc8c:	681b      	ldr	r3, [r3, #0]
 800dc8e:	681b      	ldr	r3, [r3, #0]
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	d101      	bne.n	800dc98 <prvProcessTimerOrBlockTask+0x50>
 800dc94:	2301      	movs	r3, #1
 800dc96:	e000      	b.n	800dc9a <prvProcessTimerOrBlockTask+0x52>
 800dc98:	2300      	movs	r3, #0
 800dc9a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800dc9c:	4b0f      	ldr	r3, [pc, #60]	@ (800dcdc <prvProcessTimerOrBlockTask+0x94>)
 800dc9e:	6818      	ldr	r0, [r3, #0]
 800dca0:	687a      	ldr	r2, [r7, #4]
 800dca2:	68fb      	ldr	r3, [r7, #12]
 800dca4:	1ad3      	subs	r3, r2, r3
 800dca6:	683a      	ldr	r2, [r7, #0]
 800dca8:	4619      	mov	r1, r3
 800dcaa:	f7fe fee5 	bl	800ca78 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800dcae:	f7ff fa09 	bl	800d0c4 <xTaskResumeAll>
 800dcb2:	4603      	mov	r3, r0
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	d10a      	bne.n	800dcce <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800dcb8:	4b09      	ldr	r3, [pc, #36]	@ (800dce0 <prvProcessTimerOrBlockTask+0x98>)
 800dcba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dcbe:	601a      	str	r2, [r3, #0]
 800dcc0:	f3bf 8f4f 	dsb	sy
 800dcc4:	f3bf 8f6f 	isb	sy
}
 800dcc8:	e001      	b.n	800dcce <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800dcca:	f7ff f9fb 	bl	800d0c4 <xTaskResumeAll>
}
 800dcce:	bf00      	nop
 800dcd0:	3710      	adds	r7, #16
 800dcd2:	46bd      	mov	sp, r7
 800dcd4:	bd80      	pop	{r7, pc}
 800dcd6:	bf00      	nop
 800dcd8:	200017a4 	.word	0x200017a4
 800dcdc:	200017a8 	.word	0x200017a8
 800dce0:	e000ed04 	.word	0xe000ed04

0800dce4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800dce4:	b480      	push	{r7}
 800dce6:	b085      	sub	sp, #20
 800dce8:	af00      	add	r7, sp, #0
 800dcea:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800dcec:	4b0e      	ldr	r3, [pc, #56]	@ (800dd28 <prvGetNextExpireTime+0x44>)
 800dcee:	681b      	ldr	r3, [r3, #0]
 800dcf0:	681b      	ldr	r3, [r3, #0]
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	d101      	bne.n	800dcfa <prvGetNextExpireTime+0x16>
 800dcf6:	2201      	movs	r2, #1
 800dcf8:	e000      	b.n	800dcfc <prvGetNextExpireTime+0x18>
 800dcfa:	2200      	movs	r2, #0
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	681b      	ldr	r3, [r3, #0]
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d105      	bne.n	800dd14 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800dd08:	4b07      	ldr	r3, [pc, #28]	@ (800dd28 <prvGetNextExpireTime+0x44>)
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	68db      	ldr	r3, [r3, #12]
 800dd0e:	681b      	ldr	r3, [r3, #0]
 800dd10:	60fb      	str	r3, [r7, #12]
 800dd12:	e001      	b.n	800dd18 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800dd14:	2300      	movs	r3, #0
 800dd16:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800dd18:	68fb      	ldr	r3, [r7, #12]
}
 800dd1a:	4618      	mov	r0, r3
 800dd1c:	3714      	adds	r7, #20
 800dd1e:	46bd      	mov	sp, r7
 800dd20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd24:	4770      	bx	lr
 800dd26:	bf00      	nop
 800dd28:	200017a0 	.word	0x200017a0

0800dd2c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800dd2c:	b580      	push	{r7, lr}
 800dd2e:	b084      	sub	sp, #16
 800dd30:	af00      	add	r7, sp, #0
 800dd32:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800dd34:	f7ff fa64 	bl	800d200 <xTaskGetTickCount>
 800dd38:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800dd3a:	4b0b      	ldr	r3, [pc, #44]	@ (800dd68 <prvSampleTimeNow+0x3c>)
 800dd3c:	681b      	ldr	r3, [r3, #0]
 800dd3e:	68fa      	ldr	r2, [r7, #12]
 800dd40:	429a      	cmp	r2, r3
 800dd42:	d205      	bcs.n	800dd50 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800dd44:	f000 f93a 	bl	800dfbc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	2201      	movs	r2, #1
 800dd4c:	601a      	str	r2, [r3, #0]
 800dd4e:	e002      	b.n	800dd56 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	2200      	movs	r2, #0
 800dd54:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800dd56:	4a04      	ldr	r2, [pc, #16]	@ (800dd68 <prvSampleTimeNow+0x3c>)
 800dd58:	68fb      	ldr	r3, [r7, #12]
 800dd5a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800dd5c:	68fb      	ldr	r3, [r7, #12]
}
 800dd5e:	4618      	mov	r0, r3
 800dd60:	3710      	adds	r7, #16
 800dd62:	46bd      	mov	sp, r7
 800dd64:	bd80      	pop	{r7, pc}
 800dd66:	bf00      	nop
 800dd68:	200017b0 	.word	0x200017b0

0800dd6c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800dd6c:	b580      	push	{r7, lr}
 800dd6e:	b086      	sub	sp, #24
 800dd70:	af00      	add	r7, sp, #0
 800dd72:	60f8      	str	r0, [r7, #12]
 800dd74:	60b9      	str	r1, [r7, #8]
 800dd76:	607a      	str	r2, [r7, #4]
 800dd78:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800dd7a:	2300      	movs	r3, #0
 800dd7c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800dd7e:	68fb      	ldr	r3, [r7, #12]
 800dd80:	68ba      	ldr	r2, [r7, #8]
 800dd82:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800dd84:	68fb      	ldr	r3, [r7, #12]
 800dd86:	68fa      	ldr	r2, [r7, #12]
 800dd88:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800dd8a:	68ba      	ldr	r2, [r7, #8]
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	429a      	cmp	r2, r3
 800dd90:	d812      	bhi.n	800ddb8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dd92:	687a      	ldr	r2, [r7, #4]
 800dd94:	683b      	ldr	r3, [r7, #0]
 800dd96:	1ad2      	subs	r2, r2, r3
 800dd98:	68fb      	ldr	r3, [r7, #12]
 800dd9a:	699b      	ldr	r3, [r3, #24]
 800dd9c:	429a      	cmp	r2, r3
 800dd9e:	d302      	bcc.n	800dda6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800dda0:	2301      	movs	r3, #1
 800dda2:	617b      	str	r3, [r7, #20]
 800dda4:	e01b      	b.n	800ddde <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800dda6:	4b10      	ldr	r3, [pc, #64]	@ (800dde8 <prvInsertTimerInActiveList+0x7c>)
 800dda8:	681a      	ldr	r2, [r3, #0]
 800ddaa:	68fb      	ldr	r3, [r7, #12]
 800ddac:	3304      	adds	r3, #4
 800ddae:	4619      	mov	r1, r3
 800ddb0:	4610      	mov	r0, r2
 800ddb2:	f7fe f87a 	bl	800beaa <vListInsert>
 800ddb6:	e012      	b.n	800ddde <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ddb8:	687a      	ldr	r2, [r7, #4]
 800ddba:	683b      	ldr	r3, [r7, #0]
 800ddbc:	429a      	cmp	r2, r3
 800ddbe:	d206      	bcs.n	800ddce <prvInsertTimerInActiveList+0x62>
 800ddc0:	68ba      	ldr	r2, [r7, #8]
 800ddc2:	683b      	ldr	r3, [r7, #0]
 800ddc4:	429a      	cmp	r2, r3
 800ddc6:	d302      	bcc.n	800ddce <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ddc8:	2301      	movs	r3, #1
 800ddca:	617b      	str	r3, [r7, #20]
 800ddcc:	e007      	b.n	800ddde <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ddce:	4b07      	ldr	r3, [pc, #28]	@ (800ddec <prvInsertTimerInActiveList+0x80>)
 800ddd0:	681a      	ldr	r2, [r3, #0]
 800ddd2:	68fb      	ldr	r3, [r7, #12]
 800ddd4:	3304      	adds	r3, #4
 800ddd6:	4619      	mov	r1, r3
 800ddd8:	4610      	mov	r0, r2
 800ddda:	f7fe f866 	bl	800beaa <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ddde:	697b      	ldr	r3, [r7, #20]
}
 800dde0:	4618      	mov	r0, r3
 800dde2:	3718      	adds	r7, #24
 800dde4:	46bd      	mov	sp, r7
 800dde6:	bd80      	pop	{r7, pc}
 800dde8:	200017a4 	.word	0x200017a4
 800ddec:	200017a0 	.word	0x200017a0

0800ddf0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ddf0:	b580      	push	{r7, lr}
 800ddf2:	b08e      	sub	sp, #56	@ 0x38
 800ddf4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ddf6:	e0ce      	b.n	800df96 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	da19      	bge.n	800de32 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800ddfe:	1d3b      	adds	r3, r7, #4
 800de00:	3304      	adds	r3, #4
 800de02:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800de04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de06:	2b00      	cmp	r3, #0
 800de08:	d10b      	bne.n	800de22 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800de0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de0e:	f383 8811 	msr	BASEPRI, r3
 800de12:	f3bf 8f6f 	isb	sy
 800de16:	f3bf 8f4f 	dsb	sy
 800de1a:	61fb      	str	r3, [r7, #28]
}
 800de1c:	bf00      	nop
 800de1e:	bf00      	nop
 800de20:	e7fd      	b.n	800de1e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800de22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de24:	681b      	ldr	r3, [r3, #0]
 800de26:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800de28:	6850      	ldr	r0, [r2, #4]
 800de2a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800de2c:	6892      	ldr	r2, [r2, #8]
 800de2e:	4611      	mov	r1, r2
 800de30:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	2b00      	cmp	r3, #0
 800de36:	f2c0 80ae 	blt.w	800df96 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800de3a:	68fb      	ldr	r3, [r7, #12]
 800de3c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800de3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de40:	695b      	ldr	r3, [r3, #20]
 800de42:	2b00      	cmp	r3, #0
 800de44:	d004      	beq.n	800de50 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800de46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de48:	3304      	adds	r3, #4
 800de4a:	4618      	mov	r0, r3
 800de4c:	f7fe f866 	bl	800bf1c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800de50:	463b      	mov	r3, r7
 800de52:	4618      	mov	r0, r3
 800de54:	f7ff ff6a 	bl	800dd2c <prvSampleTimeNow>
 800de58:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	2b09      	cmp	r3, #9
 800de5e:	f200 8097 	bhi.w	800df90 <prvProcessReceivedCommands+0x1a0>
 800de62:	a201      	add	r2, pc, #4	@ (adr r2, 800de68 <prvProcessReceivedCommands+0x78>)
 800de64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de68:	0800de91 	.word	0x0800de91
 800de6c:	0800de91 	.word	0x0800de91
 800de70:	0800de91 	.word	0x0800de91
 800de74:	0800df07 	.word	0x0800df07
 800de78:	0800df1b 	.word	0x0800df1b
 800de7c:	0800df67 	.word	0x0800df67
 800de80:	0800de91 	.word	0x0800de91
 800de84:	0800de91 	.word	0x0800de91
 800de88:	0800df07 	.word	0x0800df07
 800de8c:	0800df1b 	.word	0x0800df1b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800de90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de92:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800de96:	f043 0301 	orr.w	r3, r3, #1
 800de9a:	b2da      	uxtb	r2, r3
 800de9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de9e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800dea2:	68ba      	ldr	r2, [r7, #8]
 800dea4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dea6:	699b      	ldr	r3, [r3, #24]
 800dea8:	18d1      	adds	r1, r2, r3
 800deaa:	68bb      	ldr	r3, [r7, #8]
 800deac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800deae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800deb0:	f7ff ff5c 	bl	800dd6c <prvInsertTimerInActiveList>
 800deb4:	4603      	mov	r3, r0
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	d06c      	beq.n	800df94 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800deba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800debc:	6a1b      	ldr	r3, [r3, #32]
 800debe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dec0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800dec2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dec4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800dec8:	f003 0304 	and.w	r3, r3, #4
 800decc:	2b00      	cmp	r3, #0
 800dece:	d061      	beq.n	800df94 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ded0:	68ba      	ldr	r2, [r7, #8]
 800ded2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ded4:	699b      	ldr	r3, [r3, #24]
 800ded6:	441a      	add	r2, r3
 800ded8:	2300      	movs	r3, #0
 800deda:	9300      	str	r3, [sp, #0]
 800dedc:	2300      	movs	r3, #0
 800dede:	2100      	movs	r1, #0
 800dee0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dee2:	f7ff fe01 	bl	800dae8 <xTimerGenericCommand>
 800dee6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800dee8:	6a3b      	ldr	r3, [r7, #32]
 800deea:	2b00      	cmp	r3, #0
 800deec:	d152      	bne.n	800df94 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800deee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800def2:	f383 8811 	msr	BASEPRI, r3
 800def6:	f3bf 8f6f 	isb	sy
 800defa:	f3bf 8f4f 	dsb	sy
 800defe:	61bb      	str	r3, [r7, #24]
}
 800df00:	bf00      	nop
 800df02:	bf00      	nop
 800df04:	e7fd      	b.n	800df02 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800df06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df08:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800df0c:	f023 0301 	bic.w	r3, r3, #1
 800df10:	b2da      	uxtb	r2, r3
 800df12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df14:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800df18:	e03d      	b.n	800df96 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800df1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df1c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800df20:	f043 0301 	orr.w	r3, r3, #1
 800df24:	b2da      	uxtb	r2, r3
 800df26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df28:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800df2c:	68ba      	ldr	r2, [r7, #8]
 800df2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df30:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800df32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df34:	699b      	ldr	r3, [r3, #24]
 800df36:	2b00      	cmp	r3, #0
 800df38:	d10b      	bne.n	800df52 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800df3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df3e:	f383 8811 	msr	BASEPRI, r3
 800df42:	f3bf 8f6f 	isb	sy
 800df46:	f3bf 8f4f 	dsb	sy
 800df4a:	617b      	str	r3, [r7, #20]
}
 800df4c:	bf00      	nop
 800df4e:	bf00      	nop
 800df50:	e7fd      	b.n	800df4e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800df52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df54:	699a      	ldr	r2, [r3, #24]
 800df56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df58:	18d1      	adds	r1, r2, r3
 800df5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800df5e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800df60:	f7ff ff04 	bl	800dd6c <prvInsertTimerInActiveList>
					break;
 800df64:	e017      	b.n	800df96 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800df66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df68:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800df6c:	f003 0302 	and.w	r3, r3, #2
 800df70:	2b00      	cmp	r3, #0
 800df72:	d103      	bne.n	800df7c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800df74:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800df76:	f000 fbe7 	bl	800e748 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800df7a:	e00c      	b.n	800df96 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800df7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df7e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800df82:	f023 0301 	bic.w	r3, r3, #1
 800df86:	b2da      	uxtb	r2, r3
 800df88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df8a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800df8e:	e002      	b.n	800df96 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800df90:	bf00      	nop
 800df92:	e000      	b.n	800df96 <prvProcessReceivedCommands+0x1a6>
					break;
 800df94:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800df96:	4b08      	ldr	r3, [pc, #32]	@ (800dfb8 <prvProcessReceivedCommands+0x1c8>)
 800df98:	681b      	ldr	r3, [r3, #0]
 800df9a:	1d39      	adds	r1, r7, #4
 800df9c:	2200      	movs	r2, #0
 800df9e:	4618      	mov	r0, r3
 800dfa0:	f7fe facc 	bl	800c53c <xQueueReceive>
 800dfa4:	4603      	mov	r3, r0
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	f47f af26 	bne.w	800ddf8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800dfac:	bf00      	nop
 800dfae:	bf00      	nop
 800dfb0:	3730      	adds	r7, #48	@ 0x30
 800dfb2:	46bd      	mov	sp, r7
 800dfb4:	bd80      	pop	{r7, pc}
 800dfb6:	bf00      	nop
 800dfb8:	200017a8 	.word	0x200017a8

0800dfbc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800dfbc:	b580      	push	{r7, lr}
 800dfbe:	b088      	sub	sp, #32
 800dfc0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800dfc2:	e049      	b.n	800e058 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800dfc4:	4b2e      	ldr	r3, [pc, #184]	@ (800e080 <prvSwitchTimerLists+0xc4>)
 800dfc6:	681b      	ldr	r3, [r3, #0]
 800dfc8:	68db      	ldr	r3, [r3, #12]
 800dfca:	681b      	ldr	r3, [r3, #0]
 800dfcc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dfce:	4b2c      	ldr	r3, [pc, #176]	@ (800e080 <prvSwitchTimerLists+0xc4>)
 800dfd0:	681b      	ldr	r3, [r3, #0]
 800dfd2:	68db      	ldr	r3, [r3, #12]
 800dfd4:	68db      	ldr	r3, [r3, #12]
 800dfd6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800dfd8:	68fb      	ldr	r3, [r7, #12]
 800dfda:	3304      	adds	r3, #4
 800dfdc:	4618      	mov	r0, r3
 800dfde:	f7fd ff9d 	bl	800bf1c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800dfe2:	68fb      	ldr	r3, [r7, #12]
 800dfe4:	6a1b      	ldr	r3, [r3, #32]
 800dfe6:	68f8      	ldr	r0, [r7, #12]
 800dfe8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800dfea:	68fb      	ldr	r3, [r7, #12]
 800dfec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800dff0:	f003 0304 	and.w	r3, r3, #4
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	d02f      	beq.n	800e058 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800dff8:	68fb      	ldr	r3, [r7, #12]
 800dffa:	699b      	ldr	r3, [r3, #24]
 800dffc:	693a      	ldr	r2, [r7, #16]
 800dffe:	4413      	add	r3, r2
 800e000:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800e002:	68ba      	ldr	r2, [r7, #8]
 800e004:	693b      	ldr	r3, [r7, #16]
 800e006:	429a      	cmp	r2, r3
 800e008:	d90e      	bls.n	800e028 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800e00a:	68fb      	ldr	r3, [r7, #12]
 800e00c:	68ba      	ldr	r2, [r7, #8]
 800e00e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e010:	68fb      	ldr	r3, [r7, #12]
 800e012:	68fa      	ldr	r2, [r7, #12]
 800e014:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e016:	4b1a      	ldr	r3, [pc, #104]	@ (800e080 <prvSwitchTimerLists+0xc4>)
 800e018:	681a      	ldr	r2, [r3, #0]
 800e01a:	68fb      	ldr	r3, [r7, #12]
 800e01c:	3304      	adds	r3, #4
 800e01e:	4619      	mov	r1, r3
 800e020:	4610      	mov	r0, r2
 800e022:	f7fd ff42 	bl	800beaa <vListInsert>
 800e026:	e017      	b.n	800e058 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e028:	2300      	movs	r3, #0
 800e02a:	9300      	str	r3, [sp, #0]
 800e02c:	2300      	movs	r3, #0
 800e02e:	693a      	ldr	r2, [r7, #16]
 800e030:	2100      	movs	r1, #0
 800e032:	68f8      	ldr	r0, [r7, #12]
 800e034:	f7ff fd58 	bl	800dae8 <xTimerGenericCommand>
 800e038:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d10b      	bne.n	800e058 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800e040:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e044:	f383 8811 	msr	BASEPRI, r3
 800e048:	f3bf 8f6f 	isb	sy
 800e04c:	f3bf 8f4f 	dsb	sy
 800e050:	603b      	str	r3, [r7, #0]
}
 800e052:	bf00      	nop
 800e054:	bf00      	nop
 800e056:	e7fd      	b.n	800e054 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e058:	4b09      	ldr	r3, [pc, #36]	@ (800e080 <prvSwitchTimerLists+0xc4>)
 800e05a:	681b      	ldr	r3, [r3, #0]
 800e05c:	681b      	ldr	r3, [r3, #0]
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d1b0      	bne.n	800dfc4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800e062:	4b07      	ldr	r3, [pc, #28]	@ (800e080 <prvSwitchTimerLists+0xc4>)
 800e064:	681b      	ldr	r3, [r3, #0]
 800e066:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800e068:	4b06      	ldr	r3, [pc, #24]	@ (800e084 <prvSwitchTimerLists+0xc8>)
 800e06a:	681b      	ldr	r3, [r3, #0]
 800e06c:	4a04      	ldr	r2, [pc, #16]	@ (800e080 <prvSwitchTimerLists+0xc4>)
 800e06e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800e070:	4a04      	ldr	r2, [pc, #16]	@ (800e084 <prvSwitchTimerLists+0xc8>)
 800e072:	697b      	ldr	r3, [r7, #20]
 800e074:	6013      	str	r3, [r2, #0]
}
 800e076:	bf00      	nop
 800e078:	3718      	adds	r7, #24
 800e07a:	46bd      	mov	sp, r7
 800e07c:	bd80      	pop	{r7, pc}
 800e07e:	bf00      	nop
 800e080:	200017a0 	.word	0x200017a0
 800e084:	200017a4 	.word	0x200017a4

0800e088 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800e088:	b580      	push	{r7, lr}
 800e08a:	b082      	sub	sp, #8
 800e08c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800e08e:	f000 f96b 	bl	800e368 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800e092:	4b15      	ldr	r3, [pc, #84]	@ (800e0e8 <prvCheckForValidListAndQueue+0x60>)
 800e094:	681b      	ldr	r3, [r3, #0]
 800e096:	2b00      	cmp	r3, #0
 800e098:	d120      	bne.n	800e0dc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800e09a:	4814      	ldr	r0, [pc, #80]	@ (800e0ec <prvCheckForValidListAndQueue+0x64>)
 800e09c:	f7fd feb4 	bl	800be08 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800e0a0:	4813      	ldr	r0, [pc, #76]	@ (800e0f0 <prvCheckForValidListAndQueue+0x68>)
 800e0a2:	f7fd feb1 	bl	800be08 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800e0a6:	4b13      	ldr	r3, [pc, #76]	@ (800e0f4 <prvCheckForValidListAndQueue+0x6c>)
 800e0a8:	4a10      	ldr	r2, [pc, #64]	@ (800e0ec <prvCheckForValidListAndQueue+0x64>)
 800e0aa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800e0ac:	4b12      	ldr	r3, [pc, #72]	@ (800e0f8 <prvCheckForValidListAndQueue+0x70>)
 800e0ae:	4a10      	ldr	r2, [pc, #64]	@ (800e0f0 <prvCheckForValidListAndQueue+0x68>)
 800e0b0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800e0b2:	2300      	movs	r3, #0
 800e0b4:	9300      	str	r3, [sp, #0]
 800e0b6:	4b11      	ldr	r3, [pc, #68]	@ (800e0fc <prvCheckForValidListAndQueue+0x74>)
 800e0b8:	4a11      	ldr	r2, [pc, #68]	@ (800e100 <prvCheckForValidListAndQueue+0x78>)
 800e0ba:	2110      	movs	r1, #16
 800e0bc:	200a      	movs	r0, #10
 800e0be:	f7fd ffc1 	bl	800c044 <xQueueGenericCreateStatic>
 800e0c2:	4603      	mov	r3, r0
 800e0c4:	4a08      	ldr	r2, [pc, #32]	@ (800e0e8 <prvCheckForValidListAndQueue+0x60>)
 800e0c6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800e0c8:	4b07      	ldr	r3, [pc, #28]	@ (800e0e8 <prvCheckForValidListAndQueue+0x60>)
 800e0ca:	681b      	ldr	r3, [r3, #0]
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	d005      	beq.n	800e0dc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e0d0:	4b05      	ldr	r3, [pc, #20]	@ (800e0e8 <prvCheckForValidListAndQueue+0x60>)
 800e0d2:	681b      	ldr	r3, [r3, #0]
 800e0d4:	490b      	ldr	r1, [pc, #44]	@ (800e104 <prvCheckForValidListAndQueue+0x7c>)
 800e0d6:	4618      	mov	r0, r3
 800e0d8:	f7fe fca4 	bl	800ca24 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e0dc:	f000 f976 	bl	800e3cc <vPortExitCritical>
}
 800e0e0:	bf00      	nop
 800e0e2:	46bd      	mov	sp, r7
 800e0e4:	bd80      	pop	{r7, pc}
 800e0e6:	bf00      	nop
 800e0e8:	200017a8 	.word	0x200017a8
 800e0ec:	20001778 	.word	0x20001778
 800e0f0:	2000178c 	.word	0x2000178c
 800e0f4:	200017a0 	.word	0x200017a0
 800e0f8:	200017a4 	.word	0x200017a4
 800e0fc:	20001854 	.word	0x20001854
 800e100:	200017b4 	.word	0x200017b4
 800e104:	080120b0 	.word	0x080120b0

0800e108 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e108:	b480      	push	{r7}
 800e10a:	b085      	sub	sp, #20
 800e10c:	af00      	add	r7, sp, #0
 800e10e:	60f8      	str	r0, [r7, #12]
 800e110:	60b9      	str	r1, [r7, #8]
 800e112:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e114:	68fb      	ldr	r3, [r7, #12]
 800e116:	3b04      	subs	r3, #4
 800e118:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e11a:	68fb      	ldr	r3, [r7, #12]
 800e11c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800e120:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e122:	68fb      	ldr	r3, [r7, #12]
 800e124:	3b04      	subs	r3, #4
 800e126:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e128:	68bb      	ldr	r3, [r7, #8]
 800e12a:	f023 0201 	bic.w	r2, r3, #1
 800e12e:	68fb      	ldr	r3, [r7, #12]
 800e130:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e132:	68fb      	ldr	r3, [r7, #12]
 800e134:	3b04      	subs	r3, #4
 800e136:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e138:	4a0c      	ldr	r2, [pc, #48]	@ (800e16c <pxPortInitialiseStack+0x64>)
 800e13a:	68fb      	ldr	r3, [r7, #12]
 800e13c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e13e:	68fb      	ldr	r3, [r7, #12]
 800e140:	3b14      	subs	r3, #20
 800e142:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e144:	687a      	ldr	r2, [r7, #4]
 800e146:	68fb      	ldr	r3, [r7, #12]
 800e148:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e14a:	68fb      	ldr	r3, [r7, #12]
 800e14c:	3b04      	subs	r3, #4
 800e14e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e150:	68fb      	ldr	r3, [r7, #12]
 800e152:	f06f 0202 	mvn.w	r2, #2
 800e156:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e158:	68fb      	ldr	r3, [r7, #12]
 800e15a:	3b20      	subs	r3, #32
 800e15c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e15e:	68fb      	ldr	r3, [r7, #12]
}
 800e160:	4618      	mov	r0, r3
 800e162:	3714      	adds	r7, #20
 800e164:	46bd      	mov	sp, r7
 800e166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e16a:	4770      	bx	lr
 800e16c:	0800e171 	.word	0x0800e171

0800e170 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e170:	b480      	push	{r7}
 800e172:	b085      	sub	sp, #20
 800e174:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e176:	2300      	movs	r3, #0
 800e178:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e17a:	4b13      	ldr	r3, [pc, #76]	@ (800e1c8 <prvTaskExitError+0x58>)
 800e17c:	681b      	ldr	r3, [r3, #0]
 800e17e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e182:	d00b      	beq.n	800e19c <prvTaskExitError+0x2c>
	__asm volatile
 800e184:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e188:	f383 8811 	msr	BASEPRI, r3
 800e18c:	f3bf 8f6f 	isb	sy
 800e190:	f3bf 8f4f 	dsb	sy
 800e194:	60fb      	str	r3, [r7, #12]
}
 800e196:	bf00      	nop
 800e198:	bf00      	nop
 800e19a:	e7fd      	b.n	800e198 <prvTaskExitError+0x28>
	__asm volatile
 800e19c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e1a0:	f383 8811 	msr	BASEPRI, r3
 800e1a4:	f3bf 8f6f 	isb	sy
 800e1a8:	f3bf 8f4f 	dsb	sy
 800e1ac:	60bb      	str	r3, [r7, #8]
}
 800e1ae:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e1b0:	bf00      	nop
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	d0fc      	beq.n	800e1b2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e1b8:	bf00      	nop
 800e1ba:	bf00      	nop
 800e1bc:	3714      	adds	r7, #20
 800e1be:	46bd      	mov	sp, r7
 800e1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1c4:	4770      	bx	lr
 800e1c6:	bf00      	nop
 800e1c8:	2000001c 	.word	0x2000001c
 800e1cc:	00000000 	.word	0x00000000

0800e1d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e1d0:	4b07      	ldr	r3, [pc, #28]	@ (800e1f0 <pxCurrentTCBConst2>)
 800e1d2:	6819      	ldr	r1, [r3, #0]
 800e1d4:	6808      	ldr	r0, [r1, #0]
 800e1d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1da:	f380 8809 	msr	PSP, r0
 800e1de:	f3bf 8f6f 	isb	sy
 800e1e2:	f04f 0000 	mov.w	r0, #0
 800e1e6:	f380 8811 	msr	BASEPRI, r0
 800e1ea:	4770      	bx	lr
 800e1ec:	f3af 8000 	nop.w

0800e1f0 <pxCurrentTCBConst2>:
 800e1f0:	20001278 	.word	0x20001278
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e1f4:	bf00      	nop
 800e1f6:	bf00      	nop

0800e1f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e1f8:	4808      	ldr	r0, [pc, #32]	@ (800e21c <prvPortStartFirstTask+0x24>)
 800e1fa:	6800      	ldr	r0, [r0, #0]
 800e1fc:	6800      	ldr	r0, [r0, #0]
 800e1fe:	f380 8808 	msr	MSP, r0
 800e202:	f04f 0000 	mov.w	r0, #0
 800e206:	f380 8814 	msr	CONTROL, r0
 800e20a:	b662      	cpsie	i
 800e20c:	b661      	cpsie	f
 800e20e:	f3bf 8f4f 	dsb	sy
 800e212:	f3bf 8f6f 	isb	sy
 800e216:	df00      	svc	0
 800e218:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e21a:	bf00      	nop
 800e21c:	e000ed08 	.word	0xe000ed08

0800e220 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e220:	b580      	push	{r7, lr}
 800e222:	b086      	sub	sp, #24
 800e224:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e226:	4b47      	ldr	r3, [pc, #284]	@ (800e344 <xPortStartScheduler+0x124>)
 800e228:	681b      	ldr	r3, [r3, #0]
 800e22a:	4a47      	ldr	r2, [pc, #284]	@ (800e348 <xPortStartScheduler+0x128>)
 800e22c:	4293      	cmp	r3, r2
 800e22e:	d10b      	bne.n	800e248 <xPortStartScheduler+0x28>
	__asm volatile
 800e230:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e234:	f383 8811 	msr	BASEPRI, r3
 800e238:	f3bf 8f6f 	isb	sy
 800e23c:	f3bf 8f4f 	dsb	sy
 800e240:	60fb      	str	r3, [r7, #12]
}
 800e242:	bf00      	nop
 800e244:	bf00      	nop
 800e246:	e7fd      	b.n	800e244 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e248:	4b3e      	ldr	r3, [pc, #248]	@ (800e344 <xPortStartScheduler+0x124>)
 800e24a:	681b      	ldr	r3, [r3, #0]
 800e24c:	4a3f      	ldr	r2, [pc, #252]	@ (800e34c <xPortStartScheduler+0x12c>)
 800e24e:	4293      	cmp	r3, r2
 800e250:	d10b      	bne.n	800e26a <xPortStartScheduler+0x4a>
	__asm volatile
 800e252:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e256:	f383 8811 	msr	BASEPRI, r3
 800e25a:	f3bf 8f6f 	isb	sy
 800e25e:	f3bf 8f4f 	dsb	sy
 800e262:	613b      	str	r3, [r7, #16]
}
 800e264:	bf00      	nop
 800e266:	bf00      	nop
 800e268:	e7fd      	b.n	800e266 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e26a:	4b39      	ldr	r3, [pc, #228]	@ (800e350 <xPortStartScheduler+0x130>)
 800e26c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e26e:	697b      	ldr	r3, [r7, #20]
 800e270:	781b      	ldrb	r3, [r3, #0]
 800e272:	b2db      	uxtb	r3, r3
 800e274:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e276:	697b      	ldr	r3, [r7, #20]
 800e278:	22ff      	movs	r2, #255	@ 0xff
 800e27a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e27c:	697b      	ldr	r3, [r7, #20]
 800e27e:	781b      	ldrb	r3, [r3, #0]
 800e280:	b2db      	uxtb	r3, r3
 800e282:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e284:	78fb      	ldrb	r3, [r7, #3]
 800e286:	b2db      	uxtb	r3, r3
 800e288:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800e28c:	b2da      	uxtb	r2, r3
 800e28e:	4b31      	ldr	r3, [pc, #196]	@ (800e354 <xPortStartScheduler+0x134>)
 800e290:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e292:	4b31      	ldr	r3, [pc, #196]	@ (800e358 <xPortStartScheduler+0x138>)
 800e294:	2207      	movs	r2, #7
 800e296:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e298:	e009      	b.n	800e2ae <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800e29a:	4b2f      	ldr	r3, [pc, #188]	@ (800e358 <xPortStartScheduler+0x138>)
 800e29c:	681b      	ldr	r3, [r3, #0]
 800e29e:	3b01      	subs	r3, #1
 800e2a0:	4a2d      	ldr	r2, [pc, #180]	@ (800e358 <xPortStartScheduler+0x138>)
 800e2a2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e2a4:	78fb      	ldrb	r3, [r7, #3]
 800e2a6:	b2db      	uxtb	r3, r3
 800e2a8:	005b      	lsls	r3, r3, #1
 800e2aa:	b2db      	uxtb	r3, r3
 800e2ac:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e2ae:	78fb      	ldrb	r3, [r7, #3]
 800e2b0:	b2db      	uxtb	r3, r3
 800e2b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e2b6:	2b80      	cmp	r3, #128	@ 0x80
 800e2b8:	d0ef      	beq.n	800e29a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e2ba:	4b27      	ldr	r3, [pc, #156]	@ (800e358 <xPortStartScheduler+0x138>)
 800e2bc:	681b      	ldr	r3, [r3, #0]
 800e2be:	f1c3 0307 	rsb	r3, r3, #7
 800e2c2:	2b04      	cmp	r3, #4
 800e2c4:	d00b      	beq.n	800e2de <xPortStartScheduler+0xbe>
	__asm volatile
 800e2c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2ca:	f383 8811 	msr	BASEPRI, r3
 800e2ce:	f3bf 8f6f 	isb	sy
 800e2d2:	f3bf 8f4f 	dsb	sy
 800e2d6:	60bb      	str	r3, [r7, #8]
}
 800e2d8:	bf00      	nop
 800e2da:	bf00      	nop
 800e2dc:	e7fd      	b.n	800e2da <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e2de:	4b1e      	ldr	r3, [pc, #120]	@ (800e358 <xPortStartScheduler+0x138>)
 800e2e0:	681b      	ldr	r3, [r3, #0]
 800e2e2:	021b      	lsls	r3, r3, #8
 800e2e4:	4a1c      	ldr	r2, [pc, #112]	@ (800e358 <xPortStartScheduler+0x138>)
 800e2e6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e2e8:	4b1b      	ldr	r3, [pc, #108]	@ (800e358 <xPortStartScheduler+0x138>)
 800e2ea:	681b      	ldr	r3, [r3, #0]
 800e2ec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800e2f0:	4a19      	ldr	r2, [pc, #100]	@ (800e358 <xPortStartScheduler+0x138>)
 800e2f2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	b2da      	uxtb	r2, r3
 800e2f8:	697b      	ldr	r3, [r7, #20]
 800e2fa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e2fc:	4b17      	ldr	r3, [pc, #92]	@ (800e35c <xPortStartScheduler+0x13c>)
 800e2fe:	681b      	ldr	r3, [r3, #0]
 800e300:	4a16      	ldr	r2, [pc, #88]	@ (800e35c <xPortStartScheduler+0x13c>)
 800e302:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800e306:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e308:	4b14      	ldr	r3, [pc, #80]	@ (800e35c <xPortStartScheduler+0x13c>)
 800e30a:	681b      	ldr	r3, [r3, #0]
 800e30c:	4a13      	ldr	r2, [pc, #76]	@ (800e35c <xPortStartScheduler+0x13c>)
 800e30e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800e312:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e314:	f000 f8da 	bl	800e4cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e318:	4b11      	ldr	r3, [pc, #68]	@ (800e360 <xPortStartScheduler+0x140>)
 800e31a:	2200      	movs	r2, #0
 800e31c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e31e:	f000 f8f9 	bl	800e514 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e322:	4b10      	ldr	r3, [pc, #64]	@ (800e364 <xPortStartScheduler+0x144>)
 800e324:	681b      	ldr	r3, [r3, #0]
 800e326:	4a0f      	ldr	r2, [pc, #60]	@ (800e364 <xPortStartScheduler+0x144>)
 800e328:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800e32c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e32e:	f7ff ff63 	bl	800e1f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e332:	f7ff f82f 	bl	800d394 <vTaskSwitchContext>
	prvTaskExitError();
 800e336:	f7ff ff1b 	bl	800e170 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e33a:	2300      	movs	r3, #0
}
 800e33c:	4618      	mov	r0, r3
 800e33e:	3718      	adds	r7, #24
 800e340:	46bd      	mov	sp, r7
 800e342:	bd80      	pop	{r7, pc}
 800e344:	e000ed00 	.word	0xe000ed00
 800e348:	410fc271 	.word	0x410fc271
 800e34c:	410fc270 	.word	0x410fc270
 800e350:	e000e400 	.word	0xe000e400
 800e354:	200018a4 	.word	0x200018a4
 800e358:	200018a8 	.word	0x200018a8
 800e35c:	e000ed20 	.word	0xe000ed20
 800e360:	2000001c 	.word	0x2000001c
 800e364:	e000ef34 	.word	0xe000ef34

0800e368 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e368:	b480      	push	{r7}
 800e36a:	b083      	sub	sp, #12
 800e36c:	af00      	add	r7, sp, #0
	__asm volatile
 800e36e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e372:	f383 8811 	msr	BASEPRI, r3
 800e376:	f3bf 8f6f 	isb	sy
 800e37a:	f3bf 8f4f 	dsb	sy
 800e37e:	607b      	str	r3, [r7, #4]
}
 800e380:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e382:	4b10      	ldr	r3, [pc, #64]	@ (800e3c4 <vPortEnterCritical+0x5c>)
 800e384:	681b      	ldr	r3, [r3, #0]
 800e386:	3301      	adds	r3, #1
 800e388:	4a0e      	ldr	r2, [pc, #56]	@ (800e3c4 <vPortEnterCritical+0x5c>)
 800e38a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e38c:	4b0d      	ldr	r3, [pc, #52]	@ (800e3c4 <vPortEnterCritical+0x5c>)
 800e38e:	681b      	ldr	r3, [r3, #0]
 800e390:	2b01      	cmp	r3, #1
 800e392:	d110      	bne.n	800e3b6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e394:	4b0c      	ldr	r3, [pc, #48]	@ (800e3c8 <vPortEnterCritical+0x60>)
 800e396:	681b      	ldr	r3, [r3, #0]
 800e398:	b2db      	uxtb	r3, r3
 800e39a:	2b00      	cmp	r3, #0
 800e39c:	d00b      	beq.n	800e3b6 <vPortEnterCritical+0x4e>
	__asm volatile
 800e39e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e3a2:	f383 8811 	msr	BASEPRI, r3
 800e3a6:	f3bf 8f6f 	isb	sy
 800e3aa:	f3bf 8f4f 	dsb	sy
 800e3ae:	603b      	str	r3, [r7, #0]
}
 800e3b0:	bf00      	nop
 800e3b2:	bf00      	nop
 800e3b4:	e7fd      	b.n	800e3b2 <vPortEnterCritical+0x4a>
	}
}
 800e3b6:	bf00      	nop
 800e3b8:	370c      	adds	r7, #12
 800e3ba:	46bd      	mov	sp, r7
 800e3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3c0:	4770      	bx	lr
 800e3c2:	bf00      	nop
 800e3c4:	2000001c 	.word	0x2000001c
 800e3c8:	e000ed04 	.word	0xe000ed04

0800e3cc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e3cc:	b480      	push	{r7}
 800e3ce:	b083      	sub	sp, #12
 800e3d0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e3d2:	4b12      	ldr	r3, [pc, #72]	@ (800e41c <vPortExitCritical+0x50>)
 800e3d4:	681b      	ldr	r3, [r3, #0]
 800e3d6:	2b00      	cmp	r3, #0
 800e3d8:	d10b      	bne.n	800e3f2 <vPortExitCritical+0x26>
	__asm volatile
 800e3da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e3de:	f383 8811 	msr	BASEPRI, r3
 800e3e2:	f3bf 8f6f 	isb	sy
 800e3e6:	f3bf 8f4f 	dsb	sy
 800e3ea:	607b      	str	r3, [r7, #4]
}
 800e3ec:	bf00      	nop
 800e3ee:	bf00      	nop
 800e3f0:	e7fd      	b.n	800e3ee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800e3f2:	4b0a      	ldr	r3, [pc, #40]	@ (800e41c <vPortExitCritical+0x50>)
 800e3f4:	681b      	ldr	r3, [r3, #0]
 800e3f6:	3b01      	subs	r3, #1
 800e3f8:	4a08      	ldr	r2, [pc, #32]	@ (800e41c <vPortExitCritical+0x50>)
 800e3fa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e3fc:	4b07      	ldr	r3, [pc, #28]	@ (800e41c <vPortExitCritical+0x50>)
 800e3fe:	681b      	ldr	r3, [r3, #0]
 800e400:	2b00      	cmp	r3, #0
 800e402:	d105      	bne.n	800e410 <vPortExitCritical+0x44>
 800e404:	2300      	movs	r3, #0
 800e406:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e408:	683b      	ldr	r3, [r7, #0]
 800e40a:	f383 8811 	msr	BASEPRI, r3
}
 800e40e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e410:	bf00      	nop
 800e412:	370c      	adds	r7, #12
 800e414:	46bd      	mov	sp, r7
 800e416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e41a:	4770      	bx	lr
 800e41c:	2000001c 	.word	0x2000001c

0800e420 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e420:	f3ef 8009 	mrs	r0, PSP
 800e424:	f3bf 8f6f 	isb	sy
 800e428:	4b15      	ldr	r3, [pc, #84]	@ (800e480 <pxCurrentTCBConst>)
 800e42a:	681a      	ldr	r2, [r3, #0]
 800e42c:	f01e 0f10 	tst.w	lr, #16
 800e430:	bf08      	it	eq
 800e432:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e436:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e43a:	6010      	str	r0, [r2, #0]
 800e43c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e440:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800e444:	f380 8811 	msr	BASEPRI, r0
 800e448:	f3bf 8f4f 	dsb	sy
 800e44c:	f3bf 8f6f 	isb	sy
 800e450:	f7fe ffa0 	bl	800d394 <vTaskSwitchContext>
 800e454:	f04f 0000 	mov.w	r0, #0
 800e458:	f380 8811 	msr	BASEPRI, r0
 800e45c:	bc09      	pop	{r0, r3}
 800e45e:	6819      	ldr	r1, [r3, #0]
 800e460:	6808      	ldr	r0, [r1, #0]
 800e462:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e466:	f01e 0f10 	tst.w	lr, #16
 800e46a:	bf08      	it	eq
 800e46c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e470:	f380 8809 	msr	PSP, r0
 800e474:	f3bf 8f6f 	isb	sy
 800e478:	4770      	bx	lr
 800e47a:	bf00      	nop
 800e47c:	f3af 8000 	nop.w

0800e480 <pxCurrentTCBConst>:
 800e480:	20001278 	.word	0x20001278
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e484:	bf00      	nop
 800e486:	bf00      	nop

0800e488 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e488:	b580      	push	{r7, lr}
 800e48a:	b082      	sub	sp, #8
 800e48c:	af00      	add	r7, sp, #0
	__asm volatile
 800e48e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e492:	f383 8811 	msr	BASEPRI, r3
 800e496:	f3bf 8f6f 	isb	sy
 800e49a:	f3bf 8f4f 	dsb	sy
 800e49e:	607b      	str	r3, [r7, #4]
}
 800e4a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e4a2:	f7fe febd 	bl	800d220 <xTaskIncrementTick>
 800e4a6:	4603      	mov	r3, r0
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	d003      	beq.n	800e4b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e4ac:	4b06      	ldr	r3, [pc, #24]	@ (800e4c8 <xPortSysTickHandler+0x40>)
 800e4ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e4b2:	601a      	str	r2, [r3, #0]
 800e4b4:	2300      	movs	r3, #0
 800e4b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e4b8:	683b      	ldr	r3, [r7, #0]
 800e4ba:	f383 8811 	msr	BASEPRI, r3
}
 800e4be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e4c0:	bf00      	nop
 800e4c2:	3708      	adds	r7, #8
 800e4c4:	46bd      	mov	sp, r7
 800e4c6:	bd80      	pop	{r7, pc}
 800e4c8:	e000ed04 	.word	0xe000ed04

0800e4cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e4cc:	b480      	push	{r7}
 800e4ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e4d0:	4b0b      	ldr	r3, [pc, #44]	@ (800e500 <vPortSetupTimerInterrupt+0x34>)
 800e4d2:	2200      	movs	r2, #0
 800e4d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e4d6:	4b0b      	ldr	r3, [pc, #44]	@ (800e504 <vPortSetupTimerInterrupt+0x38>)
 800e4d8:	2200      	movs	r2, #0
 800e4da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e4dc:	4b0a      	ldr	r3, [pc, #40]	@ (800e508 <vPortSetupTimerInterrupt+0x3c>)
 800e4de:	681b      	ldr	r3, [r3, #0]
 800e4e0:	4a0a      	ldr	r2, [pc, #40]	@ (800e50c <vPortSetupTimerInterrupt+0x40>)
 800e4e2:	fba2 2303 	umull	r2, r3, r2, r3
 800e4e6:	099b      	lsrs	r3, r3, #6
 800e4e8:	4a09      	ldr	r2, [pc, #36]	@ (800e510 <vPortSetupTimerInterrupt+0x44>)
 800e4ea:	3b01      	subs	r3, #1
 800e4ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e4ee:	4b04      	ldr	r3, [pc, #16]	@ (800e500 <vPortSetupTimerInterrupt+0x34>)
 800e4f0:	2207      	movs	r2, #7
 800e4f2:	601a      	str	r2, [r3, #0]
}
 800e4f4:	bf00      	nop
 800e4f6:	46bd      	mov	sp, r7
 800e4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4fc:	4770      	bx	lr
 800e4fe:	bf00      	nop
 800e500:	e000e010 	.word	0xe000e010
 800e504:	e000e018 	.word	0xe000e018
 800e508:	20000010 	.word	0x20000010
 800e50c:	10624dd3 	.word	0x10624dd3
 800e510:	e000e014 	.word	0xe000e014

0800e514 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e514:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800e524 <vPortEnableVFP+0x10>
 800e518:	6801      	ldr	r1, [r0, #0]
 800e51a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800e51e:	6001      	str	r1, [r0, #0]
 800e520:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e522:	bf00      	nop
 800e524:	e000ed88 	.word	0xe000ed88

0800e528 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e528:	b480      	push	{r7}
 800e52a:	b085      	sub	sp, #20
 800e52c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e52e:	f3ef 8305 	mrs	r3, IPSR
 800e532:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e534:	68fb      	ldr	r3, [r7, #12]
 800e536:	2b0f      	cmp	r3, #15
 800e538:	d915      	bls.n	800e566 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e53a:	4a18      	ldr	r2, [pc, #96]	@ (800e59c <vPortValidateInterruptPriority+0x74>)
 800e53c:	68fb      	ldr	r3, [r7, #12]
 800e53e:	4413      	add	r3, r2
 800e540:	781b      	ldrb	r3, [r3, #0]
 800e542:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e544:	4b16      	ldr	r3, [pc, #88]	@ (800e5a0 <vPortValidateInterruptPriority+0x78>)
 800e546:	781b      	ldrb	r3, [r3, #0]
 800e548:	7afa      	ldrb	r2, [r7, #11]
 800e54a:	429a      	cmp	r2, r3
 800e54c:	d20b      	bcs.n	800e566 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800e54e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e552:	f383 8811 	msr	BASEPRI, r3
 800e556:	f3bf 8f6f 	isb	sy
 800e55a:	f3bf 8f4f 	dsb	sy
 800e55e:	607b      	str	r3, [r7, #4]
}
 800e560:	bf00      	nop
 800e562:	bf00      	nop
 800e564:	e7fd      	b.n	800e562 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e566:	4b0f      	ldr	r3, [pc, #60]	@ (800e5a4 <vPortValidateInterruptPriority+0x7c>)
 800e568:	681b      	ldr	r3, [r3, #0]
 800e56a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800e56e:	4b0e      	ldr	r3, [pc, #56]	@ (800e5a8 <vPortValidateInterruptPriority+0x80>)
 800e570:	681b      	ldr	r3, [r3, #0]
 800e572:	429a      	cmp	r2, r3
 800e574:	d90b      	bls.n	800e58e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800e576:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e57a:	f383 8811 	msr	BASEPRI, r3
 800e57e:	f3bf 8f6f 	isb	sy
 800e582:	f3bf 8f4f 	dsb	sy
 800e586:	603b      	str	r3, [r7, #0]
}
 800e588:	bf00      	nop
 800e58a:	bf00      	nop
 800e58c:	e7fd      	b.n	800e58a <vPortValidateInterruptPriority+0x62>
	}
 800e58e:	bf00      	nop
 800e590:	3714      	adds	r7, #20
 800e592:	46bd      	mov	sp, r7
 800e594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e598:	4770      	bx	lr
 800e59a:	bf00      	nop
 800e59c:	e000e3f0 	.word	0xe000e3f0
 800e5a0:	200018a4 	.word	0x200018a4
 800e5a4:	e000ed0c 	.word	0xe000ed0c
 800e5a8:	200018a8 	.word	0x200018a8

0800e5ac <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e5ac:	b580      	push	{r7, lr}
 800e5ae:	b08a      	sub	sp, #40	@ 0x28
 800e5b0:	af00      	add	r7, sp, #0
 800e5b2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e5b4:	2300      	movs	r3, #0
 800e5b6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e5b8:	f7fe fd76 	bl	800d0a8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e5bc:	4b5c      	ldr	r3, [pc, #368]	@ (800e730 <pvPortMalloc+0x184>)
 800e5be:	681b      	ldr	r3, [r3, #0]
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	d101      	bne.n	800e5c8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e5c4:	f000 f924 	bl	800e810 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e5c8:	4b5a      	ldr	r3, [pc, #360]	@ (800e734 <pvPortMalloc+0x188>)
 800e5ca:	681a      	ldr	r2, [r3, #0]
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	4013      	ands	r3, r2
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	f040 8095 	bne.w	800e700 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	d01e      	beq.n	800e61a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800e5dc:	2208      	movs	r2, #8
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	4413      	add	r3, r2
 800e5e2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	f003 0307 	and.w	r3, r3, #7
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	d015      	beq.n	800e61a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	f023 0307 	bic.w	r3, r3, #7
 800e5f4:	3308      	adds	r3, #8
 800e5f6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	f003 0307 	and.w	r3, r3, #7
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	d00b      	beq.n	800e61a <pvPortMalloc+0x6e>
	__asm volatile
 800e602:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e606:	f383 8811 	msr	BASEPRI, r3
 800e60a:	f3bf 8f6f 	isb	sy
 800e60e:	f3bf 8f4f 	dsb	sy
 800e612:	617b      	str	r3, [r7, #20]
}
 800e614:	bf00      	nop
 800e616:	bf00      	nop
 800e618:	e7fd      	b.n	800e616 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	d06f      	beq.n	800e700 <pvPortMalloc+0x154>
 800e620:	4b45      	ldr	r3, [pc, #276]	@ (800e738 <pvPortMalloc+0x18c>)
 800e622:	681b      	ldr	r3, [r3, #0]
 800e624:	687a      	ldr	r2, [r7, #4]
 800e626:	429a      	cmp	r2, r3
 800e628:	d86a      	bhi.n	800e700 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e62a:	4b44      	ldr	r3, [pc, #272]	@ (800e73c <pvPortMalloc+0x190>)
 800e62c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e62e:	4b43      	ldr	r3, [pc, #268]	@ (800e73c <pvPortMalloc+0x190>)
 800e630:	681b      	ldr	r3, [r3, #0]
 800e632:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e634:	e004      	b.n	800e640 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800e636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e638:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e63a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e63c:	681b      	ldr	r3, [r3, #0]
 800e63e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e642:	685b      	ldr	r3, [r3, #4]
 800e644:	687a      	ldr	r2, [r7, #4]
 800e646:	429a      	cmp	r2, r3
 800e648:	d903      	bls.n	800e652 <pvPortMalloc+0xa6>
 800e64a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e64c:	681b      	ldr	r3, [r3, #0]
 800e64e:	2b00      	cmp	r3, #0
 800e650:	d1f1      	bne.n	800e636 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e652:	4b37      	ldr	r3, [pc, #220]	@ (800e730 <pvPortMalloc+0x184>)
 800e654:	681b      	ldr	r3, [r3, #0]
 800e656:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e658:	429a      	cmp	r2, r3
 800e65a:	d051      	beq.n	800e700 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e65c:	6a3b      	ldr	r3, [r7, #32]
 800e65e:	681b      	ldr	r3, [r3, #0]
 800e660:	2208      	movs	r2, #8
 800e662:	4413      	add	r3, r2
 800e664:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e668:	681a      	ldr	r2, [r3, #0]
 800e66a:	6a3b      	ldr	r3, [r7, #32]
 800e66c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e66e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e670:	685a      	ldr	r2, [r3, #4]
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	1ad2      	subs	r2, r2, r3
 800e676:	2308      	movs	r3, #8
 800e678:	005b      	lsls	r3, r3, #1
 800e67a:	429a      	cmp	r2, r3
 800e67c:	d920      	bls.n	800e6c0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e67e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	4413      	add	r3, r2
 800e684:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e686:	69bb      	ldr	r3, [r7, #24]
 800e688:	f003 0307 	and.w	r3, r3, #7
 800e68c:	2b00      	cmp	r3, #0
 800e68e:	d00b      	beq.n	800e6a8 <pvPortMalloc+0xfc>
	__asm volatile
 800e690:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e694:	f383 8811 	msr	BASEPRI, r3
 800e698:	f3bf 8f6f 	isb	sy
 800e69c:	f3bf 8f4f 	dsb	sy
 800e6a0:	613b      	str	r3, [r7, #16]
}
 800e6a2:	bf00      	nop
 800e6a4:	bf00      	nop
 800e6a6:	e7fd      	b.n	800e6a4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e6a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e6aa:	685a      	ldr	r2, [r3, #4]
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	1ad2      	subs	r2, r2, r3
 800e6b0:	69bb      	ldr	r3, [r7, #24]
 800e6b2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e6b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e6b6:	687a      	ldr	r2, [r7, #4]
 800e6b8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e6ba:	69b8      	ldr	r0, [r7, #24]
 800e6bc:	f000 f90a 	bl	800e8d4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e6c0:	4b1d      	ldr	r3, [pc, #116]	@ (800e738 <pvPortMalloc+0x18c>)
 800e6c2:	681a      	ldr	r2, [r3, #0]
 800e6c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e6c6:	685b      	ldr	r3, [r3, #4]
 800e6c8:	1ad3      	subs	r3, r2, r3
 800e6ca:	4a1b      	ldr	r2, [pc, #108]	@ (800e738 <pvPortMalloc+0x18c>)
 800e6cc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e6ce:	4b1a      	ldr	r3, [pc, #104]	@ (800e738 <pvPortMalloc+0x18c>)
 800e6d0:	681a      	ldr	r2, [r3, #0]
 800e6d2:	4b1b      	ldr	r3, [pc, #108]	@ (800e740 <pvPortMalloc+0x194>)
 800e6d4:	681b      	ldr	r3, [r3, #0]
 800e6d6:	429a      	cmp	r2, r3
 800e6d8:	d203      	bcs.n	800e6e2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e6da:	4b17      	ldr	r3, [pc, #92]	@ (800e738 <pvPortMalloc+0x18c>)
 800e6dc:	681b      	ldr	r3, [r3, #0]
 800e6de:	4a18      	ldr	r2, [pc, #96]	@ (800e740 <pvPortMalloc+0x194>)
 800e6e0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e6e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e6e4:	685a      	ldr	r2, [r3, #4]
 800e6e6:	4b13      	ldr	r3, [pc, #76]	@ (800e734 <pvPortMalloc+0x188>)
 800e6e8:	681b      	ldr	r3, [r3, #0]
 800e6ea:	431a      	orrs	r2, r3
 800e6ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e6ee:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e6f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e6f2:	2200      	movs	r2, #0
 800e6f4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800e6f6:	4b13      	ldr	r3, [pc, #76]	@ (800e744 <pvPortMalloc+0x198>)
 800e6f8:	681b      	ldr	r3, [r3, #0]
 800e6fa:	3301      	adds	r3, #1
 800e6fc:	4a11      	ldr	r2, [pc, #68]	@ (800e744 <pvPortMalloc+0x198>)
 800e6fe:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e700:	f7fe fce0 	bl	800d0c4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e704:	69fb      	ldr	r3, [r7, #28]
 800e706:	f003 0307 	and.w	r3, r3, #7
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	d00b      	beq.n	800e726 <pvPortMalloc+0x17a>
	__asm volatile
 800e70e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e712:	f383 8811 	msr	BASEPRI, r3
 800e716:	f3bf 8f6f 	isb	sy
 800e71a:	f3bf 8f4f 	dsb	sy
 800e71e:	60fb      	str	r3, [r7, #12]
}
 800e720:	bf00      	nop
 800e722:	bf00      	nop
 800e724:	e7fd      	b.n	800e722 <pvPortMalloc+0x176>
	return pvReturn;
 800e726:	69fb      	ldr	r3, [r7, #28]
}
 800e728:	4618      	mov	r0, r3
 800e72a:	3728      	adds	r7, #40	@ 0x28
 800e72c:	46bd      	mov	sp, r7
 800e72e:	bd80      	pop	{r7, pc}
 800e730:	200054b4 	.word	0x200054b4
 800e734:	200054c8 	.word	0x200054c8
 800e738:	200054b8 	.word	0x200054b8
 800e73c:	200054ac 	.word	0x200054ac
 800e740:	200054bc 	.word	0x200054bc
 800e744:	200054c0 	.word	0x200054c0

0800e748 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e748:	b580      	push	{r7, lr}
 800e74a:	b086      	sub	sp, #24
 800e74c:	af00      	add	r7, sp, #0
 800e74e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	2b00      	cmp	r3, #0
 800e758:	d04f      	beq.n	800e7fa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e75a:	2308      	movs	r3, #8
 800e75c:	425b      	negs	r3, r3
 800e75e:	697a      	ldr	r2, [r7, #20]
 800e760:	4413      	add	r3, r2
 800e762:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e764:	697b      	ldr	r3, [r7, #20]
 800e766:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e768:	693b      	ldr	r3, [r7, #16]
 800e76a:	685a      	ldr	r2, [r3, #4]
 800e76c:	4b25      	ldr	r3, [pc, #148]	@ (800e804 <vPortFree+0xbc>)
 800e76e:	681b      	ldr	r3, [r3, #0]
 800e770:	4013      	ands	r3, r2
 800e772:	2b00      	cmp	r3, #0
 800e774:	d10b      	bne.n	800e78e <vPortFree+0x46>
	__asm volatile
 800e776:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e77a:	f383 8811 	msr	BASEPRI, r3
 800e77e:	f3bf 8f6f 	isb	sy
 800e782:	f3bf 8f4f 	dsb	sy
 800e786:	60fb      	str	r3, [r7, #12]
}
 800e788:	bf00      	nop
 800e78a:	bf00      	nop
 800e78c:	e7fd      	b.n	800e78a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e78e:	693b      	ldr	r3, [r7, #16]
 800e790:	681b      	ldr	r3, [r3, #0]
 800e792:	2b00      	cmp	r3, #0
 800e794:	d00b      	beq.n	800e7ae <vPortFree+0x66>
	__asm volatile
 800e796:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e79a:	f383 8811 	msr	BASEPRI, r3
 800e79e:	f3bf 8f6f 	isb	sy
 800e7a2:	f3bf 8f4f 	dsb	sy
 800e7a6:	60bb      	str	r3, [r7, #8]
}
 800e7a8:	bf00      	nop
 800e7aa:	bf00      	nop
 800e7ac:	e7fd      	b.n	800e7aa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e7ae:	693b      	ldr	r3, [r7, #16]
 800e7b0:	685a      	ldr	r2, [r3, #4]
 800e7b2:	4b14      	ldr	r3, [pc, #80]	@ (800e804 <vPortFree+0xbc>)
 800e7b4:	681b      	ldr	r3, [r3, #0]
 800e7b6:	4013      	ands	r3, r2
 800e7b8:	2b00      	cmp	r3, #0
 800e7ba:	d01e      	beq.n	800e7fa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e7bc:	693b      	ldr	r3, [r7, #16]
 800e7be:	681b      	ldr	r3, [r3, #0]
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	d11a      	bne.n	800e7fa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e7c4:	693b      	ldr	r3, [r7, #16]
 800e7c6:	685a      	ldr	r2, [r3, #4]
 800e7c8:	4b0e      	ldr	r3, [pc, #56]	@ (800e804 <vPortFree+0xbc>)
 800e7ca:	681b      	ldr	r3, [r3, #0]
 800e7cc:	43db      	mvns	r3, r3
 800e7ce:	401a      	ands	r2, r3
 800e7d0:	693b      	ldr	r3, [r7, #16]
 800e7d2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e7d4:	f7fe fc68 	bl	800d0a8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e7d8:	693b      	ldr	r3, [r7, #16]
 800e7da:	685a      	ldr	r2, [r3, #4]
 800e7dc:	4b0a      	ldr	r3, [pc, #40]	@ (800e808 <vPortFree+0xc0>)
 800e7de:	681b      	ldr	r3, [r3, #0]
 800e7e0:	4413      	add	r3, r2
 800e7e2:	4a09      	ldr	r2, [pc, #36]	@ (800e808 <vPortFree+0xc0>)
 800e7e4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e7e6:	6938      	ldr	r0, [r7, #16]
 800e7e8:	f000 f874 	bl	800e8d4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800e7ec:	4b07      	ldr	r3, [pc, #28]	@ (800e80c <vPortFree+0xc4>)
 800e7ee:	681b      	ldr	r3, [r3, #0]
 800e7f0:	3301      	adds	r3, #1
 800e7f2:	4a06      	ldr	r2, [pc, #24]	@ (800e80c <vPortFree+0xc4>)
 800e7f4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800e7f6:	f7fe fc65 	bl	800d0c4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e7fa:	bf00      	nop
 800e7fc:	3718      	adds	r7, #24
 800e7fe:	46bd      	mov	sp, r7
 800e800:	bd80      	pop	{r7, pc}
 800e802:	bf00      	nop
 800e804:	200054c8 	.word	0x200054c8
 800e808:	200054b8 	.word	0x200054b8
 800e80c:	200054c4 	.word	0x200054c4

0800e810 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e810:	b480      	push	{r7}
 800e812:	b085      	sub	sp, #20
 800e814:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e816:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800e81a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e81c:	4b27      	ldr	r3, [pc, #156]	@ (800e8bc <prvHeapInit+0xac>)
 800e81e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e820:	68fb      	ldr	r3, [r7, #12]
 800e822:	f003 0307 	and.w	r3, r3, #7
 800e826:	2b00      	cmp	r3, #0
 800e828:	d00c      	beq.n	800e844 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e82a:	68fb      	ldr	r3, [r7, #12]
 800e82c:	3307      	adds	r3, #7
 800e82e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e830:	68fb      	ldr	r3, [r7, #12]
 800e832:	f023 0307 	bic.w	r3, r3, #7
 800e836:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e838:	68ba      	ldr	r2, [r7, #8]
 800e83a:	68fb      	ldr	r3, [r7, #12]
 800e83c:	1ad3      	subs	r3, r2, r3
 800e83e:	4a1f      	ldr	r2, [pc, #124]	@ (800e8bc <prvHeapInit+0xac>)
 800e840:	4413      	add	r3, r2
 800e842:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e844:	68fb      	ldr	r3, [r7, #12]
 800e846:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e848:	4a1d      	ldr	r2, [pc, #116]	@ (800e8c0 <prvHeapInit+0xb0>)
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e84e:	4b1c      	ldr	r3, [pc, #112]	@ (800e8c0 <prvHeapInit+0xb0>)
 800e850:	2200      	movs	r2, #0
 800e852:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	68ba      	ldr	r2, [r7, #8]
 800e858:	4413      	add	r3, r2
 800e85a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e85c:	2208      	movs	r2, #8
 800e85e:	68fb      	ldr	r3, [r7, #12]
 800e860:	1a9b      	subs	r3, r3, r2
 800e862:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e864:	68fb      	ldr	r3, [r7, #12]
 800e866:	f023 0307 	bic.w	r3, r3, #7
 800e86a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e86c:	68fb      	ldr	r3, [r7, #12]
 800e86e:	4a15      	ldr	r2, [pc, #84]	@ (800e8c4 <prvHeapInit+0xb4>)
 800e870:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e872:	4b14      	ldr	r3, [pc, #80]	@ (800e8c4 <prvHeapInit+0xb4>)
 800e874:	681b      	ldr	r3, [r3, #0]
 800e876:	2200      	movs	r2, #0
 800e878:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e87a:	4b12      	ldr	r3, [pc, #72]	@ (800e8c4 <prvHeapInit+0xb4>)
 800e87c:	681b      	ldr	r3, [r3, #0]
 800e87e:	2200      	movs	r2, #0
 800e880:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e886:	683b      	ldr	r3, [r7, #0]
 800e888:	68fa      	ldr	r2, [r7, #12]
 800e88a:	1ad2      	subs	r2, r2, r3
 800e88c:	683b      	ldr	r3, [r7, #0]
 800e88e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e890:	4b0c      	ldr	r3, [pc, #48]	@ (800e8c4 <prvHeapInit+0xb4>)
 800e892:	681a      	ldr	r2, [r3, #0]
 800e894:	683b      	ldr	r3, [r7, #0]
 800e896:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e898:	683b      	ldr	r3, [r7, #0]
 800e89a:	685b      	ldr	r3, [r3, #4]
 800e89c:	4a0a      	ldr	r2, [pc, #40]	@ (800e8c8 <prvHeapInit+0xb8>)
 800e89e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e8a0:	683b      	ldr	r3, [r7, #0]
 800e8a2:	685b      	ldr	r3, [r3, #4]
 800e8a4:	4a09      	ldr	r2, [pc, #36]	@ (800e8cc <prvHeapInit+0xbc>)
 800e8a6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e8a8:	4b09      	ldr	r3, [pc, #36]	@ (800e8d0 <prvHeapInit+0xc0>)
 800e8aa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800e8ae:	601a      	str	r2, [r3, #0]
}
 800e8b0:	bf00      	nop
 800e8b2:	3714      	adds	r7, #20
 800e8b4:	46bd      	mov	sp, r7
 800e8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ba:	4770      	bx	lr
 800e8bc:	200018ac 	.word	0x200018ac
 800e8c0:	200054ac 	.word	0x200054ac
 800e8c4:	200054b4 	.word	0x200054b4
 800e8c8:	200054bc 	.word	0x200054bc
 800e8cc:	200054b8 	.word	0x200054b8
 800e8d0:	200054c8 	.word	0x200054c8

0800e8d4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e8d4:	b480      	push	{r7}
 800e8d6:	b085      	sub	sp, #20
 800e8d8:	af00      	add	r7, sp, #0
 800e8da:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e8dc:	4b28      	ldr	r3, [pc, #160]	@ (800e980 <prvInsertBlockIntoFreeList+0xac>)
 800e8de:	60fb      	str	r3, [r7, #12]
 800e8e0:	e002      	b.n	800e8e8 <prvInsertBlockIntoFreeList+0x14>
 800e8e2:	68fb      	ldr	r3, [r7, #12]
 800e8e4:	681b      	ldr	r3, [r3, #0]
 800e8e6:	60fb      	str	r3, [r7, #12]
 800e8e8:	68fb      	ldr	r3, [r7, #12]
 800e8ea:	681b      	ldr	r3, [r3, #0]
 800e8ec:	687a      	ldr	r2, [r7, #4]
 800e8ee:	429a      	cmp	r2, r3
 800e8f0:	d8f7      	bhi.n	800e8e2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e8f2:	68fb      	ldr	r3, [r7, #12]
 800e8f4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e8f6:	68fb      	ldr	r3, [r7, #12]
 800e8f8:	685b      	ldr	r3, [r3, #4]
 800e8fa:	68ba      	ldr	r2, [r7, #8]
 800e8fc:	4413      	add	r3, r2
 800e8fe:	687a      	ldr	r2, [r7, #4]
 800e900:	429a      	cmp	r2, r3
 800e902:	d108      	bne.n	800e916 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e904:	68fb      	ldr	r3, [r7, #12]
 800e906:	685a      	ldr	r2, [r3, #4]
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	685b      	ldr	r3, [r3, #4]
 800e90c:	441a      	add	r2, r3
 800e90e:	68fb      	ldr	r3, [r7, #12]
 800e910:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e912:	68fb      	ldr	r3, [r7, #12]
 800e914:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	685b      	ldr	r3, [r3, #4]
 800e91e:	68ba      	ldr	r2, [r7, #8]
 800e920:	441a      	add	r2, r3
 800e922:	68fb      	ldr	r3, [r7, #12]
 800e924:	681b      	ldr	r3, [r3, #0]
 800e926:	429a      	cmp	r2, r3
 800e928:	d118      	bne.n	800e95c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e92a:	68fb      	ldr	r3, [r7, #12]
 800e92c:	681a      	ldr	r2, [r3, #0]
 800e92e:	4b15      	ldr	r3, [pc, #84]	@ (800e984 <prvInsertBlockIntoFreeList+0xb0>)
 800e930:	681b      	ldr	r3, [r3, #0]
 800e932:	429a      	cmp	r2, r3
 800e934:	d00d      	beq.n	800e952 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	685a      	ldr	r2, [r3, #4]
 800e93a:	68fb      	ldr	r3, [r7, #12]
 800e93c:	681b      	ldr	r3, [r3, #0]
 800e93e:	685b      	ldr	r3, [r3, #4]
 800e940:	441a      	add	r2, r3
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e946:	68fb      	ldr	r3, [r7, #12]
 800e948:	681b      	ldr	r3, [r3, #0]
 800e94a:	681a      	ldr	r2, [r3, #0]
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	601a      	str	r2, [r3, #0]
 800e950:	e008      	b.n	800e964 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e952:	4b0c      	ldr	r3, [pc, #48]	@ (800e984 <prvInsertBlockIntoFreeList+0xb0>)
 800e954:	681a      	ldr	r2, [r3, #0]
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	601a      	str	r2, [r3, #0]
 800e95a:	e003      	b.n	800e964 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e95c:	68fb      	ldr	r3, [r7, #12]
 800e95e:	681a      	ldr	r2, [r3, #0]
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e964:	68fa      	ldr	r2, [r7, #12]
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	429a      	cmp	r2, r3
 800e96a:	d002      	beq.n	800e972 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e96c:	68fb      	ldr	r3, [r7, #12]
 800e96e:	687a      	ldr	r2, [r7, #4]
 800e970:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e972:	bf00      	nop
 800e974:	3714      	adds	r7, #20
 800e976:	46bd      	mov	sp, r7
 800e978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e97c:	4770      	bx	lr
 800e97e:	bf00      	nop
 800e980:	200054ac 	.word	0x200054ac
 800e984:	200054b4 	.word	0x200054b4

0800e988 <_strtoul_l.isra.0>:
 800e988:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e98c:	4e34      	ldr	r6, [pc, #208]	@ (800ea60 <_strtoul_l.isra.0+0xd8>)
 800e98e:	4686      	mov	lr, r0
 800e990:	460d      	mov	r5, r1
 800e992:	4628      	mov	r0, r5
 800e994:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e998:	5d37      	ldrb	r7, [r6, r4]
 800e99a:	f017 0708 	ands.w	r7, r7, #8
 800e99e:	d1f8      	bne.n	800e992 <_strtoul_l.isra.0+0xa>
 800e9a0:	2c2d      	cmp	r4, #45	@ 0x2d
 800e9a2:	d110      	bne.n	800e9c6 <_strtoul_l.isra.0+0x3e>
 800e9a4:	782c      	ldrb	r4, [r5, #0]
 800e9a6:	2701      	movs	r7, #1
 800e9a8:	1c85      	adds	r5, r0, #2
 800e9aa:	f033 0010 	bics.w	r0, r3, #16
 800e9ae:	d115      	bne.n	800e9dc <_strtoul_l.isra.0+0x54>
 800e9b0:	2c30      	cmp	r4, #48	@ 0x30
 800e9b2:	d10d      	bne.n	800e9d0 <_strtoul_l.isra.0+0x48>
 800e9b4:	7828      	ldrb	r0, [r5, #0]
 800e9b6:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800e9ba:	2858      	cmp	r0, #88	@ 0x58
 800e9bc:	d108      	bne.n	800e9d0 <_strtoul_l.isra.0+0x48>
 800e9be:	786c      	ldrb	r4, [r5, #1]
 800e9c0:	3502      	adds	r5, #2
 800e9c2:	2310      	movs	r3, #16
 800e9c4:	e00a      	b.n	800e9dc <_strtoul_l.isra.0+0x54>
 800e9c6:	2c2b      	cmp	r4, #43	@ 0x2b
 800e9c8:	bf04      	itt	eq
 800e9ca:	782c      	ldrbeq	r4, [r5, #0]
 800e9cc:	1c85      	addeq	r5, r0, #2
 800e9ce:	e7ec      	b.n	800e9aa <_strtoul_l.isra.0+0x22>
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	d1f6      	bne.n	800e9c2 <_strtoul_l.isra.0+0x3a>
 800e9d4:	2c30      	cmp	r4, #48	@ 0x30
 800e9d6:	bf14      	ite	ne
 800e9d8:	230a      	movne	r3, #10
 800e9da:	2308      	moveq	r3, #8
 800e9dc:	f04f 38ff 	mov.w	r8, #4294967295
 800e9e0:	2600      	movs	r6, #0
 800e9e2:	fbb8 f8f3 	udiv	r8, r8, r3
 800e9e6:	fb03 f908 	mul.w	r9, r3, r8
 800e9ea:	ea6f 0909 	mvn.w	r9, r9
 800e9ee:	4630      	mov	r0, r6
 800e9f0:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800e9f4:	f1bc 0f09 	cmp.w	ip, #9
 800e9f8:	d810      	bhi.n	800ea1c <_strtoul_l.isra.0+0x94>
 800e9fa:	4664      	mov	r4, ip
 800e9fc:	42a3      	cmp	r3, r4
 800e9fe:	dd1e      	ble.n	800ea3e <_strtoul_l.isra.0+0xb6>
 800ea00:	f1b6 3fff 	cmp.w	r6, #4294967295
 800ea04:	d007      	beq.n	800ea16 <_strtoul_l.isra.0+0x8e>
 800ea06:	4580      	cmp	r8, r0
 800ea08:	d316      	bcc.n	800ea38 <_strtoul_l.isra.0+0xb0>
 800ea0a:	d101      	bne.n	800ea10 <_strtoul_l.isra.0+0x88>
 800ea0c:	45a1      	cmp	r9, r4
 800ea0e:	db13      	blt.n	800ea38 <_strtoul_l.isra.0+0xb0>
 800ea10:	fb00 4003 	mla	r0, r0, r3, r4
 800ea14:	2601      	movs	r6, #1
 800ea16:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ea1a:	e7e9      	b.n	800e9f0 <_strtoul_l.isra.0+0x68>
 800ea1c:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800ea20:	f1bc 0f19 	cmp.w	ip, #25
 800ea24:	d801      	bhi.n	800ea2a <_strtoul_l.isra.0+0xa2>
 800ea26:	3c37      	subs	r4, #55	@ 0x37
 800ea28:	e7e8      	b.n	800e9fc <_strtoul_l.isra.0+0x74>
 800ea2a:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800ea2e:	f1bc 0f19 	cmp.w	ip, #25
 800ea32:	d804      	bhi.n	800ea3e <_strtoul_l.isra.0+0xb6>
 800ea34:	3c57      	subs	r4, #87	@ 0x57
 800ea36:	e7e1      	b.n	800e9fc <_strtoul_l.isra.0+0x74>
 800ea38:	f04f 36ff 	mov.w	r6, #4294967295
 800ea3c:	e7eb      	b.n	800ea16 <_strtoul_l.isra.0+0x8e>
 800ea3e:	1c73      	adds	r3, r6, #1
 800ea40:	d106      	bne.n	800ea50 <_strtoul_l.isra.0+0xc8>
 800ea42:	2322      	movs	r3, #34	@ 0x22
 800ea44:	f8ce 3000 	str.w	r3, [lr]
 800ea48:	4630      	mov	r0, r6
 800ea4a:	b932      	cbnz	r2, 800ea5a <_strtoul_l.isra.0+0xd2>
 800ea4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ea50:	b107      	cbz	r7, 800ea54 <_strtoul_l.isra.0+0xcc>
 800ea52:	4240      	negs	r0, r0
 800ea54:	2a00      	cmp	r2, #0
 800ea56:	d0f9      	beq.n	800ea4c <_strtoul_l.isra.0+0xc4>
 800ea58:	b106      	cbz	r6, 800ea5c <_strtoul_l.isra.0+0xd4>
 800ea5a:	1e69      	subs	r1, r5, #1
 800ea5c:	6011      	str	r1, [r2, #0]
 800ea5e:	e7f5      	b.n	800ea4c <_strtoul_l.isra.0+0xc4>
 800ea60:	08012cb1 	.word	0x08012cb1

0800ea64 <strtoul>:
 800ea64:	4613      	mov	r3, r2
 800ea66:	460a      	mov	r2, r1
 800ea68:	4601      	mov	r1, r0
 800ea6a:	4802      	ldr	r0, [pc, #8]	@ (800ea74 <strtoul+0x10>)
 800ea6c:	6800      	ldr	r0, [r0, #0]
 800ea6e:	f7ff bf8b 	b.w	800e988 <_strtoul_l.isra.0>
 800ea72:	bf00      	nop
 800ea74:	2000002c 	.word	0x2000002c

0800ea78 <__cvt>:
 800ea78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ea7c:	ec57 6b10 	vmov	r6, r7, d0
 800ea80:	2f00      	cmp	r7, #0
 800ea82:	460c      	mov	r4, r1
 800ea84:	4619      	mov	r1, r3
 800ea86:	463b      	mov	r3, r7
 800ea88:	bfbb      	ittet	lt
 800ea8a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800ea8e:	461f      	movlt	r7, r3
 800ea90:	2300      	movge	r3, #0
 800ea92:	232d      	movlt	r3, #45	@ 0x2d
 800ea94:	700b      	strb	r3, [r1, #0]
 800ea96:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ea98:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800ea9c:	4691      	mov	r9, r2
 800ea9e:	f023 0820 	bic.w	r8, r3, #32
 800eaa2:	bfbc      	itt	lt
 800eaa4:	4632      	movlt	r2, r6
 800eaa6:	4616      	movlt	r6, r2
 800eaa8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800eaac:	d005      	beq.n	800eaba <__cvt+0x42>
 800eaae:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800eab2:	d100      	bne.n	800eab6 <__cvt+0x3e>
 800eab4:	3401      	adds	r4, #1
 800eab6:	2102      	movs	r1, #2
 800eab8:	e000      	b.n	800eabc <__cvt+0x44>
 800eaba:	2103      	movs	r1, #3
 800eabc:	ab03      	add	r3, sp, #12
 800eabe:	9301      	str	r3, [sp, #4]
 800eac0:	ab02      	add	r3, sp, #8
 800eac2:	9300      	str	r3, [sp, #0]
 800eac4:	ec47 6b10 	vmov	d0, r6, r7
 800eac8:	4653      	mov	r3, sl
 800eaca:	4622      	mov	r2, r4
 800eacc:	f000 fee8 	bl	800f8a0 <_dtoa_r>
 800ead0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800ead4:	4605      	mov	r5, r0
 800ead6:	d119      	bne.n	800eb0c <__cvt+0x94>
 800ead8:	f019 0f01 	tst.w	r9, #1
 800eadc:	d00e      	beq.n	800eafc <__cvt+0x84>
 800eade:	eb00 0904 	add.w	r9, r0, r4
 800eae2:	2200      	movs	r2, #0
 800eae4:	2300      	movs	r3, #0
 800eae6:	4630      	mov	r0, r6
 800eae8:	4639      	mov	r1, r7
 800eaea:	f7f1 ffed 	bl	8000ac8 <__aeabi_dcmpeq>
 800eaee:	b108      	cbz	r0, 800eaf4 <__cvt+0x7c>
 800eaf0:	f8cd 900c 	str.w	r9, [sp, #12]
 800eaf4:	2230      	movs	r2, #48	@ 0x30
 800eaf6:	9b03      	ldr	r3, [sp, #12]
 800eaf8:	454b      	cmp	r3, r9
 800eafa:	d31e      	bcc.n	800eb3a <__cvt+0xc2>
 800eafc:	9b03      	ldr	r3, [sp, #12]
 800eafe:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800eb00:	1b5b      	subs	r3, r3, r5
 800eb02:	4628      	mov	r0, r5
 800eb04:	6013      	str	r3, [r2, #0]
 800eb06:	b004      	add	sp, #16
 800eb08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eb0c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800eb10:	eb00 0904 	add.w	r9, r0, r4
 800eb14:	d1e5      	bne.n	800eae2 <__cvt+0x6a>
 800eb16:	7803      	ldrb	r3, [r0, #0]
 800eb18:	2b30      	cmp	r3, #48	@ 0x30
 800eb1a:	d10a      	bne.n	800eb32 <__cvt+0xba>
 800eb1c:	2200      	movs	r2, #0
 800eb1e:	2300      	movs	r3, #0
 800eb20:	4630      	mov	r0, r6
 800eb22:	4639      	mov	r1, r7
 800eb24:	f7f1 ffd0 	bl	8000ac8 <__aeabi_dcmpeq>
 800eb28:	b918      	cbnz	r0, 800eb32 <__cvt+0xba>
 800eb2a:	f1c4 0401 	rsb	r4, r4, #1
 800eb2e:	f8ca 4000 	str.w	r4, [sl]
 800eb32:	f8da 3000 	ldr.w	r3, [sl]
 800eb36:	4499      	add	r9, r3
 800eb38:	e7d3      	b.n	800eae2 <__cvt+0x6a>
 800eb3a:	1c59      	adds	r1, r3, #1
 800eb3c:	9103      	str	r1, [sp, #12]
 800eb3e:	701a      	strb	r2, [r3, #0]
 800eb40:	e7d9      	b.n	800eaf6 <__cvt+0x7e>

0800eb42 <__exponent>:
 800eb42:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800eb44:	2900      	cmp	r1, #0
 800eb46:	bfba      	itte	lt
 800eb48:	4249      	neglt	r1, r1
 800eb4a:	232d      	movlt	r3, #45	@ 0x2d
 800eb4c:	232b      	movge	r3, #43	@ 0x2b
 800eb4e:	2909      	cmp	r1, #9
 800eb50:	7002      	strb	r2, [r0, #0]
 800eb52:	7043      	strb	r3, [r0, #1]
 800eb54:	dd29      	ble.n	800ebaa <__exponent+0x68>
 800eb56:	f10d 0307 	add.w	r3, sp, #7
 800eb5a:	461d      	mov	r5, r3
 800eb5c:	270a      	movs	r7, #10
 800eb5e:	461a      	mov	r2, r3
 800eb60:	fbb1 f6f7 	udiv	r6, r1, r7
 800eb64:	fb07 1416 	mls	r4, r7, r6, r1
 800eb68:	3430      	adds	r4, #48	@ 0x30
 800eb6a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800eb6e:	460c      	mov	r4, r1
 800eb70:	2c63      	cmp	r4, #99	@ 0x63
 800eb72:	f103 33ff 	add.w	r3, r3, #4294967295
 800eb76:	4631      	mov	r1, r6
 800eb78:	dcf1      	bgt.n	800eb5e <__exponent+0x1c>
 800eb7a:	3130      	adds	r1, #48	@ 0x30
 800eb7c:	1e94      	subs	r4, r2, #2
 800eb7e:	f803 1c01 	strb.w	r1, [r3, #-1]
 800eb82:	1c41      	adds	r1, r0, #1
 800eb84:	4623      	mov	r3, r4
 800eb86:	42ab      	cmp	r3, r5
 800eb88:	d30a      	bcc.n	800eba0 <__exponent+0x5e>
 800eb8a:	f10d 0309 	add.w	r3, sp, #9
 800eb8e:	1a9b      	subs	r3, r3, r2
 800eb90:	42ac      	cmp	r4, r5
 800eb92:	bf88      	it	hi
 800eb94:	2300      	movhi	r3, #0
 800eb96:	3302      	adds	r3, #2
 800eb98:	4403      	add	r3, r0
 800eb9a:	1a18      	subs	r0, r3, r0
 800eb9c:	b003      	add	sp, #12
 800eb9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eba0:	f813 6b01 	ldrb.w	r6, [r3], #1
 800eba4:	f801 6f01 	strb.w	r6, [r1, #1]!
 800eba8:	e7ed      	b.n	800eb86 <__exponent+0x44>
 800ebaa:	2330      	movs	r3, #48	@ 0x30
 800ebac:	3130      	adds	r1, #48	@ 0x30
 800ebae:	7083      	strb	r3, [r0, #2]
 800ebb0:	70c1      	strb	r1, [r0, #3]
 800ebb2:	1d03      	adds	r3, r0, #4
 800ebb4:	e7f1      	b.n	800eb9a <__exponent+0x58>
	...

0800ebb8 <_printf_float>:
 800ebb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ebbc:	b08d      	sub	sp, #52	@ 0x34
 800ebbe:	460c      	mov	r4, r1
 800ebc0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800ebc4:	4616      	mov	r6, r2
 800ebc6:	461f      	mov	r7, r3
 800ebc8:	4605      	mov	r5, r0
 800ebca:	f000 fcfd 	bl	800f5c8 <_localeconv_r>
 800ebce:	6803      	ldr	r3, [r0, #0]
 800ebd0:	9304      	str	r3, [sp, #16]
 800ebd2:	4618      	mov	r0, r3
 800ebd4:	f7f1 fb4c 	bl	8000270 <strlen>
 800ebd8:	2300      	movs	r3, #0
 800ebda:	930a      	str	r3, [sp, #40]	@ 0x28
 800ebdc:	f8d8 3000 	ldr.w	r3, [r8]
 800ebe0:	9005      	str	r0, [sp, #20]
 800ebe2:	3307      	adds	r3, #7
 800ebe4:	f023 0307 	bic.w	r3, r3, #7
 800ebe8:	f103 0208 	add.w	r2, r3, #8
 800ebec:	f894 a018 	ldrb.w	sl, [r4, #24]
 800ebf0:	f8d4 b000 	ldr.w	fp, [r4]
 800ebf4:	f8c8 2000 	str.w	r2, [r8]
 800ebf8:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ebfc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800ec00:	9307      	str	r3, [sp, #28]
 800ec02:	f8cd 8018 	str.w	r8, [sp, #24]
 800ec06:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800ec0a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ec0e:	4b9c      	ldr	r3, [pc, #624]	@ (800ee80 <_printf_float+0x2c8>)
 800ec10:	f04f 32ff 	mov.w	r2, #4294967295
 800ec14:	f7f1 ff8a 	bl	8000b2c <__aeabi_dcmpun>
 800ec18:	bb70      	cbnz	r0, 800ec78 <_printf_float+0xc0>
 800ec1a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ec1e:	4b98      	ldr	r3, [pc, #608]	@ (800ee80 <_printf_float+0x2c8>)
 800ec20:	f04f 32ff 	mov.w	r2, #4294967295
 800ec24:	f7f1 ff64 	bl	8000af0 <__aeabi_dcmple>
 800ec28:	bb30      	cbnz	r0, 800ec78 <_printf_float+0xc0>
 800ec2a:	2200      	movs	r2, #0
 800ec2c:	2300      	movs	r3, #0
 800ec2e:	4640      	mov	r0, r8
 800ec30:	4649      	mov	r1, r9
 800ec32:	f7f1 ff53 	bl	8000adc <__aeabi_dcmplt>
 800ec36:	b110      	cbz	r0, 800ec3e <_printf_float+0x86>
 800ec38:	232d      	movs	r3, #45	@ 0x2d
 800ec3a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ec3e:	4a91      	ldr	r2, [pc, #580]	@ (800ee84 <_printf_float+0x2cc>)
 800ec40:	4b91      	ldr	r3, [pc, #580]	@ (800ee88 <_printf_float+0x2d0>)
 800ec42:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800ec46:	bf8c      	ite	hi
 800ec48:	4690      	movhi	r8, r2
 800ec4a:	4698      	movls	r8, r3
 800ec4c:	2303      	movs	r3, #3
 800ec4e:	6123      	str	r3, [r4, #16]
 800ec50:	f02b 0304 	bic.w	r3, fp, #4
 800ec54:	6023      	str	r3, [r4, #0]
 800ec56:	f04f 0900 	mov.w	r9, #0
 800ec5a:	9700      	str	r7, [sp, #0]
 800ec5c:	4633      	mov	r3, r6
 800ec5e:	aa0b      	add	r2, sp, #44	@ 0x2c
 800ec60:	4621      	mov	r1, r4
 800ec62:	4628      	mov	r0, r5
 800ec64:	f000 f9d2 	bl	800f00c <_printf_common>
 800ec68:	3001      	adds	r0, #1
 800ec6a:	f040 808d 	bne.w	800ed88 <_printf_float+0x1d0>
 800ec6e:	f04f 30ff 	mov.w	r0, #4294967295
 800ec72:	b00d      	add	sp, #52	@ 0x34
 800ec74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec78:	4642      	mov	r2, r8
 800ec7a:	464b      	mov	r3, r9
 800ec7c:	4640      	mov	r0, r8
 800ec7e:	4649      	mov	r1, r9
 800ec80:	f7f1 ff54 	bl	8000b2c <__aeabi_dcmpun>
 800ec84:	b140      	cbz	r0, 800ec98 <_printf_float+0xe0>
 800ec86:	464b      	mov	r3, r9
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	bfbc      	itt	lt
 800ec8c:	232d      	movlt	r3, #45	@ 0x2d
 800ec8e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800ec92:	4a7e      	ldr	r2, [pc, #504]	@ (800ee8c <_printf_float+0x2d4>)
 800ec94:	4b7e      	ldr	r3, [pc, #504]	@ (800ee90 <_printf_float+0x2d8>)
 800ec96:	e7d4      	b.n	800ec42 <_printf_float+0x8a>
 800ec98:	6863      	ldr	r3, [r4, #4]
 800ec9a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800ec9e:	9206      	str	r2, [sp, #24]
 800eca0:	1c5a      	adds	r2, r3, #1
 800eca2:	d13b      	bne.n	800ed1c <_printf_float+0x164>
 800eca4:	2306      	movs	r3, #6
 800eca6:	6063      	str	r3, [r4, #4]
 800eca8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800ecac:	2300      	movs	r3, #0
 800ecae:	6022      	str	r2, [r4, #0]
 800ecb0:	9303      	str	r3, [sp, #12]
 800ecb2:	ab0a      	add	r3, sp, #40	@ 0x28
 800ecb4:	e9cd a301 	strd	sl, r3, [sp, #4]
 800ecb8:	ab09      	add	r3, sp, #36	@ 0x24
 800ecba:	9300      	str	r3, [sp, #0]
 800ecbc:	6861      	ldr	r1, [r4, #4]
 800ecbe:	ec49 8b10 	vmov	d0, r8, r9
 800ecc2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800ecc6:	4628      	mov	r0, r5
 800ecc8:	f7ff fed6 	bl	800ea78 <__cvt>
 800eccc:	9b06      	ldr	r3, [sp, #24]
 800ecce:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ecd0:	2b47      	cmp	r3, #71	@ 0x47
 800ecd2:	4680      	mov	r8, r0
 800ecd4:	d129      	bne.n	800ed2a <_printf_float+0x172>
 800ecd6:	1cc8      	adds	r0, r1, #3
 800ecd8:	db02      	blt.n	800ece0 <_printf_float+0x128>
 800ecda:	6863      	ldr	r3, [r4, #4]
 800ecdc:	4299      	cmp	r1, r3
 800ecde:	dd41      	ble.n	800ed64 <_printf_float+0x1ac>
 800ece0:	f1aa 0a02 	sub.w	sl, sl, #2
 800ece4:	fa5f fa8a 	uxtb.w	sl, sl
 800ece8:	3901      	subs	r1, #1
 800ecea:	4652      	mov	r2, sl
 800ecec:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800ecf0:	9109      	str	r1, [sp, #36]	@ 0x24
 800ecf2:	f7ff ff26 	bl	800eb42 <__exponent>
 800ecf6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ecf8:	1813      	adds	r3, r2, r0
 800ecfa:	2a01      	cmp	r2, #1
 800ecfc:	4681      	mov	r9, r0
 800ecfe:	6123      	str	r3, [r4, #16]
 800ed00:	dc02      	bgt.n	800ed08 <_printf_float+0x150>
 800ed02:	6822      	ldr	r2, [r4, #0]
 800ed04:	07d2      	lsls	r2, r2, #31
 800ed06:	d501      	bpl.n	800ed0c <_printf_float+0x154>
 800ed08:	3301      	adds	r3, #1
 800ed0a:	6123      	str	r3, [r4, #16]
 800ed0c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	d0a2      	beq.n	800ec5a <_printf_float+0xa2>
 800ed14:	232d      	movs	r3, #45	@ 0x2d
 800ed16:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ed1a:	e79e      	b.n	800ec5a <_printf_float+0xa2>
 800ed1c:	9a06      	ldr	r2, [sp, #24]
 800ed1e:	2a47      	cmp	r2, #71	@ 0x47
 800ed20:	d1c2      	bne.n	800eca8 <_printf_float+0xf0>
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	d1c0      	bne.n	800eca8 <_printf_float+0xf0>
 800ed26:	2301      	movs	r3, #1
 800ed28:	e7bd      	b.n	800eca6 <_printf_float+0xee>
 800ed2a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800ed2e:	d9db      	bls.n	800ece8 <_printf_float+0x130>
 800ed30:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800ed34:	d118      	bne.n	800ed68 <_printf_float+0x1b0>
 800ed36:	2900      	cmp	r1, #0
 800ed38:	6863      	ldr	r3, [r4, #4]
 800ed3a:	dd0b      	ble.n	800ed54 <_printf_float+0x19c>
 800ed3c:	6121      	str	r1, [r4, #16]
 800ed3e:	b913      	cbnz	r3, 800ed46 <_printf_float+0x18e>
 800ed40:	6822      	ldr	r2, [r4, #0]
 800ed42:	07d0      	lsls	r0, r2, #31
 800ed44:	d502      	bpl.n	800ed4c <_printf_float+0x194>
 800ed46:	3301      	adds	r3, #1
 800ed48:	440b      	add	r3, r1
 800ed4a:	6123      	str	r3, [r4, #16]
 800ed4c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800ed4e:	f04f 0900 	mov.w	r9, #0
 800ed52:	e7db      	b.n	800ed0c <_printf_float+0x154>
 800ed54:	b913      	cbnz	r3, 800ed5c <_printf_float+0x1a4>
 800ed56:	6822      	ldr	r2, [r4, #0]
 800ed58:	07d2      	lsls	r2, r2, #31
 800ed5a:	d501      	bpl.n	800ed60 <_printf_float+0x1a8>
 800ed5c:	3302      	adds	r3, #2
 800ed5e:	e7f4      	b.n	800ed4a <_printf_float+0x192>
 800ed60:	2301      	movs	r3, #1
 800ed62:	e7f2      	b.n	800ed4a <_printf_float+0x192>
 800ed64:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800ed68:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ed6a:	4299      	cmp	r1, r3
 800ed6c:	db05      	blt.n	800ed7a <_printf_float+0x1c2>
 800ed6e:	6823      	ldr	r3, [r4, #0]
 800ed70:	6121      	str	r1, [r4, #16]
 800ed72:	07d8      	lsls	r0, r3, #31
 800ed74:	d5ea      	bpl.n	800ed4c <_printf_float+0x194>
 800ed76:	1c4b      	adds	r3, r1, #1
 800ed78:	e7e7      	b.n	800ed4a <_printf_float+0x192>
 800ed7a:	2900      	cmp	r1, #0
 800ed7c:	bfd4      	ite	le
 800ed7e:	f1c1 0202 	rsble	r2, r1, #2
 800ed82:	2201      	movgt	r2, #1
 800ed84:	4413      	add	r3, r2
 800ed86:	e7e0      	b.n	800ed4a <_printf_float+0x192>
 800ed88:	6823      	ldr	r3, [r4, #0]
 800ed8a:	055a      	lsls	r2, r3, #21
 800ed8c:	d407      	bmi.n	800ed9e <_printf_float+0x1e6>
 800ed8e:	6923      	ldr	r3, [r4, #16]
 800ed90:	4642      	mov	r2, r8
 800ed92:	4631      	mov	r1, r6
 800ed94:	4628      	mov	r0, r5
 800ed96:	47b8      	blx	r7
 800ed98:	3001      	adds	r0, #1
 800ed9a:	d12b      	bne.n	800edf4 <_printf_float+0x23c>
 800ed9c:	e767      	b.n	800ec6e <_printf_float+0xb6>
 800ed9e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800eda2:	f240 80dd 	bls.w	800ef60 <_printf_float+0x3a8>
 800eda6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800edaa:	2200      	movs	r2, #0
 800edac:	2300      	movs	r3, #0
 800edae:	f7f1 fe8b 	bl	8000ac8 <__aeabi_dcmpeq>
 800edb2:	2800      	cmp	r0, #0
 800edb4:	d033      	beq.n	800ee1e <_printf_float+0x266>
 800edb6:	4a37      	ldr	r2, [pc, #220]	@ (800ee94 <_printf_float+0x2dc>)
 800edb8:	2301      	movs	r3, #1
 800edba:	4631      	mov	r1, r6
 800edbc:	4628      	mov	r0, r5
 800edbe:	47b8      	blx	r7
 800edc0:	3001      	adds	r0, #1
 800edc2:	f43f af54 	beq.w	800ec6e <_printf_float+0xb6>
 800edc6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800edca:	4543      	cmp	r3, r8
 800edcc:	db02      	blt.n	800edd4 <_printf_float+0x21c>
 800edce:	6823      	ldr	r3, [r4, #0]
 800edd0:	07d8      	lsls	r0, r3, #31
 800edd2:	d50f      	bpl.n	800edf4 <_printf_float+0x23c>
 800edd4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800edd8:	4631      	mov	r1, r6
 800edda:	4628      	mov	r0, r5
 800eddc:	47b8      	blx	r7
 800edde:	3001      	adds	r0, #1
 800ede0:	f43f af45 	beq.w	800ec6e <_printf_float+0xb6>
 800ede4:	f04f 0900 	mov.w	r9, #0
 800ede8:	f108 38ff 	add.w	r8, r8, #4294967295
 800edec:	f104 0a1a 	add.w	sl, r4, #26
 800edf0:	45c8      	cmp	r8, r9
 800edf2:	dc09      	bgt.n	800ee08 <_printf_float+0x250>
 800edf4:	6823      	ldr	r3, [r4, #0]
 800edf6:	079b      	lsls	r3, r3, #30
 800edf8:	f100 8103 	bmi.w	800f002 <_printf_float+0x44a>
 800edfc:	68e0      	ldr	r0, [r4, #12]
 800edfe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ee00:	4298      	cmp	r0, r3
 800ee02:	bfb8      	it	lt
 800ee04:	4618      	movlt	r0, r3
 800ee06:	e734      	b.n	800ec72 <_printf_float+0xba>
 800ee08:	2301      	movs	r3, #1
 800ee0a:	4652      	mov	r2, sl
 800ee0c:	4631      	mov	r1, r6
 800ee0e:	4628      	mov	r0, r5
 800ee10:	47b8      	blx	r7
 800ee12:	3001      	adds	r0, #1
 800ee14:	f43f af2b 	beq.w	800ec6e <_printf_float+0xb6>
 800ee18:	f109 0901 	add.w	r9, r9, #1
 800ee1c:	e7e8      	b.n	800edf0 <_printf_float+0x238>
 800ee1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	dc39      	bgt.n	800ee98 <_printf_float+0x2e0>
 800ee24:	4a1b      	ldr	r2, [pc, #108]	@ (800ee94 <_printf_float+0x2dc>)
 800ee26:	2301      	movs	r3, #1
 800ee28:	4631      	mov	r1, r6
 800ee2a:	4628      	mov	r0, r5
 800ee2c:	47b8      	blx	r7
 800ee2e:	3001      	adds	r0, #1
 800ee30:	f43f af1d 	beq.w	800ec6e <_printf_float+0xb6>
 800ee34:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800ee38:	ea59 0303 	orrs.w	r3, r9, r3
 800ee3c:	d102      	bne.n	800ee44 <_printf_float+0x28c>
 800ee3e:	6823      	ldr	r3, [r4, #0]
 800ee40:	07d9      	lsls	r1, r3, #31
 800ee42:	d5d7      	bpl.n	800edf4 <_printf_float+0x23c>
 800ee44:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ee48:	4631      	mov	r1, r6
 800ee4a:	4628      	mov	r0, r5
 800ee4c:	47b8      	blx	r7
 800ee4e:	3001      	adds	r0, #1
 800ee50:	f43f af0d 	beq.w	800ec6e <_printf_float+0xb6>
 800ee54:	f04f 0a00 	mov.w	sl, #0
 800ee58:	f104 0b1a 	add.w	fp, r4, #26
 800ee5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ee5e:	425b      	negs	r3, r3
 800ee60:	4553      	cmp	r3, sl
 800ee62:	dc01      	bgt.n	800ee68 <_printf_float+0x2b0>
 800ee64:	464b      	mov	r3, r9
 800ee66:	e793      	b.n	800ed90 <_printf_float+0x1d8>
 800ee68:	2301      	movs	r3, #1
 800ee6a:	465a      	mov	r2, fp
 800ee6c:	4631      	mov	r1, r6
 800ee6e:	4628      	mov	r0, r5
 800ee70:	47b8      	blx	r7
 800ee72:	3001      	adds	r0, #1
 800ee74:	f43f aefb 	beq.w	800ec6e <_printf_float+0xb6>
 800ee78:	f10a 0a01 	add.w	sl, sl, #1
 800ee7c:	e7ee      	b.n	800ee5c <_printf_float+0x2a4>
 800ee7e:	bf00      	nop
 800ee80:	7fefffff 	.word	0x7fefffff
 800ee84:	08012db5 	.word	0x08012db5
 800ee88:	08012db1 	.word	0x08012db1
 800ee8c:	08012dbd 	.word	0x08012dbd
 800ee90:	08012db9 	.word	0x08012db9
 800ee94:	08012dc1 	.word	0x08012dc1
 800ee98:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ee9a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800ee9e:	4553      	cmp	r3, sl
 800eea0:	bfa8      	it	ge
 800eea2:	4653      	movge	r3, sl
 800eea4:	2b00      	cmp	r3, #0
 800eea6:	4699      	mov	r9, r3
 800eea8:	dc36      	bgt.n	800ef18 <_printf_float+0x360>
 800eeaa:	f04f 0b00 	mov.w	fp, #0
 800eeae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800eeb2:	f104 021a 	add.w	r2, r4, #26
 800eeb6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800eeb8:	9306      	str	r3, [sp, #24]
 800eeba:	eba3 0309 	sub.w	r3, r3, r9
 800eebe:	455b      	cmp	r3, fp
 800eec0:	dc31      	bgt.n	800ef26 <_printf_float+0x36e>
 800eec2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eec4:	459a      	cmp	sl, r3
 800eec6:	dc3a      	bgt.n	800ef3e <_printf_float+0x386>
 800eec8:	6823      	ldr	r3, [r4, #0]
 800eeca:	07da      	lsls	r2, r3, #31
 800eecc:	d437      	bmi.n	800ef3e <_printf_float+0x386>
 800eece:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eed0:	ebaa 0903 	sub.w	r9, sl, r3
 800eed4:	9b06      	ldr	r3, [sp, #24]
 800eed6:	ebaa 0303 	sub.w	r3, sl, r3
 800eeda:	4599      	cmp	r9, r3
 800eedc:	bfa8      	it	ge
 800eede:	4699      	movge	r9, r3
 800eee0:	f1b9 0f00 	cmp.w	r9, #0
 800eee4:	dc33      	bgt.n	800ef4e <_printf_float+0x396>
 800eee6:	f04f 0800 	mov.w	r8, #0
 800eeea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800eeee:	f104 0b1a 	add.w	fp, r4, #26
 800eef2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eef4:	ebaa 0303 	sub.w	r3, sl, r3
 800eef8:	eba3 0309 	sub.w	r3, r3, r9
 800eefc:	4543      	cmp	r3, r8
 800eefe:	f77f af79 	ble.w	800edf4 <_printf_float+0x23c>
 800ef02:	2301      	movs	r3, #1
 800ef04:	465a      	mov	r2, fp
 800ef06:	4631      	mov	r1, r6
 800ef08:	4628      	mov	r0, r5
 800ef0a:	47b8      	blx	r7
 800ef0c:	3001      	adds	r0, #1
 800ef0e:	f43f aeae 	beq.w	800ec6e <_printf_float+0xb6>
 800ef12:	f108 0801 	add.w	r8, r8, #1
 800ef16:	e7ec      	b.n	800eef2 <_printf_float+0x33a>
 800ef18:	4642      	mov	r2, r8
 800ef1a:	4631      	mov	r1, r6
 800ef1c:	4628      	mov	r0, r5
 800ef1e:	47b8      	blx	r7
 800ef20:	3001      	adds	r0, #1
 800ef22:	d1c2      	bne.n	800eeaa <_printf_float+0x2f2>
 800ef24:	e6a3      	b.n	800ec6e <_printf_float+0xb6>
 800ef26:	2301      	movs	r3, #1
 800ef28:	4631      	mov	r1, r6
 800ef2a:	4628      	mov	r0, r5
 800ef2c:	9206      	str	r2, [sp, #24]
 800ef2e:	47b8      	blx	r7
 800ef30:	3001      	adds	r0, #1
 800ef32:	f43f ae9c 	beq.w	800ec6e <_printf_float+0xb6>
 800ef36:	9a06      	ldr	r2, [sp, #24]
 800ef38:	f10b 0b01 	add.w	fp, fp, #1
 800ef3c:	e7bb      	b.n	800eeb6 <_printf_float+0x2fe>
 800ef3e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ef42:	4631      	mov	r1, r6
 800ef44:	4628      	mov	r0, r5
 800ef46:	47b8      	blx	r7
 800ef48:	3001      	adds	r0, #1
 800ef4a:	d1c0      	bne.n	800eece <_printf_float+0x316>
 800ef4c:	e68f      	b.n	800ec6e <_printf_float+0xb6>
 800ef4e:	9a06      	ldr	r2, [sp, #24]
 800ef50:	464b      	mov	r3, r9
 800ef52:	4442      	add	r2, r8
 800ef54:	4631      	mov	r1, r6
 800ef56:	4628      	mov	r0, r5
 800ef58:	47b8      	blx	r7
 800ef5a:	3001      	adds	r0, #1
 800ef5c:	d1c3      	bne.n	800eee6 <_printf_float+0x32e>
 800ef5e:	e686      	b.n	800ec6e <_printf_float+0xb6>
 800ef60:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800ef64:	f1ba 0f01 	cmp.w	sl, #1
 800ef68:	dc01      	bgt.n	800ef6e <_printf_float+0x3b6>
 800ef6a:	07db      	lsls	r3, r3, #31
 800ef6c:	d536      	bpl.n	800efdc <_printf_float+0x424>
 800ef6e:	2301      	movs	r3, #1
 800ef70:	4642      	mov	r2, r8
 800ef72:	4631      	mov	r1, r6
 800ef74:	4628      	mov	r0, r5
 800ef76:	47b8      	blx	r7
 800ef78:	3001      	adds	r0, #1
 800ef7a:	f43f ae78 	beq.w	800ec6e <_printf_float+0xb6>
 800ef7e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ef82:	4631      	mov	r1, r6
 800ef84:	4628      	mov	r0, r5
 800ef86:	47b8      	blx	r7
 800ef88:	3001      	adds	r0, #1
 800ef8a:	f43f ae70 	beq.w	800ec6e <_printf_float+0xb6>
 800ef8e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ef92:	2200      	movs	r2, #0
 800ef94:	2300      	movs	r3, #0
 800ef96:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ef9a:	f7f1 fd95 	bl	8000ac8 <__aeabi_dcmpeq>
 800ef9e:	b9c0      	cbnz	r0, 800efd2 <_printf_float+0x41a>
 800efa0:	4653      	mov	r3, sl
 800efa2:	f108 0201 	add.w	r2, r8, #1
 800efa6:	4631      	mov	r1, r6
 800efa8:	4628      	mov	r0, r5
 800efaa:	47b8      	blx	r7
 800efac:	3001      	adds	r0, #1
 800efae:	d10c      	bne.n	800efca <_printf_float+0x412>
 800efb0:	e65d      	b.n	800ec6e <_printf_float+0xb6>
 800efb2:	2301      	movs	r3, #1
 800efb4:	465a      	mov	r2, fp
 800efb6:	4631      	mov	r1, r6
 800efb8:	4628      	mov	r0, r5
 800efba:	47b8      	blx	r7
 800efbc:	3001      	adds	r0, #1
 800efbe:	f43f ae56 	beq.w	800ec6e <_printf_float+0xb6>
 800efc2:	f108 0801 	add.w	r8, r8, #1
 800efc6:	45d0      	cmp	r8, sl
 800efc8:	dbf3      	blt.n	800efb2 <_printf_float+0x3fa>
 800efca:	464b      	mov	r3, r9
 800efcc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800efd0:	e6df      	b.n	800ed92 <_printf_float+0x1da>
 800efd2:	f04f 0800 	mov.w	r8, #0
 800efd6:	f104 0b1a 	add.w	fp, r4, #26
 800efda:	e7f4      	b.n	800efc6 <_printf_float+0x40e>
 800efdc:	2301      	movs	r3, #1
 800efde:	4642      	mov	r2, r8
 800efe0:	e7e1      	b.n	800efa6 <_printf_float+0x3ee>
 800efe2:	2301      	movs	r3, #1
 800efe4:	464a      	mov	r2, r9
 800efe6:	4631      	mov	r1, r6
 800efe8:	4628      	mov	r0, r5
 800efea:	47b8      	blx	r7
 800efec:	3001      	adds	r0, #1
 800efee:	f43f ae3e 	beq.w	800ec6e <_printf_float+0xb6>
 800eff2:	f108 0801 	add.w	r8, r8, #1
 800eff6:	68e3      	ldr	r3, [r4, #12]
 800eff8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800effa:	1a5b      	subs	r3, r3, r1
 800effc:	4543      	cmp	r3, r8
 800effe:	dcf0      	bgt.n	800efe2 <_printf_float+0x42a>
 800f000:	e6fc      	b.n	800edfc <_printf_float+0x244>
 800f002:	f04f 0800 	mov.w	r8, #0
 800f006:	f104 0919 	add.w	r9, r4, #25
 800f00a:	e7f4      	b.n	800eff6 <_printf_float+0x43e>

0800f00c <_printf_common>:
 800f00c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f010:	4616      	mov	r6, r2
 800f012:	4698      	mov	r8, r3
 800f014:	688a      	ldr	r2, [r1, #8]
 800f016:	690b      	ldr	r3, [r1, #16]
 800f018:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f01c:	4293      	cmp	r3, r2
 800f01e:	bfb8      	it	lt
 800f020:	4613      	movlt	r3, r2
 800f022:	6033      	str	r3, [r6, #0]
 800f024:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800f028:	4607      	mov	r7, r0
 800f02a:	460c      	mov	r4, r1
 800f02c:	b10a      	cbz	r2, 800f032 <_printf_common+0x26>
 800f02e:	3301      	adds	r3, #1
 800f030:	6033      	str	r3, [r6, #0]
 800f032:	6823      	ldr	r3, [r4, #0]
 800f034:	0699      	lsls	r1, r3, #26
 800f036:	bf42      	ittt	mi
 800f038:	6833      	ldrmi	r3, [r6, #0]
 800f03a:	3302      	addmi	r3, #2
 800f03c:	6033      	strmi	r3, [r6, #0]
 800f03e:	6825      	ldr	r5, [r4, #0]
 800f040:	f015 0506 	ands.w	r5, r5, #6
 800f044:	d106      	bne.n	800f054 <_printf_common+0x48>
 800f046:	f104 0a19 	add.w	sl, r4, #25
 800f04a:	68e3      	ldr	r3, [r4, #12]
 800f04c:	6832      	ldr	r2, [r6, #0]
 800f04e:	1a9b      	subs	r3, r3, r2
 800f050:	42ab      	cmp	r3, r5
 800f052:	dc26      	bgt.n	800f0a2 <_printf_common+0x96>
 800f054:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800f058:	6822      	ldr	r2, [r4, #0]
 800f05a:	3b00      	subs	r3, #0
 800f05c:	bf18      	it	ne
 800f05e:	2301      	movne	r3, #1
 800f060:	0692      	lsls	r2, r2, #26
 800f062:	d42b      	bmi.n	800f0bc <_printf_common+0xb0>
 800f064:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800f068:	4641      	mov	r1, r8
 800f06a:	4638      	mov	r0, r7
 800f06c:	47c8      	blx	r9
 800f06e:	3001      	adds	r0, #1
 800f070:	d01e      	beq.n	800f0b0 <_printf_common+0xa4>
 800f072:	6823      	ldr	r3, [r4, #0]
 800f074:	6922      	ldr	r2, [r4, #16]
 800f076:	f003 0306 	and.w	r3, r3, #6
 800f07a:	2b04      	cmp	r3, #4
 800f07c:	bf02      	ittt	eq
 800f07e:	68e5      	ldreq	r5, [r4, #12]
 800f080:	6833      	ldreq	r3, [r6, #0]
 800f082:	1aed      	subeq	r5, r5, r3
 800f084:	68a3      	ldr	r3, [r4, #8]
 800f086:	bf0c      	ite	eq
 800f088:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f08c:	2500      	movne	r5, #0
 800f08e:	4293      	cmp	r3, r2
 800f090:	bfc4      	itt	gt
 800f092:	1a9b      	subgt	r3, r3, r2
 800f094:	18ed      	addgt	r5, r5, r3
 800f096:	2600      	movs	r6, #0
 800f098:	341a      	adds	r4, #26
 800f09a:	42b5      	cmp	r5, r6
 800f09c:	d11a      	bne.n	800f0d4 <_printf_common+0xc8>
 800f09e:	2000      	movs	r0, #0
 800f0a0:	e008      	b.n	800f0b4 <_printf_common+0xa8>
 800f0a2:	2301      	movs	r3, #1
 800f0a4:	4652      	mov	r2, sl
 800f0a6:	4641      	mov	r1, r8
 800f0a8:	4638      	mov	r0, r7
 800f0aa:	47c8      	blx	r9
 800f0ac:	3001      	adds	r0, #1
 800f0ae:	d103      	bne.n	800f0b8 <_printf_common+0xac>
 800f0b0:	f04f 30ff 	mov.w	r0, #4294967295
 800f0b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f0b8:	3501      	adds	r5, #1
 800f0ba:	e7c6      	b.n	800f04a <_printf_common+0x3e>
 800f0bc:	18e1      	adds	r1, r4, r3
 800f0be:	1c5a      	adds	r2, r3, #1
 800f0c0:	2030      	movs	r0, #48	@ 0x30
 800f0c2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800f0c6:	4422      	add	r2, r4
 800f0c8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800f0cc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800f0d0:	3302      	adds	r3, #2
 800f0d2:	e7c7      	b.n	800f064 <_printf_common+0x58>
 800f0d4:	2301      	movs	r3, #1
 800f0d6:	4622      	mov	r2, r4
 800f0d8:	4641      	mov	r1, r8
 800f0da:	4638      	mov	r0, r7
 800f0dc:	47c8      	blx	r9
 800f0de:	3001      	adds	r0, #1
 800f0e0:	d0e6      	beq.n	800f0b0 <_printf_common+0xa4>
 800f0e2:	3601      	adds	r6, #1
 800f0e4:	e7d9      	b.n	800f09a <_printf_common+0x8e>
	...

0800f0e8 <_printf_i>:
 800f0e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f0ec:	7e0f      	ldrb	r7, [r1, #24]
 800f0ee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800f0f0:	2f78      	cmp	r7, #120	@ 0x78
 800f0f2:	4691      	mov	r9, r2
 800f0f4:	4680      	mov	r8, r0
 800f0f6:	460c      	mov	r4, r1
 800f0f8:	469a      	mov	sl, r3
 800f0fa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800f0fe:	d807      	bhi.n	800f110 <_printf_i+0x28>
 800f100:	2f62      	cmp	r7, #98	@ 0x62
 800f102:	d80a      	bhi.n	800f11a <_printf_i+0x32>
 800f104:	2f00      	cmp	r7, #0
 800f106:	f000 80d1 	beq.w	800f2ac <_printf_i+0x1c4>
 800f10a:	2f58      	cmp	r7, #88	@ 0x58
 800f10c:	f000 80b8 	beq.w	800f280 <_printf_i+0x198>
 800f110:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f114:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800f118:	e03a      	b.n	800f190 <_printf_i+0xa8>
 800f11a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800f11e:	2b15      	cmp	r3, #21
 800f120:	d8f6      	bhi.n	800f110 <_printf_i+0x28>
 800f122:	a101      	add	r1, pc, #4	@ (adr r1, 800f128 <_printf_i+0x40>)
 800f124:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f128:	0800f181 	.word	0x0800f181
 800f12c:	0800f195 	.word	0x0800f195
 800f130:	0800f111 	.word	0x0800f111
 800f134:	0800f111 	.word	0x0800f111
 800f138:	0800f111 	.word	0x0800f111
 800f13c:	0800f111 	.word	0x0800f111
 800f140:	0800f195 	.word	0x0800f195
 800f144:	0800f111 	.word	0x0800f111
 800f148:	0800f111 	.word	0x0800f111
 800f14c:	0800f111 	.word	0x0800f111
 800f150:	0800f111 	.word	0x0800f111
 800f154:	0800f293 	.word	0x0800f293
 800f158:	0800f1bf 	.word	0x0800f1bf
 800f15c:	0800f24d 	.word	0x0800f24d
 800f160:	0800f111 	.word	0x0800f111
 800f164:	0800f111 	.word	0x0800f111
 800f168:	0800f2b5 	.word	0x0800f2b5
 800f16c:	0800f111 	.word	0x0800f111
 800f170:	0800f1bf 	.word	0x0800f1bf
 800f174:	0800f111 	.word	0x0800f111
 800f178:	0800f111 	.word	0x0800f111
 800f17c:	0800f255 	.word	0x0800f255
 800f180:	6833      	ldr	r3, [r6, #0]
 800f182:	1d1a      	adds	r2, r3, #4
 800f184:	681b      	ldr	r3, [r3, #0]
 800f186:	6032      	str	r2, [r6, #0]
 800f188:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f18c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800f190:	2301      	movs	r3, #1
 800f192:	e09c      	b.n	800f2ce <_printf_i+0x1e6>
 800f194:	6833      	ldr	r3, [r6, #0]
 800f196:	6820      	ldr	r0, [r4, #0]
 800f198:	1d19      	adds	r1, r3, #4
 800f19a:	6031      	str	r1, [r6, #0]
 800f19c:	0606      	lsls	r6, r0, #24
 800f19e:	d501      	bpl.n	800f1a4 <_printf_i+0xbc>
 800f1a0:	681d      	ldr	r5, [r3, #0]
 800f1a2:	e003      	b.n	800f1ac <_printf_i+0xc4>
 800f1a4:	0645      	lsls	r5, r0, #25
 800f1a6:	d5fb      	bpl.n	800f1a0 <_printf_i+0xb8>
 800f1a8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800f1ac:	2d00      	cmp	r5, #0
 800f1ae:	da03      	bge.n	800f1b8 <_printf_i+0xd0>
 800f1b0:	232d      	movs	r3, #45	@ 0x2d
 800f1b2:	426d      	negs	r5, r5
 800f1b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f1b8:	4858      	ldr	r0, [pc, #352]	@ (800f31c <_printf_i+0x234>)
 800f1ba:	230a      	movs	r3, #10
 800f1bc:	e011      	b.n	800f1e2 <_printf_i+0xfa>
 800f1be:	6821      	ldr	r1, [r4, #0]
 800f1c0:	6833      	ldr	r3, [r6, #0]
 800f1c2:	0608      	lsls	r0, r1, #24
 800f1c4:	f853 5b04 	ldr.w	r5, [r3], #4
 800f1c8:	d402      	bmi.n	800f1d0 <_printf_i+0xe8>
 800f1ca:	0649      	lsls	r1, r1, #25
 800f1cc:	bf48      	it	mi
 800f1ce:	b2ad      	uxthmi	r5, r5
 800f1d0:	2f6f      	cmp	r7, #111	@ 0x6f
 800f1d2:	4852      	ldr	r0, [pc, #328]	@ (800f31c <_printf_i+0x234>)
 800f1d4:	6033      	str	r3, [r6, #0]
 800f1d6:	bf14      	ite	ne
 800f1d8:	230a      	movne	r3, #10
 800f1da:	2308      	moveq	r3, #8
 800f1dc:	2100      	movs	r1, #0
 800f1de:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800f1e2:	6866      	ldr	r6, [r4, #4]
 800f1e4:	60a6      	str	r6, [r4, #8]
 800f1e6:	2e00      	cmp	r6, #0
 800f1e8:	db05      	blt.n	800f1f6 <_printf_i+0x10e>
 800f1ea:	6821      	ldr	r1, [r4, #0]
 800f1ec:	432e      	orrs	r6, r5
 800f1ee:	f021 0104 	bic.w	r1, r1, #4
 800f1f2:	6021      	str	r1, [r4, #0]
 800f1f4:	d04b      	beq.n	800f28e <_printf_i+0x1a6>
 800f1f6:	4616      	mov	r6, r2
 800f1f8:	fbb5 f1f3 	udiv	r1, r5, r3
 800f1fc:	fb03 5711 	mls	r7, r3, r1, r5
 800f200:	5dc7      	ldrb	r7, [r0, r7]
 800f202:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f206:	462f      	mov	r7, r5
 800f208:	42bb      	cmp	r3, r7
 800f20a:	460d      	mov	r5, r1
 800f20c:	d9f4      	bls.n	800f1f8 <_printf_i+0x110>
 800f20e:	2b08      	cmp	r3, #8
 800f210:	d10b      	bne.n	800f22a <_printf_i+0x142>
 800f212:	6823      	ldr	r3, [r4, #0]
 800f214:	07df      	lsls	r7, r3, #31
 800f216:	d508      	bpl.n	800f22a <_printf_i+0x142>
 800f218:	6923      	ldr	r3, [r4, #16]
 800f21a:	6861      	ldr	r1, [r4, #4]
 800f21c:	4299      	cmp	r1, r3
 800f21e:	bfde      	ittt	le
 800f220:	2330      	movle	r3, #48	@ 0x30
 800f222:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f226:	f106 36ff 	addle.w	r6, r6, #4294967295
 800f22a:	1b92      	subs	r2, r2, r6
 800f22c:	6122      	str	r2, [r4, #16]
 800f22e:	f8cd a000 	str.w	sl, [sp]
 800f232:	464b      	mov	r3, r9
 800f234:	aa03      	add	r2, sp, #12
 800f236:	4621      	mov	r1, r4
 800f238:	4640      	mov	r0, r8
 800f23a:	f7ff fee7 	bl	800f00c <_printf_common>
 800f23e:	3001      	adds	r0, #1
 800f240:	d14a      	bne.n	800f2d8 <_printf_i+0x1f0>
 800f242:	f04f 30ff 	mov.w	r0, #4294967295
 800f246:	b004      	add	sp, #16
 800f248:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f24c:	6823      	ldr	r3, [r4, #0]
 800f24e:	f043 0320 	orr.w	r3, r3, #32
 800f252:	6023      	str	r3, [r4, #0]
 800f254:	4832      	ldr	r0, [pc, #200]	@ (800f320 <_printf_i+0x238>)
 800f256:	2778      	movs	r7, #120	@ 0x78
 800f258:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800f25c:	6823      	ldr	r3, [r4, #0]
 800f25e:	6831      	ldr	r1, [r6, #0]
 800f260:	061f      	lsls	r7, r3, #24
 800f262:	f851 5b04 	ldr.w	r5, [r1], #4
 800f266:	d402      	bmi.n	800f26e <_printf_i+0x186>
 800f268:	065f      	lsls	r7, r3, #25
 800f26a:	bf48      	it	mi
 800f26c:	b2ad      	uxthmi	r5, r5
 800f26e:	6031      	str	r1, [r6, #0]
 800f270:	07d9      	lsls	r1, r3, #31
 800f272:	bf44      	itt	mi
 800f274:	f043 0320 	orrmi.w	r3, r3, #32
 800f278:	6023      	strmi	r3, [r4, #0]
 800f27a:	b11d      	cbz	r5, 800f284 <_printf_i+0x19c>
 800f27c:	2310      	movs	r3, #16
 800f27e:	e7ad      	b.n	800f1dc <_printf_i+0xf4>
 800f280:	4826      	ldr	r0, [pc, #152]	@ (800f31c <_printf_i+0x234>)
 800f282:	e7e9      	b.n	800f258 <_printf_i+0x170>
 800f284:	6823      	ldr	r3, [r4, #0]
 800f286:	f023 0320 	bic.w	r3, r3, #32
 800f28a:	6023      	str	r3, [r4, #0]
 800f28c:	e7f6      	b.n	800f27c <_printf_i+0x194>
 800f28e:	4616      	mov	r6, r2
 800f290:	e7bd      	b.n	800f20e <_printf_i+0x126>
 800f292:	6833      	ldr	r3, [r6, #0]
 800f294:	6825      	ldr	r5, [r4, #0]
 800f296:	6961      	ldr	r1, [r4, #20]
 800f298:	1d18      	adds	r0, r3, #4
 800f29a:	6030      	str	r0, [r6, #0]
 800f29c:	062e      	lsls	r6, r5, #24
 800f29e:	681b      	ldr	r3, [r3, #0]
 800f2a0:	d501      	bpl.n	800f2a6 <_printf_i+0x1be>
 800f2a2:	6019      	str	r1, [r3, #0]
 800f2a4:	e002      	b.n	800f2ac <_printf_i+0x1c4>
 800f2a6:	0668      	lsls	r0, r5, #25
 800f2a8:	d5fb      	bpl.n	800f2a2 <_printf_i+0x1ba>
 800f2aa:	8019      	strh	r1, [r3, #0]
 800f2ac:	2300      	movs	r3, #0
 800f2ae:	6123      	str	r3, [r4, #16]
 800f2b0:	4616      	mov	r6, r2
 800f2b2:	e7bc      	b.n	800f22e <_printf_i+0x146>
 800f2b4:	6833      	ldr	r3, [r6, #0]
 800f2b6:	1d1a      	adds	r2, r3, #4
 800f2b8:	6032      	str	r2, [r6, #0]
 800f2ba:	681e      	ldr	r6, [r3, #0]
 800f2bc:	6862      	ldr	r2, [r4, #4]
 800f2be:	2100      	movs	r1, #0
 800f2c0:	4630      	mov	r0, r6
 800f2c2:	f7f0 ff85 	bl	80001d0 <memchr>
 800f2c6:	b108      	cbz	r0, 800f2cc <_printf_i+0x1e4>
 800f2c8:	1b80      	subs	r0, r0, r6
 800f2ca:	6060      	str	r0, [r4, #4]
 800f2cc:	6863      	ldr	r3, [r4, #4]
 800f2ce:	6123      	str	r3, [r4, #16]
 800f2d0:	2300      	movs	r3, #0
 800f2d2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f2d6:	e7aa      	b.n	800f22e <_printf_i+0x146>
 800f2d8:	6923      	ldr	r3, [r4, #16]
 800f2da:	4632      	mov	r2, r6
 800f2dc:	4649      	mov	r1, r9
 800f2de:	4640      	mov	r0, r8
 800f2e0:	47d0      	blx	sl
 800f2e2:	3001      	adds	r0, #1
 800f2e4:	d0ad      	beq.n	800f242 <_printf_i+0x15a>
 800f2e6:	6823      	ldr	r3, [r4, #0]
 800f2e8:	079b      	lsls	r3, r3, #30
 800f2ea:	d413      	bmi.n	800f314 <_printf_i+0x22c>
 800f2ec:	68e0      	ldr	r0, [r4, #12]
 800f2ee:	9b03      	ldr	r3, [sp, #12]
 800f2f0:	4298      	cmp	r0, r3
 800f2f2:	bfb8      	it	lt
 800f2f4:	4618      	movlt	r0, r3
 800f2f6:	e7a6      	b.n	800f246 <_printf_i+0x15e>
 800f2f8:	2301      	movs	r3, #1
 800f2fa:	4632      	mov	r2, r6
 800f2fc:	4649      	mov	r1, r9
 800f2fe:	4640      	mov	r0, r8
 800f300:	47d0      	blx	sl
 800f302:	3001      	adds	r0, #1
 800f304:	d09d      	beq.n	800f242 <_printf_i+0x15a>
 800f306:	3501      	adds	r5, #1
 800f308:	68e3      	ldr	r3, [r4, #12]
 800f30a:	9903      	ldr	r1, [sp, #12]
 800f30c:	1a5b      	subs	r3, r3, r1
 800f30e:	42ab      	cmp	r3, r5
 800f310:	dcf2      	bgt.n	800f2f8 <_printf_i+0x210>
 800f312:	e7eb      	b.n	800f2ec <_printf_i+0x204>
 800f314:	2500      	movs	r5, #0
 800f316:	f104 0619 	add.w	r6, r4, #25
 800f31a:	e7f5      	b.n	800f308 <_printf_i+0x220>
 800f31c:	08012dc3 	.word	0x08012dc3
 800f320:	08012dd4 	.word	0x08012dd4

0800f324 <std>:
 800f324:	2300      	movs	r3, #0
 800f326:	b510      	push	{r4, lr}
 800f328:	4604      	mov	r4, r0
 800f32a:	e9c0 3300 	strd	r3, r3, [r0]
 800f32e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f332:	6083      	str	r3, [r0, #8]
 800f334:	8181      	strh	r1, [r0, #12]
 800f336:	6643      	str	r3, [r0, #100]	@ 0x64
 800f338:	81c2      	strh	r2, [r0, #14]
 800f33a:	6183      	str	r3, [r0, #24]
 800f33c:	4619      	mov	r1, r3
 800f33e:	2208      	movs	r2, #8
 800f340:	305c      	adds	r0, #92	@ 0x5c
 800f342:	f000 f92a 	bl	800f59a <memset>
 800f346:	4b0d      	ldr	r3, [pc, #52]	@ (800f37c <std+0x58>)
 800f348:	6263      	str	r3, [r4, #36]	@ 0x24
 800f34a:	4b0d      	ldr	r3, [pc, #52]	@ (800f380 <std+0x5c>)
 800f34c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800f34e:	4b0d      	ldr	r3, [pc, #52]	@ (800f384 <std+0x60>)
 800f350:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800f352:	4b0d      	ldr	r3, [pc, #52]	@ (800f388 <std+0x64>)
 800f354:	6323      	str	r3, [r4, #48]	@ 0x30
 800f356:	4b0d      	ldr	r3, [pc, #52]	@ (800f38c <std+0x68>)
 800f358:	6224      	str	r4, [r4, #32]
 800f35a:	429c      	cmp	r4, r3
 800f35c:	d006      	beq.n	800f36c <std+0x48>
 800f35e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800f362:	4294      	cmp	r4, r2
 800f364:	d002      	beq.n	800f36c <std+0x48>
 800f366:	33d0      	adds	r3, #208	@ 0xd0
 800f368:	429c      	cmp	r4, r3
 800f36a:	d105      	bne.n	800f378 <std+0x54>
 800f36c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800f370:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f374:	f000 b9fa 	b.w	800f76c <__retarget_lock_init_recursive>
 800f378:	bd10      	pop	{r4, pc}
 800f37a:	bf00      	nop
 800f37c:	0800f515 	.word	0x0800f515
 800f380:	0800f537 	.word	0x0800f537
 800f384:	0800f56f 	.word	0x0800f56f
 800f388:	0800f593 	.word	0x0800f593
 800f38c:	200054cc 	.word	0x200054cc

0800f390 <stdio_exit_handler>:
 800f390:	4a02      	ldr	r2, [pc, #8]	@ (800f39c <stdio_exit_handler+0xc>)
 800f392:	4903      	ldr	r1, [pc, #12]	@ (800f3a0 <stdio_exit_handler+0x10>)
 800f394:	4803      	ldr	r0, [pc, #12]	@ (800f3a4 <stdio_exit_handler+0x14>)
 800f396:	f000 b869 	b.w	800f46c <_fwalk_sglue>
 800f39a:	bf00      	nop
 800f39c:	20000020 	.word	0x20000020
 800f3a0:	080110ed 	.word	0x080110ed
 800f3a4:	20000030 	.word	0x20000030

0800f3a8 <cleanup_stdio>:
 800f3a8:	6841      	ldr	r1, [r0, #4]
 800f3aa:	4b0c      	ldr	r3, [pc, #48]	@ (800f3dc <cleanup_stdio+0x34>)
 800f3ac:	4299      	cmp	r1, r3
 800f3ae:	b510      	push	{r4, lr}
 800f3b0:	4604      	mov	r4, r0
 800f3b2:	d001      	beq.n	800f3b8 <cleanup_stdio+0x10>
 800f3b4:	f001 fe9a 	bl	80110ec <_fflush_r>
 800f3b8:	68a1      	ldr	r1, [r4, #8]
 800f3ba:	4b09      	ldr	r3, [pc, #36]	@ (800f3e0 <cleanup_stdio+0x38>)
 800f3bc:	4299      	cmp	r1, r3
 800f3be:	d002      	beq.n	800f3c6 <cleanup_stdio+0x1e>
 800f3c0:	4620      	mov	r0, r4
 800f3c2:	f001 fe93 	bl	80110ec <_fflush_r>
 800f3c6:	68e1      	ldr	r1, [r4, #12]
 800f3c8:	4b06      	ldr	r3, [pc, #24]	@ (800f3e4 <cleanup_stdio+0x3c>)
 800f3ca:	4299      	cmp	r1, r3
 800f3cc:	d004      	beq.n	800f3d8 <cleanup_stdio+0x30>
 800f3ce:	4620      	mov	r0, r4
 800f3d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f3d4:	f001 be8a 	b.w	80110ec <_fflush_r>
 800f3d8:	bd10      	pop	{r4, pc}
 800f3da:	bf00      	nop
 800f3dc:	200054cc 	.word	0x200054cc
 800f3e0:	20005534 	.word	0x20005534
 800f3e4:	2000559c 	.word	0x2000559c

0800f3e8 <global_stdio_init.part.0>:
 800f3e8:	b510      	push	{r4, lr}
 800f3ea:	4b0b      	ldr	r3, [pc, #44]	@ (800f418 <global_stdio_init.part.0+0x30>)
 800f3ec:	4c0b      	ldr	r4, [pc, #44]	@ (800f41c <global_stdio_init.part.0+0x34>)
 800f3ee:	4a0c      	ldr	r2, [pc, #48]	@ (800f420 <global_stdio_init.part.0+0x38>)
 800f3f0:	601a      	str	r2, [r3, #0]
 800f3f2:	4620      	mov	r0, r4
 800f3f4:	2200      	movs	r2, #0
 800f3f6:	2104      	movs	r1, #4
 800f3f8:	f7ff ff94 	bl	800f324 <std>
 800f3fc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800f400:	2201      	movs	r2, #1
 800f402:	2109      	movs	r1, #9
 800f404:	f7ff ff8e 	bl	800f324 <std>
 800f408:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800f40c:	2202      	movs	r2, #2
 800f40e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f412:	2112      	movs	r1, #18
 800f414:	f7ff bf86 	b.w	800f324 <std>
 800f418:	20005604 	.word	0x20005604
 800f41c:	200054cc 	.word	0x200054cc
 800f420:	0800f391 	.word	0x0800f391

0800f424 <__sfp_lock_acquire>:
 800f424:	4801      	ldr	r0, [pc, #4]	@ (800f42c <__sfp_lock_acquire+0x8>)
 800f426:	f000 b9a2 	b.w	800f76e <__retarget_lock_acquire_recursive>
 800f42a:	bf00      	nop
 800f42c:	2000560d 	.word	0x2000560d

0800f430 <__sfp_lock_release>:
 800f430:	4801      	ldr	r0, [pc, #4]	@ (800f438 <__sfp_lock_release+0x8>)
 800f432:	f000 b99d 	b.w	800f770 <__retarget_lock_release_recursive>
 800f436:	bf00      	nop
 800f438:	2000560d 	.word	0x2000560d

0800f43c <__sinit>:
 800f43c:	b510      	push	{r4, lr}
 800f43e:	4604      	mov	r4, r0
 800f440:	f7ff fff0 	bl	800f424 <__sfp_lock_acquire>
 800f444:	6a23      	ldr	r3, [r4, #32]
 800f446:	b11b      	cbz	r3, 800f450 <__sinit+0x14>
 800f448:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f44c:	f7ff bff0 	b.w	800f430 <__sfp_lock_release>
 800f450:	4b04      	ldr	r3, [pc, #16]	@ (800f464 <__sinit+0x28>)
 800f452:	6223      	str	r3, [r4, #32]
 800f454:	4b04      	ldr	r3, [pc, #16]	@ (800f468 <__sinit+0x2c>)
 800f456:	681b      	ldr	r3, [r3, #0]
 800f458:	2b00      	cmp	r3, #0
 800f45a:	d1f5      	bne.n	800f448 <__sinit+0xc>
 800f45c:	f7ff ffc4 	bl	800f3e8 <global_stdio_init.part.0>
 800f460:	e7f2      	b.n	800f448 <__sinit+0xc>
 800f462:	bf00      	nop
 800f464:	0800f3a9 	.word	0x0800f3a9
 800f468:	20005604 	.word	0x20005604

0800f46c <_fwalk_sglue>:
 800f46c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f470:	4607      	mov	r7, r0
 800f472:	4688      	mov	r8, r1
 800f474:	4614      	mov	r4, r2
 800f476:	2600      	movs	r6, #0
 800f478:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f47c:	f1b9 0901 	subs.w	r9, r9, #1
 800f480:	d505      	bpl.n	800f48e <_fwalk_sglue+0x22>
 800f482:	6824      	ldr	r4, [r4, #0]
 800f484:	2c00      	cmp	r4, #0
 800f486:	d1f7      	bne.n	800f478 <_fwalk_sglue+0xc>
 800f488:	4630      	mov	r0, r6
 800f48a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f48e:	89ab      	ldrh	r3, [r5, #12]
 800f490:	2b01      	cmp	r3, #1
 800f492:	d907      	bls.n	800f4a4 <_fwalk_sglue+0x38>
 800f494:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f498:	3301      	adds	r3, #1
 800f49a:	d003      	beq.n	800f4a4 <_fwalk_sglue+0x38>
 800f49c:	4629      	mov	r1, r5
 800f49e:	4638      	mov	r0, r7
 800f4a0:	47c0      	blx	r8
 800f4a2:	4306      	orrs	r6, r0
 800f4a4:	3568      	adds	r5, #104	@ 0x68
 800f4a6:	e7e9      	b.n	800f47c <_fwalk_sglue+0x10>

0800f4a8 <sniprintf>:
 800f4a8:	b40c      	push	{r2, r3}
 800f4aa:	b530      	push	{r4, r5, lr}
 800f4ac:	4b18      	ldr	r3, [pc, #96]	@ (800f510 <sniprintf+0x68>)
 800f4ae:	1e0c      	subs	r4, r1, #0
 800f4b0:	681d      	ldr	r5, [r3, #0]
 800f4b2:	b09d      	sub	sp, #116	@ 0x74
 800f4b4:	da08      	bge.n	800f4c8 <sniprintf+0x20>
 800f4b6:	238b      	movs	r3, #139	@ 0x8b
 800f4b8:	602b      	str	r3, [r5, #0]
 800f4ba:	f04f 30ff 	mov.w	r0, #4294967295
 800f4be:	b01d      	add	sp, #116	@ 0x74
 800f4c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f4c4:	b002      	add	sp, #8
 800f4c6:	4770      	bx	lr
 800f4c8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800f4cc:	f8ad 3014 	strh.w	r3, [sp, #20]
 800f4d0:	f04f 0300 	mov.w	r3, #0
 800f4d4:	931b      	str	r3, [sp, #108]	@ 0x6c
 800f4d6:	bf14      	ite	ne
 800f4d8:	f104 33ff 	addne.w	r3, r4, #4294967295
 800f4dc:	4623      	moveq	r3, r4
 800f4de:	9304      	str	r3, [sp, #16]
 800f4e0:	9307      	str	r3, [sp, #28]
 800f4e2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800f4e6:	9002      	str	r0, [sp, #8]
 800f4e8:	9006      	str	r0, [sp, #24]
 800f4ea:	f8ad 3016 	strh.w	r3, [sp, #22]
 800f4ee:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800f4f0:	ab21      	add	r3, sp, #132	@ 0x84
 800f4f2:	a902      	add	r1, sp, #8
 800f4f4:	4628      	mov	r0, r5
 800f4f6:	9301      	str	r3, [sp, #4]
 800f4f8:	f001 fc78 	bl	8010dec <_svfiprintf_r>
 800f4fc:	1c43      	adds	r3, r0, #1
 800f4fe:	bfbc      	itt	lt
 800f500:	238b      	movlt	r3, #139	@ 0x8b
 800f502:	602b      	strlt	r3, [r5, #0]
 800f504:	2c00      	cmp	r4, #0
 800f506:	d0da      	beq.n	800f4be <sniprintf+0x16>
 800f508:	9b02      	ldr	r3, [sp, #8]
 800f50a:	2200      	movs	r2, #0
 800f50c:	701a      	strb	r2, [r3, #0]
 800f50e:	e7d6      	b.n	800f4be <sniprintf+0x16>
 800f510:	2000002c 	.word	0x2000002c

0800f514 <__sread>:
 800f514:	b510      	push	{r4, lr}
 800f516:	460c      	mov	r4, r1
 800f518:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f51c:	f000 f8d8 	bl	800f6d0 <_read_r>
 800f520:	2800      	cmp	r0, #0
 800f522:	bfab      	itete	ge
 800f524:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800f526:	89a3      	ldrhlt	r3, [r4, #12]
 800f528:	181b      	addge	r3, r3, r0
 800f52a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800f52e:	bfac      	ite	ge
 800f530:	6563      	strge	r3, [r4, #84]	@ 0x54
 800f532:	81a3      	strhlt	r3, [r4, #12]
 800f534:	bd10      	pop	{r4, pc}

0800f536 <__swrite>:
 800f536:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f53a:	461f      	mov	r7, r3
 800f53c:	898b      	ldrh	r3, [r1, #12]
 800f53e:	05db      	lsls	r3, r3, #23
 800f540:	4605      	mov	r5, r0
 800f542:	460c      	mov	r4, r1
 800f544:	4616      	mov	r6, r2
 800f546:	d505      	bpl.n	800f554 <__swrite+0x1e>
 800f548:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f54c:	2302      	movs	r3, #2
 800f54e:	2200      	movs	r2, #0
 800f550:	f000 f8ac 	bl	800f6ac <_lseek_r>
 800f554:	89a3      	ldrh	r3, [r4, #12]
 800f556:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f55a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800f55e:	81a3      	strh	r3, [r4, #12]
 800f560:	4632      	mov	r2, r6
 800f562:	463b      	mov	r3, r7
 800f564:	4628      	mov	r0, r5
 800f566:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f56a:	f000 b8c3 	b.w	800f6f4 <_write_r>

0800f56e <__sseek>:
 800f56e:	b510      	push	{r4, lr}
 800f570:	460c      	mov	r4, r1
 800f572:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f576:	f000 f899 	bl	800f6ac <_lseek_r>
 800f57a:	1c43      	adds	r3, r0, #1
 800f57c:	89a3      	ldrh	r3, [r4, #12]
 800f57e:	bf15      	itete	ne
 800f580:	6560      	strne	r0, [r4, #84]	@ 0x54
 800f582:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800f586:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800f58a:	81a3      	strheq	r3, [r4, #12]
 800f58c:	bf18      	it	ne
 800f58e:	81a3      	strhne	r3, [r4, #12]
 800f590:	bd10      	pop	{r4, pc}

0800f592 <__sclose>:
 800f592:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f596:	f000 b81b 	b.w	800f5d0 <_close_r>

0800f59a <memset>:
 800f59a:	4402      	add	r2, r0
 800f59c:	4603      	mov	r3, r0
 800f59e:	4293      	cmp	r3, r2
 800f5a0:	d100      	bne.n	800f5a4 <memset+0xa>
 800f5a2:	4770      	bx	lr
 800f5a4:	f803 1b01 	strb.w	r1, [r3], #1
 800f5a8:	e7f9      	b.n	800f59e <memset+0x4>

0800f5aa <strcat>:
 800f5aa:	b510      	push	{r4, lr}
 800f5ac:	4602      	mov	r2, r0
 800f5ae:	7814      	ldrb	r4, [r2, #0]
 800f5b0:	4613      	mov	r3, r2
 800f5b2:	3201      	adds	r2, #1
 800f5b4:	2c00      	cmp	r4, #0
 800f5b6:	d1fa      	bne.n	800f5ae <strcat+0x4>
 800f5b8:	3b01      	subs	r3, #1
 800f5ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f5be:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f5c2:	2a00      	cmp	r2, #0
 800f5c4:	d1f9      	bne.n	800f5ba <strcat+0x10>
 800f5c6:	bd10      	pop	{r4, pc}

0800f5c8 <_localeconv_r>:
 800f5c8:	4800      	ldr	r0, [pc, #0]	@ (800f5cc <_localeconv_r+0x4>)
 800f5ca:	4770      	bx	lr
 800f5cc:	2000016c 	.word	0x2000016c

0800f5d0 <_close_r>:
 800f5d0:	b538      	push	{r3, r4, r5, lr}
 800f5d2:	4d06      	ldr	r5, [pc, #24]	@ (800f5ec <_close_r+0x1c>)
 800f5d4:	2300      	movs	r3, #0
 800f5d6:	4604      	mov	r4, r0
 800f5d8:	4608      	mov	r0, r1
 800f5da:	602b      	str	r3, [r5, #0]
 800f5dc:	f7f6 f924 	bl	8005828 <_close>
 800f5e0:	1c43      	adds	r3, r0, #1
 800f5e2:	d102      	bne.n	800f5ea <_close_r+0x1a>
 800f5e4:	682b      	ldr	r3, [r5, #0]
 800f5e6:	b103      	cbz	r3, 800f5ea <_close_r+0x1a>
 800f5e8:	6023      	str	r3, [r4, #0]
 800f5ea:	bd38      	pop	{r3, r4, r5, pc}
 800f5ec:	20005608 	.word	0x20005608

0800f5f0 <_reclaim_reent>:
 800f5f0:	4b2d      	ldr	r3, [pc, #180]	@ (800f6a8 <_reclaim_reent+0xb8>)
 800f5f2:	681b      	ldr	r3, [r3, #0]
 800f5f4:	4283      	cmp	r3, r0
 800f5f6:	b570      	push	{r4, r5, r6, lr}
 800f5f8:	4604      	mov	r4, r0
 800f5fa:	d053      	beq.n	800f6a4 <_reclaim_reent+0xb4>
 800f5fc:	69c3      	ldr	r3, [r0, #28]
 800f5fe:	b31b      	cbz	r3, 800f648 <_reclaim_reent+0x58>
 800f600:	68db      	ldr	r3, [r3, #12]
 800f602:	b163      	cbz	r3, 800f61e <_reclaim_reent+0x2e>
 800f604:	2500      	movs	r5, #0
 800f606:	69e3      	ldr	r3, [r4, #28]
 800f608:	68db      	ldr	r3, [r3, #12]
 800f60a:	5959      	ldr	r1, [r3, r5]
 800f60c:	b9b1      	cbnz	r1, 800f63c <_reclaim_reent+0x4c>
 800f60e:	3504      	adds	r5, #4
 800f610:	2d80      	cmp	r5, #128	@ 0x80
 800f612:	d1f8      	bne.n	800f606 <_reclaim_reent+0x16>
 800f614:	69e3      	ldr	r3, [r4, #28]
 800f616:	4620      	mov	r0, r4
 800f618:	68d9      	ldr	r1, [r3, #12]
 800f61a:	f000 ff11 	bl	8010440 <_free_r>
 800f61e:	69e3      	ldr	r3, [r4, #28]
 800f620:	6819      	ldr	r1, [r3, #0]
 800f622:	b111      	cbz	r1, 800f62a <_reclaim_reent+0x3a>
 800f624:	4620      	mov	r0, r4
 800f626:	f000 ff0b 	bl	8010440 <_free_r>
 800f62a:	69e3      	ldr	r3, [r4, #28]
 800f62c:	689d      	ldr	r5, [r3, #8]
 800f62e:	b15d      	cbz	r5, 800f648 <_reclaim_reent+0x58>
 800f630:	4629      	mov	r1, r5
 800f632:	4620      	mov	r0, r4
 800f634:	682d      	ldr	r5, [r5, #0]
 800f636:	f000 ff03 	bl	8010440 <_free_r>
 800f63a:	e7f8      	b.n	800f62e <_reclaim_reent+0x3e>
 800f63c:	680e      	ldr	r6, [r1, #0]
 800f63e:	4620      	mov	r0, r4
 800f640:	f000 fefe 	bl	8010440 <_free_r>
 800f644:	4631      	mov	r1, r6
 800f646:	e7e1      	b.n	800f60c <_reclaim_reent+0x1c>
 800f648:	6961      	ldr	r1, [r4, #20]
 800f64a:	b111      	cbz	r1, 800f652 <_reclaim_reent+0x62>
 800f64c:	4620      	mov	r0, r4
 800f64e:	f000 fef7 	bl	8010440 <_free_r>
 800f652:	69e1      	ldr	r1, [r4, #28]
 800f654:	b111      	cbz	r1, 800f65c <_reclaim_reent+0x6c>
 800f656:	4620      	mov	r0, r4
 800f658:	f000 fef2 	bl	8010440 <_free_r>
 800f65c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800f65e:	b111      	cbz	r1, 800f666 <_reclaim_reent+0x76>
 800f660:	4620      	mov	r0, r4
 800f662:	f000 feed 	bl	8010440 <_free_r>
 800f666:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f668:	b111      	cbz	r1, 800f670 <_reclaim_reent+0x80>
 800f66a:	4620      	mov	r0, r4
 800f66c:	f000 fee8 	bl	8010440 <_free_r>
 800f670:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800f672:	b111      	cbz	r1, 800f67a <_reclaim_reent+0x8a>
 800f674:	4620      	mov	r0, r4
 800f676:	f000 fee3 	bl	8010440 <_free_r>
 800f67a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800f67c:	b111      	cbz	r1, 800f684 <_reclaim_reent+0x94>
 800f67e:	4620      	mov	r0, r4
 800f680:	f000 fede 	bl	8010440 <_free_r>
 800f684:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800f686:	b111      	cbz	r1, 800f68e <_reclaim_reent+0x9e>
 800f688:	4620      	mov	r0, r4
 800f68a:	f000 fed9 	bl	8010440 <_free_r>
 800f68e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800f690:	b111      	cbz	r1, 800f698 <_reclaim_reent+0xa8>
 800f692:	4620      	mov	r0, r4
 800f694:	f000 fed4 	bl	8010440 <_free_r>
 800f698:	6a23      	ldr	r3, [r4, #32]
 800f69a:	b11b      	cbz	r3, 800f6a4 <_reclaim_reent+0xb4>
 800f69c:	4620      	mov	r0, r4
 800f69e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f6a2:	4718      	bx	r3
 800f6a4:	bd70      	pop	{r4, r5, r6, pc}
 800f6a6:	bf00      	nop
 800f6a8:	2000002c 	.word	0x2000002c

0800f6ac <_lseek_r>:
 800f6ac:	b538      	push	{r3, r4, r5, lr}
 800f6ae:	4d07      	ldr	r5, [pc, #28]	@ (800f6cc <_lseek_r+0x20>)
 800f6b0:	4604      	mov	r4, r0
 800f6b2:	4608      	mov	r0, r1
 800f6b4:	4611      	mov	r1, r2
 800f6b6:	2200      	movs	r2, #0
 800f6b8:	602a      	str	r2, [r5, #0]
 800f6ba:	461a      	mov	r2, r3
 800f6bc:	f7f6 f8db 	bl	8005876 <_lseek>
 800f6c0:	1c43      	adds	r3, r0, #1
 800f6c2:	d102      	bne.n	800f6ca <_lseek_r+0x1e>
 800f6c4:	682b      	ldr	r3, [r5, #0]
 800f6c6:	b103      	cbz	r3, 800f6ca <_lseek_r+0x1e>
 800f6c8:	6023      	str	r3, [r4, #0]
 800f6ca:	bd38      	pop	{r3, r4, r5, pc}
 800f6cc:	20005608 	.word	0x20005608

0800f6d0 <_read_r>:
 800f6d0:	b538      	push	{r3, r4, r5, lr}
 800f6d2:	4d07      	ldr	r5, [pc, #28]	@ (800f6f0 <_read_r+0x20>)
 800f6d4:	4604      	mov	r4, r0
 800f6d6:	4608      	mov	r0, r1
 800f6d8:	4611      	mov	r1, r2
 800f6da:	2200      	movs	r2, #0
 800f6dc:	602a      	str	r2, [r5, #0]
 800f6de:	461a      	mov	r2, r3
 800f6e0:	f7f6 f869 	bl	80057b6 <_read>
 800f6e4:	1c43      	adds	r3, r0, #1
 800f6e6:	d102      	bne.n	800f6ee <_read_r+0x1e>
 800f6e8:	682b      	ldr	r3, [r5, #0]
 800f6ea:	b103      	cbz	r3, 800f6ee <_read_r+0x1e>
 800f6ec:	6023      	str	r3, [r4, #0]
 800f6ee:	bd38      	pop	{r3, r4, r5, pc}
 800f6f0:	20005608 	.word	0x20005608

0800f6f4 <_write_r>:
 800f6f4:	b538      	push	{r3, r4, r5, lr}
 800f6f6:	4d07      	ldr	r5, [pc, #28]	@ (800f714 <_write_r+0x20>)
 800f6f8:	4604      	mov	r4, r0
 800f6fa:	4608      	mov	r0, r1
 800f6fc:	4611      	mov	r1, r2
 800f6fe:	2200      	movs	r2, #0
 800f700:	602a      	str	r2, [r5, #0]
 800f702:	461a      	mov	r2, r3
 800f704:	f7f6 f874 	bl	80057f0 <_write>
 800f708:	1c43      	adds	r3, r0, #1
 800f70a:	d102      	bne.n	800f712 <_write_r+0x1e>
 800f70c:	682b      	ldr	r3, [r5, #0]
 800f70e:	b103      	cbz	r3, 800f712 <_write_r+0x1e>
 800f710:	6023      	str	r3, [r4, #0]
 800f712:	bd38      	pop	{r3, r4, r5, pc}
 800f714:	20005608 	.word	0x20005608

0800f718 <__errno>:
 800f718:	4b01      	ldr	r3, [pc, #4]	@ (800f720 <__errno+0x8>)
 800f71a:	6818      	ldr	r0, [r3, #0]
 800f71c:	4770      	bx	lr
 800f71e:	bf00      	nop
 800f720:	2000002c 	.word	0x2000002c

0800f724 <__libc_init_array>:
 800f724:	b570      	push	{r4, r5, r6, lr}
 800f726:	4d0d      	ldr	r5, [pc, #52]	@ (800f75c <__libc_init_array+0x38>)
 800f728:	4c0d      	ldr	r4, [pc, #52]	@ (800f760 <__libc_init_array+0x3c>)
 800f72a:	1b64      	subs	r4, r4, r5
 800f72c:	10a4      	asrs	r4, r4, #2
 800f72e:	2600      	movs	r6, #0
 800f730:	42a6      	cmp	r6, r4
 800f732:	d109      	bne.n	800f748 <__libc_init_array+0x24>
 800f734:	4d0b      	ldr	r5, [pc, #44]	@ (800f764 <__libc_init_array+0x40>)
 800f736:	4c0c      	ldr	r4, [pc, #48]	@ (800f768 <__libc_init_array+0x44>)
 800f738:	f002 fc3e 	bl	8011fb8 <_init>
 800f73c:	1b64      	subs	r4, r4, r5
 800f73e:	10a4      	asrs	r4, r4, #2
 800f740:	2600      	movs	r6, #0
 800f742:	42a6      	cmp	r6, r4
 800f744:	d105      	bne.n	800f752 <__libc_init_array+0x2e>
 800f746:	bd70      	pop	{r4, r5, r6, pc}
 800f748:	f855 3b04 	ldr.w	r3, [r5], #4
 800f74c:	4798      	blx	r3
 800f74e:	3601      	adds	r6, #1
 800f750:	e7ee      	b.n	800f730 <__libc_init_array+0xc>
 800f752:	f855 3b04 	ldr.w	r3, [r5], #4
 800f756:	4798      	blx	r3
 800f758:	3601      	adds	r6, #1
 800f75a:	e7f2      	b.n	800f742 <__libc_init_array+0x1e>
 800f75c:	08013078 	.word	0x08013078
 800f760:	08013078 	.word	0x08013078
 800f764:	08013078 	.word	0x08013078
 800f768:	0801307c 	.word	0x0801307c

0800f76c <__retarget_lock_init_recursive>:
 800f76c:	4770      	bx	lr

0800f76e <__retarget_lock_acquire_recursive>:
 800f76e:	4770      	bx	lr

0800f770 <__retarget_lock_release_recursive>:
 800f770:	4770      	bx	lr

0800f772 <memcpy>:
 800f772:	440a      	add	r2, r1
 800f774:	4291      	cmp	r1, r2
 800f776:	f100 33ff 	add.w	r3, r0, #4294967295
 800f77a:	d100      	bne.n	800f77e <memcpy+0xc>
 800f77c:	4770      	bx	lr
 800f77e:	b510      	push	{r4, lr}
 800f780:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f784:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f788:	4291      	cmp	r1, r2
 800f78a:	d1f9      	bne.n	800f780 <memcpy+0xe>
 800f78c:	bd10      	pop	{r4, pc}

0800f78e <quorem>:
 800f78e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f792:	6903      	ldr	r3, [r0, #16]
 800f794:	690c      	ldr	r4, [r1, #16]
 800f796:	42a3      	cmp	r3, r4
 800f798:	4607      	mov	r7, r0
 800f79a:	db7e      	blt.n	800f89a <quorem+0x10c>
 800f79c:	3c01      	subs	r4, #1
 800f79e:	f101 0814 	add.w	r8, r1, #20
 800f7a2:	00a3      	lsls	r3, r4, #2
 800f7a4:	f100 0514 	add.w	r5, r0, #20
 800f7a8:	9300      	str	r3, [sp, #0]
 800f7aa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f7ae:	9301      	str	r3, [sp, #4]
 800f7b0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f7b4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f7b8:	3301      	adds	r3, #1
 800f7ba:	429a      	cmp	r2, r3
 800f7bc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f7c0:	fbb2 f6f3 	udiv	r6, r2, r3
 800f7c4:	d32e      	bcc.n	800f824 <quorem+0x96>
 800f7c6:	f04f 0a00 	mov.w	sl, #0
 800f7ca:	46c4      	mov	ip, r8
 800f7cc:	46ae      	mov	lr, r5
 800f7ce:	46d3      	mov	fp, sl
 800f7d0:	f85c 3b04 	ldr.w	r3, [ip], #4
 800f7d4:	b298      	uxth	r0, r3
 800f7d6:	fb06 a000 	mla	r0, r6, r0, sl
 800f7da:	0c02      	lsrs	r2, r0, #16
 800f7dc:	0c1b      	lsrs	r3, r3, #16
 800f7de:	fb06 2303 	mla	r3, r6, r3, r2
 800f7e2:	f8de 2000 	ldr.w	r2, [lr]
 800f7e6:	b280      	uxth	r0, r0
 800f7e8:	b292      	uxth	r2, r2
 800f7ea:	1a12      	subs	r2, r2, r0
 800f7ec:	445a      	add	r2, fp
 800f7ee:	f8de 0000 	ldr.w	r0, [lr]
 800f7f2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f7f6:	b29b      	uxth	r3, r3
 800f7f8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800f7fc:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800f800:	b292      	uxth	r2, r2
 800f802:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800f806:	45e1      	cmp	r9, ip
 800f808:	f84e 2b04 	str.w	r2, [lr], #4
 800f80c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800f810:	d2de      	bcs.n	800f7d0 <quorem+0x42>
 800f812:	9b00      	ldr	r3, [sp, #0]
 800f814:	58eb      	ldr	r3, [r5, r3]
 800f816:	b92b      	cbnz	r3, 800f824 <quorem+0x96>
 800f818:	9b01      	ldr	r3, [sp, #4]
 800f81a:	3b04      	subs	r3, #4
 800f81c:	429d      	cmp	r5, r3
 800f81e:	461a      	mov	r2, r3
 800f820:	d32f      	bcc.n	800f882 <quorem+0xf4>
 800f822:	613c      	str	r4, [r7, #16]
 800f824:	4638      	mov	r0, r7
 800f826:	f001 f97d 	bl	8010b24 <__mcmp>
 800f82a:	2800      	cmp	r0, #0
 800f82c:	db25      	blt.n	800f87a <quorem+0xec>
 800f82e:	4629      	mov	r1, r5
 800f830:	2000      	movs	r0, #0
 800f832:	f858 2b04 	ldr.w	r2, [r8], #4
 800f836:	f8d1 c000 	ldr.w	ip, [r1]
 800f83a:	fa1f fe82 	uxth.w	lr, r2
 800f83e:	fa1f f38c 	uxth.w	r3, ip
 800f842:	eba3 030e 	sub.w	r3, r3, lr
 800f846:	4403      	add	r3, r0
 800f848:	0c12      	lsrs	r2, r2, #16
 800f84a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800f84e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800f852:	b29b      	uxth	r3, r3
 800f854:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f858:	45c1      	cmp	r9, r8
 800f85a:	f841 3b04 	str.w	r3, [r1], #4
 800f85e:	ea4f 4022 	mov.w	r0, r2, asr #16
 800f862:	d2e6      	bcs.n	800f832 <quorem+0xa4>
 800f864:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f868:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f86c:	b922      	cbnz	r2, 800f878 <quorem+0xea>
 800f86e:	3b04      	subs	r3, #4
 800f870:	429d      	cmp	r5, r3
 800f872:	461a      	mov	r2, r3
 800f874:	d30b      	bcc.n	800f88e <quorem+0x100>
 800f876:	613c      	str	r4, [r7, #16]
 800f878:	3601      	adds	r6, #1
 800f87a:	4630      	mov	r0, r6
 800f87c:	b003      	add	sp, #12
 800f87e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f882:	6812      	ldr	r2, [r2, #0]
 800f884:	3b04      	subs	r3, #4
 800f886:	2a00      	cmp	r2, #0
 800f888:	d1cb      	bne.n	800f822 <quorem+0x94>
 800f88a:	3c01      	subs	r4, #1
 800f88c:	e7c6      	b.n	800f81c <quorem+0x8e>
 800f88e:	6812      	ldr	r2, [r2, #0]
 800f890:	3b04      	subs	r3, #4
 800f892:	2a00      	cmp	r2, #0
 800f894:	d1ef      	bne.n	800f876 <quorem+0xe8>
 800f896:	3c01      	subs	r4, #1
 800f898:	e7ea      	b.n	800f870 <quorem+0xe2>
 800f89a:	2000      	movs	r0, #0
 800f89c:	e7ee      	b.n	800f87c <quorem+0xee>
	...

0800f8a0 <_dtoa_r>:
 800f8a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8a4:	69c7      	ldr	r7, [r0, #28]
 800f8a6:	b097      	sub	sp, #92	@ 0x5c
 800f8a8:	ed8d 0b04 	vstr	d0, [sp, #16]
 800f8ac:	ec55 4b10 	vmov	r4, r5, d0
 800f8b0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800f8b2:	9107      	str	r1, [sp, #28]
 800f8b4:	4681      	mov	r9, r0
 800f8b6:	920c      	str	r2, [sp, #48]	@ 0x30
 800f8b8:	9311      	str	r3, [sp, #68]	@ 0x44
 800f8ba:	b97f      	cbnz	r7, 800f8dc <_dtoa_r+0x3c>
 800f8bc:	2010      	movs	r0, #16
 800f8be:	f000 fe09 	bl	80104d4 <malloc>
 800f8c2:	4602      	mov	r2, r0
 800f8c4:	f8c9 001c 	str.w	r0, [r9, #28]
 800f8c8:	b920      	cbnz	r0, 800f8d4 <_dtoa_r+0x34>
 800f8ca:	4ba9      	ldr	r3, [pc, #676]	@ (800fb70 <_dtoa_r+0x2d0>)
 800f8cc:	21ef      	movs	r1, #239	@ 0xef
 800f8ce:	48a9      	ldr	r0, [pc, #676]	@ (800fb74 <_dtoa_r+0x2d4>)
 800f8d0:	f001 fc5e 	bl	8011190 <__assert_func>
 800f8d4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800f8d8:	6007      	str	r7, [r0, #0]
 800f8da:	60c7      	str	r7, [r0, #12]
 800f8dc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800f8e0:	6819      	ldr	r1, [r3, #0]
 800f8e2:	b159      	cbz	r1, 800f8fc <_dtoa_r+0x5c>
 800f8e4:	685a      	ldr	r2, [r3, #4]
 800f8e6:	604a      	str	r2, [r1, #4]
 800f8e8:	2301      	movs	r3, #1
 800f8ea:	4093      	lsls	r3, r2
 800f8ec:	608b      	str	r3, [r1, #8]
 800f8ee:	4648      	mov	r0, r9
 800f8f0:	f000 fee6 	bl	80106c0 <_Bfree>
 800f8f4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800f8f8:	2200      	movs	r2, #0
 800f8fa:	601a      	str	r2, [r3, #0]
 800f8fc:	1e2b      	subs	r3, r5, #0
 800f8fe:	bfb9      	ittee	lt
 800f900:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800f904:	9305      	strlt	r3, [sp, #20]
 800f906:	2300      	movge	r3, #0
 800f908:	6033      	strge	r3, [r6, #0]
 800f90a:	9f05      	ldr	r7, [sp, #20]
 800f90c:	4b9a      	ldr	r3, [pc, #616]	@ (800fb78 <_dtoa_r+0x2d8>)
 800f90e:	bfbc      	itt	lt
 800f910:	2201      	movlt	r2, #1
 800f912:	6032      	strlt	r2, [r6, #0]
 800f914:	43bb      	bics	r3, r7
 800f916:	d112      	bne.n	800f93e <_dtoa_r+0x9e>
 800f918:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800f91a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800f91e:	6013      	str	r3, [r2, #0]
 800f920:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f924:	4323      	orrs	r3, r4
 800f926:	f000 855a 	beq.w	80103de <_dtoa_r+0xb3e>
 800f92a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800f92c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800fb8c <_dtoa_r+0x2ec>
 800f930:	2b00      	cmp	r3, #0
 800f932:	f000 855c 	beq.w	80103ee <_dtoa_r+0xb4e>
 800f936:	f10a 0303 	add.w	r3, sl, #3
 800f93a:	f000 bd56 	b.w	80103ea <_dtoa_r+0xb4a>
 800f93e:	ed9d 7b04 	vldr	d7, [sp, #16]
 800f942:	2200      	movs	r2, #0
 800f944:	ec51 0b17 	vmov	r0, r1, d7
 800f948:	2300      	movs	r3, #0
 800f94a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800f94e:	f7f1 f8bb 	bl	8000ac8 <__aeabi_dcmpeq>
 800f952:	4680      	mov	r8, r0
 800f954:	b158      	cbz	r0, 800f96e <_dtoa_r+0xce>
 800f956:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800f958:	2301      	movs	r3, #1
 800f95a:	6013      	str	r3, [r2, #0]
 800f95c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800f95e:	b113      	cbz	r3, 800f966 <_dtoa_r+0xc6>
 800f960:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800f962:	4b86      	ldr	r3, [pc, #536]	@ (800fb7c <_dtoa_r+0x2dc>)
 800f964:	6013      	str	r3, [r2, #0]
 800f966:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800fb90 <_dtoa_r+0x2f0>
 800f96a:	f000 bd40 	b.w	80103ee <_dtoa_r+0xb4e>
 800f96e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800f972:	aa14      	add	r2, sp, #80	@ 0x50
 800f974:	a915      	add	r1, sp, #84	@ 0x54
 800f976:	4648      	mov	r0, r9
 800f978:	f001 f984 	bl	8010c84 <__d2b>
 800f97c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800f980:	9002      	str	r0, [sp, #8]
 800f982:	2e00      	cmp	r6, #0
 800f984:	d078      	beq.n	800fa78 <_dtoa_r+0x1d8>
 800f986:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f988:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800f98c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f990:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800f994:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800f998:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800f99c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800f9a0:	4619      	mov	r1, r3
 800f9a2:	2200      	movs	r2, #0
 800f9a4:	4b76      	ldr	r3, [pc, #472]	@ (800fb80 <_dtoa_r+0x2e0>)
 800f9a6:	f7f0 fc6f 	bl	8000288 <__aeabi_dsub>
 800f9aa:	a36b      	add	r3, pc, #428	@ (adr r3, 800fb58 <_dtoa_r+0x2b8>)
 800f9ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9b0:	f7f0 fe22 	bl	80005f8 <__aeabi_dmul>
 800f9b4:	a36a      	add	r3, pc, #424	@ (adr r3, 800fb60 <_dtoa_r+0x2c0>)
 800f9b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9ba:	f7f0 fc67 	bl	800028c <__adddf3>
 800f9be:	4604      	mov	r4, r0
 800f9c0:	4630      	mov	r0, r6
 800f9c2:	460d      	mov	r5, r1
 800f9c4:	f7f0 fdae 	bl	8000524 <__aeabi_i2d>
 800f9c8:	a367      	add	r3, pc, #412	@ (adr r3, 800fb68 <_dtoa_r+0x2c8>)
 800f9ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9ce:	f7f0 fe13 	bl	80005f8 <__aeabi_dmul>
 800f9d2:	4602      	mov	r2, r0
 800f9d4:	460b      	mov	r3, r1
 800f9d6:	4620      	mov	r0, r4
 800f9d8:	4629      	mov	r1, r5
 800f9da:	f7f0 fc57 	bl	800028c <__adddf3>
 800f9de:	4604      	mov	r4, r0
 800f9e0:	460d      	mov	r5, r1
 800f9e2:	f7f1 f8b9 	bl	8000b58 <__aeabi_d2iz>
 800f9e6:	2200      	movs	r2, #0
 800f9e8:	4607      	mov	r7, r0
 800f9ea:	2300      	movs	r3, #0
 800f9ec:	4620      	mov	r0, r4
 800f9ee:	4629      	mov	r1, r5
 800f9f0:	f7f1 f874 	bl	8000adc <__aeabi_dcmplt>
 800f9f4:	b140      	cbz	r0, 800fa08 <_dtoa_r+0x168>
 800f9f6:	4638      	mov	r0, r7
 800f9f8:	f7f0 fd94 	bl	8000524 <__aeabi_i2d>
 800f9fc:	4622      	mov	r2, r4
 800f9fe:	462b      	mov	r3, r5
 800fa00:	f7f1 f862 	bl	8000ac8 <__aeabi_dcmpeq>
 800fa04:	b900      	cbnz	r0, 800fa08 <_dtoa_r+0x168>
 800fa06:	3f01      	subs	r7, #1
 800fa08:	2f16      	cmp	r7, #22
 800fa0a:	d852      	bhi.n	800fab2 <_dtoa_r+0x212>
 800fa0c:	4b5d      	ldr	r3, [pc, #372]	@ (800fb84 <_dtoa_r+0x2e4>)
 800fa0e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800fa12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa16:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800fa1a:	f7f1 f85f 	bl	8000adc <__aeabi_dcmplt>
 800fa1e:	2800      	cmp	r0, #0
 800fa20:	d049      	beq.n	800fab6 <_dtoa_r+0x216>
 800fa22:	3f01      	subs	r7, #1
 800fa24:	2300      	movs	r3, #0
 800fa26:	9310      	str	r3, [sp, #64]	@ 0x40
 800fa28:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800fa2a:	1b9b      	subs	r3, r3, r6
 800fa2c:	1e5a      	subs	r2, r3, #1
 800fa2e:	bf45      	ittet	mi
 800fa30:	f1c3 0301 	rsbmi	r3, r3, #1
 800fa34:	9300      	strmi	r3, [sp, #0]
 800fa36:	2300      	movpl	r3, #0
 800fa38:	2300      	movmi	r3, #0
 800fa3a:	9206      	str	r2, [sp, #24]
 800fa3c:	bf54      	ite	pl
 800fa3e:	9300      	strpl	r3, [sp, #0]
 800fa40:	9306      	strmi	r3, [sp, #24]
 800fa42:	2f00      	cmp	r7, #0
 800fa44:	db39      	blt.n	800faba <_dtoa_r+0x21a>
 800fa46:	9b06      	ldr	r3, [sp, #24]
 800fa48:	970d      	str	r7, [sp, #52]	@ 0x34
 800fa4a:	443b      	add	r3, r7
 800fa4c:	9306      	str	r3, [sp, #24]
 800fa4e:	2300      	movs	r3, #0
 800fa50:	9308      	str	r3, [sp, #32]
 800fa52:	9b07      	ldr	r3, [sp, #28]
 800fa54:	2b09      	cmp	r3, #9
 800fa56:	d863      	bhi.n	800fb20 <_dtoa_r+0x280>
 800fa58:	2b05      	cmp	r3, #5
 800fa5a:	bfc4      	itt	gt
 800fa5c:	3b04      	subgt	r3, #4
 800fa5e:	9307      	strgt	r3, [sp, #28]
 800fa60:	9b07      	ldr	r3, [sp, #28]
 800fa62:	f1a3 0302 	sub.w	r3, r3, #2
 800fa66:	bfcc      	ite	gt
 800fa68:	2400      	movgt	r4, #0
 800fa6a:	2401      	movle	r4, #1
 800fa6c:	2b03      	cmp	r3, #3
 800fa6e:	d863      	bhi.n	800fb38 <_dtoa_r+0x298>
 800fa70:	e8df f003 	tbb	[pc, r3]
 800fa74:	2b375452 	.word	0x2b375452
 800fa78:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800fa7c:	441e      	add	r6, r3
 800fa7e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800fa82:	2b20      	cmp	r3, #32
 800fa84:	bfc1      	itttt	gt
 800fa86:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800fa8a:	409f      	lslgt	r7, r3
 800fa8c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800fa90:	fa24 f303 	lsrgt.w	r3, r4, r3
 800fa94:	bfd6      	itet	le
 800fa96:	f1c3 0320 	rsble	r3, r3, #32
 800fa9a:	ea47 0003 	orrgt.w	r0, r7, r3
 800fa9e:	fa04 f003 	lslle.w	r0, r4, r3
 800faa2:	f7f0 fd2f 	bl	8000504 <__aeabi_ui2d>
 800faa6:	2201      	movs	r2, #1
 800faa8:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800faac:	3e01      	subs	r6, #1
 800faae:	9212      	str	r2, [sp, #72]	@ 0x48
 800fab0:	e776      	b.n	800f9a0 <_dtoa_r+0x100>
 800fab2:	2301      	movs	r3, #1
 800fab4:	e7b7      	b.n	800fa26 <_dtoa_r+0x186>
 800fab6:	9010      	str	r0, [sp, #64]	@ 0x40
 800fab8:	e7b6      	b.n	800fa28 <_dtoa_r+0x188>
 800faba:	9b00      	ldr	r3, [sp, #0]
 800fabc:	1bdb      	subs	r3, r3, r7
 800fabe:	9300      	str	r3, [sp, #0]
 800fac0:	427b      	negs	r3, r7
 800fac2:	9308      	str	r3, [sp, #32]
 800fac4:	2300      	movs	r3, #0
 800fac6:	930d      	str	r3, [sp, #52]	@ 0x34
 800fac8:	e7c3      	b.n	800fa52 <_dtoa_r+0x1b2>
 800faca:	2301      	movs	r3, #1
 800facc:	9309      	str	r3, [sp, #36]	@ 0x24
 800face:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fad0:	eb07 0b03 	add.w	fp, r7, r3
 800fad4:	f10b 0301 	add.w	r3, fp, #1
 800fad8:	2b01      	cmp	r3, #1
 800fada:	9303      	str	r3, [sp, #12]
 800fadc:	bfb8      	it	lt
 800fade:	2301      	movlt	r3, #1
 800fae0:	e006      	b.n	800faf0 <_dtoa_r+0x250>
 800fae2:	2301      	movs	r3, #1
 800fae4:	9309      	str	r3, [sp, #36]	@ 0x24
 800fae6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fae8:	2b00      	cmp	r3, #0
 800faea:	dd28      	ble.n	800fb3e <_dtoa_r+0x29e>
 800faec:	469b      	mov	fp, r3
 800faee:	9303      	str	r3, [sp, #12]
 800faf0:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800faf4:	2100      	movs	r1, #0
 800faf6:	2204      	movs	r2, #4
 800faf8:	f102 0514 	add.w	r5, r2, #20
 800fafc:	429d      	cmp	r5, r3
 800fafe:	d926      	bls.n	800fb4e <_dtoa_r+0x2ae>
 800fb00:	6041      	str	r1, [r0, #4]
 800fb02:	4648      	mov	r0, r9
 800fb04:	f000 fd9c 	bl	8010640 <_Balloc>
 800fb08:	4682      	mov	sl, r0
 800fb0a:	2800      	cmp	r0, #0
 800fb0c:	d142      	bne.n	800fb94 <_dtoa_r+0x2f4>
 800fb0e:	4b1e      	ldr	r3, [pc, #120]	@ (800fb88 <_dtoa_r+0x2e8>)
 800fb10:	4602      	mov	r2, r0
 800fb12:	f240 11af 	movw	r1, #431	@ 0x1af
 800fb16:	e6da      	b.n	800f8ce <_dtoa_r+0x2e>
 800fb18:	2300      	movs	r3, #0
 800fb1a:	e7e3      	b.n	800fae4 <_dtoa_r+0x244>
 800fb1c:	2300      	movs	r3, #0
 800fb1e:	e7d5      	b.n	800facc <_dtoa_r+0x22c>
 800fb20:	2401      	movs	r4, #1
 800fb22:	2300      	movs	r3, #0
 800fb24:	9307      	str	r3, [sp, #28]
 800fb26:	9409      	str	r4, [sp, #36]	@ 0x24
 800fb28:	f04f 3bff 	mov.w	fp, #4294967295
 800fb2c:	2200      	movs	r2, #0
 800fb2e:	f8cd b00c 	str.w	fp, [sp, #12]
 800fb32:	2312      	movs	r3, #18
 800fb34:	920c      	str	r2, [sp, #48]	@ 0x30
 800fb36:	e7db      	b.n	800faf0 <_dtoa_r+0x250>
 800fb38:	2301      	movs	r3, #1
 800fb3a:	9309      	str	r3, [sp, #36]	@ 0x24
 800fb3c:	e7f4      	b.n	800fb28 <_dtoa_r+0x288>
 800fb3e:	f04f 0b01 	mov.w	fp, #1
 800fb42:	f8cd b00c 	str.w	fp, [sp, #12]
 800fb46:	465b      	mov	r3, fp
 800fb48:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800fb4c:	e7d0      	b.n	800faf0 <_dtoa_r+0x250>
 800fb4e:	3101      	adds	r1, #1
 800fb50:	0052      	lsls	r2, r2, #1
 800fb52:	e7d1      	b.n	800faf8 <_dtoa_r+0x258>
 800fb54:	f3af 8000 	nop.w
 800fb58:	636f4361 	.word	0x636f4361
 800fb5c:	3fd287a7 	.word	0x3fd287a7
 800fb60:	8b60c8b3 	.word	0x8b60c8b3
 800fb64:	3fc68a28 	.word	0x3fc68a28
 800fb68:	509f79fb 	.word	0x509f79fb
 800fb6c:	3fd34413 	.word	0x3fd34413
 800fb70:	08012df2 	.word	0x08012df2
 800fb74:	08012e09 	.word	0x08012e09
 800fb78:	7ff00000 	.word	0x7ff00000
 800fb7c:	08012dc2 	.word	0x08012dc2
 800fb80:	3ff80000 	.word	0x3ff80000
 800fb84:	08012f58 	.word	0x08012f58
 800fb88:	08012e61 	.word	0x08012e61
 800fb8c:	08012dee 	.word	0x08012dee
 800fb90:	08012dc1 	.word	0x08012dc1
 800fb94:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800fb98:	6018      	str	r0, [r3, #0]
 800fb9a:	9b03      	ldr	r3, [sp, #12]
 800fb9c:	2b0e      	cmp	r3, #14
 800fb9e:	f200 80a1 	bhi.w	800fce4 <_dtoa_r+0x444>
 800fba2:	2c00      	cmp	r4, #0
 800fba4:	f000 809e 	beq.w	800fce4 <_dtoa_r+0x444>
 800fba8:	2f00      	cmp	r7, #0
 800fbaa:	dd33      	ble.n	800fc14 <_dtoa_r+0x374>
 800fbac:	4b9c      	ldr	r3, [pc, #624]	@ (800fe20 <_dtoa_r+0x580>)
 800fbae:	f007 020f 	and.w	r2, r7, #15
 800fbb2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fbb6:	ed93 7b00 	vldr	d7, [r3]
 800fbba:	05f8      	lsls	r0, r7, #23
 800fbbc:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800fbc0:	ea4f 1427 	mov.w	r4, r7, asr #4
 800fbc4:	d516      	bpl.n	800fbf4 <_dtoa_r+0x354>
 800fbc6:	4b97      	ldr	r3, [pc, #604]	@ (800fe24 <_dtoa_r+0x584>)
 800fbc8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800fbcc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800fbd0:	f7f0 fe3c 	bl	800084c <__aeabi_ddiv>
 800fbd4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800fbd8:	f004 040f 	and.w	r4, r4, #15
 800fbdc:	2603      	movs	r6, #3
 800fbde:	4d91      	ldr	r5, [pc, #580]	@ (800fe24 <_dtoa_r+0x584>)
 800fbe0:	b954      	cbnz	r4, 800fbf8 <_dtoa_r+0x358>
 800fbe2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800fbe6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fbea:	f7f0 fe2f 	bl	800084c <__aeabi_ddiv>
 800fbee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800fbf2:	e028      	b.n	800fc46 <_dtoa_r+0x3a6>
 800fbf4:	2602      	movs	r6, #2
 800fbf6:	e7f2      	b.n	800fbde <_dtoa_r+0x33e>
 800fbf8:	07e1      	lsls	r1, r4, #31
 800fbfa:	d508      	bpl.n	800fc0e <_dtoa_r+0x36e>
 800fbfc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800fc00:	e9d5 2300 	ldrd	r2, r3, [r5]
 800fc04:	f7f0 fcf8 	bl	80005f8 <__aeabi_dmul>
 800fc08:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800fc0c:	3601      	adds	r6, #1
 800fc0e:	1064      	asrs	r4, r4, #1
 800fc10:	3508      	adds	r5, #8
 800fc12:	e7e5      	b.n	800fbe0 <_dtoa_r+0x340>
 800fc14:	f000 80af 	beq.w	800fd76 <_dtoa_r+0x4d6>
 800fc18:	427c      	negs	r4, r7
 800fc1a:	4b81      	ldr	r3, [pc, #516]	@ (800fe20 <_dtoa_r+0x580>)
 800fc1c:	4d81      	ldr	r5, [pc, #516]	@ (800fe24 <_dtoa_r+0x584>)
 800fc1e:	f004 020f 	and.w	r2, r4, #15
 800fc22:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fc26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc2a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800fc2e:	f7f0 fce3 	bl	80005f8 <__aeabi_dmul>
 800fc32:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800fc36:	1124      	asrs	r4, r4, #4
 800fc38:	2300      	movs	r3, #0
 800fc3a:	2602      	movs	r6, #2
 800fc3c:	2c00      	cmp	r4, #0
 800fc3e:	f040 808f 	bne.w	800fd60 <_dtoa_r+0x4c0>
 800fc42:	2b00      	cmp	r3, #0
 800fc44:	d1d3      	bne.n	800fbee <_dtoa_r+0x34e>
 800fc46:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800fc48:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800fc4c:	2b00      	cmp	r3, #0
 800fc4e:	f000 8094 	beq.w	800fd7a <_dtoa_r+0x4da>
 800fc52:	4b75      	ldr	r3, [pc, #468]	@ (800fe28 <_dtoa_r+0x588>)
 800fc54:	2200      	movs	r2, #0
 800fc56:	4620      	mov	r0, r4
 800fc58:	4629      	mov	r1, r5
 800fc5a:	f7f0 ff3f 	bl	8000adc <__aeabi_dcmplt>
 800fc5e:	2800      	cmp	r0, #0
 800fc60:	f000 808b 	beq.w	800fd7a <_dtoa_r+0x4da>
 800fc64:	9b03      	ldr	r3, [sp, #12]
 800fc66:	2b00      	cmp	r3, #0
 800fc68:	f000 8087 	beq.w	800fd7a <_dtoa_r+0x4da>
 800fc6c:	f1bb 0f00 	cmp.w	fp, #0
 800fc70:	dd34      	ble.n	800fcdc <_dtoa_r+0x43c>
 800fc72:	4620      	mov	r0, r4
 800fc74:	4b6d      	ldr	r3, [pc, #436]	@ (800fe2c <_dtoa_r+0x58c>)
 800fc76:	2200      	movs	r2, #0
 800fc78:	4629      	mov	r1, r5
 800fc7a:	f7f0 fcbd 	bl	80005f8 <__aeabi_dmul>
 800fc7e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800fc82:	f107 38ff 	add.w	r8, r7, #4294967295
 800fc86:	3601      	adds	r6, #1
 800fc88:	465c      	mov	r4, fp
 800fc8a:	4630      	mov	r0, r6
 800fc8c:	f7f0 fc4a 	bl	8000524 <__aeabi_i2d>
 800fc90:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fc94:	f7f0 fcb0 	bl	80005f8 <__aeabi_dmul>
 800fc98:	4b65      	ldr	r3, [pc, #404]	@ (800fe30 <_dtoa_r+0x590>)
 800fc9a:	2200      	movs	r2, #0
 800fc9c:	f7f0 faf6 	bl	800028c <__adddf3>
 800fca0:	4605      	mov	r5, r0
 800fca2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800fca6:	2c00      	cmp	r4, #0
 800fca8:	d16a      	bne.n	800fd80 <_dtoa_r+0x4e0>
 800fcaa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fcae:	4b61      	ldr	r3, [pc, #388]	@ (800fe34 <_dtoa_r+0x594>)
 800fcb0:	2200      	movs	r2, #0
 800fcb2:	f7f0 fae9 	bl	8000288 <__aeabi_dsub>
 800fcb6:	4602      	mov	r2, r0
 800fcb8:	460b      	mov	r3, r1
 800fcba:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800fcbe:	462a      	mov	r2, r5
 800fcc0:	4633      	mov	r3, r6
 800fcc2:	f7f0 ff29 	bl	8000b18 <__aeabi_dcmpgt>
 800fcc6:	2800      	cmp	r0, #0
 800fcc8:	f040 8298 	bne.w	80101fc <_dtoa_r+0x95c>
 800fccc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fcd0:	462a      	mov	r2, r5
 800fcd2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800fcd6:	f7f0 ff01 	bl	8000adc <__aeabi_dcmplt>
 800fcda:	bb38      	cbnz	r0, 800fd2c <_dtoa_r+0x48c>
 800fcdc:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800fce0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800fce4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800fce6:	2b00      	cmp	r3, #0
 800fce8:	f2c0 8157 	blt.w	800ff9a <_dtoa_r+0x6fa>
 800fcec:	2f0e      	cmp	r7, #14
 800fcee:	f300 8154 	bgt.w	800ff9a <_dtoa_r+0x6fa>
 800fcf2:	4b4b      	ldr	r3, [pc, #300]	@ (800fe20 <_dtoa_r+0x580>)
 800fcf4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800fcf8:	ed93 7b00 	vldr	d7, [r3]
 800fcfc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fcfe:	2b00      	cmp	r3, #0
 800fd00:	ed8d 7b00 	vstr	d7, [sp]
 800fd04:	f280 80e5 	bge.w	800fed2 <_dtoa_r+0x632>
 800fd08:	9b03      	ldr	r3, [sp, #12]
 800fd0a:	2b00      	cmp	r3, #0
 800fd0c:	f300 80e1 	bgt.w	800fed2 <_dtoa_r+0x632>
 800fd10:	d10c      	bne.n	800fd2c <_dtoa_r+0x48c>
 800fd12:	4b48      	ldr	r3, [pc, #288]	@ (800fe34 <_dtoa_r+0x594>)
 800fd14:	2200      	movs	r2, #0
 800fd16:	ec51 0b17 	vmov	r0, r1, d7
 800fd1a:	f7f0 fc6d 	bl	80005f8 <__aeabi_dmul>
 800fd1e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fd22:	f7f0 feef 	bl	8000b04 <__aeabi_dcmpge>
 800fd26:	2800      	cmp	r0, #0
 800fd28:	f000 8266 	beq.w	80101f8 <_dtoa_r+0x958>
 800fd2c:	2400      	movs	r4, #0
 800fd2e:	4625      	mov	r5, r4
 800fd30:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fd32:	4656      	mov	r6, sl
 800fd34:	ea6f 0803 	mvn.w	r8, r3
 800fd38:	2700      	movs	r7, #0
 800fd3a:	4621      	mov	r1, r4
 800fd3c:	4648      	mov	r0, r9
 800fd3e:	f000 fcbf 	bl	80106c0 <_Bfree>
 800fd42:	2d00      	cmp	r5, #0
 800fd44:	f000 80bd 	beq.w	800fec2 <_dtoa_r+0x622>
 800fd48:	b12f      	cbz	r7, 800fd56 <_dtoa_r+0x4b6>
 800fd4a:	42af      	cmp	r7, r5
 800fd4c:	d003      	beq.n	800fd56 <_dtoa_r+0x4b6>
 800fd4e:	4639      	mov	r1, r7
 800fd50:	4648      	mov	r0, r9
 800fd52:	f000 fcb5 	bl	80106c0 <_Bfree>
 800fd56:	4629      	mov	r1, r5
 800fd58:	4648      	mov	r0, r9
 800fd5a:	f000 fcb1 	bl	80106c0 <_Bfree>
 800fd5e:	e0b0      	b.n	800fec2 <_dtoa_r+0x622>
 800fd60:	07e2      	lsls	r2, r4, #31
 800fd62:	d505      	bpl.n	800fd70 <_dtoa_r+0x4d0>
 800fd64:	e9d5 2300 	ldrd	r2, r3, [r5]
 800fd68:	f7f0 fc46 	bl	80005f8 <__aeabi_dmul>
 800fd6c:	3601      	adds	r6, #1
 800fd6e:	2301      	movs	r3, #1
 800fd70:	1064      	asrs	r4, r4, #1
 800fd72:	3508      	adds	r5, #8
 800fd74:	e762      	b.n	800fc3c <_dtoa_r+0x39c>
 800fd76:	2602      	movs	r6, #2
 800fd78:	e765      	b.n	800fc46 <_dtoa_r+0x3a6>
 800fd7a:	9c03      	ldr	r4, [sp, #12]
 800fd7c:	46b8      	mov	r8, r7
 800fd7e:	e784      	b.n	800fc8a <_dtoa_r+0x3ea>
 800fd80:	4b27      	ldr	r3, [pc, #156]	@ (800fe20 <_dtoa_r+0x580>)
 800fd82:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800fd84:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800fd88:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800fd8c:	4454      	add	r4, sl
 800fd8e:	2900      	cmp	r1, #0
 800fd90:	d054      	beq.n	800fe3c <_dtoa_r+0x59c>
 800fd92:	4929      	ldr	r1, [pc, #164]	@ (800fe38 <_dtoa_r+0x598>)
 800fd94:	2000      	movs	r0, #0
 800fd96:	f7f0 fd59 	bl	800084c <__aeabi_ddiv>
 800fd9a:	4633      	mov	r3, r6
 800fd9c:	462a      	mov	r2, r5
 800fd9e:	f7f0 fa73 	bl	8000288 <__aeabi_dsub>
 800fda2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800fda6:	4656      	mov	r6, sl
 800fda8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fdac:	f7f0 fed4 	bl	8000b58 <__aeabi_d2iz>
 800fdb0:	4605      	mov	r5, r0
 800fdb2:	f7f0 fbb7 	bl	8000524 <__aeabi_i2d>
 800fdb6:	4602      	mov	r2, r0
 800fdb8:	460b      	mov	r3, r1
 800fdba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fdbe:	f7f0 fa63 	bl	8000288 <__aeabi_dsub>
 800fdc2:	3530      	adds	r5, #48	@ 0x30
 800fdc4:	4602      	mov	r2, r0
 800fdc6:	460b      	mov	r3, r1
 800fdc8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800fdcc:	f806 5b01 	strb.w	r5, [r6], #1
 800fdd0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800fdd4:	f7f0 fe82 	bl	8000adc <__aeabi_dcmplt>
 800fdd8:	2800      	cmp	r0, #0
 800fdda:	d172      	bne.n	800fec2 <_dtoa_r+0x622>
 800fddc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fde0:	4911      	ldr	r1, [pc, #68]	@ (800fe28 <_dtoa_r+0x588>)
 800fde2:	2000      	movs	r0, #0
 800fde4:	f7f0 fa50 	bl	8000288 <__aeabi_dsub>
 800fde8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800fdec:	f7f0 fe76 	bl	8000adc <__aeabi_dcmplt>
 800fdf0:	2800      	cmp	r0, #0
 800fdf2:	f040 80b4 	bne.w	800ff5e <_dtoa_r+0x6be>
 800fdf6:	42a6      	cmp	r6, r4
 800fdf8:	f43f af70 	beq.w	800fcdc <_dtoa_r+0x43c>
 800fdfc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800fe00:	4b0a      	ldr	r3, [pc, #40]	@ (800fe2c <_dtoa_r+0x58c>)
 800fe02:	2200      	movs	r2, #0
 800fe04:	f7f0 fbf8 	bl	80005f8 <__aeabi_dmul>
 800fe08:	4b08      	ldr	r3, [pc, #32]	@ (800fe2c <_dtoa_r+0x58c>)
 800fe0a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800fe0e:	2200      	movs	r2, #0
 800fe10:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fe14:	f7f0 fbf0 	bl	80005f8 <__aeabi_dmul>
 800fe18:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800fe1c:	e7c4      	b.n	800fda8 <_dtoa_r+0x508>
 800fe1e:	bf00      	nop
 800fe20:	08012f58 	.word	0x08012f58
 800fe24:	08012f30 	.word	0x08012f30
 800fe28:	3ff00000 	.word	0x3ff00000
 800fe2c:	40240000 	.word	0x40240000
 800fe30:	401c0000 	.word	0x401c0000
 800fe34:	40140000 	.word	0x40140000
 800fe38:	3fe00000 	.word	0x3fe00000
 800fe3c:	4631      	mov	r1, r6
 800fe3e:	4628      	mov	r0, r5
 800fe40:	f7f0 fbda 	bl	80005f8 <__aeabi_dmul>
 800fe44:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800fe48:	9413      	str	r4, [sp, #76]	@ 0x4c
 800fe4a:	4656      	mov	r6, sl
 800fe4c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fe50:	f7f0 fe82 	bl	8000b58 <__aeabi_d2iz>
 800fe54:	4605      	mov	r5, r0
 800fe56:	f7f0 fb65 	bl	8000524 <__aeabi_i2d>
 800fe5a:	4602      	mov	r2, r0
 800fe5c:	460b      	mov	r3, r1
 800fe5e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fe62:	f7f0 fa11 	bl	8000288 <__aeabi_dsub>
 800fe66:	3530      	adds	r5, #48	@ 0x30
 800fe68:	f806 5b01 	strb.w	r5, [r6], #1
 800fe6c:	4602      	mov	r2, r0
 800fe6e:	460b      	mov	r3, r1
 800fe70:	42a6      	cmp	r6, r4
 800fe72:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800fe76:	f04f 0200 	mov.w	r2, #0
 800fe7a:	d124      	bne.n	800fec6 <_dtoa_r+0x626>
 800fe7c:	4baf      	ldr	r3, [pc, #700]	@ (801013c <_dtoa_r+0x89c>)
 800fe7e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800fe82:	f7f0 fa03 	bl	800028c <__adddf3>
 800fe86:	4602      	mov	r2, r0
 800fe88:	460b      	mov	r3, r1
 800fe8a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fe8e:	f7f0 fe43 	bl	8000b18 <__aeabi_dcmpgt>
 800fe92:	2800      	cmp	r0, #0
 800fe94:	d163      	bne.n	800ff5e <_dtoa_r+0x6be>
 800fe96:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800fe9a:	49a8      	ldr	r1, [pc, #672]	@ (801013c <_dtoa_r+0x89c>)
 800fe9c:	2000      	movs	r0, #0
 800fe9e:	f7f0 f9f3 	bl	8000288 <__aeabi_dsub>
 800fea2:	4602      	mov	r2, r0
 800fea4:	460b      	mov	r3, r1
 800fea6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800feaa:	f7f0 fe17 	bl	8000adc <__aeabi_dcmplt>
 800feae:	2800      	cmp	r0, #0
 800feb0:	f43f af14 	beq.w	800fcdc <_dtoa_r+0x43c>
 800feb4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800feb6:	1e73      	subs	r3, r6, #1
 800feb8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800feba:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800febe:	2b30      	cmp	r3, #48	@ 0x30
 800fec0:	d0f8      	beq.n	800feb4 <_dtoa_r+0x614>
 800fec2:	4647      	mov	r7, r8
 800fec4:	e03b      	b.n	800ff3e <_dtoa_r+0x69e>
 800fec6:	4b9e      	ldr	r3, [pc, #632]	@ (8010140 <_dtoa_r+0x8a0>)
 800fec8:	f7f0 fb96 	bl	80005f8 <__aeabi_dmul>
 800fecc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800fed0:	e7bc      	b.n	800fe4c <_dtoa_r+0x5ac>
 800fed2:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800fed6:	4656      	mov	r6, sl
 800fed8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fedc:	4620      	mov	r0, r4
 800fede:	4629      	mov	r1, r5
 800fee0:	f7f0 fcb4 	bl	800084c <__aeabi_ddiv>
 800fee4:	f7f0 fe38 	bl	8000b58 <__aeabi_d2iz>
 800fee8:	4680      	mov	r8, r0
 800feea:	f7f0 fb1b 	bl	8000524 <__aeabi_i2d>
 800feee:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fef2:	f7f0 fb81 	bl	80005f8 <__aeabi_dmul>
 800fef6:	4602      	mov	r2, r0
 800fef8:	460b      	mov	r3, r1
 800fefa:	4620      	mov	r0, r4
 800fefc:	4629      	mov	r1, r5
 800fefe:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800ff02:	f7f0 f9c1 	bl	8000288 <__aeabi_dsub>
 800ff06:	f806 4b01 	strb.w	r4, [r6], #1
 800ff0a:	9d03      	ldr	r5, [sp, #12]
 800ff0c:	eba6 040a 	sub.w	r4, r6, sl
 800ff10:	42a5      	cmp	r5, r4
 800ff12:	4602      	mov	r2, r0
 800ff14:	460b      	mov	r3, r1
 800ff16:	d133      	bne.n	800ff80 <_dtoa_r+0x6e0>
 800ff18:	f7f0 f9b8 	bl	800028c <__adddf3>
 800ff1c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ff20:	4604      	mov	r4, r0
 800ff22:	460d      	mov	r5, r1
 800ff24:	f7f0 fdf8 	bl	8000b18 <__aeabi_dcmpgt>
 800ff28:	b9c0      	cbnz	r0, 800ff5c <_dtoa_r+0x6bc>
 800ff2a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ff2e:	4620      	mov	r0, r4
 800ff30:	4629      	mov	r1, r5
 800ff32:	f7f0 fdc9 	bl	8000ac8 <__aeabi_dcmpeq>
 800ff36:	b110      	cbz	r0, 800ff3e <_dtoa_r+0x69e>
 800ff38:	f018 0f01 	tst.w	r8, #1
 800ff3c:	d10e      	bne.n	800ff5c <_dtoa_r+0x6bc>
 800ff3e:	9902      	ldr	r1, [sp, #8]
 800ff40:	4648      	mov	r0, r9
 800ff42:	f000 fbbd 	bl	80106c0 <_Bfree>
 800ff46:	2300      	movs	r3, #0
 800ff48:	7033      	strb	r3, [r6, #0]
 800ff4a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ff4c:	3701      	adds	r7, #1
 800ff4e:	601f      	str	r7, [r3, #0]
 800ff50:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ff52:	2b00      	cmp	r3, #0
 800ff54:	f000 824b 	beq.w	80103ee <_dtoa_r+0xb4e>
 800ff58:	601e      	str	r6, [r3, #0]
 800ff5a:	e248      	b.n	80103ee <_dtoa_r+0xb4e>
 800ff5c:	46b8      	mov	r8, r7
 800ff5e:	4633      	mov	r3, r6
 800ff60:	461e      	mov	r6, r3
 800ff62:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ff66:	2a39      	cmp	r2, #57	@ 0x39
 800ff68:	d106      	bne.n	800ff78 <_dtoa_r+0x6d8>
 800ff6a:	459a      	cmp	sl, r3
 800ff6c:	d1f8      	bne.n	800ff60 <_dtoa_r+0x6c0>
 800ff6e:	2230      	movs	r2, #48	@ 0x30
 800ff70:	f108 0801 	add.w	r8, r8, #1
 800ff74:	f88a 2000 	strb.w	r2, [sl]
 800ff78:	781a      	ldrb	r2, [r3, #0]
 800ff7a:	3201      	adds	r2, #1
 800ff7c:	701a      	strb	r2, [r3, #0]
 800ff7e:	e7a0      	b.n	800fec2 <_dtoa_r+0x622>
 800ff80:	4b6f      	ldr	r3, [pc, #444]	@ (8010140 <_dtoa_r+0x8a0>)
 800ff82:	2200      	movs	r2, #0
 800ff84:	f7f0 fb38 	bl	80005f8 <__aeabi_dmul>
 800ff88:	2200      	movs	r2, #0
 800ff8a:	2300      	movs	r3, #0
 800ff8c:	4604      	mov	r4, r0
 800ff8e:	460d      	mov	r5, r1
 800ff90:	f7f0 fd9a 	bl	8000ac8 <__aeabi_dcmpeq>
 800ff94:	2800      	cmp	r0, #0
 800ff96:	d09f      	beq.n	800fed8 <_dtoa_r+0x638>
 800ff98:	e7d1      	b.n	800ff3e <_dtoa_r+0x69e>
 800ff9a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ff9c:	2a00      	cmp	r2, #0
 800ff9e:	f000 80ea 	beq.w	8010176 <_dtoa_r+0x8d6>
 800ffa2:	9a07      	ldr	r2, [sp, #28]
 800ffa4:	2a01      	cmp	r2, #1
 800ffa6:	f300 80cd 	bgt.w	8010144 <_dtoa_r+0x8a4>
 800ffaa:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800ffac:	2a00      	cmp	r2, #0
 800ffae:	f000 80c1 	beq.w	8010134 <_dtoa_r+0x894>
 800ffb2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800ffb6:	9c08      	ldr	r4, [sp, #32]
 800ffb8:	9e00      	ldr	r6, [sp, #0]
 800ffba:	9a00      	ldr	r2, [sp, #0]
 800ffbc:	441a      	add	r2, r3
 800ffbe:	9200      	str	r2, [sp, #0]
 800ffc0:	9a06      	ldr	r2, [sp, #24]
 800ffc2:	2101      	movs	r1, #1
 800ffc4:	441a      	add	r2, r3
 800ffc6:	4648      	mov	r0, r9
 800ffc8:	9206      	str	r2, [sp, #24]
 800ffca:	f000 fc2d 	bl	8010828 <__i2b>
 800ffce:	4605      	mov	r5, r0
 800ffd0:	b166      	cbz	r6, 800ffec <_dtoa_r+0x74c>
 800ffd2:	9b06      	ldr	r3, [sp, #24]
 800ffd4:	2b00      	cmp	r3, #0
 800ffd6:	dd09      	ble.n	800ffec <_dtoa_r+0x74c>
 800ffd8:	42b3      	cmp	r3, r6
 800ffda:	9a00      	ldr	r2, [sp, #0]
 800ffdc:	bfa8      	it	ge
 800ffde:	4633      	movge	r3, r6
 800ffe0:	1ad2      	subs	r2, r2, r3
 800ffe2:	9200      	str	r2, [sp, #0]
 800ffe4:	9a06      	ldr	r2, [sp, #24]
 800ffe6:	1af6      	subs	r6, r6, r3
 800ffe8:	1ad3      	subs	r3, r2, r3
 800ffea:	9306      	str	r3, [sp, #24]
 800ffec:	9b08      	ldr	r3, [sp, #32]
 800ffee:	b30b      	cbz	r3, 8010034 <_dtoa_r+0x794>
 800fff0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fff2:	2b00      	cmp	r3, #0
 800fff4:	f000 80c6 	beq.w	8010184 <_dtoa_r+0x8e4>
 800fff8:	2c00      	cmp	r4, #0
 800fffa:	f000 80c0 	beq.w	801017e <_dtoa_r+0x8de>
 800fffe:	4629      	mov	r1, r5
 8010000:	4622      	mov	r2, r4
 8010002:	4648      	mov	r0, r9
 8010004:	f000 fcc8 	bl	8010998 <__pow5mult>
 8010008:	9a02      	ldr	r2, [sp, #8]
 801000a:	4601      	mov	r1, r0
 801000c:	4605      	mov	r5, r0
 801000e:	4648      	mov	r0, r9
 8010010:	f000 fc20 	bl	8010854 <__multiply>
 8010014:	9902      	ldr	r1, [sp, #8]
 8010016:	4680      	mov	r8, r0
 8010018:	4648      	mov	r0, r9
 801001a:	f000 fb51 	bl	80106c0 <_Bfree>
 801001e:	9b08      	ldr	r3, [sp, #32]
 8010020:	1b1b      	subs	r3, r3, r4
 8010022:	9308      	str	r3, [sp, #32]
 8010024:	f000 80b1 	beq.w	801018a <_dtoa_r+0x8ea>
 8010028:	9a08      	ldr	r2, [sp, #32]
 801002a:	4641      	mov	r1, r8
 801002c:	4648      	mov	r0, r9
 801002e:	f000 fcb3 	bl	8010998 <__pow5mult>
 8010032:	9002      	str	r0, [sp, #8]
 8010034:	2101      	movs	r1, #1
 8010036:	4648      	mov	r0, r9
 8010038:	f000 fbf6 	bl	8010828 <__i2b>
 801003c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801003e:	4604      	mov	r4, r0
 8010040:	2b00      	cmp	r3, #0
 8010042:	f000 81d8 	beq.w	80103f6 <_dtoa_r+0xb56>
 8010046:	461a      	mov	r2, r3
 8010048:	4601      	mov	r1, r0
 801004a:	4648      	mov	r0, r9
 801004c:	f000 fca4 	bl	8010998 <__pow5mult>
 8010050:	9b07      	ldr	r3, [sp, #28]
 8010052:	2b01      	cmp	r3, #1
 8010054:	4604      	mov	r4, r0
 8010056:	f300 809f 	bgt.w	8010198 <_dtoa_r+0x8f8>
 801005a:	9b04      	ldr	r3, [sp, #16]
 801005c:	2b00      	cmp	r3, #0
 801005e:	f040 8097 	bne.w	8010190 <_dtoa_r+0x8f0>
 8010062:	9b05      	ldr	r3, [sp, #20]
 8010064:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010068:	2b00      	cmp	r3, #0
 801006a:	f040 8093 	bne.w	8010194 <_dtoa_r+0x8f4>
 801006e:	9b05      	ldr	r3, [sp, #20]
 8010070:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8010074:	0d1b      	lsrs	r3, r3, #20
 8010076:	051b      	lsls	r3, r3, #20
 8010078:	b133      	cbz	r3, 8010088 <_dtoa_r+0x7e8>
 801007a:	9b00      	ldr	r3, [sp, #0]
 801007c:	3301      	adds	r3, #1
 801007e:	9300      	str	r3, [sp, #0]
 8010080:	9b06      	ldr	r3, [sp, #24]
 8010082:	3301      	adds	r3, #1
 8010084:	9306      	str	r3, [sp, #24]
 8010086:	2301      	movs	r3, #1
 8010088:	9308      	str	r3, [sp, #32]
 801008a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801008c:	2b00      	cmp	r3, #0
 801008e:	f000 81b8 	beq.w	8010402 <_dtoa_r+0xb62>
 8010092:	6923      	ldr	r3, [r4, #16]
 8010094:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010098:	6918      	ldr	r0, [r3, #16]
 801009a:	f000 fb79 	bl	8010790 <__hi0bits>
 801009e:	f1c0 0020 	rsb	r0, r0, #32
 80100a2:	9b06      	ldr	r3, [sp, #24]
 80100a4:	4418      	add	r0, r3
 80100a6:	f010 001f 	ands.w	r0, r0, #31
 80100aa:	f000 8082 	beq.w	80101b2 <_dtoa_r+0x912>
 80100ae:	f1c0 0320 	rsb	r3, r0, #32
 80100b2:	2b04      	cmp	r3, #4
 80100b4:	dd73      	ble.n	801019e <_dtoa_r+0x8fe>
 80100b6:	9b00      	ldr	r3, [sp, #0]
 80100b8:	f1c0 001c 	rsb	r0, r0, #28
 80100bc:	4403      	add	r3, r0
 80100be:	9300      	str	r3, [sp, #0]
 80100c0:	9b06      	ldr	r3, [sp, #24]
 80100c2:	4403      	add	r3, r0
 80100c4:	4406      	add	r6, r0
 80100c6:	9306      	str	r3, [sp, #24]
 80100c8:	9b00      	ldr	r3, [sp, #0]
 80100ca:	2b00      	cmp	r3, #0
 80100cc:	dd05      	ble.n	80100da <_dtoa_r+0x83a>
 80100ce:	9902      	ldr	r1, [sp, #8]
 80100d0:	461a      	mov	r2, r3
 80100d2:	4648      	mov	r0, r9
 80100d4:	f000 fcba 	bl	8010a4c <__lshift>
 80100d8:	9002      	str	r0, [sp, #8]
 80100da:	9b06      	ldr	r3, [sp, #24]
 80100dc:	2b00      	cmp	r3, #0
 80100de:	dd05      	ble.n	80100ec <_dtoa_r+0x84c>
 80100e0:	4621      	mov	r1, r4
 80100e2:	461a      	mov	r2, r3
 80100e4:	4648      	mov	r0, r9
 80100e6:	f000 fcb1 	bl	8010a4c <__lshift>
 80100ea:	4604      	mov	r4, r0
 80100ec:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80100ee:	2b00      	cmp	r3, #0
 80100f0:	d061      	beq.n	80101b6 <_dtoa_r+0x916>
 80100f2:	9802      	ldr	r0, [sp, #8]
 80100f4:	4621      	mov	r1, r4
 80100f6:	f000 fd15 	bl	8010b24 <__mcmp>
 80100fa:	2800      	cmp	r0, #0
 80100fc:	da5b      	bge.n	80101b6 <_dtoa_r+0x916>
 80100fe:	2300      	movs	r3, #0
 8010100:	9902      	ldr	r1, [sp, #8]
 8010102:	220a      	movs	r2, #10
 8010104:	4648      	mov	r0, r9
 8010106:	f000 fafd 	bl	8010704 <__multadd>
 801010a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801010c:	9002      	str	r0, [sp, #8]
 801010e:	f107 38ff 	add.w	r8, r7, #4294967295
 8010112:	2b00      	cmp	r3, #0
 8010114:	f000 8177 	beq.w	8010406 <_dtoa_r+0xb66>
 8010118:	4629      	mov	r1, r5
 801011a:	2300      	movs	r3, #0
 801011c:	220a      	movs	r2, #10
 801011e:	4648      	mov	r0, r9
 8010120:	f000 faf0 	bl	8010704 <__multadd>
 8010124:	f1bb 0f00 	cmp.w	fp, #0
 8010128:	4605      	mov	r5, r0
 801012a:	dc6f      	bgt.n	801020c <_dtoa_r+0x96c>
 801012c:	9b07      	ldr	r3, [sp, #28]
 801012e:	2b02      	cmp	r3, #2
 8010130:	dc49      	bgt.n	80101c6 <_dtoa_r+0x926>
 8010132:	e06b      	b.n	801020c <_dtoa_r+0x96c>
 8010134:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8010136:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 801013a:	e73c      	b.n	800ffb6 <_dtoa_r+0x716>
 801013c:	3fe00000 	.word	0x3fe00000
 8010140:	40240000 	.word	0x40240000
 8010144:	9b03      	ldr	r3, [sp, #12]
 8010146:	1e5c      	subs	r4, r3, #1
 8010148:	9b08      	ldr	r3, [sp, #32]
 801014a:	42a3      	cmp	r3, r4
 801014c:	db09      	blt.n	8010162 <_dtoa_r+0x8c2>
 801014e:	1b1c      	subs	r4, r3, r4
 8010150:	9b03      	ldr	r3, [sp, #12]
 8010152:	2b00      	cmp	r3, #0
 8010154:	f6bf af30 	bge.w	800ffb8 <_dtoa_r+0x718>
 8010158:	9b00      	ldr	r3, [sp, #0]
 801015a:	9a03      	ldr	r2, [sp, #12]
 801015c:	1a9e      	subs	r6, r3, r2
 801015e:	2300      	movs	r3, #0
 8010160:	e72b      	b.n	800ffba <_dtoa_r+0x71a>
 8010162:	9b08      	ldr	r3, [sp, #32]
 8010164:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010166:	9408      	str	r4, [sp, #32]
 8010168:	1ae3      	subs	r3, r4, r3
 801016a:	441a      	add	r2, r3
 801016c:	9e00      	ldr	r6, [sp, #0]
 801016e:	9b03      	ldr	r3, [sp, #12]
 8010170:	920d      	str	r2, [sp, #52]	@ 0x34
 8010172:	2400      	movs	r4, #0
 8010174:	e721      	b.n	800ffba <_dtoa_r+0x71a>
 8010176:	9c08      	ldr	r4, [sp, #32]
 8010178:	9e00      	ldr	r6, [sp, #0]
 801017a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 801017c:	e728      	b.n	800ffd0 <_dtoa_r+0x730>
 801017e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8010182:	e751      	b.n	8010028 <_dtoa_r+0x788>
 8010184:	9a08      	ldr	r2, [sp, #32]
 8010186:	9902      	ldr	r1, [sp, #8]
 8010188:	e750      	b.n	801002c <_dtoa_r+0x78c>
 801018a:	f8cd 8008 	str.w	r8, [sp, #8]
 801018e:	e751      	b.n	8010034 <_dtoa_r+0x794>
 8010190:	2300      	movs	r3, #0
 8010192:	e779      	b.n	8010088 <_dtoa_r+0x7e8>
 8010194:	9b04      	ldr	r3, [sp, #16]
 8010196:	e777      	b.n	8010088 <_dtoa_r+0x7e8>
 8010198:	2300      	movs	r3, #0
 801019a:	9308      	str	r3, [sp, #32]
 801019c:	e779      	b.n	8010092 <_dtoa_r+0x7f2>
 801019e:	d093      	beq.n	80100c8 <_dtoa_r+0x828>
 80101a0:	9a00      	ldr	r2, [sp, #0]
 80101a2:	331c      	adds	r3, #28
 80101a4:	441a      	add	r2, r3
 80101a6:	9200      	str	r2, [sp, #0]
 80101a8:	9a06      	ldr	r2, [sp, #24]
 80101aa:	441a      	add	r2, r3
 80101ac:	441e      	add	r6, r3
 80101ae:	9206      	str	r2, [sp, #24]
 80101b0:	e78a      	b.n	80100c8 <_dtoa_r+0x828>
 80101b2:	4603      	mov	r3, r0
 80101b4:	e7f4      	b.n	80101a0 <_dtoa_r+0x900>
 80101b6:	9b03      	ldr	r3, [sp, #12]
 80101b8:	2b00      	cmp	r3, #0
 80101ba:	46b8      	mov	r8, r7
 80101bc:	dc20      	bgt.n	8010200 <_dtoa_r+0x960>
 80101be:	469b      	mov	fp, r3
 80101c0:	9b07      	ldr	r3, [sp, #28]
 80101c2:	2b02      	cmp	r3, #2
 80101c4:	dd1e      	ble.n	8010204 <_dtoa_r+0x964>
 80101c6:	f1bb 0f00 	cmp.w	fp, #0
 80101ca:	f47f adb1 	bne.w	800fd30 <_dtoa_r+0x490>
 80101ce:	4621      	mov	r1, r4
 80101d0:	465b      	mov	r3, fp
 80101d2:	2205      	movs	r2, #5
 80101d4:	4648      	mov	r0, r9
 80101d6:	f000 fa95 	bl	8010704 <__multadd>
 80101da:	4601      	mov	r1, r0
 80101dc:	4604      	mov	r4, r0
 80101de:	9802      	ldr	r0, [sp, #8]
 80101e0:	f000 fca0 	bl	8010b24 <__mcmp>
 80101e4:	2800      	cmp	r0, #0
 80101e6:	f77f ada3 	ble.w	800fd30 <_dtoa_r+0x490>
 80101ea:	4656      	mov	r6, sl
 80101ec:	2331      	movs	r3, #49	@ 0x31
 80101ee:	f806 3b01 	strb.w	r3, [r6], #1
 80101f2:	f108 0801 	add.w	r8, r8, #1
 80101f6:	e59f      	b.n	800fd38 <_dtoa_r+0x498>
 80101f8:	9c03      	ldr	r4, [sp, #12]
 80101fa:	46b8      	mov	r8, r7
 80101fc:	4625      	mov	r5, r4
 80101fe:	e7f4      	b.n	80101ea <_dtoa_r+0x94a>
 8010200:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8010204:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010206:	2b00      	cmp	r3, #0
 8010208:	f000 8101 	beq.w	801040e <_dtoa_r+0xb6e>
 801020c:	2e00      	cmp	r6, #0
 801020e:	dd05      	ble.n	801021c <_dtoa_r+0x97c>
 8010210:	4629      	mov	r1, r5
 8010212:	4632      	mov	r2, r6
 8010214:	4648      	mov	r0, r9
 8010216:	f000 fc19 	bl	8010a4c <__lshift>
 801021a:	4605      	mov	r5, r0
 801021c:	9b08      	ldr	r3, [sp, #32]
 801021e:	2b00      	cmp	r3, #0
 8010220:	d05c      	beq.n	80102dc <_dtoa_r+0xa3c>
 8010222:	6869      	ldr	r1, [r5, #4]
 8010224:	4648      	mov	r0, r9
 8010226:	f000 fa0b 	bl	8010640 <_Balloc>
 801022a:	4606      	mov	r6, r0
 801022c:	b928      	cbnz	r0, 801023a <_dtoa_r+0x99a>
 801022e:	4b82      	ldr	r3, [pc, #520]	@ (8010438 <_dtoa_r+0xb98>)
 8010230:	4602      	mov	r2, r0
 8010232:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8010236:	f7ff bb4a 	b.w	800f8ce <_dtoa_r+0x2e>
 801023a:	692a      	ldr	r2, [r5, #16]
 801023c:	3202      	adds	r2, #2
 801023e:	0092      	lsls	r2, r2, #2
 8010240:	f105 010c 	add.w	r1, r5, #12
 8010244:	300c      	adds	r0, #12
 8010246:	f7ff fa94 	bl	800f772 <memcpy>
 801024a:	2201      	movs	r2, #1
 801024c:	4631      	mov	r1, r6
 801024e:	4648      	mov	r0, r9
 8010250:	f000 fbfc 	bl	8010a4c <__lshift>
 8010254:	f10a 0301 	add.w	r3, sl, #1
 8010258:	9300      	str	r3, [sp, #0]
 801025a:	eb0a 030b 	add.w	r3, sl, fp
 801025e:	9308      	str	r3, [sp, #32]
 8010260:	9b04      	ldr	r3, [sp, #16]
 8010262:	f003 0301 	and.w	r3, r3, #1
 8010266:	462f      	mov	r7, r5
 8010268:	9306      	str	r3, [sp, #24]
 801026a:	4605      	mov	r5, r0
 801026c:	9b00      	ldr	r3, [sp, #0]
 801026e:	9802      	ldr	r0, [sp, #8]
 8010270:	4621      	mov	r1, r4
 8010272:	f103 3bff 	add.w	fp, r3, #4294967295
 8010276:	f7ff fa8a 	bl	800f78e <quorem>
 801027a:	4603      	mov	r3, r0
 801027c:	3330      	adds	r3, #48	@ 0x30
 801027e:	9003      	str	r0, [sp, #12]
 8010280:	4639      	mov	r1, r7
 8010282:	9802      	ldr	r0, [sp, #8]
 8010284:	9309      	str	r3, [sp, #36]	@ 0x24
 8010286:	f000 fc4d 	bl	8010b24 <__mcmp>
 801028a:	462a      	mov	r2, r5
 801028c:	9004      	str	r0, [sp, #16]
 801028e:	4621      	mov	r1, r4
 8010290:	4648      	mov	r0, r9
 8010292:	f000 fc63 	bl	8010b5c <__mdiff>
 8010296:	68c2      	ldr	r2, [r0, #12]
 8010298:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801029a:	4606      	mov	r6, r0
 801029c:	bb02      	cbnz	r2, 80102e0 <_dtoa_r+0xa40>
 801029e:	4601      	mov	r1, r0
 80102a0:	9802      	ldr	r0, [sp, #8]
 80102a2:	f000 fc3f 	bl	8010b24 <__mcmp>
 80102a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80102a8:	4602      	mov	r2, r0
 80102aa:	4631      	mov	r1, r6
 80102ac:	4648      	mov	r0, r9
 80102ae:	920c      	str	r2, [sp, #48]	@ 0x30
 80102b0:	9309      	str	r3, [sp, #36]	@ 0x24
 80102b2:	f000 fa05 	bl	80106c0 <_Bfree>
 80102b6:	9b07      	ldr	r3, [sp, #28]
 80102b8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80102ba:	9e00      	ldr	r6, [sp, #0]
 80102bc:	ea42 0103 	orr.w	r1, r2, r3
 80102c0:	9b06      	ldr	r3, [sp, #24]
 80102c2:	4319      	orrs	r1, r3
 80102c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80102c6:	d10d      	bne.n	80102e4 <_dtoa_r+0xa44>
 80102c8:	2b39      	cmp	r3, #57	@ 0x39
 80102ca:	d027      	beq.n	801031c <_dtoa_r+0xa7c>
 80102cc:	9a04      	ldr	r2, [sp, #16]
 80102ce:	2a00      	cmp	r2, #0
 80102d0:	dd01      	ble.n	80102d6 <_dtoa_r+0xa36>
 80102d2:	9b03      	ldr	r3, [sp, #12]
 80102d4:	3331      	adds	r3, #49	@ 0x31
 80102d6:	f88b 3000 	strb.w	r3, [fp]
 80102da:	e52e      	b.n	800fd3a <_dtoa_r+0x49a>
 80102dc:	4628      	mov	r0, r5
 80102de:	e7b9      	b.n	8010254 <_dtoa_r+0x9b4>
 80102e0:	2201      	movs	r2, #1
 80102e2:	e7e2      	b.n	80102aa <_dtoa_r+0xa0a>
 80102e4:	9904      	ldr	r1, [sp, #16]
 80102e6:	2900      	cmp	r1, #0
 80102e8:	db04      	blt.n	80102f4 <_dtoa_r+0xa54>
 80102ea:	9807      	ldr	r0, [sp, #28]
 80102ec:	4301      	orrs	r1, r0
 80102ee:	9806      	ldr	r0, [sp, #24]
 80102f0:	4301      	orrs	r1, r0
 80102f2:	d120      	bne.n	8010336 <_dtoa_r+0xa96>
 80102f4:	2a00      	cmp	r2, #0
 80102f6:	ddee      	ble.n	80102d6 <_dtoa_r+0xa36>
 80102f8:	9902      	ldr	r1, [sp, #8]
 80102fa:	9300      	str	r3, [sp, #0]
 80102fc:	2201      	movs	r2, #1
 80102fe:	4648      	mov	r0, r9
 8010300:	f000 fba4 	bl	8010a4c <__lshift>
 8010304:	4621      	mov	r1, r4
 8010306:	9002      	str	r0, [sp, #8]
 8010308:	f000 fc0c 	bl	8010b24 <__mcmp>
 801030c:	2800      	cmp	r0, #0
 801030e:	9b00      	ldr	r3, [sp, #0]
 8010310:	dc02      	bgt.n	8010318 <_dtoa_r+0xa78>
 8010312:	d1e0      	bne.n	80102d6 <_dtoa_r+0xa36>
 8010314:	07da      	lsls	r2, r3, #31
 8010316:	d5de      	bpl.n	80102d6 <_dtoa_r+0xa36>
 8010318:	2b39      	cmp	r3, #57	@ 0x39
 801031a:	d1da      	bne.n	80102d2 <_dtoa_r+0xa32>
 801031c:	2339      	movs	r3, #57	@ 0x39
 801031e:	f88b 3000 	strb.w	r3, [fp]
 8010322:	4633      	mov	r3, r6
 8010324:	461e      	mov	r6, r3
 8010326:	3b01      	subs	r3, #1
 8010328:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801032c:	2a39      	cmp	r2, #57	@ 0x39
 801032e:	d04e      	beq.n	80103ce <_dtoa_r+0xb2e>
 8010330:	3201      	adds	r2, #1
 8010332:	701a      	strb	r2, [r3, #0]
 8010334:	e501      	b.n	800fd3a <_dtoa_r+0x49a>
 8010336:	2a00      	cmp	r2, #0
 8010338:	dd03      	ble.n	8010342 <_dtoa_r+0xaa2>
 801033a:	2b39      	cmp	r3, #57	@ 0x39
 801033c:	d0ee      	beq.n	801031c <_dtoa_r+0xa7c>
 801033e:	3301      	adds	r3, #1
 8010340:	e7c9      	b.n	80102d6 <_dtoa_r+0xa36>
 8010342:	9a00      	ldr	r2, [sp, #0]
 8010344:	9908      	ldr	r1, [sp, #32]
 8010346:	f802 3c01 	strb.w	r3, [r2, #-1]
 801034a:	428a      	cmp	r2, r1
 801034c:	d028      	beq.n	80103a0 <_dtoa_r+0xb00>
 801034e:	9902      	ldr	r1, [sp, #8]
 8010350:	2300      	movs	r3, #0
 8010352:	220a      	movs	r2, #10
 8010354:	4648      	mov	r0, r9
 8010356:	f000 f9d5 	bl	8010704 <__multadd>
 801035a:	42af      	cmp	r7, r5
 801035c:	9002      	str	r0, [sp, #8]
 801035e:	f04f 0300 	mov.w	r3, #0
 8010362:	f04f 020a 	mov.w	r2, #10
 8010366:	4639      	mov	r1, r7
 8010368:	4648      	mov	r0, r9
 801036a:	d107      	bne.n	801037c <_dtoa_r+0xadc>
 801036c:	f000 f9ca 	bl	8010704 <__multadd>
 8010370:	4607      	mov	r7, r0
 8010372:	4605      	mov	r5, r0
 8010374:	9b00      	ldr	r3, [sp, #0]
 8010376:	3301      	adds	r3, #1
 8010378:	9300      	str	r3, [sp, #0]
 801037a:	e777      	b.n	801026c <_dtoa_r+0x9cc>
 801037c:	f000 f9c2 	bl	8010704 <__multadd>
 8010380:	4629      	mov	r1, r5
 8010382:	4607      	mov	r7, r0
 8010384:	2300      	movs	r3, #0
 8010386:	220a      	movs	r2, #10
 8010388:	4648      	mov	r0, r9
 801038a:	f000 f9bb 	bl	8010704 <__multadd>
 801038e:	4605      	mov	r5, r0
 8010390:	e7f0      	b.n	8010374 <_dtoa_r+0xad4>
 8010392:	f1bb 0f00 	cmp.w	fp, #0
 8010396:	bfcc      	ite	gt
 8010398:	465e      	movgt	r6, fp
 801039a:	2601      	movle	r6, #1
 801039c:	4456      	add	r6, sl
 801039e:	2700      	movs	r7, #0
 80103a0:	9902      	ldr	r1, [sp, #8]
 80103a2:	9300      	str	r3, [sp, #0]
 80103a4:	2201      	movs	r2, #1
 80103a6:	4648      	mov	r0, r9
 80103a8:	f000 fb50 	bl	8010a4c <__lshift>
 80103ac:	4621      	mov	r1, r4
 80103ae:	9002      	str	r0, [sp, #8]
 80103b0:	f000 fbb8 	bl	8010b24 <__mcmp>
 80103b4:	2800      	cmp	r0, #0
 80103b6:	dcb4      	bgt.n	8010322 <_dtoa_r+0xa82>
 80103b8:	d102      	bne.n	80103c0 <_dtoa_r+0xb20>
 80103ba:	9b00      	ldr	r3, [sp, #0]
 80103bc:	07db      	lsls	r3, r3, #31
 80103be:	d4b0      	bmi.n	8010322 <_dtoa_r+0xa82>
 80103c0:	4633      	mov	r3, r6
 80103c2:	461e      	mov	r6, r3
 80103c4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80103c8:	2a30      	cmp	r2, #48	@ 0x30
 80103ca:	d0fa      	beq.n	80103c2 <_dtoa_r+0xb22>
 80103cc:	e4b5      	b.n	800fd3a <_dtoa_r+0x49a>
 80103ce:	459a      	cmp	sl, r3
 80103d0:	d1a8      	bne.n	8010324 <_dtoa_r+0xa84>
 80103d2:	2331      	movs	r3, #49	@ 0x31
 80103d4:	f108 0801 	add.w	r8, r8, #1
 80103d8:	f88a 3000 	strb.w	r3, [sl]
 80103dc:	e4ad      	b.n	800fd3a <_dtoa_r+0x49a>
 80103de:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80103e0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 801043c <_dtoa_r+0xb9c>
 80103e4:	b11b      	cbz	r3, 80103ee <_dtoa_r+0xb4e>
 80103e6:	f10a 0308 	add.w	r3, sl, #8
 80103ea:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80103ec:	6013      	str	r3, [r2, #0]
 80103ee:	4650      	mov	r0, sl
 80103f0:	b017      	add	sp, #92	@ 0x5c
 80103f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80103f6:	9b07      	ldr	r3, [sp, #28]
 80103f8:	2b01      	cmp	r3, #1
 80103fa:	f77f ae2e 	ble.w	801005a <_dtoa_r+0x7ba>
 80103fe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010400:	9308      	str	r3, [sp, #32]
 8010402:	2001      	movs	r0, #1
 8010404:	e64d      	b.n	80100a2 <_dtoa_r+0x802>
 8010406:	f1bb 0f00 	cmp.w	fp, #0
 801040a:	f77f aed9 	ble.w	80101c0 <_dtoa_r+0x920>
 801040e:	4656      	mov	r6, sl
 8010410:	9802      	ldr	r0, [sp, #8]
 8010412:	4621      	mov	r1, r4
 8010414:	f7ff f9bb 	bl	800f78e <quorem>
 8010418:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 801041c:	f806 3b01 	strb.w	r3, [r6], #1
 8010420:	eba6 020a 	sub.w	r2, r6, sl
 8010424:	4593      	cmp	fp, r2
 8010426:	ddb4      	ble.n	8010392 <_dtoa_r+0xaf2>
 8010428:	9902      	ldr	r1, [sp, #8]
 801042a:	2300      	movs	r3, #0
 801042c:	220a      	movs	r2, #10
 801042e:	4648      	mov	r0, r9
 8010430:	f000 f968 	bl	8010704 <__multadd>
 8010434:	9002      	str	r0, [sp, #8]
 8010436:	e7eb      	b.n	8010410 <_dtoa_r+0xb70>
 8010438:	08012e61 	.word	0x08012e61
 801043c:	08012de5 	.word	0x08012de5

08010440 <_free_r>:
 8010440:	b538      	push	{r3, r4, r5, lr}
 8010442:	4605      	mov	r5, r0
 8010444:	2900      	cmp	r1, #0
 8010446:	d041      	beq.n	80104cc <_free_r+0x8c>
 8010448:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801044c:	1f0c      	subs	r4, r1, #4
 801044e:	2b00      	cmp	r3, #0
 8010450:	bfb8      	it	lt
 8010452:	18e4      	addlt	r4, r4, r3
 8010454:	f000 f8e8 	bl	8010628 <__malloc_lock>
 8010458:	4a1d      	ldr	r2, [pc, #116]	@ (80104d0 <_free_r+0x90>)
 801045a:	6813      	ldr	r3, [r2, #0]
 801045c:	b933      	cbnz	r3, 801046c <_free_r+0x2c>
 801045e:	6063      	str	r3, [r4, #4]
 8010460:	6014      	str	r4, [r2, #0]
 8010462:	4628      	mov	r0, r5
 8010464:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010468:	f000 b8e4 	b.w	8010634 <__malloc_unlock>
 801046c:	42a3      	cmp	r3, r4
 801046e:	d908      	bls.n	8010482 <_free_r+0x42>
 8010470:	6820      	ldr	r0, [r4, #0]
 8010472:	1821      	adds	r1, r4, r0
 8010474:	428b      	cmp	r3, r1
 8010476:	bf01      	itttt	eq
 8010478:	6819      	ldreq	r1, [r3, #0]
 801047a:	685b      	ldreq	r3, [r3, #4]
 801047c:	1809      	addeq	r1, r1, r0
 801047e:	6021      	streq	r1, [r4, #0]
 8010480:	e7ed      	b.n	801045e <_free_r+0x1e>
 8010482:	461a      	mov	r2, r3
 8010484:	685b      	ldr	r3, [r3, #4]
 8010486:	b10b      	cbz	r3, 801048c <_free_r+0x4c>
 8010488:	42a3      	cmp	r3, r4
 801048a:	d9fa      	bls.n	8010482 <_free_r+0x42>
 801048c:	6811      	ldr	r1, [r2, #0]
 801048e:	1850      	adds	r0, r2, r1
 8010490:	42a0      	cmp	r0, r4
 8010492:	d10b      	bne.n	80104ac <_free_r+0x6c>
 8010494:	6820      	ldr	r0, [r4, #0]
 8010496:	4401      	add	r1, r0
 8010498:	1850      	adds	r0, r2, r1
 801049a:	4283      	cmp	r3, r0
 801049c:	6011      	str	r1, [r2, #0]
 801049e:	d1e0      	bne.n	8010462 <_free_r+0x22>
 80104a0:	6818      	ldr	r0, [r3, #0]
 80104a2:	685b      	ldr	r3, [r3, #4]
 80104a4:	6053      	str	r3, [r2, #4]
 80104a6:	4408      	add	r0, r1
 80104a8:	6010      	str	r0, [r2, #0]
 80104aa:	e7da      	b.n	8010462 <_free_r+0x22>
 80104ac:	d902      	bls.n	80104b4 <_free_r+0x74>
 80104ae:	230c      	movs	r3, #12
 80104b0:	602b      	str	r3, [r5, #0]
 80104b2:	e7d6      	b.n	8010462 <_free_r+0x22>
 80104b4:	6820      	ldr	r0, [r4, #0]
 80104b6:	1821      	adds	r1, r4, r0
 80104b8:	428b      	cmp	r3, r1
 80104ba:	bf04      	itt	eq
 80104bc:	6819      	ldreq	r1, [r3, #0]
 80104be:	685b      	ldreq	r3, [r3, #4]
 80104c0:	6063      	str	r3, [r4, #4]
 80104c2:	bf04      	itt	eq
 80104c4:	1809      	addeq	r1, r1, r0
 80104c6:	6021      	streq	r1, [r4, #0]
 80104c8:	6054      	str	r4, [r2, #4]
 80104ca:	e7ca      	b.n	8010462 <_free_r+0x22>
 80104cc:	bd38      	pop	{r3, r4, r5, pc}
 80104ce:	bf00      	nop
 80104d0:	20005614 	.word	0x20005614

080104d4 <malloc>:
 80104d4:	4b02      	ldr	r3, [pc, #8]	@ (80104e0 <malloc+0xc>)
 80104d6:	4601      	mov	r1, r0
 80104d8:	6818      	ldr	r0, [r3, #0]
 80104da:	f000 b825 	b.w	8010528 <_malloc_r>
 80104de:	bf00      	nop
 80104e0:	2000002c 	.word	0x2000002c

080104e4 <sbrk_aligned>:
 80104e4:	b570      	push	{r4, r5, r6, lr}
 80104e6:	4e0f      	ldr	r6, [pc, #60]	@ (8010524 <sbrk_aligned+0x40>)
 80104e8:	460c      	mov	r4, r1
 80104ea:	6831      	ldr	r1, [r6, #0]
 80104ec:	4605      	mov	r5, r0
 80104ee:	b911      	cbnz	r1, 80104f6 <sbrk_aligned+0x12>
 80104f0:	f000 fe3e 	bl	8011170 <_sbrk_r>
 80104f4:	6030      	str	r0, [r6, #0]
 80104f6:	4621      	mov	r1, r4
 80104f8:	4628      	mov	r0, r5
 80104fa:	f000 fe39 	bl	8011170 <_sbrk_r>
 80104fe:	1c43      	adds	r3, r0, #1
 8010500:	d103      	bne.n	801050a <sbrk_aligned+0x26>
 8010502:	f04f 34ff 	mov.w	r4, #4294967295
 8010506:	4620      	mov	r0, r4
 8010508:	bd70      	pop	{r4, r5, r6, pc}
 801050a:	1cc4      	adds	r4, r0, #3
 801050c:	f024 0403 	bic.w	r4, r4, #3
 8010510:	42a0      	cmp	r0, r4
 8010512:	d0f8      	beq.n	8010506 <sbrk_aligned+0x22>
 8010514:	1a21      	subs	r1, r4, r0
 8010516:	4628      	mov	r0, r5
 8010518:	f000 fe2a 	bl	8011170 <_sbrk_r>
 801051c:	3001      	adds	r0, #1
 801051e:	d1f2      	bne.n	8010506 <sbrk_aligned+0x22>
 8010520:	e7ef      	b.n	8010502 <sbrk_aligned+0x1e>
 8010522:	bf00      	nop
 8010524:	20005610 	.word	0x20005610

08010528 <_malloc_r>:
 8010528:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801052c:	1ccd      	adds	r5, r1, #3
 801052e:	f025 0503 	bic.w	r5, r5, #3
 8010532:	3508      	adds	r5, #8
 8010534:	2d0c      	cmp	r5, #12
 8010536:	bf38      	it	cc
 8010538:	250c      	movcc	r5, #12
 801053a:	2d00      	cmp	r5, #0
 801053c:	4606      	mov	r6, r0
 801053e:	db01      	blt.n	8010544 <_malloc_r+0x1c>
 8010540:	42a9      	cmp	r1, r5
 8010542:	d904      	bls.n	801054e <_malloc_r+0x26>
 8010544:	230c      	movs	r3, #12
 8010546:	6033      	str	r3, [r6, #0]
 8010548:	2000      	movs	r0, #0
 801054a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801054e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8010624 <_malloc_r+0xfc>
 8010552:	f000 f869 	bl	8010628 <__malloc_lock>
 8010556:	f8d8 3000 	ldr.w	r3, [r8]
 801055a:	461c      	mov	r4, r3
 801055c:	bb44      	cbnz	r4, 80105b0 <_malloc_r+0x88>
 801055e:	4629      	mov	r1, r5
 8010560:	4630      	mov	r0, r6
 8010562:	f7ff ffbf 	bl	80104e4 <sbrk_aligned>
 8010566:	1c43      	adds	r3, r0, #1
 8010568:	4604      	mov	r4, r0
 801056a:	d158      	bne.n	801061e <_malloc_r+0xf6>
 801056c:	f8d8 4000 	ldr.w	r4, [r8]
 8010570:	4627      	mov	r7, r4
 8010572:	2f00      	cmp	r7, #0
 8010574:	d143      	bne.n	80105fe <_malloc_r+0xd6>
 8010576:	2c00      	cmp	r4, #0
 8010578:	d04b      	beq.n	8010612 <_malloc_r+0xea>
 801057a:	6823      	ldr	r3, [r4, #0]
 801057c:	4639      	mov	r1, r7
 801057e:	4630      	mov	r0, r6
 8010580:	eb04 0903 	add.w	r9, r4, r3
 8010584:	f000 fdf4 	bl	8011170 <_sbrk_r>
 8010588:	4581      	cmp	r9, r0
 801058a:	d142      	bne.n	8010612 <_malloc_r+0xea>
 801058c:	6821      	ldr	r1, [r4, #0]
 801058e:	1a6d      	subs	r5, r5, r1
 8010590:	4629      	mov	r1, r5
 8010592:	4630      	mov	r0, r6
 8010594:	f7ff ffa6 	bl	80104e4 <sbrk_aligned>
 8010598:	3001      	adds	r0, #1
 801059a:	d03a      	beq.n	8010612 <_malloc_r+0xea>
 801059c:	6823      	ldr	r3, [r4, #0]
 801059e:	442b      	add	r3, r5
 80105a0:	6023      	str	r3, [r4, #0]
 80105a2:	f8d8 3000 	ldr.w	r3, [r8]
 80105a6:	685a      	ldr	r2, [r3, #4]
 80105a8:	bb62      	cbnz	r2, 8010604 <_malloc_r+0xdc>
 80105aa:	f8c8 7000 	str.w	r7, [r8]
 80105ae:	e00f      	b.n	80105d0 <_malloc_r+0xa8>
 80105b0:	6822      	ldr	r2, [r4, #0]
 80105b2:	1b52      	subs	r2, r2, r5
 80105b4:	d420      	bmi.n	80105f8 <_malloc_r+0xd0>
 80105b6:	2a0b      	cmp	r2, #11
 80105b8:	d917      	bls.n	80105ea <_malloc_r+0xc2>
 80105ba:	1961      	adds	r1, r4, r5
 80105bc:	42a3      	cmp	r3, r4
 80105be:	6025      	str	r5, [r4, #0]
 80105c0:	bf18      	it	ne
 80105c2:	6059      	strne	r1, [r3, #4]
 80105c4:	6863      	ldr	r3, [r4, #4]
 80105c6:	bf08      	it	eq
 80105c8:	f8c8 1000 	streq.w	r1, [r8]
 80105cc:	5162      	str	r2, [r4, r5]
 80105ce:	604b      	str	r3, [r1, #4]
 80105d0:	4630      	mov	r0, r6
 80105d2:	f000 f82f 	bl	8010634 <__malloc_unlock>
 80105d6:	f104 000b 	add.w	r0, r4, #11
 80105da:	1d23      	adds	r3, r4, #4
 80105dc:	f020 0007 	bic.w	r0, r0, #7
 80105e0:	1ac2      	subs	r2, r0, r3
 80105e2:	bf1c      	itt	ne
 80105e4:	1a1b      	subne	r3, r3, r0
 80105e6:	50a3      	strne	r3, [r4, r2]
 80105e8:	e7af      	b.n	801054a <_malloc_r+0x22>
 80105ea:	6862      	ldr	r2, [r4, #4]
 80105ec:	42a3      	cmp	r3, r4
 80105ee:	bf0c      	ite	eq
 80105f0:	f8c8 2000 	streq.w	r2, [r8]
 80105f4:	605a      	strne	r2, [r3, #4]
 80105f6:	e7eb      	b.n	80105d0 <_malloc_r+0xa8>
 80105f8:	4623      	mov	r3, r4
 80105fa:	6864      	ldr	r4, [r4, #4]
 80105fc:	e7ae      	b.n	801055c <_malloc_r+0x34>
 80105fe:	463c      	mov	r4, r7
 8010600:	687f      	ldr	r7, [r7, #4]
 8010602:	e7b6      	b.n	8010572 <_malloc_r+0x4a>
 8010604:	461a      	mov	r2, r3
 8010606:	685b      	ldr	r3, [r3, #4]
 8010608:	42a3      	cmp	r3, r4
 801060a:	d1fb      	bne.n	8010604 <_malloc_r+0xdc>
 801060c:	2300      	movs	r3, #0
 801060e:	6053      	str	r3, [r2, #4]
 8010610:	e7de      	b.n	80105d0 <_malloc_r+0xa8>
 8010612:	230c      	movs	r3, #12
 8010614:	6033      	str	r3, [r6, #0]
 8010616:	4630      	mov	r0, r6
 8010618:	f000 f80c 	bl	8010634 <__malloc_unlock>
 801061c:	e794      	b.n	8010548 <_malloc_r+0x20>
 801061e:	6005      	str	r5, [r0, #0]
 8010620:	e7d6      	b.n	80105d0 <_malloc_r+0xa8>
 8010622:	bf00      	nop
 8010624:	20005614 	.word	0x20005614

08010628 <__malloc_lock>:
 8010628:	4801      	ldr	r0, [pc, #4]	@ (8010630 <__malloc_lock+0x8>)
 801062a:	f7ff b8a0 	b.w	800f76e <__retarget_lock_acquire_recursive>
 801062e:	bf00      	nop
 8010630:	2000560c 	.word	0x2000560c

08010634 <__malloc_unlock>:
 8010634:	4801      	ldr	r0, [pc, #4]	@ (801063c <__malloc_unlock+0x8>)
 8010636:	f7ff b89b 	b.w	800f770 <__retarget_lock_release_recursive>
 801063a:	bf00      	nop
 801063c:	2000560c 	.word	0x2000560c

08010640 <_Balloc>:
 8010640:	b570      	push	{r4, r5, r6, lr}
 8010642:	69c6      	ldr	r6, [r0, #28]
 8010644:	4604      	mov	r4, r0
 8010646:	460d      	mov	r5, r1
 8010648:	b976      	cbnz	r6, 8010668 <_Balloc+0x28>
 801064a:	2010      	movs	r0, #16
 801064c:	f7ff ff42 	bl	80104d4 <malloc>
 8010650:	4602      	mov	r2, r0
 8010652:	61e0      	str	r0, [r4, #28]
 8010654:	b920      	cbnz	r0, 8010660 <_Balloc+0x20>
 8010656:	4b18      	ldr	r3, [pc, #96]	@ (80106b8 <_Balloc+0x78>)
 8010658:	4818      	ldr	r0, [pc, #96]	@ (80106bc <_Balloc+0x7c>)
 801065a:	216b      	movs	r1, #107	@ 0x6b
 801065c:	f000 fd98 	bl	8011190 <__assert_func>
 8010660:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010664:	6006      	str	r6, [r0, #0]
 8010666:	60c6      	str	r6, [r0, #12]
 8010668:	69e6      	ldr	r6, [r4, #28]
 801066a:	68f3      	ldr	r3, [r6, #12]
 801066c:	b183      	cbz	r3, 8010690 <_Balloc+0x50>
 801066e:	69e3      	ldr	r3, [r4, #28]
 8010670:	68db      	ldr	r3, [r3, #12]
 8010672:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010676:	b9b8      	cbnz	r0, 80106a8 <_Balloc+0x68>
 8010678:	2101      	movs	r1, #1
 801067a:	fa01 f605 	lsl.w	r6, r1, r5
 801067e:	1d72      	adds	r2, r6, #5
 8010680:	0092      	lsls	r2, r2, #2
 8010682:	4620      	mov	r0, r4
 8010684:	f000 fda2 	bl	80111cc <_calloc_r>
 8010688:	b160      	cbz	r0, 80106a4 <_Balloc+0x64>
 801068a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801068e:	e00e      	b.n	80106ae <_Balloc+0x6e>
 8010690:	2221      	movs	r2, #33	@ 0x21
 8010692:	2104      	movs	r1, #4
 8010694:	4620      	mov	r0, r4
 8010696:	f000 fd99 	bl	80111cc <_calloc_r>
 801069a:	69e3      	ldr	r3, [r4, #28]
 801069c:	60f0      	str	r0, [r6, #12]
 801069e:	68db      	ldr	r3, [r3, #12]
 80106a0:	2b00      	cmp	r3, #0
 80106a2:	d1e4      	bne.n	801066e <_Balloc+0x2e>
 80106a4:	2000      	movs	r0, #0
 80106a6:	bd70      	pop	{r4, r5, r6, pc}
 80106a8:	6802      	ldr	r2, [r0, #0]
 80106aa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80106ae:	2300      	movs	r3, #0
 80106b0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80106b4:	e7f7      	b.n	80106a6 <_Balloc+0x66>
 80106b6:	bf00      	nop
 80106b8:	08012df2 	.word	0x08012df2
 80106bc:	08012e72 	.word	0x08012e72

080106c0 <_Bfree>:
 80106c0:	b570      	push	{r4, r5, r6, lr}
 80106c2:	69c6      	ldr	r6, [r0, #28]
 80106c4:	4605      	mov	r5, r0
 80106c6:	460c      	mov	r4, r1
 80106c8:	b976      	cbnz	r6, 80106e8 <_Bfree+0x28>
 80106ca:	2010      	movs	r0, #16
 80106cc:	f7ff ff02 	bl	80104d4 <malloc>
 80106d0:	4602      	mov	r2, r0
 80106d2:	61e8      	str	r0, [r5, #28]
 80106d4:	b920      	cbnz	r0, 80106e0 <_Bfree+0x20>
 80106d6:	4b09      	ldr	r3, [pc, #36]	@ (80106fc <_Bfree+0x3c>)
 80106d8:	4809      	ldr	r0, [pc, #36]	@ (8010700 <_Bfree+0x40>)
 80106da:	218f      	movs	r1, #143	@ 0x8f
 80106dc:	f000 fd58 	bl	8011190 <__assert_func>
 80106e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80106e4:	6006      	str	r6, [r0, #0]
 80106e6:	60c6      	str	r6, [r0, #12]
 80106e8:	b13c      	cbz	r4, 80106fa <_Bfree+0x3a>
 80106ea:	69eb      	ldr	r3, [r5, #28]
 80106ec:	6862      	ldr	r2, [r4, #4]
 80106ee:	68db      	ldr	r3, [r3, #12]
 80106f0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80106f4:	6021      	str	r1, [r4, #0]
 80106f6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80106fa:	bd70      	pop	{r4, r5, r6, pc}
 80106fc:	08012df2 	.word	0x08012df2
 8010700:	08012e72 	.word	0x08012e72

08010704 <__multadd>:
 8010704:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010708:	690d      	ldr	r5, [r1, #16]
 801070a:	4607      	mov	r7, r0
 801070c:	460c      	mov	r4, r1
 801070e:	461e      	mov	r6, r3
 8010710:	f101 0c14 	add.w	ip, r1, #20
 8010714:	2000      	movs	r0, #0
 8010716:	f8dc 3000 	ldr.w	r3, [ip]
 801071a:	b299      	uxth	r1, r3
 801071c:	fb02 6101 	mla	r1, r2, r1, r6
 8010720:	0c1e      	lsrs	r6, r3, #16
 8010722:	0c0b      	lsrs	r3, r1, #16
 8010724:	fb02 3306 	mla	r3, r2, r6, r3
 8010728:	b289      	uxth	r1, r1
 801072a:	3001      	adds	r0, #1
 801072c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010730:	4285      	cmp	r5, r0
 8010732:	f84c 1b04 	str.w	r1, [ip], #4
 8010736:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801073a:	dcec      	bgt.n	8010716 <__multadd+0x12>
 801073c:	b30e      	cbz	r6, 8010782 <__multadd+0x7e>
 801073e:	68a3      	ldr	r3, [r4, #8]
 8010740:	42ab      	cmp	r3, r5
 8010742:	dc19      	bgt.n	8010778 <__multadd+0x74>
 8010744:	6861      	ldr	r1, [r4, #4]
 8010746:	4638      	mov	r0, r7
 8010748:	3101      	adds	r1, #1
 801074a:	f7ff ff79 	bl	8010640 <_Balloc>
 801074e:	4680      	mov	r8, r0
 8010750:	b928      	cbnz	r0, 801075e <__multadd+0x5a>
 8010752:	4602      	mov	r2, r0
 8010754:	4b0c      	ldr	r3, [pc, #48]	@ (8010788 <__multadd+0x84>)
 8010756:	480d      	ldr	r0, [pc, #52]	@ (801078c <__multadd+0x88>)
 8010758:	21ba      	movs	r1, #186	@ 0xba
 801075a:	f000 fd19 	bl	8011190 <__assert_func>
 801075e:	6922      	ldr	r2, [r4, #16]
 8010760:	3202      	adds	r2, #2
 8010762:	f104 010c 	add.w	r1, r4, #12
 8010766:	0092      	lsls	r2, r2, #2
 8010768:	300c      	adds	r0, #12
 801076a:	f7ff f802 	bl	800f772 <memcpy>
 801076e:	4621      	mov	r1, r4
 8010770:	4638      	mov	r0, r7
 8010772:	f7ff ffa5 	bl	80106c0 <_Bfree>
 8010776:	4644      	mov	r4, r8
 8010778:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801077c:	3501      	adds	r5, #1
 801077e:	615e      	str	r6, [r3, #20]
 8010780:	6125      	str	r5, [r4, #16]
 8010782:	4620      	mov	r0, r4
 8010784:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010788:	08012e61 	.word	0x08012e61
 801078c:	08012e72 	.word	0x08012e72

08010790 <__hi0bits>:
 8010790:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8010794:	4603      	mov	r3, r0
 8010796:	bf36      	itet	cc
 8010798:	0403      	lslcc	r3, r0, #16
 801079a:	2000      	movcs	r0, #0
 801079c:	2010      	movcc	r0, #16
 801079e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80107a2:	bf3c      	itt	cc
 80107a4:	021b      	lslcc	r3, r3, #8
 80107a6:	3008      	addcc	r0, #8
 80107a8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80107ac:	bf3c      	itt	cc
 80107ae:	011b      	lslcc	r3, r3, #4
 80107b0:	3004      	addcc	r0, #4
 80107b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80107b6:	bf3c      	itt	cc
 80107b8:	009b      	lslcc	r3, r3, #2
 80107ba:	3002      	addcc	r0, #2
 80107bc:	2b00      	cmp	r3, #0
 80107be:	db05      	blt.n	80107cc <__hi0bits+0x3c>
 80107c0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80107c4:	f100 0001 	add.w	r0, r0, #1
 80107c8:	bf08      	it	eq
 80107ca:	2020      	moveq	r0, #32
 80107cc:	4770      	bx	lr

080107ce <__lo0bits>:
 80107ce:	6803      	ldr	r3, [r0, #0]
 80107d0:	4602      	mov	r2, r0
 80107d2:	f013 0007 	ands.w	r0, r3, #7
 80107d6:	d00b      	beq.n	80107f0 <__lo0bits+0x22>
 80107d8:	07d9      	lsls	r1, r3, #31
 80107da:	d421      	bmi.n	8010820 <__lo0bits+0x52>
 80107dc:	0798      	lsls	r0, r3, #30
 80107de:	bf49      	itett	mi
 80107e0:	085b      	lsrmi	r3, r3, #1
 80107e2:	089b      	lsrpl	r3, r3, #2
 80107e4:	2001      	movmi	r0, #1
 80107e6:	6013      	strmi	r3, [r2, #0]
 80107e8:	bf5c      	itt	pl
 80107ea:	6013      	strpl	r3, [r2, #0]
 80107ec:	2002      	movpl	r0, #2
 80107ee:	4770      	bx	lr
 80107f0:	b299      	uxth	r1, r3
 80107f2:	b909      	cbnz	r1, 80107f8 <__lo0bits+0x2a>
 80107f4:	0c1b      	lsrs	r3, r3, #16
 80107f6:	2010      	movs	r0, #16
 80107f8:	b2d9      	uxtb	r1, r3
 80107fa:	b909      	cbnz	r1, 8010800 <__lo0bits+0x32>
 80107fc:	3008      	adds	r0, #8
 80107fe:	0a1b      	lsrs	r3, r3, #8
 8010800:	0719      	lsls	r1, r3, #28
 8010802:	bf04      	itt	eq
 8010804:	091b      	lsreq	r3, r3, #4
 8010806:	3004      	addeq	r0, #4
 8010808:	0799      	lsls	r1, r3, #30
 801080a:	bf04      	itt	eq
 801080c:	089b      	lsreq	r3, r3, #2
 801080e:	3002      	addeq	r0, #2
 8010810:	07d9      	lsls	r1, r3, #31
 8010812:	d403      	bmi.n	801081c <__lo0bits+0x4e>
 8010814:	085b      	lsrs	r3, r3, #1
 8010816:	f100 0001 	add.w	r0, r0, #1
 801081a:	d003      	beq.n	8010824 <__lo0bits+0x56>
 801081c:	6013      	str	r3, [r2, #0]
 801081e:	4770      	bx	lr
 8010820:	2000      	movs	r0, #0
 8010822:	4770      	bx	lr
 8010824:	2020      	movs	r0, #32
 8010826:	4770      	bx	lr

08010828 <__i2b>:
 8010828:	b510      	push	{r4, lr}
 801082a:	460c      	mov	r4, r1
 801082c:	2101      	movs	r1, #1
 801082e:	f7ff ff07 	bl	8010640 <_Balloc>
 8010832:	4602      	mov	r2, r0
 8010834:	b928      	cbnz	r0, 8010842 <__i2b+0x1a>
 8010836:	4b05      	ldr	r3, [pc, #20]	@ (801084c <__i2b+0x24>)
 8010838:	4805      	ldr	r0, [pc, #20]	@ (8010850 <__i2b+0x28>)
 801083a:	f240 1145 	movw	r1, #325	@ 0x145
 801083e:	f000 fca7 	bl	8011190 <__assert_func>
 8010842:	2301      	movs	r3, #1
 8010844:	6144      	str	r4, [r0, #20]
 8010846:	6103      	str	r3, [r0, #16]
 8010848:	bd10      	pop	{r4, pc}
 801084a:	bf00      	nop
 801084c:	08012e61 	.word	0x08012e61
 8010850:	08012e72 	.word	0x08012e72

08010854 <__multiply>:
 8010854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010858:	4617      	mov	r7, r2
 801085a:	690a      	ldr	r2, [r1, #16]
 801085c:	693b      	ldr	r3, [r7, #16]
 801085e:	429a      	cmp	r2, r3
 8010860:	bfa8      	it	ge
 8010862:	463b      	movge	r3, r7
 8010864:	4689      	mov	r9, r1
 8010866:	bfa4      	itt	ge
 8010868:	460f      	movge	r7, r1
 801086a:	4699      	movge	r9, r3
 801086c:	693d      	ldr	r5, [r7, #16]
 801086e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8010872:	68bb      	ldr	r3, [r7, #8]
 8010874:	6879      	ldr	r1, [r7, #4]
 8010876:	eb05 060a 	add.w	r6, r5, sl
 801087a:	42b3      	cmp	r3, r6
 801087c:	b085      	sub	sp, #20
 801087e:	bfb8      	it	lt
 8010880:	3101      	addlt	r1, #1
 8010882:	f7ff fedd 	bl	8010640 <_Balloc>
 8010886:	b930      	cbnz	r0, 8010896 <__multiply+0x42>
 8010888:	4602      	mov	r2, r0
 801088a:	4b41      	ldr	r3, [pc, #260]	@ (8010990 <__multiply+0x13c>)
 801088c:	4841      	ldr	r0, [pc, #260]	@ (8010994 <__multiply+0x140>)
 801088e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8010892:	f000 fc7d 	bl	8011190 <__assert_func>
 8010896:	f100 0414 	add.w	r4, r0, #20
 801089a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 801089e:	4623      	mov	r3, r4
 80108a0:	2200      	movs	r2, #0
 80108a2:	4573      	cmp	r3, lr
 80108a4:	d320      	bcc.n	80108e8 <__multiply+0x94>
 80108a6:	f107 0814 	add.w	r8, r7, #20
 80108aa:	f109 0114 	add.w	r1, r9, #20
 80108ae:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80108b2:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80108b6:	9302      	str	r3, [sp, #8]
 80108b8:	1beb      	subs	r3, r5, r7
 80108ba:	3b15      	subs	r3, #21
 80108bc:	f023 0303 	bic.w	r3, r3, #3
 80108c0:	3304      	adds	r3, #4
 80108c2:	3715      	adds	r7, #21
 80108c4:	42bd      	cmp	r5, r7
 80108c6:	bf38      	it	cc
 80108c8:	2304      	movcc	r3, #4
 80108ca:	9301      	str	r3, [sp, #4]
 80108cc:	9b02      	ldr	r3, [sp, #8]
 80108ce:	9103      	str	r1, [sp, #12]
 80108d0:	428b      	cmp	r3, r1
 80108d2:	d80c      	bhi.n	80108ee <__multiply+0x9a>
 80108d4:	2e00      	cmp	r6, #0
 80108d6:	dd03      	ble.n	80108e0 <__multiply+0x8c>
 80108d8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80108dc:	2b00      	cmp	r3, #0
 80108de:	d055      	beq.n	801098c <__multiply+0x138>
 80108e0:	6106      	str	r6, [r0, #16]
 80108e2:	b005      	add	sp, #20
 80108e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80108e8:	f843 2b04 	str.w	r2, [r3], #4
 80108ec:	e7d9      	b.n	80108a2 <__multiply+0x4e>
 80108ee:	f8b1 a000 	ldrh.w	sl, [r1]
 80108f2:	f1ba 0f00 	cmp.w	sl, #0
 80108f6:	d01f      	beq.n	8010938 <__multiply+0xe4>
 80108f8:	46c4      	mov	ip, r8
 80108fa:	46a1      	mov	r9, r4
 80108fc:	2700      	movs	r7, #0
 80108fe:	f85c 2b04 	ldr.w	r2, [ip], #4
 8010902:	f8d9 3000 	ldr.w	r3, [r9]
 8010906:	fa1f fb82 	uxth.w	fp, r2
 801090a:	b29b      	uxth	r3, r3
 801090c:	fb0a 330b 	mla	r3, sl, fp, r3
 8010910:	443b      	add	r3, r7
 8010912:	f8d9 7000 	ldr.w	r7, [r9]
 8010916:	0c12      	lsrs	r2, r2, #16
 8010918:	0c3f      	lsrs	r7, r7, #16
 801091a:	fb0a 7202 	mla	r2, sl, r2, r7
 801091e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8010922:	b29b      	uxth	r3, r3
 8010924:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010928:	4565      	cmp	r5, ip
 801092a:	f849 3b04 	str.w	r3, [r9], #4
 801092e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8010932:	d8e4      	bhi.n	80108fe <__multiply+0xaa>
 8010934:	9b01      	ldr	r3, [sp, #4]
 8010936:	50e7      	str	r7, [r4, r3]
 8010938:	9b03      	ldr	r3, [sp, #12]
 801093a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801093e:	3104      	adds	r1, #4
 8010940:	f1b9 0f00 	cmp.w	r9, #0
 8010944:	d020      	beq.n	8010988 <__multiply+0x134>
 8010946:	6823      	ldr	r3, [r4, #0]
 8010948:	4647      	mov	r7, r8
 801094a:	46a4      	mov	ip, r4
 801094c:	f04f 0a00 	mov.w	sl, #0
 8010950:	f8b7 b000 	ldrh.w	fp, [r7]
 8010954:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8010958:	fb09 220b 	mla	r2, r9, fp, r2
 801095c:	4452      	add	r2, sl
 801095e:	b29b      	uxth	r3, r3
 8010960:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010964:	f84c 3b04 	str.w	r3, [ip], #4
 8010968:	f857 3b04 	ldr.w	r3, [r7], #4
 801096c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010970:	f8bc 3000 	ldrh.w	r3, [ip]
 8010974:	fb09 330a 	mla	r3, r9, sl, r3
 8010978:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 801097c:	42bd      	cmp	r5, r7
 801097e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010982:	d8e5      	bhi.n	8010950 <__multiply+0xfc>
 8010984:	9a01      	ldr	r2, [sp, #4]
 8010986:	50a3      	str	r3, [r4, r2]
 8010988:	3404      	adds	r4, #4
 801098a:	e79f      	b.n	80108cc <__multiply+0x78>
 801098c:	3e01      	subs	r6, #1
 801098e:	e7a1      	b.n	80108d4 <__multiply+0x80>
 8010990:	08012e61 	.word	0x08012e61
 8010994:	08012e72 	.word	0x08012e72

08010998 <__pow5mult>:
 8010998:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801099c:	4615      	mov	r5, r2
 801099e:	f012 0203 	ands.w	r2, r2, #3
 80109a2:	4607      	mov	r7, r0
 80109a4:	460e      	mov	r6, r1
 80109a6:	d007      	beq.n	80109b8 <__pow5mult+0x20>
 80109a8:	4c25      	ldr	r4, [pc, #148]	@ (8010a40 <__pow5mult+0xa8>)
 80109aa:	3a01      	subs	r2, #1
 80109ac:	2300      	movs	r3, #0
 80109ae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80109b2:	f7ff fea7 	bl	8010704 <__multadd>
 80109b6:	4606      	mov	r6, r0
 80109b8:	10ad      	asrs	r5, r5, #2
 80109ba:	d03d      	beq.n	8010a38 <__pow5mult+0xa0>
 80109bc:	69fc      	ldr	r4, [r7, #28]
 80109be:	b97c      	cbnz	r4, 80109e0 <__pow5mult+0x48>
 80109c0:	2010      	movs	r0, #16
 80109c2:	f7ff fd87 	bl	80104d4 <malloc>
 80109c6:	4602      	mov	r2, r0
 80109c8:	61f8      	str	r0, [r7, #28]
 80109ca:	b928      	cbnz	r0, 80109d8 <__pow5mult+0x40>
 80109cc:	4b1d      	ldr	r3, [pc, #116]	@ (8010a44 <__pow5mult+0xac>)
 80109ce:	481e      	ldr	r0, [pc, #120]	@ (8010a48 <__pow5mult+0xb0>)
 80109d0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80109d4:	f000 fbdc 	bl	8011190 <__assert_func>
 80109d8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80109dc:	6004      	str	r4, [r0, #0]
 80109de:	60c4      	str	r4, [r0, #12]
 80109e0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80109e4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80109e8:	b94c      	cbnz	r4, 80109fe <__pow5mult+0x66>
 80109ea:	f240 2171 	movw	r1, #625	@ 0x271
 80109ee:	4638      	mov	r0, r7
 80109f0:	f7ff ff1a 	bl	8010828 <__i2b>
 80109f4:	2300      	movs	r3, #0
 80109f6:	f8c8 0008 	str.w	r0, [r8, #8]
 80109fa:	4604      	mov	r4, r0
 80109fc:	6003      	str	r3, [r0, #0]
 80109fe:	f04f 0900 	mov.w	r9, #0
 8010a02:	07eb      	lsls	r3, r5, #31
 8010a04:	d50a      	bpl.n	8010a1c <__pow5mult+0x84>
 8010a06:	4631      	mov	r1, r6
 8010a08:	4622      	mov	r2, r4
 8010a0a:	4638      	mov	r0, r7
 8010a0c:	f7ff ff22 	bl	8010854 <__multiply>
 8010a10:	4631      	mov	r1, r6
 8010a12:	4680      	mov	r8, r0
 8010a14:	4638      	mov	r0, r7
 8010a16:	f7ff fe53 	bl	80106c0 <_Bfree>
 8010a1a:	4646      	mov	r6, r8
 8010a1c:	106d      	asrs	r5, r5, #1
 8010a1e:	d00b      	beq.n	8010a38 <__pow5mult+0xa0>
 8010a20:	6820      	ldr	r0, [r4, #0]
 8010a22:	b938      	cbnz	r0, 8010a34 <__pow5mult+0x9c>
 8010a24:	4622      	mov	r2, r4
 8010a26:	4621      	mov	r1, r4
 8010a28:	4638      	mov	r0, r7
 8010a2a:	f7ff ff13 	bl	8010854 <__multiply>
 8010a2e:	6020      	str	r0, [r4, #0]
 8010a30:	f8c0 9000 	str.w	r9, [r0]
 8010a34:	4604      	mov	r4, r0
 8010a36:	e7e4      	b.n	8010a02 <__pow5mult+0x6a>
 8010a38:	4630      	mov	r0, r6
 8010a3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010a3e:	bf00      	nop
 8010a40:	08012f24 	.word	0x08012f24
 8010a44:	08012df2 	.word	0x08012df2
 8010a48:	08012e72 	.word	0x08012e72

08010a4c <__lshift>:
 8010a4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010a50:	460c      	mov	r4, r1
 8010a52:	6849      	ldr	r1, [r1, #4]
 8010a54:	6923      	ldr	r3, [r4, #16]
 8010a56:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010a5a:	68a3      	ldr	r3, [r4, #8]
 8010a5c:	4607      	mov	r7, r0
 8010a5e:	4691      	mov	r9, r2
 8010a60:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010a64:	f108 0601 	add.w	r6, r8, #1
 8010a68:	42b3      	cmp	r3, r6
 8010a6a:	db0b      	blt.n	8010a84 <__lshift+0x38>
 8010a6c:	4638      	mov	r0, r7
 8010a6e:	f7ff fde7 	bl	8010640 <_Balloc>
 8010a72:	4605      	mov	r5, r0
 8010a74:	b948      	cbnz	r0, 8010a8a <__lshift+0x3e>
 8010a76:	4602      	mov	r2, r0
 8010a78:	4b28      	ldr	r3, [pc, #160]	@ (8010b1c <__lshift+0xd0>)
 8010a7a:	4829      	ldr	r0, [pc, #164]	@ (8010b20 <__lshift+0xd4>)
 8010a7c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8010a80:	f000 fb86 	bl	8011190 <__assert_func>
 8010a84:	3101      	adds	r1, #1
 8010a86:	005b      	lsls	r3, r3, #1
 8010a88:	e7ee      	b.n	8010a68 <__lshift+0x1c>
 8010a8a:	2300      	movs	r3, #0
 8010a8c:	f100 0114 	add.w	r1, r0, #20
 8010a90:	f100 0210 	add.w	r2, r0, #16
 8010a94:	4618      	mov	r0, r3
 8010a96:	4553      	cmp	r3, sl
 8010a98:	db33      	blt.n	8010b02 <__lshift+0xb6>
 8010a9a:	6920      	ldr	r0, [r4, #16]
 8010a9c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010aa0:	f104 0314 	add.w	r3, r4, #20
 8010aa4:	f019 091f 	ands.w	r9, r9, #31
 8010aa8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010aac:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010ab0:	d02b      	beq.n	8010b0a <__lshift+0xbe>
 8010ab2:	f1c9 0e20 	rsb	lr, r9, #32
 8010ab6:	468a      	mov	sl, r1
 8010ab8:	2200      	movs	r2, #0
 8010aba:	6818      	ldr	r0, [r3, #0]
 8010abc:	fa00 f009 	lsl.w	r0, r0, r9
 8010ac0:	4310      	orrs	r0, r2
 8010ac2:	f84a 0b04 	str.w	r0, [sl], #4
 8010ac6:	f853 2b04 	ldr.w	r2, [r3], #4
 8010aca:	459c      	cmp	ip, r3
 8010acc:	fa22 f20e 	lsr.w	r2, r2, lr
 8010ad0:	d8f3      	bhi.n	8010aba <__lshift+0x6e>
 8010ad2:	ebac 0304 	sub.w	r3, ip, r4
 8010ad6:	3b15      	subs	r3, #21
 8010ad8:	f023 0303 	bic.w	r3, r3, #3
 8010adc:	3304      	adds	r3, #4
 8010ade:	f104 0015 	add.w	r0, r4, #21
 8010ae2:	4560      	cmp	r0, ip
 8010ae4:	bf88      	it	hi
 8010ae6:	2304      	movhi	r3, #4
 8010ae8:	50ca      	str	r2, [r1, r3]
 8010aea:	b10a      	cbz	r2, 8010af0 <__lshift+0xa4>
 8010aec:	f108 0602 	add.w	r6, r8, #2
 8010af0:	3e01      	subs	r6, #1
 8010af2:	4638      	mov	r0, r7
 8010af4:	612e      	str	r6, [r5, #16]
 8010af6:	4621      	mov	r1, r4
 8010af8:	f7ff fde2 	bl	80106c0 <_Bfree>
 8010afc:	4628      	mov	r0, r5
 8010afe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010b02:	f842 0f04 	str.w	r0, [r2, #4]!
 8010b06:	3301      	adds	r3, #1
 8010b08:	e7c5      	b.n	8010a96 <__lshift+0x4a>
 8010b0a:	3904      	subs	r1, #4
 8010b0c:	f853 2b04 	ldr.w	r2, [r3], #4
 8010b10:	f841 2f04 	str.w	r2, [r1, #4]!
 8010b14:	459c      	cmp	ip, r3
 8010b16:	d8f9      	bhi.n	8010b0c <__lshift+0xc0>
 8010b18:	e7ea      	b.n	8010af0 <__lshift+0xa4>
 8010b1a:	bf00      	nop
 8010b1c:	08012e61 	.word	0x08012e61
 8010b20:	08012e72 	.word	0x08012e72

08010b24 <__mcmp>:
 8010b24:	690a      	ldr	r2, [r1, #16]
 8010b26:	4603      	mov	r3, r0
 8010b28:	6900      	ldr	r0, [r0, #16]
 8010b2a:	1a80      	subs	r0, r0, r2
 8010b2c:	b530      	push	{r4, r5, lr}
 8010b2e:	d10e      	bne.n	8010b4e <__mcmp+0x2a>
 8010b30:	3314      	adds	r3, #20
 8010b32:	3114      	adds	r1, #20
 8010b34:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8010b38:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8010b3c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8010b40:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8010b44:	4295      	cmp	r5, r2
 8010b46:	d003      	beq.n	8010b50 <__mcmp+0x2c>
 8010b48:	d205      	bcs.n	8010b56 <__mcmp+0x32>
 8010b4a:	f04f 30ff 	mov.w	r0, #4294967295
 8010b4e:	bd30      	pop	{r4, r5, pc}
 8010b50:	42a3      	cmp	r3, r4
 8010b52:	d3f3      	bcc.n	8010b3c <__mcmp+0x18>
 8010b54:	e7fb      	b.n	8010b4e <__mcmp+0x2a>
 8010b56:	2001      	movs	r0, #1
 8010b58:	e7f9      	b.n	8010b4e <__mcmp+0x2a>
	...

08010b5c <__mdiff>:
 8010b5c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b60:	4689      	mov	r9, r1
 8010b62:	4606      	mov	r6, r0
 8010b64:	4611      	mov	r1, r2
 8010b66:	4648      	mov	r0, r9
 8010b68:	4614      	mov	r4, r2
 8010b6a:	f7ff ffdb 	bl	8010b24 <__mcmp>
 8010b6e:	1e05      	subs	r5, r0, #0
 8010b70:	d112      	bne.n	8010b98 <__mdiff+0x3c>
 8010b72:	4629      	mov	r1, r5
 8010b74:	4630      	mov	r0, r6
 8010b76:	f7ff fd63 	bl	8010640 <_Balloc>
 8010b7a:	4602      	mov	r2, r0
 8010b7c:	b928      	cbnz	r0, 8010b8a <__mdiff+0x2e>
 8010b7e:	4b3f      	ldr	r3, [pc, #252]	@ (8010c7c <__mdiff+0x120>)
 8010b80:	f240 2137 	movw	r1, #567	@ 0x237
 8010b84:	483e      	ldr	r0, [pc, #248]	@ (8010c80 <__mdiff+0x124>)
 8010b86:	f000 fb03 	bl	8011190 <__assert_func>
 8010b8a:	2301      	movs	r3, #1
 8010b8c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010b90:	4610      	mov	r0, r2
 8010b92:	b003      	add	sp, #12
 8010b94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b98:	bfbc      	itt	lt
 8010b9a:	464b      	movlt	r3, r9
 8010b9c:	46a1      	movlt	r9, r4
 8010b9e:	4630      	mov	r0, r6
 8010ba0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8010ba4:	bfba      	itte	lt
 8010ba6:	461c      	movlt	r4, r3
 8010ba8:	2501      	movlt	r5, #1
 8010baa:	2500      	movge	r5, #0
 8010bac:	f7ff fd48 	bl	8010640 <_Balloc>
 8010bb0:	4602      	mov	r2, r0
 8010bb2:	b918      	cbnz	r0, 8010bbc <__mdiff+0x60>
 8010bb4:	4b31      	ldr	r3, [pc, #196]	@ (8010c7c <__mdiff+0x120>)
 8010bb6:	f240 2145 	movw	r1, #581	@ 0x245
 8010bba:	e7e3      	b.n	8010b84 <__mdiff+0x28>
 8010bbc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8010bc0:	6926      	ldr	r6, [r4, #16]
 8010bc2:	60c5      	str	r5, [r0, #12]
 8010bc4:	f109 0310 	add.w	r3, r9, #16
 8010bc8:	f109 0514 	add.w	r5, r9, #20
 8010bcc:	f104 0e14 	add.w	lr, r4, #20
 8010bd0:	f100 0b14 	add.w	fp, r0, #20
 8010bd4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8010bd8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8010bdc:	9301      	str	r3, [sp, #4]
 8010bde:	46d9      	mov	r9, fp
 8010be0:	f04f 0c00 	mov.w	ip, #0
 8010be4:	9b01      	ldr	r3, [sp, #4]
 8010be6:	f85e 0b04 	ldr.w	r0, [lr], #4
 8010bea:	f853 af04 	ldr.w	sl, [r3, #4]!
 8010bee:	9301      	str	r3, [sp, #4]
 8010bf0:	fa1f f38a 	uxth.w	r3, sl
 8010bf4:	4619      	mov	r1, r3
 8010bf6:	b283      	uxth	r3, r0
 8010bf8:	1acb      	subs	r3, r1, r3
 8010bfa:	0c00      	lsrs	r0, r0, #16
 8010bfc:	4463      	add	r3, ip
 8010bfe:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8010c02:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8010c06:	b29b      	uxth	r3, r3
 8010c08:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8010c0c:	4576      	cmp	r6, lr
 8010c0e:	f849 3b04 	str.w	r3, [r9], #4
 8010c12:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8010c16:	d8e5      	bhi.n	8010be4 <__mdiff+0x88>
 8010c18:	1b33      	subs	r3, r6, r4
 8010c1a:	3b15      	subs	r3, #21
 8010c1c:	f023 0303 	bic.w	r3, r3, #3
 8010c20:	3415      	adds	r4, #21
 8010c22:	3304      	adds	r3, #4
 8010c24:	42a6      	cmp	r6, r4
 8010c26:	bf38      	it	cc
 8010c28:	2304      	movcc	r3, #4
 8010c2a:	441d      	add	r5, r3
 8010c2c:	445b      	add	r3, fp
 8010c2e:	461e      	mov	r6, r3
 8010c30:	462c      	mov	r4, r5
 8010c32:	4544      	cmp	r4, r8
 8010c34:	d30e      	bcc.n	8010c54 <__mdiff+0xf8>
 8010c36:	f108 0103 	add.w	r1, r8, #3
 8010c3a:	1b49      	subs	r1, r1, r5
 8010c3c:	f021 0103 	bic.w	r1, r1, #3
 8010c40:	3d03      	subs	r5, #3
 8010c42:	45a8      	cmp	r8, r5
 8010c44:	bf38      	it	cc
 8010c46:	2100      	movcc	r1, #0
 8010c48:	440b      	add	r3, r1
 8010c4a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010c4e:	b191      	cbz	r1, 8010c76 <__mdiff+0x11a>
 8010c50:	6117      	str	r7, [r2, #16]
 8010c52:	e79d      	b.n	8010b90 <__mdiff+0x34>
 8010c54:	f854 1b04 	ldr.w	r1, [r4], #4
 8010c58:	46e6      	mov	lr, ip
 8010c5a:	0c08      	lsrs	r0, r1, #16
 8010c5c:	fa1c fc81 	uxtah	ip, ip, r1
 8010c60:	4471      	add	r1, lr
 8010c62:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8010c66:	b289      	uxth	r1, r1
 8010c68:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8010c6c:	f846 1b04 	str.w	r1, [r6], #4
 8010c70:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8010c74:	e7dd      	b.n	8010c32 <__mdiff+0xd6>
 8010c76:	3f01      	subs	r7, #1
 8010c78:	e7e7      	b.n	8010c4a <__mdiff+0xee>
 8010c7a:	bf00      	nop
 8010c7c:	08012e61 	.word	0x08012e61
 8010c80:	08012e72 	.word	0x08012e72

08010c84 <__d2b>:
 8010c84:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010c88:	460f      	mov	r7, r1
 8010c8a:	2101      	movs	r1, #1
 8010c8c:	ec59 8b10 	vmov	r8, r9, d0
 8010c90:	4616      	mov	r6, r2
 8010c92:	f7ff fcd5 	bl	8010640 <_Balloc>
 8010c96:	4604      	mov	r4, r0
 8010c98:	b930      	cbnz	r0, 8010ca8 <__d2b+0x24>
 8010c9a:	4602      	mov	r2, r0
 8010c9c:	4b23      	ldr	r3, [pc, #140]	@ (8010d2c <__d2b+0xa8>)
 8010c9e:	4824      	ldr	r0, [pc, #144]	@ (8010d30 <__d2b+0xac>)
 8010ca0:	f240 310f 	movw	r1, #783	@ 0x30f
 8010ca4:	f000 fa74 	bl	8011190 <__assert_func>
 8010ca8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8010cac:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010cb0:	b10d      	cbz	r5, 8010cb6 <__d2b+0x32>
 8010cb2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8010cb6:	9301      	str	r3, [sp, #4]
 8010cb8:	f1b8 0300 	subs.w	r3, r8, #0
 8010cbc:	d023      	beq.n	8010d06 <__d2b+0x82>
 8010cbe:	4668      	mov	r0, sp
 8010cc0:	9300      	str	r3, [sp, #0]
 8010cc2:	f7ff fd84 	bl	80107ce <__lo0bits>
 8010cc6:	e9dd 1200 	ldrd	r1, r2, [sp]
 8010cca:	b1d0      	cbz	r0, 8010d02 <__d2b+0x7e>
 8010ccc:	f1c0 0320 	rsb	r3, r0, #32
 8010cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8010cd4:	430b      	orrs	r3, r1
 8010cd6:	40c2      	lsrs	r2, r0
 8010cd8:	6163      	str	r3, [r4, #20]
 8010cda:	9201      	str	r2, [sp, #4]
 8010cdc:	9b01      	ldr	r3, [sp, #4]
 8010cde:	61a3      	str	r3, [r4, #24]
 8010ce0:	2b00      	cmp	r3, #0
 8010ce2:	bf0c      	ite	eq
 8010ce4:	2201      	moveq	r2, #1
 8010ce6:	2202      	movne	r2, #2
 8010ce8:	6122      	str	r2, [r4, #16]
 8010cea:	b1a5      	cbz	r5, 8010d16 <__d2b+0x92>
 8010cec:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8010cf0:	4405      	add	r5, r0
 8010cf2:	603d      	str	r5, [r7, #0]
 8010cf4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8010cf8:	6030      	str	r0, [r6, #0]
 8010cfa:	4620      	mov	r0, r4
 8010cfc:	b003      	add	sp, #12
 8010cfe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010d02:	6161      	str	r1, [r4, #20]
 8010d04:	e7ea      	b.n	8010cdc <__d2b+0x58>
 8010d06:	a801      	add	r0, sp, #4
 8010d08:	f7ff fd61 	bl	80107ce <__lo0bits>
 8010d0c:	9b01      	ldr	r3, [sp, #4]
 8010d0e:	6163      	str	r3, [r4, #20]
 8010d10:	3020      	adds	r0, #32
 8010d12:	2201      	movs	r2, #1
 8010d14:	e7e8      	b.n	8010ce8 <__d2b+0x64>
 8010d16:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010d1a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8010d1e:	6038      	str	r0, [r7, #0]
 8010d20:	6918      	ldr	r0, [r3, #16]
 8010d22:	f7ff fd35 	bl	8010790 <__hi0bits>
 8010d26:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010d2a:	e7e5      	b.n	8010cf8 <__d2b+0x74>
 8010d2c:	08012e61 	.word	0x08012e61
 8010d30:	08012e72 	.word	0x08012e72

08010d34 <__ssputs_r>:
 8010d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010d38:	688e      	ldr	r6, [r1, #8]
 8010d3a:	461f      	mov	r7, r3
 8010d3c:	42be      	cmp	r6, r7
 8010d3e:	680b      	ldr	r3, [r1, #0]
 8010d40:	4682      	mov	sl, r0
 8010d42:	460c      	mov	r4, r1
 8010d44:	4690      	mov	r8, r2
 8010d46:	d82d      	bhi.n	8010da4 <__ssputs_r+0x70>
 8010d48:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010d4c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8010d50:	d026      	beq.n	8010da0 <__ssputs_r+0x6c>
 8010d52:	6965      	ldr	r5, [r4, #20]
 8010d54:	6909      	ldr	r1, [r1, #16]
 8010d56:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010d5a:	eba3 0901 	sub.w	r9, r3, r1
 8010d5e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010d62:	1c7b      	adds	r3, r7, #1
 8010d64:	444b      	add	r3, r9
 8010d66:	106d      	asrs	r5, r5, #1
 8010d68:	429d      	cmp	r5, r3
 8010d6a:	bf38      	it	cc
 8010d6c:	461d      	movcc	r5, r3
 8010d6e:	0553      	lsls	r3, r2, #21
 8010d70:	d527      	bpl.n	8010dc2 <__ssputs_r+0x8e>
 8010d72:	4629      	mov	r1, r5
 8010d74:	f7ff fbd8 	bl	8010528 <_malloc_r>
 8010d78:	4606      	mov	r6, r0
 8010d7a:	b360      	cbz	r0, 8010dd6 <__ssputs_r+0xa2>
 8010d7c:	6921      	ldr	r1, [r4, #16]
 8010d7e:	464a      	mov	r2, r9
 8010d80:	f7fe fcf7 	bl	800f772 <memcpy>
 8010d84:	89a3      	ldrh	r3, [r4, #12]
 8010d86:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8010d8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010d8e:	81a3      	strh	r3, [r4, #12]
 8010d90:	6126      	str	r6, [r4, #16]
 8010d92:	6165      	str	r5, [r4, #20]
 8010d94:	444e      	add	r6, r9
 8010d96:	eba5 0509 	sub.w	r5, r5, r9
 8010d9a:	6026      	str	r6, [r4, #0]
 8010d9c:	60a5      	str	r5, [r4, #8]
 8010d9e:	463e      	mov	r6, r7
 8010da0:	42be      	cmp	r6, r7
 8010da2:	d900      	bls.n	8010da6 <__ssputs_r+0x72>
 8010da4:	463e      	mov	r6, r7
 8010da6:	6820      	ldr	r0, [r4, #0]
 8010da8:	4632      	mov	r2, r6
 8010daa:	4641      	mov	r1, r8
 8010dac:	f000 f9c6 	bl	801113c <memmove>
 8010db0:	68a3      	ldr	r3, [r4, #8]
 8010db2:	1b9b      	subs	r3, r3, r6
 8010db4:	60a3      	str	r3, [r4, #8]
 8010db6:	6823      	ldr	r3, [r4, #0]
 8010db8:	4433      	add	r3, r6
 8010dba:	6023      	str	r3, [r4, #0]
 8010dbc:	2000      	movs	r0, #0
 8010dbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010dc2:	462a      	mov	r2, r5
 8010dc4:	f000 fa28 	bl	8011218 <_realloc_r>
 8010dc8:	4606      	mov	r6, r0
 8010dca:	2800      	cmp	r0, #0
 8010dcc:	d1e0      	bne.n	8010d90 <__ssputs_r+0x5c>
 8010dce:	6921      	ldr	r1, [r4, #16]
 8010dd0:	4650      	mov	r0, sl
 8010dd2:	f7ff fb35 	bl	8010440 <_free_r>
 8010dd6:	230c      	movs	r3, #12
 8010dd8:	f8ca 3000 	str.w	r3, [sl]
 8010ddc:	89a3      	ldrh	r3, [r4, #12]
 8010dde:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010de2:	81a3      	strh	r3, [r4, #12]
 8010de4:	f04f 30ff 	mov.w	r0, #4294967295
 8010de8:	e7e9      	b.n	8010dbe <__ssputs_r+0x8a>
	...

08010dec <_svfiprintf_r>:
 8010dec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010df0:	4698      	mov	r8, r3
 8010df2:	898b      	ldrh	r3, [r1, #12]
 8010df4:	061b      	lsls	r3, r3, #24
 8010df6:	b09d      	sub	sp, #116	@ 0x74
 8010df8:	4607      	mov	r7, r0
 8010dfa:	460d      	mov	r5, r1
 8010dfc:	4614      	mov	r4, r2
 8010dfe:	d510      	bpl.n	8010e22 <_svfiprintf_r+0x36>
 8010e00:	690b      	ldr	r3, [r1, #16]
 8010e02:	b973      	cbnz	r3, 8010e22 <_svfiprintf_r+0x36>
 8010e04:	2140      	movs	r1, #64	@ 0x40
 8010e06:	f7ff fb8f 	bl	8010528 <_malloc_r>
 8010e0a:	6028      	str	r0, [r5, #0]
 8010e0c:	6128      	str	r0, [r5, #16]
 8010e0e:	b930      	cbnz	r0, 8010e1e <_svfiprintf_r+0x32>
 8010e10:	230c      	movs	r3, #12
 8010e12:	603b      	str	r3, [r7, #0]
 8010e14:	f04f 30ff 	mov.w	r0, #4294967295
 8010e18:	b01d      	add	sp, #116	@ 0x74
 8010e1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e1e:	2340      	movs	r3, #64	@ 0x40
 8010e20:	616b      	str	r3, [r5, #20]
 8010e22:	2300      	movs	r3, #0
 8010e24:	9309      	str	r3, [sp, #36]	@ 0x24
 8010e26:	2320      	movs	r3, #32
 8010e28:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010e2c:	f8cd 800c 	str.w	r8, [sp, #12]
 8010e30:	2330      	movs	r3, #48	@ 0x30
 8010e32:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8010fd0 <_svfiprintf_r+0x1e4>
 8010e36:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010e3a:	f04f 0901 	mov.w	r9, #1
 8010e3e:	4623      	mov	r3, r4
 8010e40:	469a      	mov	sl, r3
 8010e42:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010e46:	b10a      	cbz	r2, 8010e4c <_svfiprintf_r+0x60>
 8010e48:	2a25      	cmp	r2, #37	@ 0x25
 8010e4a:	d1f9      	bne.n	8010e40 <_svfiprintf_r+0x54>
 8010e4c:	ebba 0b04 	subs.w	fp, sl, r4
 8010e50:	d00b      	beq.n	8010e6a <_svfiprintf_r+0x7e>
 8010e52:	465b      	mov	r3, fp
 8010e54:	4622      	mov	r2, r4
 8010e56:	4629      	mov	r1, r5
 8010e58:	4638      	mov	r0, r7
 8010e5a:	f7ff ff6b 	bl	8010d34 <__ssputs_r>
 8010e5e:	3001      	adds	r0, #1
 8010e60:	f000 80a7 	beq.w	8010fb2 <_svfiprintf_r+0x1c6>
 8010e64:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010e66:	445a      	add	r2, fp
 8010e68:	9209      	str	r2, [sp, #36]	@ 0x24
 8010e6a:	f89a 3000 	ldrb.w	r3, [sl]
 8010e6e:	2b00      	cmp	r3, #0
 8010e70:	f000 809f 	beq.w	8010fb2 <_svfiprintf_r+0x1c6>
 8010e74:	2300      	movs	r3, #0
 8010e76:	f04f 32ff 	mov.w	r2, #4294967295
 8010e7a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010e7e:	f10a 0a01 	add.w	sl, sl, #1
 8010e82:	9304      	str	r3, [sp, #16]
 8010e84:	9307      	str	r3, [sp, #28]
 8010e86:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010e8a:	931a      	str	r3, [sp, #104]	@ 0x68
 8010e8c:	4654      	mov	r4, sl
 8010e8e:	2205      	movs	r2, #5
 8010e90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010e94:	484e      	ldr	r0, [pc, #312]	@ (8010fd0 <_svfiprintf_r+0x1e4>)
 8010e96:	f7ef f99b 	bl	80001d0 <memchr>
 8010e9a:	9a04      	ldr	r2, [sp, #16]
 8010e9c:	b9d8      	cbnz	r0, 8010ed6 <_svfiprintf_r+0xea>
 8010e9e:	06d0      	lsls	r0, r2, #27
 8010ea0:	bf44      	itt	mi
 8010ea2:	2320      	movmi	r3, #32
 8010ea4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010ea8:	0711      	lsls	r1, r2, #28
 8010eaa:	bf44      	itt	mi
 8010eac:	232b      	movmi	r3, #43	@ 0x2b
 8010eae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010eb2:	f89a 3000 	ldrb.w	r3, [sl]
 8010eb6:	2b2a      	cmp	r3, #42	@ 0x2a
 8010eb8:	d015      	beq.n	8010ee6 <_svfiprintf_r+0xfa>
 8010eba:	9a07      	ldr	r2, [sp, #28]
 8010ebc:	4654      	mov	r4, sl
 8010ebe:	2000      	movs	r0, #0
 8010ec0:	f04f 0c0a 	mov.w	ip, #10
 8010ec4:	4621      	mov	r1, r4
 8010ec6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010eca:	3b30      	subs	r3, #48	@ 0x30
 8010ecc:	2b09      	cmp	r3, #9
 8010ece:	d94b      	bls.n	8010f68 <_svfiprintf_r+0x17c>
 8010ed0:	b1b0      	cbz	r0, 8010f00 <_svfiprintf_r+0x114>
 8010ed2:	9207      	str	r2, [sp, #28]
 8010ed4:	e014      	b.n	8010f00 <_svfiprintf_r+0x114>
 8010ed6:	eba0 0308 	sub.w	r3, r0, r8
 8010eda:	fa09 f303 	lsl.w	r3, r9, r3
 8010ede:	4313      	orrs	r3, r2
 8010ee0:	9304      	str	r3, [sp, #16]
 8010ee2:	46a2      	mov	sl, r4
 8010ee4:	e7d2      	b.n	8010e8c <_svfiprintf_r+0xa0>
 8010ee6:	9b03      	ldr	r3, [sp, #12]
 8010ee8:	1d19      	adds	r1, r3, #4
 8010eea:	681b      	ldr	r3, [r3, #0]
 8010eec:	9103      	str	r1, [sp, #12]
 8010eee:	2b00      	cmp	r3, #0
 8010ef0:	bfbb      	ittet	lt
 8010ef2:	425b      	neglt	r3, r3
 8010ef4:	f042 0202 	orrlt.w	r2, r2, #2
 8010ef8:	9307      	strge	r3, [sp, #28]
 8010efa:	9307      	strlt	r3, [sp, #28]
 8010efc:	bfb8      	it	lt
 8010efe:	9204      	strlt	r2, [sp, #16]
 8010f00:	7823      	ldrb	r3, [r4, #0]
 8010f02:	2b2e      	cmp	r3, #46	@ 0x2e
 8010f04:	d10a      	bne.n	8010f1c <_svfiprintf_r+0x130>
 8010f06:	7863      	ldrb	r3, [r4, #1]
 8010f08:	2b2a      	cmp	r3, #42	@ 0x2a
 8010f0a:	d132      	bne.n	8010f72 <_svfiprintf_r+0x186>
 8010f0c:	9b03      	ldr	r3, [sp, #12]
 8010f0e:	1d1a      	adds	r2, r3, #4
 8010f10:	681b      	ldr	r3, [r3, #0]
 8010f12:	9203      	str	r2, [sp, #12]
 8010f14:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010f18:	3402      	adds	r4, #2
 8010f1a:	9305      	str	r3, [sp, #20]
 8010f1c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8010fe0 <_svfiprintf_r+0x1f4>
 8010f20:	7821      	ldrb	r1, [r4, #0]
 8010f22:	2203      	movs	r2, #3
 8010f24:	4650      	mov	r0, sl
 8010f26:	f7ef f953 	bl	80001d0 <memchr>
 8010f2a:	b138      	cbz	r0, 8010f3c <_svfiprintf_r+0x150>
 8010f2c:	9b04      	ldr	r3, [sp, #16]
 8010f2e:	eba0 000a 	sub.w	r0, r0, sl
 8010f32:	2240      	movs	r2, #64	@ 0x40
 8010f34:	4082      	lsls	r2, r0
 8010f36:	4313      	orrs	r3, r2
 8010f38:	3401      	adds	r4, #1
 8010f3a:	9304      	str	r3, [sp, #16]
 8010f3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010f40:	4824      	ldr	r0, [pc, #144]	@ (8010fd4 <_svfiprintf_r+0x1e8>)
 8010f42:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010f46:	2206      	movs	r2, #6
 8010f48:	f7ef f942 	bl	80001d0 <memchr>
 8010f4c:	2800      	cmp	r0, #0
 8010f4e:	d036      	beq.n	8010fbe <_svfiprintf_r+0x1d2>
 8010f50:	4b21      	ldr	r3, [pc, #132]	@ (8010fd8 <_svfiprintf_r+0x1ec>)
 8010f52:	bb1b      	cbnz	r3, 8010f9c <_svfiprintf_r+0x1b0>
 8010f54:	9b03      	ldr	r3, [sp, #12]
 8010f56:	3307      	adds	r3, #7
 8010f58:	f023 0307 	bic.w	r3, r3, #7
 8010f5c:	3308      	adds	r3, #8
 8010f5e:	9303      	str	r3, [sp, #12]
 8010f60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010f62:	4433      	add	r3, r6
 8010f64:	9309      	str	r3, [sp, #36]	@ 0x24
 8010f66:	e76a      	b.n	8010e3e <_svfiprintf_r+0x52>
 8010f68:	fb0c 3202 	mla	r2, ip, r2, r3
 8010f6c:	460c      	mov	r4, r1
 8010f6e:	2001      	movs	r0, #1
 8010f70:	e7a8      	b.n	8010ec4 <_svfiprintf_r+0xd8>
 8010f72:	2300      	movs	r3, #0
 8010f74:	3401      	adds	r4, #1
 8010f76:	9305      	str	r3, [sp, #20]
 8010f78:	4619      	mov	r1, r3
 8010f7a:	f04f 0c0a 	mov.w	ip, #10
 8010f7e:	4620      	mov	r0, r4
 8010f80:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010f84:	3a30      	subs	r2, #48	@ 0x30
 8010f86:	2a09      	cmp	r2, #9
 8010f88:	d903      	bls.n	8010f92 <_svfiprintf_r+0x1a6>
 8010f8a:	2b00      	cmp	r3, #0
 8010f8c:	d0c6      	beq.n	8010f1c <_svfiprintf_r+0x130>
 8010f8e:	9105      	str	r1, [sp, #20]
 8010f90:	e7c4      	b.n	8010f1c <_svfiprintf_r+0x130>
 8010f92:	fb0c 2101 	mla	r1, ip, r1, r2
 8010f96:	4604      	mov	r4, r0
 8010f98:	2301      	movs	r3, #1
 8010f9a:	e7f0      	b.n	8010f7e <_svfiprintf_r+0x192>
 8010f9c:	ab03      	add	r3, sp, #12
 8010f9e:	9300      	str	r3, [sp, #0]
 8010fa0:	462a      	mov	r2, r5
 8010fa2:	4b0e      	ldr	r3, [pc, #56]	@ (8010fdc <_svfiprintf_r+0x1f0>)
 8010fa4:	a904      	add	r1, sp, #16
 8010fa6:	4638      	mov	r0, r7
 8010fa8:	f7fd fe06 	bl	800ebb8 <_printf_float>
 8010fac:	1c42      	adds	r2, r0, #1
 8010fae:	4606      	mov	r6, r0
 8010fb0:	d1d6      	bne.n	8010f60 <_svfiprintf_r+0x174>
 8010fb2:	89ab      	ldrh	r3, [r5, #12]
 8010fb4:	065b      	lsls	r3, r3, #25
 8010fb6:	f53f af2d 	bmi.w	8010e14 <_svfiprintf_r+0x28>
 8010fba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010fbc:	e72c      	b.n	8010e18 <_svfiprintf_r+0x2c>
 8010fbe:	ab03      	add	r3, sp, #12
 8010fc0:	9300      	str	r3, [sp, #0]
 8010fc2:	462a      	mov	r2, r5
 8010fc4:	4b05      	ldr	r3, [pc, #20]	@ (8010fdc <_svfiprintf_r+0x1f0>)
 8010fc6:	a904      	add	r1, sp, #16
 8010fc8:	4638      	mov	r0, r7
 8010fca:	f7fe f88d 	bl	800f0e8 <_printf_i>
 8010fce:	e7ed      	b.n	8010fac <_svfiprintf_r+0x1c0>
 8010fd0:	08012ecb 	.word	0x08012ecb
 8010fd4:	08012ed5 	.word	0x08012ed5
 8010fd8:	0800ebb9 	.word	0x0800ebb9
 8010fdc:	08010d35 	.word	0x08010d35
 8010fe0:	08012ed1 	.word	0x08012ed1

08010fe4 <__sflush_r>:
 8010fe4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010fe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010fec:	0716      	lsls	r6, r2, #28
 8010fee:	4605      	mov	r5, r0
 8010ff0:	460c      	mov	r4, r1
 8010ff2:	d454      	bmi.n	801109e <__sflush_r+0xba>
 8010ff4:	684b      	ldr	r3, [r1, #4]
 8010ff6:	2b00      	cmp	r3, #0
 8010ff8:	dc02      	bgt.n	8011000 <__sflush_r+0x1c>
 8010ffa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8010ffc:	2b00      	cmp	r3, #0
 8010ffe:	dd48      	ble.n	8011092 <__sflush_r+0xae>
 8011000:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011002:	2e00      	cmp	r6, #0
 8011004:	d045      	beq.n	8011092 <__sflush_r+0xae>
 8011006:	2300      	movs	r3, #0
 8011008:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801100c:	682f      	ldr	r7, [r5, #0]
 801100e:	6a21      	ldr	r1, [r4, #32]
 8011010:	602b      	str	r3, [r5, #0]
 8011012:	d030      	beq.n	8011076 <__sflush_r+0x92>
 8011014:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8011016:	89a3      	ldrh	r3, [r4, #12]
 8011018:	0759      	lsls	r1, r3, #29
 801101a:	d505      	bpl.n	8011028 <__sflush_r+0x44>
 801101c:	6863      	ldr	r3, [r4, #4]
 801101e:	1ad2      	subs	r2, r2, r3
 8011020:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8011022:	b10b      	cbz	r3, 8011028 <__sflush_r+0x44>
 8011024:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8011026:	1ad2      	subs	r2, r2, r3
 8011028:	2300      	movs	r3, #0
 801102a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801102c:	6a21      	ldr	r1, [r4, #32]
 801102e:	4628      	mov	r0, r5
 8011030:	47b0      	blx	r6
 8011032:	1c43      	adds	r3, r0, #1
 8011034:	89a3      	ldrh	r3, [r4, #12]
 8011036:	d106      	bne.n	8011046 <__sflush_r+0x62>
 8011038:	6829      	ldr	r1, [r5, #0]
 801103a:	291d      	cmp	r1, #29
 801103c:	d82b      	bhi.n	8011096 <__sflush_r+0xb2>
 801103e:	4a2a      	ldr	r2, [pc, #168]	@ (80110e8 <__sflush_r+0x104>)
 8011040:	40ca      	lsrs	r2, r1
 8011042:	07d6      	lsls	r6, r2, #31
 8011044:	d527      	bpl.n	8011096 <__sflush_r+0xb2>
 8011046:	2200      	movs	r2, #0
 8011048:	6062      	str	r2, [r4, #4]
 801104a:	04d9      	lsls	r1, r3, #19
 801104c:	6922      	ldr	r2, [r4, #16]
 801104e:	6022      	str	r2, [r4, #0]
 8011050:	d504      	bpl.n	801105c <__sflush_r+0x78>
 8011052:	1c42      	adds	r2, r0, #1
 8011054:	d101      	bne.n	801105a <__sflush_r+0x76>
 8011056:	682b      	ldr	r3, [r5, #0]
 8011058:	b903      	cbnz	r3, 801105c <__sflush_r+0x78>
 801105a:	6560      	str	r0, [r4, #84]	@ 0x54
 801105c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801105e:	602f      	str	r7, [r5, #0]
 8011060:	b1b9      	cbz	r1, 8011092 <__sflush_r+0xae>
 8011062:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011066:	4299      	cmp	r1, r3
 8011068:	d002      	beq.n	8011070 <__sflush_r+0x8c>
 801106a:	4628      	mov	r0, r5
 801106c:	f7ff f9e8 	bl	8010440 <_free_r>
 8011070:	2300      	movs	r3, #0
 8011072:	6363      	str	r3, [r4, #52]	@ 0x34
 8011074:	e00d      	b.n	8011092 <__sflush_r+0xae>
 8011076:	2301      	movs	r3, #1
 8011078:	4628      	mov	r0, r5
 801107a:	47b0      	blx	r6
 801107c:	4602      	mov	r2, r0
 801107e:	1c50      	adds	r0, r2, #1
 8011080:	d1c9      	bne.n	8011016 <__sflush_r+0x32>
 8011082:	682b      	ldr	r3, [r5, #0]
 8011084:	2b00      	cmp	r3, #0
 8011086:	d0c6      	beq.n	8011016 <__sflush_r+0x32>
 8011088:	2b1d      	cmp	r3, #29
 801108a:	d001      	beq.n	8011090 <__sflush_r+0xac>
 801108c:	2b16      	cmp	r3, #22
 801108e:	d11e      	bne.n	80110ce <__sflush_r+0xea>
 8011090:	602f      	str	r7, [r5, #0]
 8011092:	2000      	movs	r0, #0
 8011094:	e022      	b.n	80110dc <__sflush_r+0xf8>
 8011096:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801109a:	b21b      	sxth	r3, r3
 801109c:	e01b      	b.n	80110d6 <__sflush_r+0xf2>
 801109e:	690f      	ldr	r7, [r1, #16]
 80110a0:	2f00      	cmp	r7, #0
 80110a2:	d0f6      	beq.n	8011092 <__sflush_r+0xae>
 80110a4:	0793      	lsls	r3, r2, #30
 80110a6:	680e      	ldr	r6, [r1, #0]
 80110a8:	bf08      	it	eq
 80110aa:	694b      	ldreq	r3, [r1, #20]
 80110ac:	600f      	str	r7, [r1, #0]
 80110ae:	bf18      	it	ne
 80110b0:	2300      	movne	r3, #0
 80110b2:	eba6 0807 	sub.w	r8, r6, r7
 80110b6:	608b      	str	r3, [r1, #8]
 80110b8:	f1b8 0f00 	cmp.w	r8, #0
 80110bc:	dde9      	ble.n	8011092 <__sflush_r+0xae>
 80110be:	6a21      	ldr	r1, [r4, #32]
 80110c0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80110c2:	4643      	mov	r3, r8
 80110c4:	463a      	mov	r2, r7
 80110c6:	4628      	mov	r0, r5
 80110c8:	47b0      	blx	r6
 80110ca:	2800      	cmp	r0, #0
 80110cc:	dc08      	bgt.n	80110e0 <__sflush_r+0xfc>
 80110ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80110d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80110d6:	81a3      	strh	r3, [r4, #12]
 80110d8:	f04f 30ff 	mov.w	r0, #4294967295
 80110dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80110e0:	4407      	add	r7, r0
 80110e2:	eba8 0800 	sub.w	r8, r8, r0
 80110e6:	e7e7      	b.n	80110b8 <__sflush_r+0xd4>
 80110e8:	20400001 	.word	0x20400001

080110ec <_fflush_r>:
 80110ec:	b538      	push	{r3, r4, r5, lr}
 80110ee:	690b      	ldr	r3, [r1, #16]
 80110f0:	4605      	mov	r5, r0
 80110f2:	460c      	mov	r4, r1
 80110f4:	b913      	cbnz	r3, 80110fc <_fflush_r+0x10>
 80110f6:	2500      	movs	r5, #0
 80110f8:	4628      	mov	r0, r5
 80110fa:	bd38      	pop	{r3, r4, r5, pc}
 80110fc:	b118      	cbz	r0, 8011106 <_fflush_r+0x1a>
 80110fe:	6a03      	ldr	r3, [r0, #32]
 8011100:	b90b      	cbnz	r3, 8011106 <_fflush_r+0x1a>
 8011102:	f7fe f99b 	bl	800f43c <__sinit>
 8011106:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801110a:	2b00      	cmp	r3, #0
 801110c:	d0f3      	beq.n	80110f6 <_fflush_r+0xa>
 801110e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8011110:	07d0      	lsls	r0, r2, #31
 8011112:	d404      	bmi.n	801111e <_fflush_r+0x32>
 8011114:	0599      	lsls	r1, r3, #22
 8011116:	d402      	bmi.n	801111e <_fflush_r+0x32>
 8011118:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801111a:	f7fe fb28 	bl	800f76e <__retarget_lock_acquire_recursive>
 801111e:	4628      	mov	r0, r5
 8011120:	4621      	mov	r1, r4
 8011122:	f7ff ff5f 	bl	8010fe4 <__sflush_r>
 8011126:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011128:	07da      	lsls	r2, r3, #31
 801112a:	4605      	mov	r5, r0
 801112c:	d4e4      	bmi.n	80110f8 <_fflush_r+0xc>
 801112e:	89a3      	ldrh	r3, [r4, #12]
 8011130:	059b      	lsls	r3, r3, #22
 8011132:	d4e1      	bmi.n	80110f8 <_fflush_r+0xc>
 8011134:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011136:	f7fe fb1b 	bl	800f770 <__retarget_lock_release_recursive>
 801113a:	e7dd      	b.n	80110f8 <_fflush_r+0xc>

0801113c <memmove>:
 801113c:	4288      	cmp	r0, r1
 801113e:	b510      	push	{r4, lr}
 8011140:	eb01 0402 	add.w	r4, r1, r2
 8011144:	d902      	bls.n	801114c <memmove+0x10>
 8011146:	4284      	cmp	r4, r0
 8011148:	4623      	mov	r3, r4
 801114a:	d807      	bhi.n	801115c <memmove+0x20>
 801114c:	1e43      	subs	r3, r0, #1
 801114e:	42a1      	cmp	r1, r4
 8011150:	d008      	beq.n	8011164 <memmove+0x28>
 8011152:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011156:	f803 2f01 	strb.w	r2, [r3, #1]!
 801115a:	e7f8      	b.n	801114e <memmove+0x12>
 801115c:	4402      	add	r2, r0
 801115e:	4601      	mov	r1, r0
 8011160:	428a      	cmp	r2, r1
 8011162:	d100      	bne.n	8011166 <memmove+0x2a>
 8011164:	bd10      	pop	{r4, pc}
 8011166:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801116a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801116e:	e7f7      	b.n	8011160 <memmove+0x24>

08011170 <_sbrk_r>:
 8011170:	b538      	push	{r3, r4, r5, lr}
 8011172:	4d06      	ldr	r5, [pc, #24]	@ (801118c <_sbrk_r+0x1c>)
 8011174:	2300      	movs	r3, #0
 8011176:	4604      	mov	r4, r0
 8011178:	4608      	mov	r0, r1
 801117a:	602b      	str	r3, [r5, #0]
 801117c:	f7f4 fb88 	bl	8005890 <_sbrk>
 8011180:	1c43      	adds	r3, r0, #1
 8011182:	d102      	bne.n	801118a <_sbrk_r+0x1a>
 8011184:	682b      	ldr	r3, [r5, #0]
 8011186:	b103      	cbz	r3, 801118a <_sbrk_r+0x1a>
 8011188:	6023      	str	r3, [r4, #0]
 801118a:	bd38      	pop	{r3, r4, r5, pc}
 801118c:	20005608 	.word	0x20005608

08011190 <__assert_func>:
 8011190:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011192:	4614      	mov	r4, r2
 8011194:	461a      	mov	r2, r3
 8011196:	4b09      	ldr	r3, [pc, #36]	@ (80111bc <__assert_func+0x2c>)
 8011198:	681b      	ldr	r3, [r3, #0]
 801119a:	4605      	mov	r5, r0
 801119c:	68d8      	ldr	r0, [r3, #12]
 801119e:	b14c      	cbz	r4, 80111b4 <__assert_func+0x24>
 80111a0:	4b07      	ldr	r3, [pc, #28]	@ (80111c0 <__assert_func+0x30>)
 80111a2:	9100      	str	r1, [sp, #0]
 80111a4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80111a8:	4906      	ldr	r1, [pc, #24]	@ (80111c4 <__assert_func+0x34>)
 80111aa:	462b      	mov	r3, r5
 80111ac:	f000 f870 	bl	8011290 <fiprintf>
 80111b0:	f000 f880 	bl	80112b4 <abort>
 80111b4:	4b04      	ldr	r3, [pc, #16]	@ (80111c8 <__assert_func+0x38>)
 80111b6:	461c      	mov	r4, r3
 80111b8:	e7f3      	b.n	80111a2 <__assert_func+0x12>
 80111ba:	bf00      	nop
 80111bc:	2000002c 	.word	0x2000002c
 80111c0:	08012ee6 	.word	0x08012ee6
 80111c4:	08012ef3 	.word	0x08012ef3
 80111c8:	08012f21 	.word	0x08012f21

080111cc <_calloc_r>:
 80111cc:	b570      	push	{r4, r5, r6, lr}
 80111ce:	fba1 5402 	umull	r5, r4, r1, r2
 80111d2:	b934      	cbnz	r4, 80111e2 <_calloc_r+0x16>
 80111d4:	4629      	mov	r1, r5
 80111d6:	f7ff f9a7 	bl	8010528 <_malloc_r>
 80111da:	4606      	mov	r6, r0
 80111dc:	b928      	cbnz	r0, 80111ea <_calloc_r+0x1e>
 80111de:	4630      	mov	r0, r6
 80111e0:	bd70      	pop	{r4, r5, r6, pc}
 80111e2:	220c      	movs	r2, #12
 80111e4:	6002      	str	r2, [r0, #0]
 80111e6:	2600      	movs	r6, #0
 80111e8:	e7f9      	b.n	80111de <_calloc_r+0x12>
 80111ea:	462a      	mov	r2, r5
 80111ec:	4621      	mov	r1, r4
 80111ee:	f7fe f9d4 	bl	800f59a <memset>
 80111f2:	e7f4      	b.n	80111de <_calloc_r+0x12>

080111f4 <__ascii_mbtowc>:
 80111f4:	b082      	sub	sp, #8
 80111f6:	b901      	cbnz	r1, 80111fa <__ascii_mbtowc+0x6>
 80111f8:	a901      	add	r1, sp, #4
 80111fa:	b142      	cbz	r2, 801120e <__ascii_mbtowc+0x1a>
 80111fc:	b14b      	cbz	r3, 8011212 <__ascii_mbtowc+0x1e>
 80111fe:	7813      	ldrb	r3, [r2, #0]
 8011200:	600b      	str	r3, [r1, #0]
 8011202:	7812      	ldrb	r2, [r2, #0]
 8011204:	1e10      	subs	r0, r2, #0
 8011206:	bf18      	it	ne
 8011208:	2001      	movne	r0, #1
 801120a:	b002      	add	sp, #8
 801120c:	4770      	bx	lr
 801120e:	4610      	mov	r0, r2
 8011210:	e7fb      	b.n	801120a <__ascii_mbtowc+0x16>
 8011212:	f06f 0001 	mvn.w	r0, #1
 8011216:	e7f8      	b.n	801120a <__ascii_mbtowc+0x16>

08011218 <_realloc_r>:
 8011218:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801121c:	4607      	mov	r7, r0
 801121e:	4614      	mov	r4, r2
 8011220:	460d      	mov	r5, r1
 8011222:	b921      	cbnz	r1, 801122e <_realloc_r+0x16>
 8011224:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011228:	4611      	mov	r1, r2
 801122a:	f7ff b97d 	b.w	8010528 <_malloc_r>
 801122e:	b92a      	cbnz	r2, 801123c <_realloc_r+0x24>
 8011230:	f7ff f906 	bl	8010440 <_free_r>
 8011234:	4625      	mov	r5, r4
 8011236:	4628      	mov	r0, r5
 8011238:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801123c:	f000 f841 	bl	80112c2 <_malloc_usable_size_r>
 8011240:	4284      	cmp	r4, r0
 8011242:	4606      	mov	r6, r0
 8011244:	d802      	bhi.n	801124c <_realloc_r+0x34>
 8011246:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801124a:	d8f4      	bhi.n	8011236 <_realloc_r+0x1e>
 801124c:	4621      	mov	r1, r4
 801124e:	4638      	mov	r0, r7
 8011250:	f7ff f96a 	bl	8010528 <_malloc_r>
 8011254:	4680      	mov	r8, r0
 8011256:	b908      	cbnz	r0, 801125c <_realloc_r+0x44>
 8011258:	4645      	mov	r5, r8
 801125a:	e7ec      	b.n	8011236 <_realloc_r+0x1e>
 801125c:	42b4      	cmp	r4, r6
 801125e:	4622      	mov	r2, r4
 8011260:	4629      	mov	r1, r5
 8011262:	bf28      	it	cs
 8011264:	4632      	movcs	r2, r6
 8011266:	f7fe fa84 	bl	800f772 <memcpy>
 801126a:	4629      	mov	r1, r5
 801126c:	4638      	mov	r0, r7
 801126e:	f7ff f8e7 	bl	8010440 <_free_r>
 8011272:	e7f1      	b.n	8011258 <_realloc_r+0x40>

08011274 <__ascii_wctomb>:
 8011274:	4603      	mov	r3, r0
 8011276:	4608      	mov	r0, r1
 8011278:	b141      	cbz	r1, 801128c <__ascii_wctomb+0x18>
 801127a:	2aff      	cmp	r2, #255	@ 0xff
 801127c:	d904      	bls.n	8011288 <__ascii_wctomb+0x14>
 801127e:	228a      	movs	r2, #138	@ 0x8a
 8011280:	601a      	str	r2, [r3, #0]
 8011282:	f04f 30ff 	mov.w	r0, #4294967295
 8011286:	4770      	bx	lr
 8011288:	700a      	strb	r2, [r1, #0]
 801128a:	2001      	movs	r0, #1
 801128c:	4770      	bx	lr
	...

08011290 <fiprintf>:
 8011290:	b40e      	push	{r1, r2, r3}
 8011292:	b503      	push	{r0, r1, lr}
 8011294:	4601      	mov	r1, r0
 8011296:	ab03      	add	r3, sp, #12
 8011298:	4805      	ldr	r0, [pc, #20]	@ (80112b0 <fiprintf+0x20>)
 801129a:	f853 2b04 	ldr.w	r2, [r3], #4
 801129e:	6800      	ldr	r0, [r0, #0]
 80112a0:	9301      	str	r3, [sp, #4]
 80112a2:	f000 f83f 	bl	8011324 <_vfiprintf_r>
 80112a6:	b002      	add	sp, #8
 80112a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80112ac:	b003      	add	sp, #12
 80112ae:	4770      	bx	lr
 80112b0:	2000002c 	.word	0x2000002c

080112b4 <abort>:
 80112b4:	b508      	push	{r3, lr}
 80112b6:	2006      	movs	r0, #6
 80112b8:	f000 fa08 	bl	80116cc <raise>
 80112bc:	2001      	movs	r0, #1
 80112be:	f7f4 fa6f 	bl	80057a0 <_exit>

080112c2 <_malloc_usable_size_r>:
 80112c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80112c6:	1f18      	subs	r0, r3, #4
 80112c8:	2b00      	cmp	r3, #0
 80112ca:	bfbc      	itt	lt
 80112cc:	580b      	ldrlt	r3, [r1, r0]
 80112ce:	18c0      	addlt	r0, r0, r3
 80112d0:	4770      	bx	lr

080112d2 <__sfputc_r>:
 80112d2:	6893      	ldr	r3, [r2, #8]
 80112d4:	3b01      	subs	r3, #1
 80112d6:	2b00      	cmp	r3, #0
 80112d8:	b410      	push	{r4}
 80112da:	6093      	str	r3, [r2, #8]
 80112dc:	da08      	bge.n	80112f0 <__sfputc_r+0x1e>
 80112de:	6994      	ldr	r4, [r2, #24]
 80112e0:	42a3      	cmp	r3, r4
 80112e2:	db01      	blt.n	80112e8 <__sfputc_r+0x16>
 80112e4:	290a      	cmp	r1, #10
 80112e6:	d103      	bne.n	80112f0 <__sfputc_r+0x1e>
 80112e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80112ec:	f000 b932 	b.w	8011554 <__swbuf_r>
 80112f0:	6813      	ldr	r3, [r2, #0]
 80112f2:	1c58      	adds	r0, r3, #1
 80112f4:	6010      	str	r0, [r2, #0]
 80112f6:	7019      	strb	r1, [r3, #0]
 80112f8:	4608      	mov	r0, r1
 80112fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80112fe:	4770      	bx	lr

08011300 <__sfputs_r>:
 8011300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011302:	4606      	mov	r6, r0
 8011304:	460f      	mov	r7, r1
 8011306:	4614      	mov	r4, r2
 8011308:	18d5      	adds	r5, r2, r3
 801130a:	42ac      	cmp	r4, r5
 801130c:	d101      	bne.n	8011312 <__sfputs_r+0x12>
 801130e:	2000      	movs	r0, #0
 8011310:	e007      	b.n	8011322 <__sfputs_r+0x22>
 8011312:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011316:	463a      	mov	r2, r7
 8011318:	4630      	mov	r0, r6
 801131a:	f7ff ffda 	bl	80112d2 <__sfputc_r>
 801131e:	1c43      	adds	r3, r0, #1
 8011320:	d1f3      	bne.n	801130a <__sfputs_r+0xa>
 8011322:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011324 <_vfiprintf_r>:
 8011324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011328:	460d      	mov	r5, r1
 801132a:	b09d      	sub	sp, #116	@ 0x74
 801132c:	4614      	mov	r4, r2
 801132e:	4698      	mov	r8, r3
 8011330:	4606      	mov	r6, r0
 8011332:	b118      	cbz	r0, 801133c <_vfiprintf_r+0x18>
 8011334:	6a03      	ldr	r3, [r0, #32]
 8011336:	b90b      	cbnz	r3, 801133c <_vfiprintf_r+0x18>
 8011338:	f7fe f880 	bl	800f43c <__sinit>
 801133c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801133e:	07d9      	lsls	r1, r3, #31
 8011340:	d405      	bmi.n	801134e <_vfiprintf_r+0x2a>
 8011342:	89ab      	ldrh	r3, [r5, #12]
 8011344:	059a      	lsls	r2, r3, #22
 8011346:	d402      	bmi.n	801134e <_vfiprintf_r+0x2a>
 8011348:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801134a:	f7fe fa10 	bl	800f76e <__retarget_lock_acquire_recursive>
 801134e:	89ab      	ldrh	r3, [r5, #12]
 8011350:	071b      	lsls	r3, r3, #28
 8011352:	d501      	bpl.n	8011358 <_vfiprintf_r+0x34>
 8011354:	692b      	ldr	r3, [r5, #16]
 8011356:	b99b      	cbnz	r3, 8011380 <_vfiprintf_r+0x5c>
 8011358:	4629      	mov	r1, r5
 801135a:	4630      	mov	r0, r6
 801135c:	f000 f938 	bl	80115d0 <__swsetup_r>
 8011360:	b170      	cbz	r0, 8011380 <_vfiprintf_r+0x5c>
 8011362:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011364:	07dc      	lsls	r4, r3, #31
 8011366:	d504      	bpl.n	8011372 <_vfiprintf_r+0x4e>
 8011368:	f04f 30ff 	mov.w	r0, #4294967295
 801136c:	b01d      	add	sp, #116	@ 0x74
 801136e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011372:	89ab      	ldrh	r3, [r5, #12]
 8011374:	0598      	lsls	r0, r3, #22
 8011376:	d4f7      	bmi.n	8011368 <_vfiprintf_r+0x44>
 8011378:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801137a:	f7fe f9f9 	bl	800f770 <__retarget_lock_release_recursive>
 801137e:	e7f3      	b.n	8011368 <_vfiprintf_r+0x44>
 8011380:	2300      	movs	r3, #0
 8011382:	9309      	str	r3, [sp, #36]	@ 0x24
 8011384:	2320      	movs	r3, #32
 8011386:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801138a:	f8cd 800c 	str.w	r8, [sp, #12]
 801138e:	2330      	movs	r3, #48	@ 0x30
 8011390:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8011540 <_vfiprintf_r+0x21c>
 8011394:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011398:	f04f 0901 	mov.w	r9, #1
 801139c:	4623      	mov	r3, r4
 801139e:	469a      	mov	sl, r3
 80113a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80113a4:	b10a      	cbz	r2, 80113aa <_vfiprintf_r+0x86>
 80113a6:	2a25      	cmp	r2, #37	@ 0x25
 80113a8:	d1f9      	bne.n	801139e <_vfiprintf_r+0x7a>
 80113aa:	ebba 0b04 	subs.w	fp, sl, r4
 80113ae:	d00b      	beq.n	80113c8 <_vfiprintf_r+0xa4>
 80113b0:	465b      	mov	r3, fp
 80113b2:	4622      	mov	r2, r4
 80113b4:	4629      	mov	r1, r5
 80113b6:	4630      	mov	r0, r6
 80113b8:	f7ff ffa2 	bl	8011300 <__sfputs_r>
 80113bc:	3001      	adds	r0, #1
 80113be:	f000 80a7 	beq.w	8011510 <_vfiprintf_r+0x1ec>
 80113c2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80113c4:	445a      	add	r2, fp
 80113c6:	9209      	str	r2, [sp, #36]	@ 0x24
 80113c8:	f89a 3000 	ldrb.w	r3, [sl]
 80113cc:	2b00      	cmp	r3, #0
 80113ce:	f000 809f 	beq.w	8011510 <_vfiprintf_r+0x1ec>
 80113d2:	2300      	movs	r3, #0
 80113d4:	f04f 32ff 	mov.w	r2, #4294967295
 80113d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80113dc:	f10a 0a01 	add.w	sl, sl, #1
 80113e0:	9304      	str	r3, [sp, #16]
 80113e2:	9307      	str	r3, [sp, #28]
 80113e4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80113e8:	931a      	str	r3, [sp, #104]	@ 0x68
 80113ea:	4654      	mov	r4, sl
 80113ec:	2205      	movs	r2, #5
 80113ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80113f2:	4853      	ldr	r0, [pc, #332]	@ (8011540 <_vfiprintf_r+0x21c>)
 80113f4:	f7ee feec 	bl	80001d0 <memchr>
 80113f8:	9a04      	ldr	r2, [sp, #16]
 80113fa:	b9d8      	cbnz	r0, 8011434 <_vfiprintf_r+0x110>
 80113fc:	06d1      	lsls	r1, r2, #27
 80113fe:	bf44      	itt	mi
 8011400:	2320      	movmi	r3, #32
 8011402:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011406:	0713      	lsls	r3, r2, #28
 8011408:	bf44      	itt	mi
 801140a:	232b      	movmi	r3, #43	@ 0x2b
 801140c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011410:	f89a 3000 	ldrb.w	r3, [sl]
 8011414:	2b2a      	cmp	r3, #42	@ 0x2a
 8011416:	d015      	beq.n	8011444 <_vfiprintf_r+0x120>
 8011418:	9a07      	ldr	r2, [sp, #28]
 801141a:	4654      	mov	r4, sl
 801141c:	2000      	movs	r0, #0
 801141e:	f04f 0c0a 	mov.w	ip, #10
 8011422:	4621      	mov	r1, r4
 8011424:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011428:	3b30      	subs	r3, #48	@ 0x30
 801142a:	2b09      	cmp	r3, #9
 801142c:	d94b      	bls.n	80114c6 <_vfiprintf_r+0x1a2>
 801142e:	b1b0      	cbz	r0, 801145e <_vfiprintf_r+0x13a>
 8011430:	9207      	str	r2, [sp, #28]
 8011432:	e014      	b.n	801145e <_vfiprintf_r+0x13a>
 8011434:	eba0 0308 	sub.w	r3, r0, r8
 8011438:	fa09 f303 	lsl.w	r3, r9, r3
 801143c:	4313      	orrs	r3, r2
 801143e:	9304      	str	r3, [sp, #16]
 8011440:	46a2      	mov	sl, r4
 8011442:	e7d2      	b.n	80113ea <_vfiprintf_r+0xc6>
 8011444:	9b03      	ldr	r3, [sp, #12]
 8011446:	1d19      	adds	r1, r3, #4
 8011448:	681b      	ldr	r3, [r3, #0]
 801144a:	9103      	str	r1, [sp, #12]
 801144c:	2b00      	cmp	r3, #0
 801144e:	bfbb      	ittet	lt
 8011450:	425b      	neglt	r3, r3
 8011452:	f042 0202 	orrlt.w	r2, r2, #2
 8011456:	9307      	strge	r3, [sp, #28]
 8011458:	9307      	strlt	r3, [sp, #28]
 801145a:	bfb8      	it	lt
 801145c:	9204      	strlt	r2, [sp, #16]
 801145e:	7823      	ldrb	r3, [r4, #0]
 8011460:	2b2e      	cmp	r3, #46	@ 0x2e
 8011462:	d10a      	bne.n	801147a <_vfiprintf_r+0x156>
 8011464:	7863      	ldrb	r3, [r4, #1]
 8011466:	2b2a      	cmp	r3, #42	@ 0x2a
 8011468:	d132      	bne.n	80114d0 <_vfiprintf_r+0x1ac>
 801146a:	9b03      	ldr	r3, [sp, #12]
 801146c:	1d1a      	adds	r2, r3, #4
 801146e:	681b      	ldr	r3, [r3, #0]
 8011470:	9203      	str	r2, [sp, #12]
 8011472:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011476:	3402      	adds	r4, #2
 8011478:	9305      	str	r3, [sp, #20]
 801147a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8011550 <_vfiprintf_r+0x22c>
 801147e:	7821      	ldrb	r1, [r4, #0]
 8011480:	2203      	movs	r2, #3
 8011482:	4650      	mov	r0, sl
 8011484:	f7ee fea4 	bl	80001d0 <memchr>
 8011488:	b138      	cbz	r0, 801149a <_vfiprintf_r+0x176>
 801148a:	9b04      	ldr	r3, [sp, #16]
 801148c:	eba0 000a 	sub.w	r0, r0, sl
 8011490:	2240      	movs	r2, #64	@ 0x40
 8011492:	4082      	lsls	r2, r0
 8011494:	4313      	orrs	r3, r2
 8011496:	3401      	adds	r4, #1
 8011498:	9304      	str	r3, [sp, #16]
 801149a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801149e:	4829      	ldr	r0, [pc, #164]	@ (8011544 <_vfiprintf_r+0x220>)
 80114a0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80114a4:	2206      	movs	r2, #6
 80114a6:	f7ee fe93 	bl	80001d0 <memchr>
 80114aa:	2800      	cmp	r0, #0
 80114ac:	d03f      	beq.n	801152e <_vfiprintf_r+0x20a>
 80114ae:	4b26      	ldr	r3, [pc, #152]	@ (8011548 <_vfiprintf_r+0x224>)
 80114b0:	bb1b      	cbnz	r3, 80114fa <_vfiprintf_r+0x1d6>
 80114b2:	9b03      	ldr	r3, [sp, #12]
 80114b4:	3307      	adds	r3, #7
 80114b6:	f023 0307 	bic.w	r3, r3, #7
 80114ba:	3308      	adds	r3, #8
 80114bc:	9303      	str	r3, [sp, #12]
 80114be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80114c0:	443b      	add	r3, r7
 80114c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80114c4:	e76a      	b.n	801139c <_vfiprintf_r+0x78>
 80114c6:	fb0c 3202 	mla	r2, ip, r2, r3
 80114ca:	460c      	mov	r4, r1
 80114cc:	2001      	movs	r0, #1
 80114ce:	e7a8      	b.n	8011422 <_vfiprintf_r+0xfe>
 80114d0:	2300      	movs	r3, #0
 80114d2:	3401      	adds	r4, #1
 80114d4:	9305      	str	r3, [sp, #20]
 80114d6:	4619      	mov	r1, r3
 80114d8:	f04f 0c0a 	mov.w	ip, #10
 80114dc:	4620      	mov	r0, r4
 80114de:	f810 2b01 	ldrb.w	r2, [r0], #1
 80114e2:	3a30      	subs	r2, #48	@ 0x30
 80114e4:	2a09      	cmp	r2, #9
 80114e6:	d903      	bls.n	80114f0 <_vfiprintf_r+0x1cc>
 80114e8:	2b00      	cmp	r3, #0
 80114ea:	d0c6      	beq.n	801147a <_vfiprintf_r+0x156>
 80114ec:	9105      	str	r1, [sp, #20]
 80114ee:	e7c4      	b.n	801147a <_vfiprintf_r+0x156>
 80114f0:	fb0c 2101 	mla	r1, ip, r1, r2
 80114f4:	4604      	mov	r4, r0
 80114f6:	2301      	movs	r3, #1
 80114f8:	e7f0      	b.n	80114dc <_vfiprintf_r+0x1b8>
 80114fa:	ab03      	add	r3, sp, #12
 80114fc:	9300      	str	r3, [sp, #0]
 80114fe:	462a      	mov	r2, r5
 8011500:	4b12      	ldr	r3, [pc, #72]	@ (801154c <_vfiprintf_r+0x228>)
 8011502:	a904      	add	r1, sp, #16
 8011504:	4630      	mov	r0, r6
 8011506:	f7fd fb57 	bl	800ebb8 <_printf_float>
 801150a:	4607      	mov	r7, r0
 801150c:	1c78      	adds	r0, r7, #1
 801150e:	d1d6      	bne.n	80114be <_vfiprintf_r+0x19a>
 8011510:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011512:	07d9      	lsls	r1, r3, #31
 8011514:	d405      	bmi.n	8011522 <_vfiprintf_r+0x1fe>
 8011516:	89ab      	ldrh	r3, [r5, #12]
 8011518:	059a      	lsls	r2, r3, #22
 801151a:	d402      	bmi.n	8011522 <_vfiprintf_r+0x1fe>
 801151c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801151e:	f7fe f927 	bl	800f770 <__retarget_lock_release_recursive>
 8011522:	89ab      	ldrh	r3, [r5, #12]
 8011524:	065b      	lsls	r3, r3, #25
 8011526:	f53f af1f 	bmi.w	8011368 <_vfiprintf_r+0x44>
 801152a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801152c:	e71e      	b.n	801136c <_vfiprintf_r+0x48>
 801152e:	ab03      	add	r3, sp, #12
 8011530:	9300      	str	r3, [sp, #0]
 8011532:	462a      	mov	r2, r5
 8011534:	4b05      	ldr	r3, [pc, #20]	@ (801154c <_vfiprintf_r+0x228>)
 8011536:	a904      	add	r1, sp, #16
 8011538:	4630      	mov	r0, r6
 801153a:	f7fd fdd5 	bl	800f0e8 <_printf_i>
 801153e:	e7e4      	b.n	801150a <_vfiprintf_r+0x1e6>
 8011540:	08012ecb 	.word	0x08012ecb
 8011544:	08012ed5 	.word	0x08012ed5
 8011548:	0800ebb9 	.word	0x0800ebb9
 801154c:	08011301 	.word	0x08011301
 8011550:	08012ed1 	.word	0x08012ed1

08011554 <__swbuf_r>:
 8011554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011556:	460e      	mov	r6, r1
 8011558:	4614      	mov	r4, r2
 801155a:	4605      	mov	r5, r0
 801155c:	b118      	cbz	r0, 8011566 <__swbuf_r+0x12>
 801155e:	6a03      	ldr	r3, [r0, #32]
 8011560:	b90b      	cbnz	r3, 8011566 <__swbuf_r+0x12>
 8011562:	f7fd ff6b 	bl	800f43c <__sinit>
 8011566:	69a3      	ldr	r3, [r4, #24]
 8011568:	60a3      	str	r3, [r4, #8]
 801156a:	89a3      	ldrh	r3, [r4, #12]
 801156c:	071a      	lsls	r2, r3, #28
 801156e:	d501      	bpl.n	8011574 <__swbuf_r+0x20>
 8011570:	6923      	ldr	r3, [r4, #16]
 8011572:	b943      	cbnz	r3, 8011586 <__swbuf_r+0x32>
 8011574:	4621      	mov	r1, r4
 8011576:	4628      	mov	r0, r5
 8011578:	f000 f82a 	bl	80115d0 <__swsetup_r>
 801157c:	b118      	cbz	r0, 8011586 <__swbuf_r+0x32>
 801157e:	f04f 37ff 	mov.w	r7, #4294967295
 8011582:	4638      	mov	r0, r7
 8011584:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011586:	6823      	ldr	r3, [r4, #0]
 8011588:	6922      	ldr	r2, [r4, #16]
 801158a:	1a98      	subs	r0, r3, r2
 801158c:	6963      	ldr	r3, [r4, #20]
 801158e:	b2f6      	uxtb	r6, r6
 8011590:	4283      	cmp	r3, r0
 8011592:	4637      	mov	r7, r6
 8011594:	dc05      	bgt.n	80115a2 <__swbuf_r+0x4e>
 8011596:	4621      	mov	r1, r4
 8011598:	4628      	mov	r0, r5
 801159a:	f7ff fda7 	bl	80110ec <_fflush_r>
 801159e:	2800      	cmp	r0, #0
 80115a0:	d1ed      	bne.n	801157e <__swbuf_r+0x2a>
 80115a2:	68a3      	ldr	r3, [r4, #8]
 80115a4:	3b01      	subs	r3, #1
 80115a6:	60a3      	str	r3, [r4, #8]
 80115a8:	6823      	ldr	r3, [r4, #0]
 80115aa:	1c5a      	adds	r2, r3, #1
 80115ac:	6022      	str	r2, [r4, #0]
 80115ae:	701e      	strb	r6, [r3, #0]
 80115b0:	6962      	ldr	r2, [r4, #20]
 80115b2:	1c43      	adds	r3, r0, #1
 80115b4:	429a      	cmp	r2, r3
 80115b6:	d004      	beq.n	80115c2 <__swbuf_r+0x6e>
 80115b8:	89a3      	ldrh	r3, [r4, #12]
 80115ba:	07db      	lsls	r3, r3, #31
 80115bc:	d5e1      	bpl.n	8011582 <__swbuf_r+0x2e>
 80115be:	2e0a      	cmp	r6, #10
 80115c0:	d1df      	bne.n	8011582 <__swbuf_r+0x2e>
 80115c2:	4621      	mov	r1, r4
 80115c4:	4628      	mov	r0, r5
 80115c6:	f7ff fd91 	bl	80110ec <_fflush_r>
 80115ca:	2800      	cmp	r0, #0
 80115cc:	d0d9      	beq.n	8011582 <__swbuf_r+0x2e>
 80115ce:	e7d6      	b.n	801157e <__swbuf_r+0x2a>

080115d0 <__swsetup_r>:
 80115d0:	b538      	push	{r3, r4, r5, lr}
 80115d2:	4b29      	ldr	r3, [pc, #164]	@ (8011678 <__swsetup_r+0xa8>)
 80115d4:	4605      	mov	r5, r0
 80115d6:	6818      	ldr	r0, [r3, #0]
 80115d8:	460c      	mov	r4, r1
 80115da:	b118      	cbz	r0, 80115e4 <__swsetup_r+0x14>
 80115dc:	6a03      	ldr	r3, [r0, #32]
 80115de:	b90b      	cbnz	r3, 80115e4 <__swsetup_r+0x14>
 80115e0:	f7fd ff2c 	bl	800f43c <__sinit>
 80115e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80115e8:	0719      	lsls	r1, r3, #28
 80115ea:	d422      	bmi.n	8011632 <__swsetup_r+0x62>
 80115ec:	06da      	lsls	r2, r3, #27
 80115ee:	d407      	bmi.n	8011600 <__swsetup_r+0x30>
 80115f0:	2209      	movs	r2, #9
 80115f2:	602a      	str	r2, [r5, #0]
 80115f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80115f8:	81a3      	strh	r3, [r4, #12]
 80115fa:	f04f 30ff 	mov.w	r0, #4294967295
 80115fe:	e033      	b.n	8011668 <__swsetup_r+0x98>
 8011600:	0758      	lsls	r0, r3, #29
 8011602:	d512      	bpl.n	801162a <__swsetup_r+0x5a>
 8011604:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011606:	b141      	cbz	r1, 801161a <__swsetup_r+0x4a>
 8011608:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801160c:	4299      	cmp	r1, r3
 801160e:	d002      	beq.n	8011616 <__swsetup_r+0x46>
 8011610:	4628      	mov	r0, r5
 8011612:	f7fe ff15 	bl	8010440 <_free_r>
 8011616:	2300      	movs	r3, #0
 8011618:	6363      	str	r3, [r4, #52]	@ 0x34
 801161a:	89a3      	ldrh	r3, [r4, #12]
 801161c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8011620:	81a3      	strh	r3, [r4, #12]
 8011622:	2300      	movs	r3, #0
 8011624:	6063      	str	r3, [r4, #4]
 8011626:	6923      	ldr	r3, [r4, #16]
 8011628:	6023      	str	r3, [r4, #0]
 801162a:	89a3      	ldrh	r3, [r4, #12]
 801162c:	f043 0308 	orr.w	r3, r3, #8
 8011630:	81a3      	strh	r3, [r4, #12]
 8011632:	6923      	ldr	r3, [r4, #16]
 8011634:	b94b      	cbnz	r3, 801164a <__swsetup_r+0x7a>
 8011636:	89a3      	ldrh	r3, [r4, #12]
 8011638:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801163c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011640:	d003      	beq.n	801164a <__swsetup_r+0x7a>
 8011642:	4621      	mov	r1, r4
 8011644:	4628      	mov	r0, r5
 8011646:	f000 f883 	bl	8011750 <__smakebuf_r>
 801164a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801164e:	f013 0201 	ands.w	r2, r3, #1
 8011652:	d00a      	beq.n	801166a <__swsetup_r+0x9a>
 8011654:	2200      	movs	r2, #0
 8011656:	60a2      	str	r2, [r4, #8]
 8011658:	6962      	ldr	r2, [r4, #20]
 801165a:	4252      	negs	r2, r2
 801165c:	61a2      	str	r2, [r4, #24]
 801165e:	6922      	ldr	r2, [r4, #16]
 8011660:	b942      	cbnz	r2, 8011674 <__swsetup_r+0xa4>
 8011662:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8011666:	d1c5      	bne.n	80115f4 <__swsetup_r+0x24>
 8011668:	bd38      	pop	{r3, r4, r5, pc}
 801166a:	0799      	lsls	r1, r3, #30
 801166c:	bf58      	it	pl
 801166e:	6962      	ldrpl	r2, [r4, #20]
 8011670:	60a2      	str	r2, [r4, #8]
 8011672:	e7f4      	b.n	801165e <__swsetup_r+0x8e>
 8011674:	2000      	movs	r0, #0
 8011676:	e7f7      	b.n	8011668 <__swsetup_r+0x98>
 8011678:	2000002c 	.word	0x2000002c

0801167c <_raise_r>:
 801167c:	291f      	cmp	r1, #31
 801167e:	b538      	push	{r3, r4, r5, lr}
 8011680:	4605      	mov	r5, r0
 8011682:	460c      	mov	r4, r1
 8011684:	d904      	bls.n	8011690 <_raise_r+0x14>
 8011686:	2316      	movs	r3, #22
 8011688:	6003      	str	r3, [r0, #0]
 801168a:	f04f 30ff 	mov.w	r0, #4294967295
 801168e:	bd38      	pop	{r3, r4, r5, pc}
 8011690:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8011692:	b112      	cbz	r2, 801169a <_raise_r+0x1e>
 8011694:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011698:	b94b      	cbnz	r3, 80116ae <_raise_r+0x32>
 801169a:	4628      	mov	r0, r5
 801169c:	f000 f830 	bl	8011700 <_getpid_r>
 80116a0:	4622      	mov	r2, r4
 80116a2:	4601      	mov	r1, r0
 80116a4:	4628      	mov	r0, r5
 80116a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80116aa:	f000 b817 	b.w	80116dc <_kill_r>
 80116ae:	2b01      	cmp	r3, #1
 80116b0:	d00a      	beq.n	80116c8 <_raise_r+0x4c>
 80116b2:	1c59      	adds	r1, r3, #1
 80116b4:	d103      	bne.n	80116be <_raise_r+0x42>
 80116b6:	2316      	movs	r3, #22
 80116b8:	6003      	str	r3, [r0, #0]
 80116ba:	2001      	movs	r0, #1
 80116bc:	e7e7      	b.n	801168e <_raise_r+0x12>
 80116be:	2100      	movs	r1, #0
 80116c0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80116c4:	4620      	mov	r0, r4
 80116c6:	4798      	blx	r3
 80116c8:	2000      	movs	r0, #0
 80116ca:	e7e0      	b.n	801168e <_raise_r+0x12>

080116cc <raise>:
 80116cc:	4b02      	ldr	r3, [pc, #8]	@ (80116d8 <raise+0xc>)
 80116ce:	4601      	mov	r1, r0
 80116d0:	6818      	ldr	r0, [r3, #0]
 80116d2:	f7ff bfd3 	b.w	801167c <_raise_r>
 80116d6:	bf00      	nop
 80116d8:	2000002c 	.word	0x2000002c

080116dc <_kill_r>:
 80116dc:	b538      	push	{r3, r4, r5, lr}
 80116de:	4d07      	ldr	r5, [pc, #28]	@ (80116fc <_kill_r+0x20>)
 80116e0:	2300      	movs	r3, #0
 80116e2:	4604      	mov	r4, r0
 80116e4:	4608      	mov	r0, r1
 80116e6:	4611      	mov	r1, r2
 80116e8:	602b      	str	r3, [r5, #0]
 80116ea:	f7f4 f849 	bl	8005780 <_kill>
 80116ee:	1c43      	adds	r3, r0, #1
 80116f0:	d102      	bne.n	80116f8 <_kill_r+0x1c>
 80116f2:	682b      	ldr	r3, [r5, #0]
 80116f4:	b103      	cbz	r3, 80116f8 <_kill_r+0x1c>
 80116f6:	6023      	str	r3, [r4, #0]
 80116f8:	bd38      	pop	{r3, r4, r5, pc}
 80116fa:	bf00      	nop
 80116fc:	20005608 	.word	0x20005608

08011700 <_getpid_r>:
 8011700:	f7f4 b836 	b.w	8005770 <_getpid>

08011704 <__swhatbuf_r>:
 8011704:	b570      	push	{r4, r5, r6, lr}
 8011706:	460c      	mov	r4, r1
 8011708:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801170c:	2900      	cmp	r1, #0
 801170e:	b096      	sub	sp, #88	@ 0x58
 8011710:	4615      	mov	r5, r2
 8011712:	461e      	mov	r6, r3
 8011714:	da0d      	bge.n	8011732 <__swhatbuf_r+0x2e>
 8011716:	89a3      	ldrh	r3, [r4, #12]
 8011718:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801171c:	f04f 0100 	mov.w	r1, #0
 8011720:	bf14      	ite	ne
 8011722:	2340      	movne	r3, #64	@ 0x40
 8011724:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8011728:	2000      	movs	r0, #0
 801172a:	6031      	str	r1, [r6, #0]
 801172c:	602b      	str	r3, [r5, #0]
 801172e:	b016      	add	sp, #88	@ 0x58
 8011730:	bd70      	pop	{r4, r5, r6, pc}
 8011732:	466a      	mov	r2, sp
 8011734:	f000 f848 	bl	80117c8 <_fstat_r>
 8011738:	2800      	cmp	r0, #0
 801173a:	dbec      	blt.n	8011716 <__swhatbuf_r+0x12>
 801173c:	9901      	ldr	r1, [sp, #4]
 801173e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8011742:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8011746:	4259      	negs	r1, r3
 8011748:	4159      	adcs	r1, r3
 801174a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801174e:	e7eb      	b.n	8011728 <__swhatbuf_r+0x24>

08011750 <__smakebuf_r>:
 8011750:	898b      	ldrh	r3, [r1, #12]
 8011752:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011754:	079d      	lsls	r5, r3, #30
 8011756:	4606      	mov	r6, r0
 8011758:	460c      	mov	r4, r1
 801175a:	d507      	bpl.n	801176c <__smakebuf_r+0x1c>
 801175c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8011760:	6023      	str	r3, [r4, #0]
 8011762:	6123      	str	r3, [r4, #16]
 8011764:	2301      	movs	r3, #1
 8011766:	6163      	str	r3, [r4, #20]
 8011768:	b003      	add	sp, #12
 801176a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801176c:	ab01      	add	r3, sp, #4
 801176e:	466a      	mov	r2, sp
 8011770:	f7ff ffc8 	bl	8011704 <__swhatbuf_r>
 8011774:	9f00      	ldr	r7, [sp, #0]
 8011776:	4605      	mov	r5, r0
 8011778:	4639      	mov	r1, r7
 801177a:	4630      	mov	r0, r6
 801177c:	f7fe fed4 	bl	8010528 <_malloc_r>
 8011780:	b948      	cbnz	r0, 8011796 <__smakebuf_r+0x46>
 8011782:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011786:	059a      	lsls	r2, r3, #22
 8011788:	d4ee      	bmi.n	8011768 <__smakebuf_r+0x18>
 801178a:	f023 0303 	bic.w	r3, r3, #3
 801178e:	f043 0302 	orr.w	r3, r3, #2
 8011792:	81a3      	strh	r3, [r4, #12]
 8011794:	e7e2      	b.n	801175c <__smakebuf_r+0xc>
 8011796:	89a3      	ldrh	r3, [r4, #12]
 8011798:	6020      	str	r0, [r4, #0]
 801179a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801179e:	81a3      	strh	r3, [r4, #12]
 80117a0:	9b01      	ldr	r3, [sp, #4]
 80117a2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80117a6:	b15b      	cbz	r3, 80117c0 <__smakebuf_r+0x70>
 80117a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80117ac:	4630      	mov	r0, r6
 80117ae:	f000 f81d 	bl	80117ec <_isatty_r>
 80117b2:	b128      	cbz	r0, 80117c0 <__smakebuf_r+0x70>
 80117b4:	89a3      	ldrh	r3, [r4, #12]
 80117b6:	f023 0303 	bic.w	r3, r3, #3
 80117ba:	f043 0301 	orr.w	r3, r3, #1
 80117be:	81a3      	strh	r3, [r4, #12]
 80117c0:	89a3      	ldrh	r3, [r4, #12]
 80117c2:	431d      	orrs	r5, r3
 80117c4:	81a5      	strh	r5, [r4, #12]
 80117c6:	e7cf      	b.n	8011768 <__smakebuf_r+0x18>

080117c8 <_fstat_r>:
 80117c8:	b538      	push	{r3, r4, r5, lr}
 80117ca:	4d07      	ldr	r5, [pc, #28]	@ (80117e8 <_fstat_r+0x20>)
 80117cc:	2300      	movs	r3, #0
 80117ce:	4604      	mov	r4, r0
 80117d0:	4608      	mov	r0, r1
 80117d2:	4611      	mov	r1, r2
 80117d4:	602b      	str	r3, [r5, #0]
 80117d6:	f7f4 f833 	bl	8005840 <_fstat>
 80117da:	1c43      	adds	r3, r0, #1
 80117dc:	d102      	bne.n	80117e4 <_fstat_r+0x1c>
 80117de:	682b      	ldr	r3, [r5, #0]
 80117e0:	b103      	cbz	r3, 80117e4 <_fstat_r+0x1c>
 80117e2:	6023      	str	r3, [r4, #0]
 80117e4:	bd38      	pop	{r3, r4, r5, pc}
 80117e6:	bf00      	nop
 80117e8:	20005608 	.word	0x20005608

080117ec <_isatty_r>:
 80117ec:	b538      	push	{r3, r4, r5, lr}
 80117ee:	4d06      	ldr	r5, [pc, #24]	@ (8011808 <_isatty_r+0x1c>)
 80117f0:	2300      	movs	r3, #0
 80117f2:	4604      	mov	r4, r0
 80117f4:	4608      	mov	r0, r1
 80117f6:	602b      	str	r3, [r5, #0]
 80117f8:	f7f4 f832 	bl	8005860 <_isatty>
 80117fc:	1c43      	adds	r3, r0, #1
 80117fe:	d102      	bne.n	8011806 <_isatty_r+0x1a>
 8011800:	682b      	ldr	r3, [r5, #0]
 8011802:	b103      	cbz	r3, 8011806 <_isatty_r+0x1a>
 8011804:	6023      	str	r3, [r4, #0]
 8011806:	bd38      	pop	{r3, r4, r5, pc}
 8011808:	20005608 	.word	0x20005608

0801180c <atan2f>:
 801180c:	f000 b874 	b.w	80118f8 <__ieee754_atan2f>

08011810 <expf>:
 8011810:	b508      	push	{r3, lr}
 8011812:	ed2d 8b02 	vpush	{d8}
 8011816:	eef0 8a40 	vmov.f32	s17, s0
 801181a:	f000 f90d 	bl	8011a38 <__ieee754_expf>
 801181e:	eeb0 8a40 	vmov.f32	s16, s0
 8011822:	eeb0 0a68 	vmov.f32	s0, s17
 8011826:	f000 f857 	bl	80118d8 <finitef>
 801182a:	b160      	cbz	r0, 8011846 <expf+0x36>
 801182c:	eddf 7a0f 	vldr	s15, [pc, #60]	@ 801186c <expf+0x5c>
 8011830:	eef4 8ae7 	vcmpe.f32	s17, s15
 8011834:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011838:	dd0a      	ble.n	8011850 <expf+0x40>
 801183a:	f7fd ff6d 	bl	800f718 <__errno>
 801183e:	ed9f 8a0c 	vldr	s16, [pc, #48]	@ 8011870 <expf+0x60>
 8011842:	2322      	movs	r3, #34	@ 0x22
 8011844:	6003      	str	r3, [r0, #0]
 8011846:	eeb0 0a48 	vmov.f32	s0, s16
 801184a:	ecbd 8b02 	vpop	{d8}
 801184e:	bd08      	pop	{r3, pc}
 8011850:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8011874 <expf+0x64>
 8011854:	eef4 8ae7 	vcmpe.f32	s17, s15
 8011858:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801185c:	d5f3      	bpl.n	8011846 <expf+0x36>
 801185e:	f7fd ff5b 	bl	800f718 <__errno>
 8011862:	2322      	movs	r3, #34	@ 0x22
 8011864:	ed9f 8a04 	vldr	s16, [pc, #16]	@ 8011878 <expf+0x68>
 8011868:	6003      	str	r3, [r0, #0]
 801186a:	e7ec      	b.n	8011846 <expf+0x36>
 801186c:	42b17217 	.word	0x42b17217
 8011870:	7f800000 	.word	0x7f800000
 8011874:	c2cff1b5 	.word	0xc2cff1b5
 8011878:	00000000 	.word	0x00000000

0801187c <logf>:
 801187c:	b508      	push	{r3, lr}
 801187e:	ed2d 8b02 	vpush	{d8}
 8011882:	eeb0 8a40 	vmov.f32	s16, s0
 8011886:	f000 f9a5 	bl	8011bd4 <__ieee754_logf>
 801188a:	eeb4 8a48 	vcmp.f32	s16, s16
 801188e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011892:	d60f      	bvs.n	80118b4 <logf+0x38>
 8011894:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8011898:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801189c:	dc0a      	bgt.n	80118b4 <logf+0x38>
 801189e:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80118a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118a6:	d108      	bne.n	80118ba <logf+0x3e>
 80118a8:	f7fd ff36 	bl	800f718 <__errno>
 80118ac:	2322      	movs	r3, #34	@ 0x22
 80118ae:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 80118d0 <logf+0x54>
 80118b2:	6003      	str	r3, [r0, #0]
 80118b4:	ecbd 8b02 	vpop	{d8}
 80118b8:	bd08      	pop	{r3, pc}
 80118ba:	f7fd ff2d 	bl	800f718 <__errno>
 80118be:	ecbd 8b02 	vpop	{d8}
 80118c2:	2321      	movs	r3, #33	@ 0x21
 80118c4:	6003      	str	r3, [r0, #0]
 80118c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80118ca:	4802      	ldr	r0, [pc, #8]	@ (80118d4 <logf+0x58>)
 80118cc:	f000 b80e 	b.w	80118ec <nanf>
 80118d0:	ff800000 	.word	0xff800000
 80118d4:	08012f21 	.word	0x08012f21

080118d8 <finitef>:
 80118d8:	ee10 3a10 	vmov	r3, s0
 80118dc:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 80118e0:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 80118e4:	bfac      	ite	ge
 80118e6:	2000      	movge	r0, #0
 80118e8:	2001      	movlt	r0, #1
 80118ea:	4770      	bx	lr

080118ec <nanf>:
 80118ec:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80118f4 <nanf+0x8>
 80118f0:	4770      	bx	lr
 80118f2:	bf00      	nop
 80118f4:	7fc00000 	.word	0x7fc00000

080118f8 <__ieee754_atan2f>:
 80118f8:	ee10 2a90 	vmov	r2, s1
 80118fc:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 8011900:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8011904:	b510      	push	{r4, lr}
 8011906:	eef0 7a40 	vmov.f32	s15, s0
 801190a:	d806      	bhi.n	801191a <__ieee754_atan2f+0x22>
 801190c:	ee10 0a10 	vmov	r0, s0
 8011910:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8011914:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8011918:	d904      	bls.n	8011924 <__ieee754_atan2f+0x2c>
 801191a:	ee77 7aa0 	vadd.f32	s15, s15, s1
 801191e:	eeb0 0a67 	vmov.f32	s0, s15
 8011922:	bd10      	pop	{r4, pc}
 8011924:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 8011928:	d103      	bne.n	8011932 <__ieee754_atan2f+0x3a>
 801192a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801192e:	f000 ba43 	b.w	8011db8 <atanf>
 8011932:	1794      	asrs	r4, r2, #30
 8011934:	f004 0402 	and.w	r4, r4, #2
 8011938:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 801193c:	b943      	cbnz	r3, 8011950 <__ieee754_atan2f+0x58>
 801193e:	2c02      	cmp	r4, #2
 8011940:	d05e      	beq.n	8011a00 <__ieee754_atan2f+0x108>
 8011942:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8011a14 <__ieee754_atan2f+0x11c>
 8011946:	2c03      	cmp	r4, #3
 8011948:	bf08      	it	eq
 801194a:	eef0 7a47 	vmoveq.f32	s15, s14
 801194e:	e7e6      	b.n	801191e <__ieee754_atan2f+0x26>
 8011950:	b941      	cbnz	r1, 8011964 <__ieee754_atan2f+0x6c>
 8011952:	eddf 7a31 	vldr	s15, [pc, #196]	@ 8011a18 <__ieee754_atan2f+0x120>
 8011956:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8011a1c <__ieee754_atan2f+0x124>
 801195a:	2800      	cmp	r0, #0
 801195c:	bfa8      	it	ge
 801195e:	eef0 7a47 	vmovge.f32	s15, s14
 8011962:	e7dc      	b.n	801191e <__ieee754_atan2f+0x26>
 8011964:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8011968:	d110      	bne.n	801198c <__ieee754_atan2f+0x94>
 801196a:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 801196e:	f104 34ff 	add.w	r4, r4, #4294967295
 8011972:	d107      	bne.n	8011984 <__ieee754_atan2f+0x8c>
 8011974:	2c02      	cmp	r4, #2
 8011976:	d846      	bhi.n	8011a06 <__ieee754_atan2f+0x10e>
 8011978:	4b29      	ldr	r3, [pc, #164]	@ (8011a20 <__ieee754_atan2f+0x128>)
 801197a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801197e:	edd3 7a00 	vldr	s15, [r3]
 8011982:	e7cc      	b.n	801191e <__ieee754_atan2f+0x26>
 8011984:	2c02      	cmp	r4, #2
 8011986:	d841      	bhi.n	8011a0c <__ieee754_atan2f+0x114>
 8011988:	4b26      	ldr	r3, [pc, #152]	@ (8011a24 <__ieee754_atan2f+0x12c>)
 801198a:	e7f6      	b.n	801197a <__ieee754_atan2f+0x82>
 801198c:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8011990:	d0df      	beq.n	8011952 <__ieee754_atan2f+0x5a>
 8011992:	1a5b      	subs	r3, r3, r1
 8011994:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 8011998:	ea4f 51e3 	mov.w	r1, r3, asr #23
 801199c:	da1a      	bge.n	80119d4 <__ieee754_atan2f+0xdc>
 801199e:	2a00      	cmp	r2, #0
 80119a0:	da01      	bge.n	80119a6 <__ieee754_atan2f+0xae>
 80119a2:	313c      	adds	r1, #60	@ 0x3c
 80119a4:	db19      	blt.n	80119da <__ieee754_atan2f+0xe2>
 80119a6:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 80119aa:	f000 fad9 	bl	8011f60 <fabsf>
 80119ae:	f000 fa03 	bl	8011db8 <atanf>
 80119b2:	eef0 7a40 	vmov.f32	s15, s0
 80119b6:	2c01      	cmp	r4, #1
 80119b8:	d012      	beq.n	80119e0 <__ieee754_atan2f+0xe8>
 80119ba:	2c02      	cmp	r4, #2
 80119bc:	d017      	beq.n	80119ee <__ieee754_atan2f+0xf6>
 80119be:	2c00      	cmp	r4, #0
 80119c0:	d0ad      	beq.n	801191e <__ieee754_atan2f+0x26>
 80119c2:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8011a28 <__ieee754_atan2f+0x130>
 80119c6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80119ca:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8011a2c <__ieee754_atan2f+0x134>
 80119ce:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80119d2:	e7a4      	b.n	801191e <__ieee754_atan2f+0x26>
 80119d4:	eddf 7a11 	vldr	s15, [pc, #68]	@ 8011a1c <__ieee754_atan2f+0x124>
 80119d8:	e7ed      	b.n	80119b6 <__ieee754_atan2f+0xbe>
 80119da:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8011a30 <__ieee754_atan2f+0x138>
 80119de:	e7ea      	b.n	80119b6 <__ieee754_atan2f+0xbe>
 80119e0:	ee17 3a90 	vmov	r3, s15
 80119e4:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80119e8:	ee07 3a90 	vmov	s15, r3
 80119ec:	e797      	b.n	801191e <__ieee754_atan2f+0x26>
 80119ee:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8011a28 <__ieee754_atan2f+0x130>
 80119f2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80119f6:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8011a2c <__ieee754_atan2f+0x134>
 80119fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80119fe:	e78e      	b.n	801191e <__ieee754_atan2f+0x26>
 8011a00:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 8011a2c <__ieee754_atan2f+0x134>
 8011a04:	e78b      	b.n	801191e <__ieee754_atan2f+0x26>
 8011a06:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 8011a34 <__ieee754_atan2f+0x13c>
 8011a0a:	e788      	b.n	801191e <__ieee754_atan2f+0x26>
 8011a0c:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8011a30 <__ieee754_atan2f+0x138>
 8011a10:	e785      	b.n	801191e <__ieee754_atan2f+0x26>
 8011a12:	bf00      	nop
 8011a14:	c0490fdb 	.word	0xc0490fdb
 8011a18:	bfc90fdb 	.word	0xbfc90fdb
 8011a1c:	3fc90fdb 	.word	0x3fc90fdb
 8011a20:	0801302c 	.word	0x0801302c
 8011a24:	08013020 	.word	0x08013020
 8011a28:	33bbbd2e 	.word	0x33bbbd2e
 8011a2c:	40490fdb 	.word	0x40490fdb
 8011a30:	00000000 	.word	0x00000000
 8011a34:	3f490fdb 	.word	0x3f490fdb

08011a38 <__ieee754_expf>:
 8011a38:	ee10 2a10 	vmov	r2, s0
 8011a3c:	f022 4300 	bic.w	r3, r2, #2147483648	@ 0x80000000
 8011a40:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8011a44:	d902      	bls.n	8011a4c <__ieee754_expf+0x14>
 8011a46:	ee30 0a00 	vadd.f32	s0, s0, s0
 8011a4a:	4770      	bx	lr
 8011a4c:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 8011a50:	d106      	bne.n	8011a60 <__ieee754_expf+0x28>
 8011a52:	eddf 7a4e 	vldr	s15, [pc, #312]	@ 8011b8c <__ieee754_expf+0x154>
 8011a56:	2900      	cmp	r1, #0
 8011a58:	bf18      	it	ne
 8011a5a:	eeb0 0a67 	vmovne.f32	s0, s15
 8011a5e:	4770      	bx	lr
 8011a60:	484b      	ldr	r0, [pc, #300]	@ (8011b90 <__ieee754_expf+0x158>)
 8011a62:	4282      	cmp	r2, r0
 8011a64:	dd02      	ble.n	8011a6c <__ieee754_expf+0x34>
 8011a66:	2000      	movs	r0, #0
 8011a68:	f000 baa0 	b.w	8011fac <__math_oflowf>
 8011a6c:	2a00      	cmp	r2, #0
 8011a6e:	da05      	bge.n	8011a7c <__ieee754_expf+0x44>
 8011a70:	4a48      	ldr	r2, [pc, #288]	@ (8011b94 <__ieee754_expf+0x15c>)
 8011a72:	4293      	cmp	r3, r2
 8011a74:	d902      	bls.n	8011a7c <__ieee754_expf+0x44>
 8011a76:	2000      	movs	r0, #0
 8011a78:	f000 ba92 	b.w	8011fa0 <__math_uflowf>
 8011a7c:	4a46      	ldr	r2, [pc, #280]	@ (8011b98 <__ieee754_expf+0x160>)
 8011a7e:	4293      	cmp	r3, r2
 8011a80:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8011a84:	d952      	bls.n	8011b2c <__ieee754_expf+0xf4>
 8011a86:	4a45      	ldr	r2, [pc, #276]	@ (8011b9c <__ieee754_expf+0x164>)
 8011a88:	4293      	cmp	r3, r2
 8011a8a:	ea4f 0281 	mov.w	r2, r1, lsl #2
 8011a8e:	d834      	bhi.n	8011afa <__ieee754_expf+0xc2>
 8011a90:	4b43      	ldr	r3, [pc, #268]	@ (8011ba0 <__ieee754_expf+0x168>)
 8011a92:	4413      	add	r3, r2
 8011a94:	ed93 7a00 	vldr	s14, [r3]
 8011a98:	4b42      	ldr	r3, [pc, #264]	@ (8011ba4 <__ieee754_expf+0x16c>)
 8011a9a:	4413      	add	r3, r2
 8011a9c:	ee30 7a47 	vsub.f32	s14, s0, s14
 8011aa0:	f081 0201 	eor.w	r2, r1, #1
 8011aa4:	edd3 7a00 	vldr	s15, [r3]
 8011aa8:	1a52      	subs	r2, r2, r1
 8011aaa:	ee37 0a67 	vsub.f32	s0, s14, s15
 8011aae:	ee20 6a00 	vmul.f32	s12, s0, s0
 8011ab2:	ed9f 5a3d 	vldr	s10, [pc, #244]	@ 8011ba8 <__ieee754_expf+0x170>
 8011ab6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8011bac <__ieee754_expf+0x174>
 8011aba:	eee6 6a05 	vfma.f32	s13, s12, s10
 8011abe:	ed9f 5a3c 	vldr	s10, [pc, #240]	@ 8011bb0 <__ieee754_expf+0x178>
 8011ac2:	eea6 5a86 	vfma.f32	s10, s13, s12
 8011ac6:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8011bb4 <__ieee754_expf+0x17c>
 8011aca:	eee5 6a06 	vfma.f32	s13, s10, s12
 8011ace:	ed9f 5a3a 	vldr	s10, [pc, #232]	@ 8011bb8 <__ieee754_expf+0x180>
 8011ad2:	eea6 5a86 	vfma.f32	s10, s13, s12
 8011ad6:	eef0 6a40 	vmov.f32	s13, s0
 8011ada:	eee5 6a46 	vfms.f32	s13, s10, s12
 8011ade:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8011ae2:	ee20 5a26 	vmul.f32	s10, s0, s13
 8011ae6:	bb92      	cbnz	r2, 8011b4e <__ieee754_expf+0x116>
 8011ae8:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8011aec:	eec5 7a26 	vdiv.f32	s15, s10, s13
 8011af0:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8011af4:	ee35 0ac0 	vsub.f32	s0, s11, s0
 8011af8:	4770      	bx	lr
 8011afa:	4b30      	ldr	r3, [pc, #192]	@ (8011bbc <__ieee754_expf+0x184>)
 8011afc:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8011bc0 <__ieee754_expf+0x188>
 8011b00:	eddf 6a30 	vldr	s13, [pc, #192]	@ 8011bc4 <__ieee754_expf+0x18c>
 8011b04:	4413      	add	r3, r2
 8011b06:	edd3 7a00 	vldr	s15, [r3]
 8011b0a:	eee0 7a07 	vfma.f32	s15, s0, s14
 8011b0e:	eeb0 7a40 	vmov.f32	s14, s0
 8011b12:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011b16:	ee17 2a90 	vmov	r2, s15
 8011b1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011b1e:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8011b22:	eddf 6a29 	vldr	s13, [pc, #164]	@ 8011bc8 <__ieee754_expf+0x190>
 8011b26:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8011b2a:	e7be      	b.n	8011aaa <__ieee754_expf+0x72>
 8011b2c:	f1b3 5f50 	cmp.w	r3, #872415232	@ 0x34000000
 8011b30:	d20b      	bcs.n	8011b4a <__ieee754_expf+0x112>
 8011b32:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8011bcc <__ieee754_expf+0x194>
 8011b36:	ee70 6a26 	vadd.f32	s13, s0, s13
 8011b3a:	eef4 6ae5 	vcmpe.f32	s13, s11
 8011b3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b42:	dd02      	ble.n	8011b4a <__ieee754_expf+0x112>
 8011b44:	ee30 0a25 	vadd.f32	s0, s0, s11
 8011b48:	4770      	bx	lr
 8011b4a:	2200      	movs	r2, #0
 8011b4c:	e7af      	b.n	8011aae <__ieee754_expf+0x76>
 8011b4e:	ee36 6a66 	vsub.f32	s12, s12, s13
 8011b52:	f112 0f7d 	cmn.w	r2, #125	@ 0x7d
 8011b56:	eec5 6a06 	vdiv.f32	s13, s10, s12
 8011b5a:	bfb8      	it	lt
 8011b5c:	3264      	addlt	r2, #100	@ 0x64
 8011b5e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8011b62:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011b66:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8011b6a:	ee17 3a90 	vmov	r3, s15
 8011b6e:	bfab      	itete	ge
 8011b70:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 8011b74:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 8011b78:	ee00 3a10 	vmovge	s0, r3
 8011b7c:	eddf 7a14 	vldrlt	s15, [pc, #80]	@ 8011bd0 <__ieee754_expf+0x198>
 8011b80:	bfbc      	itt	lt
 8011b82:	ee00 3a10 	vmovlt	s0, r3
 8011b86:	ee20 0a27 	vmullt.f32	s0, s0, s15
 8011b8a:	4770      	bx	lr
 8011b8c:	00000000 	.word	0x00000000
 8011b90:	42b17217 	.word	0x42b17217
 8011b94:	42cff1b5 	.word	0x42cff1b5
 8011b98:	3eb17218 	.word	0x3eb17218
 8011b9c:	3f851591 	.word	0x3f851591
 8011ba0:	08013040 	.word	0x08013040
 8011ba4:	08013038 	.word	0x08013038
 8011ba8:	3331bb4c 	.word	0x3331bb4c
 8011bac:	b5ddea0e 	.word	0xb5ddea0e
 8011bb0:	388ab355 	.word	0x388ab355
 8011bb4:	bb360b61 	.word	0xbb360b61
 8011bb8:	3e2aaaab 	.word	0x3e2aaaab
 8011bbc:	08013048 	.word	0x08013048
 8011bc0:	3fb8aa3b 	.word	0x3fb8aa3b
 8011bc4:	3f317180 	.word	0x3f317180
 8011bc8:	3717f7d1 	.word	0x3717f7d1
 8011bcc:	7149f2ca 	.word	0x7149f2ca
 8011bd0:	0d800000 	.word	0x0d800000

08011bd4 <__ieee754_logf>:
 8011bd4:	ee10 3a10 	vmov	r3, s0
 8011bd8:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8011bdc:	d106      	bne.n	8011bec <__ieee754_logf+0x18>
 8011bde:	ed9f 7a66 	vldr	s14, [pc, #408]	@ 8011d78 <__ieee754_logf+0x1a4>
 8011be2:	eddf 7a66 	vldr	s15, [pc, #408]	@ 8011d7c <__ieee754_logf+0x1a8>
 8011be6:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8011bea:	4770      	bx	lr
 8011bec:	2b00      	cmp	r3, #0
 8011bee:	461a      	mov	r2, r3
 8011bf0:	da02      	bge.n	8011bf8 <__ieee754_logf+0x24>
 8011bf2:	ee30 7a40 	vsub.f32	s14, s0, s0
 8011bf6:	e7f4      	b.n	8011be2 <__ieee754_logf+0xe>
 8011bf8:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8011bfc:	db02      	blt.n	8011c04 <__ieee754_logf+0x30>
 8011bfe:	ee30 0a00 	vadd.f32	s0, s0, s0
 8011c02:	4770      	bx	lr
 8011c04:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8011c08:	bfb8      	it	lt
 8011c0a:	eddf 7a5d 	vldrlt	s15, [pc, #372]	@ 8011d80 <__ieee754_logf+0x1ac>
 8011c0e:	485d      	ldr	r0, [pc, #372]	@ (8011d84 <__ieee754_logf+0x1b0>)
 8011c10:	bfbe      	ittt	lt
 8011c12:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8011c16:	f06f 0118 	mvnlt.w	r1, #24
 8011c1a:	ee17 2a90 	vmovlt	r2, s15
 8011c1e:	ea4f 53e2 	mov.w	r3, r2, asr #23
 8011c22:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8011c26:	4410      	add	r0, r2
 8011c28:	bfa8      	it	ge
 8011c2a:	2100      	movge	r1, #0
 8011c2c:	3b7f      	subs	r3, #127	@ 0x7f
 8011c2e:	440b      	add	r3, r1
 8011c30:	f400 0100 	and.w	r1, r0, #8388608	@ 0x800000
 8011c34:	f081 517e 	eor.w	r1, r1, #1065353216	@ 0x3f800000
 8011c38:	4311      	orrs	r1, r2
 8011c3a:	ee00 1a10 	vmov	s0, r1
 8011c3e:	4952      	ldr	r1, [pc, #328]	@ (8011d88 <__ieee754_logf+0x1b4>)
 8011c40:	eb03 53d0 	add.w	r3, r3, r0, lsr #23
 8011c44:	f102 000f 	add.w	r0, r2, #15
 8011c48:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8011c4c:	4001      	ands	r1, r0
 8011c4e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8011c52:	bb89      	cbnz	r1, 8011cb8 <__ieee754_logf+0xe4>
 8011c54:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8011c58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c5c:	d10f      	bne.n	8011c7e <__ieee754_logf+0xaa>
 8011c5e:	2b00      	cmp	r3, #0
 8011c60:	f000 8087 	beq.w	8011d72 <__ieee754_logf+0x19e>
 8011c64:	ee07 3a90 	vmov	s15, r3
 8011c68:	ed9f 0a48 	vldr	s0, [pc, #288]	@ 8011d8c <__ieee754_logf+0x1b8>
 8011c6c:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 8011d90 <__ieee754_logf+0x1bc>
 8011c70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011c74:	ee27 0a80 	vmul.f32	s0, s15, s0
 8011c78:	eea7 0a87 	vfma.f32	s0, s15, s14
 8011c7c:	4770      	bx	lr
 8011c7e:	eddf 6a45 	vldr	s13, [pc, #276]	@ 8011d94 <__ieee754_logf+0x1c0>
 8011c82:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8011c86:	eee0 7a66 	vfms.f32	s15, s0, s13
 8011c8a:	ee20 7a00 	vmul.f32	s14, s0, s0
 8011c8e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011c92:	b913      	cbnz	r3, 8011c9a <__ieee754_logf+0xc6>
 8011c94:	ee30 0a47 	vsub.f32	s0, s0, s14
 8011c98:	4770      	bx	lr
 8011c9a:	ee07 3a90 	vmov	s15, r3
 8011c9e:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8011d8c <__ieee754_logf+0x1b8>
 8011ca2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011ca6:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8011caa:	ee37 0a40 	vsub.f32	s0, s14, s0
 8011cae:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8011d90 <__ieee754_logf+0x1bc>
 8011cb2:	ee97 0a87 	vfnms.f32	s0, s15, s14
 8011cb6:	4770      	bx	lr
 8011cb8:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 8011cbc:	ee70 7a27 	vadd.f32	s15, s0, s15
 8011cc0:	eddf 5a35 	vldr	s11, [pc, #212]	@ 8011d98 <__ieee754_logf+0x1c4>
 8011cc4:	eddf 4a35 	vldr	s9, [pc, #212]	@ 8011d9c <__ieee754_logf+0x1c8>
 8011cc8:	4935      	ldr	r1, [pc, #212]	@ (8011da0 <__ieee754_logf+0x1cc>)
 8011cca:	ee80 6a27 	vdiv.f32	s12, s0, s15
 8011cce:	4411      	add	r1, r2
 8011cd0:	f5c2 1257 	rsb	r2, r2, #3522560	@ 0x35c000
 8011cd4:	f502 7222 	add.w	r2, r2, #648	@ 0x288
 8011cd8:	430a      	orrs	r2, r1
 8011cda:	2a00      	cmp	r2, #0
 8011cdc:	ee07 3a90 	vmov	s15, r3
 8011ce0:	ee26 5a06 	vmul.f32	s10, s12, s12
 8011ce4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8011ce8:	ee25 7a05 	vmul.f32	s14, s10, s10
 8011cec:	eddf 7a2d 	vldr	s15, [pc, #180]	@ 8011da4 <__ieee754_logf+0x1d0>
 8011cf0:	eee7 7a25 	vfma.f32	s15, s14, s11
 8011cf4:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 8011da8 <__ieee754_logf+0x1d4>
 8011cf8:	eee7 5a87 	vfma.f32	s11, s15, s14
 8011cfc:	eddf 7a2b 	vldr	s15, [pc, #172]	@ 8011dac <__ieee754_logf+0x1d8>
 8011d00:	eee7 7a24 	vfma.f32	s15, s14, s9
 8011d04:	eddf 4a2a 	vldr	s9, [pc, #168]	@ 8011db0 <__ieee754_logf+0x1dc>
 8011d08:	eee7 4a87 	vfma.f32	s9, s15, s14
 8011d0c:	eddf 7a29 	vldr	s15, [pc, #164]	@ 8011db4 <__ieee754_logf+0x1e0>
 8011d10:	eee4 7a87 	vfma.f32	s15, s9, s14
 8011d14:	ee67 7a85 	vmul.f32	s15, s15, s10
 8011d18:	eee5 7a87 	vfma.f32	s15, s11, s14
 8011d1c:	dd1a      	ble.n	8011d54 <__ieee754_logf+0x180>
 8011d1e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8011d22:	ee20 7a07 	vmul.f32	s14, s0, s14
 8011d26:	ee27 7a00 	vmul.f32	s14, s14, s0
 8011d2a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011d2e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8011d32:	b913      	cbnz	r3, 8011d3a <__ieee754_logf+0x166>
 8011d34:	ee37 7a67 	vsub.f32	s14, s14, s15
 8011d38:	e7ac      	b.n	8011c94 <__ieee754_logf+0xc0>
 8011d3a:	ed9f 6a14 	vldr	s12, [pc, #80]	@ 8011d8c <__ieee754_logf+0x1b8>
 8011d3e:	eee6 7a86 	vfma.f32	s15, s13, s12
 8011d42:	ee37 7a67 	vsub.f32	s14, s14, s15
 8011d46:	ee37 0a40 	vsub.f32	s0, s14, s0
 8011d4a:	eddf 7a11 	vldr	s15, [pc, #68]	@ 8011d90 <__ieee754_logf+0x1bc>
 8011d4e:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 8011d52:	4770      	bx	lr
 8011d54:	ee70 7a67 	vsub.f32	s15, s0, s15
 8011d58:	ee67 7a86 	vmul.f32	s15, s15, s12
 8011d5c:	b913      	cbnz	r3, 8011d64 <__ieee754_logf+0x190>
 8011d5e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8011d62:	4770      	bx	lr
 8011d64:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8011d8c <__ieee754_logf+0x1b8>
 8011d68:	eee6 7ac7 	vfms.f32	s15, s13, s14
 8011d6c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8011d70:	e7eb      	b.n	8011d4a <__ieee754_logf+0x176>
 8011d72:	ed9f 0a02 	vldr	s0, [pc, #8]	@ 8011d7c <__ieee754_logf+0x1a8>
 8011d76:	4770      	bx	lr
 8011d78:	cc000000 	.word	0xcc000000
 8011d7c:	00000000 	.word	0x00000000
 8011d80:	4c000000 	.word	0x4c000000
 8011d84:	004afb20 	.word	0x004afb20
 8011d88:	007ffff0 	.word	0x007ffff0
 8011d8c:	3717f7d1 	.word	0x3717f7d1
 8011d90:	3f317180 	.word	0x3f317180
 8011d94:	3eaaaaab 	.word	0x3eaaaaab
 8011d98:	3e1cd04f 	.word	0x3e1cd04f
 8011d9c:	3e178897 	.word	0x3e178897
 8011da0:	ffcf5c30 	.word	0xffcf5c30
 8011da4:	3e638e29 	.word	0x3e638e29
 8011da8:	3ecccccd 	.word	0x3ecccccd
 8011dac:	3e3a3325 	.word	0x3e3a3325
 8011db0:	3e924925 	.word	0x3e924925
 8011db4:	3f2aaaab 	.word	0x3f2aaaab

08011db8 <atanf>:
 8011db8:	b538      	push	{r3, r4, r5, lr}
 8011dba:	ee10 5a10 	vmov	r5, s0
 8011dbe:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 8011dc2:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 8011dc6:	eef0 7a40 	vmov.f32	s15, s0
 8011dca:	d310      	bcc.n	8011dee <atanf+0x36>
 8011dcc:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 8011dd0:	d904      	bls.n	8011ddc <atanf+0x24>
 8011dd2:	ee70 7a00 	vadd.f32	s15, s0, s0
 8011dd6:	eeb0 0a67 	vmov.f32	s0, s15
 8011dda:	bd38      	pop	{r3, r4, r5, pc}
 8011ddc:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 8011f14 <atanf+0x15c>
 8011de0:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8011f18 <atanf+0x160>
 8011de4:	2d00      	cmp	r5, #0
 8011de6:	bfc8      	it	gt
 8011de8:	eef0 7a47 	vmovgt.f32	s15, s14
 8011dec:	e7f3      	b.n	8011dd6 <atanf+0x1e>
 8011dee:	4b4b      	ldr	r3, [pc, #300]	@ (8011f1c <atanf+0x164>)
 8011df0:	429c      	cmp	r4, r3
 8011df2:	d810      	bhi.n	8011e16 <atanf+0x5e>
 8011df4:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 8011df8:	d20a      	bcs.n	8011e10 <atanf+0x58>
 8011dfa:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8011f20 <atanf+0x168>
 8011dfe:	ee30 7a07 	vadd.f32	s14, s0, s14
 8011e02:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8011e06:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8011e0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e0e:	dce2      	bgt.n	8011dd6 <atanf+0x1e>
 8011e10:	f04f 33ff 	mov.w	r3, #4294967295
 8011e14:	e013      	b.n	8011e3e <atanf+0x86>
 8011e16:	f000 f8a3 	bl	8011f60 <fabsf>
 8011e1a:	4b42      	ldr	r3, [pc, #264]	@ (8011f24 <atanf+0x16c>)
 8011e1c:	429c      	cmp	r4, r3
 8011e1e:	d84f      	bhi.n	8011ec0 <atanf+0x108>
 8011e20:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 8011e24:	429c      	cmp	r4, r3
 8011e26:	d841      	bhi.n	8011eac <atanf+0xf4>
 8011e28:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 8011e2c:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8011e30:	eea0 7a27 	vfma.f32	s14, s0, s15
 8011e34:	2300      	movs	r3, #0
 8011e36:	ee30 0a27 	vadd.f32	s0, s0, s15
 8011e3a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8011e3e:	1c5a      	adds	r2, r3, #1
 8011e40:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8011e44:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8011f28 <atanf+0x170>
 8011e48:	eddf 5a38 	vldr	s11, [pc, #224]	@ 8011f2c <atanf+0x174>
 8011e4c:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 8011f30 <atanf+0x178>
 8011e50:	ee66 6a06 	vmul.f32	s13, s12, s12
 8011e54:	eee6 5a87 	vfma.f32	s11, s13, s14
 8011e58:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8011f34 <atanf+0x17c>
 8011e5c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8011e60:	eddf 5a35 	vldr	s11, [pc, #212]	@ 8011f38 <atanf+0x180>
 8011e64:	eee7 5a26 	vfma.f32	s11, s14, s13
 8011e68:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8011f3c <atanf+0x184>
 8011e6c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8011e70:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8011f40 <atanf+0x188>
 8011e74:	eee7 5a26 	vfma.f32	s11, s14, s13
 8011e78:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8011f44 <atanf+0x18c>
 8011e7c:	eea6 5a87 	vfma.f32	s10, s13, s14
 8011e80:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8011f48 <atanf+0x190>
 8011e84:	eea5 7a26 	vfma.f32	s14, s10, s13
 8011e88:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 8011f4c <atanf+0x194>
 8011e8c:	eea7 5a26 	vfma.f32	s10, s14, s13
 8011e90:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8011f50 <atanf+0x198>
 8011e94:	eea5 7a26 	vfma.f32	s14, s10, s13
 8011e98:	ee27 7a26 	vmul.f32	s14, s14, s13
 8011e9c:	eea5 7a86 	vfma.f32	s14, s11, s12
 8011ea0:	ee27 7a87 	vmul.f32	s14, s15, s14
 8011ea4:	d121      	bne.n	8011eea <atanf+0x132>
 8011ea6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011eaa:	e794      	b.n	8011dd6 <atanf+0x1e>
 8011eac:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8011eb0:	ee30 7a67 	vsub.f32	s14, s0, s15
 8011eb4:	ee30 0a27 	vadd.f32	s0, s0, s15
 8011eb8:	2301      	movs	r3, #1
 8011eba:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8011ebe:	e7be      	b.n	8011e3e <atanf+0x86>
 8011ec0:	4b24      	ldr	r3, [pc, #144]	@ (8011f54 <atanf+0x19c>)
 8011ec2:	429c      	cmp	r4, r3
 8011ec4:	d80b      	bhi.n	8011ede <atanf+0x126>
 8011ec6:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 8011eca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8011ece:	eea0 7a27 	vfma.f32	s14, s0, s15
 8011ed2:	2302      	movs	r3, #2
 8011ed4:	ee70 6a67 	vsub.f32	s13, s0, s15
 8011ed8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011edc:	e7af      	b.n	8011e3e <atanf+0x86>
 8011ede:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8011ee2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8011ee6:	2303      	movs	r3, #3
 8011ee8:	e7a9      	b.n	8011e3e <atanf+0x86>
 8011eea:	4a1b      	ldr	r2, [pc, #108]	@ (8011f58 <atanf+0x1a0>)
 8011eec:	491b      	ldr	r1, [pc, #108]	@ (8011f5c <atanf+0x1a4>)
 8011eee:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8011ef2:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8011ef6:	edd3 6a00 	vldr	s13, [r3]
 8011efa:	ee37 7a66 	vsub.f32	s14, s14, s13
 8011efe:	2d00      	cmp	r5, #0
 8011f00:	ee37 7a67 	vsub.f32	s14, s14, s15
 8011f04:	edd2 7a00 	vldr	s15, [r2]
 8011f08:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011f0c:	bfb8      	it	lt
 8011f0e:	eef1 7a67 	vneglt.f32	s15, s15
 8011f12:	e760      	b.n	8011dd6 <atanf+0x1e>
 8011f14:	bfc90fdb 	.word	0xbfc90fdb
 8011f18:	3fc90fdb 	.word	0x3fc90fdb
 8011f1c:	3edfffff 	.word	0x3edfffff
 8011f20:	7149f2ca 	.word	0x7149f2ca
 8011f24:	3f97ffff 	.word	0x3f97ffff
 8011f28:	3c8569d7 	.word	0x3c8569d7
 8011f2c:	3d4bda59 	.word	0x3d4bda59
 8011f30:	bd6ef16b 	.word	0xbd6ef16b
 8011f34:	3d886b35 	.word	0x3d886b35
 8011f38:	3dba2e6e 	.word	0x3dba2e6e
 8011f3c:	3e124925 	.word	0x3e124925
 8011f40:	3eaaaaab 	.word	0x3eaaaaab
 8011f44:	bd15a221 	.word	0xbd15a221
 8011f48:	bd9d8795 	.word	0xbd9d8795
 8011f4c:	bde38e38 	.word	0xbde38e38
 8011f50:	be4ccccd 	.word	0xbe4ccccd
 8011f54:	401bffff 	.word	0x401bffff
 8011f58:	08013060 	.word	0x08013060
 8011f5c:	08013050 	.word	0x08013050

08011f60 <fabsf>:
 8011f60:	ee10 3a10 	vmov	r3, s0
 8011f64:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8011f68:	ee00 3a10 	vmov	s0, r3
 8011f6c:	4770      	bx	lr

08011f6e <with_errnof>:
 8011f6e:	b510      	push	{r4, lr}
 8011f70:	ed2d 8b02 	vpush	{d8}
 8011f74:	eeb0 8a40 	vmov.f32	s16, s0
 8011f78:	4604      	mov	r4, r0
 8011f7a:	f7fd fbcd 	bl	800f718 <__errno>
 8011f7e:	eeb0 0a48 	vmov.f32	s0, s16
 8011f82:	ecbd 8b02 	vpop	{d8}
 8011f86:	6004      	str	r4, [r0, #0]
 8011f88:	bd10      	pop	{r4, pc}

08011f8a <xflowf>:
 8011f8a:	b130      	cbz	r0, 8011f9a <xflowf+0x10>
 8011f8c:	eef1 7a40 	vneg.f32	s15, s0
 8011f90:	ee27 0a80 	vmul.f32	s0, s15, s0
 8011f94:	2022      	movs	r0, #34	@ 0x22
 8011f96:	f7ff bfea 	b.w	8011f6e <with_errnof>
 8011f9a:	eef0 7a40 	vmov.f32	s15, s0
 8011f9e:	e7f7      	b.n	8011f90 <xflowf+0x6>

08011fa0 <__math_uflowf>:
 8011fa0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8011fa8 <__math_uflowf+0x8>
 8011fa4:	f7ff bff1 	b.w	8011f8a <xflowf>
 8011fa8:	10000000 	.word	0x10000000

08011fac <__math_oflowf>:
 8011fac:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8011fb4 <__math_oflowf+0x8>
 8011fb0:	f7ff bfeb 	b.w	8011f8a <xflowf>
 8011fb4:	70000000 	.word	0x70000000

08011fb8 <_init>:
 8011fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011fba:	bf00      	nop
 8011fbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011fbe:	bc08      	pop	{r3}
 8011fc0:	469e      	mov	lr, r3
 8011fc2:	4770      	bx	lr

08011fc4 <_fini>:
 8011fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011fc6:	bf00      	nop
 8011fc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011fca:	bc08      	pop	{r3}
 8011fcc:	469e      	mov	lr, r3
 8011fce:	4770      	bx	lr
