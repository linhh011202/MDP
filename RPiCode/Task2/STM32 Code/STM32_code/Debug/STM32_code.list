
STM32_code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000142f8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001124  08014488  08014488  00024488  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080155ac  080155ac  00030248  2**0
                  CONTENTS
  4 .ARM          00000008  080155ac  080155ac  000255ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080155b4  080155b4  00030248  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080155b4  080155b4  000255b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  080155bc  080155bc  000255bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000248  20000000  080155c4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030248  2**0
                  CONTENTS
 10 .bss          00005a5c  20000248  20000248  00030248  2**2
                  ALLOC
 11 ._user_heap_stack 00000c04  20005ca4  20005ca4  00030248  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030248  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002d3e7  00000000  00000000  00030278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005902  00000000  00000000  0005d65f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001db8  00000000  00000000  00062f68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001c00  00000000  00000000  00064d20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002c19b  00000000  00000000  00066920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00025d04  00000000  00000000  00092abb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000edd09  00000000  00000000  000b87bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001a64c8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009540  00000000  00000000  001a6518  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000248 	.word	0x20000248
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08014470 	.word	0x08014470

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000024c 	.word	0x2000024c
 80001cc:	08014470 	.word	0x08014470

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b974 	b.w	8000f88 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468e      	mov	lr, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14d      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4694      	mov	ip, r2
 8000cca:	d969      	bls.n	8000da0 <__udivmoddi4+0xe8>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b152      	cbz	r2, 8000ce8 <__udivmoddi4+0x30>
 8000cd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd6:	f1c2 0120 	rsb	r1, r2, #32
 8000cda:	fa20 f101 	lsr.w	r1, r0, r1
 8000cde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	0c21      	lsrs	r1, r4, #16
 8000cee:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfe:	fb06 f107 	mul.w	r1, r6, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0e:	f080 811f 	bcs.w	8000f50 <__udivmoddi4+0x298>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 811c 	bls.w	8000f50 <__udivmoddi4+0x298>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 f707 	mul.w	r7, r0, r7
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x92>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3c:	f080 810a 	bcs.w	8000f54 <__udivmoddi4+0x29c>
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	f240 8107 	bls.w	8000f54 <__udivmoddi4+0x29c>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	1be4      	subs	r4, r4, r7
 8000d50:	2600      	movs	r6, #0
 8000d52:	b11d      	cbz	r5, 8000d5c <__udivmoddi4+0xa4>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c5 4300 	strd	r4, r3, [r5]
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xc2>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80ef 	beq.w	8000f4a <__udivmoddi4+0x292>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x160>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd4>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80f9 	bhi.w	8000f7e <__udivmoddi4+0x2c6>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	469e      	mov	lr, r3
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa4>
 8000d9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xec>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 8092 	bne.w	8000ed2 <__udivmoddi4+0x21a>
 8000dae:	eba1 010c 	sub.w	r1, r1, ip
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2601      	movs	r6, #1
 8000dbc:	0c20      	lsrs	r0, r4, #16
 8000dbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dca:	fb0e f003 	mul.w	r0, lr, r3
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x12c>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x12a>
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2c0>
 8000de2:	4643      	mov	r3, r8
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1110 	mls	r1, r7, r0, r1
 8000df0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x156>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x154>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2ca>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e16:	e79c      	b.n	8000d52 <__udivmoddi4+0x9a>
 8000e18:	f1c6 0720 	rsb	r7, r6, #32
 8000e1c:	40b3      	lsls	r3, r6
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	40f9      	lsrs	r1, r7
 8000e32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e36:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3e:	0c20      	lsrs	r0, r4, #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fb09 1118 	mls	r1, r9, r8, r1
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e50:	4288      	cmp	r0, r1
 8000e52:	fa02 f206 	lsl.w	r2, r2, r6
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b8>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2bc>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2bc>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e78:	fb09 1110 	mls	r1, r9, r0, r1
 8000e7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e84:	458e      	cmp	lr, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1e2>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2b4>
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2b4>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea2:	eba1 010e 	sub.w	r1, r1, lr
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46a6      	mov	lr, r4
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x2a4>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x2a0>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x212>
 8000eb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eba:	fa01 f707 	lsl.w	r7, r1, r7
 8000ebe:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec2:	40f1      	lsrs	r1, r6
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c2 0320 	rsb	r3, r2, #32
 8000ed6:	40d8      	lsrs	r0, r3
 8000ed8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efa:	fb00 f60e 	mul.w	r6, r0, lr
 8000efe:	429e      	cmp	r6, r3
 8000f00:	fa04 f402 	lsl.w	r4, r4, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x260>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b8>
 8000f10:	429e      	cmp	r6, r3
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b8>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4463      	add	r3, ip
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	b289      	uxth	r1, r1
 8000f1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f20:	fb07 3316 	mls	r3, r7, r6, r3
 8000f24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f28:	fb06 f30e 	mul.w	r3, r6, lr
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x28a>
 8000f30:	eb1c 0101 	adds.w	r1, ip, r1
 8000f34:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3e:	3e02      	subs	r6, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	1ac9      	subs	r1, r1, r3
 8000f44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0x104>
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e705      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e3      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6f8      	b.n	8000d4a <__udivmoddi4+0x92>
 8000f58:	454b      	cmp	r3, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f68:	4646      	mov	r6, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x28a>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1e2>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b8>
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x12c>
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e709      	b.n	8000d96 <__udivmoddi4+0xde>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x156>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <IMU_Initialise>:
int16_t gyro_offset[3] = { 0 }; // gyro_offset value calibrated by Gyro_calibrate()

/*
 * INITIALISATION
 */
uint8_t* IMU_Initialise(ICM20948 *dev, I2C_HandleTypeDef *i2cHandle) {
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b084      	sub	sp, #16
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
 8000f94:	6039      	str	r1, [r7, #0]

	char hex[2];
	uint8_t regData;

	dev->i2cHandle = i2cHandle;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	683a      	ldr	r2, [r7, #0]
 8000f9a:	601a      	str	r2, [r3, #0]
	 buf[0] = REG_ADD_REG_BANK_SEL;  // bank select register
	 buf[1] = REG_VAL_REG_BANK_0;           // bank 0
	 ret = HAL_I2C_Master_Transmit(i2cHandle, IMU_ADDR, buf, I2C_MEMADD_SIZE_16BIT, 10);

	 */
	ret = IMU_WriteOneByte(dev, REG_ADD_REG_BANK_SEL, REG_VAL_REG_BANK_0);
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	217f      	movs	r1, #127	; 0x7f
 8000fa0:	6878      	ldr	r0, [r7, #4]
 8000fa2:	f000 f8b3 	bl	800110c <IMU_WriteOneByte>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	461a      	mov	r2, r3
 8000faa:	4b57      	ldr	r3, [pc, #348]	; (8001108 <IMU_Initialise+0x17c>)
 8000fac:	701a      	strb	r2, [r3, #0]


	//check ID
	/*	  buf[0] = REG_WHO_AM_I;  //(Should return ID =  0xEA)
	 ret = HAL_I2C_Mem_Read(i2cHandle, IMU_ADDR, REG_WHO_AM_I, I2C_MEMADD_SIZE_8BIT, buf, I2C_MEMADD_SIZE_8BIT, 10);  */
	ret = IMU_ReadOneByte(dev, REG_WHO_AM_I, &regData);
 8000fae:	2100      	movs	r1, #0
 8000fb0:	f107 030b 	add.w	r3, r7, #11
 8000fb4:	461a      	mov	r2, r3
 8000fb6:	6878      	ldr	r0, [r7, #4]
 8000fb8:	f000 f8c4 	bl	8001144 <IMU_ReadOneByte>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	461a      	mov	r2, r3
 8000fc0:	4b51      	ldr	r3, [pc, #324]	; (8001108 <IMU_Initialise+0x17c>)
 8000fc2:	701a      	strb	r2, [r3, #0]

	//return &buf[0];

	// Initialize
	// Bank 0 - Reset the device and then auto selects the best available clock source
	ret = IMU_WriteOneByte(dev, REG_ADD_REG_BANK_SEL, REG_VAL_REG_BANK_0);
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	217f      	movs	r1, #127	; 0x7f
 8000fc8:	6878      	ldr	r0, [r7, #4]
 8000fca:	f000 f89f 	bl	800110c <IMU_WriteOneByte>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	461a      	mov	r2, r3
 8000fd2:	4b4d      	ldr	r3, [pc, #308]	; (8001108 <IMU_Initialise+0x17c>)
 8000fd4:	701a      	strb	r2, [r3, #0]

	//ret = IMU_WriteOneByte(dev, REG_ADD_PWR_MGMT_1, REG_VAL_ALL_RGE_RESET); // reset device - check header file value should be 0xF1

	osDelay(10);
 8000fd6:	200a      	movs	r0, #10
 8000fd8:	f00b ff66 	bl	800cea8 <osDelay>
	ret = IMU_WriteOneByte(dev, REG_ADD_PWR_MGMT_1, REG_VAL_RUN_MODE); // auto selects the best available clock source for device
 8000fdc:	2201      	movs	r2, #1
 8000fde:	2106      	movs	r1, #6
 8000fe0:	6878      	ldr	r0, [r7, #4]
 8000fe2:	f000 f893 	bl	800110c <IMU_WriteOneByte>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	461a      	mov	r2, r3
 8000fea:	4b47      	ldr	r3, [pc, #284]	; (8001108 <IMU_Initialise+0x17c>)
 8000fec:	701a      	strb	r2, [r3, #0]

	// Turn off and on Accelator and Gyro - page 28
	osDelay(10);
 8000fee:	200a      	movs	r0, #10
 8000ff0:	f00b ff5a 	bl	800cea8 <osDelay>
	ret = IMU_WriteOneByte(dev, REG_ADD_PWR_MGMT_2, REG_VAL_ACCEL_GYROLL_OFF); // OFF
 8000ff4:	223f      	movs	r2, #63	; 0x3f
 8000ff6:	2107      	movs	r1, #7
 8000ff8:	6878      	ldr	r0, [r7, #4]
 8000ffa:	f000 f887 	bl	800110c <IMU_WriteOneByte>
 8000ffe:	4603      	mov	r3, r0
 8001000:	461a      	mov	r2, r3
 8001002:	4b41      	ldr	r3, [pc, #260]	; (8001108 <IMU_Initialise+0x17c>)
 8001004:	701a      	strb	r2, [r3, #0]

	osDelay(10);
 8001006:	200a      	movs	r0, #10
 8001008:	f00b ff4e 	bl	800cea8 <osDelay>
	ret = IMU_WriteOneByte(dev, REG_ADD_PWR_MGMT_2, REG_VAL_ACCEL_GYROLL_ON); // ON
 800100c:	2200      	movs	r2, #0
 800100e:	2107      	movs	r1, #7
 8001010:	6878      	ldr	r0, [r7, #4]
 8001012:	f000 f87b 	bl	800110c <IMU_WriteOneByte>
 8001016:	4603      	mov	r3, r0
 8001018:	461a      	mov	r2, r3
 800101a:	4b3b      	ldr	r3, [pc, #236]	; (8001108 <IMU_Initialise+0x17c>)
 800101c:	701a      	strb	r2, [r3, #0]

	ret = IMU_WriteOneByte(dev, REG_ADD_INT_ENABLE_1, REG_VAL_INT_ENABLED); // Turn on int on pin INT1
 800101e:	2201      	movs	r2, #1
 8001020:	2110      	movs	r1, #16
 8001022:	6878      	ldr	r0, [r7, #4]
 8001024:	f000 f872 	bl	800110c <IMU_WriteOneByte>
 8001028:	4603      	mov	r3, r0
 800102a:	461a      	mov	r2, r3
 800102c:	4b36      	ldr	r3, [pc, #216]	; (8001108 <IMU_Initialise+0x17c>)
 800102e:	701a      	strb	r2, [r3, #0]

	uint8_t tmp = 0;
 8001030:	2300      	movs	r3, #0
 8001032:	72bb      	strb	r3, [r7, #10]
	IMU_ReadOneByte(dev, REG_ADD_INT_PIN_CFG, &tmp);
 8001034:	f107 030a 	add.w	r3, r7, #10
 8001038:	461a      	mov	r2, r3
 800103a:	210f      	movs	r1, #15
 800103c:	6878      	ldr	r0, [r7, #4]
 800103e:	f000 f881 	bl	8001144 <IMU_ReadOneByte>
	IMU_WriteOneByte(dev, REG_ADD_INT_PIN_CFG, tmp | 0x02);
 8001042:	7abb      	ldrb	r3, [r7, #10]
 8001044:	f043 0302 	orr.w	r3, r3, #2
 8001048:	b2db      	uxtb	r3, r3
 800104a:	461a      	mov	r2, r3
 800104c:	210f      	movs	r1, #15
 800104e:	6878      	ldr	r0, [r7, #4]
 8001050:	f000 f85c 	bl	800110c <IMU_WriteOneByte>

	// Bank 2 - Gyro and Acce and start running
	/* user bank 2 register */
	ret = IMU_WriteOneByte(dev, REG_ADD_REG_BANK_SEL, REG_VAL_REG_BANK_2);
 8001054:	2220      	movs	r2, #32
 8001056:	217f      	movs	r1, #127	; 0x7f
 8001058:	6878      	ldr	r0, [r7, #4]
 800105a:	f000 f857 	bl	800110c <IMU_WriteOneByte>
 800105e:	4603      	mov	r3, r0
 8001060:	461a      	mov	r2, r3
 8001062:	4b29      	ldr	r3, [pc, #164]	; (8001108 <IMU_Initialise+0x17c>)
 8001064:	701a      	strb	r2, [r3, #0]

	ret = IMU_WriteOneByte(dev, REG_ADD_GYRO_SMPLRT_DIV, 0x00); // changed to 0 from 0x16 **NEW**
 8001066:	2200      	movs	r2, #0
 8001068:	2100      	movs	r1, #0
 800106a:	6878      	ldr	r0, [r7, #4]
 800106c:	f000 f84e 	bl	800110c <IMU_WriteOneByte>
 8001070:	4603      	mov	r3, r0
 8001072:	461a      	mov	r2, r3
 8001074:	4b24      	ldr	r3, [pc, #144]	; (8001108 <IMU_Initialise+0x17c>)
 8001076:	701a      	strb	r2, [r3, #0]

	ret = IMU_WriteOneByte(dev, REG_ADD_GYRO_CONFIG_1,
 8001078:	2237      	movs	r2, #55	; 0x37
 800107a:	2101      	movs	r1, #1
 800107c:	6878      	ldr	r0, [r7, #4]
 800107e:	f000 f845 	bl	800110c <IMU_WriteOneByte>
 8001082:	4603      	mov	r3, r0
 8001084:	461a      	mov	r2, r3
 8001086:	4b20      	ldr	r3, [pc, #128]	; (8001108 <IMU_Initialise+0x17c>)
 8001088:	701a      	strb	r2, [r3, #0]
			REG_VAL_BIT_GYRO_DLPCFG_6 | REG_VAL_BIT_GYRO_FS_2000DPS
					| REG_VAL_BIT_GYRO_DLPF); // enable low pass filter and set Gyro FS

	ret = IMU_WriteOneByte(dev, REG_ADD_GYRO_CONFIG_2, 0x06); // 8x average **NEW**
 800108a:	2206      	movs	r2, #6
 800108c:	2102      	movs	r1, #2
 800108e:	6878      	ldr	r0, [r7, #4]
 8001090:	f000 f83c 	bl	800110c <IMU_WriteOneByte>
 8001094:	4603      	mov	r3, r0
 8001096:	461a      	mov	r2, r3
 8001098:	4b1b      	ldr	r3, [pc, #108]	; (8001108 <IMU_Initialise+0x17c>)
 800109a:	701a      	strb	r2, [r3, #0]


	ret = IMU_WriteOneByte(dev, REG_ADD_ACCEL_SMPLRT_DIV_2, 0x10); //
 800109c:	2210      	movs	r2, #16
 800109e:	2111      	movs	r1, #17
 80010a0:	6878      	ldr	r0, [r7, #4]
 80010a2:	f000 f833 	bl	800110c <IMU_WriteOneByte>
 80010a6:	4603      	mov	r3, r0
 80010a8:	461a      	mov	r2, r3
 80010aa:	4b17      	ldr	r3, [pc, #92]	; (8001108 <IMU_Initialise+0x17c>)
 80010ac:	701a      	strb	r2, [r3, #0]
	ret = IMU_WriteOneByte(dev, REG_ADD_ACCEL_SMPLRT_DIV_1, 0x00); // upper 3 bit of sample rate = 0
 80010ae:	2200      	movs	r2, #0
 80010b0:	2110      	movs	r1, #16
 80010b2:	6878      	ldr	r0, [r7, #4]
 80010b4:	f000 f82a 	bl	800110c <IMU_WriteOneByte>
 80010b8:	4603      	mov	r3, r0
 80010ba:	461a      	mov	r2, r3
 80010bc:	4b12      	ldr	r3, [pc, #72]	; (8001108 <IMU_Initialise+0x17c>)
 80010be:	701a      	strb	r2, [r3, #0]

	// enable LPF and set accel full scale to +/-2G, sensitivity scale factor = 16384 LSB/g
	ret = IMU_WriteOneByte(dev, REG_ADD_ACCEL_CONFIG,
 80010c0:	2231      	movs	r2, #49	; 0x31
 80010c2:	2114      	movs	r1, #20
 80010c4:	6878      	ldr	r0, [r7, #4]
 80010c6:	f000 f821 	bl	800110c <IMU_WriteOneByte>
 80010ca:	4603      	mov	r3, r0
 80010cc:	461a      	mov	r2, r3
 80010ce:	4b0e      	ldr	r3, [pc, #56]	; (8001108 <IMU_Initialise+0x17c>)
 80010d0:	701a      	strb	r2, [r3, #0]
			REG_VAL_BIT_ACCEL_DLPCFG_6 | REG_VAL_BIT_ACCEL_FS_2g
					| REG_VAL_BIT_ACCEL_DLPF);

	IMU_WriteOneByte(dev, REG_ADD_TEMP_CONFIG, REG_VAL_TEMP_CONFIG); // Temp configuration pg 67
 80010d2:	2200      	movs	r2, #0
 80010d4:	2153      	movs	r1, #83	; 0x53
 80010d6:	6878      	ldr	r0, [r7, #4]
 80010d8:	f000 f818 	bl	800110c <IMU_WriteOneByte>

	IMU_WriteOneByte(dev, 0x15, 0x03);
 80010dc:	2203      	movs	r2, #3
 80010de:	2115      	movs	r1, #21
 80010e0:	6878      	ldr	r0, [r7, #4]
 80010e2:	f000 f813 	bl	800110c <IMU_WriteOneByte>
	// back to bank 0
	ret = IMU_WriteOneByte(dev, REG_ADD_REG_BANK_SEL, REG_VAL_REG_BANK_0);
 80010e6:	2200      	movs	r2, #0
 80010e8:	217f      	movs	r1, #127	; 0x7f
 80010ea:	6878      	ldr	r0, [r7, #4]
 80010ec:	f000 f80e 	bl	800110c <IMU_WriteOneByte>
 80010f0:	4603      	mov	r3, r0
 80010f2:	461a      	mov	r2, r3
 80010f4:	4b04      	ldr	r3, [pc, #16]	; (8001108 <IMU_Initialise+0x17c>)
 80010f6:	701a      	strb	r2, [r3, #0]

	osDelay(100);
 80010f8:	2064      	movs	r0, #100	; 0x64
 80010fa:	f00b fed5 	bl	800cea8 <osDelay>
	//Gyro_calibrate(dev);  // calibrate the offset of the gyroscope

	// everthing OK
	//strcpy((char*)buf, "Initialize OK\r\n");
	//return &buf;
	return 0; // 0 means 0 error
 80010fe:	2300      	movs	r3, #0

}
 8001100:	4618      	mov	r0, r3
 8001102:	3710      	adds	r7, #16
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	20000264 	.word	0x20000264

0800110c <IMU_WriteOneByte>:

HAL_StatusTypeDef IMU_WriteOneByte(ICM20948 *dev, uint8_t reg, uint8_t data) {
 800110c:	b580      	push	{r7, lr}
 800110e:	b086      	sub	sp, #24
 8001110:	af04      	add	r7, sp, #16
 8001112:	6078      	str	r0, [r7, #4]
 8001114:	460b      	mov	r3, r1
 8001116:	70fb      	strb	r3, [r7, #3]
 8001118:	4613      	mov	r3, r2
 800111a:	70bb      	strb	r3, [r7, #2]

	return HAL_I2C_Mem_Write(dev->i2cHandle, IMU_ADDR, reg, 1, &data, 1, 100);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6818      	ldr	r0, [r3, #0]
 8001120:	23d0      	movs	r3, #208	; 0xd0
 8001122:	b299      	uxth	r1, r3
 8001124:	78fb      	ldrb	r3, [r7, #3]
 8001126:	b29a      	uxth	r2, r3
 8001128:	2364      	movs	r3, #100	; 0x64
 800112a:	9302      	str	r3, [sp, #8]
 800112c:	2301      	movs	r3, #1
 800112e:	9301      	str	r3, [sp, #4]
 8001130:	1cbb      	adds	r3, r7, #2
 8001132:	9300      	str	r3, [sp, #0]
 8001134:	2301      	movs	r3, #1
 8001136:	f007 fc1b 	bl	8008970 <HAL_I2C_Mem_Write>
 800113a:	4603      	mov	r3, r0

}
 800113c:	4618      	mov	r0, r3
 800113e:	3708      	adds	r7, #8
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}

08001144 <IMU_ReadOneByte>:

HAL_StatusTypeDef IMU_ReadOneByte(ICM20948 *dev, uint8_t reg, uint8_t *data) {
 8001144:	b580      	push	{r7, lr}
 8001146:	b088      	sub	sp, #32
 8001148:	af04      	add	r7, sp, #16
 800114a:	60f8      	str	r0, [r7, #12]
 800114c:	460b      	mov	r3, r1
 800114e:	607a      	str	r2, [r7, #4]
 8001150:	72fb      	strb	r3, [r7, #11]

	return HAL_I2C_Mem_Read(dev->i2cHandle, IMU_ADDR, reg, 1, data, 1, 100);
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	6818      	ldr	r0, [r3, #0]
 8001156:	23d0      	movs	r3, #208	; 0xd0
 8001158:	b299      	uxth	r1, r3
 800115a:	7afb      	ldrb	r3, [r7, #11]
 800115c:	b29a      	uxth	r2, r3
 800115e:	2364      	movs	r3, #100	; 0x64
 8001160:	9302      	str	r3, [sp, #8]
 8001162:	2301      	movs	r3, #1
 8001164:	9301      	str	r3, [sp, #4]
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	9300      	str	r3, [sp, #0]
 800116a:	2301      	movs	r3, #1
 800116c:	f007 fcfa 	bl	8008b64 <HAL_I2C_Mem_Read>
 8001170:	4603      	mov	r3, r0
}
 8001172:	4618      	mov	r0, r3
 8001174:	3710      	adds	r7, #16
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}

0800117a <Mag_WriteOneByte>:

HAL_StatusTypeDef Mag_WriteOneByte(ICM20948 *dev, uint8_t reg, uint8_t data) {
 800117a:	b580      	push	{r7, lr}
 800117c:	b086      	sub	sp, #24
 800117e:	af04      	add	r7, sp, #16
 8001180:	6078      	str	r0, [r7, #4]
 8001182:	460b      	mov	r3, r1
 8001184:	70fb      	strb	r3, [r7, #3]
 8001186:	4613      	mov	r3, r2
 8001188:	70bb      	strb	r3, [r7, #2]

	return HAL_I2C_Mem_Write(dev->i2cHandle, MAG_ADDR, reg, 1, &data, 1, 100);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6818      	ldr	r0, [r3, #0]
 800118e:	2318      	movs	r3, #24
 8001190:	b299      	uxth	r1, r3
 8001192:	78fb      	ldrb	r3, [r7, #3]
 8001194:	b29a      	uxth	r2, r3
 8001196:	2364      	movs	r3, #100	; 0x64
 8001198:	9302      	str	r3, [sp, #8]
 800119a:	2301      	movs	r3, #1
 800119c:	9301      	str	r3, [sp, #4]
 800119e:	1cbb      	adds	r3, r7, #2
 80011a0:	9300      	str	r3, [sp, #0]
 80011a2:	2301      	movs	r3, #1
 80011a4:	f007 fbe4 	bl	8008970 <HAL_I2C_Mem_Write>
 80011a8:	4603      	mov	r3, r0
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	3708      	adds	r7, #8
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
	...

080011b4 <IMU_AccelRead>:
	ret = IMU_ReadOneByte(dev, REG_ADD_TEMP_OUT_H, &u8Buf[1]);
	tempRaw = (u8Buf[1] << 8) | u8Buf[0];
	dev->temp_C = (tempRaw) / 333.81 + 21; // assuming no further offset apart from 21 dec C
}

HAL_StatusTypeDef IMU_AccelRead(ICM20948 *dev) {
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b088      	sub	sp, #32
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
	uint8_t u8Buf[2] = { 0 }; // reset to zero
 80011bc:	2300      	movs	r3, #0
 80011be:	83bb      	strh	r3, [r7, #28]
	int16_t accRaw[3] = { 0 };  // reset to zero
 80011c0:	f107 0314 	add.w	r3, r7, #20
 80011c4:	2200      	movs	r2, #0
 80011c6:	601a      	str	r2, [r3, #0]
 80011c8:	809a      	strh	r2, [r3, #4]

	ret = IMU_ReadOneByte(dev, REG_ADD_ACCEL_XOUT_L, &u8Buf[0]);
 80011ca:	f107 031c 	add.w	r3, r7, #28
 80011ce:	461a      	mov	r2, r3
 80011d0:	212e      	movs	r1, #46	; 0x2e
 80011d2:	6878      	ldr	r0, [r7, #4]
 80011d4:	f7ff ffb6 	bl	8001144 <IMU_ReadOneByte>
 80011d8:	4603      	mov	r3, r0
 80011da:	461a      	mov	r2, r3
 80011dc:	4b5e      	ldr	r3, [pc, #376]	; (8001358 <IMU_AccelRead+0x1a4>)
 80011de:	701a      	strb	r2, [r3, #0]
	ret = IMU_ReadOneByte(dev, REG_ADD_ACCEL_XOUT_H, &u8Buf[1]);
 80011e0:	f107 031c 	add.w	r3, r7, #28
 80011e4:	3301      	adds	r3, #1
 80011e6:	461a      	mov	r2, r3
 80011e8:	212d      	movs	r1, #45	; 0x2d
 80011ea:	6878      	ldr	r0, [r7, #4]
 80011ec:	f7ff ffaa 	bl	8001144 <IMU_ReadOneByte>
 80011f0:	4603      	mov	r3, r0
 80011f2:	461a      	mov	r2, r3
 80011f4:	4b58      	ldr	r3, [pc, #352]	; (8001358 <IMU_AccelRead+0x1a4>)
 80011f6:	701a      	strb	r2, [r3, #0]
	accRaw[0] = (u8Buf[1] << 8) | u8Buf[0];
 80011f8:	7f7b      	ldrb	r3, [r7, #29]
 80011fa:	021b      	lsls	r3, r3, #8
 80011fc:	b21a      	sxth	r2, r3
 80011fe:	7f3b      	ldrb	r3, [r7, #28]
 8001200:	b21b      	sxth	r3, r3
 8001202:	4313      	orrs	r3, r2
 8001204:	b21b      	sxth	r3, r3
 8001206:	82bb      	strh	r3, [r7, #20]

	ret = IMU_ReadOneByte(dev, REG_ADD_ACCEL_YOUT_L, &u8Buf[0]);
 8001208:	f107 031c 	add.w	r3, r7, #28
 800120c:	461a      	mov	r2, r3
 800120e:	2130      	movs	r1, #48	; 0x30
 8001210:	6878      	ldr	r0, [r7, #4]
 8001212:	f7ff ff97 	bl	8001144 <IMU_ReadOneByte>
 8001216:	4603      	mov	r3, r0
 8001218:	461a      	mov	r2, r3
 800121a:	4b4f      	ldr	r3, [pc, #316]	; (8001358 <IMU_AccelRead+0x1a4>)
 800121c:	701a      	strb	r2, [r3, #0]
	ret = IMU_ReadOneByte(dev, REG_ADD_ACCEL_YOUT_H, &u8Buf[1]);
 800121e:	f107 031c 	add.w	r3, r7, #28
 8001222:	3301      	adds	r3, #1
 8001224:	461a      	mov	r2, r3
 8001226:	212f      	movs	r1, #47	; 0x2f
 8001228:	6878      	ldr	r0, [r7, #4]
 800122a:	f7ff ff8b 	bl	8001144 <IMU_ReadOneByte>
 800122e:	4603      	mov	r3, r0
 8001230:	461a      	mov	r2, r3
 8001232:	4b49      	ldr	r3, [pc, #292]	; (8001358 <IMU_AccelRead+0x1a4>)
 8001234:	701a      	strb	r2, [r3, #0]
	accRaw[1] = (u8Buf[1] << 8) | u8Buf[0];
 8001236:	7f7b      	ldrb	r3, [r7, #29]
 8001238:	021b      	lsls	r3, r3, #8
 800123a:	b21a      	sxth	r2, r3
 800123c:	7f3b      	ldrb	r3, [r7, #28]
 800123e:	b21b      	sxth	r3, r3
 8001240:	4313      	orrs	r3, r2
 8001242:	b21b      	sxth	r3, r3
 8001244:	82fb      	strh	r3, [r7, #22]

	ret = IMU_ReadOneByte(dev, REG_ADD_ACCEL_ZOUT_L, &u8Buf[0]);
 8001246:	f107 031c 	add.w	r3, r7, #28
 800124a:	461a      	mov	r2, r3
 800124c:	2132      	movs	r1, #50	; 0x32
 800124e:	6878      	ldr	r0, [r7, #4]
 8001250:	f7ff ff78 	bl	8001144 <IMU_ReadOneByte>
 8001254:	4603      	mov	r3, r0
 8001256:	461a      	mov	r2, r3
 8001258:	4b3f      	ldr	r3, [pc, #252]	; (8001358 <IMU_AccelRead+0x1a4>)
 800125a:	701a      	strb	r2, [r3, #0]
	ret = IMU_ReadOneByte(dev, REG_ADD_ACCEL_ZOUT_H, &u8Buf[1]);
 800125c:	f107 031c 	add.w	r3, r7, #28
 8001260:	3301      	adds	r3, #1
 8001262:	461a      	mov	r2, r3
 8001264:	2131      	movs	r1, #49	; 0x31
 8001266:	6878      	ldr	r0, [r7, #4]
 8001268:	f7ff ff6c 	bl	8001144 <IMU_ReadOneByte>
 800126c:	4603      	mov	r3, r0
 800126e:	461a      	mov	r2, r3
 8001270:	4b39      	ldr	r3, [pc, #228]	; (8001358 <IMU_AccelRead+0x1a4>)
 8001272:	701a      	strb	r2, [r3, #0]
	accRaw[2] = (u8Buf[1] << 8) | u8Buf[0];
 8001274:	7f7b      	ldrb	r3, [r7, #29]
 8001276:	021b      	lsls	r3, r3, #8
 8001278:	b21a      	sxth	r2, r3
 800127a:	7f3b      	ldrb	r3, [r7, #28]
 800127c:	b21b      	sxth	r3, r3
 800127e:	4313      	orrs	r3, r2
 8001280:	b21b      	sxth	r3, r3
 8001282:	833b      	strh	r3, [r7, #24]

	/* Convert to SIGNED integers (two's complement) */
	int32_t accRawSigned[3];

	if ((accRaw[0] & 0x00080000) == 0x00080000)
 8001284:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001288:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800128c:	2b00      	cmp	r3, #0
 800128e:	d007      	beq.n	80012a0 <IMU_AccelRead+0xec>
		accRawSigned[0] = accRaw[0] | 0xFFF00000;
 8001290:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001294:	ea6f 3303 	mvn.w	r3, r3, lsl #12
 8001298:	ea6f 3313 	mvn.w	r3, r3, lsr #12
 800129c:	60bb      	str	r3, [r7, #8]
 800129e:	e002      	b.n	80012a6 <IMU_AccelRead+0xf2>
	else
		accRawSigned[0] = accRaw[0];
 80012a0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80012a4:	60bb      	str	r3, [r7, #8]

	if ((accRaw[1] & 0x00080000) == 0x00080000)
 80012a6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80012aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d007      	beq.n	80012c2 <IMU_AccelRead+0x10e>
		accRawSigned[1] = accRaw[1] | 0xFFF00000;
 80012b2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80012b6:	ea6f 3303 	mvn.w	r3, r3, lsl #12
 80012ba:	ea6f 3313 	mvn.w	r3, r3, lsr #12
 80012be:	60fb      	str	r3, [r7, #12]
 80012c0:	e002      	b.n	80012c8 <IMU_AccelRead+0x114>
	else
		accRawSigned[1] = accRaw[1];
 80012c2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80012c6:	60fb      	str	r3, [r7, #12]

	if ((accRaw[2] & 0x00080000) == 0x000080000)
 80012c8:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80012cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d007      	beq.n	80012e4 <IMU_AccelRead+0x130>
		accRawSigned[2] = accRaw[2] | 0xFFF00000;
 80012d4:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80012d8:	ea6f 3303 	mvn.w	r3, r3, lsl #12
 80012dc:	ea6f 3313 	mvn.w	r3, r3, lsr #12
 80012e0:	613b      	str	r3, [r7, #16]
 80012e2:	e002      	b.n	80012ea <IMU_AccelRead+0x136>
	else
		accRawSigned[2] = accRaw[2];
 80012e4:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80012e8:	613b      	str	r3, [r7, #16]

	// accel full scale set to +/-2G, sensitivity scale factor = 16384 LSB/g
	dev->acc[0] = 0.00006103515625f * accRawSigned[0] * 9.81f;
 80012ea:	68bb      	ldr	r3, [r7, #8]
 80012ec:	ee07 3a90 	vmov	s15, r3
 80012f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012f4:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800135c <IMU_AccelRead+0x1a8>
 80012f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012fc:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8001360 <IMU_AccelRead+0x1ac>
 8001300:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	edc3 7a01 	vstr	s15, [r3, #4]
	dev->acc[1] = 0.00006103515625f * accRawSigned[1] * 9.81f;
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	ee07 3a90 	vmov	s15, r3
 8001310:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001314:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800135c <IMU_AccelRead+0x1a8>
 8001318:	ee67 7a87 	vmul.f32	s15, s15, s14
 800131c:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001360 <IMU_AccelRead+0x1ac>
 8001320:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	edc3 7a02 	vstr	s15, [r3, #8]
	dev->acc[2] = 0.00006103515625f * accRawSigned[2] * 9.81f; // * 9.81f
 800132a:	693b      	ldr	r3, [r7, #16]
 800132c:	ee07 3a90 	vmov	s15, r3
 8001330:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001334:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800135c <IMU_AccelRead+0x1a8>
 8001338:	ee67 7a87 	vmul.f32	s15, s15, s14
 800133c:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001360 <IMU_AccelRead+0x1ac>
 8001340:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	edc3 7a03 	vstr	s15, [r3, #12]

	return ret;
 800134a:	4b03      	ldr	r3, [pc, #12]	; (8001358 <IMU_AccelRead+0x1a4>)
 800134c:	781b      	ldrb	r3, [r3, #0]

}
 800134e:	4618      	mov	r0, r3
 8001350:	3720      	adds	r7, #32
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	20000264 	.word	0x20000264
 800135c:	38800000 	.word	0x38800000
 8001360:	411cf5c3 	.word	0x411cf5c3

08001364 <Gyro_calibrate>:

HAL_StatusTypeDef Gyro_calibrate(ICM20948 *dev) // calibrate the offset of the gyro
// store the offset in int16_t gyro_offset[3]
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b086      	sub	sp, #24
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
	uint8_t u8Buf[2] = { 0 }; // reset to zero upon entry
 800136c:	2300      	movs	r3, #0
 800136e:	823b      	strh	r3, [r7, #16]
	int16_t gyroRaw[3] = { 0 }; // reset to zero upon entry
 8001370:	f107 0308 	add.w	r3, r7, #8
 8001374:	2200      	movs	r2, #0
 8001376:	601a      	str	r2, [r3, #0]
 8001378:	809a      	strh	r2, [r3, #4]
	int8_t i;
	int16_t temp;

	for (i = 0; i < 32; i++) {
 800137a:	2300      	movs	r3, #0
 800137c:	75fb      	strb	r3, [r7, #23]
 800137e:	e06c      	b.n	800145a <Gyro_calibrate+0xf6>
		IMU_ReadOneByte(dev, REG_ADD_GYRO_XOUT_L, &u8Buf[0]);
 8001380:	f107 0310 	add.w	r3, r7, #16
 8001384:	461a      	mov	r2, r3
 8001386:	2134      	movs	r1, #52	; 0x34
 8001388:	6878      	ldr	r0, [r7, #4]
 800138a:	f7ff fedb 	bl	8001144 <IMU_ReadOneByte>
		IMU_ReadOneByte(dev, REG_ADD_GYRO_XOUT_H, &u8Buf[1]);
 800138e:	f107 0310 	add.w	r3, r7, #16
 8001392:	3301      	adds	r3, #1
 8001394:	461a      	mov	r2, r3
 8001396:	2133      	movs	r1, #51	; 0x33
 8001398:	6878      	ldr	r0, [r7, #4]
 800139a:	f7ff fed3 	bl	8001144 <IMU_ReadOneByte>
		temp = (u8Buf[1] << 8) | u8Buf[0]; // for debugging
 800139e:	7c7b      	ldrb	r3, [r7, #17]
 80013a0:	021b      	lsls	r3, r3, #8
 80013a2:	b21a      	sxth	r2, r3
 80013a4:	7c3b      	ldrb	r3, [r7, #16]
 80013a6:	b21b      	sxth	r3, r3
 80013a8:	4313      	orrs	r3, r2
 80013aa:	82bb      	strh	r3, [r7, #20]
		gyroRaw[0] = temp + gyroRaw[0];
 80013ac:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80013b0:	b29a      	uxth	r2, r3
 80013b2:	8abb      	ldrh	r3, [r7, #20]
 80013b4:	4413      	add	r3, r2
 80013b6:	b29b      	uxth	r3, r3
 80013b8:	b21b      	sxth	r3, r3
 80013ba:	813b      	strh	r3, [r7, #8]
		//gyroRaw[0] = (u8Buf[1]<<8)|u8Buf[0] + gyroRaw[0];
osDelay(1);
 80013bc:	2001      	movs	r0, #1
 80013be:	f00b fd73 	bl	800cea8 <osDelay>
		IMU_ReadOneByte(dev, REG_ADD_GYRO_YOUT_L, &u8Buf[0]);
 80013c2:	f107 0310 	add.w	r3, r7, #16
 80013c6:	461a      	mov	r2, r3
 80013c8:	2136      	movs	r1, #54	; 0x36
 80013ca:	6878      	ldr	r0, [r7, #4]
 80013cc:	f7ff feba 	bl	8001144 <IMU_ReadOneByte>
		IMU_ReadOneByte(dev, REG_ADD_GYRO_YOUT_H, &u8Buf[1]);
 80013d0:	f107 0310 	add.w	r3, r7, #16
 80013d4:	3301      	adds	r3, #1
 80013d6:	461a      	mov	r2, r3
 80013d8:	2135      	movs	r1, #53	; 0x35
 80013da:	6878      	ldr	r0, [r7, #4]
 80013dc:	f7ff feb2 	bl	8001144 <IMU_ReadOneByte>
		gyroRaw[1] = ((u8Buf[1] << 8) | u8Buf[0]) + gyroRaw[1];
 80013e0:	7c7b      	ldrb	r3, [r7, #17]
 80013e2:	021b      	lsls	r3, r3, #8
 80013e4:	b21a      	sxth	r2, r3
 80013e6:	7c3b      	ldrb	r3, [r7, #16]
 80013e8:	b21b      	sxth	r3, r3
 80013ea:	4313      	orrs	r3, r2
 80013ec:	b21b      	sxth	r3, r3
 80013ee:	b29a      	uxth	r2, r3
 80013f0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80013f4:	b29b      	uxth	r3, r3
 80013f6:	4413      	add	r3, r2
 80013f8:	b29b      	uxth	r3, r3
 80013fa:	b21b      	sxth	r3, r3
 80013fc:	817b      	strh	r3, [r7, #10]
		osDelay(1);
 80013fe:	2001      	movs	r0, #1
 8001400:	f00b fd52 	bl	800cea8 <osDelay>
		IMU_ReadOneByte(dev, REG_ADD_GYRO_ZOUT_L, &u8Buf[0]);
 8001404:	f107 0310 	add.w	r3, r7, #16
 8001408:	461a      	mov	r2, r3
 800140a:	2138      	movs	r1, #56	; 0x38
 800140c:	6878      	ldr	r0, [r7, #4]
 800140e:	f7ff fe99 	bl	8001144 <IMU_ReadOneByte>
		ret = IMU_ReadOneByte(dev, REG_ADD_GYRO_ZOUT_H, &u8Buf[1]);
 8001412:	f107 0310 	add.w	r3, r7, #16
 8001416:	3301      	adds	r3, #1
 8001418:	461a      	mov	r2, r3
 800141a:	2137      	movs	r1, #55	; 0x37
 800141c:	6878      	ldr	r0, [r7, #4]
 800141e:	f7ff fe91 	bl	8001144 <IMU_ReadOneByte>
 8001422:	4603      	mov	r3, r0
 8001424:	461a      	mov	r2, r3
 8001426:	4b22      	ldr	r3, [pc, #136]	; (80014b0 <Gyro_calibrate+0x14c>)
 8001428:	701a      	strb	r2, [r3, #0]
		gyroRaw[2] = ((u8Buf[1] << 8) | u8Buf[0]) + gyroRaw[2];
 800142a:	7c7b      	ldrb	r3, [r7, #17]
 800142c:	021b      	lsls	r3, r3, #8
 800142e:	b21a      	sxth	r2, r3
 8001430:	7c3b      	ldrb	r3, [r7, #16]
 8001432:	b21b      	sxth	r3, r3
 8001434:	4313      	orrs	r3, r2
 8001436:	b21b      	sxth	r3, r3
 8001438:	b29a      	uxth	r2, r3
 800143a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800143e:	b29b      	uxth	r3, r3
 8001440:	4413      	add	r3, r2
 8001442:	b29b      	uxth	r3, r3
 8001444:	b21b      	sxth	r3, r3
 8001446:	81bb      	strh	r3, [r7, #12]

		osDelay(25); // wait for 100msec
 8001448:	2019      	movs	r0, #25
 800144a:	f00b fd2d 	bl	800cea8 <osDelay>
	for (i = 0; i < 32; i++) {
 800144e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001452:	b2db      	uxtb	r3, r3
 8001454:	3301      	adds	r3, #1
 8001456:	b2db      	uxtb	r3, r3
 8001458:	75fb      	strb	r3, [r7, #23]
 800145a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800145e:	2b1f      	cmp	r3, #31
 8001460:	dd8e      	ble.n	8001380 <Gyro_calibrate+0x1c>
	}

	dev->gyro_bias[0] = (float)(gyroRaw[0] >> 5);  // average of 32 reads
 8001462:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001466:	115b      	asrs	r3, r3, #5
 8001468:	b21b      	sxth	r3, r3
 800146a:	ee07 3a90 	vmov	s15, r3
 800146e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	dev->gyro_bias[1] = (float)(gyroRaw[1] >> 5);
 8001478:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800147c:	115b      	asrs	r3, r3, #5
 800147e:	b21b      	sxth	r3, r3
 8001480:	ee07 3a90 	vmov	s15, r3
 8001484:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	dev->gyro_bias[2] = (float)(gyroRaw[2] >> 5);
 800148e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001492:	115b      	asrs	r3, r3, #5
 8001494:	b21b      	sxth	r3, r3
 8001496:	ee07 3a90 	vmov	s15, r3
 800149a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c


	return ret;
 80014a4:	4b02      	ldr	r3, [pc, #8]	; (80014b0 <Gyro_calibrate+0x14c>)
 80014a6:	781b      	ldrb	r3, [r3, #0]
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	3718      	adds	r7, #24
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	20000264 	.word	0x20000264

080014b4 <IMU_GyroRead>:

HAL_StatusTypeDef IMU_GyroRead(ICM20948 *dev) { // return the change in value instead of current value
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b08a      	sub	sp, #40	; 0x28
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
	uint8_t u8Buf[2] = { 0 }; // reset to zero
 80014bc:	2300      	movs	r3, #0
 80014be:	84bb      	strh	r3, [r7, #36]	; 0x24
	int16_t gyroRaw[3] = { 0 };  // reset to zero
 80014c0:	f107 031c 	add.w	r3, r7, #28
 80014c4:	2200      	movs	r2, #0
 80014c6:	601a      	str	r2, [r3, #0]
 80014c8:	809a      	strh	r2, [r3, #4]
	int16_t gyroDiff[3];
	int16_t temp;

	ret = IMU_ReadOneByte(dev, REG_ADD_GYRO_YOUT_L, &u8Buf[0]);
 80014ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014ce:	461a      	mov	r2, r3
 80014d0:	2136      	movs	r1, #54	; 0x36
 80014d2:	6878      	ldr	r0, [r7, #4]
 80014d4:	f7ff fe36 	bl	8001144 <IMU_ReadOneByte>
 80014d8:	4603      	mov	r3, r0
 80014da:	461a      	mov	r2, r3
 80014dc:	4b58      	ldr	r3, [pc, #352]	; (8001640 <IMU_GyroRead+0x18c>)
 80014de:	701a      	strb	r2, [r3, #0]
	ret = IMU_ReadOneByte(dev, REG_ADD_GYRO_YOUT_H, &u8Buf[1]);
 80014e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014e4:	3301      	adds	r3, #1
 80014e6:	461a      	mov	r2, r3
 80014e8:	2135      	movs	r1, #53	; 0x35
 80014ea:	6878      	ldr	r0, [r7, #4]
 80014ec:	f7ff fe2a 	bl	8001144 <IMU_ReadOneByte>
 80014f0:	4603      	mov	r3, r0
 80014f2:	461a      	mov	r2, r3
 80014f4:	4b52      	ldr	r3, [pc, #328]	; (8001640 <IMU_GyroRead+0x18c>)
 80014f6:	701a      	strb	r2, [r3, #0]
	gyroRaw[1] = (u8Buf[1] << 8) | u8Buf[0];
 80014f8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80014fc:	021b      	lsls	r3, r3, #8
 80014fe:	b21a      	sxth	r2, r3
 8001500:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001504:	b21b      	sxth	r3, r3
 8001506:	4313      	orrs	r3, r2
 8001508:	b21b      	sxth	r3, r3
 800150a:	83fb      	strh	r3, [r7, #30]


	ret = IMU_ReadOneByte(dev, REG_ADD_GYRO_ZOUT_L, &u8Buf[0]);
 800150c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001510:	461a      	mov	r2, r3
 8001512:	2138      	movs	r1, #56	; 0x38
 8001514:	6878      	ldr	r0, [r7, #4]
 8001516:	f7ff fe15 	bl	8001144 <IMU_ReadOneByte>
 800151a:	4603      	mov	r3, r0
 800151c:	461a      	mov	r2, r3
 800151e:	4b48      	ldr	r3, [pc, #288]	; (8001640 <IMU_GyroRead+0x18c>)
 8001520:	701a      	strb	r2, [r3, #0]
	ret = IMU_ReadOneByte(dev, REG_ADD_GYRO_ZOUT_H, &u8Buf[1]);
 8001522:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001526:	3301      	adds	r3, #1
 8001528:	461a      	mov	r2, r3
 800152a:	2137      	movs	r1, #55	; 0x37
 800152c:	6878      	ldr	r0, [r7, #4]
 800152e:	f7ff fe09 	bl	8001144 <IMU_ReadOneByte>
 8001532:	4603      	mov	r3, r0
 8001534:	461a      	mov	r2, r3
 8001536:	4b42      	ldr	r3, [pc, #264]	; (8001640 <IMU_GyroRead+0x18c>)
 8001538:	701a      	strb	r2, [r3, #0]
	gyroRaw[2] = (u8Buf[1] << 8) | u8Buf[0];
 800153a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800153e:	021b      	lsls	r3, r3, #8
 8001540:	b21a      	sxth	r2, r3
 8001542:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001546:	b21b      	sxth	r3, r3
 8001548:	4313      	orrs	r3, r2
 800154a:	b21b      	sxth	r3, r3
 800154c:	843b      	strh	r3, [r7, #32]


	ret = IMU_ReadOneByte(dev, REG_ADD_GYRO_XOUT_L, &u8Buf[0]);
 800154e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001552:	461a      	mov	r2, r3
 8001554:	2134      	movs	r1, #52	; 0x34
 8001556:	6878      	ldr	r0, [r7, #4]
 8001558:	f7ff fdf4 	bl	8001144 <IMU_ReadOneByte>
 800155c:	4603      	mov	r3, r0
 800155e:	461a      	mov	r2, r3
 8001560:	4b37      	ldr	r3, [pc, #220]	; (8001640 <IMU_GyroRead+0x18c>)
 8001562:	701a      	strb	r2, [r3, #0]
	ret = IMU_ReadOneByte(dev, REG_ADD_GYRO_XOUT_H, &u8Buf[1]);
 8001564:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001568:	3301      	adds	r3, #1
 800156a:	461a      	mov	r2, r3
 800156c:	2133      	movs	r1, #51	; 0x33
 800156e:	6878      	ldr	r0, [r7, #4]
 8001570:	f7ff fde8 	bl	8001144 <IMU_ReadOneByte>
 8001574:	4603      	mov	r3, r0
 8001576:	461a      	mov	r2, r3
 8001578:	4b31      	ldr	r3, [pc, #196]	; (8001640 <IMU_GyroRead+0x18c>)
 800157a:	701a      	strb	r2, [r3, #0]
	temp = (u8Buf[1] << 8) | u8Buf[0]; // for debugging
 800157c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001580:	021b      	lsls	r3, r3, #8
 8001582:	b21a      	sxth	r2, r3
 8001584:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001588:	b21b      	sxth	r3, r3
 800158a:	4313      	orrs	r3, r2
 800158c:	84fb      	strh	r3, [r7, #38]	; 0x26
	gyroRaw[0] = (u8Buf[1] << 8) | u8Buf[0];
 800158e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001592:	021b      	lsls	r3, r3, #8
 8001594:	b21a      	sxth	r2, r3
 8001596:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800159a:	b21b      	sxth	r3, r3
 800159c:	4313      	orrs	r3, r2
 800159e:	b21b      	sxth	r3, r3
 80015a0:	83bb      	strh	r3, [r7, #28]

	float gyroRawFloat[3] = {0};
 80015a2:	f107 0308 	add.w	r3, r7, #8
 80015a6:	2200      	movs	r2, #0
 80015a8:	601a      	str	r2, [r3, #0]
 80015aa:	605a      	str	r2, [r3, #4]
 80015ac:	609a      	str	r2, [r3, #8]
	gyroRawFloat[0] = gyroRaw[0] - dev->gyro_bias[0];
 80015ae:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80015b2:	ee07 3a90 	vmov	s15, r3
 80015b6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80015c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015c4:	edc7 7a02 	vstr	s15, [r7, #8]
	gyroRawFloat[1] = gyroRaw[1] - dev->gyro_bias[1];
 80015c8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80015cc:	ee07 3a90 	vmov	s15, r3
 80015d0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80015da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015de:	edc7 7a03 	vstr	s15, [r7, #12]
	gyroRawFloat[2] = gyroRaw[2] - dev->gyro_bias[2];
 80015e2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80015e6:	ee07 3a90 	vmov	s15, r3
 80015ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80015f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015f8:	edc7 7a04 	vstr	s15, [r7, #16]
	// gyro full scale set to +/-500 dps, sensitivity scale factor = 65.5 LSB/dps
	// degree per second = value/65.5



	dev->gyro[0] = 0.06106870229f * gyroRawFloat[0];
 80015fc:	edd7 7a02 	vldr	s15, [r7, #8]
 8001600:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001644 <IMU_GyroRead+0x190>
 8001604:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	edc3 7a04 	vstr	s15, [r3, #16]
	dev->gyro[1] = 0.06106870229f * gyroRawFloat[1];
 800160e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001612:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8001644 <IMU_GyroRead+0x190>
 8001616:	ee67 7a87 	vmul.f32	s15, s15, s14
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	edc3 7a05 	vstr	s15, [r3, #20]
	dev->gyro[2] = 0.06106870229f * gyroRawFloat[2];
 8001620:	edd7 7a04 	vldr	s15, [r7, #16]
 8001624:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001644 <IMU_GyroRead+0x190>
 8001628:	ee67 7a87 	vmul.f32	s15, s15, s14
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	edc3 7a06 	vstr	s15, [r3, #24]

	return ret;
 8001632:	4b03      	ldr	r3, [pc, #12]	; (8001640 <IMU_GyroRead+0x18c>)
 8001634:	781b      	ldrb	r3, [r3, #0]

}
 8001636:	4618      	mov	r0, r3
 8001638:	3728      	adds	r7, #40	; 0x28
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	20000264 	.word	0x20000264
 8001644:	3d7a232d 	.word	0x3d7a232d

08001648 <Mag_init>:

HAL_StatusTypeDef Mag_init(ICM20948 *dev) {
 8001648:	b580      	push	{r7, lr}
 800164a:	b084      	sub	sp, #16
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
	uint8_t tmp = 0;
 8001650:	2300      	movs	r3, #0
 8001652:	73fb      	strb	r3, [r7, #15]

	Mag_WriteOneByte(dev, AK09916__CNTL2__REGISTER, REG_VAL_MAG_MODE_10HZ);
 8001654:	2202      	movs	r2, #2
 8001656:	2131      	movs	r1, #49	; 0x31
 8001658:	6878      	ldr	r0, [r7, #4]
 800165a:	f7ff fd8e 	bl	800117a <Mag_WriteOneByte>

}
 800165e:	bf00      	nop
 8001660:	4618      	mov	r0, r3
 8001662:	3710      	adds	r7, #16
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}

08001668 <OLED_Refresh_Gram>:
#include "stdbool.h"
#include "oledfont.h"

uint8_t OLED_GRAM[128][8];	 
void OLED_Refresh_Gram(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
	uint8_t i,n;		    
	for(i=0;i<8;i++)  
 800166e:	2300      	movs	r3, #0
 8001670:	71fb      	strb	r3, [r7, #7]
 8001672:	e026      	b.n	80016c2 <OLED_Refresh_Gram+0x5a>
	{  
		OLED_WR_Byte (0xb0+i,OLED_CMD);    
 8001674:	79fb      	ldrb	r3, [r7, #7]
 8001676:	3b50      	subs	r3, #80	; 0x50
 8001678:	b2db      	uxtb	r3, r3
 800167a:	2100      	movs	r1, #0
 800167c:	4618      	mov	r0, r3
 800167e:	f000 f82b 	bl	80016d8 <OLED_WR_Byte>
		OLED_WR_Byte (0x00,OLED_CMD);      
 8001682:	2100      	movs	r1, #0
 8001684:	2000      	movs	r0, #0
 8001686:	f000 f827 	bl	80016d8 <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);        
 800168a:	2100      	movs	r1, #0
 800168c:	2010      	movs	r0, #16
 800168e:	f000 f823 	bl	80016d8 <OLED_WR_Byte>
		for(n=0;n<128;n++)OLED_WR_Byte(OLED_GRAM[n][i],OLED_DATA); 
 8001692:	2300      	movs	r3, #0
 8001694:	71bb      	strb	r3, [r7, #6]
 8001696:	e00d      	b.n	80016b4 <OLED_Refresh_Gram+0x4c>
 8001698:	79ba      	ldrb	r2, [r7, #6]
 800169a:	79fb      	ldrb	r3, [r7, #7]
 800169c:	490d      	ldr	r1, [pc, #52]	; (80016d4 <OLED_Refresh_Gram+0x6c>)
 800169e:	00d2      	lsls	r2, r2, #3
 80016a0:	440a      	add	r2, r1
 80016a2:	4413      	add	r3, r2
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	2101      	movs	r1, #1
 80016a8:	4618      	mov	r0, r3
 80016aa:	f000 f815 	bl	80016d8 <OLED_WR_Byte>
 80016ae:	79bb      	ldrb	r3, [r7, #6]
 80016b0:	3301      	adds	r3, #1
 80016b2:	71bb      	strb	r3, [r7, #6]
 80016b4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	daed      	bge.n	8001698 <OLED_Refresh_Gram+0x30>
	for(i=0;i<8;i++)  
 80016bc:	79fb      	ldrb	r3, [r7, #7]
 80016be:	3301      	adds	r3, #1
 80016c0:	71fb      	strb	r3, [r7, #7]
 80016c2:	79fb      	ldrb	r3, [r7, #7]
 80016c4:	2b07      	cmp	r3, #7
 80016c6:	d9d5      	bls.n	8001674 <OLED_Refresh_Gram+0xc>
	}   
}
 80016c8:	bf00      	nop
 80016ca:	bf00      	nop
 80016cc:	3708      	adds	r7, #8
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	20000268 	.word	0x20000268

080016d8 <OLED_WR_Byte>:

void OLED_WR_Byte(uint8_t dat,uint8_t cmd)
{	
 80016d8:	b580      	push	{r7, lr}
 80016da:	b084      	sub	sp, #16
 80016dc:	af00      	add	r7, sp, #0
 80016de:	4603      	mov	r3, r0
 80016e0:	460a      	mov	r2, r1
 80016e2:	71fb      	strb	r3, [r7, #7]
 80016e4:	4613      	mov	r3, r2
 80016e6:	71bb      	strb	r3, [r7, #6]
	uint8_t i;			  
	if(cmd)
 80016e8:	79bb      	ldrb	r3, [r7, #6]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d006      	beq.n	80016fc <OLED_WR_Byte+0x24>
	  OLED_RS_Set();
 80016ee:	2201      	movs	r2, #1
 80016f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016f4:	481c      	ldr	r0, [pc, #112]	; (8001768 <OLED_WR_Byte+0x90>)
 80016f6:	f006 ffab 	bl	8008650 <HAL_GPIO_WritePin>
 80016fa:	e005      	b.n	8001708 <OLED_WR_Byte+0x30>
	else 
	  OLED_RS_Clr();		  
 80016fc:	2200      	movs	r2, #0
 80016fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001702:	4819      	ldr	r0, [pc, #100]	; (8001768 <OLED_WR_Byte+0x90>)
 8001704:	f006 ffa4 	bl	8008650 <HAL_GPIO_WritePin>
	for(i=0;i<8;i++)
 8001708:	2300      	movs	r3, #0
 800170a:	73fb      	strb	r3, [r7, #15]
 800170c:	e01e      	b.n	800174c <OLED_WR_Byte+0x74>
	{			  
		OLED_SCLK_Clr();
 800170e:	2200      	movs	r2, #0
 8001710:	2120      	movs	r1, #32
 8001712:	4815      	ldr	r0, [pc, #84]	; (8001768 <OLED_WR_Byte+0x90>)
 8001714:	f006 ff9c 	bl	8008650 <HAL_GPIO_WritePin>
		if(dat&0x80)
 8001718:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800171c:	2b00      	cmp	r3, #0
 800171e:	da05      	bge.n	800172c <OLED_WR_Byte+0x54>
		   OLED_SDIN_Set();
 8001720:	2201      	movs	r2, #1
 8001722:	2140      	movs	r1, #64	; 0x40
 8001724:	4810      	ldr	r0, [pc, #64]	; (8001768 <OLED_WR_Byte+0x90>)
 8001726:	f006 ff93 	bl	8008650 <HAL_GPIO_WritePin>
 800172a:	e004      	b.n	8001736 <OLED_WR_Byte+0x5e>
		else 
		   OLED_SDIN_Clr();
 800172c:	2200      	movs	r2, #0
 800172e:	2140      	movs	r1, #64	; 0x40
 8001730:	480d      	ldr	r0, [pc, #52]	; (8001768 <OLED_WR_Byte+0x90>)
 8001732:	f006 ff8d 	bl	8008650 <HAL_GPIO_WritePin>
		OLED_SCLK_Set();
 8001736:	2201      	movs	r2, #1
 8001738:	2120      	movs	r1, #32
 800173a:	480b      	ldr	r0, [pc, #44]	; (8001768 <OLED_WR_Byte+0x90>)
 800173c:	f006 ff88 	bl	8008650 <HAL_GPIO_WritePin>
		dat<<=1;   
 8001740:	79fb      	ldrb	r3, [r7, #7]
 8001742:	005b      	lsls	r3, r3, #1
 8001744:	71fb      	strb	r3, [r7, #7]
	for(i=0;i<8;i++)
 8001746:	7bfb      	ldrb	r3, [r7, #15]
 8001748:	3301      	adds	r3, #1
 800174a:	73fb      	strb	r3, [r7, #15]
 800174c:	7bfb      	ldrb	r3, [r7, #15]
 800174e:	2b07      	cmp	r3, #7
 8001750:	d9dd      	bls.n	800170e <OLED_WR_Byte+0x36>
	}				 		  
	OLED_RS_Set();   	  
 8001752:	2201      	movs	r2, #1
 8001754:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001758:	4803      	ldr	r0, [pc, #12]	; (8001768 <OLED_WR_Byte+0x90>)
 800175a:	f006 ff79 	bl	8008650 <HAL_GPIO_WritePin>
} 
 800175e:	bf00      	nop
 8001760:	3710      	adds	r7, #16
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	40021000 	.word	0x40021000

0800176c <OLED_Clear>:

/**************************************************************************
Clear OLED
**************************************************************************/  
void OLED_Clear(void)  
{  
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
	uint8_t i,n;  
	for(i=0;i<8;i++)for(n=0;n<128;n++)OLED_GRAM[n][i]=0X00;  
 8001772:	2300      	movs	r3, #0
 8001774:	71fb      	strb	r3, [r7, #7]
 8001776:	e014      	b.n	80017a2 <OLED_Clear+0x36>
 8001778:	2300      	movs	r3, #0
 800177a:	71bb      	strb	r3, [r7, #6]
 800177c:	e00a      	b.n	8001794 <OLED_Clear+0x28>
 800177e:	79ba      	ldrb	r2, [r7, #6]
 8001780:	79fb      	ldrb	r3, [r7, #7]
 8001782:	490c      	ldr	r1, [pc, #48]	; (80017b4 <OLED_Clear+0x48>)
 8001784:	00d2      	lsls	r2, r2, #3
 8001786:	440a      	add	r2, r1
 8001788:	4413      	add	r3, r2
 800178a:	2200      	movs	r2, #0
 800178c:	701a      	strb	r2, [r3, #0]
 800178e:	79bb      	ldrb	r3, [r7, #6]
 8001790:	3301      	adds	r3, #1
 8001792:	71bb      	strb	r3, [r7, #6]
 8001794:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001798:	2b00      	cmp	r3, #0
 800179a:	daf0      	bge.n	800177e <OLED_Clear+0x12>
 800179c:	79fb      	ldrb	r3, [r7, #7]
 800179e:	3301      	adds	r3, #1
 80017a0:	71fb      	strb	r3, [r7, #7]
 80017a2:	79fb      	ldrb	r3, [r7, #7]
 80017a4:	2b07      	cmp	r3, #7
 80017a6:	d9e7      	bls.n	8001778 <OLED_Clear+0xc>
	OLED_Refresh_Gram();//Refresh
 80017a8:	f7ff ff5e 	bl	8001668 <OLED_Refresh_Gram>
}
 80017ac:	bf00      	nop
 80017ae:	3708      	adds	r7, #8
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	20000268 	.word	0x20000268

080017b8 <OLED_Display_On>:

 /**************************************************************************
Turn On Display
**************************************************************************/  
void OLED_Display_On(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
	OLED_WR_Byte(0X8D,OLED_CMD);  //SET DCDC Command
 80017bc:	2100      	movs	r1, #0
 80017be:	208d      	movs	r0, #141	; 0x8d
 80017c0:	f7ff ff8a 	bl	80016d8 <OLED_WR_Byte>
	OLED_WR_Byte(0X14,OLED_CMD);  //DCDC ON
 80017c4:	2100      	movs	r1, #0
 80017c6:	2014      	movs	r0, #20
 80017c8:	f7ff ff86 	bl	80016d8 <OLED_WR_Byte>
	OLED_WR_Byte(0XAF,OLED_CMD);  //DISPLAY ON
 80017cc:	2100      	movs	r1, #0
 80017ce:	20af      	movs	r0, #175	; 0xaf
 80017d0:	f7ff ff82 	bl	80016d8 <OLED_WR_Byte>
}
 80017d4:	bf00      	nop
 80017d6:	bd80      	pop	{r7, pc}

080017d8 <OLED_DrawPoint>:

/**************************************************************************
Draw A Point
**************************************************************************/ 
void OLED_DrawPoint(uint8_t x,uint8_t y,uint8_t t)
{
 80017d8:	b480      	push	{r7}
 80017da:	b085      	sub	sp, #20
 80017dc:	af00      	add	r7, sp, #0
 80017de:	4603      	mov	r3, r0
 80017e0:	71fb      	strb	r3, [r7, #7]
 80017e2:	460b      	mov	r3, r1
 80017e4:	71bb      	strb	r3, [r7, #6]
 80017e6:	4613      	mov	r3, r2
 80017e8:	717b      	strb	r3, [r7, #5]
	uint8_t pos,bx,temp=0;
 80017ea:	2300      	movs	r3, #0
 80017ec:	73fb      	strb	r3, [r7, #15]
	if(x>127||y>63)return;//Out of reach
 80017ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	db41      	blt.n	800187a <OLED_DrawPoint+0xa2>
 80017f6:	79bb      	ldrb	r3, [r7, #6]
 80017f8:	2b3f      	cmp	r3, #63	; 0x3f
 80017fa:	d83e      	bhi.n	800187a <OLED_DrawPoint+0xa2>
	pos=7-y/8;
 80017fc:	79bb      	ldrb	r3, [r7, #6]
 80017fe:	08db      	lsrs	r3, r3, #3
 8001800:	b2db      	uxtb	r3, r3
 8001802:	f1c3 0307 	rsb	r3, r3, #7
 8001806:	73bb      	strb	r3, [r7, #14]
	bx=y%8;
 8001808:	79bb      	ldrb	r3, [r7, #6]
 800180a:	f003 0307 	and.w	r3, r3, #7
 800180e:	737b      	strb	r3, [r7, #13]
	temp=1<<(7-bx);
 8001810:	7b7b      	ldrb	r3, [r7, #13]
 8001812:	f1c3 0307 	rsb	r3, r3, #7
 8001816:	2201      	movs	r2, #1
 8001818:	fa02 f303 	lsl.w	r3, r2, r3
 800181c:	73fb      	strb	r3, [r7, #15]
	if(t)OLED_GRAM[x][pos]|=temp;
 800181e:	797b      	ldrb	r3, [r7, #5]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d012      	beq.n	800184a <OLED_DrawPoint+0x72>
 8001824:	79fa      	ldrb	r2, [r7, #7]
 8001826:	7bbb      	ldrb	r3, [r7, #14]
 8001828:	4917      	ldr	r1, [pc, #92]	; (8001888 <OLED_DrawPoint+0xb0>)
 800182a:	00d2      	lsls	r2, r2, #3
 800182c:	440a      	add	r2, r1
 800182e:	4413      	add	r3, r2
 8001830:	7818      	ldrb	r0, [r3, #0]
 8001832:	79fa      	ldrb	r2, [r7, #7]
 8001834:	7bbb      	ldrb	r3, [r7, #14]
 8001836:	7bf9      	ldrb	r1, [r7, #15]
 8001838:	4301      	orrs	r1, r0
 800183a:	b2c8      	uxtb	r0, r1
 800183c:	4912      	ldr	r1, [pc, #72]	; (8001888 <OLED_DrawPoint+0xb0>)
 800183e:	00d2      	lsls	r2, r2, #3
 8001840:	440a      	add	r2, r1
 8001842:	4413      	add	r3, r2
 8001844:	4602      	mov	r2, r0
 8001846:	701a      	strb	r2, [r3, #0]
 8001848:	e018      	b.n	800187c <OLED_DrawPoint+0xa4>
	else OLED_GRAM[x][pos]&=~temp;	    
 800184a:	79fa      	ldrb	r2, [r7, #7]
 800184c:	7bbb      	ldrb	r3, [r7, #14]
 800184e:	490e      	ldr	r1, [pc, #56]	; (8001888 <OLED_DrawPoint+0xb0>)
 8001850:	00d2      	lsls	r2, r2, #3
 8001852:	440a      	add	r2, r1
 8001854:	4413      	add	r3, r2
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	b25a      	sxtb	r2, r3
 800185a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800185e:	43db      	mvns	r3, r3
 8001860:	b25b      	sxtb	r3, r3
 8001862:	4013      	ands	r3, r2
 8001864:	b259      	sxtb	r1, r3
 8001866:	79fa      	ldrb	r2, [r7, #7]
 8001868:	7bbb      	ldrb	r3, [r7, #14]
 800186a:	b2c8      	uxtb	r0, r1
 800186c:	4906      	ldr	r1, [pc, #24]	; (8001888 <OLED_DrawPoint+0xb0>)
 800186e:	00d2      	lsls	r2, r2, #3
 8001870:	440a      	add	r2, r1
 8001872:	4413      	add	r3, r2
 8001874:	4602      	mov	r2, r0
 8001876:	701a      	strb	r2, [r3, #0]
 8001878:	e000      	b.n	800187c <OLED_DrawPoint+0xa4>
	if(x>127||y>63)return;//Out of reach
 800187a:	bf00      	nop
}
 800187c:	3714      	adds	r7, #20
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop
 8001888:	20000268 	.word	0x20000268

0800188c <OLED_DrawRect>:


void OLED_DrawRect(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, bool color) {
 800188c:	b590      	push	{r4, r7, lr}
 800188e:	b085      	sub	sp, #20
 8001890:	af00      	add	r7, sp, #0
 8001892:	4604      	mov	r4, r0
 8001894:	4608      	mov	r0, r1
 8001896:	4611      	mov	r1, r2
 8001898:	461a      	mov	r2, r3
 800189a:	4623      	mov	r3, r4
 800189c:	71fb      	strb	r3, [r7, #7]
 800189e:	4603      	mov	r3, r0
 80018a0:	71bb      	strb	r3, [r7, #6]
 80018a2:	460b      	mov	r3, r1
 80018a4:	717b      	strb	r3, [r7, #5]
 80018a6:	4613      	mov	r3, r2
 80018a8:	713b      	strb	r3, [r7, #4]
    // Draw horizontal lines
    for (uint8_t x = x1; x <= x2; x++) {
 80018aa:	79fb      	ldrb	r3, [r7, #7]
 80018ac:	73fb      	strb	r3, [r7, #15]
 80018ae:	e010      	b.n	80018d2 <OLED_DrawRect+0x46>
        OLED_DrawPoint(x, y1, color); // Draw top border
 80018b0:	f897 2020 	ldrb.w	r2, [r7, #32]
 80018b4:	79b9      	ldrb	r1, [r7, #6]
 80018b6:	7bfb      	ldrb	r3, [r7, #15]
 80018b8:	4618      	mov	r0, r3
 80018ba:	f7ff ff8d 	bl	80017d8 <OLED_DrawPoint>
        OLED_DrawPoint(x, y2, color); // Draw bottom border
 80018be:	f897 2020 	ldrb.w	r2, [r7, #32]
 80018c2:	7939      	ldrb	r1, [r7, #4]
 80018c4:	7bfb      	ldrb	r3, [r7, #15]
 80018c6:	4618      	mov	r0, r3
 80018c8:	f7ff ff86 	bl	80017d8 <OLED_DrawPoint>
    for (uint8_t x = x1; x <= x2; x++) {
 80018cc:	7bfb      	ldrb	r3, [r7, #15]
 80018ce:	3301      	adds	r3, #1
 80018d0:	73fb      	strb	r3, [r7, #15]
 80018d2:	7bfa      	ldrb	r2, [r7, #15]
 80018d4:	797b      	ldrb	r3, [r7, #5]
 80018d6:	429a      	cmp	r2, r3
 80018d8:	d9ea      	bls.n	80018b0 <OLED_DrawRect+0x24>
    }

    // Draw vertical lines
    for (uint8_t y = y1; y <= y2; y++) {
 80018da:	79bb      	ldrb	r3, [r7, #6]
 80018dc:	73bb      	strb	r3, [r7, #14]
 80018de:	e010      	b.n	8001902 <OLED_DrawRect+0x76>
        OLED_DrawPoint(x1, y, color); // Draw left border
 80018e0:	f897 2020 	ldrb.w	r2, [r7, #32]
 80018e4:	7bb9      	ldrb	r1, [r7, #14]
 80018e6:	79fb      	ldrb	r3, [r7, #7]
 80018e8:	4618      	mov	r0, r3
 80018ea:	f7ff ff75 	bl	80017d8 <OLED_DrawPoint>
        OLED_DrawPoint(x2, y, color); // Draw right border
 80018ee:	f897 2020 	ldrb.w	r2, [r7, #32]
 80018f2:	7bb9      	ldrb	r1, [r7, #14]
 80018f4:	797b      	ldrb	r3, [r7, #5]
 80018f6:	4618      	mov	r0, r3
 80018f8:	f7ff ff6e 	bl	80017d8 <OLED_DrawPoint>
    for (uint8_t y = y1; y <= y2; y++) {
 80018fc:	7bbb      	ldrb	r3, [r7, #14]
 80018fe:	3301      	adds	r3, #1
 8001900:	73bb      	strb	r3, [r7, #14]
 8001902:	7bba      	ldrb	r2, [r7, #14]
 8001904:	793b      	ldrb	r3, [r7, #4]
 8001906:	429a      	cmp	r2, r3
 8001908:	d9ea      	bls.n	80018e0 <OLED_DrawRect+0x54>
    }
}
 800190a:	bf00      	nop
 800190c:	bf00      	nop
 800190e:	3714      	adds	r7, #20
 8001910:	46bd      	mov	sp, r7
 8001912:	bd90      	pop	{r4, r7, pc}

08001914 <OLED_DrawRectWithFill>:

void OLED_DrawRectWithFill(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, bool color) {
 8001914:	b590      	push	{r4, r7, lr}
 8001916:	b085      	sub	sp, #20
 8001918:	af00      	add	r7, sp, #0
 800191a:	4604      	mov	r4, r0
 800191c:	4608      	mov	r0, r1
 800191e:	4611      	mov	r1, r2
 8001920:	461a      	mov	r2, r3
 8001922:	4623      	mov	r3, r4
 8001924:	71fb      	strb	r3, [r7, #7]
 8001926:	4603      	mov	r3, r0
 8001928:	71bb      	strb	r3, [r7, #6]
 800192a:	460b      	mov	r3, r1
 800192c:	717b      	strb	r3, [r7, #5]
 800192e:	4613      	mov	r3, r2
 8001930:	713b      	strb	r3, [r7, #4]
    // Draw borders
    for (uint8_t x = x1; x <= x2; x++) {
 8001932:	79fb      	ldrb	r3, [r7, #7]
 8001934:	73fb      	strb	r3, [r7, #15]
 8001936:	e010      	b.n	800195a <OLED_DrawRectWithFill+0x46>
        OLED_DrawPoint(x, y1, color); // Draw top border
 8001938:	f897 2020 	ldrb.w	r2, [r7, #32]
 800193c:	79b9      	ldrb	r1, [r7, #6]
 800193e:	7bfb      	ldrb	r3, [r7, #15]
 8001940:	4618      	mov	r0, r3
 8001942:	f7ff ff49 	bl	80017d8 <OLED_DrawPoint>
        OLED_DrawPoint(x, y2, color); // Draw bottom border
 8001946:	f897 2020 	ldrb.w	r2, [r7, #32]
 800194a:	7939      	ldrb	r1, [r7, #4]
 800194c:	7bfb      	ldrb	r3, [r7, #15]
 800194e:	4618      	mov	r0, r3
 8001950:	f7ff ff42 	bl	80017d8 <OLED_DrawPoint>
    for (uint8_t x = x1; x <= x2; x++) {
 8001954:	7bfb      	ldrb	r3, [r7, #15]
 8001956:	3301      	adds	r3, #1
 8001958:	73fb      	strb	r3, [r7, #15]
 800195a:	7bfa      	ldrb	r2, [r7, #15]
 800195c:	797b      	ldrb	r3, [r7, #5]
 800195e:	429a      	cmp	r2, r3
 8001960:	d9ea      	bls.n	8001938 <OLED_DrawRectWithFill+0x24>
    }

    for (uint8_t y = y1; y <= y2; y++) {
 8001962:	79bb      	ldrb	r3, [r7, #6]
 8001964:	73bb      	strb	r3, [r7, #14]
 8001966:	e010      	b.n	800198a <OLED_DrawRectWithFill+0x76>
        OLED_DrawPoint(x1, y, color); // Draw left border
 8001968:	f897 2020 	ldrb.w	r2, [r7, #32]
 800196c:	7bb9      	ldrb	r1, [r7, #14]
 800196e:	79fb      	ldrb	r3, [r7, #7]
 8001970:	4618      	mov	r0, r3
 8001972:	f7ff ff31 	bl	80017d8 <OLED_DrawPoint>
        OLED_DrawPoint(x2, y, color); // Draw right border
 8001976:	f897 2020 	ldrb.w	r2, [r7, #32]
 800197a:	7bb9      	ldrb	r1, [r7, #14]
 800197c:	797b      	ldrb	r3, [r7, #5]
 800197e:	4618      	mov	r0, r3
 8001980:	f7ff ff2a 	bl	80017d8 <OLED_DrawPoint>
    for (uint8_t y = y1; y <= y2; y++) {
 8001984:	7bbb      	ldrb	r3, [r7, #14]
 8001986:	3301      	adds	r3, #1
 8001988:	73bb      	strb	r3, [r7, #14]
 800198a:	7bba      	ldrb	r2, [r7, #14]
 800198c:	793b      	ldrb	r3, [r7, #4]
 800198e:	429a      	cmp	r2, r3
 8001990:	d9ea      	bls.n	8001968 <OLED_DrawRectWithFill+0x54>
    }

    // Fill the interior
    for (uint8_t y = y1 + 1; y < y2; y++) {
 8001992:	79bb      	ldrb	r3, [r7, #6]
 8001994:	3301      	adds	r3, #1
 8001996:	737b      	strb	r3, [r7, #13]
 8001998:	e014      	b.n	80019c4 <OLED_DrawRectWithFill+0xb0>
        for (uint8_t x = x1 + 1; x < x2; x++) {
 800199a:	79fb      	ldrb	r3, [r7, #7]
 800199c:	3301      	adds	r3, #1
 800199e:	733b      	strb	r3, [r7, #12]
 80019a0:	e009      	b.n	80019b6 <OLED_DrawRectWithFill+0xa2>
            OLED_DrawPoint(x, y, color); // Draw points within the rectangle
 80019a2:	f897 2020 	ldrb.w	r2, [r7, #32]
 80019a6:	7b79      	ldrb	r1, [r7, #13]
 80019a8:	7b3b      	ldrb	r3, [r7, #12]
 80019aa:	4618      	mov	r0, r3
 80019ac:	f7ff ff14 	bl	80017d8 <OLED_DrawPoint>
        for (uint8_t x = x1 + 1; x < x2; x++) {
 80019b0:	7b3b      	ldrb	r3, [r7, #12]
 80019b2:	3301      	adds	r3, #1
 80019b4:	733b      	strb	r3, [r7, #12]
 80019b6:	7b3a      	ldrb	r2, [r7, #12]
 80019b8:	797b      	ldrb	r3, [r7, #5]
 80019ba:	429a      	cmp	r2, r3
 80019bc:	d3f1      	bcc.n	80019a2 <OLED_DrawRectWithFill+0x8e>
    for (uint8_t y = y1 + 1; y < y2; y++) {
 80019be:	7b7b      	ldrb	r3, [r7, #13]
 80019c0:	3301      	adds	r3, #1
 80019c2:	737b      	strb	r3, [r7, #13]
 80019c4:	7b7a      	ldrb	r2, [r7, #13]
 80019c6:	793b      	ldrb	r3, [r7, #4]
 80019c8:	429a      	cmp	r2, r3
 80019ca:	d3e6      	bcc.n	800199a <OLED_DrawRectWithFill+0x86>
        }
    }
}
 80019cc:	bf00      	nop
 80019ce:	bf00      	nop
 80019d0:	3714      	adds	r7, #20
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd90      	pop	{r4, r7, pc}

080019d6 <OLED_DrawVerticalLine>:
    for (uint8_t i = x; i < x + length; i++) {
        OLED_DrawPoint(i, y, 1);
    }
}

void OLED_DrawVerticalLine(uint8_t x, uint8_t y, uint8_t length) {
 80019d6:	b580      	push	{r7, lr}
 80019d8:	b084      	sub	sp, #16
 80019da:	af00      	add	r7, sp, #0
 80019dc:	4603      	mov	r3, r0
 80019de:	71fb      	strb	r3, [r7, #7]
 80019e0:	460b      	mov	r3, r1
 80019e2:	71bb      	strb	r3, [r7, #6]
 80019e4:	4613      	mov	r3, r2
 80019e6:	717b      	strb	r3, [r7, #5]
    for (uint8_t i = y; i < y + length; i++) {
 80019e8:	79bb      	ldrb	r3, [r7, #6]
 80019ea:	73fb      	strb	r3, [r7, #15]
 80019ec:	e008      	b.n	8001a00 <OLED_DrawVerticalLine+0x2a>
        OLED_DrawPoint(x, i, 1);
 80019ee:	7bf9      	ldrb	r1, [r7, #15]
 80019f0:	79fb      	ldrb	r3, [r7, #7]
 80019f2:	2201      	movs	r2, #1
 80019f4:	4618      	mov	r0, r3
 80019f6:	f7ff feef 	bl	80017d8 <OLED_DrawPoint>
    for (uint8_t i = y; i < y + length; i++) {
 80019fa:	7bfb      	ldrb	r3, [r7, #15]
 80019fc:	3301      	adds	r3, #1
 80019fe:	73fb      	strb	r3, [r7, #15]
 8001a00:	7bfa      	ldrb	r2, [r7, #15]
 8001a02:	79b9      	ldrb	r1, [r7, #6]
 8001a04:	797b      	ldrb	r3, [r7, #5]
 8001a06:	440b      	add	r3, r1
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	dbf0      	blt.n	80019ee <OLED_DrawVerticalLine+0x18>
    }
}
 8001a0c:	bf00      	nop
 8001a0e:	bf00      	nop
 8001a10:	3710      	adds	r7, #16
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
	...

08001a18 <OLED_ShowChar>:
/**************************************************************************
Show Char
**************************************************************************/
void OLED_ShowChar(uint8_t x,uint8_t y,uint8_t chr,uint8_t size,uint8_t mode)
{      			    
 8001a18:	b590      	push	{r4, r7, lr}
 8001a1a:	b085      	sub	sp, #20
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	4604      	mov	r4, r0
 8001a20:	4608      	mov	r0, r1
 8001a22:	4611      	mov	r1, r2
 8001a24:	461a      	mov	r2, r3
 8001a26:	4623      	mov	r3, r4
 8001a28:	71fb      	strb	r3, [r7, #7]
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	71bb      	strb	r3, [r7, #6]
 8001a2e:	460b      	mov	r3, r1
 8001a30:	717b      	strb	r3, [r7, #5]
 8001a32:	4613      	mov	r3, r2
 8001a34:	713b      	strb	r3, [r7, #4]
	uint8_t temp,t,t1;
	uint8_t y0=y;
 8001a36:	79bb      	ldrb	r3, [r7, #6]
 8001a38:	733b      	strb	r3, [r7, #12]
	chr=chr-' ';				   
 8001a3a:	797b      	ldrb	r3, [r7, #5]
 8001a3c:	3b20      	subs	r3, #32
 8001a3e:	717b      	strb	r3, [r7, #5]
    for(t=0;t<size;t++)
 8001a40:	2300      	movs	r3, #0
 8001a42:	73bb      	strb	r3, [r7, #14]
 8001a44:	e04d      	b.n	8001ae2 <OLED_ShowChar+0xca>
    {   
		if(size==12)temp=oled_asc2_1206[chr][t];  //1206 Size
 8001a46:	793b      	ldrb	r3, [r7, #4]
 8001a48:	2b0c      	cmp	r3, #12
 8001a4a:	d10b      	bne.n	8001a64 <OLED_ShowChar+0x4c>
 8001a4c:	797a      	ldrb	r2, [r7, #5]
 8001a4e:	7bb9      	ldrb	r1, [r7, #14]
 8001a50:	4828      	ldr	r0, [pc, #160]	; (8001af4 <OLED_ShowChar+0xdc>)
 8001a52:	4613      	mov	r3, r2
 8001a54:	005b      	lsls	r3, r3, #1
 8001a56:	4413      	add	r3, r2
 8001a58:	009b      	lsls	r3, r3, #2
 8001a5a:	4403      	add	r3, r0
 8001a5c:	440b      	add	r3, r1
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	73fb      	strb	r3, [r7, #15]
 8001a62:	e007      	b.n	8001a74 <OLED_ShowChar+0x5c>
		else temp=oled_asc2_1608[chr][t];		 //1608 Size	                          
 8001a64:	797a      	ldrb	r2, [r7, #5]
 8001a66:	7bbb      	ldrb	r3, [r7, #14]
 8001a68:	4923      	ldr	r1, [pc, #140]	; (8001af8 <OLED_ShowChar+0xe0>)
 8001a6a:	0112      	lsls	r2, r2, #4
 8001a6c:	440a      	add	r2, r1
 8001a6e:	4413      	add	r3, r2
 8001a70:	781b      	ldrb	r3, [r3, #0]
 8001a72:	73fb      	strb	r3, [r7, #15]
        for(t1=0;t1<8;t1++)
 8001a74:	2300      	movs	r3, #0
 8001a76:	737b      	strb	r3, [r7, #13]
 8001a78:	e02d      	b.n	8001ad6 <OLED_ShowChar+0xbe>
		{
			if(temp&0x80)OLED_DrawPoint(x,y,mode);
 8001a7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	da07      	bge.n	8001a92 <OLED_ShowChar+0x7a>
 8001a82:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001a86:	79b9      	ldrb	r1, [r7, #6]
 8001a88:	79fb      	ldrb	r3, [r7, #7]
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f7ff fea4 	bl	80017d8 <OLED_DrawPoint>
 8001a90:	e00c      	b.n	8001aac <OLED_ShowChar+0x94>
			else OLED_DrawPoint(x,y,!mode);
 8001a92:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	bf0c      	ite	eq
 8001a9a:	2301      	moveq	r3, #1
 8001a9c:	2300      	movne	r3, #0
 8001a9e:	b2db      	uxtb	r3, r3
 8001aa0:	461a      	mov	r2, r3
 8001aa2:	79b9      	ldrb	r1, [r7, #6]
 8001aa4:	79fb      	ldrb	r3, [r7, #7]
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f7ff fe96 	bl	80017d8 <OLED_DrawPoint>
			temp<<=1;
 8001aac:	7bfb      	ldrb	r3, [r7, #15]
 8001aae:	005b      	lsls	r3, r3, #1
 8001ab0:	73fb      	strb	r3, [r7, #15]
			y++;
 8001ab2:	79bb      	ldrb	r3, [r7, #6]
 8001ab4:	3301      	adds	r3, #1
 8001ab6:	71bb      	strb	r3, [r7, #6]
			if((y-y0)==size)
 8001ab8:	79ba      	ldrb	r2, [r7, #6]
 8001aba:	7b3b      	ldrb	r3, [r7, #12]
 8001abc:	1ad2      	subs	r2, r2, r3
 8001abe:	793b      	ldrb	r3, [r7, #4]
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d105      	bne.n	8001ad0 <OLED_ShowChar+0xb8>
			{
				y=y0;
 8001ac4:	7b3b      	ldrb	r3, [r7, #12]
 8001ac6:	71bb      	strb	r3, [r7, #6]
				x++;
 8001ac8:	79fb      	ldrb	r3, [r7, #7]
 8001aca:	3301      	adds	r3, #1
 8001acc:	71fb      	strb	r3, [r7, #7]
				break;
 8001ace:	e005      	b.n	8001adc <OLED_ShowChar+0xc4>
        for(t1=0;t1<8;t1++)
 8001ad0:	7b7b      	ldrb	r3, [r7, #13]
 8001ad2:	3301      	adds	r3, #1
 8001ad4:	737b      	strb	r3, [r7, #13]
 8001ad6:	7b7b      	ldrb	r3, [r7, #13]
 8001ad8:	2b07      	cmp	r3, #7
 8001ada:	d9ce      	bls.n	8001a7a <OLED_ShowChar+0x62>
    for(t=0;t<size;t++)
 8001adc:	7bbb      	ldrb	r3, [r7, #14]
 8001ade:	3301      	adds	r3, #1
 8001ae0:	73bb      	strb	r3, [r7, #14]
 8001ae2:	7bba      	ldrb	r2, [r7, #14]
 8001ae4:	793b      	ldrb	r3, [r7, #4]
 8001ae6:	429a      	cmp	r2, r3
 8001ae8:	d3ad      	bcc.n	8001a46 <OLED_ShowChar+0x2e>
			}
		}  	 
    }          
}
 8001aea:	bf00      	nop
 8001aec:	bf00      	nop
 8001aee:	3714      	adds	r7, #20
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd90      	pop	{r4, r7, pc}
 8001af4:	080145fc 	.word	0x080145fc
 8001af8:	08014a70 	.word	0x08014a70

08001afc <OLED_ShowString>:
} 
/**************************************************************************
Show The String
**************************************************************************/
void OLED_ShowString(uint8_t x,uint8_t y,const uint8_t *p)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b084      	sub	sp, #16
 8001b00:	af02      	add	r7, sp, #8
 8001b02:	4603      	mov	r3, r0
 8001b04:	603a      	str	r2, [r7, #0]
 8001b06:	71fb      	strb	r3, [r7, #7]
 8001b08:	460b      	mov	r3, r1
 8001b0a:	71bb      	strb	r3, [r7, #6]
#define MAX_CHAR_POSX 122
#define MAX_CHAR_POSY 58          
    while(*p!='\0')
 8001b0c:	e01f      	b.n	8001b4e <OLED_ShowString+0x52>
    {       
        if(x>MAX_CHAR_POSX){x=0;y+=16;}
 8001b0e:	79fb      	ldrb	r3, [r7, #7]
 8001b10:	2b7a      	cmp	r3, #122	; 0x7a
 8001b12:	d904      	bls.n	8001b1e <OLED_ShowString+0x22>
 8001b14:	2300      	movs	r3, #0
 8001b16:	71fb      	strb	r3, [r7, #7]
 8001b18:	79bb      	ldrb	r3, [r7, #6]
 8001b1a:	3310      	adds	r3, #16
 8001b1c:	71bb      	strb	r3, [r7, #6]
        if(y>MAX_CHAR_POSY){y=x=0;OLED_Clear();}
 8001b1e:	79bb      	ldrb	r3, [r7, #6]
 8001b20:	2b3a      	cmp	r3, #58	; 0x3a
 8001b22:	d905      	bls.n	8001b30 <OLED_ShowString+0x34>
 8001b24:	2300      	movs	r3, #0
 8001b26:	71fb      	strb	r3, [r7, #7]
 8001b28:	79fb      	ldrb	r3, [r7, #7]
 8001b2a:	71bb      	strb	r3, [r7, #6]
 8001b2c:	f7ff fe1e 	bl	800176c <OLED_Clear>
        OLED_ShowChar(x,y,*p,12,1);	 
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	781a      	ldrb	r2, [r3, #0]
 8001b34:	79b9      	ldrb	r1, [r7, #6]
 8001b36:	79f8      	ldrb	r0, [r7, #7]
 8001b38:	2301      	movs	r3, #1
 8001b3a:	9300      	str	r3, [sp, #0]
 8001b3c:	230c      	movs	r3, #12
 8001b3e:	f7ff ff6b 	bl	8001a18 <OLED_ShowChar>
        x+=8;
 8001b42:	79fb      	ldrb	r3, [r7, #7]
 8001b44:	3308      	adds	r3, #8
 8001b46:	71fb      	strb	r3, [r7, #7]
        p++;
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	3301      	adds	r3, #1
 8001b4c:	603b      	str	r3, [r7, #0]
    while(*p!='\0')
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	781b      	ldrb	r3, [r3, #0]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d1db      	bne.n	8001b0e <OLED_ShowString+0x12>
    }  
}	 
 8001b56:	bf00      	nop
 8001b58:	bf00      	nop
 8001b5a:	3708      	adds	r7, #8
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}

08001b60 <OLED_Init>:

void OLED_Init(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	af00      	add	r7, sp, #0
	HAL_PWR_EnableBkUpAccess(); //Enable access to the RTC and Backup Register
 8001b64:	f007 feae 	bl	80098c4 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSE_CONFIG(RCC_LSE_OFF); //turn OFF the LSE oscillator, LSERDY flag goes low after 6 LSE oscillator clock cycles.
 8001b68:	4b41      	ldr	r3, [pc, #260]	; (8001c70 <OLED_Init+0x110>)
 8001b6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b6c:	4a40      	ldr	r2, [pc, #256]	; (8001c70 <OLED_Init+0x110>)
 8001b6e:	f023 0301 	bic.w	r3, r3, #1
 8001b72:	6713      	str	r3, [r2, #112]	; 0x70
 8001b74:	4b3e      	ldr	r3, [pc, #248]	; (8001c70 <OLED_Init+0x110>)
 8001b76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b78:	4a3d      	ldr	r2, [pc, #244]	; (8001c70 <OLED_Init+0x110>)
 8001b7a:	f023 0304 	bic.w	r3, r3, #4
 8001b7e:	6713      	str	r3, [r2, #112]	; 0x70
	                                   //LSE oscillator switch off to let PC13 PC14 PC15 be IO
	
	
	HAL_PWR_DisableBkUpAccess();
 8001b80:	f007 feb4 	bl	80098ec <HAL_PWR_DisableBkUpAccess>
	
	OLED_RST_Clr();
 8001b84:	2200      	movs	r2, #0
 8001b86:	2180      	movs	r1, #128	; 0x80
 8001b88:	483a      	ldr	r0, [pc, #232]	; (8001c74 <OLED_Init+0x114>)
 8001b8a:	f006 fd61 	bl	8008650 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001b8e:	2064      	movs	r0, #100	; 0x64
 8001b90:	f005 faba 	bl	8007108 <HAL_Delay>
	OLED_RST_Set();
 8001b94:	2201      	movs	r2, #1
 8001b96:	2180      	movs	r1, #128	; 0x80
 8001b98:	4836      	ldr	r0, [pc, #216]	; (8001c74 <OLED_Init+0x114>)
 8001b9a:	f006 fd59 	bl	8008650 <HAL_GPIO_WritePin>
	
	OLED_WR_Byte(0xAE,OLED_CMD); //Off Display
 8001b9e:	2100      	movs	r1, #0
 8001ba0:	20ae      	movs	r0, #174	; 0xae
 8001ba2:	f7ff fd99 	bl	80016d8 <OLED_WR_Byte>
	
	OLED_WR_Byte(0xD5,OLED_CMD); //Set Oscillator Division
 8001ba6:	2100      	movs	r1, #0
 8001ba8:	20d5      	movs	r0, #213	; 0xd5
 8001baa:	f7ff fd95 	bl	80016d8 <OLED_WR_Byte>
	OLED_WR_Byte(80,OLED_CMD);    //[3:0]: divide ratio of the DCLK, [7:4], set the oscillator frequency. Reset
 8001bae:	2100      	movs	r1, #0
 8001bb0:	2050      	movs	r0, #80	; 0x50
 8001bb2:	f7ff fd91 	bl	80016d8 <OLED_WR_Byte>
	OLED_WR_Byte(0xA8,OLED_CMD); //multiplex ratio
 8001bb6:	2100      	movs	r1, #0
 8001bb8:	20a8      	movs	r0, #168	; 0xa8
 8001bba:	f7ff fd8d 	bl	80016d8 <OLED_WR_Byte>
	OLED_WR_Byte(0X3F,OLED_CMD); //duty = 0X3F(1/64) 
 8001bbe:	2100      	movs	r1, #0
 8001bc0:	203f      	movs	r0, #63	; 0x3f
 8001bc2:	f7ff fd89 	bl	80016d8 <OLED_WR_Byte>
	OLED_WR_Byte(0xD3,OLED_CMD);  //set display offset
 8001bc6:	2100      	movs	r1, #0
 8001bc8:	20d3      	movs	r0, #211	; 0xd3
 8001bca:	f7ff fd85 	bl	80016d8 <OLED_WR_Byte>
	OLED_WR_Byte(0X00,OLED_CMD); //0
 8001bce:	2100      	movs	r1, #0
 8001bd0:	2000      	movs	r0, #0
 8001bd2:	f7ff fd81 	bl	80016d8 <OLED_WR_Byte>

	OLED_WR_Byte(0x40,OLED_CMD); //set display start line [5:0]- from 0-63. RESET
 8001bd6:	2100      	movs	r1, #0
 8001bd8:	2040      	movs	r0, #64	; 0x40
 8001bda:	f7ff fd7d 	bl	80016d8 <OLED_WR_Byte>
													
	OLED_WR_Byte(0x8D,OLED_CMD); //Set charge pump
 8001bde:	2100      	movs	r1, #0
 8001be0:	208d      	movs	r0, #141	; 0x8d
 8001be2:	f7ff fd79 	bl	80016d8 <OLED_WR_Byte>
	OLED_WR_Byte(0x14,OLED_CMD); //Enable Charge Pump
 8001be6:	2100      	movs	r1, #0
 8001be8:	2014      	movs	r0, #20
 8001bea:	f7ff fd75 	bl	80016d8 <OLED_WR_Byte>
	OLED_WR_Byte(0x20,OLED_CMD); //Set Memory Addressing Mode
 8001bee:	2100      	movs	r1, #0
 8001bf0:	2020      	movs	r0, #32
 8001bf2:	f7ff fd71 	bl	80016d8 <OLED_WR_Byte>
	OLED_WR_Byte(0x02,OLED_CMD); //Page Addressing Mode (RESET)
 8001bf6:	2100      	movs	r1, #0
 8001bf8:	2002      	movs	r0, #2
 8001bfa:	f7ff fd6d 	bl	80016d8 <OLED_WR_Byte>
	OLED_WR_Byte(0xA1,OLED_CMD); //Set segment remap, bit0:0,0->0;1,0->127;
 8001bfe:	2100      	movs	r1, #0
 8001c00:	20a1      	movs	r0, #161	; 0xa1
 8001c02:	f7ff fd69 	bl	80016d8 <OLED_WR_Byte>
	OLED_WR_Byte(0xC0,OLED_CMD); //Set COM Output Scan Direction
 8001c06:	2100      	movs	r1, #0
 8001c08:	20c0      	movs	r0, #192	; 0xc0
 8001c0a:	f7ff fd65 	bl	80016d8 <OLED_WR_Byte>
	OLED_WR_Byte(0xDA,OLED_CMD); //Set COM Pins
 8001c0e:	2100      	movs	r1, #0
 8001c10:	20da      	movs	r0, #218	; 0xda
 8001c12:	f7ff fd61 	bl	80016d8 <OLED_WR_Byte>
	OLED_WR_Byte(0x12,OLED_CMD); //[5:4] setting
 8001c16:	2100      	movs	r1, #0
 8001c18:	2012      	movs	r0, #18
 8001c1a:	f7ff fd5d 	bl	80016d8 <OLED_WR_Byte>
	 
	OLED_WR_Byte(0x81,OLED_CMD); //Contrast Control
 8001c1e:	2100      	movs	r1, #0
 8001c20:	2081      	movs	r0, #129	; 0x81
 8001c22:	f7ff fd59 	bl	80016d8 <OLED_WR_Byte>
	OLED_WR_Byte(0xEF,OLED_CMD); //1~256; Default: 0X7F
 8001c26:	2100      	movs	r1, #0
 8001c28:	20ef      	movs	r0, #239	; 0xef
 8001c2a:	f7ff fd55 	bl	80016d8 <OLED_WR_Byte>
	OLED_WR_Byte(0xD9,OLED_CMD); //Set Pre-charge Period
 8001c2e:	2100      	movs	r1, #0
 8001c30:	20d9      	movs	r0, #217	; 0xd9
 8001c32:	f7ff fd51 	bl	80016d8 <OLED_WR_Byte>
	OLED_WR_Byte(0xf1,OLED_CMD); //[3:0],PHASE 1;[7:4],PHASE 2;
 8001c36:	2100      	movs	r1, #0
 8001c38:	20f1      	movs	r0, #241	; 0xf1
 8001c3a:	f7ff fd4d 	bl	80016d8 <OLED_WR_Byte>
	OLED_WR_Byte(0xDB,OLED_CMD); //Set VCOMH
 8001c3e:	2100      	movs	r1, #0
 8001c40:	20db      	movs	r0, #219	; 0xdb
 8001c42:	f7ff fd49 	bl	80016d8 <OLED_WR_Byte>
	OLED_WR_Byte(0x30,OLED_CMD);  //[6:4] 000,0.65*vcc;001,0.77*vcc;011,0.83*vcc;
 8001c46:	2100      	movs	r1, #0
 8001c48:	2030      	movs	r0, #48	; 0x30
 8001c4a:	f7ff fd45 	bl	80016d8 <OLED_WR_Byte>

	OLED_WR_Byte(0xA4,OLED_CMD); //Enable display outputs according to the GDDRAM contents
 8001c4e:	2100      	movs	r1, #0
 8001c50:	20a4      	movs	r0, #164	; 0xa4
 8001c52:	f7ff fd41 	bl	80016d8 <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD); //Set normal display   						   
 8001c56:	2100      	movs	r1, #0
 8001c58:	20a6      	movs	r0, #166	; 0xa6
 8001c5a:	f7ff fd3d 	bl	80016d8 <OLED_WR_Byte>
	OLED_WR_Byte(0xAF,OLED_CMD); //DISPLAY ON	 
 8001c5e:	2100      	movs	r1, #0
 8001c60:	20af      	movs	r0, #175	; 0xaf
 8001c62:	f7ff fd39 	bl	80016d8 <OLED_WR_Byte>
	OLED_Clear(); 
 8001c66:	f7ff fd81 	bl	800176c <OLED_Clear>
}
 8001c6a:	bf00      	nop
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	40023800 	.word	0x40023800
 8001c74:	40021000 	.word	0x40021000

08001c78 <_ZN7Display8oledTaskEPv>:
#include "app_main.h"
#include <cstring>
#include <cstdio>
namespace Display {

void oledTask(void*) {
 8001c78:	b5b0      	push	{r4, r5, r7, lr}
 8001c7a:	b08a      	sub	sp, #40	; 0x28
 8001c7c:	af04      	add	r7, sp, #16
 8001c7e:	6078      	str	r0, [r7, #4]

	OLED_Init();
 8001c80:	f7ff ff6e 	bl	8001b60 <OLED_Init>
	OLED_Clear();
 8001c84:	f7ff fd72 	bl	800176c <OLED_Clear>

	OLED_ShowString(0, 0, (uint8_t*) "TRD|OK");
 8001c88:	4a86      	ldr	r2, [pc, #536]	; (8001ea4 <_ZN7Display8oledTaskEPv+0x22c>)
 8001c8a:	2100      	movs	r1, #0
 8001c8c:	2000      	movs	r0, #0
 8001c8e:	f7ff ff35 	bl	8001afc <OLED_ShowString>
	OLED_Display_On();
 8001c92:	f7ff fd91 	bl	80017b8 <OLED_Display_On>
	OLED_DrawRect(46, 16, 51, 21, 1);
 8001c96:	2301      	movs	r3, #1
 8001c98:	9300      	str	r3, [sp, #0]
 8001c9a:	2315      	movs	r3, #21
 8001c9c:	2233      	movs	r2, #51	; 0x33
 8001c9e:	2110      	movs	r1, #16
 8001ca0:	202e      	movs	r0, #46	; 0x2e
 8001ca2:	f7ff fdf3 	bl	800188c <OLED_DrawRect>
	OLED_DrawRect(46, 28, 51, 33, 1);
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	9300      	str	r3, [sp, #0]
 8001caa:	2321      	movs	r3, #33	; 0x21
 8001cac:	2233      	movs	r2, #51	; 0x33
 8001cae:	211c      	movs	r1, #28
 8001cb0:	202e      	movs	r0, #46	; 0x2e
 8001cb2:	f7ff fdeb 	bl	800188c <OLED_DrawRect>
	OLED_DrawRect(46, 40, 51, 45, 1);
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	9300      	str	r3, [sp, #0]
 8001cba:	232d      	movs	r3, #45	; 0x2d
 8001cbc:	2233      	movs	r2, #51	; 0x33
 8001cbe:	2128      	movs	r1, #40	; 0x28
 8001cc0:	202e      	movs	r0, #46	; 0x2e
 8001cc2:	f7ff fde3 	bl	800188c <OLED_DrawRect>
	OLED_DrawRect(46, 52, 51, 57, 1);
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	9300      	str	r3, [sp, #0]
 8001cca:	2339      	movs	r3, #57	; 0x39
 8001ccc:	2233      	movs	r2, #51	; 0x33
 8001cce:	2134      	movs	r1, #52	; 0x34
 8001cd0:	202e      	movs	r0, #46	; 0x2e
 8001cd2:	f7ff fddb 	bl	800188c <OLED_DrawRect>
	OLED_DrawVerticalLine(55, 3, 58);
 8001cd6:	223a      	movs	r2, #58	; 0x3a
 8001cd8:	2103      	movs	r1, #3
 8001cda:	2037      	movs	r0, #55	; 0x37
 8001cdc:	f7ff fe7b 	bl	80019d6 <OLED_DrawVerticalLine>

	OLED_ShowString(1, 13, (uint8_t*) "SELF");
 8001ce0:	4a71      	ldr	r2, [pc, #452]	; (8001ea8 <_ZN7Display8oledTaskEPv+0x230>)
 8001ce2:	210d      	movs	r1, #13
 8001ce4:	2001      	movs	r0, #1
 8001ce6:	f7ff ff09 	bl	8001afc <OLED_ShowString>
	OLED_ShowString(1, 25, (uint8_t*) "PROC");
 8001cea:	4a70      	ldr	r2, [pc, #448]	; (8001eac <_ZN7Display8oledTaskEPv+0x234>)
 8001cec:	2119      	movs	r1, #25
 8001cee:	2001      	movs	r0, #1
 8001cf0:	f7ff ff04 	bl	8001afc <OLED_ShowString>
	OLED_ShowString(1, 37, (uint8_t*) "SENR");
 8001cf4:	4a6e      	ldr	r2, [pc, #440]	; (8001eb0 <_ZN7Display8oledTaskEPv+0x238>)
 8001cf6:	2125      	movs	r1, #37	; 0x25
 8001cf8:	2001      	movs	r0, #1
 8001cfa:	f7ff feff 	bl	8001afc <OLED_ShowString>
	OLED_ShowString(1, 49, (uint8_t*) "MOTN");
 8001cfe:	4a6d      	ldr	r2, [pc, #436]	; (8001eb4 <_ZN7Display8oledTaskEPv+0x23c>)
 8001d00:	2131      	movs	r1, #49	; 0x31
 8001d02:	2001      	movs	r0, #1
 8001d04:	f7ff fefa 	bl	8001afc <OLED_ShowString>
	OLED_ShowString(60, 0, (uint8_t*) "gZ");
 8001d08:	4a6b      	ldr	r2, [pc, #428]	; (8001eb8 <_ZN7Display8oledTaskEPv+0x240>)
 8001d0a:	2100      	movs	r1, #0
 8001d0c:	203c      	movs	r0, #60	; 0x3c
 8001d0e:	f7ff fef5 	bl	8001afc <OLED_ShowString>
	OLED_ShowString(60, 12, (uint8_t*) "TRX QL");
 8001d12:	4a6a      	ldr	r2, [pc, #424]	; (8001ebc <_ZN7Display8oledTaskEPv+0x244>)
 8001d14:	210c      	movs	r1, #12
 8001d16:	203c      	movs	r0, #60	; 0x3c
 8001d18:	f7ff fef0 	bl	8001afc <OLED_ShowString>
	OLED_ShowString(60, 36, (uint8_t*) "YAW");
 8001d1c:	4a68      	ldr	r2, [pc, #416]	; (8001ec0 <_ZN7Display8oledTaskEPv+0x248>)
 8001d1e:	2124      	movs	r1, #36	; 0x24
 8001d20:	203c      	movs	r0, #60	; 0x3c
 8001d22:	f7ff feeb 	bl	8001afc <OLED_ShowString>
	OLED_Refresh_Gram();
 8001d26:	f7ff fc9f 	bl	8001668 <OLED_Refresh_Gram>
	bool self = false;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	75fb      	strb	r3, [r7, #23]
	uint8_t buf[10] = { 0 };
 8001d2e:	2300      	movs	r3, #0
 8001d30:	60fb      	str	r3, [r7, #12]
 8001d32:	f107 0310 	add.w	r3, r7, #16
 8001d36:	2200      	movs	r2, #0
 8001d38:	601a      	str	r2, [r3, #0]
 8001d3a:	809a      	strh	r2, [r3, #4]
	for (;;) {

		OLED_DrawRectWithFill(47, 17, 50, 20, self);
 8001d3c:	7dfb      	ldrb	r3, [r7, #23]
 8001d3e:	9300      	str	r3, [sp, #0]
 8001d40:	2314      	movs	r3, #20
 8001d42:	2232      	movs	r2, #50	; 0x32
 8001d44:	2111      	movs	r1, #17
 8001d46:	202f      	movs	r0, #47	; 0x2f
 8001d48:	f7ff fde4 	bl	8001914 <OLED_DrawRectWithFill>
		OLED_DrawRectWithFill(47, 29, 50, 32, is_task_alive_struct.proc);
 8001d4c:	4b5d      	ldr	r3, [pc, #372]	; (8001ec4 <_ZN7Display8oledTaskEPv+0x24c>)
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	9300      	str	r3, [sp, #0]
 8001d52:	2320      	movs	r3, #32
 8001d54:	2232      	movs	r2, #50	; 0x32
 8001d56:	211d      	movs	r1, #29
 8001d58:	202f      	movs	r0, #47	; 0x2f
 8001d5a:	f7ff fddb 	bl	8001914 <OLED_DrawRectWithFill>
		OLED_DrawRectWithFill(47, 41, 50, 44, is_task_alive_struct.senr);
 8001d5e:	4b59      	ldr	r3, [pc, #356]	; (8001ec4 <_ZN7Display8oledTaskEPv+0x24c>)
 8001d60:	789b      	ldrb	r3, [r3, #2]
 8001d62:	9300      	str	r3, [sp, #0]
 8001d64:	232c      	movs	r3, #44	; 0x2c
 8001d66:	2232      	movs	r2, #50	; 0x32
 8001d68:	2129      	movs	r1, #41	; 0x29
 8001d6a:	202f      	movs	r0, #47	; 0x2f
 8001d6c:	f7ff fdd2 	bl	8001914 <OLED_DrawRectWithFill>
		OLED_DrawRectWithFill(47, 53, 50, 56, is_task_alive_struct.motn);
 8001d70:	4b54      	ldr	r3, [pc, #336]	; (8001ec4 <_ZN7Display8oledTaskEPv+0x24c>)
 8001d72:	78db      	ldrb	r3, [r3, #3]
 8001d74:	9300      	str	r3, [sp, #0]
 8001d76:	2338      	movs	r3, #56	; 0x38
 8001d78:	2232      	movs	r2, #50	; 0x32
 8001d7a:	2135      	movs	r1, #53	; 0x35
 8001d7c:	202f      	movs	r0, #47	; 0x2f
 8001d7e:	f7ff fdc9 	bl	8001914 <OLED_DrawRectWithFill>

		memset(&buf, 0, sizeof(buf));
 8001d82:	f107 030c 	add.w	r3, r7, #12
 8001d86:	220a      	movs	r2, #10
 8001d88:	2100      	movs	r1, #0
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f00f fb84 	bl	8011498 <memset>
		snprintf((char*) buf, sizeof(buf), "%4.2f", sensor_data.imu->gyro[2]);
 8001d90:	4b4d      	ldr	r3, [pc, #308]	; (8001ec8 <_ZN7Display8oledTaskEPv+0x250>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	699b      	ldr	r3, [r3, #24]
 8001d96:	4618      	mov	r0, r3
 8001d98:	f7fe fbd6 	bl	8000548 <__aeabi_f2d>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	460b      	mov	r3, r1
 8001da0:	f107 000c 	add.w	r0, r7, #12
 8001da4:	e9cd 2300 	strd	r2, r3, [sp]
 8001da8:	4a48      	ldr	r2, [pc, #288]	; (8001ecc <_ZN7Display8oledTaskEPv+0x254>)
 8001daa:	210a      	movs	r1, #10
 8001dac:	f010 fa28 	bl	8012200 <sniprintf>
		if (is_task_alive_struct.senr) {
 8001db0:	4b44      	ldr	r3, [pc, #272]	; (8001ec4 <_ZN7Display8oledTaskEPv+0x24c>)
 8001db2:	789b      	ldrb	r3, [r3, #2]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d007      	beq.n	8001dc8 <_ZN7Display8oledTaskEPv+0x150>
			OLED_ShowString(80, 0, (uint8_t*) &buf);
 8001db8:	f107 030c 	add.w	r3, r7, #12
 8001dbc:	461a      	mov	r2, r3
 8001dbe:	2100      	movs	r1, #0
 8001dc0:	2050      	movs	r0, #80	; 0x50
 8001dc2:	f7ff fe9b 	bl	8001afc <OLED_ShowString>
 8001dc6:	e004      	b.n	8001dd2 <_ZN7Display8oledTaskEPv+0x15a>

		} else {
			OLED_ShowString(80, 0, (uint8_t*) "NCAL");
 8001dc8:	4a41      	ldr	r2, [pc, #260]	; (8001ed0 <_ZN7Display8oledTaskEPv+0x258>)
 8001dca:	2100      	movs	r1, #0
 8001dcc:	2050      	movs	r0, #80	; 0x50
 8001dce:	f7ff fe95 	bl	8001afc <OLED_ShowString>

		}

		memset(&buf, 0, sizeof(buf));
 8001dd2:	f107 030c 	add.w	r3, r7, #12
 8001dd6:	220a      	movs	r2, #10
 8001dd8:	2100      	movs	r1, #0
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f00f fb5c 	bl	8011498 <memset>
		snprintf((char*) buf, sizeof(buf), "%d", sensor_data.ql);
 8001de0:	4b39      	ldr	r3, [pc, #228]	; (8001ec8 <_ZN7Display8oledTaskEPv+0x250>)
 8001de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de4:	f107 000c 	add.w	r0, r7, #12
 8001de8:	4a3a      	ldr	r2, [pc, #232]	; (8001ed4 <_ZN7Display8oledTaskEPv+0x25c>)
 8001dea:	210a      	movs	r1, #10
 8001dec:	f010 fa08 	bl	8012200 <sniprintf>
		OLED_ShowString(115, 12, (uint8_t*) &buf);
 8001df0:	f107 030c 	add.w	r3, r7, #12
 8001df4:	461a      	mov	r2, r3
 8001df6:	210c      	movs	r1, #12
 8001df8:	2073      	movs	r0, #115	; 0x73
 8001dfa:	f7ff fe7f 	bl	8001afc <OLED_ShowString>
		memset(&buf, 0, sizeof(buf));
 8001dfe:	f107 030c 	add.w	r3, r7, #12
 8001e02:	220a      	movs	r2, #10
 8001e04:	2100      	movs	r1, #0
 8001e06:	4618      	mov	r0, r3
 8001e08:	f00f fb46 	bl	8011498 <memset>
		snprintf((char*) buf, sizeof(buf), "%3.0f::%3.0f", sensor_data.ir_distL, sensor_data.ir_distR);
 8001e0c:	4b2e      	ldr	r3, [pc, #184]	; (8001ec8 <_ZN7Display8oledTaskEPv+0x250>)
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	4618      	mov	r0, r3
 8001e12:	f7fe fb99 	bl	8000548 <__aeabi_f2d>
 8001e16:	4604      	mov	r4, r0
 8001e18:	460d      	mov	r5, r1
 8001e1a:	4b2b      	ldr	r3, [pc, #172]	; (8001ec8 <_ZN7Display8oledTaskEPv+0x250>)
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f7fe fb92 	bl	8000548 <__aeabi_f2d>
 8001e24:	4602      	mov	r2, r0
 8001e26:	460b      	mov	r3, r1
 8001e28:	f107 000c 	add.w	r0, r7, #12
 8001e2c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001e30:	e9cd 4500 	strd	r4, r5, [sp]
 8001e34:	4a28      	ldr	r2, [pc, #160]	; (8001ed8 <_ZN7Display8oledTaskEPv+0x260>)
 8001e36:	210a      	movs	r1, #10
 8001e38:	f010 f9e2 	bl	8012200 <sniprintf>
		OLED_ShowString(65, 24, (uint8_t*) &buf);
 8001e3c:	f107 030c 	add.w	r3, r7, #12
 8001e40:	461a      	mov	r2, r3
 8001e42:	2118      	movs	r1, #24
 8001e44:	2041      	movs	r0, #65	; 0x41
 8001e46:	f7ff fe59 	bl	8001afc <OLED_ShowString>
		memset(&buf, 0, sizeof(buf));
 8001e4a:	f107 030c 	add.w	r3, r7, #12
 8001e4e:	220a      	movs	r2, #10
 8001e50:	2100      	movs	r1, #0
 8001e52:	4618      	mov	r0, r3
 8001e54:	f00f fb20 	bl	8011498 <memset>
		snprintf((char*) buf, sizeof(buf), "%4.1f", sensor_data.yaw_abs);
 8001e58:	4b1b      	ldr	r3, [pc, #108]	; (8001ec8 <_ZN7Display8oledTaskEPv+0x250>)
 8001e5a:	691b      	ldr	r3, [r3, #16]
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f7fe fb73 	bl	8000548 <__aeabi_f2d>
 8001e62:	4602      	mov	r2, r0
 8001e64:	460b      	mov	r3, r1
 8001e66:	f107 000c 	add.w	r0, r7, #12
 8001e6a:	e9cd 2300 	strd	r2, r3, [sp]
 8001e6e:	4a1b      	ldr	r2, [pc, #108]	; (8001edc <_ZN7Display8oledTaskEPv+0x264>)
 8001e70:	210a      	movs	r1, #10
 8001e72:	f010 f9c5 	bl	8012200 <sniprintf>
		OLED_ShowString(85, 36, (uint8_t*) &buf);
 8001e76:	f107 030c 	add.w	r3, r7, #12
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	2124      	movs	r1, #36	; 0x24
 8001e7e:	2055      	movs	r0, #85	; 0x55
 8001e80:	f7ff fe3c 	bl	8001afc <OLED_ShowString>

		OLED_Refresh_Gram();
 8001e84:	f7ff fbf0 	bl	8001668 <OLED_Refresh_Gram>

		self = !self;
 8001e88:	7dfb      	ldrb	r3, [r7, #23]
 8001e8a:	f083 0301 	eor.w	r3, r3, #1
 8001e8e:	75fb      	strb	r3, [r7, #23]
		memset((void*) &is_task_alive_struct, 0, sizeof(isTaskAlive_t));
 8001e90:	2204      	movs	r2, #4
 8001e92:	2100      	movs	r1, #0
 8001e94:	480b      	ldr	r0, [pc, #44]	; (8001ec4 <_ZN7Display8oledTaskEPv+0x24c>)
 8001e96:	f00f faff 	bl	8011498 <memset>
		osDelay(250);
 8001e9a:	20fa      	movs	r0, #250	; 0xfa
 8001e9c:	f00b f804 	bl	800cea8 <osDelay>
		OLED_DrawRectWithFill(47, 17, 50, 20, self);
 8001ea0:	e74c      	b.n	8001d3c <_ZN7Display8oledTaskEPv+0xc4>
 8001ea2:	bf00      	nop
 8001ea4:	08014488 	.word	0x08014488
 8001ea8:	08014490 	.word	0x08014490
 8001eac:	08014498 	.word	0x08014498
 8001eb0:	080144a0 	.word	0x080144a0
 8001eb4:	080144a8 	.word	0x080144a8
 8001eb8:	080144b0 	.word	0x080144b0
 8001ebc:	080144b4 	.word	0x080144b4
 8001ec0:	080144bc 	.word	0x080144bc
 8001ec4:	200006a0 	.word	0x200006a0
 8001ec8:	20000668 	.word	0x20000668
 8001ecc:	080144c0 	.word	0x080144c0
 8001ed0:	080144c8 	.word	0x080144c8
 8001ed4:	080144d0 	.word	0x080144d0
 8001ed8:	080144d4 	.word	0x080144d4
 8001edc:	080144e4 	.word	0x080144e4

08001ee0 <_ZN9AppParser9Processor19signalNoObstructionEv>:
	~Processor( void );
	u_ctx *this_ctx; // context of this process
	u_ctx *o_ctx; // context of the other process, i.e. the motion controller.
	static void processorTask(void *pv);
	static void signalObstruction(void) { _signal_obstr = true; }
	static void signalNoObstruction(void) { _signal_obstr = false; _obstr_txed = false; }
 8001ee0:	b480      	push	{r7}
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	4b05      	ldr	r3, [pc, #20]	; (8001efc <_ZN9AppParser9Processor19signalNoObstructionEv+0x1c>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	701a      	strb	r2, [r3, #0]
 8001eea:	4b05      	ldr	r3, [pc, #20]	; (8001f00 <_ZN9AppParser9Processor19signalNoObstructionEv+0x20>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	701a      	strb	r2, [r3, #0]
 8001ef0:	bf00      	nop
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr
 8001efa:	bf00      	nop
 8001efc:	2000085c 	.word	0x2000085c
 8001f00:	2000085d 	.word	0x2000085d

08001f04 <_ZN9AppMotion16MotionControllerD1Ev>:
	void move(bool isFwd, uint32_t arg, uint32_t speed, bool isCrawl, bool nostop);
	void emergencyStop();
	void task2ScanAndRot(bool dir);
	void task2ScanAndReturn(bool dir);
	void task2PassObstOne(bool dir);
	~MotionController() {
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
	}
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	4618      	mov	r0, r3
 8001f10:	370c      	adds	r7, #12
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr
	...

08001f1c <HAL_GPIO_EXTI_Callback>:

sensorData_t sensor_data; // public variables shared across all files.
isTaskAlive_t is_task_alive_struct = { 0 };
bool test_run = false;
void irTask(void *pv);
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001f1c:	b480      	push	{r7}
 8001f1e:	b083      	sub	sp, #12
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	4603      	mov	r3, r0
 8001f24:	80fb      	strh	r3, [r7, #6]
	test_run = true;
 8001f26:	4b04      	ldr	r3, [pc, #16]	; (8001f38 <HAL_GPIO_EXTI_Callback+0x1c>)
 8001f28:	2201      	movs	r2, #1
 8001f2a:	701a      	strb	r2, [r3, #0]
}
 8001f2c:	bf00      	nop
 8001f2e:	370c      	adds	r7, #12
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr
 8001f38:	200006a4 	.word	0x200006a4

08001f3c <HAL_UART_RxCpltCallback>:
AppMotion::MotionController controller(&ctrlCtx);
AppParser::Processor processor(&procCtx, &ctrlCtx);
AppParser::Listener listener(&procCtx);
/*****************************************************************************************/

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b082      	sub	sp, #8
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
	//__HAL_UART_CLEAR_OREFLAG(&huart3);
	if (huart == &huart3) {
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	4a05      	ldr	r2, [pc, #20]	; (8001f5c <HAL_UART_RxCpltCallback+0x20>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d102      	bne.n	8001f52 <HAL_UART_RxCpltCallback+0x16>
		listener.invoke();
 8001f4c:	4804      	ldr	r0, [pc, #16]	; (8001f60 <HAL_UART_RxCpltCallback+0x24>)
 8001f4e:	f002 ffed 	bl	8004f2c <_ZN9AppParser8Listener6invokeEv>
	}
}
 8001f52:	bf00      	nop
 8001f54:	3708      	adds	r7, #8
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	20000ad8 	.word	0x20000ad8
 8001f60:	20000820 	.word	0x20000820

08001f64 <initializeCPPconstructs>:

/*
 * This function initializes the C++ stuff, called from within main() context.
 */
void initializeCPPconstructs(void) {
 8001f64:	b580      	push	{r7, lr}
 8001f66:	af00      	add	r7, sp, #0

	sensor_data.is_allow_motor_override = true;
 8001f68:	4b10      	ldr	r3, [pc, #64]	; (8001fac <initializeCPPconstructs+0x48>)
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	sensor_data.ir_dist_th_L = 10.0f;
 8001f70:	4b0e      	ldr	r3, [pc, #56]	; (8001fac <initializeCPPconstructs+0x48>)
 8001f72:	4a0f      	ldr	r2, [pc, #60]	; (8001fb0 <initializeCPPconstructs+0x4c>)
 8001f74:	62da      	str	r2, [r3, #44]	; 0x2c
	sensor_data.ir_dist_th_R = 10.0f;
 8001f76:	4b0d      	ldr	r3, [pc, #52]	; (8001fac <initializeCPPconstructs+0x48>)
 8001f78:	4a0d      	ldr	r2, [pc, #52]	; (8001fb0 <initializeCPPconstructs+0x4c>)
 8001f7a:	631a      	str	r2, [r3, #48]	; 0x30
	//procTaskHandle = osThreadNew(processorTask, NULL, &procTask_attr);

	processor.start();
 8001f7c:	480d      	ldr	r0, [pc, #52]	; (8001fb4 <initializeCPPconstructs+0x50>)
 8001f7e:	f003 f821 	bl	8004fc4 <_ZN9AppParser9Processor5startEv>
	//osThreadNew((osThreadFunc_t)&controller.motionTask,
	//&ctrlCtx,
	// &(ctrlCtx.attr));
	controller.start();
 8001f82:	480d      	ldr	r0, [pc, #52]	; (8001fb8 <initializeCPPconstructs+0x54>)
 8001f84:	f000 fe6a 	bl	8002c5c <_ZN9AppMotion16MotionController5startEv>
	//htim1.Instance->CCR1 = 153;
	oledTaskHandle = osThreadNew(Display::oledTask, NULL, &oledTask_attr);
 8001f88:	4a0c      	ldr	r2, [pc, #48]	; (8001fbc <initializeCPPconstructs+0x58>)
 8001f8a:	2100      	movs	r1, #0
 8001f8c:	480c      	ldr	r0, [pc, #48]	; (8001fc0 <initializeCPPconstructs+0x5c>)
 8001f8e:	f00a fed7 	bl	800cd40 <osThreadNew>
 8001f92:	4603      	mov	r3, r0
 8001f94:	4a0b      	ldr	r2, [pc, #44]	; (8001fc4 <initializeCPPconstructs+0x60>)
 8001f96:	6013      	str	r3, [r2, #0]
	irTaskHandle = osThreadNew(irTask, NULL, &irTask_attr);
 8001f98:	4a0b      	ldr	r2, [pc, #44]	; (8001fc8 <initializeCPPconstructs+0x64>)
 8001f9a:	2100      	movs	r1, #0
 8001f9c:	480b      	ldr	r0, [pc, #44]	; (8001fcc <initializeCPPconstructs+0x68>)
 8001f9e:	f00a fecf 	bl	800cd40 <osThreadNew>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	4a0a      	ldr	r2, [pc, #40]	; (8001fd0 <initializeCPPconstructs+0x6c>)
 8001fa6:	6013      	str	r3, [r2, #0]
}
 8001fa8:	bf00      	nop
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	20000668 	.word	0x20000668
 8001fb0:	41200000 	.word	0x41200000
 8001fb4:	20000818 	.word	0x20000818
 8001fb8:	200006bc 	.word	0x200006bc
 8001fbc:	08015060 	.word	0x08015060
 8001fc0:	08001c79 	.word	0x08001c79
 8001fc4:	200006b0 	.word	0x200006b0
 8001fc8:	08015084 	.word	0x08015084
 8001fcc:	08001fd9 	.word	0x08001fd9
 8001fd0:	200006b4 	.word	0x200006b4
 8001fd4:	00000000 	.word	0x00000000

08001fd8 <_Z6irTaskPv>:
float irBufferL[BUFFER_SIZE]; // Buffer for left IR sensor
float irBufferR[BUFFER_SIZE]; // Buffer for right IR sensor
int bufferIndex = 0;          // Current index in the buffer
float ir_distL_Avg = 0;       // Average distance for left IR sensor
float ir_distR_Avg = 0;       // Average distance for right IR sensor
void irTask(void *pv) {
 8001fd8:	b590      	push	{r4, r7, lr}
 8001fda:	b089      	sub	sp, #36	; 0x24
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
	for (;;) {
		osDelay(5);
 8001fe0:	2005      	movs	r0, #5
 8001fe2:	f00a ff61 	bl	800cea8 <osDelay>
		HAL_ADC_Start(&hadc1);
 8001fe6:	4882      	ldr	r0, [pc, #520]	; (80021f0 <_Z6irTaskPv+0x218>)
 8001fe8:	f005 f8f6 	bl	80071d8 <HAL_ADC_Start>
		HAL_ADC_Start(&hadc2);
 8001fec:	4881      	ldr	r0, [pc, #516]	; (80021f4 <_Z6irTaskPv+0x21c>)
 8001fee:	f005 f8f3 	bl	80071d8 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, 1); // trivial waiting time, dont bother with dma or whatever
 8001ff2:	2101      	movs	r1, #1
 8001ff4:	487e      	ldr	r0, [pc, #504]	; (80021f0 <_Z6irTaskPv+0x218>)
 8001ff6:	f005 f9f4 	bl	80073e2 <HAL_ADC_PollForConversion>
		uint32_t IR = HAL_ADC_GetValue(&hadc1);
 8001ffa:	487d      	ldr	r0, [pc, #500]	; (80021f0 <_Z6irTaskPv+0x218>)
 8001ffc:	f005 fa7c 	bl	80074f8 <HAL_ADC_GetValue>
 8002000:	6138      	str	r0, [r7, #16]
		HAL_ADC_PollForConversion(&hadc2, 1); // trivial waiting time, dont bother with dma or whatever
 8002002:	2101      	movs	r1, #1
 8002004:	487b      	ldr	r0, [pc, #492]	; (80021f4 <_Z6irTaskPv+0x21c>)
 8002006:	f005 f9ec 	bl	80073e2 <HAL_ADC_PollForConversion>
		uint32_t IR2 = HAL_ADC_GetValue(&hadc2);
 800200a:	487a      	ldr	r0, [pc, #488]	; (80021f4 <_Z6irTaskPv+0x21c>)
 800200c:	f005 fa74 	bl	80074f8 <HAL_ADC_GetValue>
 8002010:	60f8      	str	r0, [r7, #12]
		HAL_ADC_Stop(&hadc1);
 8002012:	4877      	ldr	r0, [pc, #476]	; (80021f0 <_Z6irTaskPv+0x218>)
 8002014:	f005 f9b2 	bl	800737c <HAL_ADC_Stop>
		HAL_ADC_Stop(&hadc2);
 8002018:	4876      	ldr	r0, [pc, #472]	; (80021f4 <_Z6irTaskPv+0x21c>)
 800201a:	f005 f9af 	bl	800737c <HAL_ADC_Stop>
		float volt = (float) (IR * 5) / 4095;
 800201e:	693a      	ldr	r2, [r7, #16]
 8002020:	4613      	mov	r3, r2
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	4413      	add	r3, r2
 8002026:	ee07 3a90 	vmov	s15, r3
 800202a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800202e:	eddf 6a72 	vldr	s13, [pc, #456]	; 80021f8 <_Z6irTaskPv+0x220>
 8002032:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002036:	edc7 7a02 	vstr	s15, [r7, #8]
		irBufferL[bufferIndex] = roundf(29.988 * pow(volt, -1.173));
 800203a:	68b8      	ldr	r0, [r7, #8]
 800203c:	f7fe fa84 	bl	8000548 <__aeabi_f2d>
 8002040:	4602      	mov	r2, r0
 8002042:	460b      	mov	r3, r1
 8002044:	ed9f 1b66 	vldr	d1, [pc, #408]	; 80021e0 <_Z6irTaskPv+0x208>
 8002048:	ec43 2b10 	vmov	d0, r2, r3
 800204c:	f00d fe24 	bl	800fc98 <pow>
 8002050:	ec51 0b10 	vmov	r0, r1, d0
 8002054:	a364      	add	r3, pc, #400	; (adr r3, 80021e8 <_Z6irTaskPv+0x210>)
 8002056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800205a:	f7fe facd 	bl	80005f8 <__aeabi_dmul>
 800205e:	4602      	mov	r2, r0
 8002060:	460b      	mov	r3, r1
 8002062:	4610      	mov	r0, r2
 8002064:	4619      	mov	r1, r3
 8002066:	f7fe fdbf 	bl	8000be8 <__aeabi_d2f>
 800206a:	4602      	mov	r2, r0
 800206c:	4b63      	ldr	r3, [pc, #396]	; (80021fc <_Z6irTaskPv+0x224>)
 800206e:	681c      	ldr	r4, [r3, #0]
 8002070:	ee00 2a10 	vmov	s0, r2
 8002074:	f00d fdbc 	bl	800fbf0 <roundf>
 8002078:	eef0 7a40 	vmov.f32	s15, s0
 800207c:	4a60      	ldr	r2, [pc, #384]	; (8002200 <_Z6irTaskPv+0x228>)
 800207e:	00a3      	lsls	r3, r4, #2
 8002080:	4413      	add	r3, r2
 8002082:	edc3 7a00 	vstr	s15, [r3]
		volt = (float) (IR2 * 5) / 4095;
 8002086:	68fa      	ldr	r2, [r7, #12]
 8002088:	4613      	mov	r3, r2
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	4413      	add	r3, r2
 800208e:	ee07 3a90 	vmov	s15, r3
 8002092:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002096:	eddf 6a58 	vldr	s13, [pc, #352]	; 80021f8 <_Z6irTaskPv+0x220>
 800209a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800209e:	edc7 7a02 	vstr	s15, [r7, #8]
		irBufferR[bufferIndex] = roundf(29.988 * pow(volt, -1.173));
 80020a2:	68b8      	ldr	r0, [r7, #8]
 80020a4:	f7fe fa50 	bl	8000548 <__aeabi_f2d>
 80020a8:	4602      	mov	r2, r0
 80020aa:	460b      	mov	r3, r1
 80020ac:	ed9f 1b4c 	vldr	d1, [pc, #304]	; 80021e0 <_Z6irTaskPv+0x208>
 80020b0:	ec43 2b10 	vmov	d0, r2, r3
 80020b4:	f00d fdf0 	bl	800fc98 <pow>
 80020b8:	ec51 0b10 	vmov	r0, r1, d0
 80020bc:	a34a      	add	r3, pc, #296	; (adr r3, 80021e8 <_Z6irTaskPv+0x210>)
 80020be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020c2:	f7fe fa99 	bl	80005f8 <__aeabi_dmul>
 80020c6:	4602      	mov	r2, r0
 80020c8:	460b      	mov	r3, r1
 80020ca:	4610      	mov	r0, r2
 80020cc:	4619      	mov	r1, r3
 80020ce:	f7fe fd8b 	bl	8000be8 <__aeabi_d2f>
 80020d2:	4602      	mov	r2, r0
 80020d4:	4b49      	ldr	r3, [pc, #292]	; (80021fc <_Z6irTaskPv+0x224>)
 80020d6:	681c      	ldr	r4, [r3, #0]
 80020d8:	ee00 2a10 	vmov	s0, r2
 80020dc:	f00d fd88 	bl	800fbf0 <roundf>
 80020e0:	eef0 7a40 	vmov.f32	s15, s0
 80020e4:	4a47      	ldr	r2, [pc, #284]	; (8002204 <_Z6irTaskPv+0x22c>)
 80020e6:	00a3      	lsls	r3, r4, #2
 80020e8:	4413      	add	r3, r2
 80020ea:	edc3 7a00 	vstr	s15, [r3]


        float sumL = 0, sumR = 0;
 80020ee:	f04f 0300 	mov.w	r3, #0
 80020f2:	61fb      	str	r3, [r7, #28]
 80020f4:	f04f 0300 	mov.w	r3, #0
 80020f8:	61bb      	str	r3, [r7, #24]
        for (int i = 0; i < BUFFER_SIZE; i++) {
 80020fa:	2300      	movs	r3, #0
 80020fc:	617b      	str	r3, [r7, #20]
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	2b03      	cmp	r3, #3
 8002102:	dc1b      	bgt.n	800213c <_Z6irTaskPv+0x164>
            sumL += irBufferL[i];
 8002104:	4a3e      	ldr	r2, [pc, #248]	; (8002200 <_Z6irTaskPv+0x228>)
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	009b      	lsls	r3, r3, #2
 800210a:	4413      	add	r3, r2
 800210c:	edd3 7a00 	vldr	s15, [r3]
 8002110:	ed97 7a07 	vldr	s14, [r7, #28]
 8002114:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002118:	edc7 7a07 	vstr	s15, [r7, #28]
            sumR += irBufferR[i];
 800211c:	4a39      	ldr	r2, [pc, #228]	; (8002204 <_Z6irTaskPv+0x22c>)
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	009b      	lsls	r3, r3, #2
 8002122:	4413      	add	r3, r2
 8002124:	edd3 7a00 	vldr	s15, [r3]
 8002128:	ed97 7a06 	vldr	s14, [r7, #24]
 800212c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002130:	edc7 7a06 	vstr	s15, [r7, #24]
        for (int i = 0; i < BUFFER_SIZE; i++) {
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	3301      	adds	r3, #1
 8002138:	617b      	str	r3, [r7, #20]
 800213a:	e7e0      	b.n	80020fe <_Z6irTaskPv+0x126>
        }
        ir_distL_Avg = sumL / BUFFER_SIZE;
 800213c:	ed97 7a07 	vldr	s14, [r7, #28]
 8002140:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8002144:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002148:	4b2f      	ldr	r3, [pc, #188]	; (8002208 <_Z6irTaskPv+0x230>)
 800214a:	edc3 7a00 	vstr	s15, [r3]
        ir_distR_Avg = sumR / BUFFER_SIZE;
 800214e:	ed97 7a06 	vldr	s14, [r7, #24]
 8002152:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8002156:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800215a:	4b2c      	ldr	r3, [pc, #176]	; (800220c <_Z6irTaskPv+0x234>)
 800215c:	edc3 7a00 	vstr	s15, [r3]

        bufferIndex = (bufferIndex + 1) % BUFFER_SIZE; // Update buffer index
 8002160:	4b26      	ldr	r3, [pc, #152]	; (80021fc <_Z6irTaskPv+0x224>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	3301      	adds	r3, #1
 8002166:	425a      	negs	r2, r3
 8002168:	f003 0303 	and.w	r3, r3, #3
 800216c:	f002 0203 	and.w	r2, r2, #3
 8002170:	bf58      	it	pl
 8002172:	4253      	negpl	r3, r2
 8002174:	4a21      	ldr	r2, [pc, #132]	; (80021fc <_Z6irTaskPv+0x224>)
 8002176:	6013      	str	r3, [r2, #0]
        sensor_data.ir_distL = ir_distL_Avg;
 8002178:	4b23      	ldr	r3, [pc, #140]	; (8002208 <_Z6irTaskPv+0x230>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a24      	ldr	r2, [pc, #144]	; (8002210 <_Z6irTaskPv+0x238>)
 800217e:	6053      	str	r3, [r2, #4]
        sensor_data.ir_distR = ir_distR_Avg;
 8002180:	4b22      	ldr	r3, [pc, #136]	; (800220c <_Z6irTaskPv+0x234>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a22      	ldr	r2, [pc, #136]	; (8002210 <_Z6irTaskPv+0x238>)
 8002186:	6093      	str	r3, [r2, #8]
		if (sensor_data.is_allow_motor_override) {
 8002188:	4b21      	ldr	r3, [pc, #132]	; (8002210 <_Z6irTaskPv+0x238>)
 800218a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800218e:	2b00      	cmp	r3, #0
 8002190:	f43f af26 	beq.w	8001fe0 <_Z6irTaskPv+0x8>
			if (sensor_data.ir_distL < sensor_data.ir_dist_th_L
 8002194:	4b1e      	ldr	r3, [pc, #120]	; (8002210 <_Z6irTaskPv+0x238>)
 8002196:	ed93 7a01 	vldr	s14, [r3, #4]
 800219a:	4b1d      	ldr	r3, [pc, #116]	; (8002210 <_Z6irTaskPv+0x238>)
 800219c:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80021a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80021a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021a8:	d40a      	bmi.n	80021c0 <_Z6irTaskPv+0x1e8>
					|| sensor_data.ir_distR < sensor_data.ir_dist_th_R) {
 80021aa:	4b19      	ldr	r3, [pc, #100]	; (8002210 <_Z6irTaskPv+0x238>)
 80021ac:	ed93 7a02 	vldr	s14, [r3, #8]
 80021b0:	4b17      	ldr	r3, [pc, #92]	; (8002210 <_Z6irTaskPv+0x238>)
 80021b2:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80021b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80021ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021be:	d505      	bpl.n	80021cc <_Z6irTaskPv+0x1f4>
				//controller.emergencyStop();
				//processor.signalObstruction();
				HAL_GPIO_WritePin(Collision_Ind_Port, Collision_Ind_Pin,
 80021c0:	2201      	movs	r2, #1
 80021c2:	2110      	movs	r1, #16
 80021c4:	4813      	ldr	r0, [pc, #76]	; (8002214 <_Z6irTaskPv+0x23c>)
 80021c6:	f006 fa43 	bl	8008650 <HAL_GPIO_WritePin>
 80021ca:	e006      	b.n	80021da <_Z6irTaskPv+0x202>
						GPIO_PIN_SET);
			} else {
				processor.signalNoObstruction(); // to prevent repeated tx
 80021cc:	f7ff fe88 	bl	8001ee0 <_ZN9AppParser9Processor19signalNoObstructionEv>
				HAL_GPIO_WritePin(Collision_Ind_Port, Collision_Ind_Pin,
 80021d0:	2200      	movs	r2, #0
 80021d2:	2110      	movs	r1, #16
 80021d4:	480f      	ldr	r0, [pc, #60]	; (8002214 <_Z6irTaskPv+0x23c>)
 80021d6:	f006 fa3b 	bl	8008650 <HAL_GPIO_WritePin>
						GPIO_PIN_RESET);
			}
		}
	}
 80021da:	e701      	b.n	8001fe0 <_Z6irTaskPv+0x8>
 80021dc:	f3af 8000 	nop.w
 80021e0:	a5e353f8 	.word	0xa5e353f8
 80021e4:	bff2c49b 	.word	0xbff2c49b
 80021e8:	916872b0 	.word	0x916872b0
 80021ec:	403dfced 	.word	0x403dfced
 80021f0:	200008d4 	.word	0x200008d4
 80021f4:	2000091c 	.word	0x2000091c
 80021f8:	457ff000 	.word	0x457ff000
 80021fc:	20000844 	.word	0x20000844
 8002200:	20000824 	.word	0x20000824
 8002204:	20000834 	.word	0x20000834
 8002208:	20000848 	.word	0x20000848
 800220c:	2000084c 	.word	0x2000084c
 8002210:	20000668 	.word	0x20000668
 8002214:	40020c00 	.word	0x40020c00

08002218 <sensorTask>:
}
float SEq_1 = 1.0f, SEq_2 = 0.0f, SEq_3 = 0.0f, SEq_4 = 0.0f; // estimated orientation quaternion elements with initial conditions
void sensorTask(void *pv) {
 8002218:	b5b0      	push	{r4, r5, r7, lr}
 800221a:	ed2d 8b06 	vpush	{d8-d10}
 800221e:	b0a0      	sub	sp, #128	; 0x80
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]

	IMU_Initialise(&imu, &hi2c1);
 8002224:	498a      	ldr	r1, [pc, #552]	; (8002450 <sensorTask+0x238>)
 8002226:	488b      	ldr	r0, [pc, #556]	; (8002454 <sensorTask+0x23c>)
 8002228:	f7fe feb0 	bl	8000f8c <IMU_Initialise>

	osDelay(400);
 800222c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002230:	f00a fe3a 	bl	800cea8 <osDelay>
	Gyro_calibrate(&imu);
 8002234:	4887      	ldr	r0, [pc, #540]	; (8002454 <sensorTask+0x23c>)
 8002236:	f7ff f895 	bl	8001364 <Gyro_calibrate>
	Mag_init(&imu);
 800223a:	4886      	ldr	r0, [pc, #536]	; (8002454 <sensorTask+0x23c>)
 800223c:	f7ff fa04 	bl	8001648 <Mag_init>

	sensor_data.imu = &imu;
 8002240:	4b85      	ldr	r3, [pc, #532]	; (8002458 <sensorTask+0x240>)
 8002242:	4a84      	ldr	r2, [pc, #528]	; (8002454 <sensorTask+0x23c>)
 8002244:	601a      	str	r2, [r3, #0]

	/**I2C scanner for debug purposes **/
	printf("Scanning I2C bus:\r\n");
 8002246:	4885      	ldr	r0, [pc, #532]	; (800245c <sensorTask+0x244>)
 8002248:	f00f ff14 	bl	8012074 <puts>
	HAL_StatusTypeDef result;
	uint8_t i;
	for (i = 1; i < 128; i++) {
 800224c:	2301      	movs	r3, #1
 800224e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002252:	f997 307f 	ldrsb.w	r3, [r7, #127]	; 0x7f
 8002256:	2b00      	cmp	r3, #0
 8002258:	db23      	blt.n	80022a2 <sensorTask+0x8a>
		 * &hi2c1 is the handle
		 * (uint16_t)(i<<1) is the i2c address left aligned
		 * retries 2
		 * timeout 2
		 */
		result = HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t) (i << 1), 2, 2);
 800225a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800225e:	b29b      	uxth	r3, r3
 8002260:	005b      	lsls	r3, r3, #1
 8002262:	b299      	uxth	r1, r3
 8002264:	2302      	movs	r3, #2
 8002266:	2202      	movs	r2, #2
 8002268:	4879      	ldr	r0, [pc, #484]	; (8002450 <sensorTask+0x238>)
 800226a:	f006 fea1 	bl	8008fb0 <HAL_I2C_IsDeviceReady>
 800226e:	4603      	mov	r3, r0
 8002270:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (result != HAL_OK) // HAL_ERROR or HAL_BUSY or HAL_TIMEOUT
 8002274:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8002278:	2b00      	cmp	r3, #0
 800227a:	d002      	beq.n	8002282 <sensorTask+0x6a>
				{
			printf("."); // No ACK received at that address
 800227c:	202e      	movs	r0, #46	; 0x2e
 800227e:	f00f fe75 	bl	8011f6c <putchar>
		}
		if (result == HAL_OK) {
 8002282:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8002286:	2b00      	cmp	r3, #0
 8002288:	d105      	bne.n	8002296 <sensorTask+0x7e>
			printf("0x%X", i); // Received an ACK at that address
 800228a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800228e:	4619      	mov	r1, r3
 8002290:	4873      	ldr	r0, [pc, #460]	; (8002460 <sensorTask+0x248>)
 8002292:	f00f fe53 	bl	8011f3c <iprintf>
	for (i = 1; i < 128; i++) {
 8002296:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800229a:	3301      	adds	r3, #1
 800229c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80022a0:	e7d7      	b.n	8002252 <sensorTask+0x3a>
		}
	}
	printf("\r\n");
 80022a2:	4870      	ldr	r0, [pc, #448]	; (8002464 <sensorTask+0x24c>)
 80022a4:	f00f fee6 	bl	8012074 <puts>

	char sbuf[100] = { 0 };
 80022a8:	2300      	movs	r3, #0
 80022aa:	60fb      	str	r3, [r7, #12]
 80022ac:	f107 0310 	add.w	r3, r7, #16
 80022b0:	2260      	movs	r2, #96	; 0x60
 80022b2:	2100      	movs	r1, #0
 80022b4:	4618      	mov	r0, r3
 80022b6:	f00f f8ef 	bl	8011498 <memset>

	uint32_t timeNow = HAL_GetTick();
 80022ba:	f004 ff19 	bl	80070f0 <HAL_GetTick>
 80022be:	67b8      	str	r0, [r7, #120]	; 0x78

	float DEG2RAD = 0.017453292519943295769236907684886f;
 80022c0:	4b69      	ldr	r3, [pc, #420]	; (8002468 <sensorTask+0x250>)
 80022c2:	673b      	str	r3, [r7, #112]	; 0x70

	for (;;) {
		osDelay(80); // 281hz gyro
 80022c4:	2050      	movs	r0, #80	; 0x50
 80022c6:	f00a fdef 	bl	800cea8 <osDelay>
		osThreadYield();
 80022ca:	f00a fdcd 	bl	800ce68 <osThreadYield>

		IMU_AccelRead(&imu);
 80022ce:	4861      	ldr	r0, [pc, #388]	; (8002454 <sensorTask+0x23c>)
 80022d0:	f7fe ff70 	bl	80011b4 <IMU_AccelRead>
		IMU_GyroRead(&imu);
 80022d4:	485f      	ldr	r0, [pc, #380]	; (8002454 <sensorTask+0x23c>)
 80022d6:	f7ff f8ed 	bl	80014b4 <IMU_GyroRead>
		//Mag_read(&imu);

		quaternionUpdate(imu.gyro[0] * DEG2RAD, imu.gyro[1] * DEG2RAD,
 80022da:	4b5e      	ldr	r3, [pc, #376]	; (8002454 <sensorTask+0x23c>)
 80022dc:	ed93 7a04 	vldr	s14, [r3, #16]
 80022e0:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 80022e4:	ee27 8a27 	vmul.f32	s16, s14, s15
 80022e8:	4b5a      	ldr	r3, [pc, #360]	; (8002454 <sensorTask+0x23c>)
 80022ea:	ed93 7a05 	vldr	s14, [r3, #20]
 80022ee:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 80022f2:	ee67 8a27 	vmul.f32	s17, s14, s15
				imu.gyro[2] * DEG2RAD, imu.acc[0], imu.acc[1], imu.acc[2],
 80022f6:	4b57      	ldr	r3, [pc, #348]	; (8002454 <sensorTask+0x23c>)
 80022f8:	ed93 7a06 	vldr	s14, [r3, #24]
		quaternionUpdate(imu.gyro[0] * DEG2RAD, imu.gyro[1] * DEG2RAD,
 80022fc:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8002300:	ee27 9a27 	vmul.f32	s18, s14, s15
 8002304:	4b53      	ldr	r3, [pc, #332]	; (8002454 <sensorTask+0x23c>)
 8002306:	edd3 9a01 	vldr	s19, [r3, #4]
 800230a:	4b52      	ldr	r3, [pc, #328]	; (8002454 <sensorTask+0x23c>)
 800230c:	ed93 aa02 	vldr	s20, [r3, #8]
 8002310:	4b50      	ldr	r3, [pc, #320]	; (8002454 <sensorTask+0x23c>)
 8002312:	edd3 aa03 	vldr	s21, [r3, #12]
				(HAL_GetTick() - timeNow) * 0.001f);
 8002316:	f004 feeb 	bl	80070f0 <HAL_GetTick>
 800231a:	4602      	mov	r2, r0
 800231c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800231e:	1ad3      	subs	r3, r2, r3
		quaternionUpdate(imu.gyro[0] * DEG2RAD, imu.gyro[1] * DEG2RAD,
 8002320:	ee07 3a90 	vmov	s15, r3
 8002324:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002328:	ed9f 7a50 	vldr	s14, [pc, #320]	; 800246c <sensorTask+0x254>
 800232c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002330:	eeb0 3a67 	vmov.f32	s6, s15
 8002334:	eef0 2a6a 	vmov.f32	s5, s21
 8002338:	eeb0 2a4a 	vmov.f32	s4, s20
 800233c:	eef0 1a69 	vmov.f32	s3, s19
 8002340:	eeb0 1a49 	vmov.f32	s2, s18
 8002344:	eef0 0a68 	vmov.f32	s1, s17
 8002348:	eeb0 0a48 	vmov.f32	s0, s16
 800234c:	f000 f8a4 	bl	8002498 <quaternionUpdate>
		timeNow = HAL_GetTick();
 8002350:	f004 fece 	bl	80070f0 <HAL_GetTick>
 8002354:	67b8      	str	r0, [r7, #120]	; 0x78

		imu.q[0] = SEq_1;
 8002356:	4b46      	ldr	r3, [pc, #280]	; (8002470 <sensorTask+0x258>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a3e      	ldr	r2, [pc, #248]	; (8002454 <sensorTask+0x23c>)
 800235c:	6593      	str	r3, [r2, #88]	; 0x58
		imu.q[1] = SEq_2;
 800235e:	4b45      	ldr	r3, [pc, #276]	; (8002474 <sensorTask+0x25c>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a3c      	ldr	r2, [pc, #240]	; (8002454 <sensorTask+0x23c>)
 8002364:	65d3      	str	r3, [r2, #92]	; 0x5c
		imu.q[2] = SEq_3;
 8002366:	4b44      	ldr	r3, [pc, #272]	; (8002478 <sensorTask+0x260>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a3a      	ldr	r2, [pc, #232]	; (8002454 <sensorTask+0x23c>)
 800236c:	6613      	str	r3, [r2, #96]	; 0x60
		imu.q[3] = SEq_4;
 800236e:	4b43      	ldr	r3, [pc, #268]	; (800247c <sensorTask+0x264>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a38      	ldr	r2, [pc, #224]	; (8002454 <sensorTask+0x23c>)
 8002374:	6653      	str	r3, [r2, #100]	; 0x64

		sensor_data.yaw_abs_prev = sensor_data.yaw_abs;
 8002376:	4b38      	ldr	r3, [pc, #224]	; (8002458 <sensorTask+0x240>)
 8002378:	691b      	ldr	r3, [r3, #16]
 800237a:	4a37      	ldr	r2, [pc, #220]	; (8002458 <sensorTask+0x240>)
 800237c:	6153      	str	r3, [r2, #20]
		sensor_data.yaw_abs = atan2(
				2.0f * (imu.q[1] * imu.q[2] + imu.q[0] * imu.q[3]),
 800237e:	4b35      	ldr	r3, [pc, #212]	; (8002454 <sensorTask+0x23c>)
 8002380:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 8002384:	4b33      	ldr	r3, [pc, #204]	; (8002454 <sensorTask+0x23c>)
 8002386:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 800238a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800238e:	4b31      	ldr	r3, [pc, #196]	; (8002454 <sensorTask+0x23c>)
 8002390:	edd3 6a16 	vldr	s13, [r3, #88]	; 0x58
 8002394:	4b2f      	ldr	r3, [pc, #188]	; (8002454 <sensorTask+0x23c>)
 8002396:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 800239a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800239e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023a2:	ee77 7aa7 	vadd.f32	s15, s15, s15
		sensor_data.yaw_abs = atan2(
 80023a6:	ee17 0a90 	vmov	r0, s15
 80023aa:	f7fe f8cd 	bl	8000548 <__aeabi_f2d>
 80023ae:	4604      	mov	r4, r0
 80023b0:	460d      	mov	r5, r1
				imu.q[0] * imu.q[0] + imu.q[1] * imu.q[1] - imu.q[2] * imu.q[2]
 80023b2:	4b28      	ldr	r3, [pc, #160]	; (8002454 <sensorTask+0x23c>)
 80023b4:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 80023b8:	4b26      	ldr	r3, [pc, #152]	; (8002454 <sensorTask+0x23c>)
 80023ba:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 80023be:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023c2:	4b24      	ldr	r3, [pc, #144]	; (8002454 <sensorTask+0x23c>)
 80023c4:	edd3 6a17 	vldr	s13, [r3, #92]	; 0x5c
 80023c8:	4b22      	ldr	r3, [pc, #136]	; (8002454 <sensorTask+0x23c>)
 80023ca:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 80023ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023d2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80023d6:	4b1f      	ldr	r3, [pc, #124]	; (8002454 <sensorTask+0x23c>)
 80023d8:	edd3 6a18 	vldr	s13, [r3, #96]	; 0x60
 80023dc:	4b1d      	ldr	r3, [pc, #116]	; (8002454 <sensorTask+0x23c>)
 80023de:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 80023e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023e6:	ee37 7a67 	vsub.f32	s14, s14, s15
						- imu.q[3] * imu.q[3])
 80023ea:	4b1a      	ldr	r3, [pc, #104]	; (8002454 <sensorTask+0x23c>)
 80023ec:	edd3 6a19 	vldr	s13, [r3, #100]	; 0x64
 80023f0:	4b18      	ldr	r3, [pc, #96]	; (8002454 <sensorTask+0x23c>)
 80023f2:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 80023f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023fa:	ee77 7a67 	vsub.f32	s15, s14, s15
		sensor_data.yaw_abs = atan2(
 80023fe:	ee17 0a90 	vmov	r0, s15
 8002402:	f7fe f8a1 	bl	8000548 <__aeabi_f2d>
 8002406:	4602      	mov	r2, r0
 8002408:	460b      	mov	r3, r1
 800240a:	ec43 2b11 	vmov	d1, r2, r3
 800240e:	ec45 4b10 	vmov	d0, r4, r5
 8002412:	f00d fc11 	bl	800fc38 <atan2>
 8002416:	ec51 0b10 	vmov	r0, r1, d0
				* 57.295779513082320876798154814105f;
 800241a:	a30b      	add	r3, pc, #44	; (adr r3, 8002448 <sensorTask+0x230>)
 800241c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002420:	f7fe f8ea 	bl	80005f8 <__aeabi_dmul>
 8002424:	4602      	mov	r2, r0
 8002426:	460b      	mov	r3, r1
 8002428:	4610      	mov	r0, r2
 800242a:	4619      	mov	r1, r3
 800242c:	f7fe fbdc 	bl	8000be8 <__aeabi_d2f>
 8002430:	4603      	mov	r3, r0
		sensor_data.yaw_abs = atan2(
 8002432:	4a09      	ldr	r2, [pc, #36]	; (8002458 <sensorTask+0x240>)
 8002434:	6113      	str	r3, [r2, #16]
		sensor_data.yaw_abs_time = timeNow; // note that this method runs the risk of overflow but its every 49 days.
 8002436:	4a08      	ldr	r2, [pc, #32]	; (8002458 <sensorTask+0x240>)
 8002438:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800243a:	6193      	str	r3, [r2, #24]
		 imu.acc[0], imu.acc[1], imu.acc[2], imu.gyro[0], imu.gyro[1],
		 imu.gyro[2], imu.q[0], sensor_data.yaw_abs, sensor_data.ir_distL);
		 */
		//HAL_UART_Transmit(&huart3, (uint8_t*) sbuf, len, 10);
		//	HAL_UART_Receive_IT(&huart3, (uint8_t*) aRxBuffer, 5);
		is_task_alive_struct.senr = true;
 800243c:	4b10      	ldr	r3, [pc, #64]	; (8002480 <sensorTask+0x268>)
 800243e:	2201      	movs	r2, #1
 8002440:	709a      	strb	r2, [r3, #2]
		osDelay(80); // 281hz gyro
 8002442:	e73f      	b.n	80022c4 <sensorTask+0xac>
 8002444:	f3af 8000 	nop.w
 8002448:	20000000 	.word	0x20000000
 800244c:	404ca5dc 	.word	0x404ca5dc
 8002450:	20000964 	.word	0x20000964
 8002454:	2000086c 	.word	0x2000086c
 8002458:	20000668 	.word	0x20000668
 800245c:	0801452c 	.word	0x0801452c
 8002460:	08014540 	.word	0x08014540
 8002464:	08014548 	.word	0x08014548
 8002468:	3c8efa35 	.word	0x3c8efa35
 800246c:	3a83126f 	.word	0x3a83126f
 8002470:	20000058 	.word	0x20000058
 8002474:	20000850 	.word	0x20000850
 8002478:	20000854 	.word	0x20000854
 800247c:	20000858 	.word	0x20000858
 8002480:	200006a0 	.word	0x200006a0

08002484 <_ext_sig_halt>:

	}
}

void _ext_sig_halt(void) {
 8002484:	b580      	push	{r7, lr}
 8002486:	af00      	add	r7, sp, #0
	controller.emergencyStop();
 8002488:	4802      	ldr	r0, [pc, #8]	; (8002494 <_ext_sig_halt+0x10>)
 800248a:	f001 fb7b 	bl	8003b84 <_ZN9AppMotion16MotionController13emergencyStopEv>
}
 800248e:	bf00      	nop
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	200006bc 	.word	0x200006bc

08002498 <quaternionUpdate>:

#define gyroMeasError 3.14159265358979f * (1.0f / 180.0f)
#define beta sqrt(3.0f / 4.0f) * gyroMeasError
void quaternionUpdate(float w_x, float w_y, float w_z, float a_x, float a_y,
		float a_z, float deltat) {
 8002498:	b5b0      	push	{r4, r5, r7, lr}
 800249a:	b0a2      	sub	sp, #136	; 0x88
 800249c:	af00      	add	r7, sp, #0
 800249e:	ed87 0a07 	vstr	s0, [r7, #28]
 80024a2:	edc7 0a06 	vstr	s1, [r7, #24]
 80024a6:	ed87 1a05 	vstr	s2, [r7, #20]
 80024aa:	edc7 1a04 	vstr	s3, [r7, #16]
 80024ae:	ed87 2a03 	vstr	s4, [r7, #12]
 80024b2:	edc7 2a02 	vstr	s5, [r7, #8]
 80024b6:	ed87 3a01 	vstr	s6, [r7, #4]
	float SEqDot_omega_1, SEqDot_omega_2, SEqDot_omega_3, SEqDot_omega_4; // quaternion derivative from gyroscopes elements
	float f_1, f_2, f_3;                          // objective function elements
	float J_11or24, J_12or23, J_13or22, J_14or21, J_32, J_33; // objective function Jacobian elements
	float SEqHatDot_1, SEqHatDot_2, SEqHatDot_3, SEqHatDot_4; // estimated direction of the gyro error

	float halfSEq_1 = 0.5f * SEq_1;
 80024ba:	4bf1      	ldr	r3, [pc, #964]	; (8002880 <quaternionUpdate+0x3e8>)
 80024bc:	edd3 7a00 	vldr	s15, [r3]
 80024c0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80024c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024c8:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
	float halfSEq_2 = 0.5f * SEq_2;
 80024cc:	4bed      	ldr	r3, [pc, #948]	; (8002884 <quaternionUpdate+0x3ec>)
 80024ce:	edd3 7a00 	vldr	s15, [r3]
 80024d2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80024d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024da:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
	float halfSEq_3 = 0.5f * SEq_3;
 80024de:	4bea      	ldr	r3, [pc, #936]	; (8002888 <quaternionUpdate+0x3f0>)
 80024e0:	edd3 7a00 	vldr	s15, [r3]
 80024e4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80024e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024ec:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
	float halfSEq_4 = 0.5f * SEq_4;
 80024f0:	4be6      	ldr	r3, [pc, #920]	; (800288c <quaternionUpdate+0x3f4>)
 80024f2:	edd3 7a00 	vldr	s15, [r3]
 80024f6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80024fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024fe:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
	float twoSEq_1 = 2.0f * SEq_1;
 8002502:	4bdf      	ldr	r3, [pc, #892]	; (8002880 <quaternionUpdate+0x3e8>)
 8002504:	edd3 7a00 	vldr	s15, [r3]
 8002508:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800250c:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
	float twoSEq_2 = 2.0f * SEq_2;
 8002510:	4bdc      	ldr	r3, [pc, #880]	; (8002884 <quaternionUpdate+0x3ec>)
 8002512:	edd3 7a00 	vldr	s15, [r3]
 8002516:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800251a:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
	float twoSEq_3 = 2.0f * SEq_3;
 800251e:	4bda      	ldr	r3, [pc, #872]	; (8002888 <quaternionUpdate+0x3f0>)
 8002520:	edd3 7a00 	vldr	s15, [r3]
 8002524:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002528:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c

	// Normalize the accelerometer measurement
	norm = sqrt(a_x * a_x + a_y * a_y + a_z * a_z);
 800252c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002530:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002534:	edd7 7a03 	vldr	s15, [r7, #12]
 8002538:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800253c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002540:	edd7 7a02 	vldr	s15, [r7, #8]
 8002544:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002548:	ee77 7a27 	vadd.f32	s15, s14, s15
 800254c:	ee17 0a90 	vmov	r0, s15
 8002550:	f7fd fffa 	bl	8000548 <__aeabi_f2d>
 8002554:	4602      	mov	r2, r0
 8002556:	460b      	mov	r3, r1
 8002558:	ec43 2b10 	vmov	d0, r2, r3
 800255c:	f00d fc0c 	bl	800fd78 <sqrt>
 8002560:	ec53 2b10 	vmov	r2, r3, d0
 8002564:	4610      	mov	r0, r2
 8002566:	4619      	mov	r1, r3
 8002568:	f7fe fb3e 	bl	8000be8 <__aeabi_d2f>
 800256c:	4603      	mov	r3, r0
 800256e:	66bb      	str	r3, [r7, #104]	; 0x68
	a_x /= norm;
 8002570:	edd7 6a04 	vldr	s13, [r7, #16]
 8002574:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 8002578:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800257c:	edc7 7a04 	vstr	s15, [r7, #16]
	a_y /= norm;
 8002580:	edd7 6a03 	vldr	s13, [r7, #12]
 8002584:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 8002588:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800258c:	edc7 7a03 	vstr	s15, [r7, #12]
	a_z /= norm;
 8002590:	edd7 6a02 	vldr	s13, [r7, #8]
 8002594:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 8002598:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800259c:	edc7 7a02 	vstr	s15, [r7, #8]

	// Compute the objective function and Jacobian
	f_1 = twoSEq_2 * SEq_4 - twoSEq_1 * SEq_3 - a_x;
 80025a0:	4bba      	ldr	r3, [pc, #744]	; (800288c <quaternionUpdate+0x3f4>)
 80025a2:	ed93 7a00 	vldr	s14, [r3]
 80025a6:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 80025aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80025ae:	4bb6      	ldr	r3, [pc, #728]	; (8002888 <quaternionUpdate+0x3f0>)
 80025b0:	edd3 6a00 	vldr	s13, [r3]
 80025b4:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80025b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025bc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80025c0:	edd7 7a04 	vldr	s15, [r7, #16]
 80025c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025c8:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
	f_2 = twoSEq_1 * SEq_2 + twoSEq_3 * SEq_4 - a_y;
 80025cc:	4bad      	ldr	r3, [pc, #692]	; (8002884 <quaternionUpdate+0x3ec>)
 80025ce:	ed93 7a00 	vldr	s14, [r3]
 80025d2:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80025d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80025da:	4bac      	ldr	r3, [pc, #688]	; (800288c <quaternionUpdate+0x3f4>)
 80025dc:	edd3 6a00 	vldr	s13, [r3]
 80025e0:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 80025e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025e8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80025ec:	edd7 7a03 	vldr	s15, [r7, #12]
 80025f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025f4:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
	f_3 = 1.0f - twoSEq_2 * SEq_2 - twoSEq_3 * SEq_3 - a_z;
 80025f8:	4ba2      	ldr	r3, [pc, #648]	; (8002884 <quaternionUpdate+0x3ec>)
 80025fa:	ed93 7a00 	vldr	s14, [r3]
 80025fe:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8002602:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002606:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800260a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800260e:	4b9e      	ldr	r3, [pc, #632]	; (8002888 <quaternionUpdate+0x3f0>)
 8002610:	edd3 6a00 	vldr	s13, [r3]
 8002614:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8002618:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800261c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002620:	edd7 7a02 	vldr	s15, [r7, #8]
 8002624:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002628:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
	J_11or24 = twoSEq_3;
 800262c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800262e:	65bb      	str	r3, [r7, #88]	; 0x58
	J_12or23 = 2.0f * SEq_4;
 8002630:	4b96      	ldr	r3, [pc, #600]	; (800288c <quaternionUpdate+0x3f4>)
 8002632:	edd3 7a00 	vldr	s15, [r3]
 8002636:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800263a:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
	J_13or22 = twoSEq_1;
 800263e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002640:	653b      	str	r3, [r7, #80]	; 0x50
	J_14or21 = twoSEq_2;
 8002642:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002644:	64fb      	str	r3, [r7, #76]	; 0x4c
	J_32 = 2.0f * J_14or21;
 8002646:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800264a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800264e:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
	J_33 = 2.0f * J_11or24;
 8002652:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002656:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800265a:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44

	// Compute the gradient (matrix multiplication)
	SEqHatDot_1 = J_14or21 * f_2 - J_11or24 * f_1;
 800265e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8002662:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8002666:	ee27 7a27 	vmul.f32	s14, s14, s15
 800266a:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 800266e:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8002672:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002676:	ee77 7a67 	vsub.f32	s15, s14, s15
 800267a:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
	SEqHatDot_2 = J_12or23 * f_1 + J_13or22 * f_2 - J_32 * f_3;
 800267e:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8002682:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8002686:	ee27 7a27 	vmul.f32	s14, s14, s15
 800268a:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 800268e:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8002692:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002696:	ee37 7a27 	vadd.f32	s14, s14, s15
 800269a:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 800269e:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80026a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026aa:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	SEqHatDot_3 = J_12or23 * f_2 - J_33 * f_3 - J_13or22 * f_1;
 80026ae:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80026b2:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80026b6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80026ba:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 80026be:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80026c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026c6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80026ca:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 80026ce:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80026d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026da:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	SEqHatDot_4 = J_14or21 * f_1 + J_11or24 * f_2;
 80026de:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80026e2:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80026e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80026ea:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 80026ee:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80026f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026fa:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

	// Normalize the gradient
	norm = sqrt(
			SEqHatDot_1 * SEqHatDot_1 + SEqHatDot_2 * SEqHatDot_2
 80026fe:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002702:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002706:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800270a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800270e:	ee37 7a27 	vadd.f32	s14, s14, s15
					+ SEqHatDot_3 * SEqHatDot_3 + SEqHatDot_4 * SEqHatDot_4);
 8002712:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002716:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800271a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800271e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002722:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002726:	ee77 7a27 	vadd.f32	s15, s14, s15
	norm = sqrt(
 800272a:	ee17 0a90 	vmov	r0, s15
 800272e:	f7fd ff0b 	bl	8000548 <__aeabi_f2d>
 8002732:	4602      	mov	r2, r0
 8002734:	460b      	mov	r3, r1
 8002736:	ec43 2b10 	vmov	d0, r2, r3
 800273a:	f00d fb1d 	bl	800fd78 <sqrt>
 800273e:	ec53 2b10 	vmov	r2, r3, d0
 8002742:	4610      	mov	r0, r2
 8002744:	4619      	mov	r1, r3
 8002746:	f7fe fa4f 	bl	8000be8 <__aeabi_d2f>
 800274a:	4603      	mov	r3, r0
 800274c:	66bb      	str	r3, [r7, #104]	; 0x68
	SEqHatDot_1 /= norm;
 800274e:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 8002752:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 8002756:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800275a:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
	SEqHatDot_2 /= norm;
 800275e:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8002762:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 8002766:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800276a:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	SEqHatDot_3 /= norm;
 800276e:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 8002772:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 8002776:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800277a:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	SEqHatDot_4 /= norm;
 800277e:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8002782:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 8002786:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800278a:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

	// Compute the quaternion derivative measured by gyroscopes
	SEqDot_omega_1 = -halfSEq_2 * w_x - halfSEq_3 * w_y - halfSEq_4 * w_z;
 800278e:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8002792:	eeb1 7a67 	vneg.f32	s14, s15
 8002796:	edd7 7a07 	vldr	s15, [r7, #28]
 800279a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800279e:	edd7 6a1f 	vldr	s13, [r7, #124]	; 0x7c
 80027a2:	edd7 7a06 	vldr	s15, [r7, #24]
 80027a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027aa:	ee37 7a67 	vsub.f32	s14, s14, s15
 80027ae:	edd7 6a1e 	vldr	s13, [r7, #120]	; 0x78
 80027b2:	edd7 7a05 	vldr	s15, [r7, #20]
 80027b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027be:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	SEqDot_omega_2 = halfSEq_1 * w_x + halfSEq_3 * w_z - halfSEq_4 * w_y;
 80027c2:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 80027c6:	edd7 7a07 	vldr	s15, [r7, #28]
 80027ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027ce:	edd7 6a1f 	vldr	s13, [r7, #124]	; 0x7c
 80027d2:	edd7 7a05 	vldr	s15, [r7, #20]
 80027d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027da:	ee37 7a27 	vadd.f32	s14, s14, s15
 80027de:	edd7 6a1e 	vldr	s13, [r7, #120]	; 0x78
 80027e2:	edd7 7a06 	vldr	s15, [r7, #24]
 80027e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027ee:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	SEqDot_omega_3 = halfSEq_1 * w_y - halfSEq_2 * w_z + halfSEq_4 * w_x;
 80027f2:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 80027f6:	edd7 7a06 	vldr	s15, [r7, #24]
 80027fa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027fe:	edd7 6a20 	vldr	s13, [r7, #128]	; 0x80
 8002802:	edd7 7a05 	vldr	s15, [r7, #20]
 8002806:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800280a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800280e:	edd7 6a1e 	vldr	s13, [r7, #120]	; 0x78
 8002812:	edd7 7a07 	vldr	s15, [r7, #28]
 8002816:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800281a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800281e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	SEqDot_omega_4 = halfSEq_1 * w_z + halfSEq_2 * w_y - halfSEq_3 * w_x;
 8002822:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 8002826:	edd7 7a05 	vldr	s15, [r7, #20]
 800282a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800282e:	edd7 6a20 	vldr	s13, [r7, #128]	; 0x80
 8002832:	edd7 7a06 	vldr	s15, [r7, #24]
 8002836:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800283a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800283e:	edd7 6a1f 	vldr	s13, [r7, #124]	; 0x7c
 8002842:	edd7 7a07 	vldr	s15, [r7, #28]
 8002846:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800284a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800284e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

	// Compute then integrate the estimated quaternion derivative
	SEq_1 += (SEqDot_omega_1 - (beta * SEqHatDot_1)) * deltat;
 8002852:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002854:	f7fd fe78 	bl	8000548 <__aeabi_f2d>
 8002858:	4604      	mov	r4, r0
 800285a:	460d      	mov	r5, r1
 800285c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800285e:	f7fd fe73 	bl	8000548 <__aeabi_f2d>
 8002862:	a305      	add	r3, pc, #20	; (adr r3, 8002878 <quaternionUpdate+0x3e0>)
 8002864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002868:	f7fd fec6 	bl	80005f8 <__aeabi_dmul>
 800286c:	4602      	mov	r2, r0
 800286e:	460b      	mov	r3, r1
 8002870:	e00e      	b.n	8002890 <quaternionUpdate+0x3f8>
 8002872:	bf00      	nop
 8002874:	f3af 8000 	nop.w
 8002878:	5a6bac7d 	.word	0x5a6bac7d
 800287c:	3f8ef49c 	.word	0x3f8ef49c
 8002880:	20000058 	.word	0x20000058
 8002884:	20000850 	.word	0x20000850
 8002888:	20000854 	.word	0x20000854
 800288c:	20000858 	.word	0x20000858
 8002890:	4620      	mov	r0, r4
 8002892:	4629      	mov	r1, r5
 8002894:	f7fd fcf8 	bl	8000288 <__aeabi_dsub>
 8002898:	4602      	mov	r2, r0
 800289a:	460b      	mov	r3, r1
 800289c:	4614      	mov	r4, r2
 800289e:	461d      	mov	r5, r3
 80028a0:	6878      	ldr	r0, [r7, #4]
 80028a2:	f7fd fe51 	bl	8000548 <__aeabi_f2d>
 80028a6:	4602      	mov	r2, r0
 80028a8:	460b      	mov	r3, r1
 80028aa:	4620      	mov	r0, r4
 80028ac:	4629      	mov	r1, r5
 80028ae:	f7fd fea3 	bl	80005f8 <__aeabi_dmul>
 80028b2:	4602      	mov	r2, r0
 80028b4:	460b      	mov	r3, r1
 80028b6:	4614      	mov	r4, r2
 80028b8:	461d      	mov	r5, r3
 80028ba:	4b93      	ldr	r3, [pc, #588]	; (8002b08 <quaternionUpdate+0x670>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4618      	mov	r0, r3
 80028c0:	f7fd fe42 	bl	8000548 <__aeabi_f2d>
 80028c4:	4602      	mov	r2, r0
 80028c6:	460b      	mov	r3, r1
 80028c8:	4620      	mov	r0, r4
 80028ca:	4629      	mov	r1, r5
 80028cc:	f7fd fcde 	bl	800028c <__adddf3>
 80028d0:	4602      	mov	r2, r0
 80028d2:	460b      	mov	r3, r1
 80028d4:	4610      	mov	r0, r2
 80028d6:	4619      	mov	r1, r3
 80028d8:	f7fe f986 	bl	8000be8 <__aeabi_d2f>
 80028dc:	4603      	mov	r3, r0
 80028de:	4a8a      	ldr	r2, [pc, #552]	; (8002b08 <quaternionUpdate+0x670>)
 80028e0:	6013      	str	r3, [r2, #0]
	SEq_2 += (SEqDot_omega_2 - (beta * SEqHatDot_2)) * deltat;
 80028e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80028e4:	f7fd fe30 	bl	8000548 <__aeabi_f2d>
 80028e8:	4604      	mov	r4, r0
 80028ea:	460d      	mov	r5, r1
 80028ec:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80028ee:	f7fd fe2b 	bl	8000548 <__aeabi_f2d>
 80028f2:	a383      	add	r3, pc, #524	; (adr r3, 8002b00 <quaternionUpdate+0x668>)
 80028f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028f8:	f7fd fe7e 	bl	80005f8 <__aeabi_dmul>
 80028fc:	4602      	mov	r2, r0
 80028fe:	460b      	mov	r3, r1
 8002900:	4620      	mov	r0, r4
 8002902:	4629      	mov	r1, r5
 8002904:	f7fd fcc0 	bl	8000288 <__aeabi_dsub>
 8002908:	4602      	mov	r2, r0
 800290a:	460b      	mov	r3, r1
 800290c:	4614      	mov	r4, r2
 800290e:	461d      	mov	r5, r3
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	f7fd fe19 	bl	8000548 <__aeabi_f2d>
 8002916:	4602      	mov	r2, r0
 8002918:	460b      	mov	r3, r1
 800291a:	4620      	mov	r0, r4
 800291c:	4629      	mov	r1, r5
 800291e:	f7fd fe6b 	bl	80005f8 <__aeabi_dmul>
 8002922:	4602      	mov	r2, r0
 8002924:	460b      	mov	r3, r1
 8002926:	4614      	mov	r4, r2
 8002928:	461d      	mov	r5, r3
 800292a:	4b78      	ldr	r3, [pc, #480]	; (8002b0c <quaternionUpdate+0x674>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4618      	mov	r0, r3
 8002930:	f7fd fe0a 	bl	8000548 <__aeabi_f2d>
 8002934:	4602      	mov	r2, r0
 8002936:	460b      	mov	r3, r1
 8002938:	4620      	mov	r0, r4
 800293a:	4629      	mov	r1, r5
 800293c:	f7fd fca6 	bl	800028c <__adddf3>
 8002940:	4602      	mov	r2, r0
 8002942:	460b      	mov	r3, r1
 8002944:	4610      	mov	r0, r2
 8002946:	4619      	mov	r1, r3
 8002948:	f7fe f94e 	bl	8000be8 <__aeabi_d2f>
 800294c:	4603      	mov	r3, r0
 800294e:	4a6f      	ldr	r2, [pc, #444]	; (8002b0c <quaternionUpdate+0x674>)
 8002950:	6013      	str	r3, [r2, #0]
	SEq_3 += (SEqDot_omega_3 - (beta * SEqHatDot_3)) * deltat;
 8002952:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002954:	f7fd fdf8 	bl	8000548 <__aeabi_f2d>
 8002958:	4604      	mov	r4, r0
 800295a:	460d      	mov	r5, r1
 800295c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800295e:	f7fd fdf3 	bl	8000548 <__aeabi_f2d>
 8002962:	a367      	add	r3, pc, #412	; (adr r3, 8002b00 <quaternionUpdate+0x668>)
 8002964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002968:	f7fd fe46 	bl	80005f8 <__aeabi_dmul>
 800296c:	4602      	mov	r2, r0
 800296e:	460b      	mov	r3, r1
 8002970:	4620      	mov	r0, r4
 8002972:	4629      	mov	r1, r5
 8002974:	f7fd fc88 	bl	8000288 <__aeabi_dsub>
 8002978:	4602      	mov	r2, r0
 800297a:	460b      	mov	r3, r1
 800297c:	4614      	mov	r4, r2
 800297e:	461d      	mov	r5, r3
 8002980:	6878      	ldr	r0, [r7, #4]
 8002982:	f7fd fde1 	bl	8000548 <__aeabi_f2d>
 8002986:	4602      	mov	r2, r0
 8002988:	460b      	mov	r3, r1
 800298a:	4620      	mov	r0, r4
 800298c:	4629      	mov	r1, r5
 800298e:	f7fd fe33 	bl	80005f8 <__aeabi_dmul>
 8002992:	4602      	mov	r2, r0
 8002994:	460b      	mov	r3, r1
 8002996:	4614      	mov	r4, r2
 8002998:	461d      	mov	r5, r3
 800299a:	4b5d      	ldr	r3, [pc, #372]	; (8002b10 <quaternionUpdate+0x678>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4618      	mov	r0, r3
 80029a0:	f7fd fdd2 	bl	8000548 <__aeabi_f2d>
 80029a4:	4602      	mov	r2, r0
 80029a6:	460b      	mov	r3, r1
 80029a8:	4620      	mov	r0, r4
 80029aa:	4629      	mov	r1, r5
 80029ac:	f7fd fc6e 	bl	800028c <__adddf3>
 80029b0:	4602      	mov	r2, r0
 80029b2:	460b      	mov	r3, r1
 80029b4:	4610      	mov	r0, r2
 80029b6:	4619      	mov	r1, r3
 80029b8:	f7fe f916 	bl	8000be8 <__aeabi_d2f>
 80029bc:	4603      	mov	r3, r0
 80029be:	4a54      	ldr	r2, [pc, #336]	; (8002b10 <quaternionUpdate+0x678>)
 80029c0:	6013      	str	r3, [r2, #0]
	SEq_4 += (SEqDot_omega_4 - (beta * SEqHatDot_4)) * deltat;
 80029c2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80029c4:	f7fd fdc0 	bl	8000548 <__aeabi_f2d>
 80029c8:	4604      	mov	r4, r0
 80029ca:	460d      	mov	r5, r1
 80029cc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80029ce:	f7fd fdbb 	bl	8000548 <__aeabi_f2d>
 80029d2:	a34b      	add	r3, pc, #300	; (adr r3, 8002b00 <quaternionUpdate+0x668>)
 80029d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029d8:	f7fd fe0e 	bl	80005f8 <__aeabi_dmul>
 80029dc:	4602      	mov	r2, r0
 80029de:	460b      	mov	r3, r1
 80029e0:	4620      	mov	r0, r4
 80029e2:	4629      	mov	r1, r5
 80029e4:	f7fd fc50 	bl	8000288 <__aeabi_dsub>
 80029e8:	4602      	mov	r2, r0
 80029ea:	460b      	mov	r3, r1
 80029ec:	4614      	mov	r4, r2
 80029ee:	461d      	mov	r5, r3
 80029f0:	6878      	ldr	r0, [r7, #4]
 80029f2:	f7fd fda9 	bl	8000548 <__aeabi_f2d>
 80029f6:	4602      	mov	r2, r0
 80029f8:	460b      	mov	r3, r1
 80029fa:	4620      	mov	r0, r4
 80029fc:	4629      	mov	r1, r5
 80029fe:	f7fd fdfb 	bl	80005f8 <__aeabi_dmul>
 8002a02:	4602      	mov	r2, r0
 8002a04:	460b      	mov	r3, r1
 8002a06:	4614      	mov	r4, r2
 8002a08:	461d      	mov	r5, r3
 8002a0a:	4b42      	ldr	r3, [pc, #264]	; (8002b14 <quaternionUpdate+0x67c>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f7fd fd9a 	bl	8000548 <__aeabi_f2d>
 8002a14:	4602      	mov	r2, r0
 8002a16:	460b      	mov	r3, r1
 8002a18:	4620      	mov	r0, r4
 8002a1a:	4629      	mov	r1, r5
 8002a1c:	f7fd fc36 	bl	800028c <__adddf3>
 8002a20:	4602      	mov	r2, r0
 8002a22:	460b      	mov	r3, r1
 8002a24:	4610      	mov	r0, r2
 8002a26:	4619      	mov	r1, r3
 8002a28:	f7fe f8de 	bl	8000be8 <__aeabi_d2f>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	4a39      	ldr	r2, [pc, #228]	; (8002b14 <quaternionUpdate+0x67c>)
 8002a30:	6013      	str	r3, [r2, #0]

	// Normalize quaternion
	norm = sqrt(SEq_1 * SEq_1 + SEq_2 * SEq_2 + SEq_3 * SEq_3 + SEq_4 * SEq_4);
 8002a32:	4b35      	ldr	r3, [pc, #212]	; (8002b08 <quaternionUpdate+0x670>)
 8002a34:	ed93 7a00 	vldr	s14, [r3]
 8002a38:	4b33      	ldr	r3, [pc, #204]	; (8002b08 <quaternionUpdate+0x670>)
 8002a3a:	edd3 7a00 	vldr	s15, [r3]
 8002a3e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a42:	4b32      	ldr	r3, [pc, #200]	; (8002b0c <quaternionUpdate+0x674>)
 8002a44:	edd3 6a00 	vldr	s13, [r3]
 8002a48:	4b30      	ldr	r3, [pc, #192]	; (8002b0c <quaternionUpdate+0x674>)
 8002a4a:	edd3 7a00 	vldr	s15, [r3]
 8002a4e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a52:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a56:	4b2e      	ldr	r3, [pc, #184]	; (8002b10 <quaternionUpdate+0x678>)
 8002a58:	edd3 6a00 	vldr	s13, [r3]
 8002a5c:	4b2c      	ldr	r3, [pc, #176]	; (8002b10 <quaternionUpdate+0x678>)
 8002a5e:	edd3 7a00 	vldr	s15, [r3]
 8002a62:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a66:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a6a:	4b2a      	ldr	r3, [pc, #168]	; (8002b14 <quaternionUpdate+0x67c>)
 8002a6c:	edd3 6a00 	vldr	s13, [r3]
 8002a70:	4b28      	ldr	r3, [pc, #160]	; (8002b14 <quaternionUpdate+0x67c>)
 8002a72:	edd3 7a00 	vldr	s15, [r3]
 8002a76:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a7e:	ee17 0a90 	vmov	r0, s15
 8002a82:	f7fd fd61 	bl	8000548 <__aeabi_f2d>
 8002a86:	4602      	mov	r2, r0
 8002a88:	460b      	mov	r3, r1
 8002a8a:	ec43 2b10 	vmov	d0, r2, r3
 8002a8e:	f00d f973 	bl	800fd78 <sqrt>
 8002a92:	ec53 2b10 	vmov	r2, r3, d0
 8002a96:	4610      	mov	r0, r2
 8002a98:	4619      	mov	r1, r3
 8002a9a:	f7fe f8a5 	bl	8000be8 <__aeabi_d2f>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	66bb      	str	r3, [r7, #104]	; 0x68
	SEq_1 /= norm;
 8002aa2:	4b19      	ldr	r3, [pc, #100]	; (8002b08 <quaternionUpdate+0x670>)
 8002aa4:	edd3 6a00 	vldr	s13, [r3]
 8002aa8:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 8002aac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ab0:	4b15      	ldr	r3, [pc, #84]	; (8002b08 <quaternionUpdate+0x670>)
 8002ab2:	edc3 7a00 	vstr	s15, [r3]
	SEq_2 /= norm;
 8002ab6:	4b15      	ldr	r3, [pc, #84]	; (8002b0c <quaternionUpdate+0x674>)
 8002ab8:	edd3 6a00 	vldr	s13, [r3]
 8002abc:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 8002ac0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ac4:	4b11      	ldr	r3, [pc, #68]	; (8002b0c <quaternionUpdate+0x674>)
 8002ac6:	edc3 7a00 	vstr	s15, [r3]
	SEq_3 /= norm;
 8002aca:	4b11      	ldr	r3, [pc, #68]	; (8002b10 <quaternionUpdate+0x678>)
 8002acc:	edd3 6a00 	vldr	s13, [r3]
 8002ad0:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 8002ad4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ad8:	4b0d      	ldr	r3, [pc, #52]	; (8002b10 <quaternionUpdate+0x678>)
 8002ada:	edc3 7a00 	vstr	s15, [r3]
	SEq_4 /= norm;
 8002ade:	4b0d      	ldr	r3, [pc, #52]	; (8002b14 <quaternionUpdate+0x67c>)
 8002ae0:	edd3 6a00 	vldr	s13, [r3]
 8002ae4:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 8002ae8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002aec:	4b09      	ldr	r3, [pc, #36]	; (8002b14 <quaternionUpdate+0x67c>)
 8002aee:	edc3 7a00 	vstr	s15, [r3]
}
 8002af2:	bf00      	nop
 8002af4:	3788      	adds	r7, #136	; 0x88
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bdb0      	pop	{r4, r5, r7, pc}
 8002afa:	bf00      	nop
 8002afc:	f3af 8000 	nop.w
 8002b00:	5a6bac7d 	.word	0x5a6bac7d
 8002b04:	3f8ef49c 	.word	0x3f8ef49c
 8002b08:	20000058 	.word	0x20000058
 8002b0c:	20000850 	.word	0x20000850
 8002b10:	20000854 	.word	0x20000854
 8002b14:	20000858 	.word	0x20000858

08002b18 <_Z41__static_initialization_and_destruction_0ii>:
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b082      	sub	sp, #8
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
 8002b20:	6039      	str	r1, [r7, #0]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d125      	bne.n	8002b74 <_Z41__static_initialization_and_destruction_0ii+0x5c>
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d120      	bne.n	8002b74 <_Z41__static_initialization_and_destruction_0ii+0x5c>
		.mailbox = { .queue = NULL } };
 8002b32:	4b1b      	ldr	r3, [pc, #108]	; (8002ba0 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a1b      	ldr	r2, [pc, #108]	; (8002ba4 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8002b38:	6013      	str	r3, [r2, #0]
osMessageQueueId_t ctrlQueue = osMessageQueueNew(10,
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	210c      	movs	r1, #12
 8002b3e:	200a      	movs	r0, #10
 8002b40:	f00a f9cd 	bl	800cede <osMessageQueueNew>
 8002b44:	4603      	mov	r3, r0
 8002b46:	4a18      	ldr	r2, [pc, #96]	; (8002ba8 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8002b48:	6013      	str	r3, [r2, #0]
		.mailbox = { .queue = ctrlQueue } };
 8002b4a:	4b18      	ldr	r3, [pc, #96]	; (8002bac <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a18      	ldr	r2, [pc, #96]	; (8002bb0 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8002b50:	6013      	str	r3, [r2, #0]
 8002b52:	4b15      	ldr	r3, [pc, #84]	; (8002ba8 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a16      	ldr	r2, [pc, #88]	; (8002bb0 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8002b58:	6293      	str	r3, [r2, #40]	; 0x28
AppMotion::MotionController controller(&ctrlCtx);
 8002b5a:	4915      	ldr	r1, [pc, #84]	; (8002bb0 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8002b5c:	4815      	ldr	r0, [pc, #84]	; (8002bb4 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8002b5e:	f000 f86d 	bl	8002c3c <_ZN9AppMotion16MotionControllerC1EP5u_ctx>
AppParser::Processor processor(&procCtx, &ctrlCtx);
 8002b62:	4a13      	ldr	r2, [pc, #76]	; (8002bb0 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8002b64:	490f      	ldr	r1, [pc, #60]	; (8002ba4 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8002b66:	4814      	ldr	r0, [pc, #80]	; (8002bb8 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8002b68:	f002 fa06 	bl	8004f78 <_ZN9AppParser9ProcessorC1EP5u_ctxS2_>
AppParser::Listener listener(&procCtx);
 8002b6c:	490d      	ldr	r1, [pc, #52]	; (8002ba4 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8002b6e:	4813      	ldr	r0, [pc, #76]	; (8002bbc <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8002b70:	f002 f9c1 	bl	8004ef6 <_ZN9AppParser8ListenerC1EP5u_ctx>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d10d      	bne.n	8002b96 <_Z41__static_initialization_and_destruction_0ii+0x7e>
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d108      	bne.n	8002b96 <_Z41__static_initialization_and_destruction_0ii+0x7e>
 8002b84:	480d      	ldr	r0, [pc, #52]	; (8002bbc <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8002b86:	f002 f9c5 	bl	8004f14 <_ZN9AppParser8ListenerD1Ev>
AppParser::Processor processor(&procCtx, &ctrlCtx);
 8002b8a:	480b      	ldr	r0, [pc, #44]	; (8002bb8 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8002b8c:	f002 fa0e 	bl	8004fac <_ZN9AppParser9ProcessorD1Ev>
AppMotion::MotionController controller(&ctrlCtx);
 8002b90:	4808      	ldr	r0, [pc, #32]	; (8002bb4 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8002b92:	f7ff f9b7 	bl	8001f04 <_ZN9AppMotion16MotionControllerD1Ev>
}
 8002b96:	bf00      	nop
 8002b98:	3708      	adds	r7, #8
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}
 8002b9e:	bf00      	nop
 8002ba0:	200006a8 	.word	0x200006a8
 8002ba4:	20000000 	.word	0x20000000
 8002ba8:	200006b8 	.word	0x200006b8
 8002bac:	200006ac 	.word	0x200006ac
 8002bb0:	2000002c 	.word	0x2000002c
 8002bb4:	200006bc 	.word	0x200006bc
 8002bb8:	20000818 	.word	0x20000818
 8002bbc:	20000820 	.word	0x20000820

08002bc0 <_GLOBAL__sub_I_sensor_data>:
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	af00      	add	r7, sp, #0
 8002bc4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002bc8:	2001      	movs	r0, #1
 8002bca:	f7ff ffa5 	bl	8002b18 <_Z41__static_initialization_and_destruction_0ii>
 8002bce:	bd80      	pop	{r7, pc}

08002bd0 <_GLOBAL__sub_D_sensor_data>:
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002bd8:	2000      	movs	r0, #0
 8002bda:	f7ff ff9d 	bl	8002b18 <_Z41__static_initialization_and_destruction_0ii>
 8002bde:	bd80      	pop	{r7, pc}

08002be0 <_ZN9AppMotion16MotionController3mapEfffff>:
	;
	u_ctx *ctx;
	static void motionTask(void *pv);
	static float map(float x, float in_min, float in_max, float out_min, float out_max) {
 8002be0:	b480      	push	{r7}
 8002be2:	b087      	sub	sp, #28
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	ed87 0a05 	vstr	s0, [r7, #20]
 8002bea:	edc7 0a04 	vstr	s1, [r7, #16]
 8002bee:	ed87 1a03 	vstr	s2, [r7, #12]
 8002bf2:	edc7 1a02 	vstr	s3, [r7, #8]
 8002bf6:	ed87 2a01 	vstr	s4, [r7, #4]
	    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8002bfa:	ed97 7a05 	vldr	s14, [r7, #20]
 8002bfe:	edd7 7a04 	vldr	s15, [r7, #16]
 8002c02:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002c06:	edd7 6a01 	vldr	s13, [r7, #4]
 8002c0a:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c0e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002c12:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002c16:	ed97 7a03 	vldr	s14, [r7, #12]
 8002c1a:	edd7 7a04 	vldr	s15, [r7, #16]
 8002c1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002c26:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c2a:	ee77 7a27 	vadd.f32	s15, s14, s15
	}
 8002c2e:	eeb0 0a67 	vmov.f32	s0, s15
 8002c32:	371c      	adds	r7, #28
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr

08002c3c <_ZN9AppMotion16MotionControllerC1EP5u_ctx>:
#define REAR_WHEEL_RADIUS_CM 6.5/2
#define REAR_WHEEL_ROTATION_DISTANCE (2 * 3.142 * REAR_WHEEL_RADIUS_CM)
#define ENCODER_PULSES_PER_ROTATION 1560 * 1.045
#define DISTANCE_PER_ENCODER_PULSE (REAR_WHEEL_ROTATION_DISTANCE / ENCODER_PULSES_PER_ROTATION)

MotionController::MotionController(u_ctx *ctx) {
 8002c3c:	b480      	push	{r7}
 8002c3e:	b083      	sub	sp, #12
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
 8002c44:	6039      	str	r1, [r7, #0]
	this->ctx = ctx;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	683a      	ldr	r2, [r7, #0]
 8002c4a:	601a      	str	r2, [r3, #0]
	/* Instantiate the physical devices */

}
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	4618      	mov	r0, r3
 8002c50:	370c      	adds	r7, #12
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr
	...

08002c5c <_ZN9AppMotion16MotionController5startEv>:

void MotionController::start(void) {
 8002c5c:	b590      	push	{r4, r7, lr}
 8002c5e:	b08f      	sub	sp, #60	; 0x3c
 8002c60:	af04      	add	r7, sp, #16
 8002c62:	6078      	str	r0, [r7, #4]
	this->servo = new Servo(&htim1, TIM_CHANNEL_1, CENTER_POS_PWM - LEFT_DELTA,
	CENTER_POS_PWM + RIGHT_DELTA, CENTER_POS_PWM);
 8002c64:	2018      	movs	r0, #24
 8002c66:	f00c ffa9 	bl	800fbbc <_Znwj>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	461c      	mov	r4, r3
 8002c6e:	2393      	movs	r3, #147	; 0x93
 8002c70:	9301      	str	r3, [sp, #4]
 8002c72:	23ec      	movs	r3, #236	; 0xec
 8002c74:	9300      	str	r3, [sp, #0]
 8002c76:	2353      	movs	r3, #83	; 0x53
 8002c78:	2200      	movs	r2, #0
 8002c7a:	4955      	ldr	r1, [pc, #340]	; (8002dd0 <_ZN9AppMotion16MotionController5startEv+0x174>)
 8002c7c:	4620      	mov	r0, r4
 8002c7e:	f001 ff75 	bl	8004b6c <_ZN9AppMotion5ServoC1EP17TIM_HandleTypeDefmmmm>
	this->servo = new Servo(&htim1, TIM_CHANNEL_1, CENTER_POS_PWM - LEFT_DELTA,
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	60dc      	str	r4, [r3, #12]
	this->lmotor = new Motor(&htim8, TIM_CHANNEL_1, GPIOA, GPIOA, GPIO_PIN_5,
	GPIO_PIN_4, 7199);
 8002c86:	2018      	movs	r0, #24
 8002c88:	f00c ff98 	bl	800fbbc <_Znwj>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	461c      	mov	r4, r3
 8002c90:	f641 431f 	movw	r3, #7199	; 0x1c1f
 8002c94:	9303      	str	r3, [sp, #12]
 8002c96:	2310      	movs	r3, #16
 8002c98:	9302      	str	r3, [sp, #8]
 8002c9a:	2320      	movs	r3, #32
 8002c9c:	9301      	str	r3, [sp, #4]
 8002c9e:	4b4d      	ldr	r3, [pc, #308]	; (8002dd4 <_ZN9AppMotion16MotionController5startEv+0x178>)
 8002ca0:	9300      	str	r3, [sp, #0]
 8002ca2:	4b4c      	ldr	r3, [pc, #304]	; (8002dd4 <_ZN9AppMotion16MotionController5startEv+0x178>)
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	494c      	ldr	r1, [pc, #304]	; (8002dd8 <_ZN9AppMotion16MotionController5startEv+0x17c>)
 8002ca8:	4620      	mov	r0, r4
 8002caa:	f001 ffb1 	bl	8004c10 <_ZN9AppMotion5MotorC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefS4_ttm>
	this->lmotor = new Motor(&htim8, TIM_CHANNEL_1, GPIOA, GPIOA, GPIO_PIN_5,
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	605c      	str	r4, [r3, #4]
	this->rmotor = new Motor(&htim8, TIM_CHANNEL_2, GPIOA, GPIOA, GPIO_PIN_2,
	GPIO_PIN_3, 7199);
 8002cb2:	2018      	movs	r0, #24
 8002cb4:	f00c ff82 	bl	800fbbc <_Znwj>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	461c      	mov	r4, r3
 8002cbc:	f641 431f 	movw	r3, #7199	; 0x1c1f
 8002cc0:	9303      	str	r3, [sp, #12]
 8002cc2:	2308      	movs	r3, #8
 8002cc4:	9302      	str	r3, [sp, #8]
 8002cc6:	2304      	movs	r3, #4
 8002cc8:	9301      	str	r3, [sp, #4]
 8002cca:	4b42      	ldr	r3, [pc, #264]	; (8002dd4 <_ZN9AppMotion16MotionController5startEv+0x178>)
 8002ccc:	9300      	str	r3, [sp, #0]
 8002cce:	4b41      	ldr	r3, [pc, #260]	; (8002dd4 <_ZN9AppMotion16MotionController5startEv+0x178>)
 8002cd0:	2204      	movs	r2, #4
 8002cd2:	4941      	ldr	r1, [pc, #260]	; (8002dd8 <_ZN9AppMotion16MotionController5startEv+0x17c>)
 8002cd4:	4620      	mov	r0, r4
 8002cd6:	f001 ff9b 	bl	8004c10 <_ZN9AppMotion5MotorC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefS4_ttm>
	this->rmotor = new Motor(&htim8, TIM_CHANNEL_2, GPIOA, GPIOA, GPIO_PIN_2,
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	609c      	str	r4, [r3, #8]
	float pid_param_right[3] = { 3.1, 0.0, 0.1 };
 8002cde:	4a3f      	ldr	r2, [pc, #252]	; (8002ddc <_ZN9AppMotion16MotionController5startEv+0x180>)
 8002ce0:	f107 0318 	add.w	r3, r7, #24
 8002ce4:	ca07      	ldmia	r2, {r0, r1, r2}
 8002ce6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	float pid_param_sync[3] = { 12, 3, 1 };
 8002cea:	4a3d      	ldr	r2, [pc, #244]	; (8002de0 <_ZN9AppMotion16MotionController5startEv+0x184>)
 8002cec:	f107 030c 	add.w	r3, r7, #12
 8002cf0:	ca07      	ldmia	r2, {r0, r1, r2}
 8002cf2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	PID_init(&this->left_pid, PID_POSITION, pid_param_right, 7500, 7500);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	3318      	adds	r3, #24
 8002cfa:	f107 0218 	add.w	r2, r7, #24
 8002cfe:	eddf 0a39 	vldr	s1, [pc, #228]	; 8002de4 <_ZN9AppMotion16MotionController5startEv+0x188>
 8002d02:	ed9f 0a38 	vldr	s0, [pc, #224]	; 8002de4 <_ZN9AppMotion16MotionController5startEv+0x188>
 8002d06:	2100      	movs	r1, #0
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f003 fa7c 	bl	8006206 <_Z8PID_initP12pid_type_defhPKfff>
	PID_init(&this->right_pid, PID_POSITION, pid_param_right, 7500, 7500);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	3368      	adds	r3, #104	; 0x68
 8002d12:	f107 0218 	add.w	r2, r7, #24
 8002d16:	eddf 0a33 	vldr	s1, [pc, #204]	; 8002de4 <_ZN9AppMotion16MotionController5startEv+0x188>
 8002d1a:	ed9f 0a32 	vldr	s0, [pc, #200]	; 8002de4 <_ZN9AppMotion16MotionController5startEv+0x188>
 8002d1e:	2100      	movs	r1, #0
 8002d20:	4618      	mov	r0, r3
 8002d22:	f003 fa70 	bl	8006206 <_Z8PID_initP12pid_type_defhPKfff>
	PID_init(&this->sync_left_pid, 0, pid_param_sync, 1000, 1000);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	33b8      	adds	r3, #184	; 0xb8
 8002d2a:	f107 020c 	add.w	r2, r7, #12
 8002d2e:	eddf 0a2e 	vldr	s1, [pc, #184]	; 8002de8 <_ZN9AppMotion16MotionController5startEv+0x18c>
 8002d32:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 8002de8 <_ZN9AppMotion16MotionController5startEv+0x18c>
 8002d36:	2100      	movs	r1, #0
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f003 fa64 	bl	8006206 <_Z8PID_initP12pid_type_defhPKfff>
	PID_init(&this->sync_right_pid, 0, pid_param_sync, 1000, 1000);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8002d44:	f107 020c 	add.w	r2, r7, #12
 8002d48:	eddf 0a27 	vldr	s1, [pc, #156]	; 8002de8 <_ZN9AppMotion16MotionController5startEv+0x18c>
 8002d4c:	ed9f 0a26 	vldr	s0, [pc, #152]	; 8002de8 <_ZN9AppMotion16MotionController5startEv+0x18c>
 8002d50:	2100      	movs	r1, #0
 8002d52:	4618      	mov	r0, r3
 8002d54:	f003 fa57 	bl	8006206 <_Z8PID_initP12pid_type_defhPKfff>

	this->lencoder = new Encoder(&htim2, TIM_CHANNEL_ALL);
 8002d58:	2008      	movs	r0, #8
 8002d5a:	f00c ff2f 	bl	800fbbc <_Znwj>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	461c      	mov	r4, r3
 8002d62:	223c      	movs	r2, #60	; 0x3c
 8002d64:	4921      	ldr	r1, [pc, #132]	; (8002dec <_ZN9AppMotion16MotionController5startEv+0x190>)
 8002d66:	4620      	mov	r0, r4
 8002d68:	f002 f84b 	bl	8004e02 <_ZN9AppMotion7EncoderC1EP17TIM_HandleTypeDefm>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	611c      	str	r4, [r3, #16]
	this->rencoder = new Encoder(&htim3, TIM_CHANNEL_ALL);
 8002d70:	2008      	movs	r0, #8
 8002d72:	f00c ff23 	bl	800fbbc <_Znwj>
 8002d76:	4603      	mov	r3, r0
 8002d78:	461c      	mov	r4, r3
 8002d7a:	223c      	movs	r2, #60	; 0x3c
 8002d7c:	491c      	ldr	r1, [pc, #112]	; (8002df0 <_ZN9AppMotion16MotionController5startEv+0x194>)
 8002d7e:	4620      	mov	r0, r4
 8002d80:	f002 f83f 	bl	8004e02 <_ZN9AppMotion7EncoderC1EP17TIM_HandleTypeDefm>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	615c      	str	r4, [r3, #20]
	emergency = false;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158
	instance_wrapper *wrapper_instance = new instance_wrapper();
 8002d90:	2008      	movs	r0, #8
 8002d92:	f00c ff13 	bl	800fbbc <_Znwj>
 8002d96:	4603      	mov	r3, r0
 8002d98:	2200      	movs	r2, #0
 8002d9a:	601a      	str	r2, [r3, #0]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	605a      	str	r2, [r3, #4]
 8002da0:	627b      	str	r3, [r7, #36]	; 0x24
	wrapper_instance->ctx = ctx;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da8:	601a      	str	r2, [r3, #0]
	wrapper_instance->i = this;
 8002daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dac:	687a      	ldr	r2, [r7, #4]
 8002dae:	605a      	str	r2, [r3, #4]
	this->ctx->runner = osThreadNew(
			(osThreadFunc_t) MotionController::motionTask, wrapper_instance,
			&(ctx->attr));
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	1d1a      	adds	r2, r3, #4
	this->ctx->runner = osThreadNew(
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681c      	ldr	r4, [r3, #0]
 8002dba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002dbc:	480d      	ldr	r0, [pc, #52]	; (8002df4 <_ZN9AppMotion16MotionController5startEv+0x198>)
 8002dbe:	f009 ffbf 	bl	800cd40 <osThreadNew>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	6023      	str	r3, [r4, #0]
	return;
 8002dc6:	bf00      	nop
}
 8002dc8:	372c      	adds	r7, #44	; 0x2c
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd90      	pop	{r4, r7, pc}
 8002dce:	bf00      	nop
 8002dd0:	200009b8 	.word	0x200009b8
 8002dd4:	40020000 	.word	0x40020000
 8002dd8:	20000a90 	.word	0x20000a90
 8002ddc:	08014560 	.word	0x08014560
 8002de0:	0801456c 	.word	0x0801456c
 8002de4:	45ea6000 	.word	0x45ea6000
 8002de8:	447a0000 	.word	0x447a0000
 8002dec:	20000a00 	.word	0x20000a00
 8002df0:	20000a48 	.word	0x20000a48
 8002df4:	08002df9 	.word	0x08002df9

08002df8 <_ZN9AppMotion16MotionController10motionTaskEPv>:


void MotionController::motionTask(void *pv) {
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b092      	sub	sp, #72	; 0x48
 8002dfc:	af02      	add	r7, sp, #8
 8002dfe:	6078      	str	r0, [r7, #4]

	// workaround section START
	instance_wrapper *wrapper = static_cast<instance_wrapper*>(pv);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	63fb      	str	r3, [r7, #60]	; 0x3c
	u_ctx *ctx = wrapper->ctx;
 8002e04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	63bb      	str	r3, [r7, #56]	; 0x38
	MotionController *self = wrapper->i;
 8002e0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	637b      	str	r3, [r7, #52]	; 0x34

	Motor *lmotor = self->lmotor;
 8002e10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	633b      	str	r3, [r7, #48]	; 0x30
	Motor *rmotor = self->rmotor;
 8002e16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
	Servo *servo = self->servo;
 8002e1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	62bb      	str	r3, [r7, #40]	; 0x28
	osDelay(4500);
 8002e22:	f241 1094 	movw	r0, #4500	; 0x1194
 8002e26:	f00a f83f 	bl	800cea8 <osDelay>
	servo->turnLeft();
 8002e2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002e2c:	f001 febd 	bl	8004baa <_ZN9AppMotion5Servo8turnLeftEv>
		servo->turnRight();
 8002e30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002e32:	f001 fecb 	bl	8004bcc <_ZN9AppMotion5Servo9turnRightEv>
		servo->turnFront();
 8002e36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002e38:	f001 fed9 	bl	8004bee <_ZN9AppMotion5Servo9turnFrontEv>

	/* workaround section END. henceforth refer to any "this" as "self" */
	for (;;) {
		osDelay(50);
 8002e3c:	2032      	movs	r0, #50	; 0x32
 8002e3e:	f00a f833 	bl	800cea8 <osDelay>
		is_task_alive_struct.motn = true;
 8002e42:	4b5c      	ldr	r3, [pc, #368]	; (8002fb4 <_ZN9AppMotion16MotionController10motionTaskEPv+0x1bc>)
 8002e44:	2201      	movs	r2, #1
 8002e46:	70da      	strb	r2, [r3, #3]

		//osThreadYield();
		if (osMessageQueueGetCount(ctx->mailbox.queue) > 0) {
 8002e48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f00a f977 	bl	800d140 <osMessageQueueGetCount>
 8002e52:	4603      	mov	r3, r0
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	bf14      	ite	ne
 8002e58:	2301      	movne	r3, #1
 8002e5a:	2300      	moveq	r3, #0
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	f000 809b 	beq.w	8002f9a <_ZN9AppMotion16MotionController10motionTaskEPv+0x1a2>
			HAL_GPIO_WritePin(Movement_Ind_Port, Movement_Ind_Pin, GPIO_PIN_SET);
 8002e64:	2201      	movs	r2, #1
 8002e66:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002e6a:	4853      	ldr	r0, [pc, #332]	; (8002fb8 <_ZN9AppMotion16MotionController10motionTaskEPv+0x1c0>)
 8002e6c:	f005 fbf0 	bl	8008650 <HAL_GPIO_WritePin>
			AppParser::MOTION_PKT_t pkt;
			osMessageQueueGet(ctx->mailbox.queue, &pkt, 0, 5);
 8002e70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e72:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8002e74:	f107 011c 	add.w	r1, r7, #28
 8002e78:	2305      	movs	r3, #5
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	f00a f902 	bl	800d084 <osMessageQueueGet>
			char buffer[20] = { 0 };
 8002e80:	2300      	movs	r3, #0
 8002e82:	60bb      	str	r3, [r7, #8]
 8002e84:	f107 030c 	add.w	r3, r7, #12
 8002e88:	2200      	movs	r2, #0
 8002e8a:	601a      	str	r2, [r3, #0]
 8002e8c:	605a      	str	r2, [r3, #4]
 8002e8e:	609a      	str	r2, [r3, #8]
 8002e90:	60da      	str	r2, [r3, #12]
			sprintf((char*) &buffer, "cmd:%ld, arg:%ld\r\n", (uint32_t) pkt.cmd,
 8002e92:	69fa      	ldr	r2, [r7, #28]
 8002e94:	6a3b      	ldr	r3, [r7, #32]
 8002e96:	f107 0008 	add.w	r0, r7, #8
 8002e9a:	4948      	ldr	r1, [pc, #288]	; (8002fbc <_ZN9AppMotion16MotionController10motionTaskEPv+0x1c4>)
 8002e9c:	f00f f9e4 	bl	8012268 <siprintf>
					pkt.arg);
			//HAL_UART_Transmit(&huart3, (uint8_t*) buffer, sizeof(buffer), 10);
			if (pkt.cmd == AppParser::MOTION_CMD::MOVE_FWD) {
 8002ea0:	69fb      	ldr	r3, [r7, #28]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d110      	bne.n	8002ec8 <_ZN9AppMotion16MotionController10motionTaskEPv+0xd0>
				servo->turnFront();
 8002ea6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ea8:	f001 fea1 	bl	8004bee <_ZN9AppMotion5Servo9turnFrontEv>

				self->move(true, pkt.arg, 35, pkt.is_crawl, pkt.linear);
 8002eac:	6a39      	ldr	r1, [r7, #32]
 8002eae:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002eb2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002eb6:	9201      	str	r2, [sp, #4]
 8002eb8:	9300      	str	r3, [sp, #0]
 8002eba:	2323      	movs	r3, #35	; 0x23
 8002ebc:	460a      	mov	r2, r1
 8002ebe:	2101      	movs	r1, #1
 8002ec0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002ec2:	f000 f87d 	bl	8002fc0 <_ZN9AppMotion16MotionController4moveEbmmbb>
 8002ec6:	e068      	b.n	8002f9a <_ZN9AppMotion16MotionController10motionTaskEPv+0x1a2>

			} else if (pkt.cmd == AppParser::MOTION_CMD::MOVE_BWD) {
 8002ec8:	69fb      	ldr	r3, [r7, #28]
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	d110      	bne.n	8002ef0 <_ZN9AppMotion16MotionController10motionTaskEPv+0xf8>
				servo->turnFront();
 8002ece:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ed0:	f001 fe8d 	bl	8004bee <_ZN9AppMotion5Servo9turnFrontEv>

				self->move(false, pkt.arg, 35, pkt.is_crawl, pkt.linear);
 8002ed4:	6a39      	ldr	r1, [r7, #32]
 8002ed6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002eda:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002ede:	9201      	str	r2, [sp, #4]
 8002ee0:	9300      	str	r3, [sp, #0]
 8002ee2:	2323      	movs	r3, #35	; 0x23
 8002ee4:	460a      	mov	r2, r1
 8002ee6:	2100      	movs	r1, #0
 8002ee8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002eea:	f000 f869 	bl	8002fc0 <_ZN9AppMotion16MotionController4moveEbmmbb>
 8002eee:	e054      	b.n	8002f9a <_ZN9AppMotion16MotionController10motionTaskEPv+0x1a2>

			} else if (pkt.cmd == AppParser::MOTION_CMD::MOVE_LEFT_FWD) {
 8002ef0:	69fb      	ldr	r3, [r7, #28]
 8002ef2:	2b03      	cmp	r3, #3
 8002ef4:	d10a      	bne.n	8002f0c <_ZN9AppMotion16MotionController10motionTaskEPv+0x114>
				self->turn(false, true, pkt.linear, pkt.arg);
 8002ef6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002efa:	6a3b      	ldr	r3, [r7, #32]
 8002efc:	9300      	str	r3, [sp, #0]
 8002efe:	4613      	mov	r3, r2
 8002f00:	2201      	movs	r2, #1
 8002f02:	2100      	movs	r1, #0
 8002f04:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002f06:	f000 faef 	bl	80034e8 <_ZN9AppMotion16MotionController4turnEbbbm>
 8002f0a:	e046      	b.n	8002f9a <_ZN9AppMotion16MotionController10motionTaskEPv+0x1a2>

			} else if (pkt.cmd == AppParser::MOTION_CMD::MOVE_RIGHT_FWD)
 8002f0c:	69fb      	ldr	r3, [r7, #28]
 8002f0e:	2b02      	cmp	r3, #2
 8002f10:	d10a      	bne.n	8002f28 <_ZN9AppMotion16MotionController10motionTaskEPv+0x130>
				self->turn(true, true, pkt.linear, pkt.arg);
 8002f12:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002f16:	6a3b      	ldr	r3, [r7, #32]
 8002f18:	9300      	str	r3, [sp, #0]
 8002f1a:	4613      	mov	r3, r2
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	2101      	movs	r1, #1
 8002f20:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002f22:	f000 fae1 	bl	80034e8 <_ZN9AppMotion16MotionController4turnEbbbm>
 8002f26:	e038      	b.n	8002f9a <_ZN9AppMotion16MotionController10motionTaskEPv+0x1a2>

			else if (pkt.cmd == AppParser::MOTION_CMD::MOVE_LEFT_BWD) {
 8002f28:	69fb      	ldr	r3, [r7, #28]
 8002f2a:	2b05      	cmp	r3, #5
 8002f2c:	d10a      	bne.n	8002f44 <_ZN9AppMotion16MotionController10motionTaskEPv+0x14c>
				self->turn(false, false, pkt.linear, pkt.arg);
 8002f2e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002f32:	6a3b      	ldr	r3, [r7, #32]
 8002f34:	9300      	str	r3, [sp, #0]
 8002f36:	4613      	mov	r3, r2
 8002f38:	2200      	movs	r2, #0
 8002f3a:	2100      	movs	r1, #0
 8002f3c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002f3e:	f000 fad3 	bl	80034e8 <_ZN9AppMotion16MotionController4turnEbbbm>
 8002f42:	e02a      	b.n	8002f9a <_ZN9AppMotion16MotionController10motionTaskEPv+0x1a2>

			} else if (pkt.cmd == AppParser::MOTION_CMD::MOVE_RIGHT_BWD)
 8002f44:	69fb      	ldr	r3, [r7, #28]
 8002f46:	2b04      	cmp	r3, #4
 8002f48:	d10a      	bne.n	8002f60 <_ZN9AppMotion16MotionController10motionTaskEPv+0x168>
				self->turn(true, false, pkt.linear, pkt.arg);
 8002f4a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002f4e:	6a3b      	ldr	r3, [r7, #32]
 8002f50:	9300      	str	r3, [sp, #0]
 8002f52:	4613      	mov	r3, r2
 8002f54:	2200      	movs	r2, #0
 8002f56:	2101      	movs	r1, #1
 8002f58:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002f5a:	f000 fac5 	bl	80034e8 <_ZN9AppMotion16MotionController4turnEbbbm>
 8002f5e:	e01c      	b.n	8002f9a <_ZN9AppMotion16MotionController10motionTaskEPv+0x1a2>

			else if (pkt.cmd == AppParser::MOTION_CMD::MOVE_T2_S180R)
 8002f60:	69fb      	ldr	r3, [r7, #28]
 8002f62:	2b07      	cmp	r3, #7
 8002f64:	d106      	bne.n	8002f74 <_ZN9AppMotion16MotionController10motionTaskEPv+0x17c>
							self->task2ScanAndRot(pkt.turn_opt);
 8002f66:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002f6a:	4619      	mov	r1, r3
 8002f6c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002f6e:	f000 fe17 	bl	8003ba0 <_ZN9AppMotion16MotionController15task2ScanAndRotEb>
 8002f72:	e012      	b.n	8002f9a <_ZN9AppMotion16MotionController10motionTaskEPv+0x1a2>
			else if (pkt.cmd == AppParser::MOTION_CMD::MOVE_T2_S90R)
 8002f74:	69fb      	ldr	r3, [r7, #28]
 8002f76:	2b08      	cmp	r3, #8
 8002f78:	d106      	bne.n	8002f88 <_ZN9AppMotion16MotionController10motionTaskEPv+0x190>
							self->task2ScanAndReturn(pkt.turn_opt);
 8002f7a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002f7e:	4619      	mov	r1, r3
 8002f80:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002f82:	f001 fa01 	bl	8004388 <_ZN9AppMotion16MotionController18task2ScanAndReturnEb>
 8002f86:	e008      	b.n	8002f9a <_ZN9AppMotion16MotionController10motionTaskEPv+0x1a2>
			else if (pkt.cmd == AppParser::MOTION_CMD::MOVE_T2_O1)
 8002f88:	69fb      	ldr	r3, [r7, #28]
 8002f8a:	2b09      	cmp	r3, #9
 8002f8c:	d105      	bne.n	8002f9a <_ZN9AppMotion16MotionController10motionTaskEPv+0x1a2>
				self->task2ScanAndReturn(pkt.turn_opt);
 8002f8e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002f92:	4619      	mov	r1, r3
 8002f94:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002f96:	f001 f9f7 	bl	8004388 <_ZN9AppMotion16MotionController18task2ScanAndReturnEb>

		}
		HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_10);
 8002f9a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002f9e:	4806      	ldr	r0, [pc, #24]	; (8002fb8 <_ZN9AppMotion16MotionController10motionTaskEPv+0x1c0>)
 8002fa0:	f005 fb6f 	bl	8008682 <HAL_GPIO_TogglePin>
		HAL_GPIO_WritePin(Movement_Ind_Port, Movement_Ind_Pin, GPIO_PIN_RESET);
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002faa:	4803      	ldr	r0, [pc, #12]	; (8002fb8 <_ZN9AppMotion16MotionController10motionTaskEPv+0x1c0>)
 8002fac:	f005 fb50 	bl	8008650 <HAL_GPIO_WritePin>

	}
 8002fb0:	e744      	b.n	8002e3c <_ZN9AppMotion16MotionController10motionTaskEPv+0x44>
 8002fb2:	bf00      	nop
 8002fb4:	200006a0 	.word	0x200006a0
 8002fb8:	40021000 	.word	0x40021000
 8002fbc:	08014578 	.word	0x08014578

08002fc0 <_ZN9AppMotion16MotionController4moveEbmmbb>:
}


void MotionController::move(bool isFwd, uint32_t arg, uint32_t speed, bool isCrawl, bool nostop) {
 8002fc0:	b5b0      	push	{r4, r5, r7, lr}
 8002fc2:	b09c      	sub	sp, #112	; 0x70
 8002fc4:	af02      	add	r7, sp, #8
 8002fc6:	60f8      	str	r0, [r7, #12]
 8002fc8:	607a      	str	r2, [r7, #4]
 8002fca:	603b      	str	r3, [r7, #0]
 8002fcc:	460b      	mov	r3, r1
 8002fce:	72fb      	strb	r3, [r7, #11]
	emergency = false;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158
	servo->turnFront();
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f001 fe06 	bl	8004bee <_ZN9AppMotion5Servo9turnFrontEv>
	isFwd ? lmotor->setForward() : lmotor->setBackward();
 8002fe2:	7afb      	ldrb	r3, [r7, #11]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d005      	beq.n	8002ff4 <_ZN9AppMotion16MotionController4moveEbmmbb+0x34>
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	4618      	mov	r0, r3
 8002fee:	f001 fed8 	bl	8004da2 <_ZN9AppMotion5Motor10setForwardEv>
 8002ff2:	e004      	b.n	8002ffe <_ZN9AppMotion16MotionController4moveEbmmbb+0x3e>
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f001 feea 	bl	8004dd2 <_ZN9AppMotion5Motor11setBackwardEv>
	isFwd ? rmotor->setForward() : rmotor->setBackward();
 8002ffe:	7afb      	ldrb	r3, [r7, #11]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d005      	beq.n	8003010 <_ZN9AppMotion16MotionController4moveEbmmbb+0x50>
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	4618      	mov	r0, r3
 800300a:	f001 feca 	bl	8004da2 <_ZN9AppMotion5Motor10setForwardEv>
 800300e:	e004      	b.n	800301a <_ZN9AppMotion16MotionController4moveEbmmbb+0x5a>
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	689b      	ldr	r3, [r3, #8]
 8003014:	4618      	mov	r0, r3
 8003016:	f001 fedc 	bl	8004dd2 <_ZN9AppMotion5Motor11setBackwardEv>
	lmotor->setSpeed(speed);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	6839      	ldr	r1, [r7, #0]
 8003020:	4618      	mov	r0, r3
 8003022:	f001 fe1b 	bl	8004c5c <_ZN9AppMotion5Motor8setSpeedEm>
	rmotor->setSpeed(speed);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	6839      	ldr	r1, [r7, #0]
 800302c:	4618      	mov	r0, r3
 800302e:	f001 fe15 	bl	8004c5c <_ZN9AppMotion5Motor8setSpeedEm>
	if (isCrawl)
 8003032:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 8003036:	2b00      	cmp	r3, #0
 8003038:	d00b      	beq.n	8003052 <_ZN9AppMotion16MotionController4moveEbmmbb+0x92>
	{
		lmotor->setSpeed(35);
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	2123      	movs	r1, #35	; 0x23
 8003040:	4618      	mov	r0, r3
 8003042:	f001 fe0b 	bl	8004c5c <_ZN9AppMotion5Motor8setSpeedEm>
		rmotor->setSpeed(35);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	2123      	movs	r1, #35	; 0x23
 800304c:	4618      	mov	r0, r3
 800304e:	f001 fe05 	bl	8004c5c <_ZN9AppMotion5Motor8setSpeedEm>
	}

	uint32_t timeStart = HAL_GetTick();
 8003052:	f004 f84d 	bl	80070f0 <HAL_GetTick>
 8003056:	6478      	str	r0, [r7, #68]	; 0x44
	uint32_t l_encoder_count = lencoder->getCount();
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	691b      	ldr	r3, [r3, #16]
 800305c:	4618      	mov	r0, r3
 800305e:	f001 fee5 	bl	8004e2c <_ZN9AppMotion7Encoder8getCountEv>
 8003062:	6678      	str	r0, [r7, #100]	; 0x64
	uint32_t r_encoder_count = rencoder->getCount();
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	695b      	ldr	r3, [r3, #20]
 8003068:	4618      	mov	r0, r3
 800306a:	f001 fedf 	bl	8004e2c <_ZN9AppMotion7Encoder8getCountEv>
 800306e:	6638      	str	r0, [r7, #96]	; 0x60
	double target = (double) arg / DISTANCE_PER_ENCODER_PULSE;
 8003070:	6878      	ldr	r0, [r7, #4]
 8003072:	f7fd fa47 	bl	8000504 <__aeabi_ui2d>
 8003076:	a3f8      	add	r3, pc, #992	; (adr r3, 8003458 <_ZN9AppMotion16MotionController4moveEbmmbb+0x498>)
 8003078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800307c:	f7fd fbe6 	bl	800084c <__aeabi_ddiv>
 8003080:	4602      	mov	r2, r0
 8003082:	460b      	mov	r3, r1
 8003084:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

	double cur_left = 0, cur_right = 0;
 8003088:	f04f 0200 	mov.w	r2, #0
 800308c:	f04f 0300 	mov.w	r3, #0
 8003090:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 8003094:	f04f 0200 	mov.w	r2, #0
 8003098:	f04f 0300 	mov.w	r3, #0
 800309c:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	float count_left = 0, count_right = 0;
 80030a0:	f04f 0300 	mov.w	r3, #0
 80030a4:	637b      	str	r3, [r7, #52]	; 0x34
 80030a6:	f04f 0300 	mov.w	r3, #0
 80030aa:	633b      	str	r3, [r7, #48]	; 0x30
	double speed_error = 0;
 80030ac:	f04f 0200 	mov.w	r2, #0
 80030b0:	f04f 0300 	mov.w	r3, #0
 80030b4:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	do {

		count_left = (double) lencoder->getDelta(l_encoder_count,
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	691c      	ldr	r4, [r3, #16]
				lencoder->getCount());
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	691b      	ldr	r3, [r3, #16]
		count_left = (double) lencoder->getDelta(l_encoder_count,
 80030c0:	4618      	mov	r0, r3
 80030c2:	f001 feb3 	bl	8004e2c <_ZN9AppMotion7Encoder8getCountEv>
 80030c6:	4603      	mov	r3, r0
 80030c8:	461a      	mov	r2, r3
 80030ca:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80030cc:	4620      	mov	r0, r4
 80030ce:	f001 febb 	bl	8004e48 <_ZN9AppMotion7Encoder8getDeltaEmm>
 80030d2:	4603      	mov	r3, r0
 80030d4:	4618      	mov	r0, r3
 80030d6:	f7fd fa15 	bl	8000504 <__aeabi_ui2d>
 80030da:	4602      	mov	r2, r0
 80030dc:	460b      	mov	r3, r1
 80030de:	4610      	mov	r0, r2
 80030e0:	4619      	mov	r1, r3
 80030e2:	f7fd fd81 	bl	8000be8 <__aeabi_d2f>
 80030e6:	4603      	mov	r3, r0
 80030e8:	637b      	str	r3, [r7, #52]	; 0x34
		count_right = (double) rencoder->getDelta(r_encoder_count,
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	695c      	ldr	r4, [r3, #20]
				rencoder->getCount());
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	695b      	ldr	r3, [r3, #20]
		count_right = (double) rencoder->getDelta(r_encoder_count,
 80030f2:	4618      	mov	r0, r3
 80030f4:	f001 fe9a 	bl	8004e2c <_ZN9AppMotion7Encoder8getCountEv>
 80030f8:	4603      	mov	r3, r0
 80030fa:	461a      	mov	r2, r3
 80030fc:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80030fe:	4620      	mov	r0, r4
 8003100:	f001 fea2 	bl	8004e48 <_ZN9AppMotion7Encoder8getDeltaEmm>
 8003104:	4603      	mov	r3, r0
 8003106:	4618      	mov	r0, r3
 8003108:	f7fd f9fc 	bl	8000504 <__aeabi_ui2d>
 800310c:	4602      	mov	r2, r0
 800310e:	460b      	mov	r3, r1
 8003110:	4610      	mov	r0, r2
 8003112:	4619      	mov	r1, r3
 8003114:	f7fd fd68 	bl	8000be8 <__aeabi_d2f>
 8003118:	4603      	mov	r3, r0
 800311a:	633b      	str	r3, [r7, #48]	; 0x30

		cur_left += count_left;
 800311c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800311e:	f7fd fa13 	bl	8000548 <__aeabi_f2d>
 8003122:	4602      	mov	r2, r0
 8003124:	460b      	mov	r3, r1
 8003126:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800312a:	f7fd f8af 	bl	800028c <__adddf3>
 800312e:	4602      	mov	r2, r0
 8003130:	460b      	mov	r3, r1
 8003132:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
		cur_right += count_right;
 8003136:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003138:	f7fd fa06 	bl	8000548 <__aeabi_f2d>
 800313c:	4602      	mov	r2, r0
 800313e:	460b      	mov	r3, r1
 8003140:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003144:	f7fd f8a2 	bl	800028c <__adddf3>
 8003148:	4602      	mov	r2, r0
 800314a:	460b      	mov	r3, r1
 800314c:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
		speed_error += (count_left - count_right);
 8003150:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8003154:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8003158:	ee77 7a67 	vsub.f32	s15, s14, s15
 800315c:	ee17 0a90 	vmov	r0, s15
 8003160:	f7fd f9f2 	bl	8000548 <__aeabi_f2d>
 8003164:	4602      	mov	r2, r0
 8003166:	460b      	mov	r3, r1
 8003168:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800316c:	f7fd f88e 	bl	800028c <__adddf3>
 8003170:	4602      	mov	r2, r0
 8003172:	460b      	mov	r3, r1
 8003174:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

		if (!isCrawl && !nostop) {
 8003178:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 800317c:	f083 0301 	eor.w	r3, r3, #1
 8003180:	b2db      	uxtb	r3, r3
 8003182:	2b00      	cmp	r3, #0
 8003184:	f000 8113 	beq.w	80033ae <_ZN9AppMotion16MotionController4moveEbmmbb+0x3ee>
 8003188:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 800318c:	f083 0301 	eor.w	r3, r3, #1
 8003190:	b2db      	uxtb	r3, r3
 8003192:	2b00      	cmp	r3, #0
 8003194:	f000 810b 	beq.w	80033ae <_ZN9AppMotion16MotionController4moveEbmmbb+0x3ee>
			if (cur_left > target - 2000 || cur_right > target - 2000) {
 8003198:	f04f 0200 	mov.w	r2, #0
 800319c:	4bb0      	ldr	r3, [pc, #704]	; (8003460 <_ZN9AppMotion16MotionController4moveEbmmbb+0x4a0>)
 800319e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80031a2:	f7fd f871 	bl	8000288 <__aeabi_dsub>
 80031a6:	4602      	mov	r2, r0
 80031a8:	460b      	mov	r3, r1
 80031aa:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80031ae:	f7fd fcb3 	bl	8000b18 <__aeabi_dcmpgt>
 80031b2:	4603      	mov	r3, r0
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d10f      	bne.n	80031d8 <_ZN9AppMotion16MotionController4moveEbmmbb+0x218>
 80031b8:	f04f 0200 	mov.w	r2, #0
 80031bc:	4ba8      	ldr	r3, [pc, #672]	; (8003460 <_ZN9AppMotion16MotionController4moveEbmmbb+0x4a0>)
 80031be:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80031c2:	f7fd f861 	bl	8000288 <__aeabi_dsub>
 80031c6:	4602      	mov	r2, r0
 80031c8:	460b      	mov	r3, r1
 80031ca:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80031ce:	f7fd fca3 	bl	8000b18 <__aeabi_dcmpgt>
 80031d2:	4603      	mov	r3, r0
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d048      	beq.n	800326a <_ZN9AppMotion16MotionController4moveEbmmbb+0x2aa>
				lmotor->setSpeed(map(target - cur_left, 2000, 330, 35, 15));
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	685c      	ldr	r4, [r3, #4]
 80031dc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80031e0:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80031e4:	f7fd f850 	bl	8000288 <__aeabi_dsub>
 80031e8:	4602      	mov	r2, r0
 80031ea:	460b      	mov	r3, r1
 80031ec:	4610      	mov	r0, r2
 80031ee:	4619      	mov	r1, r3
 80031f0:	f7fd fcfa 	bl	8000be8 <__aeabi_d2f>
 80031f4:	4603      	mov	r3, r0
 80031f6:	eeb2 2a0e 	vmov.f32	s4, #46	; 0x41700000  15.0
 80031fa:	eddf 1a9a 	vldr	s3, [pc, #616]	; 8003464 <_ZN9AppMotion16MotionController4moveEbmmbb+0x4a4>
 80031fe:	ed9f 1a9a 	vldr	s2, [pc, #616]	; 8003468 <_ZN9AppMotion16MotionController4moveEbmmbb+0x4a8>
 8003202:	eddf 0a9a 	vldr	s1, [pc, #616]	; 800346c <_ZN9AppMotion16MotionController4moveEbmmbb+0x4ac>
 8003206:	ee00 3a10 	vmov	s0, r3
 800320a:	f7ff fce9 	bl	8002be0 <_ZN9AppMotion16MotionController3mapEfffff>
 800320e:	eef0 7a40 	vmov.f32	s15, s0
 8003212:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003216:	ee17 1a90 	vmov	r1, s15
 800321a:	4620      	mov	r0, r4
 800321c:	f001 fd1e 	bl	8004c5c <_ZN9AppMotion5Motor8setSpeedEm>
				rmotor->setSpeed(map(target - cur_right, 2000, 330, 35, 15));
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	689c      	ldr	r4, [r3, #8]
 8003224:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003228:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800322c:	f7fd f82c 	bl	8000288 <__aeabi_dsub>
 8003230:	4602      	mov	r2, r0
 8003232:	460b      	mov	r3, r1
 8003234:	4610      	mov	r0, r2
 8003236:	4619      	mov	r1, r3
 8003238:	f7fd fcd6 	bl	8000be8 <__aeabi_d2f>
 800323c:	4603      	mov	r3, r0
 800323e:	eeb2 2a0e 	vmov.f32	s4, #46	; 0x41700000  15.0
 8003242:	eddf 1a88 	vldr	s3, [pc, #544]	; 8003464 <_ZN9AppMotion16MotionController4moveEbmmbb+0x4a4>
 8003246:	ed9f 1a88 	vldr	s2, [pc, #544]	; 8003468 <_ZN9AppMotion16MotionController4moveEbmmbb+0x4a8>
 800324a:	eddf 0a88 	vldr	s1, [pc, #544]	; 800346c <_ZN9AppMotion16MotionController4moveEbmmbb+0x4ac>
 800324e:	ee00 3a10 	vmov	s0, r3
 8003252:	f7ff fcc5 	bl	8002be0 <_ZN9AppMotion16MotionController3mapEfffff>
 8003256:	eef0 7a40 	vmov.f32	s15, s0
 800325a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800325e:	ee17 1a90 	vmov	r1, s15
 8003262:	4620      	mov	r0, r4
 8003264:	f001 fcfa 	bl	8004c5c <_ZN9AppMotion5Motor8setSpeedEm>
 8003268:	e0a1      	b.n	80033ae <_ZN9AppMotion16MotionController4moveEbmmbb+0x3ee>
			} else {
				float pid_left = PID_calc(&this->left_pid, target - cur_left,
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	f103 0418 	add.w	r4, r3, #24
 8003270:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003274:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8003278:	f7fd f806 	bl	8000288 <__aeabi_dsub>
 800327c:	4602      	mov	r2, r0
 800327e:	460b      	mov	r3, r1
 8003280:	4610      	mov	r0, r2
 8003282:	4619      	mov	r1, r3
 8003284:	f7fd fcb0 	bl	8000be8 <__aeabi_d2f>
 8003288:	4605      	mov	r5, r0
 800328a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800328e:	f7fd fcab 	bl	8000be8 <__aeabi_d2f>
 8003292:	4603      	mov	r3, r0
 8003294:	ee00 3a90 	vmov	s1, r3
 8003298:	ee00 5a10 	vmov	s0, r5
 800329c:	4620      	mov	r0, r4
 800329e:	f003 f809 	bl	80062b4 <_Z8PID_calcP12pid_type_defff>
 80032a2:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
						target);
				float pid_right = PID_calc(&this->right_pid, target - cur_right,
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	f103 0468 	add.w	r4, r3, #104	; 0x68
 80032ac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80032b0:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80032b4:	f7fc ffe8 	bl	8000288 <__aeabi_dsub>
 80032b8:	4602      	mov	r2, r0
 80032ba:	460b      	mov	r3, r1
 80032bc:	4610      	mov	r0, r2
 80032be:	4619      	mov	r1, r3
 80032c0:	f7fd fc92 	bl	8000be8 <__aeabi_d2f>
 80032c4:	4605      	mov	r5, r0
 80032c6:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80032ca:	f7fd fc8d 	bl	8000be8 <__aeabi_d2f>
 80032ce:	4603      	mov	r3, r0
 80032d0:	ee00 3a90 	vmov	s1, r3
 80032d4:	ee00 5a10 	vmov	s0, r5
 80032d8:	4620      	mov	r0, r4
 80032da:	f002 ffeb 	bl	80062b4 <_Z8PID_calcP12pid_type_defff>
 80032de:	ed87 0a0a 	vstr	s0, [r7, #40]	; 0x28
						target);
				float pid_left_d = PID_calc(&this->sync_left_pid, speed_error,
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	f103 04b8 	add.w	r4, r3, #184	; 0xb8
 80032e8:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80032ec:	f7fd fc7c 	bl	8000be8 <__aeabi_d2f>
 80032f0:	4603      	mov	r3, r0
 80032f2:	eddf 0a5f 	vldr	s1, [pc, #380]	; 8003470 <_ZN9AppMotion16MotionController4moveEbmmbb+0x4b0>
 80032f6:	ee00 3a10 	vmov	s0, r3
 80032fa:	4620      	mov	r0, r4
 80032fc:	f002 ffda 	bl	80062b4 <_Z8PID_calcP12pid_type_defff>
 8003300:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
						0);
				float pid_right_d = PID_calc(&this->sync_right_pid,
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	f503 7484 	add.w	r4, r3, #264	; 0x108
 800330a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800330e:	f7fd fc6b 	bl	8000be8 <__aeabi_d2f>
 8003312:	4603      	mov	r3, r0
 8003314:	ee07 3a90 	vmov	s15, r3
 8003318:	eef1 7a67 	vneg.f32	s15, s15
 800331c:	eddf 0a54 	vldr	s1, [pc, #336]	; 8003470 <_ZN9AppMotion16MotionController4moveEbmmbb+0x4b0>
 8003320:	eeb0 0a67 	vmov.f32	s0, s15
 8003324:	4620      	mov	r0, r4
 8003326:	f002 ffc5 	bl	80062b4 <_Z8PID_calcP12pid_type_defff>
 800332a:	ed87 0a08 	vstr	s0, [r7, #32]
						-speed_error, 0);
				lmotor->_setDutyCycleVal(
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	685b      	ldr	r3, [r3, #4]
						(uint32_t) (
								(pid_left + pid_left_d) > 1000 ?
 8003332:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8003336:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800333a:	ee77 7a27 	vadd.f32	s15, s14, s15
				lmotor->_setDutyCycleVal(
 800333e:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8003474 <_ZN9AppMotion16MotionController4moveEbmmbb+0x4b4>
 8003342:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003346:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800334a:	dd0a      	ble.n	8003362 <_ZN9AppMotion16MotionController4moveEbmmbb+0x3a2>
										(pid_left + pid_left_d) : 1000));
 800334c:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8003350:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003354:	ee77 7a27 	vadd.f32	s15, s14, s15
				lmotor->_setDutyCycleVal(
 8003358:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800335c:	ee17 2a90 	vmov	r2, s15
 8003360:	e001      	b.n	8003366 <_ZN9AppMotion16MotionController4moveEbmmbb+0x3a6>
 8003362:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003366:	4611      	mov	r1, r2
 8003368:	4618      	mov	r0, r3
 800336a:	f001 fcb7 	bl	8004cdc <_ZN9AppMotion5Motor16_setDutyCycleValEm>
				rmotor->_setDutyCycleVal(
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	689b      	ldr	r3, [r3, #8]
						(uint32_t) (
								(pid_right + pid_right_d) > 1000 ?
 8003372:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8003376:	edd7 7a08 	vldr	s15, [r7, #32]
 800337a:	ee77 7a27 	vadd.f32	s15, s14, s15
				rmotor->_setDutyCycleVal(
 800337e:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8003474 <_ZN9AppMotion16MotionController4moveEbmmbb+0x4b4>
 8003382:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003386:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800338a:	dd0a      	ble.n	80033a2 <_ZN9AppMotion16MotionController4moveEbmmbb+0x3e2>
										(pid_right + pid_right_d) : 1000));
 800338c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8003390:	edd7 7a08 	vldr	s15, [r7, #32]
 8003394:	ee77 7a27 	vadd.f32	s15, s14, s15
				rmotor->_setDutyCycleVal(
 8003398:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800339c:	ee17 2a90 	vmov	r2, s15
 80033a0:	e001      	b.n	80033a6 <_ZN9AppMotion16MotionController4moveEbmmbb+0x3e6>
 80033a2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80033a6:	4611      	mov	r1, r2
 80033a8:	4618      	mov	r0, r3
 80033aa:	f001 fc97 	bl	8004cdc <_ZN9AppMotion5Motor16_setDutyCycleValEm>
			}
		}
		l_encoder_count = lencoder->getCount();
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	691b      	ldr	r3, [r3, #16]
 80033b2:	4618      	mov	r0, r3
 80033b4:	f001 fd3a 	bl	8004e2c <_ZN9AppMotion7Encoder8getCountEv>
 80033b8:	6678      	str	r0, [r7, #100]	; 0x64
		r_encoder_count = rencoder->getCount();
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	695b      	ldr	r3, [r3, #20]
 80033be:	4618      	mov	r0, r3
 80033c0:	f001 fd34 	bl	8004e2c <_ZN9AppMotion7Encoder8getCountEv>
 80033c4:	6638      	str	r0, [r7, #96]	; 0x60

		if ((cur_left > target && cur_right > target) || emergency)
 80033c6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80033ca:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80033ce:	f7fd fba3 	bl	8000b18 <__aeabi_dcmpgt>
 80033d2:	4603      	mov	r3, r0
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d008      	beq.n	80033ea <_ZN9AppMotion16MotionController4moveEbmmbb+0x42a>
 80033d8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80033dc:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80033e0:	f7fd fb9a 	bl	8000b18 <__aeabi_dcmpgt>
 80033e4:	4603      	mov	r3, r0
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d104      	bne.n	80033f4 <_ZN9AppMotion16MotionController4moveEbmmbb+0x434>
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	f893 3158 	ldrb.w	r3, [r3, #344]	; 0x158
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d028      	beq.n	8003446 <_ZN9AppMotion16MotionController4moveEbmmbb+0x486>
		{
			sensor_data.last_halt_val = (uint32_t) (cur_left>cur_right?cur_right:cur_left) * DISTANCE_PER_ENCODER_PULSE;
 80033f4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80033f8:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80033fc:	f7fd fb8c 	bl	8000b18 <__aeabi_dcmpgt>
 8003400:	4603      	mov	r3, r0
 8003402:	2b00      	cmp	r3, #0
 8003404:	d008      	beq.n	8003418 <_ZN9AppMotion16MotionController4moveEbmmbb+0x458>
 8003406:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800340a:	f7fd fbcd 	bl	8000ba8 <__aeabi_d2uiz>
 800340e:	4603      	mov	r3, r0
 8003410:	4618      	mov	r0, r3
 8003412:	f7fd f877 	bl	8000504 <__aeabi_ui2d>
 8003416:	e007      	b.n	8003428 <_ZN9AppMotion16MotionController4moveEbmmbb+0x468>
 8003418:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800341c:	f7fd fbc4 	bl	8000ba8 <__aeabi_d2uiz>
 8003420:	4603      	mov	r3, r0
 8003422:	4618      	mov	r0, r3
 8003424:	f7fd f86e 	bl	8000504 <__aeabi_ui2d>
 8003428:	a30b      	add	r3, pc, #44	; (adr r3, 8003458 <_ZN9AppMotion16MotionController4moveEbmmbb+0x498>)
 800342a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800342e:	f7fd f8e3 	bl	80005f8 <__aeabi_dmul>
 8003432:	4602      	mov	r2, r0
 8003434:	460b      	mov	r3, r1
 8003436:	4610      	mov	r0, r2
 8003438:	4619      	mov	r1, r3
 800343a:	f7fd fbb5 	bl	8000ba8 <__aeabi_d2uiz>
 800343e:	4603      	mov	r3, r0
 8003440:	4a0d      	ldr	r2, [pc, #52]	; (8003478 <_ZN9AppMotion16MotionController4moveEbmmbb+0x4b8>)
 8003442:	6353      	str	r3, [r2, #52]	; 0x34
			break;
 8003444:	e01a      	b.n	800347c <_ZN9AppMotion16MotionController4moveEbmmbb+0x4bc>
		}


		osDelay(10);
 8003446:	200a      	movs	r0, #10
 8003448:	f009 fd2e 	bl	800cea8 <osDelay>
		sensor_data.last_halt_val = arg;
 800344c:	4a0a      	ldr	r2, [pc, #40]	; (8003478 <_ZN9AppMotion16MotionController4moveEbmmbb+0x4b8>)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6353      	str	r3, [r2, #52]	; 0x34
		osThreadYield();
 8003452:	f009 fd09 	bl	800ce68 <osThreadYield>
 8003456:	e62f      	b.n	80030b8 <_ZN9AppMotion16MotionController4moveEbmmbb+0xf8>
 8003458:	c65572b1 	.word	0xc65572b1
 800345c:	3f8c04ac 	.word	0x3f8c04ac
 8003460:	409f4000 	.word	0x409f4000
 8003464:	420c0000 	.word	0x420c0000
 8003468:	43a50000 	.word	0x43a50000
 800346c:	44fa0000 	.word	0x44fa0000
 8003470:	00000000 	.word	0x00000000
 8003474:	447a0000 	.word	0x447a0000
 8003478:	20000668 	.word	0x20000668

	} while (1);
	uint8_t buf[10] = { 0 };
 800347c:	2300      	movs	r3, #0
 800347e:	617b      	str	r3, [r7, #20]
 8003480:	f107 0318 	add.w	r3, r7, #24
 8003484:	2200      	movs	r2, #0
 8003486:	601a      	str	r2, [r3, #0]
 8003488:	809a      	strh	r2, [r3, #4]
	snprintf((char*) buf, sizeof(buf), "%4.0f", cur_left - cur_right);
 800348a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800348e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003492:	f7fc fef9 	bl	8000288 <__aeabi_dsub>
 8003496:	4602      	mov	r2, r0
 8003498:	460b      	mov	r3, r1
 800349a:	f107 0014 	add.w	r0, r7, #20
 800349e:	e9cd 2300 	strd	r2, r3, [sp]
 80034a2:	4a0f      	ldr	r2, [pc, #60]	; (80034e0 <_ZN9AppMotion16MotionController4moveEbmmbb+0x520>)
 80034a4:	210a      	movs	r1, #10
 80034a6:	f00e feab 	bl	8012200 <sniprintf>
	OLED_ShowString(85, 48, (uint8_t*) &buf);
 80034aa:	f107 0314 	add.w	r3, r7, #20
 80034ae:	461a      	mov	r2, r3
 80034b0:	2130      	movs	r1, #48	; 0x30
 80034b2:	2055      	movs	r0, #85	; 0x55
 80034b4:	f7fe fb22 	bl	8001afc <OLED_ShowString>
	OLED_Refresh_Gram();
 80034b8:	f7fe f8d6 	bl	8001668 <OLED_Refresh_Gram>
	emergency = false;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2200      	movs	r2, #0
 80034c0:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158
	lmotor->halt();
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	4618      	mov	r0, r3
 80034ca:	f001 fc3d 	bl	8004d48 <_ZN9AppMotion5Motor4haltEv>
	rmotor->halt();
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	4618      	mov	r0, r3
 80034d4:	f001 fc38 	bl	8004d48 <_ZN9AppMotion5Motor4haltEv>
}
 80034d8:	bf00      	nop
 80034da:	3768      	adds	r7, #104	; 0x68
 80034dc:	46bd      	mov	sp, r7
 80034de:	bdb0      	pop	{r4, r5, r7, pc}
 80034e0:	0801458c 	.word	0x0801458c
 80034e4:	00000000 	.word	0x00000000

080034e8 <_ZN9AppMotion16MotionController4turnEbbbm>:

void MotionController::turn(bool isRight, bool isFwd, bool arc, uint32_t arg) {
 80034e8:	b590      	push	{r4, r7, lr}
 80034ea:	ed2d 8b02 	vpush	{d8}
 80034ee:	b093      	sub	sp, #76	; 0x4c
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
 80034f4:	4608      	mov	r0, r1
 80034f6:	4611      	mov	r1, r2
 80034f8:	461a      	mov	r2, r3
 80034fa:	4603      	mov	r3, r0
 80034fc:	70fb      	strb	r3, [r7, #3]
 80034fe:	460b      	mov	r3, r1
 8003500:	70bb      	strb	r3, [r7, #2]
 8003502:	4613      	mov	r3, r2
 8003504:	707b      	strb	r3, [r7, #1]
	emergency = false;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2200      	movs	r2, #0
 800350a:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158
	isRight ? servo->turnRight() : servo->turnLeft();
 800350e:	78fb      	ldrb	r3, [r7, #3]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d005      	beq.n	8003520 <_ZN9AppMotion16MotionController4turnEbbbm+0x38>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	68db      	ldr	r3, [r3, #12]
 8003518:	4618      	mov	r0, r3
 800351a:	f001 fb57 	bl	8004bcc <_ZN9AppMotion5Servo9turnRightEv>
 800351e:	e004      	b.n	800352a <_ZN9AppMotion16MotionController4turnEbbbm+0x42>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	68db      	ldr	r3, [r3, #12]
 8003524:	4618      	mov	r0, r3
 8003526:	f001 fb40 	bl	8004baa <_ZN9AppMotion5Servo8turnLeftEv>

	isFwd ? lmotor->setForward() : lmotor->setBackward();
 800352a:	78bb      	ldrb	r3, [r7, #2]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d005      	beq.n	800353c <_ZN9AppMotion16MotionController4turnEbbbm+0x54>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	4618      	mov	r0, r3
 8003536:	f001 fc34 	bl	8004da2 <_ZN9AppMotion5Motor10setForwardEv>
 800353a:	e004      	b.n	8003546 <_ZN9AppMotion16MotionController4turnEbbbm+0x5e>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	4618      	mov	r0, r3
 8003542:	f001 fc46 	bl	8004dd2 <_ZN9AppMotion5Motor11setBackwardEv>
	isFwd ? rmotor->setForward() : rmotor->setBackward();
 8003546:	78bb      	ldrb	r3, [r7, #2]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d005      	beq.n	8003558 <_ZN9AppMotion16MotionController4turnEbbbm+0x70>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	4618      	mov	r0, r3
 8003552:	f001 fc26 	bl	8004da2 <_ZN9AppMotion5Motor10setForwardEv>
 8003556:	e004      	b.n	8003562 <_ZN9AppMotion16MotionController4turnEbbbm+0x7a>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	4618      	mov	r0, r3
 800355e:	f001 fc38 	bl	8004dd2 <_ZN9AppMotion5Motor11setBackwardEv>
	isRight ? lmotor->setSpeed(51) : lmotor->setSpeed(11);
 8003562:	78fb      	ldrb	r3, [r7, #3]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d006      	beq.n	8003576 <_ZN9AppMotion16MotionController4turnEbbbm+0x8e>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	2133      	movs	r1, #51	; 0x33
 800356e:	4618      	mov	r0, r3
 8003570:	f001 fb74 	bl	8004c5c <_ZN9AppMotion5Motor8setSpeedEm>
 8003574:	e005      	b.n	8003582 <_ZN9AppMotion16MotionController4turnEbbbm+0x9a>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	210b      	movs	r1, #11
 800357c:	4618      	mov	r0, r3
 800357e:	f001 fb6d 	bl	8004c5c <_ZN9AppMotion5Motor8setSpeedEm>
	isRight ? rmotor->setSpeed(11) : rmotor->setSpeed(51);
 8003582:	78fb      	ldrb	r3, [r7, #3]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d006      	beq.n	8003596 <_ZN9AppMotion16MotionController4turnEbbbm+0xae>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	210b      	movs	r1, #11
 800358e:	4618      	mov	r0, r3
 8003590:	f001 fb64 	bl	8004c5c <_ZN9AppMotion5Motor8setSpeedEm>
 8003594:	e005      	b.n	80035a2 <_ZN9AppMotion16MotionController4turnEbbbm+0xba>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	2133      	movs	r1, #51	; 0x33
 800359c:	4618      	mov	r0, r3
 800359e:	f001 fb5d 	bl	8004c5c <_ZN9AppMotion5Motor8setSpeedEm>
	if(arc) // arc increases turn radius
 80035a2:	787b      	ldrb	r3, [r7, #1]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d01f      	beq.n	80035e8 <_ZN9AppMotion16MotionController4turnEbbbm+0x100>
	{
		isRight ? lmotor->setSpeed(55) : lmotor->setSpeed(20);
 80035a8:	78fb      	ldrb	r3, [r7, #3]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d006      	beq.n	80035bc <_ZN9AppMotion16MotionController4turnEbbbm+0xd4>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	2137      	movs	r1, #55	; 0x37
 80035b4:	4618      	mov	r0, r3
 80035b6:	f001 fb51 	bl	8004c5c <_ZN9AppMotion5Motor8setSpeedEm>
 80035ba:	e005      	b.n	80035c8 <_ZN9AppMotion16MotionController4turnEbbbm+0xe0>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	2114      	movs	r1, #20
 80035c2:	4618      	mov	r0, r3
 80035c4:	f001 fb4a 	bl	8004c5c <_ZN9AppMotion5Motor8setSpeedEm>
		isRight ? rmotor->setSpeed(20) : rmotor->setSpeed(55);
 80035c8:	78fb      	ldrb	r3, [r7, #3]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d006      	beq.n	80035dc <_ZN9AppMotion16MotionController4turnEbbbm+0xf4>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	2114      	movs	r1, #20
 80035d4:	4618      	mov	r0, r3
 80035d6:	f001 fb41 	bl	8004c5c <_ZN9AppMotion5Motor8setSpeedEm>
 80035da:	e005      	b.n	80035e8 <_ZN9AppMotion16MotionController4turnEbbbm+0x100>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	2137      	movs	r1, #55	; 0x37
 80035e2:	4618      	mov	r0, r3
 80035e4:	f001 fb3a 	bl	8004c5c <_ZN9AppMotion5Motor8setSpeedEm>
	}
	uint32_t timeNow = HAL_GetTick();
 80035e8:	f003 fd82 	bl	80070f0 <HAL_GetTick>
 80035ec:	6378      	str	r0, [r7, #52]	; 0x34
	uint32_t timeStart = timeNow;
 80035ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035f0:	633b      	str	r3, [r7, #48]	; 0x30
	uint8_t buf[30] = { 0 };
 80035f2:	2300      	movs	r3, #0
 80035f4:	60bb      	str	r3, [r7, #8]
 80035f6:	f107 030c 	add.w	r3, r7, #12
 80035fa:	2200      	movs	r2, #0
 80035fc:	601a      	str	r2, [r3, #0]
 80035fe:	605a      	str	r2, [r3, #4]
 8003600:	609a      	str	r2, [r3, #8]
 8003602:	60da      	str	r2, [r3, #12]
 8003604:	611a      	str	r2, [r3, #16]
 8003606:	615a      	str	r2, [r3, #20]
 8003608:	831a      	strh	r2, [r3, #24]
	float target_yaw = 0;
 800360a:	f04f 0300 	mov.w	r3, #0
 800360e:	647b      	str	r3, [r7, #68]	; 0x44
	float req = ((float) arg) ;
 8003610:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003612:	ee07 3a90 	vmov	s15, r3
 8003616:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800361a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	float cur = sensor_data.yaw_abs; //[-179,180]
 800361e:	4ba4      	ldr	r3, [pc, #656]	; (80038b0 <_ZN9AppMotion16MotionController4turnEbbbm+0x3c8>)
 8003620:	691b      	ldr	r3, [r3, #16]
 8003622:	643b      	str	r3, [r7, #64]	; 0x40
	float prev_yaw = cur;
 8003624:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003626:	62bb      	str	r3, [r7, #40]	; 0x28
	float last_target_dist = 99999.0f; // overshoot protection
 8003628:	4ba2      	ldr	r3, [pc, #648]	; (80038b4 <_ZN9AppMotion16MotionController4turnEbbbm+0x3cc>)
 800362a:	63fb      	str	r3, [r7, #60]	; 0x3c
	float bwd_diffn_delta = 0;
 800362c:	f04f 0300 	mov.w	r3, #0
 8003630:	63bb      	str	r3, [r7, #56]	; 0x38

	if((!isRight && isFwd) || (isRight && !isFwd) ) //increase
 8003632:	78fb      	ldrb	r3, [r7, #3]
 8003634:	f083 0301 	eor.w	r3, r3, #1
 8003638:	b2db      	uxtb	r3, r3
 800363a:	2b00      	cmp	r3, #0
 800363c:	d002      	beq.n	8003644 <_ZN9AppMotion16MotionController4turnEbbbm+0x15c>
 800363e:	78bb      	ldrb	r3, [r7, #2]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d108      	bne.n	8003656 <_ZN9AppMotion16MotionController4turnEbbbm+0x16e>
 8003644:	78fb      	ldrb	r3, [r7, #3]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d02c      	beq.n	80036a4 <_ZN9AppMotion16MotionController4turnEbbbm+0x1bc>
 800364a:	78bb      	ldrb	r3, [r7, #2]
 800364c:	f083 0301 	eor.w	r3, r3, #1
 8003650:	b2db      	uxtb	r3, r3
 8003652:	2b00      	cmp	r3, #0
 8003654:	d026      	beq.n	80036a4 <_ZN9AppMotion16MotionController4turnEbbbm+0x1bc>
	{
		if((req + cur) > 179) target_yaw = -180 + (req - (180 - cur));
 8003656:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800365a:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800365e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003662:	ed9f 7a95 	vldr	s14, [pc, #596]	; 80038b8 <_ZN9AppMotion16MotionController4turnEbbbm+0x3d0>
 8003666:	eef4 7ac7 	vcmpe.f32	s15, s14
 800366a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800366e:	dd10      	ble.n	8003692 <_ZN9AppMotion16MotionController4turnEbbbm+0x1aa>
 8003670:	ed9f 7a92 	vldr	s14, [pc, #584]	; 80038bc <_ZN9AppMotion16MotionController4turnEbbbm+0x3d4>
 8003674:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8003678:	ee77 7a67 	vsub.f32	s15, s14, s15
 800367c:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8003680:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003684:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 80038bc <_ZN9AppMotion16MotionController4turnEbbbm+0x3d4>
 8003688:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800368c:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
 8003690:	e02e      	b.n	80036f0 <_ZN9AppMotion16MotionController4turnEbbbm+0x208>
		else target_yaw = req + cur;
 8003692:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8003696:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800369a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800369e:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
		if((req + cur) > 179) target_yaw = -180 + (req - (180 - cur));
 80036a2:	e025      	b.n	80036f0 <_ZN9AppMotion16MotionController4turnEbbbm+0x208>
	}
	else
	{
		if((cur - req) < -179) target_yaw = 180 - (req + (-180 - cur));
 80036a4:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80036a8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80036ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80036b0:	ed9f 7a83 	vldr	s14, [pc, #524]	; 80038c0 <_ZN9AppMotion16MotionController4turnEbbbm+0x3d8>
 80036b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80036b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036bc:	d510      	bpl.n	80036e0 <_ZN9AppMotion16MotionController4turnEbbbm+0x1f8>
 80036be:	ed9f 7a81 	vldr	s14, [pc, #516]	; 80038c4 <_ZN9AppMotion16MotionController4turnEbbbm+0x3dc>
 80036c2:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80036c6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80036ca:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80036ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036d2:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 80038bc <_ZN9AppMotion16MotionController4turnEbbbm+0x3d4>
 80036d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80036da:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
 80036de:	e007      	b.n	80036f0 <_ZN9AppMotion16MotionController4turnEbbbm+0x208>
		else target_yaw = cur - req;
 80036e0:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80036e4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80036e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80036ec:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	}

	do{
		if (abs(target_yaw - cur) < 45 ) {
 80036f0:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 80036f4:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80036f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80036fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003700:	ee17 3a90 	vmov	r3, s15
 8003704:	2b00      	cmp	r3, #0
 8003706:	bfb8      	it	lt
 8003708:	425b      	neglt	r3, r3
 800370a:	2b2c      	cmp	r3, #44	; 0x2c
 800370c:	dc54      	bgt.n	80037b8 <_ZN9AppMotion16MotionController4turnEbbbm+0x2d0>
			if(isRight) lmotor->setSpeed((uint32_t)map(abs(target_yaw - cur), 45, 0, 30, 15));
 800370e:	78fb      	ldrb	r3, [r7, #3]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d028      	beq.n	8003766 <_ZN9AppMotion16MotionController4turnEbbbm+0x27e>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	685c      	ldr	r4, [r3, #4]
 8003718:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800371c:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8003720:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003724:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003728:	ee17 3a90 	vmov	r3, s15
 800372c:	2b00      	cmp	r3, #0
 800372e:	bfb8      	it	lt
 8003730:	425b      	neglt	r3, r3
 8003732:	ee07 3a90 	vmov	s15, r3
 8003736:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800373a:	eeb2 2a0e 	vmov.f32	s4, #46	; 0x41700000  15.0
 800373e:	eef3 1a0e 	vmov.f32	s3, #62	; 0x41f00000  30.0
 8003742:	ed9f 1a61 	vldr	s2, [pc, #388]	; 80038c8 <_ZN9AppMotion16MotionController4turnEbbbm+0x3e0>
 8003746:	eddf 0a61 	vldr	s1, [pc, #388]	; 80038cc <_ZN9AppMotion16MotionController4turnEbbbm+0x3e4>
 800374a:	eeb0 0a67 	vmov.f32	s0, s15
 800374e:	f7ff fa47 	bl	8002be0 <_ZN9AppMotion16MotionController3mapEfffff>
 8003752:	eef0 7a40 	vmov.f32	s15, s0
 8003756:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800375a:	ee17 1a90 	vmov	r1, s15
 800375e:	4620      	mov	r0, r4
 8003760:	f001 fa7c 	bl	8004c5c <_ZN9AppMotion5Motor8setSpeedEm>
 8003764:	e0f6      	b.n	8003954 <_ZN9AppMotion16MotionController4turnEbbbm+0x46c>

			else rmotor->setSpeed((uint32_t)map(abs(target_yaw - cur), 45, 0, 30, 15));
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	689c      	ldr	r4, [r3, #8]
 800376a:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800376e:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8003772:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003776:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800377a:	ee17 3a90 	vmov	r3, s15
 800377e:	2b00      	cmp	r3, #0
 8003780:	bfb8      	it	lt
 8003782:	425b      	neglt	r3, r3
 8003784:	ee07 3a90 	vmov	s15, r3
 8003788:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800378c:	eeb2 2a0e 	vmov.f32	s4, #46	; 0x41700000  15.0
 8003790:	eef3 1a0e 	vmov.f32	s3, #62	; 0x41f00000  30.0
 8003794:	ed9f 1a4c 	vldr	s2, [pc, #304]	; 80038c8 <_ZN9AppMotion16MotionController4turnEbbbm+0x3e0>
 8003798:	eddf 0a4c 	vldr	s1, [pc, #304]	; 80038cc <_ZN9AppMotion16MotionController4turnEbbbm+0x3e4>
 800379c:	eeb0 0a67 	vmov.f32	s0, s15
 80037a0:	f7ff fa1e 	bl	8002be0 <_ZN9AppMotion16MotionController3mapEfffff>
 80037a4:	eef0 7a40 	vmov.f32	s15, s0
 80037a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80037ac:	ee17 1a90 	vmov	r1, s15
 80037b0:	4620      	mov	r0, r4
 80037b2:	f001 fa53 	bl	8004c5c <_ZN9AppMotion5Motor8setSpeedEm>
 80037b6:	e0cd      	b.n	8003954 <_ZN9AppMotion16MotionController4turnEbbbm+0x46c>
		}
		else if(fmod(abs(abs(target_yaw) - abs(cur)), 180) < 45 )
 80037b8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80037bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80037c0:	ee17 3a90 	vmov	r3, s15
 80037c4:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80037c8:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80037cc:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80037d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80037d4:	ee17 3a90 	vmov	r3, s15
 80037d8:	2b00      	cmp	r3, #0
 80037da:	bfb8      	it	lt
 80037dc:	425b      	neglt	r3, r3
 80037de:	1ad3      	subs	r3, r2, r3
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	bfb8      	it	lt
 80037e4:	425b      	neglt	r3, r3
 80037e6:	4618      	mov	r0, r3
 80037e8:	f7fc fe9c 	bl	8000524 <__aeabi_i2d>
 80037ec:	4602      	mov	r2, r0
 80037ee:	460b      	mov	r3, r1
 80037f0:	ed9f 1b2d 	vldr	d1, [pc, #180]	; 80038a8 <_ZN9AppMotion16MotionController4turnEbbbm+0x3c0>
 80037f4:	ec43 2b10 	vmov	d0, r2, r3
 80037f8:	f00c fa20 	bl	800fc3c <fmod>
 80037fc:	ec51 0b10 	vmov	r0, r1, d0
 8003800:	2301      	movs	r3, #1
 8003802:	461c      	mov	r4, r3
 8003804:	f04f 0200 	mov.w	r2, #0
 8003808:	4b31      	ldr	r3, [pc, #196]	; (80038d0 <_ZN9AppMotion16MotionController4turnEbbbm+0x3e8>)
 800380a:	f7fd f967 	bl	8000adc <__aeabi_dcmplt>
 800380e:	4603      	mov	r3, r0
 8003810:	2b00      	cmp	r3, #0
 8003812:	d101      	bne.n	8003818 <_ZN9AppMotion16MotionController4turnEbbbm+0x330>
 8003814:	2300      	movs	r3, #0
 8003816:	461c      	mov	r4, r3
 8003818:	b2e3      	uxtb	r3, r4
 800381a:	2b00      	cmp	r3, #0
 800381c:	f000 809a 	beq.w	8003954 <_ZN9AppMotion16MotionController4turnEbbbm+0x46c>
		{
			if(isRight) lmotor->setSpeed((uint32_t)map(fmod(abs(abs(target_yaw) - abs(cur)), 180), 45, 0, 30, 15));
 8003820:	78fb      	ldrb	r3, [r7, #3]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d056      	beq.n	80038d4 <_ZN9AppMotion16MotionController4turnEbbbm+0x3ec>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	685c      	ldr	r4, [r3, #4]
 800382a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800382e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003832:	ee17 3a90 	vmov	r3, s15
 8003836:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800383a:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800383e:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8003842:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003846:	ee17 3a90 	vmov	r3, s15
 800384a:	2b00      	cmp	r3, #0
 800384c:	bfb8      	it	lt
 800384e:	425b      	neglt	r3, r3
 8003850:	1ad3      	subs	r3, r2, r3
 8003852:	2b00      	cmp	r3, #0
 8003854:	bfb8      	it	lt
 8003856:	425b      	neglt	r3, r3
 8003858:	4618      	mov	r0, r3
 800385a:	f7fc fe63 	bl	8000524 <__aeabi_i2d>
 800385e:	4602      	mov	r2, r0
 8003860:	460b      	mov	r3, r1
 8003862:	ed9f 1b11 	vldr	d1, [pc, #68]	; 80038a8 <_ZN9AppMotion16MotionController4turnEbbbm+0x3c0>
 8003866:	ec43 2b10 	vmov	d0, r2, r3
 800386a:	f00c f9e7 	bl	800fc3c <fmod>
 800386e:	ec53 2b10 	vmov	r2, r3, d0
 8003872:	4610      	mov	r0, r2
 8003874:	4619      	mov	r1, r3
 8003876:	f7fd f9b7 	bl	8000be8 <__aeabi_d2f>
 800387a:	4603      	mov	r3, r0
 800387c:	eeb2 2a0e 	vmov.f32	s4, #46	; 0x41700000  15.0
 8003880:	eef3 1a0e 	vmov.f32	s3, #62	; 0x41f00000  30.0
 8003884:	ed9f 1a10 	vldr	s2, [pc, #64]	; 80038c8 <_ZN9AppMotion16MotionController4turnEbbbm+0x3e0>
 8003888:	eddf 0a10 	vldr	s1, [pc, #64]	; 80038cc <_ZN9AppMotion16MotionController4turnEbbbm+0x3e4>
 800388c:	ee00 3a10 	vmov	s0, r3
 8003890:	f7ff f9a6 	bl	8002be0 <_ZN9AppMotion16MotionController3mapEfffff>
 8003894:	eef0 7a40 	vmov.f32	s15, s0
 8003898:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800389c:	ee17 1a90 	vmov	r1, s15
 80038a0:	4620      	mov	r0, r4
 80038a2:	f001 f9db 	bl	8004c5c <_ZN9AppMotion5Motor8setSpeedEm>
 80038a6:	e055      	b.n	8003954 <_ZN9AppMotion16MotionController4turnEbbbm+0x46c>
 80038a8:	00000000 	.word	0x00000000
 80038ac:	40668000 	.word	0x40668000
 80038b0:	20000668 	.word	0x20000668
 80038b4:	47c34f80 	.word	0x47c34f80
 80038b8:	43330000 	.word	0x43330000
 80038bc:	43340000 	.word	0x43340000
 80038c0:	c3330000 	.word	0xc3330000
 80038c4:	c3340000 	.word	0xc3340000
 80038c8:	00000000 	.word	0x00000000
 80038cc:	42340000 	.word	0x42340000
 80038d0:	40468000 	.word	0x40468000

			else rmotor->setSpeed((uint32_t)map(fmod(abs(abs(target_yaw) - abs(cur)), 180), 45, 0, 30, 15));
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	689c      	ldr	r4, [r3, #8]
 80038d8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80038dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80038e0:	ee17 3a90 	vmov	r3, s15
 80038e4:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80038e8:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80038ec:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80038f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80038f4:	ee17 3a90 	vmov	r3, s15
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	bfb8      	it	lt
 80038fc:	425b      	neglt	r3, r3
 80038fe:	1ad3      	subs	r3, r2, r3
 8003900:	2b00      	cmp	r3, #0
 8003902:	bfb8      	it	lt
 8003904:	425b      	neglt	r3, r3
 8003906:	4618      	mov	r0, r3
 8003908:	f7fc fe0c 	bl	8000524 <__aeabi_i2d>
 800390c:	4602      	mov	r2, r0
 800390e:	460b      	mov	r3, r1
 8003910:	ed9f 1b93 	vldr	d1, [pc, #588]	; 8003b60 <_ZN9AppMotion16MotionController4turnEbbbm+0x678>
 8003914:	ec43 2b10 	vmov	d0, r2, r3
 8003918:	f00c f990 	bl	800fc3c <fmod>
 800391c:	ec53 2b10 	vmov	r2, r3, d0
 8003920:	4610      	mov	r0, r2
 8003922:	4619      	mov	r1, r3
 8003924:	f7fd f960 	bl	8000be8 <__aeabi_d2f>
 8003928:	4603      	mov	r3, r0
 800392a:	eeb2 2a0e 	vmov.f32	s4, #46	; 0x41700000  15.0
 800392e:	eef3 1a0e 	vmov.f32	s3, #62	; 0x41f00000  30.0
 8003932:	ed9f 1a8d 	vldr	s2, [pc, #564]	; 8003b68 <_ZN9AppMotion16MotionController4turnEbbbm+0x680>
 8003936:	eddf 0a8d 	vldr	s1, [pc, #564]	; 8003b6c <_ZN9AppMotion16MotionController4turnEbbbm+0x684>
 800393a:	ee00 3a10 	vmov	s0, r3
 800393e:	f7ff f94f 	bl	8002be0 <_ZN9AppMotion16MotionController3mapEfffff>
 8003942:	eef0 7a40 	vmov.f32	s15, s0
 8003946:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800394a:	ee17 1a90 	vmov	r1, s15
 800394e:	4620      	mov	r0, r4
 8003950:	f001 f984 	bl	8004c5c <_ZN9AppMotion5Motor8setSpeedEm>
		}

		timeNow = HAL_GetTick();
 8003954:	f003 fbcc 	bl	80070f0 <HAL_GetTick>
 8003958:	6378      	str	r0, [r7, #52]	; 0x34
		 * abs(sensor_data.yaw_abs - sensor_data.yaw_abs_prev) is STEP SIZE
		 * 50 is TIME PER STEP
		 * sgn(sensor_data.yaw_abs - sensor_data.yaw_abs_prev) is DIRECTION
		 *
		 * */
		if(timeNow != sensor_data.yaw_abs_time)
 800395a:	4b85      	ldr	r3, [pc, #532]	; (8003b70 <_ZN9AppMotion16MotionController4turnEbbbm+0x688>)
 800395c:	699b      	ldr	r3, [r3, #24]
 800395e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003960:	429a      	cmp	r2, r3
 8003962:	d028      	beq.n	80039b6 <_ZN9AppMotion16MotionController4turnEbbbm+0x4ce>
			bwd_diffn_delta = abs(sensor_data.yaw_abs - sensor_data.yaw_abs_prev) * (float)(abs(timeNow - sensor_data.yaw_abs_time)/80);
 8003964:	4b82      	ldr	r3, [pc, #520]	; (8003b70 <_ZN9AppMotion16MotionController4turnEbbbm+0x688>)
 8003966:	ed93 7a04 	vldr	s14, [r3, #16]
 800396a:	4b81      	ldr	r3, [pc, #516]	; (8003b70 <_ZN9AppMotion16MotionController4turnEbbbm+0x688>)
 800396c:	edd3 7a05 	vldr	s15, [r3, #20]
 8003970:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003974:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003978:	ee17 3a90 	vmov	r3, s15
 800397c:	2b00      	cmp	r3, #0
 800397e:	bfb8      	it	lt
 8003980:	425b      	neglt	r3, r3
 8003982:	ee07 3a90 	vmov	s15, r3
 8003986:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800398a:	4b79      	ldr	r3, [pc, #484]	; (8003b70 <_ZN9AppMotion16MotionController4turnEbbbm+0x688>)
 800398c:	699b      	ldr	r3, [r3, #24]
 800398e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003990:	1ad3      	subs	r3, r2, r3
 8003992:	2b00      	cmp	r3, #0
 8003994:	bfb8      	it	lt
 8003996:	425b      	neglt	r3, r3
 8003998:	4a76      	ldr	r2, [pc, #472]	; (8003b74 <_ZN9AppMotion16MotionController4turnEbbbm+0x68c>)
 800399a:	fb82 1203 	smull	r1, r2, r2, r3
 800399e:	1152      	asrs	r2, r2, #5
 80039a0:	17db      	asrs	r3, r3, #31
 80039a2:	1ad3      	subs	r3, r2, r3
 80039a4:	ee07 3a90 	vmov	s15, r3
 80039a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80039ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039b0:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
 80039b4:	e002      	b.n	80039bc <_ZN9AppMotion16MotionController4turnEbbbm+0x4d4>
		else
			bwd_diffn_delta = 0;
 80039b6:	f04f 0300 	mov.w	r3, #0
 80039ba:	63bb      	str	r3, [r7, #56]	; 0x38
		cur = sensor_data.yaw_abs +  (bwd_diffn_delta * sgn(sensor_data.yaw_abs - sensor_data.yaw_abs_prev)); // already dlpf and qtn filtered
 80039bc:	4b6c      	ldr	r3, [pc, #432]	; (8003b70 <_ZN9AppMotion16MotionController4turnEbbbm+0x688>)
 80039be:	ed93 8a04 	vldr	s16, [r3, #16]
 80039c2:	4b6b      	ldr	r3, [pc, #428]	; (8003b70 <_ZN9AppMotion16MotionController4turnEbbbm+0x688>)
 80039c4:	ed93 7a04 	vldr	s14, [r3, #16]
 80039c8:	4b69      	ldr	r3, [pc, #420]	; (8003b70 <_ZN9AppMotion16MotionController4turnEbbbm+0x688>)
 80039ca:	edd3 7a05 	vldr	s15, [r3, #20]
 80039ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80039d2:	eeb0 0a67 	vmov.f32	s0, s15
 80039d6:	f001 fa6d 	bl	8004eb4 <_ZN9AppMotion16MotionController3sgnIfEEiT_>
 80039da:	ee07 0a90 	vmov	s15, r0
 80039de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80039e2:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80039e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039ea:	ee78 7a27 	vadd.f32	s15, s16, s15
 80039ee:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
		sensor_data.yaw_cur_dbg = cur;
 80039f2:	4a5f      	ldr	r2, [pc, #380]	; (8003b70 <_ZN9AppMotion16MotionController4turnEbbbm+0x688>)
 80039f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039f6:	61d3      	str	r3, [r2, #28]
		prev_yaw = cur;
 80039f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039fa:	62bb      	str	r3, [r7, #40]	; 0x28
		//break off immediately if overshoot
		if (last_target_dist < abs(target_yaw - cur)
 80039fc:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8003a00:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8003a04:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a08:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003a0c:	ee17 3a90 	vmov	r3, s15
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	bfb8      	it	lt
 8003a14:	425b      	neglt	r3, r3
 8003a16:	ee07 3a90 	vmov	s15, r3
 8003a1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a1e:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8003a22:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003a26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a2a:	d50e      	bpl.n	8003a4a <_ZN9AppMotion16MotionController4turnEbbbm+0x562>
				&& abs(target_yaw - cur) < 15)
 8003a2c:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8003a30:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8003a34:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a38:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003a3c:	ee17 3a90 	vmov	r3, s15
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	bfb8      	it	lt
 8003a44:	425b      	neglt	r3, r3
 8003a46:	2b0e      	cmp	r3, #14
 8003a48:	dd76      	ble.n	8003b38 <_ZN9AppMotion16MotionController4turnEbbbm+0x650>
			break;
		else last_target_dist = abs(target_yaw - cur);
 8003a4a:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8003a4e:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8003a52:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a56:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003a5a:	ee17 3a90 	vmov	r3, s15
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	bfb8      	it	lt
 8003a62:	425b      	neglt	r3, r3
 8003a64:	ee07 3a90 	vmov	s15, r3
 8003a68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a6c:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

		if (abs(target_yaw - cur) <= 0.375 || (abs(target_yaw - cur) <= 1.5 && arc)
 8003a70:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8003a74:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8003a78:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a7c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003a80:	ee17 3a90 	vmov	r3, s15
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	bfb8      	it	lt
 8003a88:	425b      	neglt	r3, r3
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f7fc fd4a 	bl	8000524 <__aeabi_i2d>
				|| (HAL_GetTick() - timeStart) > 10000)
 8003a90:	f04f 0200 	mov.w	r2, #0
 8003a94:	4b38      	ldr	r3, [pc, #224]	; (8003b78 <_ZN9AppMotion16MotionController4turnEbbbm+0x690>)
 8003a96:	f7fd f82b 	bl	8000af0 <__aeabi_dcmple>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d123      	bne.n	8003ae8 <_ZN9AppMotion16MotionController4turnEbbbm+0x600>
		if (abs(target_yaw - cur) <= 0.375 || (abs(target_yaw - cur) <= 1.5 && arc)
 8003aa0:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8003aa4:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8003aa8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003aac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003ab0:	ee17 3a90 	vmov	r3, s15
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	bfb8      	it	lt
 8003ab8:	425b      	neglt	r3, r3
 8003aba:	4618      	mov	r0, r3
 8003abc:	f7fc fd32 	bl	8000524 <__aeabi_i2d>
 8003ac0:	f04f 0200 	mov.w	r2, #0
 8003ac4:	4b2d      	ldr	r3, [pc, #180]	; (8003b7c <_ZN9AppMotion16MotionController4turnEbbbm+0x694>)
 8003ac6:	f7fd f813 	bl	8000af0 <__aeabi_dcmple>
 8003aca:	4603      	mov	r3, r0
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d002      	beq.n	8003ad6 <_ZN9AppMotion16MotionController4turnEbbbm+0x5ee>
 8003ad0:	787b      	ldrb	r3, [r7, #1]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d108      	bne.n	8003ae8 <_ZN9AppMotion16MotionController4turnEbbbm+0x600>
				|| (HAL_GetTick() - timeStart) > 10000)
 8003ad6:	f003 fb0b 	bl	80070f0 <HAL_GetTick>
 8003ada:	4602      	mov	r2, r0
 8003adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ade:	1ad3      	subs	r3, r2, r3
 8003ae0:	f242 7210 	movw	r2, #10000	; 0x2710
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d901      	bls.n	8003aec <_ZN9AppMotion16MotionController4turnEbbbm+0x604>
 8003ae8:	2301      	movs	r3, #1
 8003aea:	e000      	b.n	8003aee <_ZN9AppMotion16MotionController4turnEbbbm+0x606>
 8003aec:	2300      	movs	r3, #0
		if (abs(target_yaw - cur) <= 0.375 || (abs(target_yaw - cur) <= 1.5 && arc)
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d019      	beq.n	8003b26 <_ZN9AppMotion16MotionController4turnEbbbm+0x63e>
		{
			sensor_data.last_halt_val = ((uint32_t)abs(target_yaw - cur)) %180;
 8003af2:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8003af6:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8003afa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003afe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003b02:	ee17 3a90 	vmov	r3, s15
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	bfb8      	it	lt
 8003b0a:	425b      	neglt	r3, r3
 8003b0c:	461a      	mov	r2, r3
 8003b0e:	0893      	lsrs	r3, r2, #2
 8003b10:	491b      	ldr	r1, [pc, #108]	; (8003b80 <_ZN9AppMotion16MotionController4turnEbbbm+0x698>)
 8003b12:	fba1 1303 	umull	r1, r3, r1, r3
 8003b16:	089b      	lsrs	r3, r3, #2
 8003b18:	21b4      	movs	r1, #180	; 0xb4
 8003b1a:	fb01 f303 	mul.w	r3, r1, r3
 8003b1e:	1ad3      	subs	r3, r2, r3
 8003b20:	4a13      	ldr	r2, [pc, #76]	; (8003b70 <_ZN9AppMotion16MotionController4turnEbbbm+0x688>)
 8003b22:	6353      	str	r3, [r2, #52]	; 0x34
			break;
 8003b24:	e008      	b.n	8003b38 <_ZN9AppMotion16MotionController4turnEbbbm+0x650>
		}

		sensor_data.last_halt_val = arg;
 8003b26:	4a12      	ldr	r2, [pc, #72]	; (8003b70 <_ZN9AppMotion16MotionController4turnEbbbm+0x688>)
 8003b28:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b2a:	6353      	str	r3, [r2, #52]	; 0x34
		osDelay(2);
 8003b2c:	2002      	movs	r0, #2
 8003b2e:	f009 f9bb 	bl	800cea8 <osDelay>
		osThreadYield(); // need to ensure yield for the sensortask
 8003b32:	f009 f999 	bl	800ce68 <osThreadYield>
		if (abs(target_yaw - cur) < 45 ) {
 8003b36:	e5db      	b.n	80036f0 <_ZN9AppMotion16MotionController4turnEbbbm+0x208>

	} while (1);

	emergency = false;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158
	lmotor->halt();
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	4618      	mov	r0, r3
 8003b46:	f001 f8ff 	bl	8004d48 <_ZN9AppMotion5Motor4haltEv>
	rmotor->halt();
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f001 f8fa 	bl	8004d48 <_ZN9AppMotion5Motor4haltEv>
}
 8003b54:	bf00      	nop
 8003b56:	374c      	adds	r7, #76	; 0x4c
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	ecbd 8b02 	vpop	{d8}
 8003b5e:	bd90      	pop	{r4, r7, pc}
 8003b60:	00000000 	.word	0x00000000
 8003b64:	40668000 	.word	0x40668000
 8003b68:	00000000 	.word	0x00000000
 8003b6c:	42340000 	.word	0x42340000
 8003b70:	20000668 	.word	0x20000668
 8003b74:	66666667 	.word	0x66666667
 8003b78:	3fd80000 	.word	0x3fd80000
 8003b7c:	3ff80000 	.word	0x3ff80000
 8003b80:	16c16c17 	.word	0x16c16c17

08003b84 <_ZN9AppMotion16MotionController13emergencyStopEv>:

void MotionController::emergencyStop() {
 8003b84:	b480      	push	{r7}
 8003b86:	b083      	sub	sp, #12
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
	emergency = true;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2201      	movs	r2, #1
 8003b90:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158
}
 8003b94:	bf00      	nop
 8003b96:	370c      	adds	r7, #12
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9e:	4770      	bx	lr

08003ba0 <_ZN9AppMotion16MotionController15task2ScanAndRotEb>:
 * moves forward some predef distance and turns 180 deg to the {dir}.
 * signals to rpi with the same GPIO convention through motion task to indicate its done.
 *
 */
void MotionController::task2ScanAndRot(bool dir)
{
 8003ba0:	b590      	push	{r4, r7, lr}
 8003ba2:	ed2d 8b02 	vpush	{d8}
 8003ba6:	b099      	sub	sp, #100	; 0x64
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
 8003bac:	460b      	mov	r3, r1
 8003bae:	70fb      	strb	r3, [r7, #3]
	emergency = false;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158
	servo->turnFront();
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	68db      	ldr	r3, [r3, #12]
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f001 f816 	bl	8004bee <_ZN9AppMotion5Servo9turnFrontEv>
	lmotor->setForward();
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f001 f8eb 	bl	8004da2 <_ZN9AppMotion5Motor10setForwardEv>
	rmotor->setForward();
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	f001 f8e6 	bl	8004da2 <_ZN9AppMotion5Motor10setForwardEv>
	lmotor->setSpeed(100);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	2164      	movs	r1, #100	; 0x64
 8003bdc:	4618      	mov	r0, r3
 8003bde:	f001 f83d 	bl	8004c5c <_ZN9AppMotion5Motor8setSpeedEm>
	rmotor->setSpeed(100);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	2164      	movs	r1, #100	; 0x64
 8003be8:	4618      	mov	r0, r3
 8003bea:	f001 f837 	bl	8004c5c <_ZN9AppMotion5Motor8setSpeedEm>

	uint32_t timeStart = HAL_GetTick();
 8003bee:	f003 fa7f 	bl	80070f0 <HAL_GetTick>
 8003bf2:	62f8      	str	r0, [r7, #44]	; 0x2c
	uint32_t l_encoder_count = lencoder->getCount();
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	691b      	ldr	r3, [r3, #16]
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	f001 f917 	bl	8004e2c <_ZN9AppMotion7Encoder8getCountEv>
 8003bfe:	65f8      	str	r0, [r7, #92]	; 0x5c
	uint32_t r_encoder_count = rencoder->getCount();
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	695b      	ldr	r3, [r3, #20]
 8003c04:	4618      	mov	r0, r3
 8003c06:	f001 f911 	bl	8004e2c <_ZN9AppMotion7Encoder8getCountEv>
 8003c0a:	65b8      	str	r0, [r7, #88]	; 0x58
	double target = (double) (MAX_OBST_LEN/2 + TURN_ARC_LEN) / DISTANCE_PER_ENCODER_PULSE;
 8003c0c:	4bb8      	ldr	r3, [pc, #736]	; (8003ef0 <_ZN9AppMotion16MotionController15task2ScanAndRotEb+0x350>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	085a      	lsrs	r2, r3, #1
 8003c12:	4bb8      	ldr	r3, [pc, #736]	; (8003ef4 <_ZN9AppMotion16MotionController15task2ScanAndRotEb+0x354>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4413      	add	r3, r2
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f7fc fc73 	bl	8000504 <__aeabi_ui2d>
 8003c1e:	a3b2      	add	r3, pc, #712	; (adr r3, 8003ee8 <_ZN9AppMotion16MotionController15task2ScanAndRotEb+0x348>)
 8003c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c24:	f7fc fe12 	bl	800084c <__aeabi_ddiv>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	460b      	mov	r3, r1
 8003c2c:	e9c7 2308 	strd	r2, r3, [r7, #32]

	double cur_left = 0, cur_right = 0;
 8003c30:	f04f 0200 	mov.w	r2, #0
 8003c34:	f04f 0300 	mov.w	r3, #0
 8003c38:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
 8003c3c:	f04f 0200 	mov.w	r2, #0
 8003c40:	f04f 0300 	mov.w	r3, #0
 8003c44:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	float count_left = 0, count_right = 0;
 8003c48:	f04f 0300 	mov.w	r3, #0
 8003c4c:	61fb      	str	r3, [r7, #28]
 8003c4e:	f04f 0300 	mov.w	r3, #0
 8003c52:	61bb      	str	r3, [r7, #24]
	double speed_error = 0;
 8003c54:	f04f 0200 	mov.w	r2, #0
 8003c58:	f04f 0300 	mov.w	r3, #0
 8003c5c:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	do {

		count_left = (double) lencoder->getDelta(l_encoder_count,
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	691c      	ldr	r4, [r3, #16]
				lencoder->getCount());
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	691b      	ldr	r3, [r3, #16]
		count_left = (double) lencoder->getDelta(l_encoder_count,
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f001 f8df 	bl	8004e2c <_ZN9AppMotion7Encoder8getCountEv>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	461a      	mov	r2, r3
 8003c72:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8003c74:	4620      	mov	r0, r4
 8003c76:	f001 f8e7 	bl	8004e48 <_ZN9AppMotion7Encoder8getDeltaEmm>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	f7fc fc41 	bl	8000504 <__aeabi_ui2d>
 8003c82:	4602      	mov	r2, r0
 8003c84:	460b      	mov	r3, r1
 8003c86:	4610      	mov	r0, r2
 8003c88:	4619      	mov	r1, r3
 8003c8a:	f7fc ffad 	bl	8000be8 <__aeabi_d2f>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	61fb      	str	r3, [r7, #28]
		count_right = (double) rencoder->getDelta(r_encoder_count,
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	695c      	ldr	r4, [r3, #20]
				rencoder->getCount());
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	695b      	ldr	r3, [r3, #20]
		count_right = (double) rencoder->getDelta(r_encoder_count,
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f001 f8c6 	bl	8004e2c <_ZN9AppMotion7Encoder8getCountEv>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	461a      	mov	r2, r3
 8003ca4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003ca6:	4620      	mov	r0, r4
 8003ca8:	f001 f8ce 	bl	8004e48 <_ZN9AppMotion7Encoder8getDeltaEmm>
 8003cac:	4603      	mov	r3, r0
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f7fc fc28 	bl	8000504 <__aeabi_ui2d>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	460b      	mov	r3, r1
 8003cb8:	4610      	mov	r0, r2
 8003cba:	4619      	mov	r1, r3
 8003cbc:	f7fc ff94 	bl	8000be8 <__aeabi_d2f>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	61bb      	str	r3, [r7, #24]

		cur_left += count_left;
 8003cc4:	69f8      	ldr	r0, [r7, #28]
 8003cc6:	f7fc fc3f 	bl	8000548 <__aeabi_f2d>
 8003cca:	4602      	mov	r2, r0
 8003ccc:	460b      	mov	r3, r1
 8003cce:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003cd2:	f7fc fadb 	bl	800028c <__adddf3>
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	460b      	mov	r3, r1
 8003cda:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
		cur_right += count_right;
 8003cde:	69b8      	ldr	r0, [r7, #24]
 8003ce0:	f7fc fc32 	bl	8000548 <__aeabi_f2d>
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	460b      	mov	r3, r1
 8003ce8:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003cec:	f7fc face 	bl	800028c <__adddf3>
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	460b      	mov	r3, r1
 8003cf4:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		speed_error += (count_left - count_right);
 8003cf8:	ed97 7a07 	vldr	s14, [r7, #28]
 8003cfc:	edd7 7a06 	vldr	s15, [r7, #24]
 8003d00:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d04:	ee17 0a90 	vmov	r0, s15
 8003d08:	f7fc fc1e 	bl	8000548 <__aeabi_f2d>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	460b      	mov	r3, r1
 8003d10:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8003d14:	f7fc faba 	bl	800028c <__adddf3>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	460b      	mov	r3, r1
 8003d1c:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

		l_encoder_count = lencoder->getCount();
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	691b      	ldr	r3, [r3, #16]
 8003d24:	4618      	mov	r0, r3
 8003d26:	f001 f881 	bl	8004e2c <_ZN9AppMotion7Encoder8getCountEv>
 8003d2a:	65f8      	str	r0, [r7, #92]	; 0x5c
		r_encoder_count = rencoder->getCount();
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	695b      	ldr	r3, [r3, #20]
 8003d30:	4618      	mov	r0, r3
 8003d32:	f001 f87b 	bl	8004e2c <_ZN9AppMotion7Encoder8getCountEv>
 8003d36:	65b8      	str	r0, [r7, #88]	; 0x58

		if ((cur_left > target && cur_right > target) || (sensor_data.ir_distL > IR_TH && dir)
 8003d38:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003d3c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003d40:	f7fc feea 	bl	8000b18 <__aeabi_dcmpgt>
 8003d44:	4603      	mov	r3, r0
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d008      	beq.n	8003d5c <_ZN9AppMotion16MotionController15task2ScanAndRotEb+0x1bc>
 8003d4a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003d4e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003d52:	f7fc fee1 	bl	8000b18 <__aeabi_dcmpgt>
 8003d56:	4603      	mov	r3, r0
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d124      	bne.n	8003da6 <_ZN9AppMotion16MotionController15task2ScanAndRotEb+0x206>
 8003d5c:	4b66      	ldr	r3, [pc, #408]	; (8003ef8 <_ZN9AppMotion16MotionController15task2ScanAndRotEb+0x358>)
 8003d5e:	ed93 7a01 	vldr	s14, [r3, #4]
 8003d62:	4b66      	ldr	r3, [pc, #408]	; (8003efc <_ZN9AppMotion16MotionController15task2ScanAndRotEb+0x35c>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	ee07 3a90 	vmov	s15, r3
 8003d6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d6e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003d72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d76:	dd02      	ble.n	8003d7e <_ZN9AppMotion16MotionController15task2ScanAndRotEb+0x1de>
 8003d78:	78fb      	ldrb	r3, [r7, #3]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d113      	bne.n	8003da6 <_ZN9AppMotion16MotionController15task2ScanAndRotEb+0x206>
				|| (sensor_data.ir_distR > IR_TH && !dir))
 8003d7e:	4b5e      	ldr	r3, [pc, #376]	; (8003ef8 <_ZN9AppMotion16MotionController15task2ScanAndRotEb+0x358>)
 8003d80:	ed93 7a02 	vldr	s14, [r3, #8]
 8003d84:	4b5d      	ldr	r3, [pc, #372]	; (8003efc <_ZN9AppMotion16MotionController15task2ScanAndRotEb+0x35c>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	ee07 3a90 	vmov	s15, r3
 8003d8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d90:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003d94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d98:	dd42      	ble.n	8003e20 <_ZN9AppMotion16MotionController15task2ScanAndRotEb+0x280>
 8003d9a:	78fb      	ldrb	r3, [r7, #3]
 8003d9c:	f083 0301 	eor.w	r3, r3, #1
 8003da0:	b2db      	uxtb	r3, r3
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d03c      	beq.n	8003e20 <_ZN9AppMotion16MotionController15task2ScanAndRotEb+0x280>
		{
			sensor_data.last_halt_val = (uint32_t) (cur_left>cur_right?cur_right:cur_left) * DISTANCE_PER_ENCODER_PULSE;
 8003da6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003daa:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003dae:	f7fc feb3 	bl	8000b18 <__aeabi_dcmpgt>
 8003db2:	4603      	mov	r3, r0
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d008      	beq.n	8003dca <_ZN9AppMotion16MotionController15task2ScanAndRotEb+0x22a>
 8003db8:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003dbc:	f7fc fef4 	bl	8000ba8 <__aeabi_d2uiz>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f7fc fb9e 	bl	8000504 <__aeabi_ui2d>
 8003dc8:	e007      	b.n	8003dda <_ZN9AppMotion16MotionController15task2ScanAndRotEb+0x23a>
 8003dca:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003dce:	f7fc feeb 	bl	8000ba8 <__aeabi_d2uiz>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f7fc fb95 	bl	8000504 <__aeabi_ui2d>
 8003dda:	a343      	add	r3, pc, #268	; (adr r3, 8003ee8 <_ZN9AppMotion16MotionController15task2ScanAndRotEb+0x348>)
 8003ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003de0:	f7fc fc0a 	bl	80005f8 <__aeabi_dmul>
 8003de4:	4602      	mov	r2, r0
 8003de6:	460b      	mov	r3, r1
 8003de8:	4610      	mov	r0, r2
 8003dea:	4619      	mov	r1, r3
 8003dec:	f7fc fedc 	bl	8000ba8 <__aeabi_d2uiz>
 8003df0:	4603      	mov	r3, r0
 8003df2:	4a41      	ldr	r2, [pc, #260]	; (8003ef8 <_ZN9AppMotion16MotionController15task2ScanAndRotEb+0x358>)
 8003df4:	6353      	str	r3, [r2, #52]	; 0x34
			break;
 8003df6:	bf00      	nop
		sensor_data.last_halt_val = (MAX_OBST_LEN/2 + TURN_ARC_LEN);
	} while (1);


    // EDIT THIS !!
	osDelay(1);
 8003df8:	2001      	movs	r0, #1
 8003dfa:	f009 f855 	bl	800cea8 <osDelay>

	lmotor->halt();
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	4618      	mov	r0, r3
 8003e04:	f000 ffa0 	bl	8004d48 <_ZN9AppMotion5Motor4haltEv>
	rmotor->halt();
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f000 ff9b 	bl	8004d48 <_ZN9AppMotion5Motor4haltEv>


	!dir ? lmotor->setSpeed(100) : lmotor->setSpeed(35);
 8003e12:	78fb      	ldrb	r3, [r7, #3]
 8003e14:	f083 0301 	eor.w	r3, r3, #1
 8003e18:	b2db      	uxtb	r3, r3
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d013      	beq.n	8003e46 <_ZN9AppMotion16MotionController15task2ScanAndRotEb+0x2a6>
 8003e1e:	e00b      	b.n	8003e38 <_ZN9AppMotion16MotionController15task2ScanAndRotEb+0x298>
		osDelay(10);
 8003e20:	200a      	movs	r0, #10
 8003e22:	f009 f841 	bl	800cea8 <osDelay>
		sensor_data.last_halt_val = (MAX_OBST_LEN/2 + TURN_ARC_LEN);
 8003e26:	4b32      	ldr	r3, [pc, #200]	; (8003ef0 <_ZN9AppMotion16MotionController15task2ScanAndRotEb+0x350>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	085a      	lsrs	r2, r3, #1
 8003e2c:	4b31      	ldr	r3, [pc, #196]	; (8003ef4 <_ZN9AppMotion16MotionController15task2ScanAndRotEb+0x354>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4413      	add	r3, r2
 8003e32:	4a31      	ldr	r2, [pc, #196]	; (8003ef8 <_ZN9AppMotion16MotionController15task2ScanAndRotEb+0x358>)
 8003e34:	6353      	str	r3, [r2, #52]	; 0x34
		count_left = (double) lencoder->getDelta(l_encoder_count,
 8003e36:	e713      	b.n	8003c60 <_ZN9AppMotion16MotionController15task2ScanAndRotEb+0xc0>
	!dir ? lmotor->setSpeed(100) : lmotor->setSpeed(35);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	2164      	movs	r1, #100	; 0x64
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f000 ff0c 	bl	8004c5c <_ZN9AppMotion5Motor8setSpeedEm>
 8003e44:	e005      	b.n	8003e52 <_ZN9AppMotion16MotionController15task2ScanAndRotEb+0x2b2>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	2123      	movs	r1, #35	; 0x23
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f000 ff05 	bl	8004c5c <_ZN9AppMotion5Motor8setSpeedEm>
	!dir ? rmotor->setSpeed(35) : rmotor->setSpeed(100);
 8003e52:	78fb      	ldrb	r3, [r7, #3]
 8003e54:	f083 0301 	eor.w	r3, r3, #1
 8003e58:	b2db      	uxtb	r3, r3
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d006      	beq.n	8003e6c <_ZN9AppMotion16MotionController15task2ScanAndRotEb+0x2cc>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	2123      	movs	r1, #35	; 0x23
 8003e64:	4618      	mov	r0, r3
 8003e66:	f000 fef9 	bl	8004c5c <_ZN9AppMotion5Motor8setSpeedEm>
 8003e6a:	e005      	b.n	8003e78 <_ZN9AppMotion16MotionController15task2ScanAndRotEb+0x2d8>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	2164      	movs	r1, #100	; 0x64
 8003e72:	4618      	mov	r0, r3
 8003e74:	f000 fef2 	bl	8004c5c <_ZN9AppMotion5Motor8setSpeedEm>

	uint32_t timeNow = HAL_GetTick();
 8003e78:	f003 f93a 	bl	80070f0 <HAL_GetTick>
 8003e7c:	6178      	str	r0, [r7, #20]
	timeStart = timeNow;
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	62fb      	str	r3, [r7, #44]	; 0x2c
	float target_yaw = 0;
 8003e82:	f04f 0300 	mov.w	r3, #0
 8003e86:	63fb      	str	r3, [r7, #60]	; 0x3c
	float req = ((float) 180) ;
 8003e88:	4b1d      	ldr	r3, [pc, #116]	; (8003f00 <_ZN9AppMotion16MotionController15task2ScanAndRotEb+0x360>)
 8003e8a:	613b      	str	r3, [r7, #16]
	float cur = sensor_data.yaw_abs; //[-179,180]
 8003e8c:	4b1a      	ldr	r3, [pc, #104]	; (8003ef8 <_ZN9AppMotion16MotionController15task2ScanAndRotEb+0x358>)
 8003e8e:	691b      	ldr	r3, [r3, #16]
 8003e90:	63bb      	str	r3, [r7, #56]	; 0x38
	float prev_yaw = cur;
 8003e92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e94:	60fb      	str	r3, [r7, #12]
	float last_target_dist = 99999.0f; // overshoot protection
 8003e96:	4b1b      	ldr	r3, [pc, #108]	; (8003f04 <_ZN9AppMotion16MotionController15task2ScanAndRotEb+0x364>)
 8003e98:	637b      	str	r3, [r7, #52]	; 0x34
	float bwd_diffn_delta = 0;
 8003e9a:	f04f 0300 	mov.w	r3, #0
 8003e9e:	633b      	str	r3, [r7, #48]	; 0x30

	if(dir) //increase
 8003ea0:	78fb      	ldrb	r3, [r7, #3]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d047      	beq.n	8003f36 <_ZN9AppMotion16MotionController15task2ScanAndRotEb+0x396>
	{
		if((req + cur) > 179) target_yaw = -180 + (req - (180 - cur));
 8003ea6:	ed97 7a04 	vldr	s14, [r7, #16]
 8003eaa:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8003eae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003eb2:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8003f08 <_ZN9AppMotion16MotionController15task2ScanAndRotEb+0x368>
 8003eb6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003eba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ebe:	dd31      	ble.n	8003f24 <_ZN9AppMotion16MotionController15task2ScanAndRotEb+0x384>
 8003ec0:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8003f14 <_ZN9AppMotion16MotionController15task2ScanAndRotEb+0x374>
 8003ec4:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8003ec8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ecc:	ed97 7a04 	vldr	s14, [r7, #16]
 8003ed0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ed4:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8003f14 <_ZN9AppMotion16MotionController15task2ScanAndRotEb+0x374>
 8003ed8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003edc:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
 8003ee0:	e04f      	b.n	8003f82 <_ZN9AppMotion16MotionController15task2ScanAndRotEb+0x3e2>
 8003ee2:	bf00      	nop
 8003ee4:	f3af 8000 	nop.w
 8003ee8:	c65572b1 	.word	0xc65572b1
 8003eec:	3f8c04ac 	.word	0x3f8c04ac
 8003ef0:	2000005c 	.word	0x2000005c
 8003ef4:	20000060 	.word	0x20000060
 8003ef8:	20000668 	.word	0x20000668
 8003efc:	20000064 	.word	0x20000064
 8003f00:	43340000 	.word	0x43340000
 8003f04:	47c34f80 	.word	0x47c34f80
 8003f08:	43330000 	.word	0x43330000
 8003f0c:	c3330000 	.word	0xc3330000
 8003f10:	c3340000 	.word	0xc3340000
 8003f14:	43340000 	.word	0x43340000
 8003f18:	42a00000 	.word	0x42a00000
 8003f1c:	00000000 	.word	0x00000000
 8003f20:	42340000 	.word	0x42340000
		else target_yaw = req + cur;
 8003f24:	ed97 7a04 	vldr	s14, [r7, #16]
 8003f28:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8003f2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f30:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
 8003f34:	e025      	b.n	8003f82 <_ZN9AppMotion16MotionController15task2ScanAndRotEb+0x3e2>
	}
	else
	{
		if((cur - req) < -179) target_yaw = 180 - (req + (-180 - cur));
 8003f36:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8003f3a:	edd7 7a04 	vldr	s15, [r7, #16]
 8003f3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f42:	ed1f 7a0e 	vldr	s14, [pc, #-56]	; 8003f0c <_ZN9AppMotion16MotionController15task2ScanAndRotEb+0x36c>
 8003f46:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f4e:	d510      	bpl.n	8003f72 <_ZN9AppMotion16MotionController15task2ScanAndRotEb+0x3d2>
 8003f50:	ed1f 7a11 	vldr	s14, [pc, #-68]	; 8003f10 <_ZN9AppMotion16MotionController15task2ScanAndRotEb+0x370>
 8003f54:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8003f58:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003f5c:	edd7 7a04 	vldr	s15, [r7, #16]
 8003f60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f64:	ed1f 7a15 	vldr	s14, [pc, #-84]	; 8003f14 <_ZN9AppMotion16MotionController15task2ScanAndRotEb+0x374>
 8003f68:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f6c:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
 8003f70:	e007      	b.n	8003f82 <_ZN9AppMotion16MotionController15task2ScanAndRotEb+0x3e2>
		else target_yaw = cur - req;
 8003f72:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8003f76:	edd7 7a04 	vldr	s15, [r7, #16]
 8003f7a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f7e:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	}

	do{
		if (abs(target_yaw - cur) < 45 ) {
 8003f82:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8003f86:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8003f8a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f8e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003f92:	ee17 3a90 	vmov	r3, s15
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	bfb8      	it	lt
 8003f9a:	425b      	neglt	r3, r3
 8003f9c:	2b2c      	cmp	r3, #44	; 0x2c
 8003f9e:	dc57      	bgt.n	8004050 <_ZN9AppMotion16MotionController15task2ScanAndRotEb+0x4b0>
			if(!dir) lmotor->setSpeed((uint32_t)map(abs(target_yaw - cur), 45, 0, 80, 15));
 8003fa0:	78fb      	ldrb	r3, [r7, #3]
 8003fa2:	f083 0301 	eor.w	r3, r3, #1
 8003fa6:	b2db      	uxtb	r3, r3
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d028      	beq.n	8003ffe <_ZN9AppMotion16MotionController15task2ScanAndRotEb+0x45e>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	685c      	ldr	r4, [r3, #4]
 8003fb0:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8003fb4:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8003fb8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003fbc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003fc0:	ee17 3a90 	vmov	r3, s15
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	bfb8      	it	lt
 8003fc8:	425b      	neglt	r3, r3
 8003fca:	ee07 3a90 	vmov	s15, r3
 8003fce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003fd2:	eeb2 2a0e 	vmov.f32	s4, #46	; 0x41700000  15.0
 8003fd6:	ed5f 1a30 	vldr	s3, [pc, #-192]	; 8003f18 <_ZN9AppMotion16MotionController15task2ScanAndRotEb+0x378>
 8003fda:	ed1f 1a30 	vldr	s2, [pc, #-192]	; 8003f1c <_ZN9AppMotion16MotionController15task2ScanAndRotEb+0x37c>
 8003fde:	ed5f 0a30 	vldr	s1, [pc, #-192]	; 8003f20 <_ZN9AppMotion16MotionController15task2ScanAndRotEb+0x380>
 8003fe2:	eeb0 0a67 	vmov.f32	s0, s15
 8003fe6:	f7fe fdfb 	bl	8002be0 <_ZN9AppMotion16MotionController3mapEfffff>
 8003fea:	eef0 7a40 	vmov.f32	s15, s0
 8003fee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ff2:	ee17 1a90 	vmov	r1, s15
 8003ff6:	4620      	mov	r0, r4
 8003ff8:	f000 fe30 	bl	8004c5c <_ZN9AppMotion5Motor8setSpeedEm>
 8003ffc:	e0e3      	b.n	80041c6 <_ZN9AppMotion16MotionController15task2ScanAndRotEb+0x626>

			else rmotor->setSpeed((uint32_t)map(abs(target_yaw - cur), 45, 0, 80, 15));
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	689c      	ldr	r4, [r3, #8]
 8004002:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8004006:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800400a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800400e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004012:	ee17 3a90 	vmov	r3, s15
 8004016:	2b00      	cmp	r3, #0
 8004018:	bfb8      	it	lt
 800401a:	425b      	neglt	r3, r3
 800401c:	ee07 3a90 	vmov	s15, r3
 8004020:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004024:	eeb2 2a0e 	vmov.f32	s4, #46	; 0x41700000  15.0
 8004028:	ed5f 1a45 	vldr	s3, [pc, #-276]	; 8003f18 <_ZN9AppMotion16MotionController15task2ScanAndRotEb+0x378>
 800402c:	ed1f 1a45 	vldr	s2, [pc, #-276]	; 8003f1c <_ZN9AppMotion16MotionController15task2ScanAndRotEb+0x37c>
 8004030:	ed5f 0a45 	vldr	s1, [pc, #-276]	; 8003f20 <_ZN9AppMotion16MotionController15task2ScanAndRotEb+0x380>
 8004034:	eeb0 0a67 	vmov.f32	s0, s15
 8004038:	f7fe fdd2 	bl	8002be0 <_ZN9AppMotion16MotionController3mapEfffff>
 800403c:	eef0 7a40 	vmov.f32	s15, s0
 8004040:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004044:	ee17 1a90 	vmov	r1, s15
 8004048:	4620      	mov	r0, r4
 800404a:	f000 fe07 	bl	8004c5c <_ZN9AppMotion5Motor8setSpeedEm>
 800404e:	e0ba      	b.n	80041c6 <_ZN9AppMotion16MotionController15task2ScanAndRotEb+0x626>
		}
		else if(fmod(abs(abs(target_yaw) - abs(cur)), 180) < 45 )
 8004050:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8004054:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004058:	ee17 3a90 	vmov	r3, s15
 800405c:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8004060:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8004064:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8004068:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800406c:	ee17 3a90 	vmov	r3, s15
 8004070:	2b00      	cmp	r3, #0
 8004072:	bfb8      	it	lt
 8004074:	425b      	neglt	r3, r3
 8004076:	1ad3      	subs	r3, r2, r3
 8004078:	2b00      	cmp	r3, #0
 800407a:	bfb8      	it	lt
 800407c:	425b      	neglt	r3, r3
 800407e:	4618      	mov	r0, r3
 8004080:	f7fc fa50 	bl	8000524 <__aeabi_i2d>
 8004084:	4602      	mov	r2, r0
 8004086:	460b      	mov	r3, r1
 8004088:	ed9f 1bb5 	vldr	d1, [pc, #724]	; 8004360 <_ZN9AppMotion16MotionController15task2ScanAndRotEb+0x7c0>
 800408c:	ec43 2b10 	vmov	d0, r2, r3
 8004090:	f00b fdd4 	bl	800fc3c <fmod>
 8004094:	ec51 0b10 	vmov	r0, r1, d0
 8004098:	2301      	movs	r3, #1
 800409a:	461c      	mov	r4, r3
 800409c:	f04f 0200 	mov.w	r2, #0
 80040a0:	4bb1      	ldr	r3, [pc, #708]	; (8004368 <_ZN9AppMotion16MotionController15task2ScanAndRotEb+0x7c8>)
 80040a2:	f7fc fd1b 	bl	8000adc <__aeabi_dcmplt>
 80040a6:	4603      	mov	r3, r0
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d101      	bne.n	80040b0 <_ZN9AppMotion16MotionController15task2ScanAndRotEb+0x510>
 80040ac:	2300      	movs	r3, #0
 80040ae:	461c      	mov	r4, r3
 80040b0:	b2e3      	uxtb	r3, r4
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	f000 8087 	beq.w	80041c6 <_ZN9AppMotion16MotionController15task2ScanAndRotEb+0x626>
		{
			if(!dir) lmotor->setSpeed((uint32_t)map(fmod(abs(abs(target_yaw) - abs(cur)), 180), 45, 0, 80, 15));
 80040b8:	78fb      	ldrb	r3, [r7, #3]
 80040ba:	f083 0301 	eor.w	r3, r3, #1
 80040be:	b2db      	uxtb	r3, r3
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d040      	beq.n	8004146 <_ZN9AppMotion16MotionController15task2ScanAndRotEb+0x5a6>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	685c      	ldr	r4, [r3, #4]
 80040c8:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80040cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80040d0:	ee17 3a90 	vmov	r3, s15
 80040d4:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80040d8:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80040dc:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80040e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80040e4:	ee17 3a90 	vmov	r3, s15
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	bfb8      	it	lt
 80040ec:	425b      	neglt	r3, r3
 80040ee:	1ad3      	subs	r3, r2, r3
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	bfb8      	it	lt
 80040f4:	425b      	neglt	r3, r3
 80040f6:	4618      	mov	r0, r3
 80040f8:	f7fc fa14 	bl	8000524 <__aeabi_i2d>
 80040fc:	4602      	mov	r2, r0
 80040fe:	460b      	mov	r3, r1
 8004100:	ed9f 1b97 	vldr	d1, [pc, #604]	; 8004360 <_ZN9AppMotion16MotionController15task2ScanAndRotEb+0x7c0>
 8004104:	ec43 2b10 	vmov	d0, r2, r3
 8004108:	f00b fd98 	bl	800fc3c <fmod>
 800410c:	ec53 2b10 	vmov	r2, r3, d0
 8004110:	4610      	mov	r0, r2
 8004112:	4619      	mov	r1, r3
 8004114:	f7fc fd68 	bl	8000be8 <__aeabi_d2f>
 8004118:	4603      	mov	r3, r0
 800411a:	eeb2 2a0e 	vmov.f32	s4, #46	; 0x41700000  15.0
 800411e:	eddf 1a93 	vldr	s3, [pc, #588]	; 800436c <_ZN9AppMotion16MotionController15task2ScanAndRotEb+0x7cc>
 8004122:	ed9f 1a93 	vldr	s2, [pc, #588]	; 8004370 <_ZN9AppMotion16MotionController15task2ScanAndRotEb+0x7d0>
 8004126:	eddf 0a93 	vldr	s1, [pc, #588]	; 8004374 <_ZN9AppMotion16MotionController15task2ScanAndRotEb+0x7d4>
 800412a:	ee00 3a10 	vmov	s0, r3
 800412e:	f7fe fd57 	bl	8002be0 <_ZN9AppMotion16MotionController3mapEfffff>
 8004132:	eef0 7a40 	vmov.f32	s15, s0
 8004136:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800413a:	ee17 1a90 	vmov	r1, s15
 800413e:	4620      	mov	r0, r4
 8004140:	f000 fd8c 	bl	8004c5c <_ZN9AppMotion5Motor8setSpeedEm>
 8004144:	e03f      	b.n	80041c6 <_ZN9AppMotion16MotionController15task2ScanAndRotEb+0x626>

			else rmotor->setSpeed((uint32_t)map(fmod(abs(abs(target_yaw) - abs(cur)), 180), 45, 0, 80, 15));
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	689c      	ldr	r4, [r3, #8]
 800414a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800414e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004152:	ee17 3a90 	vmov	r3, s15
 8004156:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800415a:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800415e:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8004162:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004166:	ee17 3a90 	vmov	r3, s15
 800416a:	2b00      	cmp	r3, #0
 800416c:	bfb8      	it	lt
 800416e:	425b      	neglt	r3, r3
 8004170:	1ad3      	subs	r3, r2, r3
 8004172:	2b00      	cmp	r3, #0
 8004174:	bfb8      	it	lt
 8004176:	425b      	neglt	r3, r3
 8004178:	4618      	mov	r0, r3
 800417a:	f7fc f9d3 	bl	8000524 <__aeabi_i2d>
 800417e:	4602      	mov	r2, r0
 8004180:	460b      	mov	r3, r1
 8004182:	ed9f 1b77 	vldr	d1, [pc, #476]	; 8004360 <_ZN9AppMotion16MotionController15task2ScanAndRotEb+0x7c0>
 8004186:	ec43 2b10 	vmov	d0, r2, r3
 800418a:	f00b fd57 	bl	800fc3c <fmod>
 800418e:	ec53 2b10 	vmov	r2, r3, d0
 8004192:	4610      	mov	r0, r2
 8004194:	4619      	mov	r1, r3
 8004196:	f7fc fd27 	bl	8000be8 <__aeabi_d2f>
 800419a:	4603      	mov	r3, r0
 800419c:	eeb2 2a0e 	vmov.f32	s4, #46	; 0x41700000  15.0
 80041a0:	eddf 1a72 	vldr	s3, [pc, #456]	; 800436c <_ZN9AppMotion16MotionController15task2ScanAndRotEb+0x7cc>
 80041a4:	ed9f 1a72 	vldr	s2, [pc, #456]	; 8004370 <_ZN9AppMotion16MotionController15task2ScanAndRotEb+0x7d0>
 80041a8:	eddf 0a72 	vldr	s1, [pc, #456]	; 8004374 <_ZN9AppMotion16MotionController15task2ScanAndRotEb+0x7d4>
 80041ac:	ee00 3a10 	vmov	s0, r3
 80041b0:	f7fe fd16 	bl	8002be0 <_ZN9AppMotion16MotionController3mapEfffff>
 80041b4:	eef0 7a40 	vmov.f32	s15, s0
 80041b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80041bc:	ee17 1a90 	vmov	r1, s15
 80041c0:	4620      	mov	r0, r4
 80041c2:	f000 fd4b 	bl	8004c5c <_ZN9AppMotion5Motor8setSpeedEm>
		}

		timeNow = HAL_GetTick();
 80041c6:	f002 ff93 	bl	80070f0 <HAL_GetTick>
 80041ca:	6178      	str	r0, [r7, #20]

		if(timeNow != sensor_data.yaw_abs_time)
 80041cc:	4b6a      	ldr	r3, [pc, #424]	; (8004378 <_ZN9AppMotion16MotionController15task2ScanAndRotEb+0x7d8>)
 80041ce:	699b      	ldr	r3, [r3, #24]
 80041d0:	697a      	ldr	r2, [r7, #20]
 80041d2:	429a      	cmp	r2, r3
 80041d4:	d028      	beq.n	8004228 <_ZN9AppMotion16MotionController15task2ScanAndRotEb+0x688>
			bwd_diffn_delta = abs(sensor_data.yaw_abs - sensor_data.yaw_abs_prev) * (float)(abs(timeNow - sensor_data.yaw_abs_time)/80);
 80041d6:	4b68      	ldr	r3, [pc, #416]	; (8004378 <_ZN9AppMotion16MotionController15task2ScanAndRotEb+0x7d8>)
 80041d8:	ed93 7a04 	vldr	s14, [r3, #16]
 80041dc:	4b66      	ldr	r3, [pc, #408]	; (8004378 <_ZN9AppMotion16MotionController15task2ScanAndRotEb+0x7d8>)
 80041de:	edd3 7a05 	vldr	s15, [r3, #20]
 80041e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80041e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80041ea:	ee17 3a90 	vmov	r3, s15
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	bfb8      	it	lt
 80041f2:	425b      	neglt	r3, r3
 80041f4:	ee07 3a90 	vmov	s15, r3
 80041f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80041fc:	4b5e      	ldr	r3, [pc, #376]	; (8004378 <_ZN9AppMotion16MotionController15task2ScanAndRotEb+0x7d8>)
 80041fe:	699b      	ldr	r3, [r3, #24]
 8004200:	697a      	ldr	r2, [r7, #20]
 8004202:	1ad3      	subs	r3, r2, r3
 8004204:	2b00      	cmp	r3, #0
 8004206:	bfb8      	it	lt
 8004208:	425b      	neglt	r3, r3
 800420a:	4a5c      	ldr	r2, [pc, #368]	; (800437c <_ZN9AppMotion16MotionController15task2ScanAndRotEb+0x7dc>)
 800420c:	fb82 1203 	smull	r1, r2, r2, r3
 8004210:	1152      	asrs	r2, r2, #5
 8004212:	17db      	asrs	r3, r3, #31
 8004214:	1ad3      	subs	r3, r2, r3
 8004216:	ee07 3a90 	vmov	s15, r3
 800421a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800421e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004222:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 8004226:	e002      	b.n	800422e <_ZN9AppMotion16MotionController15task2ScanAndRotEb+0x68e>
		else
			bwd_diffn_delta = 0;
 8004228:	f04f 0300 	mov.w	r3, #0
 800422c:	633b      	str	r3, [r7, #48]	; 0x30
		cur = sensor_data.yaw_abs +  (bwd_diffn_delta * sgn(sensor_data.yaw_abs - sensor_data.yaw_abs_prev)); // already dlpf and qtn filtered
 800422e:	4b52      	ldr	r3, [pc, #328]	; (8004378 <_ZN9AppMotion16MotionController15task2ScanAndRotEb+0x7d8>)
 8004230:	ed93 8a04 	vldr	s16, [r3, #16]
 8004234:	4b50      	ldr	r3, [pc, #320]	; (8004378 <_ZN9AppMotion16MotionController15task2ScanAndRotEb+0x7d8>)
 8004236:	ed93 7a04 	vldr	s14, [r3, #16]
 800423a:	4b4f      	ldr	r3, [pc, #316]	; (8004378 <_ZN9AppMotion16MotionController15task2ScanAndRotEb+0x7d8>)
 800423c:	edd3 7a05 	vldr	s15, [r3, #20]
 8004240:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004244:	eeb0 0a67 	vmov.f32	s0, s15
 8004248:	f000 fe34 	bl	8004eb4 <_ZN9AppMotion16MotionController3sgnIfEEiT_>
 800424c:	ee07 0a90 	vmov	s15, r0
 8004250:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004254:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8004258:	ee67 7a27 	vmul.f32	s15, s14, s15
 800425c:	ee78 7a27 	vadd.f32	s15, s16, s15
 8004260:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		sensor_data.yaw_cur_dbg = cur;
 8004264:	4a44      	ldr	r2, [pc, #272]	; (8004378 <_ZN9AppMotion16MotionController15task2ScanAndRotEb+0x7d8>)
 8004266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004268:	61d3      	str	r3, [r2, #28]
		prev_yaw = cur;
 800426a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800426c:	60fb      	str	r3, [r7, #12]

		if (last_target_dist < abs(target_yaw - cur)
 800426e:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8004272:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8004276:	ee77 7a67 	vsub.f32	s15, s14, s15
 800427a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800427e:	ee17 3a90 	vmov	r3, s15
 8004282:	2b00      	cmp	r3, #0
 8004284:	bfb8      	it	lt
 8004286:	425b      	neglt	r3, r3
 8004288:	ee07 3a90 	vmov	s15, r3
 800428c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004290:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8004294:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004298:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800429c:	d50e      	bpl.n	80042bc <_ZN9AppMotion16MotionController15task2ScanAndRotEb+0x71c>
				&& abs(target_yaw - cur) < 15)
 800429e:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80042a2:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80042a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80042aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80042ae:	ee17 3a90 	vmov	r3, s15
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	bfb8      	it	lt
 80042b6:	425b      	neglt	r3, r3
 80042b8:	2b0e      	cmp	r3, #14
 80042ba:	dd3f      	ble.n	800433c <_ZN9AppMotion16MotionController15task2ScanAndRotEb+0x79c>
			break;
		else last_target_dist = abs(target_yaw - cur);
 80042bc:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80042c0:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80042c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80042c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80042cc:	ee17 3a90 	vmov	r3, s15
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	bfb8      	it	lt
 80042d4:	425b      	neglt	r3, r3
 80042d6:	ee07 3a90 	vmov	s15, r3
 80042da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80042de:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

		if ((abs(target_yaw - cur) <= 1.5)
 80042e2:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80042e6:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80042ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80042ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80042f2:	ee17 3a90 	vmov	r3, s15
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	bfb8      	it	lt
 80042fa:	425b      	neglt	r3, r3
 80042fc:	4618      	mov	r0, r3
 80042fe:	f7fc f911 	bl	8000524 <__aeabi_i2d>
				|| (HAL_GetTick() - timeStart) > 10000)
 8004302:	f04f 0200 	mov.w	r2, #0
 8004306:	4b1e      	ldr	r3, [pc, #120]	; (8004380 <_ZN9AppMotion16MotionController15task2ScanAndRotEb+0x7e0>)
 8004308:	f7fc fbf2 	bl	8000af0 <__aeabi_dcmple>
 800430c:	4603      	mov	r3, r0
 800430e:	2b00      	cmp	r3, #0
 8004310:	d108      	bne.n	8004324 <_ZN9AppMotion16MotionController15task2ScanAndRotEb+0x784>
 8004312:	f002 feed 	bl	80070f0 <HAL_GetTick>
 8004316:	4602      	mov	r2, r0
 8004318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800431a:	1ad3      	subs	r3, r2, r3
 800431c:	f242 7210 	movw	r2, #10000	; 0x2710
 8004320:	4293      	cmp	r3, r2
 8004322:	d901      	bls.n	8004328 <_ZN9AppMotion16MotionController15task2ScanAndRotEb+0x788>
 8004324:	2301      	movs	r3, #1
 8004326:	e000      	b.n	800432a <_ZN9AppMotion16MotionController15task2ScanAndRotEb+0x78a>
 8004328:	2300      	movs	r3, #0
		if ((abs(target_yaw - cur) <= 1.5)
 800432a:	2b00      	cmp	r3, #0
 800432c:	d105      	bne.n	800433a <_ZN9AppMotion16MotionController15task2ScanAndRotEb+0x79a>
		{

			break;
		}

		osDelay(2);
 800432e:	2002      	movs	r0, #2
 8004330:	f008 fdba 	bl	800cea8 <osDelay>
		osThreadYield(); // need to ensure yield for the sensortask
 8004334:	f008 fd98 	bl	800ce68 <osThreadYield>
		if (abs(target_yaw - cur) < 45 ) {
 8004338:	e623      	b.n	8003f82 <_ZN9AppMotion16MotionController15task2ScanAndRotEb+0x3e2>
			break;
 800433a:	bf00      	nop

	} while (1);

	lmotor->halt();
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	4618      	mov	r0, r3
 8004342:	f000 fd01 	bl	8004d48 <_ZN9AppMotion5Motor4haltEv>
	rmotor->halt();
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	4618      	mov	r0, r3
 800434c:	f000 fcfc 	bl	8004d48 <_ZN9AppMotion5Motor4haltEv>
}
 8004350:	bf00      	nop
 8004352:	3764      	adds	r7, #100	; 0x64
 8004354:	46bd      	mov	sp, r7
 8004356:	ecbd 8b02 	vpop	{d8}
 800435a:	bd90      	pop	{r4, r7, pc}
 800435c:	f3af 8000 	nop.w
 8004360:	00000000 	.word	0x00000000
 8004364:	40668000 	.word	0x40668000
 8004368:	40468000 	.word	0x40468000
 800436c:	42a00000 	.word	0x42a00000
 8004370:	00000000 	.word	0x00000000
 8004374:	42340000 	.word	0x42340000
 8004378:	20000668 	.word	0x20000668
 800437c:	66666667 	.word	0x66666667
 8004380:	3ff80000 	.word	0x3ff80000
 8004384:	00000000 	.word	0x00000000

08004388 <_ZN9AppMotion16MotionController18task2ScanAndReturnEb>:

void MotionController::task2ScanAndReturn(bool dir)
{
 8004388:	b590      	push	{r4, r7, lr}
 800438a:	ed2d 8b02 	vpush	{d8}
 800438e:	b099      	sub	sp, #100	; 0x64
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
 8004394:	460b      	mov	r3, r1
 8004396:	70fb      	strb	r3, [r7, #3]
	emergency = false;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2200      	movs	r2, #0
 800439c:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158
	servo->turnFront();
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	68db      	ldr	r3, [r3, #12]
 80043a4:	4618      	mov	r0, r3
 80043a6:	f000 fc22 	bl	8004bee <_ZN9AppMotion5Servo9turnFrontEv>
	lmotor->setForward();
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	4618      	mov	r0, r3
 80043b0:	f000 fcf7 	bl	8004da2 <_ZN9AppMotion5Motor10setForwardEv>
	rmotor->setForward();
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	4618      	mov	r0, r3
 80043ba:	f000 fcf2 	bl	8004da2 <_ZN9AppMotion5Motor10setForwardEv>
	lmotor->setSpeed(100);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	2164      	movs	r1, #100	; 0x64
 80043c4:	4618      	mov	r0, r3
 80043c6:	f000 fc49 	bl	8004c5c <_ZN9AppMotion5Motor8setSpeedEm>
	rmotor->setSpeed(100);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	2164      	movs	r1, #100	; 0x64
 80043d0:	4618      	mov	r0, r3
 80043d2:	f000 fc43 	bl	8004c5c <_ZN9AppMotion5Motor8setSpeedEm>

	uint32_t timeStart = HAL_GetTick();
 80043d6:	f002 fe8b 	bl	80070f0 <HAL_GetTick>
 80043da:	62f8      	str	r0, [r7, #44]	; 0x2c
	uint32_t l_encoder_count = lencoder->getCount();
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	691b      	ldr	r3, [r3, #16]
 80043e0:	4618      	mov	r0, r3
 80043e2:	f000 fd23 	bl	8004e2c <_ZN9AppMotion7Encoder8getCountEv>
 80043e6:	65f8      	str	r0, [r7, #92]	; 0x5c
	uint32_t r_encoder_count = rencoder->getCount();
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	695b      	ldr	r3, [r3, #20]
 80043ec:	4618      	mov	r0, r3
 80043ee:	f000 fd1d 	bl	8004e2c <_ZN9AppMotion7Encoder8getCountEv>
 80043f2:	65b8      	str	r0, [r7, #88]	; 0x58
	double target = (double) (MAX_OBST_LEN/2 + TURN_ARC_LEN) / DISTANCE_PER_ENCODER_PULSE;
 80043f4:	4bb8      	ldr	r3, [pc, #736]	; (80046d8 <_ZN9AppMotion16MotionController18task2ScanAndReturnEb+0x350>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	085a      	lsrs	r2, r3, #1
 80043fa:	4bb8      	ldr	r3, [pc, #736]	; (80046dc <_ZN9AppMotion16MotionController18task2ScanAndReturnEb+0x354>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4413      	add	r3, r2
 8004400:	4618      	mov	r0, r3
 8004402:	f7fc f87f 	bl	8000504 <__aeabi_ui2d>
 8004406:	a3b2      	add	r3, pc, #712	; (adr r3, 80046d0 <_ZN9AppMotion16MotionController18task2ScanAndReturnEb+0x348>)
 8004408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800440c:	f7fc fa1e 	bl	800084c <__aeabi_ddiv>
 8004410:	4602      	mov	r2, r0
 8004412:	460b      	mov	r3, r1
 8004414:	e9c7 2308 	strd	r2, r3, [r7, #32]

	double cur_left = 0, cur_right = 0;
 8004418:	f04f 0200 	mov.w	r2, #0
 800441c:	f04f 0300 	mov.w	r3, #0
 8004420:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
 8004424:	f04f 0200 	mov.w	r2, #0
 8004428:	f04f 0300 	mov.w	r3, #0
 800442c:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	float count_left = 0, count_right = 0;
 8004430:	f04f 0300 	mov.w	r3, #0
 8004434:	61fb      	str	r3, [r7, #28]
 8004436:	f04f 0300 	mov.w	r3, #0
 800443a:	61bb      	str	r3, [r7, #24]
	double speed_error = 0;
 800443c:	f04f 0200 	mov.w	r2, #0
 8004440:	f04f 0300 	mov.w	r3, #0
 8004444:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	do {

		count_left = (double) lencoder->getDelta(l_encoder_count,
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	691c      	ldr	r4, [r3, #16]
				lencoder->getCount());
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	691b      	ldr	r3, [r3, #16]
		count_left = (double) lencoder->getDelta(l_encoder_count,
 8004450:	4618      	mov	r0, r3
 8004452:	f000 fceb 	bl	8004e2c <_ZN9AppMotion7Encoder8getCountEv>
 8004456:	4603      	mov	r3, r0
 8004458:	461a      	mov	r2, r3
 800445a:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800445c:	4620      	mov	r0, r4
 800445e:	f000 fcf3 	bl	8004e48 <_ZN9AppMotion7Encoder8getDeltaEmm>
 8004462:	4603      	mov	r3, r0
 8004464:	4618      	mov	r0, r3
 8004466:	f7fc f84d 	bl	8000504 <__aeabi_ui2d>
 800446a:	4602      	mov	r2, r0
 800446c:	460b      	mov	r3, r1
 800446e:	4610      	mov	r0, r2
 8004470:	4619      	mov	r1, r3
 8004472:	f7fc fbb9 	bl	8000be8 <__aeabi_d2f>
 8004476:	4603      	mov	r3, r0
 8004478:	61fb      	str	r3, [r7, #28]
		count_right = (double) rencoder->getDelta(r_encoder_count,
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	695c      	ldr	r4, [r3, #20]
				rencoder->getCount());
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	695b      	ldr	r3, [r3, #20]
		count_right = (double) rencoder->getDelta(r_encoder_count,
 8004482:	4618      	mov	r0, r3
 8004484:	f000 fcd2 	bl	8004e2c <_ZN9AppMotion7Encoder8getCountEv>
 8004488:	4603      	mov	r3, r0
 800448a:	461a      	mov	r2, r3
 800448c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800448e:	4620      	mov	r0, r4
 8004490:	f000 fcda 	bl	8004e48 <_ZN9AppMotion7Encoder8getDeltaEmm>
 8004494:	4603      	mov	r3, r0
 8004496:	4618      	mov	r0, r3
 8004498:	f7fc f834 	bl	8000504 <__aeabi_ui2d>
 800449c:	4602      	mov	r2, r0
 800449e:	460b      	mov	r3, r1
 80044a0:	4610      	mov	r0, r2
 80044a2:	4619      	mov	r1, r3
 80044a4:	f7fc fba0 	bl	8000be8 <__aeabi_d2f>
 80044a8:	4603      	mov	r3, r0
 80044aa:	61bb      	str	r3, [r7, #24]

		cur_left += count_left;
 80044ac:	69f8      	ldr	r0, [r7, #28]
 80044ae:	f7fc f84b 	bl	8000548 <__aeabi_f2d>
 80044b2:	4602      	mov	r2, r0
 80044b4:	460b      	mov	r3, r1
 80044b6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80044ba:	f7fb fee7 	bl	800028c <__adddf3>
 80044be:	4602      	mov	r2, r0
 80044c0:	460b      	mov	r3, r1
 80044c2:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
		cur_right += count_right;
 80044c6:	69b8      	ldr	r0, [r7, #24]
 80044c8:	f7fc f83e 	bl	8000548 <__aeabi_f2d>
 80044cc:	4602      	mov	r2, r0
 80044ce:	460b      	mov	r3, r1
 80044d0:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80044d4:	f7fb feda 	bl	800028c <__adddf3>
 80044d8:	4602      	mov	r2, r0
 80044da:	460b      	mov	r3, r1
 80044dc:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		speed_error += (count_left - count_right);
 80044e0:	ed97 7a07 	vldr	s14, [r7, #28]
 80044e4:	edd7 7a06 	vldr	s15, [r7, #24]
 80044e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80044ec:	ee17 0a90 	vmov	r0, s15
 80044f0:	f7fc f82a 	bl	8000548 <__aeabi_f2d>
 80044f4:	4602      	mov	r2, r0
 80044f6:	460b      	mov	r3, r1
 80044f8:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80044fc:	f7fb fec6 	bl	800028c <__adddf3>
 8004500:	4602      	mov	r2, r0
 8004502:	460b      	mov	r3, r1
 8004504:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

		l_encoder_count = lencoder->getCount();
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	691b      	ldr	r3, [r3, #16]
 800450c:	4618      	mov	r0, r3
 800450e:	f000 fc8d 	bl	8004e2c <_ZN9AppMotion7Encoder8getCountEv>
 8004512:	65f8      	str	r0, [r7, #92]	; 0x5c
		r_encoder_count = rencoder->getCount();
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	695b      	ldr	r3, [r3, #20]
 8004518:	4618      	mov	r0, r3
 800451a:	f000 fc87 	bl	8004e2c <_ZN9AppMotion7Encoder8getCountEv>
 800451e:	65b8      	str	r0, [r7, #88]	; 0x58

		if ((cur_left > target && cur_right > target) || (sensor_data.ir_distL > IR_TH && dir)
 8004520:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004524:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004528:	f7fc faf6 	bl	8000b18 <__aeabi_dcmpgt>
 800452c:	4603      	mov	r3, r0
 800452e:	2b00      	cmp	r3, #0
 8004530:	d008      	beq.n	8004544 <_ZN9AppMotion16MotionController18task2ScanAndReturnEb+0x1bc>
 8004532:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004536:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800453a:	f7fc faed 	bl	8000b18 <__aeabi_dcmpgt>
 800453e:	4603      	mov	r3, r0
 8004540:	2b00      	cmp	r3, #0
 8004542:	d124      	bne.n	800458e <_ZN9AppMotion16MotionController18task2ScanAndReturnEb+0x206>
 8004544:	4b66      	ldr	r3, [pc, #408]	; (80046e0 <_ZN9AppMotion16MotionController18task2ScanAndReturnEb+0x358>)
 8004546:	ed93 7a01 	vldr	s14, [r3, #4]
 800454a:	4b66      	ldr	r3, [pc, #408]	; (80046e4 <_ZN9AppMotion16MotionController18task2ScanAndReturnEb+0x35c>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	ee07 3a90 	vmov	s15, r3
 8004552:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004556:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800455a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800455e:	dd02      	ble.n	8004566 <_ZN9AppMotion16MotionController18task2ScanAndReturnEb+0x1de>
 8004560:	78fb      	ldrb	r3, [r7, #3]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d113      	bne.n	800458e <_ZN9AppMotion16MotionController18task2ScanAndReturnEb+0x206>
				|| (sensor_data.ir_distR > IR_TH && !dir))
 8004566:	4b5e      	ldr	r3, [pc, #376]	; (80046e0 <_ZN9AppMotion16MotionController18task2ScanAndReturnEb+0x358>)
 8004568:	ed93 7a02 	vldr	s14, [r3, #8]
 800456c:	4b5d      	ldr	r3, [pc, #372]	; (80046e4 <_ZN9AppMotion16MotionController18task2ScanAndReturnEb+0x35c>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	ee07 3a90 	vmov	s15, r3
 8004574:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004578:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800457c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004580:	dd42      	ble.n	8004608 <_ZN9AppMotion16MotionController18task2ScanAndReturnEb+0x280>
 8004582:	78fb      	ldrb	r3, [r7, #3]
 8004584:	f083 0301 	eor.w	r3, r3, #1
 8004588:	b2db      	uxtb	r3, r3
 800458a:	2b00      	cmp	r3, #0
 800458c:	d03c      	beq.n	8004608 <_ZN9AppMotion16MotionController18task2ScanAndReturnEb+0x280>
		{
			sensor_data.last_halt_val = (uint32_t) (cur_left>cur_right?cur_right:cur_left) * DISTANCE_PER_ENCODER_PULSE;
 800458e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004592:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004596:	f7fc fabf 	bl	8000b18 <__aeabi_dcmpgt>
 800459a:	4603      	mov	r3, r0
 800459c:	2b00      	cmp	r3, #0
 800459e:	d008      	beq.n	80045b2 <_ZN9AppMotion16MotionController18task2ScanAndReturnEb+0x22a>
 80045a0:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80045a4:	f7fc fb00 	bl	8000ba8 <__aeabi_d2uiz>
 80045a8:	4603      	mov	r3, r0
 80045aa:	4618      	mov	r0, r3
 80045ac:	f7fb ffaa 	bl	8000504 <__aeabi_ui2d>
 80045b0:	e007      	b.n	80045c2 <_ZN9AppMotion16MotionController18task2ScanAndReturnEb+0x23a>
 80045b2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80045b6:	f7fc faf7 	bl	8000ba8 <__aeabi_d2uiz>
 80045ba:	4603      	mov	r3, r0
 80045bc:	4618      	mov	r0, r3
 80045be:	f7fb ffa1 	bl	8000504 <__aeabi_ui2d>
 80045c2:	a343      	add	r3, pc, #268	; (adr r3, 80046d0 <_ZN9AppMotion16MotionController18task2ScanAndReturnEb+0x348>)
 80045c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045c8:	f7fc f816 	bl	80005f8 <__aeabi_dmul>
 80045cc:	4602      	mov	r2, r0
 80045ce:	460b      	mov	r3, r1
 80045d0:	4610      	mov	r0, r2
 80045d2:	4619      	mov	r1, r3
 80045d4:	f7fc fae8 	bl	8000ba8 <__aeabi_d2uiz>
 80045d8:	4603      	mov	r3, r0
 80045da:	4a41      	ldr	r2, [pc, #260]	; (80046e0 <_ZN9AppMotion16MotionController18task2ScanAndReturnEb+0x358>)
 80045dc:	6353      	str	r3, [r2, #52]	; 0x34
			break;
 80045de:	bf00      	nop
		sensor_data.last_halt_val = (MAX_OBST_LEN/2 + TURN_ARC_LEN);
	} while (1);


    // EDIT THIS !!
	osDelay(1);
 80045e0:	2001      	movs	r0, #1
 80045e2:	f008 fc61 	bl	800cea8 <osDelay>

	lmotor->halt();
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	4618      	mov	r0, r3
 80045ec:	f000 fbac 	bl	8004d48 <_ZN9AppMotion5Motor4haltEv>
	rmotor->halt();
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	4618      	mov	r0, r3
 80045f6:	f000 fba7 	bl	8004d48 <_ZN9AppMotion5Motor4haltEv>


	!dir ? lmotor->setSpeed(100) : lmotor->setSpeed(35);
 80045fa:	78fb      	ldrb	r3, [r7, #3]
 80045fc:	f083 0301 	eor.w	r3, r3, #1
 8004600:	b2db      	uxtb	r3, r3
 8004602:	2b00      	cmp	r3, #0
 8004604:	d013      	beq.n	800462e <_ZN9AppMotion16MotionController18task2ScanAndReturnEb+0x2a6>
 8004606:	e00b      	b.n	8004620 <_ZN9AppMotion16MotionController18task2ScanAndReturnEb+0x298>
		osDelay(10);
 8004608:	200a      	movs	r0, #10
 800460a:	f008 fc4d 	bl	800cea8 <osDelay>
		sensor_data.last_halt_val = (MAX_OBST_LEN/2 + TURN_ARC_LEN);
 800460e:	4b32      	ldr	r3, [pc, #200]	; (80046d8 <_ZN9AppMotion16MotionController18task2ScanAndReturnEb+0x350>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	085a      	lsrs	r2, r3, #1
 8004614:	4b31      	ldr	r3, [pc, #196]	; (80046dc <_ZN9AppMotion16MotionController18task2ScanAndReturnEb+0x354>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4413      	add	r3, r2
 800461a:	4a31      	ldr	r2, [pc, #196]	; (80046e0 <_ZN9AppMotion16MotionController18task2ScanAndReturnEb+0x358>)
 800461c:	6353      	str	r3, [r2, #52]	; 0x34
		count_left = (double) lencoder->getDelta(l_encoder_count,
 800461e:	e713      	b.n	8004448 <_ZN9AppMotion16MotionController18task2ScanAndReturnEb+0xc0>
	!dir ? lmotor->setSpeed(100) : lmotor->setSpeed(35);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	2164      	movs	r1, #100	; 0x64
 8004626:	4618      	mov	r0, r3
 8004628:	f000 fb18 	bl	8004c5c <_ZN9AppMotion5Motor8setSpeedEm>
 800462c:	e005      	b.n	800463a <_ZN9AppMotion16MotionController18task2ScanAndReturnEb+0x2b2>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	2123      	movs	r1, #35	; 0x23
 8004634:	4618      	mov	r0, r3
 8004636:	f000 fb11 	bl	8004c5c <_ZN9AppMotion5Motor8setSpeedEm>
	!dir ? rmotor->setSpeed(35) : rmotor->setSpeed(100);
 800463a:	78fb      	ldrb	r3, [r7, #3]
 800463c:	f083 0301 	eor.w	r3, r3, #1
 8004640:	b2db      	uxtb	r3, r3
 8004642:	2b00      	cmp	r3, #0
 8004644:	d006      	beq.n	8004654 <_ZN9AppMotion16MotionController18task2ScanAndReturnEb+0x2cc>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	689b      	ldr	r3, [r3, #8]
 800464a:	2123      	movs	r1, #35	; 0x23
 800464c:	4618      	mov	r0, r3
 800464e:	f000 fb05 	bl	8004c5c <_ZN9AppMotion5Motor8setSpeedEm>
 8004652:	e005      	b.n	8004660 <_ZN9AppMotion16MotionController18task2ScanAndReturnEb+0x2d8>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	689b      	ldr	r3, [r3, #8]
 8004658:	2164      	movs	r1, #100	; 0x64
 800465a:	4618      	mov	r0, r3
 800465c:	f000 fafe 	bl	8004c5c <_ZN9AppMotion5Motor8setSpeedEm>

	uint32_t timeNow = HAL_GetTick();
 8004660:	f002 fd46 	bl	80070f0 <HAL_GetTick>
 8004664:	6178      	str	r0, [r7, #20]
	timeStart = timeNow;
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	62fb      	str	r3, [r7, #44]	; 0x2c
	float target_yaw = 0;
 800466a:	f04f 0300 	mov.w	r3, #0
 800466e:	63fb      	str	r3, [r7, #60]	; 0x3c
	float req = ((float) 90) ;
 8004670:	4b1d      	ldr	r3, [pc, #116]	; (80046e8 <_ZN9AppMotion16MotionController18task2ScanAndReturnEb+0x360>)
 8004672:	613b      	str	r3, [r7, #16]
	float cur = sensor_data.yaw_abs; //[-179,180]
 8004674:	4b1a      	ldr	r3, [pc, #104]	; (80046e0 <_ZN9AppMotion16MotionController18task2ScanAndReturnEb+0x358>)
 8004676:	691b      	ldr	r3, [r3, #16]
 8004678:	63bb      	str	r3, [r7, #56]	; 0x38
	float prev_yaw = cur;
 800467a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800467c:	60fb      	str	r3, [r7, #12]
	float last_target_dist = 99999.0f; // overshoot protection
 800467e:	4b1b      	ldr	r3, [pc, #108]	; (80046ec <_ZN9AppMotion16MotionController18task2ScanAndReturnEb+0x364>)
 8004680:	637b      	str	r3, [r7, #52]	; 0x34
	float bwd_diffn_delta = 0;
 8004682:	f04f 0300 	mov.w	r3, #0
 8004686:	633b      	str	r3, [r7, #48]	; 0x30

	if(dir) //increase
 8004688:	78fb      	ldrb	r3, [r7, #3]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d047      	beq.n	800471e <_ZN9AppMotion16MotionController18task2ScanAndReturnEb+0x396>
	{
		if((req + cur) > 179) target_yaw = -180 + (req - (180 - cur));
 800468e:	ed97 7a04 	vldr	s14, [r7, #16]
 8004692:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8004696:	ee77 7a27 	vadd.f32	s15, s14, s15
 800469a:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80046f0 <_ZN9AppMotion16MotionController18task2ScanAndReturnEb+0x368>
 800469e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80046a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046a6:	dd31      	ble.n	800470c <_ZN9AppMotion16MotionController18task2ScanAndReturnEb+0x384>
 80046a8:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80046fc <_ZN9AppMotion16MotionController18task2ScanAndReturnEb+0x374>
 80046ac:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80046b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80046b4:	ed97 7a04 	vldr	s14, [r7, #16]
 80046b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80046bc:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80046fc <_ZN9AppMotion16MotionController18task2ScanAndReturnEb+0x374>
 80046c0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80046c4:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
 80046c8:	e04f      	b.n	800476a <_ZN9AppMotion16MotionController18task2ScanAndReturnEb+0x3e2>
 80046ca:	bf00      	nop
 80046cc:	f3af 8000 	nop.w
 80046d0:	c65572b1 	.word	0xc65572b1
 80046d4:	3f8c04ac 	.word	0x3f8c04ac
 80046d8:	2000005c 	.word	0x2000005c
 80046dc:	20000060 	.word	0x20000060
 80046e0:	20000668 	.word	0x20000668
 80046e4:	20000064 	.word	0x20000064
 80046e8:	42b40000 	.word	0x42b40000
 80046ec:	47c34f80 	.word	0x47c34f80
 80046f0:	43330000 	.word	0x43330000
 80046f4:	c3330000 	.word	0xc3330000
 80046f8:	c3340000 	.word	0xc3340000
 80046fc:	43340000 	.word	0x43340000
 8004700:	42a00000 	.word	0x42a00000
 8004704:	00000000 	.word	0x00000000
 8004708:	42340000 	.word	0x42340000
		else target_yaw = req + cur;
 800470c:	ed97 7a04 	vldr	s14, [r7, #16]
 8004710:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8004714:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004718:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
 800471c:	e025      	b.n	800476a <_ZN9AppMotion16MotionController18task2ScanAndReturnEb+0x3e2>
	}
	else
	{
		if((cur - req) < -179) target_yaw = 180 - (req + (-180 - cur));
 800471e:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8004722:	edd7 7a04 	vldr	s15, [r7, #16]
 8004726:	ee77 7a67 	vsub.f32	s15, s14, s15
 800472a:	ed1f 7a0e 	vldr	s14, [pc, #-56]	; 80046f4 <_ZN9AppMotion16MotionController18task2ScanAndReturnEb+0x36c>
 800472e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004732:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004736:	d510      	bpl.n	800475a <_ZN9AppMotion16MotionController18task2ScanAndReturnEb+0x3d2>
 8004738:	ed1f 7a11 	vldr	s14, [pc, #-68]	; 80046f8 <_ZN9AppMotion16MotionController18task2ScanAndReturnEb+0x370>
 800473c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8004740:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004744:	edd7 7a04 	vldr	s15, [r7, #16]
 8004748:	ee77 7a27 	vadd.f32	s15, s14, s15
 800474c:	ed1f 7a15 	vldr	s14, [pc, #-84]	; 80046fc <_ZN9AppMotion16MotionController18task2ScanAndReturnEb+0x374>
 8004750:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004754:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
 8004758:	e007      	b.n	800476a <_ZN9AppMotion16MotionController18task2ScanAndReturnEb+0x3e2>
		else target_yaw = cur - req;
 800475a:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800475e:	edd7 7a04 	vldr	s15, [r7, #16]
 8004762:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004766:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	}

	do{
		if (abs(target_yaw - cur) < 45 ) {
 800476a:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800476e:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8004772:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004776:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800477a:	ee17 3a90 	vmov	r3, s15
 800477e:	2b00      	cmp	r3, #0
 8004780:	bfb8      	it	lt
 8004782:	425b      	neglt	r3, r3
 8004784:	2b2c      	cmp	r3, #44	; 0x2c
 8004786:	dc57      	bgt.n	8004838 <_ZN9AppMotion16MotionController18task2ScanAndReturnEb+0x4b0>
			if(!dir) lmotor->setSpeed((uint32_t)map(abs(target_yaw - cur), 45, 0, 80, 15));
 8004788:	78fb      	ldrb	r3, [r7, #3]
 800478a:	f083 0301 	eor.w	r3, r3, #1
 800478e:	b2db      	uxtb	r3, r3
 8004790:	2b00      	cmp	r3, #0
 8004792:	d028      	beq.n	80047e6 <_ZN9AppMotion16MotionController18task2ScanAndReturnEb+0x45e>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	685c      	ldr	r4, [r3, #4]
 8004798:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800479c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80047a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80047a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80047a8:	ee17 3a90 	vmov	r3, s15
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	bfb8      	it	lt
 80047b0:	425b      	neglt	r3, r3
 80047b2:	ee07 3a90 	vmov	s15, r3
 80047b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80047ba:	eeb2 2a0e 	vmov.f32	s4, #46	; 0x41700000  15.0
 80047be:	ed5f 1a30 	vldr	s3, [pc, #-192]	; 8004700 <_ZN9AppMotion16MotionController18task2ScanAndReturnEb+0x378>
 80047c2:	ed1f 1a30 	vldr	s2, [pc, #-192]	; 8004704 <_ZN9AppMotion16MotionController18task2ScanAndReturnEb+0x37c>
 80047c6:	ed5f 0a30 	vldr	s1, [pc, #-192]	; 8004708 <_ZN9AppMotion16MotionController18task2ScanAndReturnEb+0x380>
 80047ca:	eeb0 0a67 	vmov.f32	s0, s15
 80047ce:	f7fe fa07 	bl	8002be0 <_ZN9AppMotion16MotionController3mapEfffff>
 80047d2:	eef0 7a40 	vmov.f32	s15, s0
 80047d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80047da:	ee17 1a90 	vmov	r1, s15
 80047de:	4620      	mov	r0, r4
 80047e0:	f000 fa3c 	bl	8004c5c <_ZN9AppMotion5Motor8setSpeedEm>
 80047e4:	e0e3      	b.n	80049ae <_ZN9AppMotion16MotionController18task2ScanAndReturnEb+0x626>

			else rmotor->setSpeed((uint32_t)map(abs(target_yaw - cur), 45, 0, 80, 15));
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	689c      	ldr	r4, [r3, #8]
 80047ea:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80047ee:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80047f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80047f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80047fa:	ee17 3a90 	vmov	r3, s15
 80047fe:	2b00      	cmp	r3, #0
 8004800:	bfb8      	it	lt
 8004802:	425b      	neglt	r3, r3
 8004804:	ee07 3a90 	vmov	s15, r3
 8004808:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800480c:	eeb2 2a0e 	vmov.f32	s4, #46	; 0x41700000  15.0
 8004810:	ed5f 1a45 	vldr	s3, [pc, #-276]	; 8004700 <_ZN9AppMotion16MotionController18task2ScanAndReturnEb+0x378>
 8004814:	ed1f 1a45 	vldr	s2, [pc, #-276]	; 8004704 <_ZN9AppMotion16MotionController18task2ScanAndReturnEb+0x37c>
 8004818:	ed5f 0a45 	vldr	s1, [pc, #-276]	; 8004708 <_ZN9AppMotion16MotionController18task2ScanAndReturnEb+0x380>
 800481c:	eeb0 0a67 	vmov.f32	s0, s15
 8004820:	f7fe f9de 	bl	8002be0 <_ZN9AppMotion16MotionController3mapEfffff>
 8004824:	eef0 7a40 	vmov.f32	s15, s0
 8004828:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800482c:	ee17 1a90 	vmov	r1, s15
 8004830:	4620      	mov	r0, r4
 8004832:	f000 fa13 	bl	8004c5c <_ZN9AppMotion5Motor8setSpeedEm>
 8004836:	e0ba      	b.n	80049ae <_ZN9AppMotion16MotionController18task2ScanAndReturnEb+0x626>
		}
		else if(fmod(abs(abs(target_yaw) - abs(cur)), 180) < 45 )
 8004838:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800483c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004840:	ee17 3a90 	vmov	r3, s15
 8004844:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8004848:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800484c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8004850:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004854:	ee17 3a90 	vmov	r3, s15
 8004858:	2b00      	cmp	r3, #0
 800485a:	bfb8      	it	lt
 800485c:	425b      	neglt	r3, r3
 800485e:	1ad3      	subs	r3, r2, r3
 8004860:	2b00      	cmp	r3, #0
 8004862:	bfb8      	it	lt
 8004864:	425b      	neglt	r3, r3
 8004866:	4618      	mov	r0, r3
 8004868:	f7fb fe5c 	bl	8000524 <__aeabi_i2d>
 800486c:	4602      	mov	r2, r0
 800486e:	460b      	mov	r3, r1
 8004870:	ed9f 1bb5 	vldr	d1, [pc, #724]	; 8004b48 <_ZN9AppMotion16MotionController18task2ScanAndReturnEb+0x7c0>
 8004874:	ec43 2b10 	vmov	d0, r2, r3
 8004878:	f00b f9e0 	bl	800fc3c <fmod>
 800487c:	ec51 0b10 	vmov	r0, r1, d0
 8004880:	2301      	movs	r3, #1
 8004882:	461c      	mov	r4, r3
 8004884:	f04f 0200 	mov.w	r2, #0
 8004888:	4bb1      	ldr	r3, [pc, #708]	; (8004b50 <_ZN9AppMotion16MotionController18task2ScanAndReturnEb+0x7c8>)
 800488a:	f7fc f927 	bl	8000adc <__aeabi_dcmplt>
 800488e:	4603      	mov	r3, r0
 8004890:	2b00      	cmp	r3, #0
 8004892:	d101      	bne.n	8004898 <_ZN9AppMotion16MotionController18task2ScanAndReturnEb+0x510>
 8004894:	2300      	movs	r3, #0
 8004896:	461c      	mov	r4, r3
 8004898:	b2e3      	uxtb	r3, r4
 800489a:	2b00      	cmp	r3, #0
 800489c:	f000 8087 	beq.w	80049ae <_ZN9AppMotion16MotionController18task2ScanAndReturnEb+0x626>
		{
			if(!dir) lmotor->setSpeed((uint32_t)map(fmod(abs(abs(target_yaw) - abs(cur)), 180), 45, 0, 80, 15));
 80048a0:	78fb      	ldrb	r3, [r7, #3]
 80048a2:	f083 0301 	eor.w	r3, r3, #1
 80048a6:	b2db      	uxtb	r3, r3
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d040      	beq.n	800492e <_ZN9AppMotion16MotionController18task2ScanAndReturnEb+0x5a6>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	685c      	ldr	r4, [r3, #4]
 80048b0:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80048b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80048b8:	ee17 3a90 	vmov	r3, s15
 80048bc:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80048c0:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80048c4:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80048c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80048cc:	ee17 3a90 	vmov	r3, s15
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	bfb8      	it	lt
 80048d4:	425b      	neglt	r3, r3
 80048d6:	1ad3      	subs	r3, r2, r3
 80048d8:	2b00      	cmp	r3, #0
 80048da:	bfb8      	it	lt
 80048dc:	425b      	neglt	r3, r3
 80048de:	4618      	mov	r0, r3
 80048e0:	f7fb fe20 	bl	8000524 <__aeabi_i2d>
 80048e4:	4602      	mov	r2, r0
 80048e6:	460b      	mov	r3, r1
 80048e8:	ed9f 1b97 	vldr	d1, [pc, #604]	; 8004b48 <_ZN9AppMotion16MotionController18task2ScanAndReturnEb+0x7c0>
 80048ec:	ec43 2b10 	vmov	d0, r2, r3
 80048f0:	f00b f9a4 	bl	800fc3c <fmod>
 80048f4:	ec53 2b10 	vmov	r2, r3, d0
 80048f8:	4610      	mov	r0, r2
 80048fa:	4619      	mov	r1, r3
 80048fc:	f7fc f974 	bl	8000be8 <__aeabi_d2f>
 8004900:	4603      	mov	r3, r0
 8004902:	eeb2 2a0e 	vmov.f32	s4, #46	; 0x41700000  15.0
 8004906:	eddf 1a93 	vldr	s3, [pc, #588]	; 8004b54 <_ZN9AppMotion16MotionController18task2ScanAndReturnEb+0x7cc>
 800490a:	ed9f 1a93 	vldr	s2, [pc, #588]	; 8004b58 <_ZN9AppMotion16MotionController18task2ScanAndReturnEb+0x7d0>
 800490e:	eddf 0a93 	vldr	s1, [pc, #588]	; 8004b5c <_ZN9AppMotion16MotionController18task2ScanAndReturnEb+0x7d4>
 8004912:	ee00 3a10 	vmov	s0, r3
 8004916:	f7fe f963 	bl	8002be0 <_ZN9AppMotion16MotionController3mapEfffff>
 800491a:	eef0 7a40 	vmov.f32	s15, s0
 800491e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004922:	ee17 1a90 	vmov	r1, s15
 8004926:	4620      	mov	r0, r4
 8004928:	f000 f998 	bl	8004c5c <_ZN9AppMotion5Motor8setSpeedEm>
 800492c:	e03f      	b.n	80049ae <_ZN9AppMotion16MotionController18task2ScanAndReturnEb+0x626>

			else rmotor->setSpeed((uint32_t)map(fmod(abs(abs(target_yaw) - abs(cur)), 180), 45, 0, 80, 15));
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	689c      	ldr	r4, [r3, #8]
 8004932:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8004936:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800493a:	ee17 3a90 	vmov	r3, s15
 800493e:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8004942:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8004946:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800494a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800494e:	ee17 3a90 	vmov	r3, s15
 8004952:	2b00      	cmp	r3, #0
 8004954:	bfb8      	it	lt
 8004956:	425b      	neglt	r3, r3
 8004958:	1ad3      	subs	r3, r2, r3
 800495a:	2b00      	cmp	r3, #0
 800495c:	bfb8      	it	lt
 800495e:	425b      	neglt	r3, r3
 8004960:	4618      	mov	r0, r3
 8004962:	f7fb fddf 	bl	8000524 <__aeabi_i2d>
 8004966:	4602      	mov	r2, r0
 8004968:	460b      	mov	r3, r1
 800496a:	ed9f 1b77 	vldr	d1, [pc, #476]	; 8004b48 <_ZN9AppMotion16MotionController18task2ScanAndReturnEb+0x7c0>
 800496e:	ec43 2b10 	vmov	d0, r2, r3
 8004972:	f00b f963 	bl	800fc3c <fmod>
 8004976:	ec53 2b10 	vmov	r2, r3, d0
 800497a:	4610      	mov	r0, r2
 800497c:	4619      	mov	r1, r3
 800497e:	f7fc f933 	bl	8000be8 <__aeabi_d2f>
 8004982:	4603      	mov	r3, r0
 8004984:	eeb2 2a0e 	vmov.f32	s4, #46	; 0x41700000  15.0
 8004988:	eddf 1a72 	vldr	s3, [pc, #456]	; 8004b54 <_ZN9AppMotion16MotionController18task2ScanAndReturnEb+0x7cc>
 800498c:	ed9f 1a72 	vldr	s2, [pc, #456]	; 8004b58 <_ZN9AppMotion16MotionController18task2ScanAndReturnEb+0x7d0>
 8004990:	eddf 0a72 	vldr	s1, [pc, #456]	; 8004b5c <_ZN9AppMotion16MotionController18task2ScanAndReturnEb+0x7d4>
 8004994:	ee00 3a10 	vmov	s0, r3
 8004998:	f7fe f922 	bl	8002be0 <_ZN9AppMotion16MotionController3mapEfffff>
 800499c:	eef0 7a40 	vmov.f32	s15, s0
 80049a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049a4:	ee17 1a90 	vmov	r1, s15
 80049a8:	4620      	mov	r0, r4
 80049aa:	f000 f957 	bl	8004c5c <_ZN9AppMotion5Motor8setSpeedEm>
		}

		timeNow = HAL_GetTick();
 80049ae:	f002 fb9f 	bl	80070f0 <HAL_GetTick>
 80049b2:	6178      	str	r0, [r7, #20]

		if(timeNow != sensor_data.yaw_abs_time)
 80049b4:	4b6a      	ldr	r3, [pc, #424]	; (8004b60 <_ZN9AppMotion16MotionController18task2ScanAndReturnEb+0x7d8>)
 80049b6:	699b      	ldr	r3, [r3, #24]
 80049b8:	697a      	ldr	r2, [r7, #20]
 80049ba:	429a      	cmp	r2, r3
 80049bc:	d028      	beq.n	8004a10 <_ZN9AppMotion16MotionController18task2ScanAndReturnEb+0x688>
			bwd_diffn_delta = abs(sensor_data.yaw_abs - sensor_data.yaw_abs_prev) * (float)(abs(timeNow - sensor_data.yaw_abs_time)/80);
 80049be:	4b68      	ldr	r3, [pc, #416]	; (8004b60 <_ZN9AppMotion16MotionController18task2ScanAndReturnEb+0x7d8>)
 80049c0:	ed93 7a04 	vldr	s14, [r3, #16]
 80049c4:	4b66      	ldr	r3, [pc, #408]	; (8004b60 <_ZN9AppMotion16MotionController18task2ScanAndReturnEb+0x7d8>)
 80049c6:	edd3 7a05 	vldr	s15, [r3, #20]
 80049ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80049ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80049d2:	ee17 3a90 	vmov	r3, s15
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	bfb8      	it	lt
 80049da:	425b      	neglt	r3, r3
 80049dc:	ee07 3a90 	vmov	s15, r3
 80049e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80049e4:	4b5e      	ldr	r3, [pc, #376]	; (8004b60 <_ZN9AppMotion16MotionController18task2ScanAndReturnEb+0x7d8>)
 80049e6:	699b      	ldr	r3, [r3, #24]
 80049e8:	697a      	ldr	r2, [r7, #20]
 80049ea:	1ad3      	subs	r3, r2, r3
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	bfb8      	it	lt
 80049f0:	425b      	neglt	r3, r3
 80049f2:	4a5c      	ldr	r2, [pc, #368]	; (8004b64 <_ZN9AppMotion16MotionController18task2ScanAndReturnEb+0x7dc>)
 80049f4:	fb82 1203 	smull	r1, r2, r2, r3
 80049f8:	1152      	asrs	r2, r2, #5
 80049fa:	17db      	asrs	r3, r3, #31
 80049fc:	1ad3      	subs	r3, r2, r3
 80049fe:	ee07 3a90 	vmov	s15, r3
 8004a02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004a06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a0a:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 8004a0e:	e002      	b.n	8004a16 <_ZN9AppMotion16MotionController18task2ScanAndReturnEb+0x68e>
		else
			bwd_diffn_delta = 0;
 8004a10:	f04f 0300 	mov.w	r3, #0
 8004a14:	633b      	str	r3, [r7, #48]	; 0x30
		cur = sensor_data.yaw_abs +  (bwd_diffn_delta * sgn(sensor_data.yaw_abs - sensor_data.yaw_abs_prev)); // already dlpf and qtn filtered
 8004a16:	4b52      	ldr	r3, [pc, #328]	; (8004b60 <_ZN9AppMotion16MotionController18task2ScanAndReturnEb+0x7d8>)
 8004a18:	ed93 8a04 	vldr	s16, [r3, #16]
 8004a1c:	4b50      	ldr	r3, [pc, #320]	; (8004b60 <_ZN9AppMotion16MotionController18task2ScanAndReturnEb+0x7d8>)
 8004a1e:	ed93 7a04 	vldr	s14, [r3, #16]
 8004a22:	4b4f      	ldr	r3, [pc, #316]	; (8004b60 <_ZN9AppMotion16MotionController18task2ScanAndReturnEb+0x7d8>)
 8004a24:	edd3 7a05 	vldr	s15, [r3, #20]
 8004a28:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004a2c:	eeb0 0a67 	vmov.f32	s0, s15
 8004a30:	f000 fa40 	bl	8004eb4 <_ZN9AppMotion16MotionController3sgnIfEEiT_>
 8004a34:	ee07 0a90 	vmov	s15, r0
 8004a38:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004a3c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8004a40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a44:	ee78 7a27 	vadd.f32	s15, s16, s15
 8004a48:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		sensor_data.yaw_cur_dbg = cur;
 8004a4c:	4a44      	ldr	r2, [pc, #272]	; (8004b60 <_ZN9AppMotion16MotionController18task2ScanAndReturnEb+0x7d8>)
 8004a4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a50:	61d3      	str	r3, [r2, #28]
		prev_yaw = cur;
 8004a52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a54:	60fb      	str	r3, [r7, #12]

		if (last_target_dist < abs(target_yaw - cur)
 8004a56:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8004a5a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8004a5e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004a62:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004a66:	ee17 3a90 	vmov	r3, s15
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	bfb8      	it	lt
 8004a6e:	425b      	neglt	r3, r3
 8004a70:	ee07 3a90 	vmov	s15, r3
 8004a74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004a78:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8004a7c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004a80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a84:	d50e      	bpl.n	8004aa4 <_ZN9AppMotion16MotionController18task2ScanAndReturnEb+0x71c>
				&& abs(target_yaw - cur) < 15)
 8004a86:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8004a8a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8004a8e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004a92:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004a96:	ee17 3a90 	vmov	r3, s15
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	bfb8      	it	lt
 8004a9e:	425b      	neglt	r3, r3
 8004aa0:	2b0e      	cmp	r3, #14
 8004aa2:	dd3f      	ble.n	8004b24 <_ZN9AppMotion16MotionController18task2ScanAndReturnEb+0x79c>
			break;
		else last_target_dist = abs(target_yaw - cur);
 8004aa4:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8004aa8:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8004aac:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004ab0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004ab4:	ee17 3a90 	vmov	r3, s15
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	bfb8      	it	lt
 8004abc:	425b      	neglt	r3, r3
 8004abe:	ee07 3a90 	vmov	s15, r3
 8004ac2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004ac6:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

		if ((abs(target_yaw - cur) <= 1.5)
 8004aca:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8004ace:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8004ad2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004ad6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004ada:	ee17 3a90 	vmov	r3, s15
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	bfb8      	it	lt
 8004ae2:	425b      	neglt	r3, r3
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	f7fb fd1d 	bl	8000524 <__aeabi_i2d>
				|| (HAL_GetTick() - timeStart) > 10000)
 8004aea:	f04f 0200 	mov.w	r2, #0
 8004aee:	4b1e      	ldr	r3, [pc, #120]	; (8004b68 <_ZN9AppMotion16MotionController18task2ScanAndReturnEb+0x7e0>)
 8004af0:	f7fb fffe 	bl	8000af0 <__aeabi_dcmple>
 8004af4:	4603      	mov	r3, r0
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d108      	bne.n	8004b0c <_ZN9AppMotion16MotionController18task2ScanAndReturnEb+0x784>
 8004afa:	f002 faf9 	bl	80070f0 <HAL_GetTick>
 8004afe:	4602      	mov	r2, r0
 8004b00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b02:	1ad3      	subs	r3, r2, r3
 8004b04:	f242 7210 	movw	r2, #10000	; 0x2710
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d901      	bls.n	8004b10 <_ZN9AppMotion16MotionController18task2ScanAndReturnEb+0x788>
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	e000      	b.n	8004b12 <_ZN9AppMotion16MotionController18task2ScanAndReturnEb+0x78a>
 8004b10:	2300      	movs	r3, #0
		if ((abs(target_yaw - cur) <= 1.5)
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d105      	bne.n	8004b22 <_ZN9AppMotion16MotionController18task2ScanAndReturnEb+0x79a>
		{

			break;
		}

		osDelay(2);
 8004b16:	2002      	movs	r0, #2
 8004b18:	f008 f9c6 	bl	800cea8 <osDelay>
		osThreadYield(); // need to ensure yield for the sensortask
 8004b1c:	f008 f9a4 	bl	800ce68 <osThreadYield>
		if (abs(target_yaw - cur) < 45 ) {
 8004b20:	e623      	b.n	800476a <_ZN9AppMotion16MotionController18task2ScanAndReturnEb+0x3e2>
			break;
 8004b22:	bf00      	nop

	} while (1);

	lmotor->halt();
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	4618      	mov	r0, r3
 8004b2a:	f000 f90d 	bl	8004d48 <_ZN9AppMotion5Motor4haltEv>
	rmotor->halt();
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	689b      	ldr	r3, [r3, #8]
 8004b32:	4618      	mov	r0, r3
 8004b34:	f000 f908 	bl	8004d48 <_ZN9AppMotion5Motor4haltEv>
}
 8004b38:	bf00      	nop
 8004b3a:	3764      	adds	r7, #100	; 0x64
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	ecbd 8b02 	vpop	{d8}
 8004b42:	bd90      	pop	{r4, r7, pc}
 8004b44:	f3af 8000 	nop.w
 8004b48:	00000000 	.word	0x00000000
 8004b4c:	40668000 	.word	0x40668000
 8004b50:	40468000 	.word	0x40468000
 8004b54:	42a00000 	.word	0x42a00000
 8004b58:	00000000 	.word	0x00000000
 8004b5c:	42340000 	.word	0x42340000
 8004b60:	20000668 	.word	0x20000668
 8004b64:	66666667 	.word	0x66666667
 8004b68:	3ff80000 	.word	0x3ff80000

08004b6c <_ZN9AppMotion5ServoC1EP17TIM_HandleTypeDefmmmm>:
{
	this->turn(!dir, true, true, 60);
	this->turn(dir, true, true, 120);
	this->turn(!dir, true, true, 60);
}
Servo::Servo(TIM_HandleTypeDef *ctrl, uint32_t channel, uint32_t min,
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b084      	sub	sp, #16
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	60f8      	str	r0, [r7, #12]
 8004b74:	60b9      	str	r1, [r7, #8]
 8004b76:	607a      	str	r2, [r7, #4]
 8004b78:	603b      	str	r3, [r7, #0]
		uint32_t max, uint32_t center) {
	this->htimer = ctrl;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	68ba      	ldr	r2, [r7, #8]
 8004b7e:	601a      	str	r2, [r3, #0]
	this->channel = channel;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	687a      	ldr	r2, [r7, #4]
 8004b84:	605a      	str	r2, [r3, #4]
	this->MIN_PWM = min;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	683a      	ldr	r2, [r7, #0]
 8004b8a:	60da      	str	r2, [r3, #12]
	this->MAX_PWM = max;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	69ba      	ldr	r2, [r7, #24]
 8004b90:	611a      	str	r2, [r3, #16]
	this->CTR_PWM = center;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	69fa      	ldr	r2, [r7, #28]
 8004b96:	615a      	str	r2, [r3, #20]
	HAL_TIM_PWM_Start(ctrl, channel);
 8004b98:	6879      	ldr	r1, [r7, #4]
 8004b9a:	68b8      	ldr	r0, [r7, #8]
 8004b9c:	f005 fc9e 	bl	800a4dc <HAL_TIM_PWM_Start>
}
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	3710      	adds	r7, #16
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bd80      	pop	{r7, pc}

08004baa <_ZN9AppMotion5Servo8turnLeftEv>:

void Servo::turnLeft() {
 8004baa:	b580      	push	{r7, lr}
 8004bac:	b082      	sub	sp, #8
 8004bae:	af00      	add	r7, sp, #0
 8004bb0:	6078      	str	r0, [r7, #4]
	this->htimer->Instance->CCR1 = MIN_PWM;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	687a      	ldr	r2, [r7, #4]
 8004bba:	68d2      	ldr	r2, [r2, #12]
 8004bbc:	635a      	str	r2, [r3, #52]	; 0x34
	osDelay(TURN_DELAY_MS);
 8004bbe:	20fa      	movs	r0, #250	; 0xfa
 8004bc0:	f008 f972 	bl	800cea8 <osDelay>

}
 8004bc4:	bf00      	nop
 8004bc6:	3708      	adds	r7, #8
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bd80      	pop	{r7, pc}

08004bcc <_ZN9AppMotion5Servo9turnRightEv>:
void Servo::turnRight() {
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b082      	sub	sp, #8
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
	this->htimer->Instance->CCR1 = MAX_PWM;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	687a      	ldr	r2, [r7, #4]
 8004bdc:	6912      	ldr	r2, [r2, #16]
 8004bde:	635a      	str	r2, [r3, #52]	; 0x34
	osDelay(TURN_DELAY_MS);
 8004be0:	20fa      	movs	r0, #250	; 0xfa
 8004be2:	f008 f961 	bl	800cea8 <osDelay>
}
 8004be6:	bf00      	nop
 8004be8:	3708      	adds	r7, #8
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}

08004bee <_ZN9AppMotion5Servo9turnFrontEv>:

void Servo::turnFront() {
 8004bee:	b580      	push	{r7, lr}
 8004bf0:	b082      	sub	sp, #8
 8004bf2:	af00      	add	r7, sp, #0
 8004bf4:	6078      	str	r0, [r7, #4]
	this->htimer->Instance->CCR1 = CTR_PWM;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	687a      	ldr	r2, [r7, #4]
 8004bfe:	6952      	ldr	r2, [r2, #20]
 8004c00:	635a      	str	r2, [r3, #52]	; 0x34
	osDelay(TURN_DELAY_MS);
 8004c02:	20fa      	movs	r0, #250	; 0xfa
 8004c04:	f008 f950 	bl	800cea8 <osDelay>
}
 8004c08:	bf00      	nop
 8004c0a:	3708      	adds	r7, #8
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	bd80      	pop	{r7, pc}

08004c10 <_ZN9AppMotion5MotorC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefS4_ttm>:

Motor::Motor(TIM_HandleTypeDef *ctrl, uint32_t channel, GPIO_TypeDef *gpioAPort,
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b084      	sub	sp, #16
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	60f8      	str	r0, [r7, #12]
 8004c18:	60b9      	str	r1, [r7, #8]
 8004c1a:	607a      	str	r2, [r7, #4]
 8004c1c:	603b      	str	r3, [r7, #0]
		GPIO_TypeDef *gpioBPort, uint16_t gpioApin, uint16_t gpioBpin,
		uint32_t pwm_period) {

	this->htimer = ctrl;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	68ba      	ldr	r2, [r7, #8]
 8004c22:	601a      	str	r2, [r3, #0]
	this->channel = channel;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	687a      	ldr	r2, [r7, #4]
 8004c28:	605a      	str	r2, [r3, #4]
	this->period = pwm_period;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c2e:	609a      	str	r2, [r3, #8]
	this->gpioAPort = gpioAPort;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	683a      	ldr	r2, [r7, #0]
 8004c34:	60da      	str	r2, [r3, #12]
	this->gpioBPort = gpioBPort;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	69ba      	ldr	r2, [r7, #24]
 8004c3a:	611a      	str	r2, [r3, #16]
	this->gpioAPin = gpioApin;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	8bba      	ldrh	r2, [r7, #28]
 8004c40:	829a      	strh	r2, [r3, #20]
	this->gpioBpin = gpioBpin;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	8c3a      	ldrh	r2, [r7, #32]
 8004c46:	82da      	strh	r2, [r3, #22]
	HAL_TIM_PWM_Start(ctrl, channel);
 8004c48:	6879      	ldr	r1, [r7, #4]
 8004c4a:	68b8      	ldr	r0, [r7, #8]
 8004c4c:	f005 fc46 	bl	800a4dc <HAL_TIM_PWM_Start>

}
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	4618      	mov	r0, r3
 8004c54:	3710      	adds	r7, #16
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd80      	pop	{r7, pc}
	...

08004c5c <_ZN9AppMotion5Motor8setSpeedEm>:

bool Motor::setSpeed(uint32_t percent) {
 8004c5c:	b480      	push	{r7}
 8004c5e:	b085      	sub	sp, #20
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
 8004c64:	6039      	str	r1, [r7, #0]
	if (percent > 100)
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	2b64      	cmp	r3, #100	; 0x64
 8004c6a:	d901      	bls.n	8004c70 <_ZN9AppMotion5Motor8setSpeedEm+0x14>
		return false;
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	e02d      	b.n	8004ccc <_ZN9AppMotion5Motor8setSpeedEm+0x70>
	uint32_t value = this->period / 100 * percent;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	689b      	ldr	r3, [r3, #8]
 8004c74:	4a18      	ldr	r2, [pc, #96]	; (8004cd8 <_ZN9AppMotion5Motor8setSpeedEm+0x7c>)
 8004c76:	fba2 2303 	umull	r2, r3, r2, r3
 8004c7a:	095a      	lsrs	r2, r3, #5
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	fb02 f303 	mul.w	r3, r2, r3
 8004c82:	60fb      	str	r3, [r7, #12]
	__HAL_TIM_SET_COMPARE(this->htimer, this->channel, value);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d105      	bne.n	8004c98 <_ZN9AppMotion5Motor8setSpeedEm+0x3c>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	68fa      	ldr	r2, [r7, #12]
 8004c94:	635a      	str	r2, [r3, #52]	; 0x34
 8004c96:	e018      	b.n	8004cca <_ZN9AppMotion5Motor8setSpeedEm+0x6e>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	2b04      	cmp	r3, #4
 8004c9e:	d105      	bne.n	8004cac <_ZN9AppMotion5Motor8setSpeedEm+0x50>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	68fa      	ldr	r2, [r7, #12]
 8004ca8:	639a      	str	r2, [r3, #56]	; 0x38
 8004caa:	e00e      	b.n	8004cca <_ZN9AppMotion5Motor8setSpeedEm+0x6e>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	2b08      	cmp	r3, #8
 8004cb2:	d105      	bne.n	8004cc0 <_ZN9AppMotion5Motor8setSpeedEm+0x64>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	68fa      	ldr	r2, [r7, #12]
 8004cbc:	63da      	str	r2, [r3, #60]	; 0x3c
 8004cbe:	e004      	b.n	8004cca <_ZN9AppMotion5Motor8setSpeedEm+0x6e>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	68fa      	ldr	r2, [r7, #12]
 8004cc8:	641a      	str	r2, [r3, #64]	; 0x40
	return true;
 8004cca:	2301      	movs	r3, #1
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	3714      	adds	r7, #20
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd6:	4770      	bx	lr
 8004cd8:	51eb851f 	.word	0x51eb851f

08004cdc <_ZN9AppMotion5Motor16_setDutyCycleValEm>:

bool Motor::_setDutyCycleVal(uint32_t dc) {
 8004cdc:	b480      	push	{r7}
 8004cde:	b083      	sub	sp, #12
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
 8004ce4:	6039      	str	r1, [r7, #0]
	if (dc > this->period)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	689b      	ldr	r3, [r3, #8]
 8004cea:	683a      	ldr	r2, [r7, #0]
 8004cec:	429a      	cmp	r2, r3
 8004cee:	d901      	bls.n	8004cf4 <_ZN9AppMotion5Motor16_setDutyCycleValEm+0x18>
		return false;
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	e023      	b.n	8004d3c <_ZN9AppMotion5Motor16_setDutyCycleValEm+0x60>
		__HAL_TIM_SET_COMPARE(this->htimer, this->channel, dc);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d105      	bne.n	8004d08 <_ZN9AppMotion5Motor16_setDutyCycleValEm+0x2c>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	683a      	ldr	r2, [r7, #0]
 8004d04:	635a      	str	r2, [r3, #52]	; 0x34
 8004d06:	e018      	b.n	8004d3a <_ZN9AppMotion5Motor16_setDutyCycleValEm+0x5e>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	2b04      	cmp	r3, #4
 8004d0e:	d105      	bne.n	8004d1c <_ZN9AppMotion5Motor16_setDutyCycleValEm+0x40>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	683a      	ldr	r2, [r7, #0]
 8004d18:	639a      	str	r2, [r3, #56]	; 0x38
 8004d1a:	e00e      	b.n	8004d3a <_ZN9AppMotion5Motor16_setDutyCycleValEm+0x5e>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	2b08      	cmp	r3, #8
 8004d22:	d105      	bne.n	8004d30 <_ZN9AppMotion5Motor16_setDutyCycleValEm+0x54>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	683a      	ldr	r2, [r7, #0]
 8004d2c:	63da      	str	r2, [r3, #60]	; 0x3c
 8004d2e:	e004      	b.n	8004d3a <_ZN9AppMotion5Motor16_setDutyCycleValEm+0x5e>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	683a      	ldr	r2, [r7, #0]
 8004d38:	641a      	str	r2, [r3, #64]	; 0x40
	return true;
 8004d3a:	2301      	movs	r3, #1
}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	370c      	adds	r7, #12
 8004d40:	46bd      	mov	sp, r7
 8004d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d46:	4770      	bx	lr

08004d48 <_ZN9AppMotion5Motor4haltEv>:

void Motor::halt() {
 8004d48:	b480      	push	{r7}
 8004d4a:	b083      	sub	sp, #12
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(this->htimer, this->channel, 0);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d105      	bne.n	8004d64 <_ZN9AppMotion5Motor4haltEv+0x1c>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	635a      	str	r2, [r3, #52]	; 0x34
}
 8004d62:	e018      	b.n	8004d96 <_ZN9AppMotion5Motor4haltEv+0x4e>
	__HAL_TIM_SET_COMPARE(this->htimer, this->channel, 0);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	2b04      	cmp	r3, #4
 8004d6a:	d105      	bne.n	8004d78 <_ZN9AppMotion5Motor4haltEv+0x30>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	2200      	movs	r2, #0
 8004d74:	639a      	str	r2, [r3, #56]	; 0x38
}
 8004d76:	e00e      	b.n	8004d96 <_ZN9AppMotion5Motor4haltEv+0x4e>
	__HAL_TIM_SET_COMPARE(this->htimer, this->channel, 0);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	2b08      	cmp	r3, #8
 8004d7e:	d105      	bne.n	8004d8c <_ZN9AppMotion5Motor4haltEv+0x44>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	2200      	movs	r2, #0
 8004d88:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8004d8a:	e004      	b.n	8004d96 <_ZN9AppMotion5Motor4haltEv+0x4e>
	__HAL_TIM_SET_COMPARE(this->htimer, this->channel, 0);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	2200      	movs	r2, #0
 8004d94:	641a      	str	r2, [r3, #64]	; 0x40
}
 8004d96:	bf00      	nop
 8004d98:	370c      	adds	r7, #12
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da0:	4770      	bx	lr

08004da2 <_ZN9AppMotion5Motor10setForwardEv>:

void Motor::setForward() {
 8004da2:	b580      	push	{r7, lr}
 8004da4:	b082      	sub	sp, #8
 8004da6:	af00      	add	r7, sp, #0
 8004da8:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(this->gpioAPort, this->gpioAPin, GPIO_PIN_RESET);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	68d8      	ldr	r0, [r3, #12]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	8a9b      	ldrh	r3, [r3, #20]
 8004db2:	2200      	movs	r2, #0
 8004db4:	4619      	mov	r1, r3
 8004db6:	f003 fc4b 	bl	8008650 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(this->gpioBPort, this->gpioBpin, GPIO_PIN_SET);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6918      	ldr	r0, [r3, #16]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	8adb      	ldrh	r3, [r3, #22]
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	4619      	mov	r1, r3
 8004dc6:	f003 fc43 	bl	8008650 <HAL_GPIO_WritePin>
}
 8004dca:	bf00      	nop
 8004dcc:	3708      	adds	r7, #8
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bd80      	pop	{r7, pc}

08004dd2 <_ZN9AppMotion5Motor11setBackwardEv>:

void Motor::setBackward() {
 8004dd2:	b580      	push	{r7, lr}
 8004dd4:	b082      	sub	sp, #8
 8004dd6:	af00      	add	r7, sp, #0
 8004dd8:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(this->gpioAPort, this->gpioAPin, GPIO_PIN_SET);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	68d8      	ldr	r0, [r3, #12]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	8a9b      	ldrh	r3, [r3, #20]
 8004de2:	2201      	movs	r2, #1
 8004de4:	4619      	mov	r1, r3
 8004de6:	f003 fc33 	bl	8008650 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(this->gpioBPort, this->gpioBpin, GPIO_PIN_RESET);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6918      	ldr	r0, [r3, #16]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	8adb      	ldrh	r3, [r3, #22]
 8004df2:	2200      	movs	r2, #0
 8004df4:	4619      	mov	r1, r3
 8004df6:	f003 fc2b 	bl	8008650 <HAL_GPIO_WritePin>
}
 8004dfa:	bf00      	nop
 8004dfc:	3708      	adds	r7, #8
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bd80      	pop	{r7, pc}

08004e02 <_ZN9AppMotion7EncoderC1EP17TIM_HandleTypeDefm>:

Encoder::Encoder(TIM_HandleTypeDef *ctrl, uint32_t channel) {
 8004e02:	b580      	push	{r7, lr}
 8004e04:	b084      	sub	sp, #16
 8004e06:	af00      	add	r7, sp, #0
 8004e08:	60f8      	str	r0, [r7, #12]
 8004e0a:	60b9      	str	r1, [r7, #8]
 8004e0c:	607a      	str	r2, [r7, #4]

	this->htimer = ctrl;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	68ba      	ldr	r2, [r7, #8]
 8004e12:	601a      	str	r2, [r3, #0]
	this->channel = channel;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	687a      	ldr	r2, [r7, #4]
 8004e18:	605a      	str	r2, [r3, #4]
	HAL_TIM_Encoder_Start(ctrl, channel);
 8004e1a:	6879      	ldr	r1, [r7, #4]
 8004e1c:	68b8      	ldr	r0, [r7, #8]
 8004e1e:	f005 fccb 	bl	800a7b8 <HAL_TIM_Encoder_Start>

}
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	4618      	mov	r0, r3
 8004e26:	3710      	adds	r7, #16
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bd80      	pop	{r7, pc}

08004e2c <_ZN9AppMotion7Encoder8getCountEv>:

uint32_t Encoder::getCount(void) {
 8004e2c:	b480      	push	{r7}
 8004e2e:	b083      	sub	sp, #12
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
	return (uint32_t) __HAL_TIM_GET_COUNTER(this->htimer);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	370c      	adds	r7, #12
 8004e40:	46bd      	mov	sp, r7
 8004e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e46:	4770      	bx	lr

08004e48 <_ZN9AppMotion7Encoder8getDeltaEmm>:

uint32_t Encoder::getDelta(uint32_t ct1, uint32_t ct2) {
 8004e48:	b480      	push	{r7}
 8004e4a:	b085      	sub	sp, #20
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	60f8      	str	r0, [r7, #12]
 8004e50:	60b9      	str	r1, [r7, #8]
 8004e52:	607a      	str	r2, [r7, #4]
	if (__HAL_TIM_IS_TIM_COUNTING_DOWN(this->htimer)) {
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f003 0310 	and.w	r3, r3, #16
 8004e60:	2b10      	cmp	r3, #16
 8004e62:	bf0c      	ite	eq
 8004e64:	2301      	moveq	r3, #1
 8004e66:	2300      	movne	r3, #0
 8004e68:	b2db      	uxtb	r3, r3
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d00e      	beq.n	8004e8c <_ZN9AppMotion7Encoder8getDeltaEmm+0x44>
		if (ct2 <= ct1) {
 8004e6e:	687a      	ldr	r2, [r7, #4]
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	429a      	cmp	r2, r3
 8004e74:	d803      	bhi.n	8004e7e <_ZN9AppMotion7Encoder8getDeltaEmm+0x36>
			return ct1 - ct2;
 8004e76:	68ba      	ldr	r2, [r7, #8]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	1ad3      	subs	r3, r2, r3
 8004e7c:	e014      	b.n	8004ea8 <_ZN9AppMotion7Encoder8getDeltaEmm+0x60>
		} else {
			return (65535 - ct2) + ct1;
 8004e7e:	68ba      	ldr	r2, [r7, #8]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	1ad3      	subs	r3, r2, r3
 8004e84:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8004e88:	33ff      	adds	r3, #255	; 0xff
 8004e8a:	e00d      	b.n	8004ea8 <_ZN9AppMotion7Encoder8getDeltaEmm+0x60>
		}
	} else {
		if (ct2 >= ct1) {
 8004e8c:	687a      	ldr	r2, [r7, #4]
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	429a      	cmp	r2, r3
 8004e92:	d303      	bcc.n	8004e9c <_ZN9AppMotion7Encoder8getDeltaEmm+0x54>
			return ct2 - ct1;
 8004e94:	687a      	ldr	r2, [r7, #4]
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	1ad3      	subs	r3, r2, r3
 8004e9a:	e005      	b.n	8004ea8 <_ZN9AppMotion7Encoder8getDeltaEmm+0x60>
		} else {
			return (65535 - ct1) + ct2;
 8004e9c:	687a      	ldr	r2, [r7, #4]
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	1ad3      	subs	r3, r2, r3
 8004ea2:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8004ea6:	33ff      	adds	r3, #255	; 0xff
		}
	}
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	3714      	adds	r7, #20
 8004eac:	46bd      	mov	sp, r7
 8004eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb2:	4770      	bx	lr

08004eb4 <_ZN9AppMotion16MotionController3sgnIfEEiT_>:
	template <typename T> static int sgn(T val) {
 8004eb4:	b480      	push	{r7}
 8004eb6:	b083      	sub	sp, #12
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	ed87 0a01 	vstr	s0, [r7, #4]
	    return (T(0) < val) - (val < T(0));
 8004ebe:	edd7 7a01 	vldr	s15, [r7, #4]
 8004ec2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004ec6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004eca:	bfcc      	ite	gt
 8004ecc:	2301      	movgt	r3, #1
 8004ece:	2300      	movle	r3, #0
 8004ed0:	b2db      	uxtb	r3, r3
 8004ed2:	461a      	mov	r2, r3
 8004ed4:	edd7 7a01 	vldr	s15, [r7, #4]
 8004ed8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004edc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ee0:	bf4c      	ite	mi
 8004ee2:	2301      	movmi	r3, #1
 8004ee4:	2300      	movpl	r3, #0
 8004ee6:	b2db      	uxtb	r3, r3
 8004ee8:	1ad3      	subs	r3, r2, r3
	}
 8004eea:	4618      	mov	r0, r3
 8004eec:	370c      	adds	r7, #12
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef4:	4770      	bx	lr

08004ef6 <_ZN9AppParser8ListenerC1EP5u_ctx>:
bool Processor::_signal_obstr = false;
bool Processor::_obstr_txed = false;

static volatile BUF_CMP_t uartRxBuf[10];
static volatile BUF_CMP_t uartOKBuf[10];
Listener::Listener(u_ctx *ctx) {
 8004ef6:	b480      	push	{r7}
 8004ef8:	b083      	sub	sp, #12
 8004efa:	af00      	add	r7, sp, #0
 8004efc:	6078      	str	r0, [r7, #4]
 8004efe:	6039      	str	r1, [r7, #0]
	this->ctx = ctx;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	683a      	ldr	r2, [r7, #0]
 8004f04:	601a      	str	r2, [r3, #0]
}
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	4618      	mov	r0, r3
 8004f0a:	370c      	adds	r7, #12
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f12:	4770      	bx	lr

08004f14 <_ZN9AppParser8ListenerD1Ev>:

Listener::~Listener() {
 8004f14:	b480      	push	{r7}
 8004f16:	b083      	sub	sp, #12
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
}
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	4618      	mov	r0, r3
 8004f20:	370c      	adds	r7, #12
 8004f22:	46bd      	mov	sp, r7
 8004f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f28:	4770      	bx	lr
	...

08004f2c <_ZN9AppParser8Listener6invokeEv>:
;
// not needed

/*! called from ISR */
volatile void Listener::invoke() {
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b088      	sub	sp, #32
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
	//osMutexRelease(this->ctx->mailbox.lock);
	AppMessage_t msg;
	memcpy(&msg.buffer, (const BUF_CMP_t*) &uartRxBuf, 10);
 8004f34:	4a0e      	ldr	r2, [pc, #56]	; (8004f70 <_ZN9AppParser8Listener6invokeEv+0x44>)
 8004f36:	f107 030c 	add.w	r3, r7, #12
 8004f3a:	ca07      	ldmia	r2, {r0, r1, r2}
 8004f3c:	c303      	stmia	r3!, {r0, r1}
 8004f3e:	801a      	strh	r2, [r3, #0]
	memset((BUF_CMP_t*) &uartRxBuf, 0, 10);
 8004f40:	220a      	movs	r2, #10
 8004f42:	2100      	movs	r1, #0
 8004f44:	480a      	ldr	r0, [pc, #40]	; (8004f70 <_ZN9AppParser8Listener6invokeEv+0x44>)
 8004f46:	f00c faa7 	bl	8011498 <memset>
	osStatus_t tmp = osMessageQueuePut(ctx->mailbox.queue, &msg, 0, 0);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8004f50:	f107 010c 	add.w	r1, r7, #12
 8004f54:	2300      	movs	r3, #0
 8004f56:	2200      	movs	r2, #0
 8004f58:	f008 f834 	bl	800cfc4 <osMessageQueuePut>
 8004f5c:	61f8      	str	r0, [r7, #28]
	//HAL_UART_Transmit(&huart3, (uint8_t *)ibuf, sizeof(ibuf), 10);
	HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_10);
 8004f5e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004f62:	4804      	ldr	r0, [pc, #16]	; (8004f74 <_ZN9AppParser8Listener6invokeEv+0x48>)
 8004f64:	f003 fb8d 	bl	8008682 <HAL_GPIO_TogglePin>

	//HAL_UART_Receive_DMA(&huart3, (uint8_t *) aRxBuffer, 5);
}
 8004f68:	bf00      	nop
 8004f6a:	3720      	adds	r7, #32
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bd80      	pop	{r7, pc}
 8004f70:	20000860 	.word	0x20000860
 8004f74:	40021000 	.word	0x40021000

08004f78 <_ZN9AppParser9ProcessorC1EP5u_ctxS2_>:

Processor::Processor(u_ctx *rx_ctx, u_ctx *tx_ctx) {
 8004f78:	b590      	push	{r4, r7, lr}
 8004f7a:	b085      	sub	sp, #20
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	60f8      	str	r0, [r7, #12]
 8004f80:	60b9      	str	r1, [r7, #8]
 8004f82:	607a      	str	r2, [r7, #4]
	this->this_ctx = rx_ctx;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	68ba      	ldr	r2, [r7, #8]
 8004f88:	601a      	str	r2, [r3, #0]
	this->o_ctx = tx_ctx;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	687a      	ldr	r2, [r7, #4]
 8004f8e:	605a      	str	r2, [r3, #4]
	this->this_ctx->mailbox.queue = osMessageQueueNew(10, sizeof(AppMessage_t),
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681c      	ldr	r4, [r3, #0]
 8004f94:	2200      	movs	r2, #0
 8004f96:	2110      	movs	r1, #16
 8004f98:	200a      	movs	r0, #10
 8004f9a:	f007 ffa0 	bl	800cede <osMessageQueueNew>
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	62a3      	str	r3, [r4, #40]	; 0x28
	NULL);
}
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	3714      	adds	r7, #20
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bd90      	pop	{r4, r7, pc}

08004fac <_ZN9AppParser9ProcessorD1Ev>:

Processor::~Processor() {
 8004fac:	b480      	push	{r7}
 8004fae:	b083      	sub	sp, #12
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
}
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	370c      	adds	r7, #12
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc0:	4770      	bx	lr
	...

08004fc4 <_ZN9AppParser9Processor5startEv>:
void Processor::startImpl(void *_this) // hardfaults on queue for some reason so made static
		{
	//static_cast<Processor *>(_this)->processorTask();
}

void Processor::start(void) {
 8004fc4:	b590      	push	{r4, r7, lr}
 8004fc6:	b085      	sub	sp, #20
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
	ctx_wrapper *wrapper_instance = new ctx_wrapper();
 8004fcc:	2008      	movs	r0, #8
 8004fce:	f00a fdf5 	bl	800fbbc <_Znwj>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	601a      	str	r2, [r3, #0]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	605a      	str	r2, [r3, #4]
 8004fdc:	60fb      	str	r3, [r7, #12]
	wrapper_instance->rx_ctx = this_ctx;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681a      	ldr	r2, [r3, #0]
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	601a      	str	r2, [r3, #0]
	wrapper_instance->tx_ctx = o_ctx;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	685a      	ldr	r2, [r3, #4]
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	605a      	str	r2, [r3, #4]
// pass context information to the thread fn since there is some issue with making the fn a class instance.
// note that this_ctx refers to this class and o_ctx refers to the (o)ther class, i.e. the destination, MotionController
	this->this_ctx->runner = osThreadNew(
			(osThreadFunc_t) Processor::processorTask, wrapper_instance,
			&(this_ctx->attr));
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	1d1a      	adds	r2, r3, #4
	this->this_ctx->runner = osThreadNew(
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681c      	ldr	r4, [r3, #0]
 8004ff8:	68f9      	ldr	r1, [r7, #12]
 8004ffa:	4804      	ldr	r0, [pc, #16]	; (800500c <_ZN9AppParser9Processor5startEv+0x48>)
 8004ffc:	f007 fea0 	bl	800cd40 <osThreadNew>
 8005000:	4603      	mov	r3, r0
 8005002:	6023      	str	r3, [r4, #0]

	return;
 8005004:	bf00      	nop
}
 8005006:	3714      	adds	r7, #20
 8005008:	46bd      	mov	sp, r7
 800500a:	bd90      	pop	{r4, r7, pc}
 800500c:	08005011 	.word	0x08005011

08005010 <_ZN9AppParser9Processor13processorTaskEPv>:

void Processor::processorTask(void *pv) {
 8005010:	b580      	push	{r7, lr}
 8005012:	b098      	sub	sp, #96	; 0x60
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(&huart3, (BUF_CMP_t*) uartRxBuf, 10);
 8005018:	220a      	movs	r2, #10
 800501a:	49a3      	ldr	r1, [pc, #652]	; (80052a8 <_ZN9AppParser9Processor13processorTaskEPv+0x298>)
 800501c:	48a3      	ldr	r0, [pc, #652]	; (80052ac <_ZN9AppParser9Processor13processorTaskEPv+0x29c>)
 800501e:	f006 fbf1 	bl	800b804 <HAL_UART_Receive_DMA>

	ctx_wrapper *wrapper = static_cast<ctx_wrapper*>(pv);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	65bb      	str	r3, [r7, #88]	; 0x58

	// Access rx_ctx and tx_ctx pointers from the wrapper
	u_ctx *rx_ctx = wrapper->rx_ctx;
 8005026:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	657b      	str	r3, [r7, #84]	; 0x54
	u_ctx *tx_ctx = wrapper->tx_ctx;
 800502c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	653b      	str	r3, [r7, #80]	; 0x50

	for (;;) {

		//HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_10);
		is_task_alive_struct.proc = true;
 8005032:	4b9f      	ldr	r3, [pc, #636]	; (80052b0 <_ZN9AppParser9Processor13processorTaskEPv+0x2a0>)
 8005034:	2201      	movs	r2, #1
 8005036:	701a      	strb	r2, [r3, #0]

		osDelay(10);
 8005038:	200a      	movs	r0, #10
 800503a:	f007 ff35 	bl	800cea8 <osDelay>
		osThreadYield();
 800503e:	f007 ff13 	bl	800ce68 <osThreadYield>
		 * enough for this purpose..
		 *
		 * Any alternative to get per-byte interrupt etc., will require rewriting of the HAL funcs
		 * or polling mechanism.
		 */
		uint32_t buf_fill = 0;
 8005042:	2300      	movs	r3, #0
 8005044:	64fb      	str	r3, [r7, #76]	; 0x4c
		for (uint32_t i = 0; i < sizeof(uartRxBuf); i++) {
 8005046:	2300      	movs	r3, #0
 8005048:	65fb      	str	r3, [r7, #92]	; 0x5c
 800504a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800504c:	2b09      	cmp	r3, #9
 800504e:	d81d      	bhi.n	800508c <_ZN9AppParser9Processor13processorTaskEPv+0x7c>
			if (uartRxBuf[i] != 0) {
 8005050:	4a95      	ldr	r2, [pc, #596]	; (80052a8 <_ZN9AppParser9Processor13processorTaskEPv+0x298>)
 8005052:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005054:	4413      	add	r3, r2
 8005056:	781b      	ldrb	r3, [r3, #0]
 8005058:	b2db      	uxtb	r3, r3
 800505a:	2b00      	cmp	r3, #0
 800505c:	bf14      	ite	ne
 800505e:	2301      	movne	r3, #1
 8005060:	2300      	moveq	r3, #0
 8005062:	b2db      	uxtb	r3, r3
 8005064:	2b00      	cmp	r3, #0
 8005066:	d00d      	beq.n	8005084 <_ZN9AppParser9Processor13processorTaskEPv+0x74>
				HAL_UART_DMAStop(&huart3);
 8005068:	4890      	ldr	r0, [pc, #576]	; (80052ac <_ZN9AppParser9Processor13processorTaskEPv+0x29c>)
 800506a:	f006 fbfb 	bl	800b864 <HAL_UART_DMAStop>
				HAL_UART_Receive_DMA(&huart3, (BUF_CMP_t*) uartRxBuf, 10);
 800506e:	220a      	movs	r2, #10
 8005070:	498d      	ldr	r1, [pc, #564]	; (80052a8 <_ZN9AppParser9Processor13processorTaskEPv+0x298>)
 8005072:	488e      	ldr	r0, [pc, #568]	; (80052ac <_ZN9AppParser9Processor13processorTaskEPv+0x29c>)
 8005074:	f006 fbc6 	bl	800b804 <HAL_UART_Receive_DMA>
				memset((BUF_CMP_t*) &uartRxBuf, 0, 10);
 8005078:	220a      	movs	r2, #10
 800507a:	2100      	movs	r1, #0
 800507c:	488a      	ldr	r0, [pc, #552]	; (80052a8 <_ZN9AppParser9Processor13processorTaskEPv+0x298>)
 800507e:	f00c fa0b 	bl	8011498 <memset>
				break;
 8005082:	e003      	b.n	800508c <_ZN9AppParser9Processor13processorTaskEPv+0x7c>
		for (uint32_t i = 0; i < sizeof(uartRxBuf); i++) {
 8005084:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005086:	3301      	adds	r3, #1
 8005088:	65fb      	str	r3, [r7, #92]	; 0x5c
 800508a:	e7de      	b.n	800504a <_ZN9AppParser9Processor13processorTaskEPv+0x3a>
			}
		}

		/* end buffer cleaning algorithm */

		sensor_data.ql = osMessageQueueGetCount(rx_ctx->mailbox.queue);
 800508c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800508e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005090:	4618      	mov	r0, r3
 8005092:	f008 f855 	bl	800d140 <osMessageQueueGetCount>
 8005096:	4603      	mov	r3, r0
 8005098:	4a86      	ldr	r2, [pc, #536]	; (80052b4 <_ZN9AppParser9Processor13processorTaskEPv+0x2a4>)
 800509a:	6253      	str	r3, [r2, #36]	; 0x24
		if (uxQueueMessagesWaiting((QueueHandle_t) rx_ctx->mailbox.queue)) {
 800509c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800509e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050a0:	4618      	mov	r0, r3
 80050a2:	f008 fd7d 	bl	800dba0 <uxQueueMessagesWaiting>
 80050a6:	4603      	mov	r3, r0
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	bf14      	ite	ne
 80050ac:	2301      	movne	r3, #1
 80050ae:	2300      	moveq	r3, #0
 80050b0:	b2db      	uxtb	r3, r3
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	f000 81c6 	beq.w	8005444 <_ZN9AppParser9Processor13processorTaskEPv+0x434>

			AppMessage_t msg;
			osMessageQueueGet(rx_ctx->mailbox.queue, &msg.buffer, 0, 5);
 80050b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80050ba:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80050bc:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80050c0:	2305      	movs	r3, #5
 80050c2:	2200      	movs	r2, #0
 80050c4:	f007 ffde 	bl	800d084 <osMessageQueueGet>
			// osMessageQueueReset(procCtx.mailbox.queue);

			/* DATA VALIDATION */
			if (!isEq<BUF_CMP_t>(START_CHAR, msg.buffer[0])) {
 80050c8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80050cc:	4619      	mov	r1, r3
 80050ce:	487a      	ldr	r0, [pc, #488]	; (80052b8 <_ZN9AppParser9Processor13processorTaskEPv+0x2a8>)
 80050d0:	f000 fbca 	bl	8005868 <_ZN9AppParser9Processor4isEqIhEEbRKT_S4_>
 80050d4:	4603      	mov	r3, r0
 80050d6:	f083 0301 	eor.w	r3, r3, #1
 80050da:	b2db      	uxtb	r3, r3
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d005      	beq.n	80050ec <_ZN9AppParser9Processor13processorTaskEPv+0xdc>
				HAL_UART_Transmit(&huart3, (BUF_CMP_t*) nack, sizeof(nack), 10);
 80050e0:	230a      	movs	r3, #10
 80050e2:	2204      	movs	r2, #4
 80050e4:	4975      	ldr	r1, [pc, #468]	; (80052bc <_ZN9AppParser9Processor13processorTaskEPv+0x2ac>)
 80050e6:	4871      	ldr	r0, [pc, #452]	; (80052ac <_ZN9AppParser9Processor13processorTaskEPv+0x29c>)
 80050e8:	f006 fafa 	bl	800b6e0 <HAL_UART_Transmit>
			}
			if (!isEq<BUF_CMP_t>(END_CHAR, msg.buffer[9])) {
 80050ec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80050f0:	3309      	adds	r3, #9
 80050f2:	4619      	mov	r1, r3
 80050f4:	4872      	ldr	r0, [pc, #456]	; (80052c0 <_ZN9AppParser9Processor13processorTaskEPv+0x2b0>)
 80050f6:	f000 fbb7 	bl	8005868 <_ZN9AppParser9Processor4isEqIhEEbRKT_S4_>
 80050fa:	4603      	mov	r3, r0
 80050fc:	f083 0301 	eor.w	r3, r3, #1
 8005100:	b2db      	uxtb	r3, r3
 8005102:	2b00      	cmp	r3, #0
 8005104:	d005      	beq.n	8005112 <_ZN9AppParser9Processor13processorTaskEPv+0x102>
				HAL_UART_Transmit(&huart3, (BUF_CMP_t*) nack, sizeof(nack), 10);
 8005106:	230a      	movs	r3, #10
 8005108:	2204      	movs	r2, #4
 800510a:	496c      	ldr	r1, [pc, #432]	; (80052bc <_ZN9AppParser9Processor13processorTaskEPv+0x2ac>)
 800510c:	4867      	ldr	r0, [pc, #412]	; (80052ac <_ZN9AppParser9Processor13processorTaskEPv+0x29c>)
 800510e:	f006 fae7 	bl	800b6e0 <HAL_UART_Transmit>
			}
			/******************/

			// do request stuff
			if (isEq<BUF_CMP_t>(REQ_CHAR, msg.buffer[1])) {
 8005112:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005116:	3301      	adds	r3, #1
 8005118:	4619      	mov	r1, r3
 800511a:	486a      	ldr	r0, [pc, #424]	; (80052c4 <_ZN9AppParser9Processor13processorTaskEPv+0x2b4>)
 800511c:	f000 fba4 	bl	8005868 <_ZN9AppParser9Processor4isEqIhEEbRKT_S4_>
 8005120:	4603      	mov	r3, r0
 8005122:	2b00      	cmp	r3, #0
 8005124:	d046      	beq.n	80051b4 <_ZN9AppParser9Processor13processorTaskEPv+0x1a4>
				if (isEq(SENSOR_CHAR, msg.buffer[2])) {
 8005126:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800512a:	3302      	adds	r3, #2
 800512c:	4619      	mov	r1, r3
 800512e:	4866      	ldr	r0, [pc, #408]	; (80052c8 <_ZN9AppParser9Processor13processorTaskEPv+0x2b8>)
 8005130:	f000 fb9a 	bl	8005868 <_ZN9AppParser9Processor4isEqIhEEbRKT_S4_>
 8005134:	4603      	mov	r3, r0
 8005136:	2b00      	cmp	r3, #0
 8005138:	d005      	beq.n	8005146 <_ZN9AppParser9Processor13processorTaskEPv+0x136>
					returnSensorRequestCmd(msg.buffer[3]);
 800513a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800513e:	4618      	mov	r0, r3
 8005140:	f000 f9ae 	bl	80054a0 <_ZN9AppParser9Processor22returnSensorRequestCmdEh>
 8005144:	e178      	b.n	8005438 <_ZN9AppParser9Processor13processorTaskEPv+0x428>
				}

				else if (isEq(AUX_CHAR, msg.buffer[2])) {
 8005146:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800514a:	3302      	adds	r3, #2
 800514c:	4619      	mov	r1, r3
 800514e:	485f      	ldr	r0, [pc, #380]	; (80052cc <_ZN9AppParser9Processor13processorTaskEPv+0x2bc>)
 8005150:	f000 fb8a 	bl	8005868 <_ZN9AppParser9Processor4isEqIhEEbRKT_S4_>
 8005154:	4603      	mov	r3, r0
 8005156:	2b00      	cmp	r3, #0
 8005158:	f000 816e 	beq.w	8005438 <_ZN9AppParser9Processor13processorTaskEPv+0x428>
					if (isEq(LAST_HALT_CHAR, msg.buffer[3])) {
 800515c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005160:	3303      	adds	r3, #3
 8005162:	4619      	mov	r1, r3
 8005164:	485a      	ldr	r0, [pc, #360]	; (80052d0 <_ZN9AppParser9Processor13processorTaskEPv+0x2c0>)
 8005166:	f000 fb7f 	bl	8005868 <_ZN9AppParser9Processor4isEqIhEEbRKT_S4_>
 800516a:	4603      	mov	r3, r0
 800516c:	2b00      	cmp	r3, #0
 800516e:	f000 8163 	beq.w	8005438 <_ZN9AppParser9Processor13processorTaskEPv+0x428>
						uint8_t tx_buf[25] = { 0 };
 8005172:	2300      	movs	r3, #0
 8005174:	60fb      	str	r3, [r7, #12]
 8005176:	f107 0310 	add.w	r3, r7, #16
 800517a:	2200      	movs	r2, #0
 800517c:	601a      	str	r2, [r3, #0]
 800517e:	605a      	str	r2, [r3, #4]
 8005180:	609a      	str	r2, [r3, #8]
 8005182:	60da      	str	r2, [r3, #12]
 8005184:	611a      	str	r2, [r3, #16]
 8005186:	751a      	strb	r2, [r3, #20]
						snprintf((char*) &tx_buf, sizeof(tx_buf), "%ld",
 8005188:	4b4a      	ldr	r3, [pc, #296]	; (80052b4 <_ZN9AppParser9Processor13processorTaskEPv+0x2a4>)
 800518a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800518c:	f107 000c 	add.w	r0, r7, #12
 8005190:	4a50      	ldr	r2, [pc, #320]	; (80052d4 <_ZN9AppParser9Processor13processorTaskEPv+0x2c4>)
 8005192:	2119      	movs	r1, #25
 8005194:	f00d f834 	bl	8012200 <sniprintf>
										sensor_data.last_halt_val);
								HAL_UART_Transmit(&huart3, (BUF_CMP_t*) tx_buf, strlen((char*) tx_buf),
 8005198:	f107 030c 	add.w	r3, r7, #12
 800519c:	4618      	mov	r0, r3
 800519e:	f7fb f817 	bl	80001d0 <strlen>
 80051a2:	4603      	mov	r3, r0
 80051a4:	b29a      	uxth	r2, r3
 80051a6:	f107 010c 	add.w	r1, r7, #12
 80051aa:	230a      	movs	r3, #10
 80051ac:	483f      	ldr	r0, [pc, #252]	; (80052ac <_ZN9AppParser9Processor13processorTaskEPv+0x29c>)
 80051ae:	f006 fa97 	bl	800b6e0 <HAL_UART_Transmit>
 80051b2:	e141      	b.n	8005438 <_ZN9AppParser9Processor13processorTaskEPv+0x428>
										10);
					}
				}

			} else if (isEq<BUF_CMP_t>(CMD_CHAR, msg.buffer[1])) {
 80051b4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80051b8:	3301      	adds	r3, #1
 80051ba:	4619      	mov	r1, r3
 80051bc:	4846      	ldr	r0, [pc, #280]	; (80052d8 <_ZN9AppParser9Processor13processorTaskEPv+0x2c8>)
 80051be:	f000 fb53 	bl	8005868 <_ZN9AppParser9Processor4isEqIhEEbRKT_S4_>
 80051c2:	4603      	mov	r3, r0
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	f000 812f 	beq.w	8005428 <_ZN9AppParser9Processor13processorTaskEPv+0x418>
				// do command stuff

				switch (msg.buffer[2]) {
 80051ca:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80051ce:	2b73      	cmp	r3, #115	; 0x73
 80051d0:	d03e      	beq.n	8005250 <_ZN9AppParser9Processor13processorTaskEPv+0x240>
 80051d2:	2b73      	cmp	r3, #115	; 0x73
 80051d4:	f300 8130 	bgt.w	8005438 <_ZN9AppParser9Processor13processorTaskEPv+0x428>
 80051d8:	2b61      	cmp	r3, #97	; 0x61
 80051da:	f000 809b 	beq.w	8005314 <_ZN9AppParser9Processor13processorTaskEPv+0x304>
 80051de:	2b6d      	cmp	r3, #109	; 0x6d
 80051e0:	f040 812a 	bne.w	8005438 <_ZN9AppParser9Processor13processorTaskEPv+0x428>
				case MOTOR_CHAR: {
					if (isEq(HALT_CHAR, msg.buffer[3])) {
 80051e4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80051e8:	3303      	adds	r3, #3
 80051ea:	4619      	mov	r1, r3
 80051ec:	483b      	ldr	r0, [pc, #236]	; (80052dc <_ZN9AppParser9Processor13processorTaskEPv+0x2cc>)
 80051ee:	f000 fb3b 	bl	8005868 <_ZN9AppParser9Processor4isEqIhEEbRKT_S4_>
 80051f2:	4603      	mov	r3, r0
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d00d      	beq.n	8005214 <_ZN9AppParser9Processor13processorTaskEPv+0x204>
						_ext_sig_halt();
 80051f8:	f7fd f944 	bl	8002484 <_ext_sig_halt>
						osMessageQueueReset(rx_ctx->mailbox.queue); // remove all movement from queue such that it works async
 80051fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80051fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005200:	4618      	mov	r0, r3
 8005202:	f007 ffbd 	bl	800d180 <osMessageQueueReset>
						HAL_UART_Transmit(&huart3, (BUF_CMP_t*) ack,
 8005206:	230a      	movs	r3, #10
 8005208:	2204      	movs	r2, #4
 800520a:	4935      	ldr	r1, [pc, #212]	; (80052e0 <_ZN9AppParser9Processor13processorTaskEPv+0x2d0>)
 800520c:	4827      	ldr	r0, [pc, #156]	; (80052ac <_ZN9AppParser9Processor13processorTaskEPv+0x29c>)
 800520e:	f006 fa67 	bl	800b6e0 <HAL_UART_Transmit>
														sizeof(ack), 10);
						break;
 8005212:	e111      	b.n	8005438 <_ZN9AppParser9Processor13processorTaskEPv+0x428>
					}
					MOTION_PKT_t *pkt = getMotionCmdFromBytes(
 8005214:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005218:	4618      	mov	r0, r3
 800521a:	f000 fa69 	bl	80056f0 <_ZN9AppParser9Processor21getMotionCmdFromBytesEPh>
 800521e:	6478      	str	r0, [r7, #68]	; 0x44
							(uint8_t*) &msg.buffer);
					if (pkt == NULL) {
 8005220:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005222:	2b00      	cmp	r3, #0
 8005224:	d106      	bne.n	8005234 <_ZN9AppParser9Processor13processorTaskEPv+0x224>
						HAL_UART_Transmit(&huart3, (BUF_CMP_t*) nack,
 8005226:	230a      	movs	r3, #10
 8005228:	2204      	movs	r2, #4
 800522a:	4924      	ldr	r1, [pc, #144]	; (80052bc <_ZN9AppParser9Processor13processorTaskEPv+0x2ac>)
 800522c:	481f      	ldr	r0, [pc, #124]	; (80052ac <_ZN9AppParser9Processor13processorTaskEPv+0x29c>)
 800522e:	f006 fa57 	bl	800b6e0 <HAL_UART_Transmit>
								sizeof(nack), 10);
						break;
 8005232:	e101      	b.n	8005438 <_ZN9AppParser9Processor13processorTaskEPv+0x428>
					}

					osMessageQueuePut(tx_ctx->mailbox.queue, pkt, 0, 0);
 8005234:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005236:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8005238:	2300      	movs	r3, #0
 800523a:	2200      	movs	r2, #0
 800523c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800523e:	f007 fec1 	bl	800cfc4 <osMessageQueuePut>
					HAL_UART_Transmit(&huart3, (BUF_CMP_t*) ack, sizeof(ack),
 8005242:	230a      	movs	r3, #10
 8005244:	2204      	movs	r2, #4
 8005246:	4926      	ldr	r1, [pc, #152]	; (80052e0 <_ZN9AppParser9Processor13processorTaskEPv+0x2d0>)
 8005248:	4818      	ldr	r0, [pc, #96]	; (80052ac <_ZN9AppParser9Processor13processorTaskEPv+0x29c>)
 800524a:	f006 fa49 	bl	800b6e0 <HAL_UART_Transmit>
							10);
					break;
 800524e:	e0f3      	b.n	8005438 <_ZN9AppParser9Processor13processorTaskEPv+0x428>
				}
				case SENSOR_CHAR: {
					uint32_t val = strtol((const char*) &msg.buffer[4], NULL,
 8005250:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005254:	3304      	adds	r3, #4
 8005256:	220a      	movs	r2, #10
 8005258:	2100      	movs	r1, #0
 800525a:	4618      	mov	r0, r3
 800525c:	f00d f8ea 	bl	8012434 <strtol>
 8005260:	4603      	mov	r3, r0
							10);
 8005262:	64bb      	str	r3, [r7, #72]	; 0x48
					if (val == 0)
 8005264:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005266:	2b00      	cmp	r3, #0
 8005268:	f000 80e5 	beq.w	8005436 <_ZN9AppParser9Processor13processorTaskEPv+0x426>
						break;

					switch (msg.buffer[3]) {
 800526c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005270:	2b65      	cmp	r3, #101	; 0x65
 8005272:	d037      	beq.n	80052e4 <_ZN9AppParser9Processor13processorTaskEPv+0x2d4>
 8005274:	2b77      	cmp	r3, #119	; 0x77
 8005276:	d14d      	bne.n	8005314 <_ZN9AppParser9Processor13processorTaskEPv+0x304>

					case IR_L_CHAR: {
						sensor_data.ir_dist_th_L = (float) val;
 8005278:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800527a:	ee07 3a90 	vmov	s15, r3
 800527e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005282:	4b0c      	ldr	r3, [pc, #48]	; (80052b4 <_ZN9AppParser9Processor13processorTaskEPv+0x2a4>)
 8005284:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
						if (val == 999)
 8005288:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800528a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800528e:	4293      	cmp	r3, r2
 8005290:	d103      	bne.n	800529a <_ZN9AppParser9Processor13processorTaskEPv+0x28a>
							sensor_data.ir_dist_th_L = 0;
 8005292:	4b08      	ldr	r3, [pc, #32]	; (80052b4 <_ZN9AppParser9Processor13processorTaskEPv+0x2a4>)
 8005294:	f04f 0200 	mov.w	r2, #0
 8005298:	62da      	str	r2, [r3, #44]	; 0x2c
						HAL_UART_Transmit(&huart3, (BUF_CMP_t*) ack,
 800529a:	230a      	movs	r3, #10
 800529c:	2204      	movs	r2, #4
 800529e:	4910      	ldr	r1, [pc, #64]	; (80052e0 <_ZN9AppParser9Processor13processorTaskEPv+0x2d0>)
 80052a0:	4802      	ldr	r0, [pc, #8]	; (80052ac <_ZN9AppParser9Processor13processorTaskEPv+0x29c>)
 80052a2:	f006 fa1d 	bl	800b6e0 <HAL_UART_Transmit>
								sizeof(ack), 10);
						break;
 80052a6:	e035      	b.n	8005314 <_ZN9AppParser9Processor13processorTaskEPv+0x304>
 80052a8:	20000860 	.word	0x20000860
 80052ac:	20000ad8 	.word	0x20000ad8
 80052b0:	200006a0 	.word	0x200006a0
 80052b4:	20000668 	.word	0x20000668
 80052b8:	080150a8 	.word	0x080150a8
 80052bc:	08014598 	.word	0x08014598
 80052c0:	080150b6 	.word	0x080150b6
 80052c4:	080150aa 	.word	0x080150aa
 80052c8:	080150ab 	.word	0x080150ab
 80052cc:	080150ac 	.word	0x080150ac
 80052d0:	080150b2 	.word	0x080150b2
 80052d4:	080145a8 	.word	0x080145a8
 80052d8:	080150a9 	.word	0x080150a9
 80052dc:	080150af 	.word	0x080150af
 80052e0:	08014594 	.word	0x08014594
					}
					case IR_R_CHAR: {
						sensor_data.ir_dist_th_R = (float) val;
 80052e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052e6:	ee07 3a90 	vmov	s15, r3
 80052ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052ee:	4b60      	ldr	r3, [pc, #384]	; (8005470 <_ZN9AppParser9Processor13processorTaskEPv+0x460>)
 80052f0:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
						if (val == 999)
 80052f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052f6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d103      	bne.n	8005306 <_ZN9AppParser9Processor13processorTaskEPv+0x2f6>
							sensor_data.ir_dist_th_R = 0;
 80052fe:	4b5c      	ldr	r3, [pc, #368]	; (8005470 <_ZN9AppParser9Processor13processorTaskEPv+0x460>)
 8005300:	f04f 0200 	mov.w	r2, #0
 8005304:	631a      	str	r2, [r3, #48]	; 0x30
						HAL_UART_Transmit(&huart3, (BUF_CMP_t*) ack,
 8005306:	230a      	movs	r3, #10
 8005308:	2204      	movs	r2, #4
 800530a:	495a      	ldr	r1, [pc, #360]	; (8005474 <_ZN9AppParser9Processor13processorTaskEPv+0x464>)
 800530c:	485a      	ldr	r0, [pc, #360]	; (8005478 <_ZN9AppParser9Processor13processorTaskEPv+0x468>)
 800530e:	f006 f9e7 	bl	800b6e0 <HAL_UART_Transmit>
								sizeof(ack), 10);
						break;
 8005312:	bf00      	nop

					}

				}
				case AUX_CHAR: {
					if (isEq(T2_180R_CHAR, msg.buffer[3])) {
 8005314:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005318:	3303      	adds	r3, #3
 800531a:	4619      	mov	r1, r3
 800531c:	4857      	ldr	r0, [pc, #348]	; (800547c <_ZN9AppParser9Processor13processorTaskEPv+0x46c>)
 800531e:	f000 faa3 	bl	8005868 <_ZN9AppParser9Processor4isEqIhEEbRKT_S4_>
 8005322:	4603      	mov	r3, r0
 8005324:	2b00      	cmp	r3, #0
 8005326:	d023      	beq.n	8005370 <_ZN9AppParser9Processor13processorTaskEPv+0x360>
						MOTION_PKT_t *pkt = new MOTION_PKT_t();
 8005328:	200c      	movs	r0, #12
 800532a:	f00a fc47 	bl	800fbbc <_Znwj>
 800532e:	4603      	mov	r3, r0
 8005330:	4619      	mov	r1, r3
 8005332:	460a      	mov	r2, r1
 8005334:	2300      	movs	r3, #0
 8005336:	6013      	str	r3, [r2, #0]
 8005338:	6053      	str	r3, [r2, #4]
 800533a:	6093      	str	r3, [r2, #8]
 800533c:	63b9      	str	r1, [r7, #56]	; 0x38
						pkt->turn_opt = isEq(LEFT_CHAR, msg.buffer[4]);
 800533e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005342:	3304      	adds	r3, #4
 8005344:	4619      	mov	r1, r3
 8005346:	484e      	ldr	r0, [pc, #312]	; (8005480 <_ZN9AppParser9Processor13processorTaskEPv+0x470>)
 8005348:	f000 fa8e 	bl	8005868 <_ZN9AppParser9Processor4isEqIhEEbRKT_S4_>
 800534c:	4603      	mov	r3, r0
 800534e:	461a      	mov	r2, r3
 8005350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005352:	725a      	strb	r2, [r3, #9]
						osMessageQueuePut(tx_ctx->mailbox.queue, pkt, 0, 0);
 8005354:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005356:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8005358:	2300      	movs	r3, #0
 800535a:	2200      	movs	r2, #0
 800535c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800535e:	f007 fe31 	bl	800cfc4 <osMessageQueuePut>
						HAL_UART_Transmit(&huart3, (BUF_CMP_t*) ack,
 8005362:	230a      	movs	r3, #10
 8005364:	2204      	movs	r2, #4
 8005366:	4943      	ldr	r1, [pc, #268]	; (8005474 <_ZN9AppParser9Processor13processorTaskEPv+0x464>)
 8005368:	4843      	ldr	r0, [pc, #268]	; (8005478 <_ZN9AppParser9Processor13processorTaskEPv+0x468>)
 800536a:	f006 f9b9 	bl	800b6e0 <HAL_UART_Transmit>
 800536e:	e063      	b.n	8005438 <_ZN9AppParser9Processor13processorTaskEPv+0x428>
								sizeof(ack), 10);
					} else if (isEq(T2_90R_CHAR, msg.buffer[3])) {
 8005370:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005374:	3303      	adds	r3, #3
 8005376:	4619      	mov	r1, r3
 8005378:	4842      	ldr	r0, [pc, #264]	; (8005484 <_ZN9AppParser9Processor13processorTaskEPv+0x474>)
 800537a:	f000 fa75 	bl	8005868 <_ZN9AppParser9Processor4isEqIhEEbRKT_S4_>
 800537e:	4603      	mov	r3, r0
 8005380:	2b00      	cmp	r3, #0
 8005382:	d023      	beq.n	80053cc <_ZN9AppParser9Processor13processorTaskEPv+0x3bc>
						MOTION_PKT_t *pkt = new MOTION_PKT_t();
 8005384:	200c      	movs	r0, #12
 8005386:	f00a fc19 	bl	800fbbc <_Znwj>
 800538a:	4603      	mov	r3, r0
 800538c:	4619      	mov	r1, r3
 800538e:	460a      	mov	r2, r1
 8005390:	2300      	movs	r3, #0
 8005392:	6013      	str	r3, [r2, #0]
 8005394:	6053      	str	r3, [r2, #4]
 8005396:	6093      	str	r3, [r2, #8]
 8005398:	63f9      	str	r1, [r7, #60]	; 0x3c
						pkt->turn_opt = isEq(LEFT_CHAR, msg.buffer[4]);
 800539a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800539e:	3304      	adds	r3, #4
 80053a0:	4619      	mov	r1, r3
 80053a2:	4837      	ldr	r0, [pc, #220]	; (8005480 <_ZN9AppParser9Processor13processorTaskEPv+0x470>)
 80053a4:	f000 fa60 	bl	8005868 <_ZN9AppParser9Processor4isEqIhEEbRKT_S4_>
 80053a8:	4603      	mov	r3, r0
 80053aa:	461a      	mov	r2, r3
 80053ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053ae:	725a      	strb	r2, [r3, #9]
						osMessageQueuePut(tx_ctx->mailbox.queue, pkt, 0, 0);
 80053b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80053b2:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80053b4:	2300      	movs	r3, #0
 80053b6:	2200      	movs	r2, #0
 80053b8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80053ba:	f007 fe03 	bl	800cfc4 <osMessageQueuePut>
						HAL_UART_Transmit(&huart3, (BUF_CMP_t*) ack,
 80053be:	230a      	movs	r3, #10
 80053c0:	2204      	movs	r2, #4
 80053c2:	492c      	ldr	r1, [pc, #176]	; (8005474 <_ZN9AppParser9Processor13processorTaskEPv+0x464>)
 80053c4:	482c      	ldr	r0, [pc, #176]	; (8005478 <_ZN9AppParser9Processor13processorTaskEPv+0x468>)
 80053c6:	f006 f98b 	bl	800b6e0 <HAL_UART_Transmit>
 80053ca:	e035      	b.n	8005438 <_ZN9AppParser9Processor13processorTaskEPv+0x428>
								sizeof(ack), 10);
					}
					else if (isEq(T2_O1_CHAR, msg.buffer[3])) {
 80053cc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80053d0:	3303      	adds	r3, #3
 80053d2:	4619      	mov	r1, r3
 80053d4:	482c      	ldr	r0, [pc, #176]	; (8005488 <_ZN9AppParser9Processor13processorTaskEPv+0x478>)
 80053d6:	f000 fa47 	bl	8005868 <_ZN9AppParser9Processor4isEqIhEEbRKT_S4_>
 80053da:	4603      	mov	r3, r0
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d02b      	beq.n	8005438 <_ZN9AppParser9Processor13processorTaskEPv+0x428>
						MOTION_PKT_t *pkt = new MOTION_PKT_t();
 80053e0:	200c      	movs	r0, #12
 80053e2:	f00a fbeb 	bl	800fbbc <_Znwj>
 80053e6:	4603      	mov	r3, r0
 80053e8:	4619      	mov	r1, r3
 80053ea:	460a      	mov	r2, r1
 80053ec:	2300      	movs	r3, #0
 80053ee:	6013      	str	r3, [r2, #0]
 80053f0:	6053      	str	r3, [r2, #4]
 80053f2:	6093      	str	r3, [r2, #8]
 80053f4:	6439      	str	r1, [r7, #64]	; 0x40
						pkt->turn_opt = isEq(LEFT_CHAR, msg.buffer[4]);
 80053f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80053fa:	3304      	adds	r3, #4
 80053fc:	4619      	mov	r1, r3
 80053fe:	4820      	ldr	r0, [pc, #128]	; (8005480 <_ZN9AppParser9Processor13processorTaskEPv+0x470>)
 8005400:	f000 fa32 	bl	8005868 <_ZN9AppParser9Processor4isEqIhEEbRKT_S4_>
 8005404:	4603      	mov	r3, r0
 8005406:	461a      	mov	r2, r3
 8005408:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800540a:	725a      	strb	r2, [r3, #9]
						osMessageQueuePut(tx_ctx->mailbox.queue, pkt, 0, 0);
 800540c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800540e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8005410:	2300      	movs	r3, #0
 8005412:	2200      	movs	r2, #0
 8005414:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005416:	f007 fdd5 	bl	800cfc4 <osMessageQueuePut>
						HAL_UART_Transmit(&huart3, (BUF_CMP_t*) ack,
 800541a:	230a      	movs	r3, #10
 800541c:	2204      	movs	r2, #4
 800541e:	4915      	ldr	r1, [pc, #84]	; (8005474 <_ZN9AppParser9Processor13processorTaskEPv+0x464>)
 8005420:	4815      	ldr	r0, [pc, #84]	; (8005478 <_ZN9AppParser9Processor13processorTaskEPv+0x468>)
 8005422:	f006 f95d 	bl	800b6e0 <HAL_UART_Transmit>
 8005426:	e007      	b.n	8005438 <_ZN9AppParser9Processor13processorTaskEPv+0x428>
				default: {
					// something went wrong..
				}
				}
			} else {
				HAL_UART_Transmit(&huart3, (BUF_CMP_t*) nack, sizeof(nack), 10);
 8005428:	230a      	movs	r3, #10
 800542a:	2204      	movs	r2, #4
 800542c:	4917      	ldr	r1, [pc, #92]	; (800548c <_ZN9AppParser9Processor13processorTaskEPv+0x47c>)
 800542e:	4812      	ldr	r0, [pc, #72]	; (8005478 <_ZN9AppParser9Processor13processorTaskEPv+0x468>)
 8005430:	f006 f956 	bl	800b6e0 <HAL_UART_Transmit>
 8005434:	e000      	b.n	8005438 <_ZN9AppParser9Processor13processorTaskEPv+0x428>
						break;
 8005436:	bf00      	nop
			}

			HAL_UART_Receive_DMA(&huart3, (BUF_CMP_t*) uartRxBuf, 10); // re-enable DMA buf for rx
 8005438:	220a      	movs	r2, #10
 800543a:	4915      	ldr	r1, [pc, #84]	; (8005490 <_ZN9AppParser9Processor13processorTaskEPv+0x480>)
 800543c:	480e      	ldr	r0, [pc, #56]	; (8005478 <_ZN9AppParser9Processor13processorTaskEPv+0x468>)
 800543e:	f006 f9e1 	bl	800b804 <HAL_UART_Receive_DMA>
 8005442:	e5f6      	b.n	8005032 <_ZN9AppParser9Processor13processorTaskEPv+0x22>
		} else if (_signal_obstr) // specifically lower priority than RX
 8005444:	4b13      	ldr	r3, [pc, #76]	; (8005494 <_ZN9AppParser9Processor13processorTaskEPv+0x484>)
 8005446:	781b      	ldrb	r3, [r3, #0]
 8005448:	2b00      	cmp	r3, #0
 800544a:	f43f adf2 	beq.w	8005032 <_ZN9AppParser9Processor13processorTaskEPv+0x22>
		{
			if (!_obstr_txed)
 800544e:	4b12      	ldr	r3, [pc, #72]	; (8005498 <_ZN9AppParser9Processor13processorTaskEPv+0x488>)
 8005450:	781b      	ldrb	r3, [r3, #0]
 8005452:	f083 0301 	eor.w	r3, r3, #1
 8005456:	b2db      	uxtb	r3, r3
 8005458:	2b00      	cmp	r3, #0
 800545a:	d005      	beq.n	8005468 <_ZN9AppParser9Processor13processorTaskEPv+0x458>
				HAL_UART_Transmit(&huart3, (BUF_CMP_t*) obstr, sizeof(obstr),
 800545c:	230a      	movs	r3, #10
 800545e:	2204      	movs	r2, #4
 8005460:	490e      	ldr	r1, [pc, #56]	; (800549c <_ZN9AppParser9Processor13processorTaskEPv+0x48c>)
 8005462:	4805      	ldr	r0, [pc, #20]	; (8005478 <_ZN9AppParser9Processor13processorTaskEPv+0x468>)
 8005464:	f006 f93c 	bl	800b6e0 <HAL_UART_Transmit>
						10);
			_obstr_txed = true;
 8005468:	4b0b      	ldr	r3, [pc, #44]	; (8005498 <_ZN9AppParser9Processor13processorTaskEPv+0x488>)
 800546a:	2201      	movs	r2, #1
 800546c:	701a      	strb	r2, [r3, #0]
		}

	}
 800546e:	e5e0      	b.n	8005032 <_ZN9AppParser9Processor13processorTaskEPv+0x22>
 8005470:	20000668 	.word	0x20000668
 8005474:	08014594 	.word	0x08014594
 8005478:	20000ad8 	.word	0x20000ad8
 800547c:	080150b3 	.word	0x080150b3
 8005480:	080150ae 	.word	0x080150ae
 8005484:	080150b4 	.word	0x080150b4
 8005488:	080150b5 	.word	0x080150b5
 800548c:	08014598 	.word	0x08014598
 8005490:	20000860 	.word	0x20000860
 8005494:	2000085c 	.word	0x2000085c
 8005498:	2000085d 	.word	0x2000085d
 800549c:	080145a0 	.word	0x080145a0

080054a0 <_ZN9AppParser9Processor22returnSensorRequestCmdEh>:

}

void Processor::returnSensorRequestCmd(BUF_CMP_t id) {
 80054a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80054a4:	b092      	sub	sp, #72	; 0x48
 80054a6:	af08      	add	r7, sp, #32
 80054a8:	4603      	mov	r3, r0
 80054aa:	71fb      	strb	r3, [r7, #7]
	uint8_t tx_buf[25] = { 0 };
 80054ac:	2300      	movs	r3, #0
 80054ae:	60fb      	str	r3, [r7, #12]
 80054b0:	f107 0310 	add.w	r3, r7, #16
 80054b4:	2200      	movs	r2, #0
 80054b6:	601a      	str	r2, [r3, #0]
 80054b8:	605a      	str	r2, [r3, #4]
 80054ba:	609a      	str	r2, [r3, #8]
 80054bc:	60da      	str	r2, [r3, #12]
 80054be:	611a      	str	r2, [r3, #16]
 80054c0:	751a      	strb	r2, [r3, #20]

	switch (id) {
 80054c2:	79fb      	ldrb	r3, [r7, #7]
 80054c4:	3b65      	subs	r3, #101	; 0x65
 80054c6:	2b14      	cmp	r3, #20
 80054c8:	f200 80fc 	bhi.w	80056c4 <_ZN9AppParser9Processor22returnSensorRequestCmdEh+0x224>
 80054cc:	a201      	add	r2, pc, #4	; (adr r2, 80054d4 <_ZN9AppParser9Processor22returnSensorRequestCmdEh+0x34>)
 80054ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054d2:	bf00      	nop
 80054d4:	08005563 	.word	0x08005563
 80054d8:	080056c5 	.word	0x080056c5
 80054dc:	080055d7 	.word	0x080055d7
 80054e0:	080056c5 	.word	0x080056c5
 80054e4:	080056c5 	.word	0x080056c5
 80054e8:	080056c5 	.word	0x080056c5
 80054ec:	0800564d 	.word	0x0800564d
 80054f0:	080056c5 	.word	0x080056c5
 80054f4:	080056c5 	.word	0x080056c5
 80054f8:	080056c5 	.word	0x080056c5
 80054fc:	080056c5 	.word	0x080056c5
 8005500:	080056c5 	.word	0x080056c5
 8005504:	080056c5 	.word	0x080056c5
 8005508:	080056c5 	.word	0x080056c5
 800550c:	080056c5 	.word	0x080056c5
 8005510:	080056c5 	.word	0x080056c5
 8005514:	0800559d 	.word	0x0800559d
 8005518:	080056c5 	.word	0x080056c5
 800551c:	08005529 	.word	0x08005529
 8005520:	080056c5 	.word	0x080056c5
 8005524:	08005613 	.word	0x08005613
	case IR_L_CHAR: {
		snprintf((char*) &tx_buf, sizeof(tx_buf), "%4.2f",
				sensor_data.ir_distL);
 8005528:	4b6c      	ldr	r3, [pc, #432]	; (80056dc <_ZN9AppParser9Processor22returnSensorRequestCmdEh+0x23c>)
 800552a:	685b      	ldr	r3, [r3, #4]
		snprintf((char*) &tx_buf, sizeof(tx_buf), "%4.2f",
 800552c:	4618      	mov	r0, r3
 800552e:	f7fb f80b 	bl	8000548 <__aeabi_f2d>
 8005532:	4602      	mov	r2, r0
 8005534:	460b      	mov	r3, r1
 8005536:	f107 000c 	add.w	r0, r7, #12
 800553a:	e9cd 2300 	strd	r2, r3, [sp]
 800553e:	4a68      	ldr	r2, [pc, #416]	; (80056e0 <_ZN9AppParser9Processor22returnSensorRequestCmdEh+0x240>)
 8005540:	2119      	movs	r1, #25
 8005542:	f00c fe5d 	bl	8012200 <sniprintf>
		HAL_UART_Transmit(&huart3, (BUF_CMP_t*) tx_buf, strlen((char*) tx_buf),
 8005546:	f107 030c 	add.w	r3, r7, #12
 800554a:	4618      	mov	r0, r3
 800554c:	f7fa fe40 	bl	80001d0 <strlen>
 8005550:	4603      	mov	r3, r0
 8005552:	b29a      	uxth	r2, r3
 8005554:	f107 010c 	add.w	r1, r7, #12
 8005558:	230a      	movs	r3, #10
 800555a:	4862      	ldr	r0, [pc, #392]	; (80056e4 <_ZN9AppParser9Processor22returnSensorRequestCmdEh+0x244>)
 800555c:	f006 f8c0 	bl	800b6e0 <HAL_UART_Transmit>
				10);
		break;
 8005560:	e0b7      	b.n	80056d2 <_ZN9AppParser9Processor22returnSensorRequestCmdEh+0x232>
	}
	case IR_R_CHAR: {
		snprintf((char*) &tx_buf, sizeof(tx_buf), "%4.2f",
				sensor_data.ir_distR);
 8005562:	4b5e      	ldr	r3, [pc, #376]	; (80056dc <_ZN9AppParser9Processor22returnSensorRequestCmdEh+0x23c>)
 8005564:	689b      	ldr	r3, [r3, #8]
		snprintf((char*) &tx_buf, sizeof(tx_buf), "%4.2f",
 8005566:	4618      	mov	r0, r3
 8005568:	f7fa ffee 	bl	8000548 <__aeabi_f2d>
 800556c:	4602      	mov	r2, r0
 800556e:	460b      	mov	r3, r1
 8005570:	f107 000c 	add.w	r0, r7, #12
 8005574:	e9cd 2300 	strd	r2, r3, [sp]
 8005578:	4a59      	ldr	r2, [pc, #356]	; (80056e0 <_ZN9AppParser9Processor22returnSensorRequestCmdEh+0x240>)
 800557a:	2119      	movs	r1, #25
 800557c:	f00c fe40 	bl	8012200 <sniprintf>
		HAL_UART_Transmit(&huart3, (BUF_CMP_t*) tx_buf, strlen((char*) tx_buf),
 8005580:	f107 030c 	add.w	r3, r7, #12
 8005584:	4618      	mov	r0, r3
 8005586:	f7fa fe23 	bl	80001d0 <strlen>
 800558a:	4603      	mov	r3, r0
 800558c:	b29a      	uxth	r2, r3
 800558e:	f107 010c 	add.w	r1, r7, #12
 8005592:	230a      	movs	r3, #10
 8005594:	4853      	ldr	r0, [pc, #332]	; (80056e4 <_ZN9AppParser9Processor22returnSensorRequestCmdEh+0x244>)
 8005596:	f006 f8a3 	bl	800b6e0 <HAL_UART_Transmit>
				10);
		break;
 800559a:	e09a      	b.n	80056d2 <_ZN9AppParser9Processor22returnSensorRequestCmdEh+0x232>
	}
	case USOUND_CHAR: {
		snprintf((char*) &tx_buf, sizeof(tx_buf), "%4.2f",
				sensor_data.usonic_dist);
 800559c:	4b4f      	ldr	r3, [pc, #316]	; (80056dc <_ZN9AppParser9Processor22returnSensorRequestCmdEh+0x23c>)
 800559e:	68db      	ldr	r3, [r3, #12]
		snprintf((char*) &tx_buf, sizeof(tx_buf), "%4.2f",
 80055a0:	4618      	mov	r0, r3
 80055a2:	f7fa ffd1 	bl	8000548 <__aeabi_f2d>
 80055a6:	4602      	mov	r2, r0
 80055a8:	460b      	mov	r3, r1
 80055aa:	f107 000c 	add.w	r0, r7, #12
 80055ae:	e9cd 2300 	strd	r2, r3, [sp]
 80055b2:	4a4b      	ldr	r2, [pc, #300]	; (80056e0 <_ZN9AppParser9Processor22returnSensorRequestCmdEh+0x240>)
 80055b4:	2119      	movs	r1, #25
 80055b6:	f00c fe23 	bl	8012200 <sniprintf>
		HAL_UART_Transmit(&huart3, (BUF_CMP_t*) tx_buf, strlen((char*) tx_buf),
 80055ba:	f107 030c 	add.w	r3, r7, #12
 80055be:	4618      	mov	r0, r3
 80055c0:	f7fa fe06 	bl	80001d0 <strlen>
 80055c4:	4603      	mov	r3, r0
 80055c6:	b29a      	uxth	r2, r3
 80055c8:	f107 010c 	add.w	r1, r7, #12
 80055cc:	230a      	movs	r3, #10
 80055ce:	4845      	ldr	r0, [pc, #276]	; (80056e4 <_ZN9AppParser9Processor22returnSensorRequestCmdEh+0x244>)
 80055d0:	f006 f886 	bl	800b6e0 <HAL_UART_Transmit>
				10);
		break;
 80055d4:	e07d      	b.n	80056d2 <_ZN9AppParser9Processor22returnSensorRequestCmdEh+0x232>
	}
	case GY_Z_CHAR: {
		snprintf((char*) &tx_buf, sizeof(tx_buf), "%4.2f",
				sensor_data.imu->gyro[2]);
 80055d6:	4b41      	ldr	r3, [pc, #260]	; (80056dc <_ZN9AppParser9Processor22returnSensorRequestCmdEh+0x23c>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	699b      	ldr	r3, [r3, #24]
		snprintf((char*) &tx_buf, sizeof(tx_buf), "%4.2f",
 80055dc:	4618      	mov	r0, r3
 80055de:	f7fa ffb3 	bl	8000548 <__aeabi_f2d>
 80055e2:	4602      	mov	r2, r0
 80055e4:	460b      	mov	r3, r1
 80055e6:	f107 000c 	add.w	r0, r7, #12
 80055ea:	e9cd 2300 	strd	r2, r3, [sp]
 80055ee:	4a3c      	ldr	r2, [pc, #240]	; (80056e0 <_ZN9AppParser9Processor22returnSensorRequestCmdEh+0x240>)
 80055f0:	2119      	movs	r1, #25
 80055f2:	f00c fe05 	bl	8012200 <sniprintf>
		HAL_UART_Transmit(&huart3, (BUF_CMP_t*) tx_buf, strlen((char*) tx_buf),
 80055f6:	f107 030c 	add.w	r3, r7, #12
 80055fa:	4618      	mov	r0, r3
 80055fc:	f7fa fde8 	bl	80001d0 <strlen>
 8005600:	4603      	mov	r3, r0
 8005602:	b29a      	uxth	r2, r3
 8005604:	f107 010c 	add.w	r1, r7, #12
 8005608:	230a      	movs	r3, #10
 800560a:	4836      	ldr	r0, [pc, #216]	; (80056e4 <_ZN9AppParser9Processor22returnSensorRequestCmdEh+0x244>)
 800560c:	f006 f868 	bl	800b6e0 <HAL_UART_Transmit>
				10);
		break;
 8005610:	e05f      	b.n	80056d2 <_ZN9AppParser9Processor22returnSensorRequestCmdEh+0x232>
	}
	case QTRN_YAW_CHAR: {
		snprintf((char*) &tx_buf, sizeof(tx_buf), "%4.2f", sensor_data.yaw_abs);
 8005612:	4b32      	ldr	r3, [pc, #200]	; (80056dc <_ZN9AppParser9Processor22returnSensorRequestCmdEh+0x23c>)
 8005614:	691b      	ldr	r3, [r3, #16]
 8005616:	4618      	mov	r0, r3
 8005618:	f7fa ff96 	bl	8000548 <__aeabi_f2d>
 800561c:	4602      	mov	r2, r0
 800561e:	460b      	mov	r3, r1
 8005620:	f107 000c 	add.w	r0, r7, #12
 8005624:	e9cd 2300 	strd	r2, r3, [sp]
 8005628:	4a2d      	ldr	r2, [pc, #180]	; (80056e0 <_ZN9AppParser9Processor22returnSensorRequestCmdEh+0x240>)
 800562a:	2119      	movs	r1, #25
 800562c:	f00c fde8 	bl	8012200 <sniprintf>
		HAL_UART_Transmit(&huart3, (BUF_CMP_t*) tx_buf, strlen((char*) tx_buf),
 8005630:	f107 030c 	add.w	r3, r7, #12
 8005634:	4618      	mov	r0, r3
 8005636:	f7fa fdcb 	bl	80001d0 <strlen>
 800563a:	4603      	mov	r3, r0
 800563c:	b29a      	uxth	r2, r3
 800563e:	f107 010c 	add.w	r1, r7, #12
 8005642:	230a      	movs	r3, #10
 8005644:	4827      	ldr	r0, [pc, #156]	; (80056e4 <_ZN9AppParser9Processor22returnSensorRequestCmdEh+0x244>)
 8005646:	f006 f84b 	bl	800b6e0 <HAL_UART_Transmit>
				10);
		break;
 800564a:	e042      	b.n	80056d2 <_ZN9AppParser9Processor22returnSensorRequestCmdEh+0x232>
	}
	case QTRN_ALL_CHAR: {
		snprintf((char*) &tx_buf, sizeof(tx_buf), "%4.1f;%4.1f;%4.1f;%4.1f",
				sensor_data.imu->q[0], sensor_data.imu->q[1],
 800564c:	4b23      	ldr	r3, [pc, #140]	; (80056dc <_ZN9AppParser9Processor22returnSensorRequestCmdEh+0x23c>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	6d9b      	ldr	r3, [r3, #88]	; 0x58
		snprintf((char*) &tx_buf, sizeof(tx_buf), "%4.1f;%4.1f;%4.1f;%4.1f",
 8005652:	4618      	mov	r0, r3
 8005654:	f7fa ff78 	bl	8000548 <__aeabi_f2d>
 8005658:	4604      	mov	r4, r0
 800565a:	460d      	mov	r5, r1
				sensor_data.imu->q[0], sensor_data.imu->q[1],
 800565c:	4b1f      	ldr	r3, [pc, #124]	; (80056dc <_ZN9AppParser9Processor22returnSensorRequestCmdEh+0x23c>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
		snprintf((char*) &tx_buf, sizeof(tx_buf), "%4.1f;%4.1f;%4.1f;%4.1f",
 8005662:	4618      	mov	r0, r3
 8005664:	f7fa ff70 	bl	8000548 <__aeabi_f2d>
 8005668:	4680      	mov	r8, r0
 800566a:	4689      	mov	r9, r1
				sensor_data.imu->q[2], sensor_data.imu->q[3]);
 800566c:	4b1b      	ldr	r3, [pc, #108]	; (80056dc <_ZN9AppParser9Processor22returnSensorRequestCmdEh+0x23c>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	6e1b      	ldr	r3, [r3, #96]	; 0x60
		snprintf((char*) &tx_buf, sizeof(tx_buf), "%4.1f;%4.1f;%4.1f;%4.1f",
 8005672:	4618      	mov	r0, r3
 8005674:	f7fa ff68 	bl	8000548 <__aeabi_f2d>
 8005678:	4682      	mov	sl, r0
 800567a:	468b      	mov	fp, r1
				sensor_data.imu->q[2], sensor_data.imu->q[3]);
 800567c:	4b17      	ldr	r3, [pc, #92]	; (80056dc <_ZN9AppParser9Processor22returnSensorRequestCmdEh+0x23c>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	6e5b      	ldr	r3, [r3, #100]	; 0x64
		snprintf((char*) &tx_buf, sizeof(tx_buf), "%4.1f;%4.1f;%4.1f;%4.1f",
 8005682:	4618      	mov	r0, r3
 8005684:	f7fa ff60 	bl	8000548 <__aeabi_f2d>
 8005688:	4602      	mov	r2, r0
 800568a:	460b      	mov	r3, r1
 800568c:	f107 000c 	add.w	r0, r7, #12
 8005690:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005694:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8005698:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800569c:	e9cd 4500 	strd	r4, r5, [sp]
 80056a0:	4a11      	ldr	r2, [pc, #68]	; (80056e8 <_ZN9AppParser9Processor22returnSensorRequestCmdEh+0x248>)
 80056a2:	2119      	movs	r1, #25
 80056a4:	f00c fdac 	bl	8012200 <sniprintf>
		HAL_UART_Transmit(&huart3, (BUF_CMP_t*) tx_buf, strlen((char*) tx_buf),
 80056a8:	f107 030c 	add.w	r3, r7, #12
 80056ac:	4618      	mov	r0, r3
 80056ae:	f7fa fd8f 	bl	80001d0 <strlen>
 80056b2:	4603      	mov	r3, r0
 80056b4:	b29a      	uxth	r2, r3
 80056b6:	f107 010c 	add.w	r1, r7, #12
 80056ba:	230a      	movs	r3, #10
 80056bc:	4809      	ldr	r0, [pc, #36]	; (80056e4 <_ZN9AppParser9Processor22returnSensorRequestCmdEh+0x244>)
 80056be:	f006 f80f 	bl	800b6e0 <HAL_UART_Transmit>
				10);
		break;
 80056c2:	e006      	b.n	80056d2 <_ZN9AppParser9Processor22returnSensorRequestCmdEh+0x232>
	}
	default: {
		HAL_UART_Transmit(&huart3, (BUF_CMP_t*) nack, sizeof(nack), 10);
 80056c4:	230a      	movs	r3, #10
 80056c6:	2204      	movs	r2, #4
 80056c8:	4908      	ldr	r1, [pc, #32]	; (80056ec <_ZN9AppParser9Processor22returnSensorRequestCmdEh+0x24c>)
 80056ca:	4806      	ldr	r0, [pc, #24]	; (80056e4 <_ZN9AppParser9Processor22returnSensorRequestCmdEh+0x244>)
 80056cc:	f006 f808 	bl	800b6e0 <HAL_UART_Transmit>
	}
	}
}
 80056d0:	bf00      	nop
 80056d2:	bf00      	nop
 80056d4:	3728      	adds	r7, #40	; 0x28
 80056d6:	46bd      	mov	sp, r7
 80056d8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80056dc:	20000668 	.word	0x20000668
 80056e0:	080145ac 	.word	0x080145ac
 80056e4:	20000ad8 	.word	0x20000ad8
 80056e8:	080145b4 	.word	0x080145b4
 80056ec:	08014598 	.word	0x08014598

080056f0 <_ZN9AppParser9Processor21getMotionCmdFromBytesEPh>:

MOTION_PKT_t* Processor::getMotionCmdFromBytes(BUF_CMP_t *bytes) {
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b084      	sub	sp, #16
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]

	uint32_t val = strtol((const char*) &bytes[4], NULL, 10);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	3304      	adds	r3, #4
 80056fc:	220a      	movs	r2, #10
 80056fe:	2100      	movs	r1, #0
 8005700:	4618      	mov	r0, r3
 8005702:	f00c fe97 	bl	8012434 <strtol>
 8005706:	4603      	mov	r3, r0
 8005708:	60fb      	str	r3, [r7, #12]
	if (val == 0)
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d101      	bne.n	8005714 <_ZN9AppParser9Processor21getMotionCmdFromBytesEPh+0x24>
		return NULL; // invalid input or no action
 8005710:	2300      	movs	r3, #0
 8005712:	e09e      	b.n	8005852 <_ZN9AppParser9Processor21getMotionCmdFromBytesEPh+0x162>
	MOTION_PKT_t *pkt = new MOTION_PKT_t();
 8005714:	200c      	movs	r0, #12
 8005716:	f00a fa51 	bl	800fbbc <_Znwj>
 800571a:	4603      	mov	r3, r0
 800571c:	4619      	mov	r1, r3
 800571e:	460a      	mov	r2, r1
 8005720:	2300      	movs	r3, #0
 8005722:	6013      	str	r3, [r2, #0]
 8005724:	6053      	str	r3, [r2, #4]
 8005726:	6093      	str	r3, [r2, #8]
 8005728:	60b9      	str	r1, [r7, #8]
	pkt->arg = val;
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	68fa      	ldr	r2, [r7, #12]
 800572e:	605a      	str	r2, [r3, #4]

	switch (bytes[3]) {
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	3303      	adds	r3, #3
 8005734:	781b      	ldrb	r3, [r3, #0]
 8005736:	3b62      	subs	r3, #98	; 0x62
 8005738:	2b10      	cmp	r3, #16
 800573a:	f200 8087 	bhi.w	800584c <_ZN9AppParser9Processor21getMotionCmdFromBytesEPh+0x15c>
 800573e:	a201      	add	r2, pc, #4	; (adr r2, 8005744 <_ZN9AppParser9Processor21getMotionCmdFromBytesEPh+0x54>)
 8005740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005744:	080057b9 	.word	0x080057b9
 8005748:	0800584d 	.word	0x0800584d
 800574c:	0800584d 	.word	0x0800584d
 8005750:	0800584d 	.word	0x0800584d
 8005754:	08005789 	.word	0x08005789
 8005758:	0800584d 	.word	0x0800584d
 800575c:	0800584d 	.word	0x0800584d
 8005760:	0800584d 	.word	0x0800584d
 8005764:	0800584d 	.word	0x0800584d
 8005768:	0800584d 	.word	0x0800584d
 800576c:	080057e9 	.word	0x080057e9
 8005770:	0800584d 	.word	0x0800584d
 8005774:	0800584d 	.word	0x0800584d
 8005778:	0800584d 	.word	0x0800584d
 800577c:	0800584d 	.word	0x0800584d
 8005780:	0800584d 	.word	0x0800584d
 8005784:	0800581b 	.word	0x0800581b
	case FWD_CHAR: {
		pkt->cmd = MOVE_FWD;
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	2200      	movs	r2, #0
 800578c:	601a      	str	r2, [r3, #0]
		pkt->is_crawl =(bool) (isEq<BUF_CMP_t>(CRAWL_CHAR, bytes[7]));
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	3307      	adds	r3, #7
 8005792:	4619      	mov	r1, r3
 8005794:	4831      	ldr	r0, [pc, #196]	; (800585c <_ZN9AppParser9Processor21getMotionCmdFromBytesEPh+0x16c>)
 8005796:	f000 f867 	bl	8005868 <_ZN9AppParser9Processor4isEqIhEEbRKT_S4_>
 800579a:	4603      	mov	r3, r0
 800579c:	461a      	mov	r2, r3
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	729a      	strb	r2, [r3, #10]
		pkt->linear =(bool) (isEq<BUF_CMP_t>(LINEAR_CHAR, bytes[8]));
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	3308      	adds	r3, #8
 80057a6:	4619      	mov	r1, r3
 80057a8:	482d      	ldr	r0, [pc, #180]	; (8005860 <_ZN9AppParser9Processor21getMotionCmdFromBytesEPh+0x170>)
 80057aa:	f000 f85d 	bl	8005868 <_ZN9AppParser9Processor4isEqIhEEbRKT_S4_>
 80057ae:	4603      	mov	r3, r0
 80057b0:	461a      	mov	r2, r3
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	72da      	strb	r2, [r3, #11]
		break;
 80057b6:	e04b      	b.n	8005850 <_ZN9AppParser9Processor21getMotionCmdFromBytesEPh+0x160>
	}
	case BWD_CHAR: {
		pkt->cmd = MOVE_BWD;
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	2201      	movs	r2, #1
 80057bc:	601a      	str	r2, [r3, #0]
		pkt->is_crawl =(bool) (isEq<BUF_CMP_t>(CRAWL_CHAR, bytes[7]));
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	3307      	adds	r3, #7
 80057c2:	4619      	mov	r1, r3
 80057c4:	4825      	ldr	r0, [pc, #148]	; (800585c <_ZN9AppParser9Processor21getMotionCmdFromBytesEPh+0x16c>)
 80057c6:	f000 f84f 	bl	8005868 <_ZN9AppParser9Processor4isEqIhEEbRKT_S4_>
 80057ca:	4603      	mov	r3, r0
 80057cc:	461a      	mov	r2, r3
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	729a      	strb	r2, [r3, #10]
		pkt->linear =(bool) (isEq<BUF_CMP_t>(LINEAR_CHAR, bytes[8]));
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	3308      	adds	r3, #8
 80057d6:	4619      	mov	r1, r3
 80057d8:	4821      	ldr	r0, [pc, #132]	; (8005860 <_ZN9AppParser9Processor21getMotionCmdFromBytesEPh+0x170>)
 80057da:	f000 f845 	bl	8005868 <_ZN9AppParser9Processor4isEqIhEEbRKT_S4_>
 80057de:	4603      	mov	r3, r0
 80057e0:	461a      	mov	r2, r3
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	72da      	strb	r2, [r3, #11]
		break;
 80057e6:	e033      	b.n	8005850 <_ZN9AppParser9Processor21getMotionCmdFromBytesEPh+0x160>
	}
	case LEFT_CHAR: {
		pkt->cmd =
				(bool) (isEq<BUF_CMP_t>(BWD_CHAR, bytes[7])) ?
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	3307      	adds	r3, #7
 80057ec:	4619      	mov	r1, r3
 80057ee:	481d      	ldr	r0, [pc, #116]	; (8005864 <_ZN9AppParser9Processor21getMotionCmdFromBytesEPh+0x174>)
 80057f0:	f000 f83a 	bl	8005868 <_ZN9AppParser9Processor4isEqIhEEbRKT_S4_>
 80057f4:	4603      	mov	r3, r0
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d001      	beq.n	80057fe <_ZN9AppParser9Processor21getMotionCmdFromBytesEPh+0x10e>
 80057fa:	2205      	movs	r2, #5
 80057fc:	e000      	b.n	8005800 <_ZN9AppParser9Processor21getMotionCmdFromBytesEPh+0x110>
 80057fe:	2203      	movs	r2, #3
		pkt->cmd =
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	601a      	str	r2, [r3, #0]
						MOVE_LEFT_BWD : MOVE_LEFT_FWD;
		pkt->linear =(bool) (isEq<BUF_CMP_t>(LINEAR_CHAR, bytes[8]));
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	3308      	adds	r3, #8
 8005808:	4619      	mov	r1, r3
 800580a:	4815      	ldr	r0, [pc, #84]	; (8005860 <_ZN9AppParser9Processor21getMotionCmdFromBytesEPh+0x170>)
 800580c:	f000 f82c 	bl	8005868 <_ZN9AppParser9Processor4isEqIhEEbRKT_S4_>
 8005810:	4603      	mov	r3, r0
 8005812:	461a      	mov	r2, r3
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	72da      	strb	r2, [r3, #11]
		break;
 8005818:	e01a      	b.n	8005850 <_ZN9AppParser9Processor21getMotionCmdFromBytesEPh+0x160>
	}
	case RIGHT_CHAR: {
		pkt->cmd =
				(bool) (isEq<BUF_CMP_t>(BWD_CHAR, bytes[7])) ?
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	3307      	adds	r3, #7
 800581e:	4619      	mov	r1, r3
 8005820:	4810      	ldr	r0, [pc, #64]	; (8005864 <_ZN9AppParser9Processor21getMotionCmdFromBytesEPh+0x174>)
 8005822:	f000 f821 	bl	8005868 <_ZN9AppParser9Processor4isEqIhEEbRKT_S4_>
 8005826:	4603      	mov	r3, r0
 8005828:	2b00      	cmp	r3, #0
 800582a:	d001      	beq.n	8005830 <_ZN9AppParser9Processor21getMotionCmdFromBytesEPh+0x140>
 800582c:	2204      	movs	r2, #4
 800582e:	e000      	b.n	8005832 <_ZN9AppParser9Processor21getMotionCmdFromBytesEPh+0x142>
 8005830:	2202      	movs	r2, #2
		pkt->cmd =
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	601a      	str	r2, [r3, #0]
						MOVE_RIGHT_BWD : MOVE_RIGHT_FWD;
		pkt->linear =(bool) (isEq<BUF_CMP_t>(LINEAR_CHAR, bytes[8]));
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	3308      	adds	r3, #8
 800583a:	4619      	mov	r1, r3
 800583c:	4808      	ldr	r0, [pc, #32]	; (8005860 <_ZN9AppParser9Processor21getMotionCmdFromBytesEPh+0x170>)
 800583e:	f000 f813 	bl	8005868 <_ZN9AppParser9Processor4isEqIhEEbRKT_S4_>
 8005842:	4603      	mov	r3, r0
 8005844:	461a      	mov	r2, r3
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	72da      	strb	r2, [r3, #11]
		break;
 800584a:	e001      	b.n	8005850 <_ZN9AppParser9Processor21getMotionCmdFromBytesEPh+0x160>

	}

	default:
		// something went wrong..
		return NULL;
 800584c:	2300      	movs	r3, #0
 800584e:	e000      	b.n	8005852 <_ZN9AppParser9Processor21getMotionCmdFromBytesEPh+0x162>
	}

	return pkt;
 8005850:	68bb      	ldr	r3, [r7, #8]

}
 8005852:	4618      	mov	r0, r3
 8005854:	3710      	adds	r7, #16
 8005856:	46bd      	mov	sp, r7
 8005858:	bd80      	pop	{r7, pc}
 800585a:	bf00      	nop
 800585c:	080150b0 	.word	0x080150b0
 8005860:	080150b1 	.word	0x080150b1
 8005864:	080150ad 	.word	0x080150ad

08005868 <_ZN9AppParser9Processor4isEqIhEEbRKT_S4_>:
	static bool isEq(const T &a, const T &b)
 8005868:	b480      	push	{r7}
 800586a:	b083      	sub	sp, #12
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
 8005870:	6039      	str	r1, [r7, #0]
		return a == b;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	781a      	ldrb	r2, [r3, #0]
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	781b      	ldrb	r3, [r3, #0]
 800587a:	429a      	cmp	r2, r3
 800587c:	bf0c      	ite	eq
 800587e:	2301      	moveq	r3, #1
 8005880:	2300      	movne	r3, #0
 8005882:	b2db      	uxtb	r3, r3
	}
 8005884:	4618      	mov	r0, r3
 8005886:	370c      	adds	r7, #12
 8005888:	46bd      	mov	sp, r7
 800588a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588e:	4770      	bx	lr

08005890 <__io_putchar>:
 * @brief  Retargets the C library printf function to the USART.
 * @param  None
 * @retval None
 */
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
PUTCHAR_PROTOTYPE {
 8005890:	b580      	push	{r7, lr}
 8005892:	b082      	sub	sp, #8
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the USART1 and Loop until the end of transmission */
	HAL_UART_Transmit(&huart3, (uint8_t*) &ch, 1, 0xFFFF);
 8005898:	1d39      	adds	r1, r7, #4
 800589a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800589e:	2201      	movs	r2, #1
 80058a0:	4803      	ldr	r0, [pc, #12]	; (80058b0 <__io_putchar+0x20>)
 80058a2:	f005 ff1d 	bl	800b6e0 <HAL_UART_Transmit>

	return ch;
 80058a6:	687b      	ldr	r3, [r7, #4]
}
 80058a8:	4618      	mov	r0, r3
 80058aa:	3708      	adds	r7, #8
 80058ac:	46bd      	mov	sp, r7
 80058ae:	bd80      	pop	{r7, pc}
 80058b0:	20000ad8 	.word	0x20000ad8

080058b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80058b8:	f001 fbe4 	bl	8007084 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80058bc:	f000 f844 	bl	8005948 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80058c0:	f000 fbb6 	bl	8006030 <MX_GPIO_Init>
  MX_DMA_Init();
 80058c4:	f000 fb8c 	bl	8005fe0 <MX_DMA_Init>
  MX_TIM8_Init();
 80058c8:	f000 fab6 	bl	8005e38 <MX_TIM8_Init>
  MX_TIM1_Init();
 80058cc:	f000 f96c 	bl	8005ba8 <MX_TIM1_Init>
  MX_TIM2_Init();
 80058d0:	f000 fa0a 	bl	8005ce8 <MX_TIM2_Init>
  MX_TIM3_Init();
 80058d4:	f000 fa5c 	bl	8005d90 <MX_TIM3_Init>
  MX_USART3_UART_Init();
 80058d8:	f000 fb58 	bl	8005f8c <MX_USART3_UART_Init>
  MX_I2C1_Init();
 80058dc:	f000 f936 	bl	8005b4c <MX_I2C1_Init>
  MX_ADC1_Init();
 80058e0:	f000 f890 	bl	8005a04 <MX_ADC1_Init>
  MX_ADC2_Init();
 80058e4:	f000 f8e0 	bl	8005aa8 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(Movement_Ind_Port, Movement_Ind_Pin, GPIO_PIN_RESET);
 80058e8:	2200      	movs	r2, #0
 80058ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80058ee:	480f      	ldr	r0, [pc, #60]	; (800592c <main+0x78>)
 80058f0:	f002 feae 	bl	8008650 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Collision_Ind_Port, Collision_Ind_Pin, GPIO_PIN_RESET);
 80058f4:	2200      	movs	r2, #0
 80058f6:	2110      	movs	r1, #16
 80058f8:	480d      	ldr	r0, [pc, #52]	; (8005930 <main+0x7c>)
 80058fa:	f002 fea9 	bl	8008650 <HAL_GPIO_WritePin>


	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL,
 80058fe:	4a0d      	ldr	r2, [pc, #52]	; (8005934 <main+0x80>)
 8005900:	2100      	movs	r1, #0
 8005902:	480d      	ldr	r0, [pc, #52]	; (8005938 <main+0x84>)
 8005904:	f007 fa1c 	bl	800cd40 <osThreadNew>
 8005908:	4603      	mov	r3, r0
 800590a:	4a0c      	ldr	r2, [pc, #48]	; (800593c <main+0x88>)
 800590c:	6013      	str	r3, [r2, #0]
			&defaultTask_attributes);

	defaultTaskHandle = osThreadNew(sensorTask, NULL, &sensorTask_attr);
 800590e:	4a0c      	ldr	r2, [pc, #48]	; (8005940 <main+0x8c>)
 8005910:	2100      	movs	r1, #0
 8005912:	480c      	ldr	r0, [pc, #48]	; (8005944 <main+0x90>)
 8005914:	f007 fa14 	bl	800cd40 <osThreadNew>
 8005918:	4603      	mov	r3, r0
 800591a:	4a08      	ldr	r2, [pc, #32]	; (800593c <main+0x88>)
 800591c:	6013      	str	r3, [r2, #0]
	initializeCPPconstructs();
 800591e:	f7fc fb21 	bl	8001f64 <initializeCPPconstructs>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8005922:	f007 f9c3 	bl	800ccac <osKernelInitialize>
/**
* @}
*/

  /* Start scheduler */
  osKernelStart();
 8005926:	f007 f9e5 	bl	800ccf4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 800592a:	e7fe      	b.n	800592a <main+0x76>
 800592c:	40021000 	.word	0x40021000
 8005930:	40020c00 	.word	0x40020c00
 8005934:	080150b8 	.word	0x080150b8
 8005938:	080061c9 	.word	0x080061c9
 800593c:	20000c0c 	.word	0x20000c0c
 8005940:	080150dc 	.word	0x080150dc
 8005944:	08002219 	.word	0x08002219

08005948 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b094      	sub	sp, #80	; 0x50
 800594c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800594e:	f107 0320 	add.w	r3, r7, #32
 8005952:	2230      	movs	r2, #48	; 0x30
 8005954:	2100      	movs	r1, #0
 8005956:	4618      	mov	r0, r3
 8005958:	f00b fd9e 	bl	8011498 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800595c:	f107 030c 	add.w	r3, r7, #12
 8005960:	2200      	movs	r2, #0
 8005962:	601a      	str	r2, [r3, #0]
 8005964:	605a      	str	r2, [r3, #4]
 8005966:	609a      	str	r2, [r3, #8]
 8005968:	60da      	str	r2, [r3, #12]
 800596a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800596c:	2300      	movs	r3, #0
 800596e:	60bb      	str	r3, [r7, #8]
 8005970:	4b22      	ldr	r3, [pc, #136]	; (80059fc <SystemClock_Config+0xb4>)
 8005972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005974:	4a21      	ldr	r2, [pc, #132]	; (80059fc <SystemClock_Config+0xb4>)
 8005976:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800597a:	6413      	str	r3, [r2, #64]	; 0x40
 800597c:	4b1f      	ldr	r3, [pc, #124]	; (80059fc <SystemClock_Config+0xb4>)
 800597e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005980:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005984:	60bb      	str	r3, [r7, #8]
 8005986:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005988:	2300      	movs	r3, #0
 800598a:	607b      	str	r3, [r7, #4]
 800598c:	4b1c      	ldr	r3, [pc, #112]	; (8005a00 <SystemClock_Config+0xb8>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a1b      	ldr	r2, [pc, #108]	; (8005a00 <SystemClock_Config+0xb8>)
 8005992:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005996:	6013      	str	r3, [r2, #0]
 8005998:	4b19      	ldr	r3, [pc, #100]	; (8005a00 <SystemClock_Config+0xb8>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80059a0:	607b      	str	r3, [r7, #4]
 80059a2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80059a4:	2302      	movs	r3, #2
 80059a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80059a8:	2301      	movs	r3, #1
 80059aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80059ac:	2310      	movs	r3, #16
 80059ae:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80059b0:	2300      	movs	r3, #0
 80059b2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80059b4:	f107 0320 	add.w	r3, r7, #32
 80059b8:	4618      	mov	r0, r3
 80059ba:	f003 ffab 	bl	8009914 <HAL_RCC_OscConfig>
 80059be:	4603      	mov	r3, r0
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d001      	beq.n	80059c8 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80059c4:	f000 fc1a 	bl	80061fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80059c8:	230f      	movs	r3, #15
 80059ca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80059cc:	2300      	movs	r3, #0
 80059ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80059d0:	2300      	movs	r3, #0
 80059d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80059d4:	2300      	movs	r3, #0
 80059d6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80059d8:	2300      	movs	r3, #0
 80059da:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80059dc:	f107 030c 	add.w	r3, r7, #12
 80059e0:	2100      	movs	r1, #0
 80059e2:	4618      	mov	r0, r3
 80059e4:	f004 fa0e 	bl	8009e04 <HAL_RCC_ClockConfig>
 80059e8:	4603      	mov	r3, r0
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d001      	beq.n	80059f2 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80059ee:	f000 fc05 	bl	80061fc <Error_Handler>
  }
}
 80059f2:	bf00      	nop
 80059f4:	3750      	adds	r7, #80	; 0x50
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bd80      	pop	{r7, pc}
 80059fa:	bf00      	nop
 80059fc:	40023800 	.word	0x40023800
 8005a00:	40007000 	.word	0x40007000

08005a04 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b084      	sub	sp, #16
 8005a08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8005a0a:	463b      	mov	r3, r7
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	601a      	str	r2, [r3, #0]
 8005a10:	605a      	str	r2, [r3, #4]
 8005a12:	609a      	str	r2, [r3, #8]
 8005a14:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8005a16:	4b21      	ldr	r3, [pc, #132]	; (8005a9c <MX_ADC1_Init+0x98>)
 8005a18:	4a21      	ldr	r2, [pc, #132]	; (8005aa0 <MX_ADC1_Init+0x9c>)
 8005a1a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8005a1c:	4b1f      	ldr	r3, [pc, #124]	; (8005a9c <MX_ADC1_Init+0x98>)
 8005a1e:	2200      	movs	r2, #0
 8005a20:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8005a22:	4b1e      	ldr	r3, [pc, #120]	; (8005a9c <MX_ADC1_Init+0x98>)
 8005a24:	2200      	movs	r2, #0
 8005a26:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8005a28:	4b1c      	ldr	r3, [pc, #112]	; (8005a9c <MX_ADC1_Init+0x98>)
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8005a2e:	4b1b      	ldr	r3, [pc, #108]	; (8005a9c <MX_ADC1_Init+0x98>)
 8005a30:	2200      	movs	r2, #0
 8005a32:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8005a34:	4b19      	ldr	r3, [pc, #100]	; (8005a9c <MX_ADC1_Init+0x98>)
 8005a36:	2200      	movs	r2, #0
 8005a38:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8005a3c:	4b17      	ldr	r3, [pc, #92]	; (8005a9c <MX_ADC1_Init+0x98>)
 8005a3e:	2200      	movs	r2, #0
 8005a40:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005a42:	4b16      	ldr	r3, [pc, #88]	; (8005a9c <MX_ADC1_Init+0x98>)
 8005a44:	4a17      	ldr	r2, [pc, #92]	; (8005aa4 <MX_ADC1_Init+0xa0>)
 8005a46:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005a48:	4b14      	ldr	r3, [pc, #80]	; (8005a9c <MX_ADC1_Init+0x98>)
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8005a4e:	4b13      	ldr	r3, [pc, #76]	; (8005a9c <MX_ADC1_Init+0x98>)
 8005a50:	2201      	movs	r2, #1
 8005a52:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8005a54:	4b11      	ldr	r3, [pc, #68]	; (8005a9c <MX_ADC1_Init+0x98>)
 8005a56:	2200      	movs	r2, #0
 8005a58:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8005a5c:	4b0f      	ldr	r3, [pc, #60]	; (8005a9c <MX_ADC1_Init+0x98>)
 8005a5e:	2201      	movs	r2, #1
 8005a60:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8005a62:	480e      	ldr	r0, [pc, #56]	; (8005a9c <MX_ADC1_Init+0x98>)
 8005a64:	f001 fb74 	bl	8007150 <HAL_ADC_Init>
 8005a68:	4603      	mov	r3, r0
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d001      	beq.n	8005a72 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8005a6e:	f000 fbc5 	bl	80061fc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8005a72:	230a      	movs	r3, #10
 8005a74:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8005a76:	2301      	movs	r3, #1
 8005a78:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005a7e:	463b      	mov	r3, r7
 8005a80:	4619      	mov	r1, r3
 8005a82:	4806      	ldr	r0, [pc, #24]	; (8005a9c <MX_ADC1_Init+0x98>)
 8005a84:	f001 fd46 	bl	8007514 <HAL_ADC_ConfigChannel>
 8005a88:	4603      	mov	r3, r0
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d001      	beq.n	8005a92 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8005a8e:	f000 fbb5 	bl	80061fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8005a92:	bf00      	nop
 8005a94:	3710      	adds	r7, #16
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bd80      	pop	{r7, pc}
 8005a9a:	bf00      	nop
 8005a9c:	200008d4 	.word	0x200008d4
 8005aa0:	40012000 	.word	0x40012000
 8005aa4:	0f000001 	.word	0x0f000001

08005aa8 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b084      	sub	sp, #16
 8005aac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8005aae:	463b      	mov	r3, r7
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	601a      	str	r2, [r3, #0]
 8005ab4:	605a      	str	r2, [r3, #4]
 8005ab6:	609a      	str	r2, [r3, #8]
 8005ab8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8005aba:	4b21      	ldr	r3, [pc, #132]	; (8005b40 <MX_ADC2_Init+0x98>)
 8005abc:	4a21      	ldr	r2, [pc, #132]	; (8005b44 <MX_ADC2_Init+0x9c>)
 8005abe:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8005ac0:	4b1f      	ldr	r3, [pc, #124]	; (8005b40 <MX_ADC2_Init+0x98>)
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8005ac6:	4b1e      	ldr	r3, [pc, #120]	; (8005b40 <MX_ADC2_Init+0x98>)
 8005ac8:	2200      	movs	r2, #0
 8005aca:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8005acc:	4b1c      	ldr	r3, [pc, #112]	; (8005b40 <MX_ADC2_Init+0x98>)
 8005ace:	2200      	movs	r2, #0
 8005ad0:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8005ad2:	4b1b      	ldr	r3, [pc, #108]	; (8005b40 <MX_ADC2_Init+0x98>)
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8005ad8:	4b19      	ldr	r3, [pc, #100]	; (8005b40 <MX_ADC2_Init+0x98>)
 8005ada:	2200      	movs	r2, #0
 8005adc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8005ae0:	4b17      	ldr	r3, [pc, #92]	; (8005b40 <MX_ADC2_Init+0x98>)
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005ae6:	4b16      	ldr	r3, [pc, #88]	; (8005b40 <MX_ADC2_Init+0x98>)
 8005ae8:	4a17      	ldr	r2, [pc, #92]	; (8005b48 <MX_ADC2_Init+0xa0>)
 8005aea:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005aec:	4b14      	ldr	r3, [pc, #80]	; (8005b40 <MX_ADC2_Init+0x98>)
 8005aee:	2200      	movs	r2, #0
 8005af0:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8005af2:	4b13      	ldr	r3, [pc, #76]	; (8005b40 <MX_ADC2_Init+0x98>)
 8005af4:	2201      	movs	r2, #1
 8005af6:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8005af8:	4b11      	ldr	r3, [pc, #68]	; (8005b40 <MX_ADC2_Init+0x98>)
 8005afa:	2200      	movs	r2, #0
 8005afc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8005b00:	4b0f      	ldr	r3, [pc, #60]	; (8005b40 <MX_ADC2_Init+0x98>)
 8005b02:	2201      	movs	r2, #1
 8005b04:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8005b06:	480e      	ldr	r0, [pc, #56]	; (8005b40 <MX_ADC2_Init+0x98>)
 8005b08:	f001 fb22 	bl	8007150 <HAL_ADC_Init>
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d001      	beq.n	8005b16 <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 8005b12:	f000 fb73 	bl	80061fc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8005b16:	2300      	movs	r3, #0
 8005b18:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8005b1e:	2300      	movs	r3, #0
 8005b20:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005b22:	463b      	mov	r3, r7
 8005b24:	4619      	mov	r1, r3
 8005b26:	4806      	ldr	r0, [pc, #24]	; (8005b40 <MX_ADC2_Init+0x98>)
 8005b28:	f001 fcf4 	bl	8007514 <HAL_ADC_ConfigChannel>
 8005b2c:	4603      	mov	r3, r0
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d001      	beq.n	8005b36 <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 8005b32:	f000 fb63 	bl	80061fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8005b36:	bf00      	nop
 8005b38:	3710      	adds	r7, #16
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	bd80      	pop	{r7, pc}
 8005b3e:	bf00      	nop
 8005b40:	2000091c 	.word	0x2000091c
 8005b44:	40012100 	.word	0x40012100
 8005b48:	0f000001 	.word	0x0f000001

08005b4c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8005b50:	4b12      	ldr	r3, [pc, #72]	; (8005b9c <MX_I2C1_Init+0x50>)
 8005b52:	4a13      	ldr	r2, [pc, #76]	; (8005ba0 <MX_I2C1_Init+0x54>)
 8005b54:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8005b56:	4b11      	ldr	r3, [pc, #68]	; (8005b9c <MX_I2C1_Init+0x50>)
 8005b58:	4a12      	ldr	r2, [pc, #72]	; (8005ba4 <MX_I2C1_Init+0x58>)
 8005b5a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005b5c:	4b0f      	ldr	r3, [pc, #60]	; (8005b9c <MX_I2C1_Init+0x50>)
 8005b5e:	2200      	movs	r2, #0
 8005b60:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8005b62:	4b0e      	ldr	r3, [pc, #56]	; (8005b9c <MX_I2C1_Init+0x50>)
 8005b64:	2200      	movs	r2, #0
 8005b66:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005b68:	4b0c      	ldr	r3, [pc, #48]	; (8005b9c <MX_I2C1_Init+0x50>)
 8005b6a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005b6e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005b70:	4b0a      	ldr	r3, [pc, #40]	; (8005b9c <MX_I2C1_Init+0x50>)
 8005b72:	2200      	movs	r2, #0
 8005b74:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8005b76:	4b09      	ldr	r3, [pc, #36]	; (8005b9c <MX_I2C1_Init+0x50>)
 8005b78:	2200      	movs	r2, #0
 8005b7a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005b7c:	4b07      	ldr	r3, [pc, #28]	; (8005b9c <MX_I2C1_Init+0x50>)
 8005b7e:	2200      	movs	r2, #0
 8005b80:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005b82:	4b06      	ldr	r3, [pc, #24]	; (8005b9c <MX_I2C1_Init+0x50>)
 8005b84:	2200      	movs	r2, #0
 8005b86:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005b88:	4804      	ldr	r0, [pc, #16]	; (8005b9c <MX_I2C1_Init+0x50>)
 8005b8a:	f002 fdad 	bl	80086e8 <HAL_I2C_Init>
 8005b8e:	4603      	mov	r3, r0
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d001      	beq.n	8005b98 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8005b94:	f000 fb32 	bl	80061fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8005b98:	bf00      	nop
 8005b9a:	bd80      	pop	{r7, pc}
 8005b9c:	20000964 	.word	0x20000964
 8005ba0:	40005400 	.word	0x40005400
 8005ba4:	00061a80 	.word	0x00061a80

08005ba8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b096      	sub	sp, #88	; 0x58
 8005bac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005bae:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	601a      	str	r2, [r3, #0]
 8005bb6:	605a      	str	r2, [r3, #4]
 8005bb8:	609a      	str	r2, [r3, #8]
 8005bba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005bbc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	601a      	str	r2, [r3, #0]
 8005bc4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005bc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005bca:	2200      	movs	r2, #0
 8005bcc:	601a      	str	r2, [r3, #0]
 8005bce:	605a      	str	r2, [r3, #4]
 8005bd0:	609a      	str	r2, [r3, #8]
 8005bd2:	60da      	str	r2, [r3, #12]
 8005bd4:	611a      	str	r2, [r3, #16]
 8005bd6:	615a      	str	r2, [r3, #20]
 8005bd8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005bda:	1d3b      	adds	r3, r7, #4
 8005bdc:	2220      	movs	r2, #32
 8005bde:	2100      	movs	r1, #0
 8005be0:	4618      	mov	r0, r3
 8005be2:	f00b fc59 	bl	8011498 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8005be6:	4b3e      	ldr	r3, [pc, #248]	; (8005ce0 <MX_TIM1_Init+0x138>)
 8005be8:	4a3e      	ldr	r2, [pc, #248]	; (8005ce4 <MX_TIM1_Init+0x13c>)
 8005bea:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 160;
 8005bec:	4b3c      	ldr	r3, [pc, #240]	; (8005ce0 <MX_TIM1_Init+0x138>)
 8005bee:	22a0      	movs	r2, #160	; 0xa0
 8005bf0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005bf2:	4b3b      	ldr	r3, [pc, #236]	; (8005ce0 <MX_TIM1_Init+0x138>)
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8005bf8:	4b39      	ldr	r3, [pc, #228]	; (8005ce0 <MX_TIM1_Init+0x138>)
 8005bfa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005bfe:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005c00:	4b37      	ldr	r3, [pc, #220]	; (8005ce0 <MX_TIM1_Init+0x138>)
 8005c02:	2200      	movs	r2, #0
 8005c04:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8005c06:	4b36      	ldr	r3, [pc, #216]	; (8005ce0 <MX_TIM1_Init+0x138>)
 8005c08:	2200      	movs	r2, #0
 8005c0a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005c0c:	4b34      	ldr	r3, [pc, #208]	; (8005ce0 <MX_TIM1_Init+0x138>)
 8005c0e:	2280      	movs	r2, #128	; 0x80
 8005c10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8005c12:	4833      	ldr	r0, [pc, #204]	; (8005ce0 <MX_TIM1_Init+0x138>)
 8005c14:	f004 fb48 	bl	800a2a8 <HAL_TIM_Base_Init>
 8005c18:	4603      	mov	r3, r0
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d001      	beq.n	8005c22 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8005c1e:	f000 faed 	bl	80061fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005c22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005c26:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8005c28:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005c2c:	4619      	mov	r1, r3
 8005c2e:	482c      	ldr	r0, [pc, #176]	; (8005ce0 <MX_TIM1_Init+0x138>)
 8005c30:	f005 f81a 	bl	800ac68 <HAL_TIM_ConfigClockSource>
 8005c34:	4603      	mov	r3, r0
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d001      	beq.n	8005c3e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8005c3a:	f000 fadf 	bl	80061fc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8005c3e:	4828      	ldr	r0, [pc, #160]	; (8005ce0 <MX_TIM1_Init+0x138>)
 8005c40:	f004 fbf2 	bl	800a428 <HAL_TIM_PWM_Init>
 8005c44:	4603      	mov	r3, r0
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d001      	beq.n	8005c4e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8005c4a:	f000 fad7 	bl	80061fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005c4e:	2300      	movs	r3, #0
 8005c50:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005c52:	2300      	movs	r3, #0
 8005c54:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8005c56:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005c5a:	4619      	mov	r1, r3
 8005c5c:	4820      	ldr	r0, [pc, #128]	; (8005ce0 <MX_TIM1_Init+0x138>)
 8005c5e:	f005 fc03 	bl	800b468 <HAL_TIMEx_MasterConfigSynchronization>
 8005c62:	4603      	mov	r3, r0
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d001      	beq.n	8005c6c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8005c68:	f000 fac8 	bl	80061fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005c6c:	2360      	movs	r3, #96	; 0x60
 8005c6e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8005c70:	2300      	movs	r3, #0
 8005c72:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005c74:	2300      	movs	r3, #0
 8005c76:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005c78:	2300      	movs	r3, #0
 8005c7a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005c80:	2300      	movs	r3, #0
 8005c82:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005c84:	2300      	movs	r3, #0
 8005c86:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005c88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	4619      	mov	r1, r3
 8005c90:	4813      	ldr	r0, [pc, #76]	; (8005ce0 <MX_TIM1_Init+0x138>)
 8005c92:	f004 ff27 	bl	800aae4 <HAL_TIM_PWM_ConfigChannel>
 8005c96:	4603      	mov	r3, r0
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d001      	beq.n	8005ca0 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8005c9c:	f000 faae 	bl	80061fc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005ca8:	2300      	movs	r3, #0
 8005caa:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8005cac:	2300      	movs	r3, #0
 8005cae:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005cb4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005cb8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8005cba:	2300      	movs	r3, #0
 8005cbc:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8005cbe:	1d3b      	adds	r3, r7, #4
 8005cc0:	4619      	mov	r1, r3
 8005cc2:	4807      	ldr	r0, [pc, #28]	; (8005ce0 <MX_TIM1_Init+0x138>)
 8005cc4:	f005 fc4c 	bl	800b560 <HAL_TIMEx_ConfigBreakDeadTime>
 8005cc8:	4603      	mov	r3, r0
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d001      	beq.n	8005cd2 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8005cce:	f000 fa95 	bl	80061fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8005cd2:	4803      	ldr	r0, [pc, #12]	; (8005ce0 <MX_TIM1_Init+0x138>)
 8005cd4:	f000 fe38 	bl	8006948 <HAL_TIM_MspPostInit>

}
 8005cd8:	bf00      	nop
 8005cda:	3758      	adds	r7, #88	; 0x58
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	bd80      	pop	{r7, pc}
 8005ce0:	200009b8 	.word	0x200009b8
 8005ce4:	40010000 	.word	0x40010000

08005ce8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b08c      	sub	sp, #48	; 0x30
 8005cec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8005cee:	f107 030c 	add.w	r3, r7, #12
 8005cf2:	2224      	movs	r2, #36	; 0x24
 8005cf4:	2100      	movs	r1, #0
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	f00b fbce 	bl	8011498 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005cfc:	1d3b      	adds	r3, r7, #4
 8005cfe:	2200      	movs	r2, #0
 8005d00:	601a      	str	r2, [r3, #0]
 8005d02:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8005d04:	4b21      	ldr	r3, [pc, #132]	; (8005d8c <MX_TIM2_Init+0xa4>)
 8005d06:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005d0a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8005d0c:	4b1f      	ldr	r3, [pc, #124]	; (8005d8c <MX_TIM2_Init+0xa4>)
 8005d0e:	2200      	movs	r2, #0
 8005d10:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005d12:	4b1e      	ldr	r3, [pc, #120]	; (8005d8c <MX_TIM2_Init+0xa4>)
 8005d14:	2200      	movs	r2, #0
 8005d16:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8005d18:	4b1c      	ldr	r3, [pc, #112]	; (8005d8c <MX_TIM2_Init+0xa4>)
 8005d1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005d1e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005d20:	4b1a      	ldr	r3, [pc, #104]	; (8005d8c <MX_TIM2_Init+0xa4>)
 8005d22:	2200      	movs	r2, #0
 8005d24:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005d26:	4b19      	ldr	r3, [pc, #100]	; (8005d8c <MX_TIM2_Init+0xa4>)
 8005d28:	2200      	movs	r2, #0
 8005d2a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8005d2c:	2303      	movs	r3, #3
 8005d2e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8005d30:	2300      	movs	r3, #0
 8005d32:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8005d34:	2301      	movs	r3, #1
 8005d36:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8005d38:	2300      	movs	r3, #0
 8005d3a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8005d3c:	230a      	movs	r3, #10
 8005d3e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8005d40:	2300      	movs	r3, #0
 8005d42:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8005d44:	2301      	movs	r3, #1
 8005d46:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8005d48:	2300      	movs	r3, #0
 8005d4a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8005d50:	f107 030c 	add.w	r3, r7, #12
 8005d54:	4619      	mov	r1, r3
 8005d56:	480d      	ldr	r0, [pc, #52]	; (8005d8c <MX_TIM2_Init+0xa4>)
 8005d58:	f004 fc88 	bl	800a66c <HAL_TIM_Encoder_Init>
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d001      	beq.n	8005d66 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8005d62:	f000 fa4b 	bl	80061fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005d66:	2300      	movs	r3, #0
 8005d68:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005d6e:	1d3b      	adds	r3, r7, #4
 8005d70:	4619      	mov	r1, r3
 8005d72:	4806      	ldr	r0, [pc, #24]	; (8005d8c <MX_TIM2_Init+0xa4>)
 8005d74:	f005 fb78 	bl	800b468 <HAL_TIMEx_MasterConfigSynchronization>
 8005d78:	4603      	mov	r3, r0
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d001      	beq.n	8005d82 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8005d7e:	f000 fa3d 	bl	80061fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8005d82:	bf00      	nop
 8005d84:	3730      	adds	r7, #48	; 0x30
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bd80      	pop	{r7, pc}
 8005d8a:	bf00      	nop
 8005d8c:	20000a00 	.word	0x20000a00

08005d90 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b08c      	sub	sp, #48	; 0x30
 8005d94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8005d96:	f107 030c 	add.w	r3, r7, #12
 8005d9a:	2224      	movs	r2, #36	; 0x24
 8005d9c:	2100      	movs	r1, #0
 8005d9e:	4618      	mov	r0, r3
 8005da0:	f00b fb7a 	bl	8011498 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005da4:	1d3b      	adds	r3, r7, #4
 8005da6:	2200      	movs	r2, #0
 8005da8:	601a      	str	r2, [r3, #0]
 8005daa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8005dac:	4b20      	ldr	r3, [pc, #128]	; (8005e30 <MX_TIM3_Init+0xa0>)
 8005dae:	4a21      	ldr	r2, [pc, #132]	; (8005e34 <MX_TIM3_Init+0xa4>)
 8005db0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8005db2:	4b1f      	ldr	r3, [pc, #124]	; (8005e30 <MX_TIM3_Init+0xa0>)
 8005db4:	2200      	movs	r2, #0
 8005db6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005db8:	4b1d      	ldr	r3, [pc, #116]	; (8005e30 <MX_TIM3_Init+0xa0>)
 8005dba:	2200      	movs	r2, #0
 8005dbc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8005dbe:	4b1c      	ldr	r3, [pc, #112]	; (8005e30 <MX_TIM3_Init+0xa0>)
 8005dc0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005dc4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005dc6:	4b1a      	ldr	r3, [pc, #104]	; (8005e30 <MX_TIM3_Init+0xa0>)
 8005dc8:	2200      	movs	r2, #0
 8005dca:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005dcc:	4b18      	ldr	r3, [pc, #96]	; (8005e30 <MX_TIM3_Init+0xa0>)
 8005dce:	2200      	movs	r2, #0
 8005dd0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8005dd2:	2303      	movs	r3, #3
 8005dd4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8005dda:	2301      	movs	r3, #1
 8005ddc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8005dde:	2300      	movs	r3, #0
 8005de0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8005de2:	230a      	movs	r3, #10
 8005de4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8005de6:	2300      	movs	r3, #0
 8005de8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8005dea:	2301      	movs	r3, #1
 8005dec:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8005dee:	2300      	movs	r3, #0
 8005df0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8005df2:	2300      	movs	r3, #0
 8005df4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8005df6:	f107 030c 	add.w	r3, r7, #12
 8005dfa:	4619      	mov	r1, r3
 8005dfc:	480c      	ldr	r0, [pc, #48]	; (8005e30 <MX_TIM3_Init+0xa0>)
 8005dfe:	f004 fc35 	bl	800a66c <HAL_TIM_Encoder_Init>
 8005e02:	4603      	mov	r3, r0
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d001      	beq.n	8005e0c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8005e08:	f000 f9f8 	bl	80061fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005e10:	2300      	movs	r3, #0
 8005e12:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005e14:	1d3b      	adds	r3, r7, #4
 8005e16:	4619      	mov	r1, r3
 8005e18:	4805      	ldr	r0, [pc, #20]	; (8005e30 <MX_TIM3_Init+0xa0>)
 8005e1a:	f005 fb25 	bl	800b468 <HAL_TIMEx_MasterConfigSynchronization>
 8005e1e:	4603      	mov	r3, r0
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d001      	beq.n	8005e28 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8005e24:	f000 f9ea 	bl	80061fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8005e28:	bf00      	nop
 8005e2a:	3730      	adds	r7, #48	; 0x30
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	bd80      	pop	{r7, pc}
 8005e30:	20000a48 	.word	0x20000a48
 8005e34:	40000400 	.word	0x40000400

08005e38 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b096      	sub	sp, #88	; 0x58
 8005e3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005e3e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005e42:	2200      	movs	r2, #0
 8005e44:	601a      	str	r2, [r3, #0]
 8005e46:	605a      	str	r2, [r3, #4]
 8005e48:	609a      	str	r2, [r3, #8]
 8005e4a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005e4c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005e50:	2200      	movs	r2, #0
 8005e52:	601a      	str	r2, [r3, #0]
 8005e54:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005e56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	601a      	str	r2, [r3, #0]
 8005e5e:	605a      	str	r2, [r3, #4]
 8005e60:	609a      	str	r2, [r3, #8]
 8005e62:	60da      	str	r2, [r3, #12]
 8005e64:	611a      	str	r2, [r3, #16]
 8005e66:	615a      	str	r2, [r3, #20]
 8005e68:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005e6a:	1d3b      	adds	r3, r7, #4
 8005e6c:	2220      	movs	r2, #32
 8005e6e:	2100      	movs	r1, #0
 8005e70:	4618      	mov	r0, r3
 8005e72:	f00b fb11 	bl	8011498 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8005e76:	4b43      	ldr	r3, [pc, #268]	; (8005f84 <MX_TIM8_Init+0x14c>)
 8005e78:	4a43      	ldr	r2, [pc, #268]	; (8005f88 <MX_TIM8_Init+0x150>)
 8005e7a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8005e7c:	4b41      	ldr	r3, [pc, #260]	; (8005f84 <MX_TIM8_Init+0x14c>)
 8005e7e:	2200      	movs	r2, #0
 8005e80:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005e82:	4b40      	ldr	r3, [pc, #256]	; (8005f84 <MX_TIM8_Init+0x14c>)
 8005e84:	2200      	movs	r2, #0
 8005e86:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 7199;
 8005e88:	4b3e      	ldr	r3, [pc, #248]	; (8005f84 <MX_TIM8_Init+0x14c>)
 8005e8a:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8005e8e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005e90:	4b3c      	ldr	r3, [pc, #240]	; (8005f84 <MX_TIM8_Init+0x14c>)
 8005e92:	2200      	movs	r2, #0
 8005e94:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8005e96:	4b3b      	ldr	r3, [pc, #236]	; (8005f84 <MX_TIM8_Init+0x14c>)
 8005e98:	2200      	movs	r2, #0
 8005e9a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005e9c:	4b39      	ldr	r3, [pc, #228]	; (8005f84 <MX_TIM8_Init+0x14c>)
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8005ea2:	4838      	ldr	r0, [pc, #224]	; (8005f84 <MX_TIM8_Init+0x14c>)
 8005ea4:	f004 fa00 	bl	800a2a8 <HAL_TIM_Base_Init>
 8005ea8:	4603      	mov	r3, r0
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d001      	beq.n	8005eb2 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8005eae:	f000 f9a5 	bl	80061fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005eb2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005eb6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8005eb8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005ebc:	4619      	mov	r1, r3
 8005ebe:	4831      	ldr	r0, [pc, #196]	; (8005f84 <MX_TIM8_Init+0x14c>)
 8005ec0:	f004 fed2 	bl	800ac68 <HAL_TIM_ConfigClockSource>
 8005ec4:	4603      	mov	r3, r0
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d001      	beq.n	8005ece <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8005eca:	f000 f997 	bl	80061fc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8005ece:	482d      	ldr	r0, [pc, #180]	; (8005f84 <MX_TIM8_Init+0x14c>)
 8005ed0:	f004 faaa 	bl	800a428 <HAL_TIM_PWM_Init>
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d001      	beq.n	8005ede <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8005eda:	f000 f98f 	bl	80061fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005ede:	2300      	movs	r3, #0
 8005ee0:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8005ee6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005eea:	4619      	mov	r1, r3
 8005eec:	4825      	ldr	r0, [pc, #148]	; (8005f84 <MX_TIM8_Init+0x14c>)
 8005eee:	f005 fabb 	bl	800b468 <HAL_TIMEx_MasterConfigSynchronization>
 8005ef2:	4603      	mov	r3, r0
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d001      	beq.n	8005efc <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8005ef8:	f000 f980 	bl	80061fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005efc:	2360      	movs	r3, #96	; 0x60
 8005efe:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8005f00:	2300      	movs	r3, #0
 8005f02:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005f04:	2300      	movs	r3, #0
 8005f06:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005f08:	2300      	movs	r3, #0
 8005f0a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005f10:	2300      	movs	r3, #0
 8005f12:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005f14:	2300      	movs	r3, #0
 8005f16:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005f18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	4619      	mov	r1, r3
 8005f20:	4818      	ldr	r0, [pc, #96]	; (8005f84 <MX_TIM8_Init+0x14c>)
 8005f22:	f004 fddf 	bl	800aae4 <HAL_TIM_PWM_ConfigChannel>
 8005f26:	4603      	mov	r3, r0
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d001      	beq.n	8005f30 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8005f2c:	f000 f966 	bl	80061fc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005f30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005f34:	2204      	movs	r2, #4
 8005f36:	4619      	mov	r1, r3
 8005f38:	4812      	ldr	r0, [pc, #72]	; (8005f84 <MX_TIM8_Init+0x14c>)
 8005f3a:	f004 fdd3 	bl	800aae4 <HAL_TIM_PWM_ConfigChannel>
 8005f3e:	4603      	mov	r3, r0
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d001      	beq.n	8005f48 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8005f44:	f000 f95a 	bl	80061fc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8005f48:	2300      	movs	r3, #0
 8005f4a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005f50:	2300      	movs	r3, #0
 8005f52:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8005f54:	2300      	movs	r3, #0
 8005f56:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8005f58:	2300      	movs	r3, #0
 8005f5a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005f5c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005f60:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8005f62:	2300      	movs	r3, #0
 8005f64:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8005f66:	1d3b      	adds	r3, r7, #4
 8005f68:	4619      	mov	r1, r3
 8005f6a:	4806      	ldr	r0, [pc, #24]	; (8005f84 <MX_TIM8_Init+0x14c>)
 8005f6c:	f005 faf8 	bl	800b560 <HAL_TIMEx_ConfigBreakDeadTime>
 8005f70:	4603      	mov	r3, r0
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d001      	beq.n	8005f7a <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 8005f76:	f000 f941 	bl	80061fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8005f7a:	bf00      	nop
 8005f7c:	3758      	adds	r7, #88	; 0x58
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd80      	pop	{r7, pc}
 8005f82:	bf00      	nop
 8005f84:	20000a90 	.word	0x20000a90
 8005f88:	40010400 	.word	0x40010400

08005f8c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8005f90:	4b11      	ldr	r3, [pc, #68]	; (8005fd8 <MX_USART3_UART_Init+0x4c>)
 8005f92:	4a12      	ldr	r2, [pc, #72]	; (8005fdc <MX_USART3_UART_Init+0x50>)
 8005f94:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8005f96:	4b10      	ldr	r3, [pc, #64]	; (8005fd8 <MX_USART3_UART_Init+0x4c>)
 8005f98:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005f9c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8005f9e:	4b0e      	ldr	r3, [pc, #56]	; (8005fd8 <MX_USART3_UART_Init+0x4c>)
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8005fa4:	4b0c      	ldr	r3, [pc, #48]	; (8005fd8 <MX_USART3_UART_Init+0x4c>)
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8005faa:	4b0b      	ldr	r3, [pc, #44]	; (8005fd8 <MX_USART3_UART_Init+0x4c>)
 8005fac:	2200      	movs	r2, #0
 8005fae:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8005fb0:	4b09      	ldr	r3, [pc, #36]	; (8005fd8 <MX_USART3_UART_Init+0x4c>)
 8005fb2:	220c      	movs	r2, #12
 8005fb4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005fb6:	4b08      	ldr	r3, [pc, #32]	; (8005fd8 <MX_USART3_UART_Init+0x4c>)
 8005fb8:	2200      	movs	r2, #0
 8005fba:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8005fbc:	4b06      	ldr	r3, [pc, #24]	; (8005fd8 <MX_USART3_UART_Init+0x4c>)
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8005fc2:	4805      	ldr	r0, [pc, #20]	; (8005fd8 <MX_USART3_UART_Init+0x4c>)
 8005fc4:	f005 fb32 	bl	800b62c <HAL_UART_Init>
 8005fc8:	4603      	mov	r3, r0
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d001      	beq.n	8005fd2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8005fce:	f000 f915 	bl	80061fc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8005fd2:	bf00      	nop
 8005fd4:	bd80      	pop	{r7, pc}
 8005fd6:	bf00      	nop
 8005fd8:	20000ad8 	.word	0x20000ad8
 8005fdc:	40004800 	.word	0x40004800

08005fe0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b082      	sub	sp, #8
 8005fe4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	607b      	str	r3, [r7, #4]
 8005fea:	4b10      	ldr	r3, [pc, #64]	; (800602c <MX_DMA_Init+0x4c>)
 8005fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fee:	4a0f      	ldr	r2, [pc, #60]	; (800602c <MX_DMA_Init+0x4c>)
 8005ff0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005ff4:	6313      	str	r3, [r2, #48]	; 0x30
 8005ff6:	4b0d      	ldr	r3, [pc, #52]	; (800602c <MX_DMA_Init+0x4c>)
 8005ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ffa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005ffe:	607b      	str	r3, [r7, #4]
 8006000:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8006002:	2200      	movs	r2, #0
 8006004:	2105      	movs	r1, #5
 8006006:	200c      	movs	r0, #12
 8006008:	f001 fd5a 	bl	8007ac0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800600c:	200c      	movs	r0, #12
 800600e:	f001 fd73 	bl	8007af8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8006012:	2200      	movs	r2, #0
 8006014:	2105      	movs	r1, #5
 8006016:	200e      	movs	r0, #14
 8006018:	f001 fd52 	bl	8007ac0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800601c:	200e      	movs	r0, #14
 800601e:	f001 fd6b 	bl	8007af8 <HAL_NVIC_EnableIRQ>

}
 8006022:	bf00      	nop
 8006024:	3708      	adds	r7, #8
 8006026:	46bd      	mov	sp, r7
 8006028:	bd80      	pop	{r7, pc}
 800602a:	bf00      	nop
 800602c:	40023800 	.word	0x40023800

08006030 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b08a      	sub	sp, #40	; 0x28
 8006034:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006036:	f107 0314 	add.w	r3, r7, #20
 800603a:	2200      	movs	r2, #0
 800603c:	601a      	str	r2, [r3, #0]
 800603e:	605a      	str	r2, [r3, #4]
 8006040:	609a      	str	r2, [r3, #8]
 8006042:	60da      	str	r2, [r3, #12]
 8006044:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006046:	2300      	movs	r3, #0
 8006048:	613b      	str	r3, [r7, #16]
 800604a:	4b5b      	ldr	r3, [pc, #364]	; (80061b8 <MX_GPIO_Init+0x188>)
 800604c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800604e:	4a5a      	ldr	r2, [pc, #360]	; (80061b8 <MX_GPIO_Init+0x188>)
 8006050:	f043 0310 	orr.w	r3, r3, #16
 8006054:	6313      	str	r3, [r2, #48]	; 0x30
 8006056:	4b58      	ldr	r3, [pc, #352]	; (80061b8 <MX_GPIO_Init+0x188>)
 8006058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800605a:	f003 0310 	and.w	r3, r3, #16
 800605e:	613b      	str	r3, [r7, #16]
 8006060:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006062:	2300      	movs	r3, #0
 8006064:	60fb      	str	r3, [r7, #12]
 8006066:	4b54      	ldr	r3, [pc, #336]	; (80061b8 <MX_GPIO_Init+0x188>)
 8006068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800606a:	4a53      	ldr	r2, [pc, #332]	; (80061b8 <MX_GPIO_Init+0x188>)
 800606c:	f043 0304 	orr.w	r3, r3, #4
 8006070:	6313      	str	r3, [r2, #48]	; 0x30
 8006072:	4b51      	ldr	r3, [pc, #324]	; (80061b8 <MX_GPIO_Init+0x188>)
 8006074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006076:	f003 0304 	and.w	r3, r3, #4
 800607a:	60fb      	str	r3, [r7, #12]
 800607c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800607e:	2300      	movs	r3, #0
 8006080:	60bb      	str	r3, [r7, #8]
 8006082:	4b4d      	ldr	r3, [pc, #308]	; (80061b8 <MX_GPIO_Init+0x188>)
 8006084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006086:	4a4c      	ldr	r2, [pc, #304]	; (80061b8 <MX_GPIO_Init+0x188>)
 8006088:	f043 0301 	orr.w	r3, r3, #1
 800608c:	6313      	str	r3, [r2, #48]	; 0x30
 800608e:	4b4a      	ldr	r3, [pc, #296]	; (80061b8 <MX_GPIO_Init+0x188>)
 8006090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006092:	f003 0301 	and.w	r3, r3, #1
 8006096:	60bb      	str	r3, [r7, #8]
 8006098:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800609a:	2300      	movs	r3, #0
 800609c:	607b      	str	r3, [r7, #4]
 800609e:	4b46      	ldr	r3, [pc, #280]	; (80061b8 <MX_GPIO_Init+0x188>)
 80060a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060a2:	4a45      	ldr	r2, [pc, #276]	; (80061b8 <MX_GPIO_Init+0x188>)
 80060a4:	f043 0308 	orr.w	r3, r3, #8
 80060a8:	6313      	str	r3, [r2, #48]	; 0x30
 80060aa:	4b43      	ldr	r3, [pc, #268]	; (80061b8 <MX_GPIO_Init+0x188>)
 80060ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060ae:	f003 0308 	and.w	r3, r3, #8
 80060b2:	607b      	str	r3, [r7, #4]
 80060b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80060b6:	2300      	movs	r3, #0
 80060b8:	603b      	str	r3, [r7, #0]
 80060ba:	4b3f      	ldr	r3, [pc, #252]	; (80061b8 <MX_GPIO_Init+0x188>)
 80060bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060be:	4a3e      	ldr	r2, [pc, #248]	; (80061b8 <MX_GPIO_Init+0x188>)
 80060c0:	f043 0302 	orr.w	r3, r3, #2
 80060c4:	6313      	str	r3, [r2, #48]	; 0x30
 80060c6:	4b3c      	ldr	r3, [pc, #240]	; (80061b8 <MX_GPIO_Init+0x188>)
 80060c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060ca:	f003 0302 	and.w	r3, r3, #2
 80060ce:	603b      	str	r3, [r7, #0]
 80060d0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, OLED_SCLK_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 80060d2:	2200      	movs	r2, #0
 80060d4:	f242 51e0 	movw	r1, #9696	; 0x25e0
 80060d8:	4838      	ldr	r0, [pc, #224]	; (80061bc <MX_GPIO_Init+0x18c>)
 80060da:	f002 fab9 	bl	8008650 <HAL_GPIO_WritePin>
                          |LED3_Pin|GPIO_PIN_13, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin, GPIO_PIN_RESET);
 80060de:	2200      	movs	r2, #0
 80060e0:	213c      	movs	r1, #60	; 0x3c
 80060e2:	4837      	ldr	r0, [pc, #220]	; (80061c0 <MX_GPIO_Init+0x190>)
 80060e4:	f002 fab4 	bl	8008650 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_RESET);
 80060e8:	2200      	movs	r2, #0
 80060ea:	2110      	movs	r1, #16
 80060ec:	4835      	ldr	r0, [pc, #212]	; (80061c4 <MX_GPIO_Init+0x194>)
 80060ee:	f002 faaf 	bl	8008650 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OLED_SCLK_Pin OLED_SDA_Pin OLED_RST_Pin OLED_DC_Pin
                           PE13 */
  GPIO_InitStruct.Pin = OLED_SCLK_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 80060f2:	f242 13e0 	movw	r3, #8672	; 0x21e0
 80060f6:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80060f8:	2301      	movs	r3, #1
 80060fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060fc:	2300      	movs	r3, #0
 80060fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006100:	2300      	movs	r3, #0
 8006102:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006104:	f107 0314 	add.w	r3, r7, #20
 8006108:	4619      	mov	r1, r3
 800610a:	482c      	ldr	r0, [pc, #176]	; (80061bc <MX_GPIO_Init+0x18c>)
 800610c:	f002 f904 	bl	8008318 <HAL_GPIO_Init>

  /*Configure GPIO pins : AIN2_Pin AIN1_Pin BIN1_Pin */
  GPIO_InitStruct.Pin = AIN2_Pin|AIN1_Pin|BIN1_Pin;
 8006110:	231c      	movs	r3, #28
 8006112:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006114:	2301      	movs	r3, #1
 8006116:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006118:	2300      	movs	r3, #0
 800611a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800611c:	2302      	movs	r3, #2
 800611e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006120:	f107 0314 	add.w	r3, r7, #20
 8006124:	4619      	mov	r1, r3
 8006126:	4826      	ldr	r0, [pc, #152]	; (80061c0 <MX_GPIO_Init+0x190>)
 8006128:	f002 f8f6 	bl	8008318 <HAL_GPIO_Init>

  /*Configure GPIO pin : BIN2_Pin */
  GPIO_InitStruct.Pin = BIN2_Pin;
 800612c:	2320      	movs	r3, #32
 800612e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006130:	2301      	movs	r3, #1
 8006132:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006134:	2300      	movs	r3, #0
 8006136:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8006138:	2301      	movs	r3, #1
 800613a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BIN2_GPIO_Port, &GPIO_InitStruct);
 800613c:	f107 0314 	add.w	r3, r7, #20
 8006140:	4619      	mov	r1, r3
 8006142:	481f      	ldr	r0, [pc, #124]	; (80061c0 <MX_GPIO_Init+0x190>)
 8006144:	f002 f8e8 	bl	8008318 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED3_Pin */
  GPIO_InitStruct.Pin = LED3_Pin;
 8006148:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800614c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800614e:	2301      	movs	r3, #1
 8006150:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006152:	2300      	movs	r3, #0
 8006154:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8006156:	2301      	movs	r3, #1
 8006158:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED3_GPIO_Port, &GPIO_InitStruct);
 800615a:	f107 0314 	add.w	r3, r7, #20
 800615e:	4619      	mov	r1, r3
 8006160:	4816      	ldr	r0, [pc, #88]	; (80061bc <MX_GPIO_Init+0x18c>)
 8006162:	f002 f8d9 	bl	8008318 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8006166:	f44f 7380 	mov.w	r3, #256	; 0x100
 800616a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800616c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8006170:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006172:	2300      	movs	r3, #0
 8006174:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006176:	f107 0314 	add.w	r3, r7, #20
 800617a:	4619      	mov	r1, r3
 800617c:	4811      	ldr	r0, [pc, #68]	; (80061c4 <MX_GPIO_Init+0x194>)
 800617e:	f002 f8cb 	bl	8008318 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8006182:	2310      	movs	r3, #16
 8006184:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006186:	2301      	movs	r3, #1
 8006188:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800618a:	2300      	movs	r3, #0
 800618c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800618e:	2300      	movs	r3, #0
 8006190:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006192:	f107 0314 	add.w	r3, r7, #20
 8006196:	4619      	mov	r1, r3
 8006198:	480a      	ldr	r0, [pc, #40]	; (80061c4 <MX_GPIO_Init+0x194>)
 800619a:	f002 f8bd 	bl	8008318 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 800619e:	2200      	movs	r2, #0
 80061a0:	2105      	movs	r1, #5
 80061a2:	2017      	movs	r0, #23
 80061a4:	f001 fc8c 	bl	8007ac0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80061a8:	2017      	movs	r0, #23
 80061aa:	f001 fca5 	bl	8007af8 <HAL_NVIC_EnableIRQ>

}
 80061ae:	bf00      	nop
 80061b0:	3728      	adds	r7, #40	; 0x28
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bd80      	pop	{r7, pc}
 80061b6:	bf00      	nop
 80061b8:	40023800 	.word	0x40023800
 80061bc:	40021000 	.word	0x40021000
 80061c0:	40020000 	.word	0x40020000
 80061c4:	40020c00 	.word	0x40020c00

080061c8 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b082      	sub	sp, #8
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
	/* Infinite loop */

	for (;;) {

		//OLED_Refresh_Gram(); // Refresh Ram
		osDelay(50);
 80061d0:	2032      	movs	r0, #50	; 0x32
 80061d2:	f006 fe69 	bl	800cea8 <osDelay>
 80061d6:	e7fb      	b.n	80061d0 <StartDefaultTask+0x8>

080061d8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b082      	sub	sp, #8
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4a04      	ldr	r2, [pc, #16]	; (80061f8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d101      	bne.n	80061ee <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80061ea:	f000 ff6d 	bl	80070c8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80061ee:	bf00      	nop
 80061f0:	3708      	adds	r7, #8
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bd80      	pop	{r7, pc}
 80061f6:	bf00      	nop
 80061f8:	40001400 	.word	0x40001400

080061fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80061fc:	b480      	push	{r7}
 80061fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006200:	b672      	cpsid	i
}
 8006202:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8006204:	e7fe      	b.n	8006204 <Error_Handler+0x8>

08006206 <_Z8PID_initP12pid_type_defhPKfff>:
  * @param[in]      max_out: pid最大输出
  * @param[in]      max_iout: pid最大积分输出
  * @retval         none
  */
void PID_init(pid_type_def *pid, uint8_t mode, const float PID[3], float max_out, float max_iout)
{
 8006206:	b480      	push	{r7}
 8006208:	b087      	sub	sp, #28
 800620a:	af00      	add	r7, sp, #0
 800620c:	6178      	str	r0, [r7, #20]
 800620e:	460b      	mov	r3, r1
 8006210:	60fa      	str	r2, [r7, #12]
 8006212:	ed87 0a02 	vstr	s0, [r7, #8]
 8006216:	edc7 0a01 	vstr	s1, [r7, #4]
 800621a:	74fb      	strb	r3, [r7, #19]
    if (pid == NULL || PID == NULL)
 800621c:	697b      	ldr	r3, [r7, #20]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d042      	beq.n	80062a8 <_Z8PID_initP12pid_type_defhPKfff+0xa2>
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d03f      	beq.n	80062a8 <_Z8PID_initP12pid_type_defhPKfff+0xa2>
    {
        return;
    }
    pid->mode = mode;
 8006228:	697b      	ldr	r3, [r7, #20]
 800622a:	7cfa      	ldrb	r2, [r7, #19]
 800622c:	701a      	strb	r2, [r3, #0]
    pid->Kp = PID[0];
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681a      	ldr	r2, [r3, #0]
 8006232:	697b      	ldr	r3, [r7, #20]
 8006234:	605a      	str	r2, [r3, #4]
    pid->Ki = PID[1];
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	3304      	adds	r3, #4
 800623a:	681a      	ldr	r2, [r3, #0]
 800623c:	697b      	ldr	r3, [r7, #20]
 800623e:	609a      	str	r2, [r3, #8]
    pid->Kd = PID[2];
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	3308      	adds	r3, #8
 8006244:	681a      	ldr	r2, [r3, #0]
 8006246:	697b      	ldr	r3, [r7, #20]
 8006248:	60da      	str	r2, [r3, #12]
    pid->max_out = max_out;
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	68ba      	ldr	r2, [r7, #8]
 800624e:	611a      	str	r2, [r3, #16]
    pid->max_iout = max_iout;
 8006250:	697b      	ldr	r3, [r7, #20]
 8006252:	687a      	ldr	r2, [r7, #4]
 8006254:	615a      	str	r2, [r3, #20]
    pid->Dbuf[0] = pid->Dbuf[1] = pid->Dbuf[2] = 0.0f;
 8006256:	697b      	ldr	r3, [r7, #20]
 8006258:	f04f 0200 	mov.w	r2, #0
 800625c:	639a      	str	r2, [r3, #56]	; 0x38
 800625e:	697b      	ldr	r3, [r7, #20]
 8006260:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006262:	697b      	ldr	r3, [r7, #20]
 8006264:	635a      	str	r2, [r3, #52]	; 0x34
 8006266:	697b      	ldr	r3, [r7, #20]
 8006268:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800626a:	697b      	ldr	r3, [r7, #20]
 800626c:	631a      	str	r2, [r3, #48]	; 0x30
    pid->error[0] = pid->error[1] = pid->error[2] = pid->Pout = pid->Iout = pid->Dout = pid->out = 0.0f;
 800626e:	697b      	ldr	r3, [r7, #20]
 8006270:	f04f 0200 	mov.w	r2, #0
 8006274:	621a      	str	r2, [r3, #32]
 8006276:	697b      	ldr	r3, [r7, #20]
 8006278:	6a1a      	ldr	r2, [r3, #32]
 800627a:	697b      	ldr	r3, [r7, #20]
 800627c:	62da      	str	r2, [r3, #44]	; 0x2c
 800627e:	697b      	ldr	r3, [r7, #20]
 8006280:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006282:	697b      	ldr	r3, [r7, #20]
 8006284:	629a      	str	r2, [r3, #40]	; 0x28
 8006286:	697b      	ldr	r3, [r7, #20]
 8006288:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800628a:	697b      	ldr	r3, [r7, #20]
 800628c:	625a      	str	r2, [r3, #36]	; 0x24
 800628e:	697b      	ldr	r3, [r7, #20]
 8006290:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006292:	697b      	ldr	r3, [r7, #20]
 8006294:	645a      	str	r2, [r3, #68]	; 0x44
 8006296:	697b      	ldr	r3, [r7, #20]
 8006298:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800629a:	697b      	ldr	r3, [r7, #20]
 800629c:	641a      	str	r2, [r3, #64]	; 0x40
 800629e:	697b      	ldr	r3, [r7, #20]
 80062a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80062a2:	697b      	ldr	r3, [r7, #20]
 80062a4:	63da      	str	r2, [r3, #60]	; 0x3c
 80062a6:	e000      	b.n	80062aa <_Z8PID_initP12pid_type_defhPKfff+0xa4>
        return;
 80062a8:	bf00      	nop
}
 80062aa:	371c      	adds	r7, #28
 80062ac:	46bd      	mov	sp, r7
 80062ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b2:	4770      	bx	lr

080062b4 <_Z8PID_calcP12pid_type_defff>:
  * @param[in]      ref: 反馈数据
  * @param[in]      set: 设定值
  * @retval         pid输出
  */
float PID_calc(pid_type_def *pid, float ref, float set)
{
 80062b4:	b480      	push	{r7}
 80062b6:	b085      	sub	sp, #20
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	60f8      	str	r0, [r7, #12]
 80062bc:	ed87 0a02 	vstr	s0, [r7, #8]
 80062c0:	edc7 0a01 	vstr	s1, [r7, #4]
    if (pid == NULL)
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d102      	bne.n	80062d0 <_Z8PID_calcP12pid_type_defff+0x1c>
    {
        return 0.0f;
 80062ca:	f04f 0300 	mov.w	r3, #0
 80062ce:	e130      	b.n	8006532 <_Z8PID_calcP12pid_type_defff+0x27e>
    }

    pid->error[2] = pid->error[1];
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	645a      	str	r2, [r3, #68]	; 0x44
    pid->error[1] = pid->error[0];
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	641a      	str	r2, [r3, #64]	; 0x40
    pid->set = set;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	687a      	ldr	r2, [r7, #4]
 80062e4:	619a      	str	r2, [r3, #24]
    pid->fdb = ref;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	68ba      	ldr	r2, [r7, #8]
 80062ea:	61da      	str	r2, [r3, #28]
    pid->error[0] = set - ref;
 80062ec:	ed97 7a01 	vldr	s14, [r7, #4]
 80062f0:	edd7 7a02 	vldr	s15, [r7, #8]
 80062f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
    if (pid->mode == PID_POSITION)
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	781b      	ldrb	r3, [r3, #0]
 8006302:	2b00      	cmp	r3, #0
 8006304:	f040 8095 	bne.w	8006432 <_Z8PID_calcP12pid_type_defff+0x17e>
    {
        pid->Pout = pid->Kp * pid->error[0];
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	ed93 7a01 	vldr	s14, [r3, #4]
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8006314:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
        pid->Iout += pid->Ki * pid->error[0];
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	edd3 6a02 	vldr	s13, [r3, #8]
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8006330:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006334:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
        pid->Dbuf[2] = pid->Dbuf[1];
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	639a      	str	r2, [r3, #56]	; 0x38
        pid->Dbuf[1] = pid->Dbuf[0];
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	635a      	str	r2, [r3, #52]	; 0x34
        pid->Dbuf[0] = (pid->error[0] - pid->error[1]);
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 800635a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
        pid->Dout = pid->Kd * pid->Dbuf[0];
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	ed93 7a03 	vldr	s14, [r3, #12]
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8006370:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
        LimitMax(pid->Iout, pid->max_iout);
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	edd3 7a05 	vldr	s15, [r3, #20]
 8006386:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800638a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800638e:	dd04      	ble.n	800639a <_Z8PID_calcP12pid_type_defff+0xe6>
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	695a      	ldr	r2, [r3, #20]
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	629a      	str	r2, [r3, #40]	; 0x28
 8006398:	e014      	b.n	80063c4 <_Z8PID_calcP12pid_type_defff+0x110>
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	edd3 7a05 	vldr	s15, [r3, #20]
 80063a6:	eef1 7a67 	vneg.f32	s15, s15
 80063aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80063ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063b2:	d507      	bpl.n	80063c4 <_Z8PID_calcP12pid_type_defff+0x110>
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	edd3 7a05 	vldr	s15, [r3, #20]
 80063ba:	eef1 7a67 	vneg.f32	s15, s15
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
        pid->out = pid->Pout + pid->Iout + pid->Dout;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80063d0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80063da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	edc3 7a08 	vstr	s15, [r3, #32]
        LimitMax(pid->out, pid->max_out);
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	ed93 7a08 	vldr	s14, [r3, #32]
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	edd3 7a04 	vldr	s15, [r3, #16]
 80063f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80063f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063f8:	dd04      	ble.n	8006404 <_Z8PID_calcP12pid_type_defff+0x150>
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	691a      	ldr	r2, [r3, #16]
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	621a      	str	r2, [r3, #32]
 8006402:	e094      	b.n	800652e <_Z8PID_calcP12pid_type_defff+0x27a>
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	ed93 7a08 	vldr	s14, [r3, #32]
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	edd3 7a04 	vldr	s15, [r3, #16]
 8006410:	eef1 7a67 	vneg.f32	s15, s15
 8006414:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006418:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800641c:	f140 8087 	bpl.w	800652e <_Z8PID_calcP12pid_type_defff+0x27a>
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	edd3 7a04 	vldr	s15, [r3, #16]
 8006426:	eef1 7a67 	vneg.f32	s15, s15
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	edc3 7a08 	vstr	s15, [r3, #32]
 8006430:	e07d      	b.n	800652e <_Z8PID_calcP12pid_type_defff+0x27a>
    }
    else if (pid->mode == PID_DELTA)
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	781b      	ldrb	r3, [r3, #0]
 8006436:	2b01      	cmp	r3, #1
 8006438:	d179      	bne.n	800652e <_Z8PID_calcP12pid_type_defff+0x27a>
    {
        pid->Pout = pid->Kp * (pid->error[0] - pid->error[1]);
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	ed93 7a01 	vldr	s14, [r3, #4]
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 800644c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8006450:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
        pid->Iout = pid->Ki * pid->error[0];
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	ed93 7a02 	vldr	s14, [r3, #8]
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8006466:	ee67 7a27 	vmul.f32	s15, s14, s15
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
        pid->Dbuf[2] = pid->Dbuf[1];
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	639a      	str	r2, [r3, #56]	; 0x38
        pid->Dbuf[1] = pid->Dbuf[0];
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	635a      	str	r2, [r3, #52]	; 0x34
        pid->Dbuf[0] = (pid->error[0] - 2.0f * pid->error[1] + pid->error[2]);
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 800648c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006490:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800649a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
        pid->Dout = pid->Kd * pid->Dbuf[0];
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	ed93 7a03 	vldr	s14, [r3, #12]
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80064b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
        pid->out += pid->Pout + pid->Iout + pid->Dout;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	ed93 7a08 	vldr	s14, [r3, #32]
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80064cc:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80064d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80064da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	edc3 7a08 	vstr	s15, [r3, #32]
        LimitMax(pid->out, pid->max_out);
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	ed93 7a08 	vldr	s14, [r3, #32]
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	edd3 7a04 	vldr	s15, [r3, #16]
 80064f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80064f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064f8:	dd04      	ble.n	8006504 <_Z8PID_calcP12pid_type_defff+0x250>
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	691a      	ldr	r2, [r3, #16]
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	621a      	str	r2, [r3, #32]
 8006502:	e014      	b.n	800652e <_Z8PID_calcP12pid_type_defff+0x27a>
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	ed93 7a08 	vldr	s14, [r3, #32]
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	edd3 7a04 	vldr	s15, [r3, #16]
 8006510:	eef1 7a67 	vneg.f32	s15, s15
 8006514:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006518:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800651c:	d507      	bpl.n	800652e <_Z8PID_calcP12pid_type_defff+0x27a>
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	edd3 7a04 	vldr	s15, [r3, #16]
 8006524:	eef1 7a67 	vneg.f32	s15, s15
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	edc3 7a08 	vstr	s15, [r3, #32]
    }
    return pid->out;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	6a1b      	ldr	r3, [r3, #32]
}
 8006532:	ee07 3a90 	vmov	s15, r3
 8006536:	eeb0 0a67 	vmov.f32	s0, s15
 800653a:	3714      	adds	r7, #20
 800653c:	46bd      	mov	sp, r7
 800653e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006542:	4770      	bx	lr

08006544 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b082      	sub	sp, #8
 8006548:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800654a:	2300      	movs	r3, #0
 800654c:	607b      	str	r3, [r7, #4]
 800654e:	4b12      	ldr	r3, [pc, #72]	; (8006598 <HAL_MspInit+0x54>)
 8006550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006552:	4a11      	ldr	r2, [pc, #68]	; (8006598 <HAL_MspInit+0x54>)
 8006554:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006558:	6453      	str	r3, [r2, #68]	; 0x44
 800655a:	4b0f      	ldr	r3, [pc, #60]	; (8006598 <HAL_MspInit+0x54>)
 800655c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800655e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006562:	607b      	str	r3, [r7, #4]
 8006564:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006566:	2300      	movs	r3, #0
 8006568:	603b      	str	r3, [r7, #0]
 800656a:	4b0b      	ldr	r3, [pc, #44]	; (8006598 <HAL_MspInit+0x54>)
 800656c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800656e:	4a0a      	ldr	r2, [pc, #40]	; (8006598 <HAL_MspInit+0x54>)
 8006570:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006574:	6413      	str	r3, [r2, #64]	; 0x40
 8006576:	4b08      	ldr	r3, [pc, #32]	; (8006598 <HAL_MspInit+0x54>)
 8006578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800657a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800657e:	603b      	str	r3, [r7, #0]
 8006580:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8006582:	2200      	movs	r2, #0
 8006584:	210f      	movs	r1, #15
 8006586:	f06f 0001 	mvn.w	r0, #1
 800658a:	f001 fa99 	bl	8007ac0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800658e:	bf00      	nop
 8006590:	3708      	adds	r7, #8
 8006592:	46bd      	mov	sp, r7
 8006594:	bd80      	pop	{r7, pc}
 8006596:	bf00      	nop
 8006598:	40023800 	.word	0x40023800

0800659c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b08c      	sub	sp, #48	; 0x30
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80065a4:	f107 031c 	add.w	r3, r7, #28
 80065a8:	2200      	movs	r2, #0
 80065aa:	601a      	str	r2, [r3, #0]
 80065ac:	605a      	str	r2, [r3, #4]
 80065ae:	609a      	str	r2, [r3, #8]
 80065b0:	60da      	str	r2, [r3, #12]
 80065b2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4a2e      	ldr	r2, [pc, #184]	; (8006674 <HAL_ADC_MspInit+0xd8>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d128      	bne.n	8006610 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80065be:	2300      	movs	r3, #0
 80065c0:	61bb      	str	r3, [r7, #24]
 80065c2:	4b2d      	ldr	r3, [pc, #180]	; (8006678 <HAL_ADC_MspInit+0xdc>)
 80065c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065c6:	4a2c      	ldr	r2, [pc, #176]	; (8006678 <HAL_ADC_MspInit+0xdc>)
 80065c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065cc:	6453      	str	r3, [r2, #68]	; 0x44
 80065ce:	4b2a      	ldr	r3, [pc, #168]	; (8006678 <HAL_ADC_MspInit+0xdc>)
 80065d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065d6:	61bb      	str	r3, [r7, #24]
 80065d8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80065da:	2300      	movs	r3, #0
 80065dc:	617b      	str	r3, [r7, #20]
 80065de:	4b26      	ldr	r3, [pc, #152]	; (8006678 <HAL_ADC_MspInit+0xdc>)
 80065e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065e2:	4a25      	ldr	r2, [pc, #148]	; (8006678 <HAL_ADC_MspInit+0xdc>)
 80065e4:	f043 0304 	orr.w	r3, r3, #4
 80065e8:	6313      	str	r3, [r2, #48]	; 0x30
 80065ea:	4b23      	ldr	r3, [pc, #140]	; (8006678 <HAL_ADC_MspInit+0xdc>)
 80065ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065ee:	f003 0304 	and.w	r3, r3, #4
 80065f2:	617b      	str	r3, [r7, #20]
 80065f4:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80065f6:	2301      	movs	r3, #1
 80065f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80065fa:	2303      	movs	r3, #3
 80065fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065fe:	2300      	movs	r3, #0
 8006600:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006602:	f107 031c 	add.w	r3, r7, #28
 8006606:	4619      	mov	r1, r3
 8006608:	481c      	ldr	r0, [pc, #112]	; (800667c <HAL_ADC_MspInit+0xe0>)
 800660a:	f001 fe85 	bl	8008318 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800660e:	e02c      	b.n	800666a <HAL_ADC_MspInit+0xce>
  else if(hadc->Instance==ADC2)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	4a1a      	ldr	r2, [pc, #104]	; (8006680 <HAL_ADC_MspInit+0xe4>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d127      	bne.n	800666a <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800661a:	2300      	movs	r3, #0
 800661c:	613b      	str	r3, [r7, #16]
 800661e:	4b16      	ldr	r3, [pc, #88]	; (8006678 <HAL_ADC_MspInit+0xdc>)
 8006620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006622:	4a15      	ldr	r2, [pc, #84]	; (8006678 <HAL_ADC_MspInit+0xdc>)
 8006624:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006628:	6453      	str	r3, [r2, #68]	; 0x44
 800662a:	4b13      	ldr	r3, [pc, #76]	; (8006678 <HAL_ADC_MspInit+0xdc>)
 800662c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800662e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006632:	613b      	str	r3, [r7, #16]
 8006634:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006636:	2300      	movs	r3, #0
 8006638:	60fb      	str	r3, [r7, #12]
 800663a:	4b0f      	ldr	r3, [pc, #60]	; (8006678 <HAL_ADC_MspInit+0xdc>)
 800663c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800663e:	4a0e      	ldr	r2, [pc, #56]	; (8006678 <HAL_ADC_MspInit+0xdc>)
 8006640:	f043 0301 	orr.w	r3, r3, #1
 8006644:	6313      	str	r3, [r2, #48]	; 0x30
 8006646:	4b0c      	ldr	r3, [pc, #48]	; (8006678 <HAL_ADC_MspInit+0xdc>)
 8006648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800664a:	f003 0301 	and.w	r3, r3, #1
 800664e:	60fb      	str	r3, [r7, #12]
 8006650:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8006652:	2301      	movs	r3, #1
 8006654:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006656:	2303      	movs	r3, #3
 8006658:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800665a:	2300      	movs	r3, #0
 800665c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800665e:	f107 031c 	add.w	r3, r7, #28
 8006662:	4619      	mov	r1, r3
 8006664:	4807      	ldr	r0, [pc, #28]	; (8006684 <HAL_ADC_MspInit+0xe8>)
 8006666:	f001 fe57 	bl	8008318 <HAL_GPIO_Init>
}
 800666a:	bf00      	nop
 800666c:	3730      	adds	r7, #48	; 0x30
 800666e:	46bd      	mov	sp, r7
 8006670:	bd80      	pop	{r7, pc}
 8006672:	bf00      	nop
 8006674:	40012000 	.word	0x40012000
 8006678:	40023800 	.word	0x40023800
 800667c:	40020800 	.word	0x40020800
 8006680:	40012100 	.word	0x40012100
 8006684:	40020000 	.word	0x40020000

08006688 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b08a      	sub	sp, #40	; 0x28
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006690:	f107 0314 	add.w	r3, r7, #20
 8006694:	2200      	movs	r2, #0
 8006696:	601a      	str	r2, [r3, #0]
 8006698:	605a      	str	r2, [r3, #4]
 800669a:	609a      	str	r2, [r3, #8]
 800669c:	60da      	str	r2, [r3, #12]
 800669e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	4a19      	ldr	r2, [pc, #100]	; (800670c <HAL_I2C_MspInit+0x84>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d12c      	bne.n	8006704 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80066aa:	2300      	movs	r3, #0
 80066ac:	613b      	str	r3, [r7, #16]
 80066ae:	4b18      	ldr	r3, [pc, #96]	; (8006710 <HAL_I2C_MspInit+0x88>)
 80066b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066b2:	4a17      	ldr	r2, [pc, #92]	; (8006710 <HAL_I2C_MspInit+0x88>)
 80066b4:	f043 0302 	orr.w	r3, r3, #2
 80066b8:	6313      	str	r3, [r2, #48]	; 0x30
 80066ba:	4b15      	ldr	r3, [pc, #84]	; (8006710 <HAL_I2C_MspInit+0x88>)
 80066bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066be:	f003 0302 	and.w	r3, r3, #2
 80066c2:	613b      	str	r3, [r7, #16]
 80066c4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80066c6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80066ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80066cc:	2312      	movs	r3, #18
 80066ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066d0:	2300      	movs	r3, #0
 80066d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80066d4:	2303      	movs	r3, #3
 80066d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80066d8:	2304      	movs	r3, #4
 80066da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80066dc:	f107 0314 	add.w	r3, r7, #20
 80066e0:	4619      	mov	r1, r3
 80066e2:	480c      	ldr	r0, [pc, #48]	; (8006714 <HAL_I2C_MspInit+0x8c>)
 80066e4:	f001 fe18 	bl	8008318 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80066e8:	2300      	movs	r3, #0
 80066ea:	60fb      	str	r3, [r7, #12]
 80066ec:	4b08      	ldr	r3, [pc, #32]	; (8006710 <HAL_I2C_MspInit+0x88>)
 80066ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066f0:	4a07      	ldr	r2, [pc, #28]	; (8006710 <HAL_I2C_MspInit+0x88>)
 80066f2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80066f6:	6413      	str	r3, [r2, #64]	; 0x40
 80066f8:	4b05      	ldr	r3, [pc, #20]	; (8006710 <HAL_I2C_MspInit+0x88>)
 80066fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006700:	60fb      	str	r3, [r7, #12]
 8006702:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8006704:	bf00      	nop
 8006706:	3728      	adds	r7, #40	; 0x28
 8006708:	46bd      	mov	sp, r7
 800670a:	bd80      	pop	{r7, pc}
 800670c:	40005400 	.word	0x40005400
 8006710:	40023800 	.word	0x40023800
 8006714:	40020400 	.word	0x40020400

08006718 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b08c      	sub	sp, #48	; 0x30
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006720:	f107 031c 	add.w	r3, r7, #28
 8006724:	2200      	movs	r2, #0
 8006726:	601a      	str	r2, [r3, #0]
 8006728:	605a      	str	r2, [r3, #4]
 800672a:	609a      	str	r2, [r3, #8]
 800672c:	60da      	str	r2, [r3, #12]
 800672e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	4a32      	ldr	r2, [pc, #200]	; (8006800 <HAL_TIM_Base_MspInit+0xe8>)
 8006736:	4293      	cmp	r3, r2
 8006738:	d12d      	bne.n	8006796 <HAL_TIM_Base_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800673a:	2300      	movs	r3, #0
 800673c:	61bb      	str	r3, [r7, #24]
 800673e:	4b31      	ldr	r3, [pc, #196]	; (8006804 <HAL_TIM_Base_MspInit+0xec>)
 8006740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006742:	4a30      	ldr	r2, [pc, #192]	; (8006804 <HAL_TIM_Base_MspInit+0xec>)
 8006744:	f043 0301 	orr.w	r3, r3, #1
 8006748:	6453      	str	r3, [r2, #68]	; 0x44
 800674a:	4b2e      	ldr	r3, [pc, #184]	; (8006804 <HAL_TIM_Base_MspInit+0xec>)
 800674c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800674e:	f003 0301 	and.w	r3, r3, #1
 8006752:	61bb      	str	r3, [r7, #24]
 8006754:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006756:	2300      	movs	r3, #0
 8006758:	617b      	str	r3, [r7, #20]
 800675a:	4b2a      	ldr	r3, [pc, #168]	; (8006804 <HAL_TIM_Base_MspInit+0xec>)
 800675c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800675e:	4a29      	ldr	r2, [pc, #164]	; (8006804 <HAL_TIM_Base_MspInit+0xec>)
 8006760:	f043 0310 	orr.w	r3, r3, #16
 8006764:	6313      	str	r3, [r2, #48]	; 0x30
 8006766:	4b27      	ldr	r3, [pc, #156]	; (8006804 <HAL_TIM_Base_MspInit+0xec>)
 8006768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800676a:	f003 0310 	and.w	r3, r3, #16
 800676e:	617b      	str	r3, [r7, #20]
 8006770:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = Servo_Pin;
 8006772:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006776:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006778:	2302      	movs	r3, #2
 800677a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800677c:	2300      	movs	r3, #0
 800677e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006780:	2300      	movs	r3, #0
 8006782:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8006784:	2301      	movs	r3, #1
 8006786:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(Servo_GPIO_Port, &GPIO_InitStruct);
 8006788:	f107 031c 	add.w	r3, r7, #28
 800678c:	4619      	mov	r1, r3
 800678e:	481e      	ldr	r0, [pc, #120]	; (8006808 <HAL_TIM_Base_MspInit+0xf0>)
 8006790:	f001 fdc2 	bl	8008318 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8006794:	e030      	b.n	80067f8 <HAL_TIM_Base_MspInit+0xe0>
  else if(htim_base->Instance==TIM8)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4a1c      	ldr	r2, [pc, #112]	; (800680c <HAL_TIM_Base_MspInit+0xf4>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d12b      	bne.n	80067f8 <HAL_TIM_Base_MspInit+0xe0>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80067a0:	2300      	movs	r3, #0
 80067a2:	613b      	str	r3, [r7, #16]
 80067a4:	4b17      	ldr	r3, [pc, #92]	; (8006804 <HAL_TIM_Base_MspInit+0xec>)
 80067a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067a8:	4a16      	ldr	r2, [pc, #88]	; (8006804 <HAL_TIM_Base_MspInit+0xec>)
 80067aa:	f043 0302 	orr.w	r3, r3, #2
 80067ae:	6453      	str	r3, [r2, #68]	; 0x44
 80067b0:	4b14      	ldr	r3, [pc, #80]	; (8006804 <HAL_TIM_Base_MspInit+0xec>)
 80067b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067b4:	f003 0302 	and.w	r3, r3, #2
 80067b8:	613b      	str	r3, [r7, #16]
 80067ba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80067bc:	2300      	movs	r3, #0
 80067be:	60fb      	str	r3, [r7, #12]
 80067c0:	4b10      	ldr	r3, [pc, #64]	; (8006804 <HAL_TIM_Base_MspInit+0xec>)
 80067c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067c4:	4a0f      	ldr	r2, [pc, #60]	; (8006804 <HAL_TIM_Base_MspInit+0xec>)
 80067c6:	f043 0304 	orr.w	r3, r3, #4
 80067ca:	6313      	str	r3, [r2, #48]	; 0x30
 80067cc:	4b0d      	ldr	r3, [pc, #52]	; (8006804 <HAL_TIM_Base_MspInit+0xec>)
 80067ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067d0:	f003 0304 	and.w	r3, r3, #4
 80067d4:	60fb      	str	r3, [r7, #12]
 80067d6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWMA_Pin|PWMB_Pin;
 80067d8:	23c0      	movs	r3, #192	; 0xc0
 80067da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80067dc:	2302      	movs	r3, #2
 80067de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80067e0:	2300      	movs	r3, #0
 80067e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80067e4:	2300      	movs	r3, #0
 80067e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80067e8:	2303      	movs	r3, #3
 80067ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80067ec:	f107 031c 	add.w	r3, r7, #28
 80067f0:	4619      	mov	r1, r3
 80067f2:	4807      	ldr	r0, [pc, #28]	; (8006810 <HAL_TIM_Base_MspInit+0xf8>)
 80067f4:	f001 fd90 	bl	8008318 <HAL_GPIO_Init>
}
 80067f8:	bf00      	nop
 80067fa:	3730      	adds	r7, #48	; 0x30
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bd80      	pop	{r7, pc}
 8006800:	40010000 	.word	0x40010000
 8006804:	40023800 	.word	0x40023800
 8006808:	40021000 	.word	0x40021000
 800680c:	40010400 	.word	0x40010400
 8006810:	40020800 	.word	0x40020800

08006814 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b08c      	sub	sp, #48	; 0x30
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800681c:	f107 031c 	add.w	r3, r7, #28
 8006820:	2200      	movs	r2, #0
 8006822:	601a      	str	r2, [r3, #0]
 8006824:	605a      	str	r2, [r3, #4]
 8006826:	609a      	str	r2, [r3, #8]
 8006828:	60da      	str	r2, [r3, #12]
 800682a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006834:	d14b      	bne.n	80068ce <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8006836:	2300      	movs	r3, #0
 8006838:	61bb      	str	r3, [r7, #24]
 800683a:	4b3f      	ldr	r3, [pc, #252]	; (8006938 <HAL_TIM_Encoder_MspInit+0x124>)
 800683c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800683e:	4a3e      	ldr	r2, [pc, #248]	; (8006938 <HAL_TIM_Encoder_MspInit+0x124>)
 8006840:	f043 0301 	orr.w	r3, r3, #1
 8006844:	6413      	str	r3, [r2, #64]	; 0x40
 8006846:	4b3c      	ldr	r3, [pc, #240]	; (8006938 <HAL_TIM_Encoder_MspInit+0x124>)
 8006848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800684a:	f003 0301 	and.w	r3, r3, #1
 800684e:	61bb      	str	r3, [r7, #24]
 8006850:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006852:	2300      	movs	r3, #0
 8006854:	617b      	str	r3, [r7, #20]
 8006856:	4b38      	ldr	r3, [pc, #224]	; (8006938 <HAL_TIM_Encoder_MspInit+0x124>)
 8006858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800685a:	4a37      	ldr	r2, [pc, #220]	; (8006938 <HAL_TIM_Encoder_MspInit+0x124>)
 800685c:	f043 0301 	orr.w	r3, r3, #1
 8006860:	6313      	str	r3, [r2, #48]	; 0x30
 8006862:	4b35      	ldr	r3, [pc, #212]	; (8006938 <HAL_TIM_Encoder_MspInit+0x124>)
 8006864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006866:	f003 0301 	and.w	r3, r3, #1
 800686a:	617b      	str	r3, [r7, #20]
 800686c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800686e:	2300      	movs	r3, #0
 8006870:	613b      	str	r3, [r7, #16]
 8006872:	4b31      	ldr	r3, [pc, #196]	; (8006938 <HAL_TIM_Encoder_MspInit+0x124>)
 8006874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006876:	4a30      	ldr	r2, [pc, #192]	; (8006938 <HAL_TIM_Encoder_MspInit+0x124>)
 8006878:	f043 0302 	orr.w	r3, r3, #2
 800687c:	6313      	str	r3, [r2, #48]	; 0x30
 800687e:	4b2e      	ldr	r3, [pc, #184]	; (8006938 <HAL_TIM_Encoder_MspInit+0x124>)
 8006880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006882:	f003 0302 	and.w	r3, r3, #2
 8006886:	613b      	str	r3, [r7, #16]
 8006888:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800688a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800688e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006890:	2302      	movs	r3, #2
 8006892:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006894:	2300      	movs	r3, #0
 8006896:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006898:	2300      	movs	r3, #0
 800689a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800689c:	2301      	movs	r3, #1
 800689e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80068a0:	f107 031c 	add.w	r3, r7, #28
 80068a4:	4619      	mov	r1, r3
 80068a6:	4825      	ldr	r0, [pc, #148]	; (800693c <HAL_TIM_Encoder_MspInit+0x128>)
 80068a8:	f001 fd36 	bl	8008318 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80068ac:	2308      	movs	r3, #8
 80068ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80068b0:	2302      	movs	r3, #2
 80068b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068b4:	2300      	movs	r3, #0
 80068b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80068b8:	2300      	movs	r3, #0
 80068ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80068bc:	2301      	movs	r3, #1
 80068be:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80068c0:	f107 031c 	add.w	r3, r7, #28
 80068c4:	4619      	mov	r1, r3
 80068c6:	481e      	ldr	r0, [pc, #120]	; (8006940 <HAL_TIM_Encoder_MspInit+0x12c>)
 80068c8:	f001 fd26 	bl	8008318 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80068cc:	e030      	b.n	8006930 <HAL_TIM_Encoder_MspInit+0x11c>
  else if(htim_encoder->Instance==TIM3)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4a1c      	ldr	r2, [pc, #112]	; (8006944 <HAL_TIM_Encoder_MspInit+0x130>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d12b      	bne.n	8006930 <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80068d8:	2300      	movs	r3, #0
 80068da:	60fb      	str	r3, [r7, #12]
 80068dc:	4b16      	ldr	r3, [pc, #88]	; (8006938 <HAL_TIM_Encoder_MspInit+0x124>)
 80068de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068e0:	4a15      	ldr	r2, [pc, #84]	; (8006938 <HAL_TIM_Encoder_MspInit+0x124>)
 80068e2:	f043 0302 	orr.w	r3, r3, #2
 80068e6:	6413      	str	r3, [r2, #64]	; 0x40
 80068e8:	4b13      	ldr	r3, [pc, #76]	; (8006938 <HAL_TIM_Encoder_MspInit+0x124>)
 80068ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ec:	f003 0302 	and.w	r3, r3, #2
 80068f0:	60fb      	str	r3, [r7, #12]
 80068f2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80068f4:	2300      	movs	r3, #0
 80068f6:	60bb      	str	r3, [r7, #8]
 80068f8:	4b0f      	ldr	r3, [pc, #60]	; (8006938 <HAL_TIM_Encoder_MspInit+0x124>)
 80068fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068fc:	4a0e      	ldr	r2, [pc, #56]	; (8006938 <HAL_TIM_Encoder_MspInit+0x124>)
 80068fe:	f043 0301 	orr.w	r3, r3, #1
 8006902:	6313      	str	r3, [r2, #48]	; 0x30
 8006904:	4b0c      	ldr	r3, [pc, #48]	; (8006938 <HAL_TIM_Encoder_MspInit+0x124>)
 8006906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006908:	f003 0301 	and.w	r3, r3, #1
 800690c:	60bb      	str	r3, [r7, #8]
 800690e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006910:	23c0      	movs	r3, #192	; 0xc0
 8006912:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006914:	2302      	movs	r3, #2
 8006916:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006918:	2300      	movs	r3, #0
 800691a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800691c:	2300      	movs	r3, #0
 800691e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8006920:	2302      	movs	r3, #2
 8006922:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006924:	f107 031c 	add.w	r3, r7, #28
 8006928:	4619      	mov	r1, r3
 800692a:	4804      	ldr	r0, [pc, #16]	; (800693c <HAL_TIM_Encoder_MspInit+0x128>)
 800692c:	f001 fcf4 	bl	8008318 <HAL_GPIO_Init>
}
 8006930:	bf00      	nop
 8006932:	3730      	adds	r7, #48	; 0x30
 8006934:	46bd      	mov	sp, r7
 8006936:	bd80      	pop	{r7, pc}
 8006938:	40023800 	.word	0x40023800
 800693c:	40020000 	.word	0x40020000
 8006940:	40020400 	.word	0x40020400
 8006944:	40000400 	.word	0x40000400

08006948 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b088      	sub	sp, #32
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006950:	f107 030c 	add.w	r3, r7, #12
 8006954:	2200      	movs	r2, #0
 8006956:	601a      	str	r2, [r3, #0]
 8006958:	605a      	str	r2, [r3, #4]
 800695a:	609a      	str	r2, [r3, #8]
 800695c:	60da      	str	r2, [r3, #12]
 800695e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	4a12      	ldr	r2, [pc, #72]	; (80069b0 <HAL_TIM_MspPostInit+0x68>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d11e      	bne.n	80069a8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800696a:	2300      	movs	r3, #0
 800696c:	60bb      	str	r3, [r7, #8]
 800696e:	4b11      	ldr	r3, [pc, #68]	; (80069b4 <HAL_TIM_MspPostInit+0x6c>)
 8006970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006972:	4a10      	ldr	r2, [pc, #64]	; (80069b4 <HAL_TIM_MspPostInit+0x6c>)
 8006974:	f043 0310 	orr.w	r3, r3, #16
 8006978:	6313      	str	r3, [r2, #48]	; 0x30
 800697a:	4b0e      	ldr	r3, [pc, #56]	; (80069b4 <HAL_TIM_MspPostInit+0x6c>)
 800697c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800697e:	f003 0310 	and.w	r3, r3, #16
 8006982:	60bb      	str	r3, [r7, #8]
 8006984:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006986:	f44f 7300 	mov.w	r3, #512	; 0x200
 800698a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800698c:	2302      	movs	r3, #2
 800698e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006990:	2300      	movs	r3, #0
 8006992:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006994:	2300      	movs	r3, #0
 8006996:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8006998:	2301      	movs	r3, #1
 800699a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800699c:	f107 030c 	add.w	r3, r7, #12
 80069a0:	4619      	mov	r1, r3
 80069a2:	4805      	ldr	r0, [pc, #20]	; (80069b8 <HAL_TIM_MspPostInit+0x70>)
 80069a4:	f001 fcb8 	bl	8008318 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80069a8:	bf00      	nop
 80069aa:	3720      	adds	r7, #32
 80069ac:	46bd      	mov	sp, r7
 80069ae:	bd80      	pop	{r7, pc}
 80069b0:	40010000 	.word	0x40010000
 80069b4:	40023800 	.word	0x40023800
 80069b8:	40021000 	.word	0x40021000

080069bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b08a      	sub	sp, #40	; 0x28
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80069c4:	f107 0314 	add.w	r3, r7, #20
 80069c8:	2200      	movs	r2, #0
 80069ca:	601a      	str	r2, [r3, #0]
 80069cc:	605a      	str	r2, [r3, #4]
 80069ce:	609a      	str	r2, [r3, #8]
 80069d0:	60da      	str	r2, [r3, #12]
 80069d2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	4a5d      	ldr	r2, [pc, #372]	; (8006b50 <HAL_UART_MspInit+0x194>)
 80069da:	4293      	cmp	r3, r2
 80069dc:	f040 80b4 	bne.w	8006b48 <HAL_UART_MspInit+0x18c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80069e0:	2300      	movs	r3, #0
 80069e2:	613b      	str	r3, [r7, #16]
 80069e4:	4b5b      	ldr	r3, [pc, #364]	; (8006b54 <HAL_UART_MspInit+0x198>)
 80069e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069e8:	4a5a      	ldr	r2, [pc, #360]	; (8006b54 <HAL_UART_MspInit+0x198>)
 80069ea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80069ee:	6413      	str	r3, [r2, #64]	; 0x40
 80069f0:	4b58      	ldr	r3, [pc, #352]	; (8006b54 <HAL_UART_MspInit+0x198>)
 80069f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80069f8:	613b      	str	r3, [r7, #16]
 80069fa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80069fc:	2300      	movs	r3, #0
 80069fe:	60fb      	str	r3, [r7, #12]
 8006a00:	4b54      	ldr	r3, [pc, #336]	; (8006b54 <HAL_UART_MspInit+0x198>)
 8006a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a04:	4a53      	ldr	r2, [pc, #332]	; (8006b54 <HAL_UART_MspInit+0x198>)
 8006a06:	f043 0304 	orr.w	r3, r3, #4
 8006a0a:	6313      	str	r3, [r2, #48]	; 0x30
 8006a0c:	4b51      	ldr	r3, [pc, #324]	; (8006b54 <HAL_UART_MspInit+0x198>)
 8006a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a10:	f003 0304 	and.w	r3, r3, #4
 8006a14:	60fb      	str	r3, [r7, #12]
 8006a16:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8006a18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006a1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a1e:	2302      	movs	r3, #2
 8006a20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a22:	2300      	movs	r3, #0
 8006a24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006a26:	2302      	movs	r3, #2
 8006a28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8006a2a:	2307      	movs	r3, #7
 8006a2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006a2e:	f107 0314 	add.w	r3, r7, #20
 8006a32:	4619      	mov	r1, r3
 8006a34:	4848      	ldr	r0, [pc, #288]	; (8006b58 <HAL_UART_MspInit+0x19c>)
 8006a36:	f001 fc6f 	bl	8008318 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8006a3a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006a3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a40:	2302      	movs	r3, #2
 8006a42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8006a44:	2302      	movs	r3, #2
 8006a46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006a48:	2302      	movs	r3, #2
 8006a4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8006a4c:	2307      	movs	r3, #7
 8006a4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006a50:	f107 0314 	add.w	r3, r7, #20
 8006a54:	4619      	mov	r1, r3
 8006a56:	4840      	ldr	r0, [pc, #256]	; (8006b58 <HAL_UART_MspInit+0x19c>)
 8006a58:	f001 fc5e 	bl	8008318 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8006a5c:	4b3f      	ldr	r3, [pc, #252]	; (8006b5c <HAL_UART_MspInit+0x1a0>)
 8006a5e:	4a40      	ldr	r2, [pc, #256]	; (8006b60 <HAL_UART_MspInit+0x1a4>)
 8006a60:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8006a62:	4b3e      	ldr	r3, [pc, #248]	; (8006b5c <HAL_UART_MspInit+0x1a0>)
 8006a64:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006a68:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006a6a:	4b3c      	ldr	r3, [pc, #240]	; (8006b5c <HAL_UART_MspInit+0x1a0>)
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006a70:	4b3a      	ldr	r3, [pc, #232]	; (8006b5c <HAL_UART_MspInit+0x1a0>)
 8006a72:	2200      	movs	r2, #0
 8006a74:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006a76:	4b39      	ldr	r3, [pc, #228]	; (8006b5c <HAL_UART_MspInit+0x1a0>)
 8006a78:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006a7c:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006a7e:	4b37      	ldr	r3, [pc, #220]	; (8006b5c <HAL_UART_MspInit+0x1a0>)
 8006a80:	2200      	movs	r2, #0
 8006a82:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006a84:	4b35      	ldr	r3, [pc, #212]	; (8006b5c <HAL_UART_MspInit+0x1a0>)
 8006a86:	2200      	movs	r2, #0
 8006a88:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8006a8a:	4b34      	ldr	r3, [pc, #208]	; (8006b5c <HAL_UART_MspInit+0x1a0>)
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006a90:	4b32      	ldr	r3, [pc, #200]	; (8006b5c <HAL_UART_MspInit+0x1a0>)
 8006a92:	2200      	movs	r2, #0
 8006a94:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8006a96:	4b31      	ldr	r3, [pc, #196]	; (8006b5c <HAL_UART_MspInit+0x1a0>)
 8006a98:	2204      	movs	r2, #4
 8006a9a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_usart3_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8006a9c:	4b2f      	ldr	r3, [pc, #188]	; (8006b5c <HAL_UART_MspInit+0x1a0>)
 8006a9e:	2203      	movs	r2, #3
 8006aa0:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_usart3_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8006aa2:	4b2e      	ldr	r3, [pc, #184]	; (8006b5c <HAL_UART_MspInit+0x1a0>)
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_usart3_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8006aa8:	4b2c      	ldr	r3, [pc, #176]	; (8006b5c <HAL_UART_MspInit+0x1a0>)
 8006aaa:	2200      	movs	r2, #0
 8006aac:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8006aae:	482b      	ldr	r0, [pc, #172]	; (8006b5c <HAL_UART_MspInit+0x1a0>)
 8006ab0:	f001 f830 	bl	8007b14 <HAL_DMA_Init>
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d001      	beq.n	8006abe <HAL_UART_MspInit+0x102>
    {
      Error_Handler();
 8006aba:	f7ff fb9f 	bl	80061fc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	4a26      	ldr	r2, [pc, #152]	; (8006b5c <HAL_UART_MspInit+0x1a0>)
 8006ac2:	639a      	str	r2, [r3, #56]	; 0x38
 8006ac4:	4a25      	ldr	r2, [pc, #148]	; (8006b5c <HAL_UART_MspInit+0x1a0>)
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8006aca:	4b26      	ldr	r3, [pc, #152]	; (8006b64 <HAL_UART_MspInit+0x1a8>)
 8006acc:	4a26      	ldr	r2, [pc, #152]	; (8006b68 <HAL_UART_MspInit+0x1ac>)
 8006ace:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8006ad0:	4b24      	ldr	r3, [pc, #144]	; (8006b64 <HAL_UART_MspInit+0x1a8>)
 8006ad2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006ad6:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006ad8:	4b22      	ldr	r3, [pc, #136]	; (8006b64 <HAL_UART_MspInit+0x1a8>)
 8006ada:	2240      	movs	r2, #64	; 0x40
 8006adc:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006ade:	4b21      	ldr	r3, [pc, #132]	; (8006b64 <HAL_UART_MspInit+0x1a8>)
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006ae4:	4b1f      	ldr	r3, [pc, #124]	; (8006b64 <HAL_UART_MspInit+0x1a8>)
 8006ae6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006aea:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006aec:	4b1d      	ldr	r3, [pc, #116]	; (8006b64 <HAL_UART_MspInit+0x1a8>)
 8006aee:	2200      	movs	r2, #0
 8006af0:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006af2:	4b1c      	ldr	r3, [pc, #112]	; (8006b64 <HAL_UART_MspInit+0x1a8>)
 8006af4:	2200      	movs	r2, #0
 8006af6:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8006af8:	4b1a      	ldr	r3, [pc, #104]	; (8006b64 <HAL_UART_MspInit+0x1a8>)
 8006afa:	2200      	movs	r2, #0
 8006afc:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006afe:	4b19      	ldr	r3, [pc, #100]	; (8006b64 <HAL_UART_MspInit+0x1a8>)
 8006b00:	2200      	movs	r2, #0
 8006b02:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8006b04:	4b17      	ldr	r3, [pc, #92]	; (8006b64 <HAL_UART_MspInit+0x1a8>)
 8006b06:	2204      	movs	r2, #4
 8006b08:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_usart3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8006b0a:	4b16      	ldr	r3, [pc, #88]	; (8006b64 <HAL_UART_MspInit+0x1a8>)
 8006b0c:	2203      	movs	r2, #3
 8006b0e:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_usart3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8006b10:	4b14      	ldr	r3, [pc, #80]	; (8006b64 <HAL_UART_MspInit+0x1a8>)
 8006b12:	2200      	movs	r2, #0
 8006b14:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_usart3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8006b16:	4b13      	ldr	r3, [pc, #76]	; (8006b64 <HAL_UART_MspInit+0x1a8>)
 8006b18:	2200      	movs	r2, #0
 8006b1a:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8006b1c:	4811      	ldr	r0, [pc, #68]	; (8006b64 <HAL_UART_MspInit+0x1a8>)
 8006b1e:	f000 fff9 	bl	8007b14 <HAL_DMA_Init>
 8006b22:	4603      	mov	r3, r0
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d001      	beq.n	8006b2c <HAL_UART_MspInit+0x170>
    {
      Error_Handler();
 8006b28:	f7ff fb68 	bl	80061fc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	4a0d      	ldr	r2, [pc, #52]	; (8006b64 <HAL_UART_MspInit+0x1a8>)
 8006b30:	635a      	str	r2, [r3, #52]	; 0x34
 8006b32:	4a0c      	ldr	r2, [pc, #48]	; (8006b64 <HAL_UART_MspInit+0x1a8>)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8006b38:	2200      	movs	r2, #0
 8006b3a:	2105      	movs	r1, #5
 8006b3c:	2027      	movs	r0, #39	; 0x27
 8006b3e:	f000 ffbf 	bl	8007ac0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8006b42:	2027      	movs	r0, #39	; 0x27
 8006b44:	f000 ffd8 	bl	8007af8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8006b48:	bf00      	nop
 8006b4a:	3728      	adds	r7, #40	; 0x28
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	bd80      	pop	{r7, pc}
 8006b50:	40004800 	.word	0x40004800
 8006b54:	40023800 	.word	0x40023800
 8006b58:	40020800 	.word	0x40020800
 8006b5c:	20000b4c 	.word	0x20000b4c
 8006b60:	40026028 	.word	0x40026028
 8006b64:	20000bac 	.word	0x20000bac
 8006b68:	40026058 	.word	0x40026058

08006b6c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b08e      	sub	sp, #56	; 0x38
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8006b74:	2300      	movs	r3, #0
 8006b76:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8006b78:	2300      	movs	r3, #0
 8006b7a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	60fb      	str	r3, [r7, #12]
 8006b80:	4b33      	ldr	r3, [pc, #204]	; (8006c50 <HAL_InitTick+0xe4>)
 8006b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b84:	4a32      	ldr	r2, [pc, #200]	; (8006c50 <HAL_InitTick+0xe4>)
 8006b86:	f043 0320 	orr.w	r3, r3, #32
 8006b8a:	6413      	str	r3, [r2, #64]	; 0x40
 8006b8c:	4b30      	ldr	r3, [pc, #192]	; (8006c50 <HAL_InitTick+0xe4>)
 8006b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b90:	f003 0320 	and.w	r3, r3, #32
 8006b94:	60fb      	str	r3, [r7, #12]
 8006b96:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8006b98:	f107 0210 	add.w	r2, r7, #16
 8006b9c:	f107 0314 	add.w	r3, r7, #20
 8006ba0:	4611      	mov	r1, r2
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	f003 fb4e 	bl	800a244 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8006ba8:	6a3b      	ldr	r3, [r7, #32]
 8006baa:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8006bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d103      	bne.n	8006bba <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8006bb2:	f003 fb1f 	bl	800a1f4 <HAL_RCC_GetPCLK1Freq>
 8006bb6:	6378      	str	r0, [r7, #52]	; 0x34
 8006bb8:	e004      	b.n	8006bc4 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8006bba:	f003 fb1b 	bl	800a1f4 <HAL_RCC_GetPCLK1Freq>
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	005b      	lsls	r3, r3, #1
 8006bc2:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8006bc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bc6:	4a23      	ldr	r2, [pc, #140]	; (8006c54 <HAL_InitTick+0xe8>)
 8006bc8:	fba2 2303 	umull	r2, r3, r2, r3
 8006bcc:	0c9b      	lsrs	r3, r3, #18
 8006bce:	3b01      	subs	r3, #1
 8006bd0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8006bd2:	4b21      	ldr	r3, [pc, #132]	; (8006c58 <HAL_InitTick+0xec>)
 8006bd4:	4a21      	ldr	r2, [pc, #132]	; (8006c5c <HAL_InitTick+0xf0>)
 8006bd6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8006bd8:	4b1f      	ldr	r3, [pc, #124]	; (8006c58 <HAL_InitTick+0xec>)
 8006bda:	f240 32e7 	movw	r2, #999	; 0x3e7
 8006bde:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8006be0:	4a1d      	ldr	r2, [pc, #116]	; (8006c58 <HAL_InitTick+0xec>)
 8006be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006be4:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8006be6:	4b1c      	ldr	r3, [pc, #112]	; (8006c58 <HAL_InitTick+0xec>)
 8006be8:	2200      	movs	r2, #0
 8006bea:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006bec:	4b1a      	ldr	r3, [pc, #104]	; (8006c58 <HAL_InitTick+0xec>)
 8006bee:	2200      	movs	r2, #0
 8006bf0:	609a      	str	r2, [r3, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006bf2:	4b19      	ldr	r3, [pc, #100]	; (8006c58 <HAL_InitTick+0xec>)
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim7);
 8006bf8:	4817      	ldr	r0, [pc, #92]	; (8006c58 <HAL_InitTick+0xec>)
 8006bfa:	f003 fb55 	bl	800a2a8 <HAL_TIM_Base_Init>
 8006bfe:	4603      	mov	r3, r0
 8006c00:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8006c04:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d11b      	bne.n	8006c44 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 8006c0c:	4812      	ldr	r0, [pc, #72]	; (8006c58 <HAL_InitTick+0xec>)
 8006c0e:	f003 fb9b 	bl	800a348 <HAL_TIM_Base_Start_IT>
 8006c12:	4603      	mov	r3, r0
 8006c14:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8006c18:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d111      	bne.n	8006c44 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8006c20:	2037      	movs	r0, #55	; 0x37
 8006c22:	f000 ff69 	bl	8007af8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2b0f      	cmp	r3, #15
 8006c2a:	d808      	bhi.n	8006c3e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	6879      	ldr	r1, [r7, #4]
 8006c30:	2037      	movs	r0, #55	; 0x37
 8006c32:	f000 ff45 	bl	8007ac0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8006c36:	4a0a      	ldr	r2, [pc, #40]	; (8006c60 <HAL_InitTick+0xf4>)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	6013      	str	r3, [r2, #0]
 8006c3c:	e002      	b.n	8006c44 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8006c3e:	2301      	movs	r3, #1
 8006c40:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8006c44:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8006c48:	4618      	mov	r0, r3
 8006c4a:	3738      	adds	r7, #56	; 0x38
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	bd80      	pop	{r7, pc}
 8006c50:	40023800 	.word	0x40023800
 8006c54:	431bde83 	.word	0x431bde83
 8006c58:	20000c10 	.word	0x20000c10
 8006c5c:	40001400 	.word	0x40001400
 8006c60:	2000006c 	.word	0x2000006c

08006c64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006c64:	b480      	push	{r7}
 8006c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006c68:	e7fe      	b.n	8006c68 <NMI_Handler+0x4>

08006c6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006c6a:	b480      	push	{r7}
 8006c6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006c6e:	e7fe      	b.n	8006c6e <HardFault_Handler+0x4>

08006c70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006c70:	b480      	push	{r7}
 8006c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006c74:	e7fe      	b.n	8006c74 <MemManage_Handler+0x4>

08006c76 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006c76:	b480      	push	{r7}
 8006c78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006c7a:	e7fe      	b.n	8006c7a <BusFault_Handler+0x4>

08006c7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006c80:	e7fe      	b.n	8006c80 <UsageFault_Handler+0x4>

08006c82 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006c82:	b480      	push	{r7}
 8006c84:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006c86:	bf00      	nop
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8e:	4770      	bx	lr

08006c90 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8006c94:	4802      	ldr	r0, [pc, #8]	; (8006ca0 <DMA1_Stream1_IRQHandler+0x10>)
 8006c96:	f001 f8d5 	bl	8007e44 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8006c9a:	bf00      	nop
 8006c9c:	bd80      	pop	{r7, pc}
 8006c9e:	bf00      	nop
 8006ca0:	20000b4c 	.word	0x20000b4c

08006ca4 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8006ca8:	4802      	ldr	r0, [pc, #8]	; (8006cb4 <DMA1_Stream3_IRQHandler+0x10>)
 8006caa:	f001 f8cb 	bl	8007e44 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8006cae:	bf00      	nop
 8006cb0:	bd80      	pop	{r7, pc}
 8006cb2:	bf00      	nop
 8006cb4:	20000bac 	.word	0x20000bac

08006cb8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8006cbc:	f44f 7080 	mov.w	r0, #256	; 0x100
 8006cc0:	f001 fcfa 	bl	80086b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8006cc4:	bf00      	nop
 8006cc6:	bd80      	pop	{r7, pc}

08006cc8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8006ccc:	4802      	ldr	r0, [pc, #8]	; (8006cd8 <USART3_IRQHandler+0x10>)
 8006cce:	f004 fe49 	bl	800b964 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8006cd2:	bf00      	nop
 8006cd4:	bd80      	pop	{r7, pc}
 8006cd6:	bf00      	nop
 8006cd8:	20000ad8 	.word	0x20000ad8

08006cdc <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8006ce0:	4802      	ldr	r0, [pc, #8]	; (8006cec <TIM7_IRQHandler+0x10>)
 8006ce2:	f003 fdf7 	bl	800a8d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8006ce6:	bf00      	nop
 8006ce8:	bd80      	pop	{r7, pc}
 8006cea:	bf00      	nop
 8006cec:	20000c10 	.word	0x20000c10

08006cf0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8006cf0:	b480      	push	{r7}
 8006cf2:	af00      	add	r7, sp, #0
  return 1;
 8006cf4:	2301      	movs	r3, #1
}
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfe:	4770      	bx	lr

08006d00 <_kill>:

int _kill(int pid, int sig)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b082      	sub	sp, #8
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
 8006d08:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8006d0a:	f00a fa8f 	bl	801122c <__errno>
 8006d0e:	4603      	mov	r3, r0
 8006d10:	2216      	movs	r2, #22
 8006d12:	601a      	str	r2, [r3, #0]
  return -1;
 8006d14:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006d18:	4618      	mov	r0, r3
 8006d1a:	3708      	adds	r7, #8
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	bd80      	pop	{r7, pc}

08006d20 <_exit>:

void _exit (int status)
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b082      	sub	sp, #8
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8006d28:	f04f 31ff 	mov.w	r1, #4294967295
 8006d2c:	6878      	ldr	r0, [r7, #4]
 8006d2e:	f7ff ffe7 	bl	8006d00 <_kill>
  while (1) {}    /* Make sure we hang here */
 8006d32:	e7fe      	b.n	8006d32 <_exit+0x12>

08006d34 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b086      	sub	sp, #24
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	60f8      	str	r0, [r7, #12]
 8006d3c:	60b9      	str	r1, [r7, #8]
 8006d3e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006d40:	2300      	movs	r3, #0
 8006d42:	617b      	str	r3, [r7, #20]
 8006d44:	e00a      	b.n	8006d5c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8006d46:	f3af 8000 	nop.w
 8006d4a:	4601      	mov	r1, r0
 8006d4c:	68bb      	ldr	r3, [r7, #8]
 8006d4e:	1c5a      	adds	r2, r3, #1
 8006d50:	60ba      	str	r2, [r7, #8]
 8006d52:	b2ca      	uxtb	r2, r1
 8006d54:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006d56:	697b      	ldr	r3, [r7, #20]
 8006d58:	3301      	adds	r3, #1
 8006d5a:	617b      	str	r3, [r7, #20]
 8006d5c:	697a      	ldr	r2, [r7, #20]
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	429a      	cmp	r2, r3
 8006d62:	dbf0      	blt.n	8006d46 <_read+0x12>
  }

  return len;
 8006d64:	687b      	ldr	r3, [r7, #4]
}
 8006d66:	4618      	mov	r0, r3
 8006d68:	3718      	adds	r7, #24
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	bd80      	pop	{r7, pc}

08006d6e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006d6e:	b580      	push	{r7, lr}
 8006d70:	b086      	sub	sp, #24
 8006d72:	af00      	add	r7, sp, #0
 8006d74:	60f8      	str	r0, [r7, #12]
 8006d76:	60b9      	str	r1, [r7, #8]
 8006d78:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	617b      	str	r3, [r7, #20]
 8006d7e:	e009      	b.n	8006d94 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	1c5a      	adds	r2, r3, #1
 8006d84:	60ba      	str	r2, [r7, #8]
 8006d86:	781b      	ldrb	r3, [r3, #0]
 8006d88:	4618      	mov	r0, r3
 8006d8a:	f7fe fd81 	bl	8005890 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006d8e:	697b      	ldr	r3, [r7, #20]
 8006d90:	3301      	adds	r3, #1
 8006d92:	617b      	str	r3, [r7, #20]
 8006d94:	697a      	ldr	r2, [r7, #20]
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	429a      	cmp	r2, r3
 8006d9a:	dbf1      	blt.n	8006d80 <_write+0x12>
  }
  return len;
 8006d9c:	687b      	ldr	r3, [r7, #4]
}
 8006d9e:	4618      	mov	r0, r3
 8006da0:	3718      	adds	r7, #24
 8006da2:	46bd      	mov	sp, r7
 8006da4:	bd80      	pop	{r7, pc}

08006da6 <_close>:

int _close(int file)
{
 8006da6:	b480      	push	{r7}
 8006da8:	b083      	sub	sp, #12
 8006daa:	af00      	add	r7, sp, #0
 8006dac:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8006dae:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006db2:	4618      	mov	r0, r3
 8006db4:	370c      	adds	r7, #12
 8006db6:	46bd      	mov	sp, r7
 8006db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbc:	4770      	bx	lr

08006dbe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006dbe:	b480      	push	{r7}
 8006dc0:	b083      	sub	sp, #12
 8006dc2:	af00      	add	r7, sp, #0
 8006dc4:	6078      	str	r0, [r7, #4]
 8006dc6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006dce:	605a      	str	r2, [r3, #4]
  return 0;
 8006dd0:	2300      	movs	r3, #0
}
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	370c      	adds	r7, #12
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ddc:	4770      	bx	lr

08006dde <_isatty>:

int _isatty(int file)
{
 8006dde:	b480      	push	{r7}
 8006de0:	b083      	sub	sp, #12
 8006de2:	af00      	add	r7, sp, #0
 8006de4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8006de6:	2301      	movs	r3, #1
}
 8006de8:	4618      	mov	r0, r3
 8006dea:	370c      	adds	r7, #12
 8006dec:	46bd      	mov	sp, r7
 8006dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df2:	4770      	bx	lr

08006df4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006df4:	b480      	push	{r7}
 8006df6:	b085      	sub	sp, #20
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	60f8      	str	r0, [r7, #12]
 8006dfc:	60b9      	str	r1, [r7, #8]
 8006dfe:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8006e00:	2300      	movs	r3, #0
}
 8006e02:	4618      	mov	r0, r3
 8006e04:	3714      	adds	r7, #20
 8006e06:	46bd      	mov	sp, r7
 8006e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0c:	4770      	bx	lr
	...

08006e10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b086      	sub	sp, #24
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006e18:	4a14      	ldr	r2, [pc, #80]	; (8006e6c <_sbrk+0x5c>)
 8006e1a:	4b15      	ldr	r3, [pc, #84]	; (8006e70 <_sbrk+0x60>)
 8006e1c:	1ad3      	subs	r3, r2, r3
 8006e1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006e20:	697b      	ldr	r3, [r7, #20]
 8006e22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006e24:	4b13      	ldr	r3, [pc, #76]	; (8006e74 <_sbrk+0x64>)
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d102      	bne.n	8006e32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006e2c:	4b11      	ldr	r3, [pc, #68]	; (8006e74 <_sbrk+0x64>)
 8006e2e:	4a12      	ldr	r2, [pc, #72]	; (8006e78 <_sbrk+0x68>)
 8006e30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006e32:	4b10      	ldr	r3, [pc, #64]	; (8006e74 <_sbrk+0x64>)
 8006e34:	681a      	ldr	r2, [r3, #0]
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	4413      	add	r3, r2
 8006e3a:	693a      	ldr	r2, [r7, #16]
 8006e3c:	429a      	cmp	r2, r3
 8006e3e:	d207      	bcs.n	8006e50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006e40:	f00a f9f4 	bl	801122c <__errno>
 8006e44:	4603      	mov	r3, r0
 8006e46:	220c      	movs	r2, #12
 8006e48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006e4a:	f04f 33ff 	mov.w	r3, #4294967295
 8006e4e:	e009      	b.n	8006e64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006e50:	4b08      	ldr	r3, [pc, #32]	; (8006e74 <_sbrk+0x64>)
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006e56:	4b07      	ldr	r3, [pc, #28]	; (8006e74 <_sbrk+0x64>)
 8006e58:	681a      	ldr	r2, [r3, #0]
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	4413      	add	r3, r2
 8006e5e:	4a05      	ldr	r2, [pc, #20]	; (8006e74 <_sbrk+0x64>)
 8006e60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006e62:	68fb      	ldr	r3, [r7, #12]
}
 8006e64:	4618      	mov	r0, r3
 8006e66:	3718      	adds	r7, #24
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	bd80      	pop	{r7, pc}
 8006e6c:	20020000 	.word	0x20020000
 8006e70:	00000800 	.word	0x00000800
 8006e74:	20000c58 	.word	0x20000c58
 8006e78:	20005ca8 	.word	0x20005ca8

08006e7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006e7c:	b480      	push	{r7}
 8006e7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006e80:	4b06      	ldr	r3, [pc, #24]	; (8006e9c <SystemInit+0x20>)
 8006e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e86:	4a05      	ldr	r2, [pc, #20]	; (8006e9c <SystemInit+0x20>)
 8006e88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006e8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006e90:	bf00      	nop
 8006e92:	46bd      	mov	sp, r7
 8006e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e98:	4770      	bx	lr
 8006e9a:	bf00      	nop
 8006e9c:	e000ed00 	.word	0xe000ed00

08006ea0 <Reset_Handler>:
 8006ea0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006ed8 <LoopFillZerobss+0x12>
 8006ea4:	480d      	ldr	r0, [pc, #52]	; (8006edc <LoopFillZerobss+0x16>)
 8006ea6:	490e      	ldr	r1, [pc, #56]	; (8006ee0 <LoopFillZerobss+0x1a>)
 8006ea8:	4a0e      	ldr	r2, [pc, #56]	; (8006ee4 <LoopFillZerobss+0x1e>)
 8006eaa:	2300      	movs	r3, #0
 8006eac:	e002      	b.n	8006eb4 <LoopCopyDataInit>

08006eae <CopyDataInit>:
 8006eae:	58d4      	ldr	r4, [r2, r3]
 8006eb0:	50c4      	str	r4, [r0, r3]
 8006eb2:	3304      	adds	r3, #4

08006eb4 <LoopCopyDataInit>:
 8006eb4:	18c4      	adds	r4, r0, r3
 8006eb6:	428c      	cmp	r4, r1
 8006eb8:	d3f9      	bcc.n	8006eae <CopyDataInit>
 8006eba:	4a0b      	ldr	r2, [pc, #44]	; (8006ee8 <LoopFillZerobss+0x22>)
 8006ebc:	4c0b      	ldr	r4, [pc, #44]	; (8006eec <LoopFillZerobss+0x26>)
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	e001      	b.n	8006ec6 <LoopFillZerobss>

08006ec2 <FillZerobss>:
 8006ec2:	6013      	str	r3, [r2, #0]
 8006ec4:	3204      	adds	r2, #4

08006ec6 <LoopFillZerobss>:
 8006ec6:	42a2      	cmp	r2, r4
 8006ec8:	d3fb      	bcc.n	8006ec2 <FillZerobss>
 8006eca:	f7ff ffd7 	bl	8006e7c <SystemInit>
 8006ece:	f00a faa9 	bl	8011424 <__libc_init_array>
 8006ed2:	f7fe fcef 	bl	80058b4 <main>
 8006ed6:	4770      	bx	lr
 8006ed8:	20020000 	.word	0x20020000
 8006edc:	20000000 	.word	0x20000000
 8006ee0:	20000248 	.word	0x20000248
 8006ee4:	080155c4 	.word	0x080155c4
 8006ee8:	20000248 	.word	0x20000248
 8006eec:	20005ca4 	.word	0x20005ca4

08006ef0 <ADC_IRQHandler>:
 8006ef0:	e7fe      	b.n	8006ef0 <ADC_IRQHandler>

08006ef2 <stm32_lock_init>:
/**
  * @brief Initialize STM32 lock
  * @param lock The lock to init
  */
static inline void stm32_lock_init(LockingData_t *lock)
{
 8006ef2:	b580      	push	{r7, lr}
 8006ef4:	b084      	sub	sp, #16
 8006ef6:	af00      	add	r7, sp, #0
 8006ef8:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d104      	bne.n	8006f0a <stm32_lock_init+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8006f00:	b672      	cpsid	i
}
 8006f02:	bf00      	nop
 8006f04:	f7ff f97a 	bl	80061fc <Error_Handler>
 8006f08:	e7fe      	b.n	8006f08 <stm32_lock_init+0x16>
  for (size_t i = 0; i < STM32_LOCK_ARRAY_SIZE(lock->basepri); i++)
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	60fb      	str	r3, [r7, #12]
 8006f0e:	e007      	b.n	8006f20 <stm32_lock_init+0x2e>
  {
    lock->basepri[i] = 0;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	68fa      	ldr	r2, [r7, #12]
 8006f14:	2100      	movs	r1, #0
 8006f16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (size_t i = 0; i < STM32_LOCK_ARRAY_SIZE(lock->basepri); i++)
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	3301      	adds	r3, #1
 8006f1e:	60fb      	str	r3, [r7, #12]
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	2b01      	cmp	r3, #1
 8006f24:	d9f4      	bls.n	8006f10 <stm32_lock_init+0x1e>
  }
  lock->nesting_level = 0;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2200      	movs	r2, #0
 8006f2a:	721a      	strb	r2, [r3, #8]
}
 8006f2c:	bf00      	nop
 8006f2e:	3710      	adds	r7, #16
 8006f30:	46bd      	mov	sp, r7
 8006f32:	bd80      	pop	{r7, pc}

08006f34 <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b084      	sub	sp, #16
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d104      	bne.n	8006f4c <stm32_lock_acquire+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8006f42:	b672      	cpsid	i
}
 8006f44:	bf00      	nop
 8006f46:	f7ff f959 	bl	80061fc <Error_Handler>
 8006f4a:	e7fe      	b.n	8006f4a <stm32_lock_acquire+0x16>
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	7a1b      	ldrb	r3, [r3, #8]
 8006f50:	2b01      	cmp	r3, #1
 8006f52:	d904      	bls.n	8006f5e <stm32_lock_acquire+0x2a>
  __ASM volatile ("cpsid i" : : : "memory");
 8006f54:	b672      	cpsid	i
}
 8006f56:	bf00      	nop
 8006f58:	f7ff f950 	bl	80061fc <Error_Handler>
 8006f5c:	e7fe      	b.n	8006f5c <stm32_lock_acquire+0x28>
  lock->basepri[lock->nesting_level++] = taskENTER_CRITICAL_FROM_ISR();
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	7a1b      	ldrb	r3, [r3, #8]
 8006f62:	1c5a      	adds	r2, r3, #1
 8006f64:	b2d1      	uxtb	r1, r2
 8006f66:	687a      	ldr	r2, [r7, #4]
 8006f68:	7211      	strb	r1, [r2, #8]
 8006f6a:	4619      	mov	r1, r3

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006f6c:	f3ef 8211 	mrs	r2, BASEPRI
 8006f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f74:	f383 8811 	msr	BASEPRI, r3
 8006f78:	f3bf 8f6f 	isb	sy
 8006f7c:	f3bf 8f4f 	dsb	sy
 8006f80:	60fa      	str	r2, [r7, #12]
 8006f82:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006f84:	68fa      	ldr	r2, [r7, #12]
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 8006f8c:	bf00      	nop
 8006f8e:	3710      	adds	r7, #16
 8006f90:	46bd      	mov	sp, r7
 8006f92:	bd80      	pop	{r7, pc}

08006f94 <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b084      	sub	sp, #16
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d104      	bne.n	8006fac <stm32_lock_release+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8006fa2:	b672      	cpsid	i
}
 8006fa4:	bf00      	nop
 8006fa6:	f7ff f929 	bl	80061fc <Error_Handler>
 8006faa:	e7fe      	b.n	8006faa <stm32_lock_release+0x16>
  lock->nesting_level--;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	7a1b      	ldrb	r3, [r3, #8]
 8006fb0:	3b01      	subs	r3, #1
 8006fb2:	b2da      	uxtb	r2, r3
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	721a      	strb	r2, [r3, #8]
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	7a1b      	ldrb	r3, [r3, #8]
 8006fbc:	2b01      	cmp	r3, #1
 8006fbe:	d904      	bls.n	8006fca <stm32_lock_release+0x36>
  __ASM volatile ("cpsid i" : : : "memory");
 8006fc0:	b672      	cpsid	i
}
 8006fc2:	bf00      	nop
 8006fc4:	f7ff f91a 	bl	80061fc <Error_Handler>
 8006fc8:	e7fe      	b.n	8006fc8 <stm32_lock_release+0x34>
  taskEXIT_CRITICAL_FROM_ISR(lock->basepri[lock->nesting_level]);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	7a1b      	ldrb	r3, [r3, #8]
 8006fce:	461a      	mov	r2, r3
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fd6:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006fde:	bf00      	nop
}
 8006fe0:	bf00      	nop
 8006fe2:	3710      	adds	r7, #16
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	bd80      	pop	{r7, pc}

08006fe8 <__retarget_lock_init_recursive>:
/**
  * @brief Initialize recursive lock
  * @param lock The lock
  */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b082      	sub	sp, #8
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
  if (lock == NULL)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d105      	bne.n	8007002 <__retarget_lock_init_recursive+0x1a>
  {
    errno = EINVAL;
 8006ff6:	f00a f919 	bl	801122c <__errno>
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	2216      	movs	r2, #22
 8006ffe:	601a      	str	r2, [r3, #0]
    return;
 8007000:	e015      	b.n	800702e <__retarget_lock_init_recursive+0x46>
  }

  *lock = (_LOCK_T)malloc(sizeof(struct __lock));
 8007002:	200c      	movs	r0, #12
 8007004:	f00a fa32 	bl	801146c <malloc>
 8007008:	4603      	mov	r3, r0
 800700a:	461a      	mov	r2, r3
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	601a      	str	r2, [r3, #0]
  if (*lock != NULL)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d005      	beq.n	8007024 <__retarget_lock_init_recursive+0x3c>
  {
    stm32_lock_init(STM32_LOCK_PARAMETER(*lock));
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	4618      	mov	r0, r3
 800701e:	f7ff ff68 	bl	8006ef2 <stm32_lock_init>
    return;
 8007022:	e004      	b.n	800702e <__retarget_lock_init_recursive+0x46>
  __ASM volatile ("cpsid i" : : : "memory");
 8007024:	b672      	cpsid	i
}
 8007026:	bf00      	nop
  }

  /* Unable to allocate memory */
  STM32_LOCK_BLOCK();
 8007028:	f7ff f8e8 	bl	80061fc <Error_Handler>
 800702c:	e7fe      	b.n	800702c <__retarget_lock_init_recursive+0x44>
}
 800702e:	3708      	adds	r7, #8
 8007030:	46bd      	mov	sp, r7
 8007032:	bd80      	pop	{r7, pc}

08007034 <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b082      	sub	sp, #8
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d104      	bne.n	800704c <__retarget_lock_acquire_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8007042:	b672      	cpsid	i
}
 8007044:	bf00      	nop
 8007046:	f7ff f8d9 	bl	80061fc <Error_Handler>
 800704a:	e7fe      	b.n	800704a <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	4618      	mov	r0, r3
 8007050:	f7ff ff70 	bl	8006f34 <stm32_lock_acquire>
}
 8007054:	bf00      	nop
 8007056:	3708      	adds	r7, #8
 8007058:	46bd      	mov	sp, r7
 800705a:	bd80      	pop	{r7, pc}

0800705c <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b082      	sub	sp, #8
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d104      	bne.n	8007074 <__retarget_lock_release_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 800706a:	b672      	cpsid	i
}
 800706c:	bf00      	nop
 800706e:	f7ff f8c5 	bl	80061fc <Error_Handler>
 8007072:	e7fe      	b.n	8007072 <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	4618      	mov	r0, r3
 8007078:	f7ff ff8c 	bl	8006f94 <stm32_lock_release>
}
 800707c:	bf00      	nop
 800707e:	3708      	adds	r7, #8
 8007080:	46bd      	mov	sp, r7
 8007082:	bd80      	pop	{r7, pc}

08007084 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007084:	b580      	push	{r7, lr}
 8007086:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8007088:	4b0e      	ldr	r3, [pc, #56]	; (80070c4 <HAL_Init+0x40>)
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	4a0d      	ldr	r2, [pc, #52]	; (80070c4 <HAL_Init+0x40>)
 800708e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007092:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8007094:	4b0b      	ldr	r3, [pc, #44]	; (80070c4 <HAL_Init+0x40>)
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	4a0a      	ldr	r2, [pc, #40]	; (80070c4 <HAL_Init+0x40>)
 800709a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800709e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80070a0:	4b08      	ldr	r3, [pc, #32]	; (80070c4 <HAL_Init+0x40>)
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	4a07      	ldr	r2, [pc, #28]	; (80070c4 <HAL_Init+0x40>)
 80070a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80070aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80070ac:	2003      	movs	r0, #3
 80070ae:	f000 fcfc 	bl	8007aaa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80070b2:	200f      	movs	r0, #15
 80070b4:	f7ff fd5a 	bl	8006b6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80070b8:	f7ff fa44 	bl	8006544 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80070bc:	2300      	movs	r3, #0
}
 80070be:	4618      	mov	r0, r3
 80070c0:	bd80      	pop	{r7, pc}
 80070c2:	bf00      	nop
 80070c4:	40023c00 	.word	0x40023c00

080070c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80070c8:	b480      	push	{r7}
 80070ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80070cc:	4b06      	ldr	r3, [pc, #24]	; (80070e8 <HAL_IncTick+0x20>)
 80070ce:	781b      	ldrb	r3, [r3, #0]
 80070d0:	461a      	mov	r2, r3
 80070d2:	4b06      	ldr	r3, [pc, #24]	; (80070ec <HAL_IncTick+0x24>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	4413      	add	r3, r2
 80070d8:	4a04      	ldr	r2, [pc, #16]	; (80070ec <HAL_IncTick+0x24>)
 80070da:	6013      	str	r3, [r2, #0]
}
 80070dc:	bf00      	nop
 80070de:	46bd      	mov	sp, r7
 80070e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e4:	4770      	bx	lr
 80070e6:	bf00      	nop
 80070e8:	20000070 	.word	0x20000070
 80070ec:	20000c80 	.word	0x20000c80

080070f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80070f0:	b480      	push	{r7}
 80070f2:	af00      	add	r7, sp, #0
  return uwTick;
 80070f4:	4b03      	ldr	r3, [pc, #12]	; (8007104 <HAL_GetTick+0x14>)
 80070f6:	681b      	ldr	r3, [r3, #0]
}
 80070f8:	4618      	mov	r0, r3
 80070fa:	46bd      	mov	sp, r7
 80070fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007100:	4770      	bx	lr
 8007102:	bf00      	nop
 8007104:	20000c80 	.word	0x20000c80

08007108 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b084      	sub	sp, #16
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007110:	f7ff ffee 	bl	80070f0 <HAL_GetTick>
 8007114:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007120:	d005      	beq.n	800712e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007122:	4b0a      	ldr	r3, [pc, #40]	; (800714c <HAL_Delay+0x44>)
 8007124:	781b      	ldrb	r3, [r3, #0]
 8007126:	461a      	mov	r2, r3
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	4413      	add	r3, r2
 800712c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800712e:	bf00      	nop
 8007130:	f7ff ffde 	bl	80070f0 <HAL_GetTick>
 8007134:	4602      	mov	r2, r0
 8007136:	68bb      	ldr	r3, [r7, #8]
 8007138:	1ad3      	subs	r3, r2, r3
 800713a:	68fa      	ldr	r2, [r7, #12]
 800713c:	429a      	cmp	r2, r3
 800713e:	d8f7      	bhi.n	8007130 <HAL_Delay+0x28>
  {
  }
}
 8007140:	bf00      	nop
 8007142:	bf00      	nop
 8007144:	3710      	adds	r7, #16
 8007146:	46bd      	mov	sp, r7
 8007148:	bd80      	pop	{r7, pc}
 800714a:	bf00      	nop
 800714c:	20000070 	.word	0x20000070

08007150 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b084      	sub	sp, #16
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007158:	2300      	movs	r3, #0
 800715a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d101      	bne.n	8007166 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8007162:	2301      	movs	r3, #1
 8007164:	e033      	b.n	80071ce <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800716a:	2b00      	cmp	r3, #0
 800716c:	d109      	bne.n	8007182 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800716e:	6878      	ldr	r0, [r7, #4]
 8007170:	f7ff fa14 	bl	800659c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2200      	movs	r2, #0
 8007178:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2200      	movs	r2, #0
 800717e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007186:	f003 0310 	and.w	r3, r3, #16
 800718a:	2b00      	cmp	r3, #0
 800718c:	d118      	bne.n	80071c0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007192:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8007196:	f023 0302 	bic.w	r3, r3, #2
 800719a:	f043 0202 	orr.w	r2, r3, #2
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80071a2:	6878      	ldr	r0, [r7, #4]
 80071a4:	f000 fad8 	bl	8007758 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2200      	movs	r2, #0
 80071ac:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071b2:	f023 0303 	bic.w	r3, r3, #3
 80071b6:	f043 0201 	orr.w	r2, r3, #1
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	641a      	str	r2, [r3, #64]	; 0x40
 80071be:	e001      	b.n	80071c4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80071c0:	2301      	movs	r3, #1
 80071c2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2200      	movs	r2, #0
 80071c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80071cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80071ce:	4618      	mov	r0, r3
 80071d0:	3710      	adds	r7, #16
 80071d2:	46bd      	mov	sp, r7
 80071d4:	bd80      	pop	{r7, pc}
	...

080071d8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80071d8:	b480      	push	{r7}
 80071da:	b085      	sub	sp, #20
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80071e0:	2300      	movs	r3, #0
 80071e2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80071ea:	2b01      	cmp	r3, #1
 80071ec:	d101      	bne.n	80071f2 <HAL_ADC_Start+0x1a>
 80071ee:	2302      	movs	r3, #2
 80071f0:	e0b2      	b.n	8007358 <HAL_ADC_Start+0x180>
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2201      	movs	r2, #1
 80071f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	689b      	ldr	r3, [r3, #8]
 8007200:	f003 0301 	and.w	r3, r3, #1
 8007204:	2b01      	cmp	r3, #1
 8007206:	d018      	beq.n	800723a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	689a      	ldr	r2, [r3, #8]
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f042 0201 	orr.w	r2, r2, #1
 8007216:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8007218:	4b52      	ldr	r3, [pc, #328]	; (8007364 <HAL_ADC_Start+0x18c>)
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	4a52      	ldr	r2, [pc, #328]	; (8007368 <HAL_ADC_Start+0x190>)
 800721e:	fba2 2303 	umull	r2, r3, r2, r3
 8007222:	0c9a      	lsrs	r2, r3, #18
 8007224:	4613      	mov	r3, r2
 8007226:	005b      	lsls	r3, r3, #1
 8007228:	4413      	add	r3, r2
 800722a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800722c:	e002      	b.n	8007234 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800722e:	68bb      	ldr	r3, [r7, #8]
 8007230:	3b01      	subs	r3, #1
 8007232:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d1f9      	bne.n	800722e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	689b      	ldr	r3, [r3, #8]
 8007240:	f003 0301 	and.w	r3, r3, #1
 8007244:	2b01      	cmp	r3, #1
 8007246:	d17a      	bne.n	800733e <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800724c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8007250:	f023 0301 	bic.w	r3, r3, #1
 8007254:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	685b      	ldr	r3, [r3, #4]
 8007262:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007266:	2b00      	cmp	r3, #0
 8007268:	d007      	beq.n	800727a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800726e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8007272:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800727e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007282:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007286:	d106      	bne.n	8007296 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800728c:	f023 0206 	bic.w	r2, r3, #6
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	645a      	str	r2, [r3, #68]	; 0x44
 8007294:	e002      	b.n	800729c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	2200      	movs	r2, #0
 800729a:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2200      	movs	r2, #0
 80072a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80072a4:	4b31      	ldr	r3, [pc, #196]	; (800736c <HAL_ADC_Start+0x194>)
 80072a6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80072b0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	685b      	ldr	r3, [r3, #4]
 80072b6:	f003 031f 	and.w	r3, r3, #31
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d12a      	bne.n	8007314 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	4a2b      	ldr	r2, [pc, #172]	; (8007370 <HAL_ADC_Start+0x198>)
 80072c4:	4293      	cmp	r3, r2
 80072c6:	d015      	beq.n	80072f4 <HAL_ADC_Start+0x11c>
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	4a29      	ldr	r2, [pc, #164]	; (8007374 <HAL_ADC_Start+0x19c>)
 80072ce:	4293      	cmp	r3, r2
 80072d0:	d105      	bne.n	80072de <HAL_ADC_Start+0x106>
 80072d2:	4b26      	ldr	r3, [pc, #152]	; (800736c <HAL_ADC_Start+0x194>)
 80072d4:	685b      	ldr	r3, [r3, #4]
 80072d6:	f003 031f 	and.w	r3, r3, #31
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d00a      	beq.n	80072f4 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	4a25      	ldr	r2, [pc, #148]	; (8007378 <HAL_ADC_Start+0x1a0>)
 80072e4:	4293      	cmp	r3, r2
 80072e6:	d136      	bne.n	8007356 <HAL_ADC_Start+0x17e>
 80072e8:	4b20      	ldr	r3, [pc, #128]	; (800736c <HAL_ADC_Start+0x194>)
 80072ea:	685b      	ldr	r3, [r3, #4]
 80072ec:	f003 0310 	and.w	r3, r3, #16
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d130      	bne.n	8007356 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	689b      	ldr	r3, [r3, #8]
 80072fa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d129      	bne.n	8007356 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	689a      	ldr	r2, [r3, #8]
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8007310:	609a      	str	r2, [r3, #8]
 8007312:	e020      	b.n	8007356 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	4a15      	ldr	r2, [pc, #84]	; (8007370 <HAL_ADC_Start+0x198>)
 800731a:	4293      	cmp	r3, r2
 800731c:	d11b      	bne.n	8007356 <HAL_ADC_Start+0x17e>
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	689b      	ldr	r3, [r3, #8]
 8007324:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007328:	2b00      	cmp	r3, #0
 800732a:	d114      	bne.n	8007356 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	689a      	ldr	r2, [r3, #8]
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800733a:	609a      	str	r2, [r3, #8]
 800733c:	e00b      	b.n	8007356 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007342:	f043 0210 	orr.w	r2, r3, #16
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800734e:	f043 0201 	orr.w	r2, r3, #1
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8007356:	2300      	movs	r3, #0
}
 8007358:	4618      	mov	r0, r3
 800735a:	3714      	adds	r7, #20
 800735c:	46bd      	mov	sp, r7
 800735e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007362:	4770      	bx	lr
 8007364:	20000068 	.word	0x20000068
 8007368:	431bde83 	.word	0x431bde83
 800736c:	40012300 	.word	0x40012300
 8007370:	40012000 	.word	0x40012000
 8007374:	40012100 	.word	0x40012100
 8007378:	40012200 	.word	0x40012200

0800737c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 800737c:	b480      	push	{r7}
 800737e:	b083      	sub	sp, #12
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800738a:	2b01      	cmp	r3, #1
 800738c:	d101      	bne.n	8007392 <HAL_ADC_Stop+0x16>
 800738e:	2302      	movs	r3, #2
 8007390:	e021      	b.n	80073d6 <HAL_ADC_Stop+0x5a>
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2201      	movs	r2, #1
 8007396:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	689a      	ldr	r2, [r3, #8]
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	f022 0201 	bic.w	r2, r2, #1
 80073a8:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	689b      	ldr	r3, [r3, #8]
 80073b0:	f003 0301 	and.w	r3, r3, #1
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d109      	bne.n	80073cc <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073bc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80073c0:	f023 0301 	bic.w	r3, r3, #1
 80073c4:	f043 0201 	orr.w	r2, r3, #1
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2200      	movs	r2, #0
 80073d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80073d4:	2300      	movs	r3, #0
}
 80073d6:	4618      	mov	r0, r3
 80073d8:	370c      	adds	r7, #12
 80073da:	46bd      	mov	sp, r7
 80073dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e0:	4770      	bx	lr

080073e2 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80073e2:	b580      	push	{r7, lr}
 80073e4:	b084      	sub	sp, #16
 80073e6:	af00      	add	r7, sp, #0
 80073e8:	6078      	str	r0, [r7, #4]
 80073ea:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80073ec:	2300      	movs	r3, #0
 80073ee:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	689b      	ldr	r3, [r3, #8]
 80073f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80073fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80073fe:	d113      	bne.n	8007428 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	689b      	ldr	r3, [r3, #8]
 8007406:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800740a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800740e:	d10b      	bne.n	8007428 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007414:	f043 0220 	orr.w	r2, r3, #32
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2200      	movs	r2, #0
 8007420:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8007424:	2301      	movs	r3, #1
 8007426:	e063      	b.n	80074f0 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8007428:	f7ff fe62 	bl	80070f0 <HAL_GetTick>
 800742c:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800742e:	e021      	b.n	8007474 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8007430:	683b      	ldr	r3, [r7, #0]
 8007432:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007436:	d01d      	beq.n	8007474 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d007      	beq.n	800744e <HAL_ADC_PollForConversion+0x6c>
 800743e:	f7ff fe57 	bl	80070f0 <HAL_GetTick>
 8007442:	4602      	mov	r2, r0
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	1ad3      	subs	r3, r2, r3
 8007448:	683a      	ldr	r2, [r7, #0]
 800744a:	429a      	cmp	r2, r3
 800744c:	d212      	bcs.n	8007474 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f003 0302 	and.w	r3, r3, #2
 8007458:	2b02      	cmp	r3, #2
 800745a:	d00b      	beq.n	8007474 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007460:	f043 0204 	orr.w	r2, r3, #4
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2200      	movs	r2, #0
 800746c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8007470:	2303      	movs	r3, #3
 8007472:	e03d      	b.n	80074f0 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f003 0302 	and.w	r3, r3, #2
 800747e:	2b02      	cmp	r3, #2
 8007480:	d1d6      	bne.n	8007430 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f06f 0212 	mvn.w	r2, #18
 800748a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007490:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	689b      	ldr	r3, [r3, #8]
 800749e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d123      	bne.n	80074ee <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d11f      	bne.n	80074ee <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074b4:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d006      	beq.n	80074ca <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	689b      	ldr	r3, [r3, #8]
 80074c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d111      	bne.n	80074ee <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074ce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d105      	bne.n	80074ee <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074e6:	f043 0201 	orr.w	r2, r3, #1
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80074ee:	2300      	movs	r3, #0
}
 80074f0:	4618      	mov	r0, r3
 80074f2:	3710      	adds	r7, #16
 80074f4:	46bd      	mov	sp, r7
 80074f6:	bd80      	pop	{r7, pc}

080074f8 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80074f8:	b480      	push	{r7}
 80074fa:	b083      	sub	sp, #12
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8007506:	4618      	mov	r0, r3
 8007508:	370c      	adds	r7, #12
 800750a:	46bd      	mov	sp, r7
 800750c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007510:	4770      	bx	lr
	...

08007514 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8007514:	b480      	push	{r7}
 8007516:	b085      	sub	sp, #20
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
 800751c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800751e:	2300      	movs	r3, #0
 8007520:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007528:	2b01      	cmp	r3, #1
 800752a:	d101      	bne.n	8007530 <HAL_ADC_ConfigChannel+0x1c>
 800752c:	2302      	movs	r3, #2
 800752e:	e105      	b.n	800773c <HAL_ADC_ConfigChannel+0x228>
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2201      	movs	r2, #1
 8007534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	2b09      	cmp	r3, #9
 800753e:	d925      	bls.n	800758c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	68d9      	ldr	r1, [r3, #12]
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	b29b      	uxth	r3, r3
 800754c:	461a      	mov	r2, r3
 800754e:	4613      	mov	r3, r2
 8007550:	005b      	lsls	r3, r3, #1
 8007552:	4413      	add	r3, r2
 8007554:	3b1e      	subs	r3, #30
 8007556:	2207      	movs	r2, #7
 8007558:	fa02 f303 	lsl.w	r3, r2, r3
 800755c:	43da      	mvns	r2, r3
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	400a      	ands	r2, r1
 8007564:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	68d9      	ldr	r1, [r3, #12]
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	689a      	ldr	r2, [r3, #8]
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	b29b      	uxth	r3, r3
 8007576:	4618      	mov	r0, r3
 8007578:	4603      	mov	r3, r0
 800757a:	005b      	lsls	r3, r3, #1
 800757c:	4403      	add	r3, r0
 800757e:	3b1e      	subs	r3, #30
 8007580:	409a      	lsls	r2, r3
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	430a      	orrs	r2, r1
 8007588:	60da      	str	r2, [r3, #12]
 800758a:	e022      	b.n	80075d2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	6919      	ldr	r1, [r3, #16]
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	b29b      	uxth	r3, r3
 8007598:	461a      	mov	r2, r3
 800759a:	4613      	mov	r3, r2
 800759c:	005b      	lsls	r3, r3, #1
 800759e:	4413      	add	r3, r2
 80075a0:	2207      	movs	r2, #7
 80075a2:	fa02 f303 	lsl.w	r3, r2, r3
 80075a6:	43da      	mvns	r2, r3
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	400a      	ands	r2, r1
 80075ae:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	6919      	ldr	r1, [r3, #16]
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	689a      	ldr	r2, [r3, #8]
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	b29b      	uxth	r3, r3
 80075c0:	4618      	mov	r0, r3
 80075c2:	4603      	mov	r3, r0
 80075c4:	005b      	lsls	r3, r3, #1
 80075c6:	4403      	add	r3, r0
 80075c8:	409a      	lsls	r2, r3
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	430a      	orrs	r2, r1
 80075d0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	685b      	ldr	r3, [r3, #4]
 80075d6:	2b06      	cmp	r3, #6
 80075d8:	d824      	bhi.n	8007624 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	685a      	ldr	r2, [r3, #4]
 80075e4:	4613      	mov	r3, r2
 80075e6:	009b      	lsls	r3, r3, #2
 80075e8:	4413      	add	r3, r2
 80075ea:	3b05      	subs	r3, #5
 80075ec:	221f      	movs	r2, #31
 80075ee:	fa02 f303 	lsl.w	r3, r2, r3
 80075f2:	43da      	mvns	r2, r3
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	400a      	ands	r2, r1
 80075fa:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	b29b      	uxth	r3, r3
 8007608:	4618      	mov	r0, r3
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	685a      	ldr	r2, [r3, #4]
 800760e:	4613      	mov	r3, r2
 8007610:	009b      	lsls	r3, r3, #2
 8007612:	4413      	add	r3, r2
 8007614:	3b05      	subs	r3, #5
 8007616:	fa00 f203 	lsl.w	r2, r0, r3
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	430a      	orrs	r2, r1
 8007620:	635a      	str	r2, [r3, #52]	; 0x34
 8007622:	e04c      	b.n	80076be <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	685b      	ldr	r3, [r3, #4]
 8007628:	2b0c      	cmp	r3, #12
 800762a:	d824      	bhi.n	8007676 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007632:	683b      	ldr	r3, [r7, #0]
 8007634:	685a      	ldr	r2, [r3, #4]
 8007636:	4613      	mov	r3, r2
 8007638:	009b      	lsls	r3, r3, #2
 800763a:	4413      	add	r3, r2
 800763c:	3b23      	subs	r3, #35	; 0x23
 800763e:	221f      	movs	r2, #31
 8007640:	fa02 f303 	lsl.w	r3, r2, r3
 8007644:	43da      	mvns	r2, r3
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	400a      	ands	r2, r1
 800764c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	b29b      	uxth	r3, r3
 800765a:	4618      	mov	r0, r3
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	685a      	ldr	r2, [r3, #4]
 8007660:	4613      	mov	r3, r2
 8007662:	009b      	lsls	r3, r3, #2
 8007664:	4413      	add	r3, r2
 8007666:	3b23      	subs	r3, #35	; 0x23
 8007668:	fa00 f203 	lsl.w	r2, r0, r3
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	430a      	orrs	r2, r1
 8007672:	631a      	str	r2, [r3, #48]	; 0x30
 8007674:	e023      	b.n	80076be <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	685a      	ldr	r2, [r3, #4]
 8007680:	4613      	mov	r3, r2
 8007682:	009b      	lsls	r3, r3, #2
 8007684:	4413      	add	r3, r2
 8007686:	3b41      	subs	r3, #65	; 0x41
 8007688:	221f      	movs	r2, #31
 800768a:	fa02 f303 	lsl.w	r3, r2, r3
 800768e:	43da      	mvns	r2, r3
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	400a      	ands	r2, r1
 8007696:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	b29b      	uxth	r3, r3
 80076a4:	4618      	mov	r0, r3
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	685a      	ldr	r2, [r3, #4]
 80076aa:	4613      	mov	r3, r2
 80076ac:	009b      	lsls	r3, r3, #2
 80076ae:	4413      	add	r3, r2
 80076b0:	3b41      	subs	r3, #65	; 0x41
 80076b2:	fa00 f203 	lsl.w	r2, r0, r3
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	430a      	orrs	r2, r1
 80076bc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80076be:	4b22      	ldr	r3, [pc, #136]	; (8007748 <HAL_ADC_ConfigChannel+0x234>)
 80076c0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	4a21      	ldr	r2, [pc, #132]	; (800774c <HAL_ADC_ConfigChannel+0x238>)
 80076c8:	4293      	cmp	r3, r2
 80076ca:	d109      	bne.n	80076e0 <HAL_ADC_ConfigChannel+0x1cc>
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	2b12      	cmp	r3, #18
 80076d2:	d105      	bne.n	80076e0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	685b      	ldr	r3, [r3, #4]
 80076d8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	4a19      	ldr	r2, [pc, #100]	; (800774c <HAL_ADC_ConfigChannel+0x238>)
 80076e6:	4293      	cmp	r3, r2
 80076e8:	d123      	bne.n	8007732 <HAL_ADC_ConfigChannel+0x21e>
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	2b10      	cmp	r3, #16
 80076f0:	d003      	beq.n	80076fa <HAL_ADC_ConfigChannel+0x1e6>
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	2b11      	cmp	r3, #17
 80076f8:	d11b      	bne.n	8007732 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	685b      	ldr	r3, [r3, #4]
 80076fe:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	2b10      	cmp	r3, #16
 800770c:	d111      	bne.n	8007732 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800770e:	4b10      	ldr	r3, [pc, #64]	; (8007750 <HAL_ADC_ConfigChannel+0x23c>)
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	4a10      	ldr	r2, [pc, #64]	; (8007754 <HAL_ADC_ConfigChannel+0x240>)
 8007714:	fba2 2303 	umull	r2, r3, r2, r3
 8007718:	0c9a      	lsrs	r2, r3, #18
 800771a:	4613      	mov	r3, r2
 800771c:	009b      	lsls	r3, r3, #2
 800771e:	4413      	add	r3, r2
 8007720:	005b      	lsls	r3, r3, #1
 8007722:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8007724:	e002      	b.n	800772c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8007726:	68bb      	ldr	r3, [r7, #8]
 8007728:	3b01      	subs	r3, #1
 800772a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800772c:	68bb      	ldr	r3, [r7, #8]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d1f9      	bne.n	8007726 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2200      	movs	r2, #0
 8007736:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800773a:	2300      	movs	r3, #0
}
 800773c:	4618      	mov	r0, r3
 800773e:	3714      	adds	r7, #20
 8007740:	46bd      	mov	sp, r7
 8007742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007746:	4770      	bx	lr
 8007748:	40012300 	.word	0x40012300
 800774c:	40012000 	.word	0x40012000
 8007750:	20000068 	.word	0x20000068
 8007754:	431bde83 	.word	0x431bde83

08007758 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007758:	b480      	push	{r7}
 800775a:	b085      	sub	sp, #20
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007760:	4b79      	ldr	r3, [pc, #484]	; (8007948 <ADC_Init+0x1f0>)
 8007762:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	685b      	ldr	r3, [r3, #4]
 8007768:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	685a      	ldr	r2, [r3, #4]
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	685b      	ldr	r3, [r3, #4]
 8007778:	431a      	orrs	r2, r3
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	685a      	ldr	r2, [r3, #4]
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800778c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	6859      	ldr	r1, [r3, #4]
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	691b      	ldr	r3, [r3, #16]
 8007798:	021a      	lsls	r2, r3, #8
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	430a      	orrs	r2, r1
 80077a0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	685a      	ldr	r2, [r3, #4]
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80077b0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	6859      	ldr	r1, [r3, #4]
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	689a      	ldr	r2, [r3, #8]
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	430a      	orrs	r2, r1
 80077c2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	689a      	ldr	r2, [r3, #8]
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80077d2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	6899      	ldr	r1, [r3, #8]
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	68da      	ldr	r2, [r3, #12]
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	430a      	orrs	r2, r1
 80077e4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077ea:	4a58      	ldr	r2, [pc, #352]	; (800794c <ADC_Init+0x1f4>)
 80077ec:	4293      	cmp	r3, r2
 80077ee:	d022      	beq.n	8007836 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	689a      	ldr	r2, [r3, #8]
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80077fe:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	6899      	ldr	r1, [r3, #8]
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	430a      	orrs	r2, r1
 8007810:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	689a      	ldr	r2, [r3, #8]
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007820:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	6899      	ldr	r1, [r3, #8]
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	430a      	orrs	r2, r1
 8007832:	609a      	str	r2, [r3, #8]
 8007834:	e00f      	b.n	8007856 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	689a      	ldr	r2, [r3, #8]
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007844:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	689a      	ldr	r2, [r3, #8]
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007854:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	689a      	ldr	r2, [r3, #8]
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	f022 0202 	bic.w	r2, r2, #2
 8007864:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	6899      	ldr	r1, [r3, #8]
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	7e1b      	ldrb	r3, [r3, #24]
 8007870:	005a      	lsls	r2, r3, #1
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	430a      	orrs	r2, r1
 8007878:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d01b      	beq.n	80078bc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	685a      	ldr	r2, [r3, #4]
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007892:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	685a      	ldr	r2, [r3, #4]
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80078a2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	6859      	ldr	r1, [r3, #4]
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078ae:	3b01      	subs	r3, #1
 80078b0:	035a      	lsls	r2, r3, #13
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	430a      	orrs	r2, r1
 80078b8:	605a      	str	r2, [r3, #4]
 80078ba:	e007      	b.n	80078cc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	685a      	ldr	r2, [r3, #4]
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80078ca:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80078da:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	69db      	ldr	r3, [r3, #28]
 80078e6:	3b01      	subs	r3, #1
 80078e8:	051a      	lsls	r2, r3, #20
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	430a      	orrs	r2, r1
 80078f0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	689a      	ldr	r2, [r3, #8]
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007900:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	6899      	ldr	r1, [r3, #8]
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800790e:	025a      	lsls	r2, r3, #9
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	430a      	orrs	r2, r1
 8007916:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	689a      	ldr	r2, [r3, #8]
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007926:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	6899      	ldr	r1, [r3, #8]
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	695b      	ldr	r3, [r3, #20]
 8007932:	029a      	lsls	r2, r3, #10
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	430a      	orrs	r2, r1
 800793a:	609a      	str	r2, [r3, #8]
}
 800793c:	bf00      	nop
 800793e:	3714      	adds	r7, #20
 8007940:	46bd      	mov	sp, r7
 8007942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007946:	4770      	bx	lr
 8007948:	40012300 	.word	0x40012300
 800794c:	0f000001 	.word	0x0f000001

08007950 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007950:	b480      	push	{r7}
 8007952:	b085      	sub	sp, #20
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	f003 0307 	and.w	r3, r3, #7
 800795e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007960:	4b0c      	ldr	r3, [pc, #48]	; (8007994 <__NVIC_SetPriorityGrouping+0x44>)
 8007962:	68db      	ldr	r3, [r3, #12]
 8007964:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007966:	68ba      	ldr	r2, [r7, #8]
 8007968:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800796c:	4013      	ands	r3, r2
 800796e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007974:	68bb      	ldr	r3, [r7, #8]
 8007976:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007978:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800797c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007980:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007982:	4a04      	ldr	r2, [pc, #16]	; (8007994 <__NVIC_SetPriorityGrouping+0x44>)
 8007984:	68bb      	ldr	r3, [r7, #8]
 8007986:	60d3      	str	r3, [r2, #12]
}
 8007988:	bf00      	nop
 800798a:	3714      	adds	r7, #20
 800798c:	46bd      	mov	sp, r7
 800798e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007992:	4770      	bx	lr
 8007994:	e000ed00 	.word	0xe000ed00

08007998 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007998:	b480      	push	{r7}
 800799a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800799c:	4b04      	ldr	r3, [pc, #16]	; (80079b0 <__NVIC_GetPriorityGrouping+0x18>)
 800799e:	68db      	ldr	r3, [r3, #12]
 80079a0:	0a1b      	lsrs	r3, r3, #8
 80079a2:	f003 0307 	and.w	r3, r3, #7
}
 80079a6:	4618      	mov	r0, r3
 80079a8:	46bd      	mov	sp, r7
 80079aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ae:	4770      	bx	lr
 80079b0:	e000ed00 	.word	0xe000ed00

080079b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80079b4:	b480      	push	{r7}
 80079b6:	b083      	sub	sp, #12
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	4603      	mov	r3, r0
 80079bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80079be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	db0b      	blt.n	80079de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80079c6:	79fb      	ldrb	r3, [r7, #7]
 80079c8:	f003 021f 	and.w	r2, r3, #31
 80079cc:	4907      	ldr	r1, [pc, #28]	; (80079ec <__NVIC_EnableIRQ+0x38>)
 80079ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80079d2:	095b      	lsrs	r3, r3, #5
 80079d4:	2001      	movs	r0, #1
 80079d6:	fa00 f202 	lsl.w	r2, r0, r2
 80079da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80079de:	bf00      	nop
 80079e0:	370c      	adds	r7, #12
 80079e2:	46bd      	mov	sp, r7
 80079e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e8:	4770      	bx	lr
 80079ea:	bf00      	nop
 80079ec:	e000e100 	.word	0xe000e100

080079f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80079f0:	b480      	push	{r7}
 80079f2:	b083      	sub	sp, #12
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	4603      	mov	r3, r0
 80079f8:	6039      	str	r1, [r7, #0]
 80079fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80079fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	db0a      	blt.n	8007a1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	b2da      	uxtb	r2, r3
 8007a08:	490c      	ldr	r1, [pc, #48]	; (8007a3c <__NVIC_SetPriority+0x4c>)
 8007a0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a0e:	0112      	lsls	r2, r2, #4
 8007a10:	b2d2      	uxtb	r2, r2
 8007a12:	440b      	add	r3, r1
 8007a14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007a18:	e00a      	b.n	8007a30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	b2da      	uxtb	r2, r3
 8007a1e:	4908      	ldr	r1, [pc, #32]	; (8007a40 <__NVIC_SetPriority+0x50>)
 8007a20:	79fb      	ldrb	r3, [r7, #7]
 8007a22:	f003 030f 	and.w	r3, r3, #15
 8007a26:	3b04      	subs	r3, #4
 8007a28:	0112      	lsls	r2, r2, #4
 8007a2a:	b2d2      	uxtb	r2, r2
 8007a2c:	440b      	add	r3, r1
 8007a2e:	761a      	strb	r2, [r3, #24]
}
 8007a30:	bf00      	nop
 8007a32:	370c      	adds	r7, #12
 8007a34:	46bd      	mov	sp, r7
 8007a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3a:	4770      	bx	lr
 8007a3c:	e000e100 	.word	0xe000e100
 8007a40:	e000ed00 	.word	0xe000ed00

08007a44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007a44:	b480      	push	{r7}
 8007a46:	b089      	sub	sp, #36	; 0x24
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	60f8      	str	r0, [r7, #12]
 8007a4c:	60b9      	str	r1, [r7, #8]
 8007a4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	f003 0307 	and.w	r3, r3, #7
 8007a56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007a58:	69fb      	ldr	r3, [r7, #28]
 8007a5a:	f1c3 0307 	rsb	r3, r3, #7
 8007a5e:	2b04      	cmp	r3, #4
 8007a60:	bf28      	it	cs
 8007a62:	2304      	movcs	r3, #4
 8007a64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007a66:	69fb      	ldr	r3, [r7, #28]
 8007a68:	3304      	adds	r3, #4
 8007a6a:	2b06      	cmp	r3, #6
 8007a6c:	d902      	bls.n	8007a74 <NVIC_EncodePriority+0x30>
 8007a6e:	69fb      	ldr	r3, [r7, #28]
 8007a70:	3b03      	subs	r3, #3
 8007a72:	e000      	b.n	8007a76 <NVIC_EncodePriority+0x32>
 8007a74:	2300      	movs	r3, #0
 8007a76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007a78:	f04f 32ff 	mov.w	r2, #4294967295
 8007a7c:	69bb      	ldr	r3, [r7, #24]
 8007a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8007a82:	43da      	mvns	r2, r3
 8007a84:	68bb      	ldr	r3, [r7, #8]
 8007a86:	401a      	ands	r2, r3
 8007a88:	697b      	ldr	r3, [r7, #20]
 8007a8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007a8c:	f04f 31ff 	mov.w	r1, #4294967295
 8007a90:	697b      	ldr	r3, [r7, #20]
 8007a92:	fa01 f303 	lsl.w	r3, r1, r3
 8007a96:	43d9      	mvns	r1, r3
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007a9c:	4313      	orrs	r3, r2
         );
}
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	3724      	adds	r7, #36	; 0x24
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa8:	4770      	bx	lr

08007aaa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007aaa:	b580      	push	{r7, lr}
 8007aac:	b082      	sub	sp, #8
 8007aae:	af00      	add	r7, sp, #0
 8007ab0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007ab2:	6878      	ldr	r0, [r7, #4]
 8007ab4:	f7ff ff4c 	bl	8007950 <__NVIC_SetPriorityGrouping>
}
 8007ab8:	bf00      	nop
 8007aba:	3708      	adds	r7, #8
 8007abc:	46bd      	mov	sp, r7
 8007abe:	bd80      	pop	{r7, pc}

08007ac0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b086      	sub	sp, #24
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	4603      	mov	r3, r0
 8007ac8:	60b9      	str	r1, [r7, #8]
 8007aca:	607a      	str	r2, [r7, #4]
 8007acc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007ace:	2300      	movs	r3, #0
 8007ad0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007ad2:	f7ff ff61 	bl	8007998 <__NVIC_GetPriorityGrouping>
 8007ad6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007ad8:	687a      	ldr	r2, [r7, #4]
 8007ada:	68b9      	ldr	r1, [r7, #8]
 8007adc:	6978      	ldr	r0, [r7, #20]
 8007ade:	f7ff ffb1 	bl	8007a44 <NVIC_EncodePriority>
 8007ae2:	4602      	mov	r2, r0
 8007ae4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007ae8:	4611      	mov	r1, r2
 8007aea:	4618      	mov	r0, r3
 8007aec:	f7ff ff80 	bl	80079f0 <__NVIC_SetPriority>
}
 8007af0:	bf00      	nop
 8007af2:	3718      	adds	r7, #24
 8007af4:	46bd      	mov	sp, r7
 8007af6:	bd80      	pop	{r7, pc}

08007af8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b082      	sub	sp, #8
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	4603      	mov	r3, r0
 8007b00:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b06:	4618      	mov	r0, r3
 8007b08:	f7ff ff54 	bl	80079b4 <__NVIC_EnableIRQ>
}
 8007b0c:	bf00      	nop
 8007b0e:	3708      	adds	r7, #8
 8007b10:	46bd      	mov	sp, r7
 8007b12:	bd80      	pop	{r7, pc}

08007b14 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b086      	sub	sp, #24
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8007b20:	f7ff fae6 	bl	80070f0 <HAL_GetTick>
 8007b24:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d101      	bne.n	8007b30 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8007b2c:	2301      	movs	r3, #1
 8007b2e:	e099      	b.n	8007c64 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2202      	movs	r2, #2
 8007b34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	681a      	ldr	r2, [r3, #0]
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f022 0201 	bic.w	r2, r2, #1
 8007b4e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007b50:	e00f      	b.n	8007b72 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007b52:	f7ff facd 	bl	80070f0 <HAL_GetTick>
 8007b56:	4602      	mov	r2, r0
 8007b58:	693b      	ldr	r3, [r7, #16]
 8007b5a:	1ad3      	subs	r3, r2, r3
 8007b5c:	2b05      	cmp	r3, #5
 8007b5e:	d908      	bls.n	8007b72 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2220      	movs	r2, #32
 8007b64:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	2203      	movs	r2, #3
 8007b6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8007b6e:	2303      	movs	r3, #3
 8007b70:	e078      	b.n	8007c64 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	f003 0301 	and.w	r3, r3, #1
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d1e8      	bne.n	8007b52 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007b88:	697a      	ldr	r2, [r7, #20]
 8007b8a:	4b38      	ldr	r3, [pc, #224]	; (8007c6c <HAL_DMA_Init+0x158>)
 8007b8c:	4013      	ands	r3, r2
 8007b8e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	685a      	ldr	r2, [r3, #4]
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	689b      	ldr	r3, [r3, #8]
 8007b98:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007b9e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	691b      	ldr	r3, [r3, #16]
 8007ba4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007baa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	699b      	ldr	r3, [r3, #24]
 8007bb0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007bb6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	6a1b      	ldr	r3, [r3, #32]
 8007bbc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007bbe:	697a      	ldr	r2, [r7, #20]
 8007bc0:	4313      	orrs	r3, r2
 8007bc2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bc8:	2b04      	cmp	r3, #4
 8007bca:	d107      	bne.n	8007bdc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bd4:	4313      	orrs	r3, r2
 8007bd6:	697a      	ldr	r2, [r7, #20]
 8007bd8:	4313      	orrs	r3, r2
 8007bda:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	697a      	ldr	r2, [r7, #20]
 8007be2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	695b      	ldr	r3, [r3, #20]
 8007bea:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007bec:	697b      	ldr	r3, [r7, #20]
 8007bee:	f023 0307 	bic.w	r3, r3, #7
 8007bf2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bf8:	697a      	ldr	r2, [r7, #20]
 8007bfa:	4313      	orrs	r3, r2
 8007bfc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c02:	2b04      	cmp	r3, #4
 8007c04:	d117      	bne.n	8007c36 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c0a:	697a      	ldr	r2, [r7, #20]
 8007c0c:	4313      	orrs	r3, r2
 8007c0e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d00e      	beq.n	8007c36 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007c18:	6878      	ldr	r0, [r7, #4]
 8007c1a:	f000 fb01 	bl	8008220 <DMA_CheckFifoParam>
 8007c1e:	4603      	mov	r3, r0
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d008      	beq.n	8007c36 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2240      	movs	r2, #64	; 0x40
 8007c28:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2201      	movs	r2, #1
 8007c2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8007c32:	2301      	movs	r3, #1
 8007c34:	e016      	b.n	8007c64 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	697a      	ldr	r2, [r7, #20]
 8007c3c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007c3e:	6878      	ldr	r0, [r7, #4]
 8007c40:	f000 fab8 	bl	80081b4 <DMA_CalcBaseAndBitshift>
 8007c44:	4603      	mov	r3, r0
 8007c46:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c4c:	223f      	movs	r2, #63	; 0x3f
 8007c4e:	409a      	lsls	r2, r3
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2200      	movs	r2, #0
 8007c58:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	2201      	movs	r2, #1
 8007c5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8007c62:	2300      	movs	r3, #0
}
 8007c64:	4618      	mov	r0, r3
 8007c66:	3718      	adds	r7, #24
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	bd80      	pop	{r7, pc}
 8007c6c:	f010803f 	.word	0xf010803f

08007c70 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b086      	sub	sp, #24
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	60f8      	str	r0, [r7, #12]
 8007c78:	60b9      	str	r1, [r7, #8]
 8007c7a:	607a      	str	r2, [r7, #4]
 8007c7c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007c7e:	2300      	movs	r3, #0
 8007c80:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c86:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007c8e:	2b01      	cmp	r3, #1
 8007c90:	d101      	bne.n	8007c96 <HAL_DMA_Start_IT+0x26>
 8007c92:	2302      	movs	r3, #2
 8007c94:	e040      	b.n	8007d18 <HAL_DMA_Start_IT+0xa8>
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	2201      	movs	r2, #1
 8007c9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007ca4:	b2db      	uxtb	r3, r3
 8007ca6:	2b01      	cmp	r3, #1
 8007ca8:	d12f      	bne.n	8007d0a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	2202      	movs	r2, #2
 8007cae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007cb8:	683b      	ldr	r3, [r7, #0]
 8007cba:	687a      	ldr	r2, [r7, #4]
 8007cbc:	68b9      	ldr	r1, [r7, #8]
 8007cbe:	68f8      	ldr	r0, [r7, #12]
 8007cc0:	f000 fa4a 	bl	8008158 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007cc8:	223f      	movs	r2, #63	; 0x3f
 8007cca:	409a      	lsls	r2, r3
 8007ccc:	693b      	ldr	r3, [r7, #16]
 8007cce:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	681a      	ldr	r2, [r3, #0]
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f042 0216 	orr.w	r2, r2, #22
 8007cde:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d007      	beq.n	8007cf8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	681a      	ldr	r2, [r3, #0]
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	f042 0208 	orr.w	r2, r2, #8
 8007cf6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	681a      	ldr	r2, [r3, #0]
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	f042 0201 	orr.w	r2, r2, #1
 8007d06:	601a      	str	r2, [r3, #0]
 8007d08:	e005      	b.n	8007d16 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8007d12:	2302      	movs	r3, #2
 8007d14:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8007d16:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d18:	4618      	mov	r0, r3
 8007d1a:	3718      	adds	r7, #24
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	bd80      	pop	{r7, pc}

08007d20 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b084      	sub	sp, #16
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d2c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8007d2e:	f7ff f9df 	bl	80070f0 <HAL_GetTick>
 8007d32:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007d3a:	b2db      	uxtb	r3, r3
 8007d3c:	2b02      	cmp	r3, #2
 8007d3e:	d008      	beq.n	8007d52 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2280      	movs	r2, #128	; 0x80
 8007d44:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	2200      	movs	r2, #0
 8007d4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8007d4e:	2301      	movs	r3, #1
 8007d50:	e052      	b.n	8007df8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	681a      	ldr	r2, [r3, #0]
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	f022 0216 	bic.w	r2, r2, #22
 8007d60:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	695a      	ldr	r2, [r3, #20]
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007d70:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d103      	bne.n	8007d82 <HAL_DMA_Abort+0x62>
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d007      	beq.n	8007d92 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	681a      	ldr	r2, [r3, #0]
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	f022 0208 	bic.w	r2, r2, #8
 8007d90:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	681a      	ldr	r2, [r3, #0]
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	f022 0201 	bic.w	r2, r2, #1
 8007da0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007da2:	e013      	b.n	8007dcc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007da4:	f7ff f9a4 	bl	80070f0 <HAL_GetTick>
 8007da8:	4602      	mov	r2, r0
 8007daa:	68bb      	ldr	r3, [r7, #8]
 8007dac:	1ad3      	subs	r3, r2, r3
 8007dae:	2b05      	cmp	r3, #5
 8007db0:	d90c      	bls.n	8007dcc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	2220      	movs	r2, #32
 8007db6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2203      	movs	r2, #3
 8007dbc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8007dc8:	2303      	movs	r3, #3
 8007dca:	e015      	b.n	8007df8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	f003 0301 	and.w	r3, r3, #1
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d1e4      	bne.n	8007da4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007dde:	223f      	movs	r2, #63	; 0x3f
 8007de0:	409a      	lsls	r2, r3
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	2201      	movs	r2, #1
 8007dea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	2200      	movs	r2, #0
 8007df2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8007df6:	2300      	movs	r3, #0
}
 8007df8:	4618      	mov	r0, r3
 8007dfa:	3710      	adds	r7, #16
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	bd80      	pop	{r7, pc}

08007e00 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007e00:	b480      	push	{r7}
 8007e02:	b083      	sub	sp, #12
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007e0e:	b2db      	uxtb	r3, r3
 8007e10:	2b02      	cmp	r3, #2
 8007e12:	d004      	beq.n	8007e1e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2280      	movs	r2, #128	; 0x80
 8007e18:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8007e1a:	2301      	movs	r3, #1
 8007e1c:	e00c      	b.n	8007e38 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2205      	movs	r2, #5
 8007e22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	681a      	ldr	r2, [r3, #0]
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	f022 0201 	bic.w	r2, r2, #1
 8007e34:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007e36:	2300      	movs	r3, #0
}
 8007e38:	4618      	mov	r0, r3
 8007e3a:	370c      	adds	r7, #12
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e42:	4770      	bx	lr

08007e44 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b086      	sub	sp, #24
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007e50:	4b8e      	ldr	r3, [pc, #568]	; (800808c <HAL_DMA_IRQHandler+0x248>)
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	4a8e      	ldr	r2, [pc, #568]	; (8008090 <HAL_DMA_IRQHandler+0x24c>)
 8007e56:	fba2 2303 	umull	r2, r3, r2, r3
 8007e5a:	0a9b      	lsrs	r3, r3, #10
 8007e5c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e62:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8007e64:	693b      	ldr	r3, [r7, #16]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e6e:	2208      	movs	r2, #8
 8007e70:	409a      	lsls	r2, r3
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	4013      	ands	r3, r2
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d01a      	beq.n	8007eb0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	f003 0304 	and.w	r3, r3, #4
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d013      	beq.n	8007eb0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	681a      	ldr	r2, [r3, #0]
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	f022 0204 	bic.w	r2, r2, #4
 8007e96:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e9c:	2208      	movs	r2, #8
 8007e9e:	409a      	lsls	r2, r3
 8007ea0:	693b      	ldr	r3, [r7, #16]
 8007ea2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ea8:	f043 0201 	orr.w	r2, r3, #1
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007eb4:	2201      	movs	r2, #1
 8007eb6:	409a      	lsls	r2, r3
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	4013      	ands	r3, r2
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d012      	beq.n	8007ee6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	695b      	ldr	r3, [r3, #20]
 8007ec6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d00b      	beq.n	8007ee6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ed2:	2201      	movs	r2, #1
 8007ed4:	409a      	lsls	r2, r3
 8007ed6:	693b      	ldr	r3, [r7, #16]
 8007ed8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ede:	f043 0202 	orr.w	r2, r3, #2
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007eea:	2204      	movs	r2, #4
 8007eec:	409a      	lsls	r2, r3
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	4013      	ands	r3, r2
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d012      	beq.n	8007f1c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	f003 0302 	and.w	r3, r3, #2
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d00b      	beq.n	8007f1c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f08:	2204      	movs	r2, #4
 8007f0a:	409a      	lsls	r2, r3
 8007f0c:	693b      	ldr	r3, [r7, #16]
 8007f0e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f14:	f043 0204 	orr.w	r2, r3, #4
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f20:	2210      	movs	r2, #16
 8007f22:	409a      	lsls	r2, r3
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	4013      	ands	r3, r2
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d043      	beq.n	8007fb4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	f003 0308 	and.w	r3, r3, #8
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d03c      	beq.n	8007fb4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f3e:	2210      	movs	r2, #16
 8007f40:	409a      	lsls	r2, r3
 8007f42:	693b      	ldr	r3, [r7, #16]
 8007f44:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d018      	beq.n	8007f86 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d108      	bne.n	8007f74 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d024      	beq.n	8007fb4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f6e:	6878      	ldr	r0, [r7, #4]
 8007f70:	4798      	blx	r3
 8007f72:	e01f      	b.n	8007fb4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d01b      	beq.n	8007fb4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f80:	6878      	ldr	r0, [r7, #4]
 8007f82:	4798      	blx	r3
 8007f84:	e016      	b.n	8007fb4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d107      	bne.n	8007fa4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	681a      	ldr	r2, [r3, #0]
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	f022 0208 	bic.w	r2, r2, #8
 8007fa2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d003      	beq.n	8007fb4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fb0:	6878      	ldr	r0, [r7, #4]
 8007fb2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007fb8:	2220      	movs	r2, #32
 8007fba:	409a      	lsls	r2, r3
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	4013      	ands	r3, r2
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	f000 808f 	beq.w	80080e4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	f003 0310 	and.w	r3, r3, #16
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	f000 8087 	beq.w	80080e4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007fda:	2220      	movs	r2, #32
 8007fdc:	409a      	lsls	r2, r3
 8007fde:	693b      	ldr	r3, [r7, #16]
 8007fe0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007fe8:	b2db      	uxtb	r3, r3
 8007fea:	2b05      	cmp	r3, #5
 8007fec:	d136      	bne.n	800805c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	681a      	ldr	r2, [r3, #0]
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	f022 0216 	bic.w	r2, r2, #22
 8007ffc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	695a      	ldr	r2, [r3, #20]
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800800c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008012:	2b00      	cmp	r3, #0
 8008014:	d103      	bne.n	800801e <HAL_DMA_IRQHandler+0x1da>
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800801a:	2b00      	cmp	r3, #0
 800801c:	d007      	beq.n	800802e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	681a      	ldr	r2, [r3, #0]
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f022 0208 	bic.w	r2, r2, #8
 800802c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008032:	223f      	movs	r2, #63	; 0x3f
 8008034:	409a      	lsls	r2, r3
 8008036:	693b      	ldr	r3, [r7, #16]
 8008038:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	2201      	movs	r2, #1
 800803e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	2200      	movs	r2, #0
 8008046:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800804e:	2b00      	cmp	r3, #0
 8008050:	d07e      	beq.n	8008150 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008056:	6878      	ldr	r0, [r7, #4]
 8008058:	4798      	blx	r3
        }
        return;
 800805a:	e079      	b.n	8008150 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008066:	2b00      	cmp	r3, #0
 8008068:	d01d      	beq.n	80080a6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008074:	2b00      	cmp	r3, #0
 8008076:	d10d      	bne.n	8008094 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800807c:	2b00      	cmp	r3, #0
 800807e:	d031      	beq.n	80080e4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008084:	6878      	ldr	r0, [r7, #4]
 8008086:	4798      	blx	r3
 8008088:	e02c      	b.n	80080e4 <HAL_DMA_IRQHandler+0x2a0>
 800808a:	bf00      	nop
 800808c:	20000068 	.word	0x20000068
 8008090:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008098:	2b00      	cmp	r3, #0
 800809a:	d023      	beq.n	80080e4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080a0:	6878      	ldr	r0, [r7, #4]
 80080a2:	4798      	blx	r3
 80080a4:	e01e      	b.n	80080e4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d10f      	bne.n	80080d4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	681a      	ldr	r2, [r3, #0]
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	f022 0210 	bic.w	r2, r2, #16
 80080c2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2201      	movs	r2, #1
 80080c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2200      	movs	r2, #0
 80080d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d003      	beq.n	80080e4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080e0:	6878      	ldr	r0, [r7, #4]
 80080e2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d032      	beq.n	8008152 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080f0:	f003 0301 	and.w	r3, r3, #1
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d022      	beq.n	800813e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2205      	movs	r2, #5
 80080fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	681a      	ldr	r2, [r3, #0]
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	f022 0201 	bic.w	r2, r2, #1
 800810e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8008110:	68bb      	ldr	r3, [r7, #8]
 8008112:	3301      	adds	r3, #1
 8008114:	60bb      	str	r3, [r7, #8]
 8008116:	697a      	ldr	r2, [r7, #20]
 8008118:	429a      	cmp	r2, r3
 800811a:	d307      	bcc.n	800812c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	f003 0301 	and.w	r3, r3, #1
 8008126:	2b00      	cmp	r3, #0
 8008128:	d1f2      	bne.n	8008110 <HAL_DMA_IRQHandler+0x2cc>
 800812a:	e000      	b.n	800812e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800812c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	2201      	movs	r2, #1
 8008132:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	2200      	movs	r2, #0
 800813a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008142:	2b00      	cmp	r3, #0
 8008144:	d005      	beq.n	8008152 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800814a:	6878      	ldr	r0, [r7, #4]
 800814c:	4798      	blx	r3
 800814e:	e000      	b.n	8008152 <HAL_DMA_IRQHandler+0x30e>
        return;
 8008150:	bf00      	nop
    }
  }
}
 8008152:	3718      	adds	r7, #24
 8008154:	46bd      	mov	sp, r7
 8008156:	bd80      	pop	{r7, pc}

08008158 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008158:	b480      	push	{r7}
 800815a:	b085      	sub	sp, #20
 800815c:	af00      	add	r7, sp, #0
 800815e:	60f8      	str	r0, [r7, #12]
 8008160:	60b9      	str	r1, [r7, #8]
 8008162:	607a      	str	r2, [r7, #4]
 8008164:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	681a      	ldr	r2, [r3, #0]
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008174:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	683a      	ldr	r2, [r7, #0]
 800817c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	689b      	ldr	r3, [r3, #8]
 8008182:	2b40      	cmp	r3, #64	; 0x40
 8008184:	d108      	bne.n	8008198 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	687a      	ldr	r2, [r7, #4]
 800818c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	68ba      	ldr	r2, [r7, #8]
 8008194:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8008196:	e007      	b.n	80081a8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	68ba      	ldr	r2, [r7, #8]
 800819e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	687a      	ldr	r2, [r7, #4]
 80081a6:	60da      	str	r2, [r3, #12]
}
 80081a8:	bf00      	nop
 80081aa:	3714      	adds	r7, #20
 80081ac:	46bd      	mov	sp, r7
 80081ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b2:	4770      	bx	lr

080081b4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80081b4:	b480      	push	{r7}
 80081b6:	b085      	sub	sp, #20
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	b2db      	uxtb	r3, r3
 80081c2:	3b10      	subs	r3, #16
 80081c4:	4a14      	ldr	r2, [pc, #80]	; (8008218 <DMA_CalcBaseAndBitshift+0x64>)
 80081c6:	fba2 2303 	umull	r2, r3, r2, r3
 80081ca:	091b      	lsrs	r3, r3, #4
 80081cc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80081ce:	4a13      	ldr	r2, [pc, #76]	; (800821c <DMA_CalcBaseAndBitshift+0x68>)
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	4413      	add	r3, r2
 80081d4:	781b      	ldrb	r3, [r3, #0]
 80081d6:	461a      	mov	r2, r3
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	2b03      	cmp	r3, #3
 80081e0:	d909      	bls.n	80081f6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80081ea:	f023 0303 	bic.w	r3, r3, #3
 80081ee:	1d1a      	adds	r2, r3, #4
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	659a      	str	r2, [r3, #88]	; 0x58
 80081f4:	e007      	b.n	8008206 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80081fe:	f023 0303 	bic.w	r3, r3, #3
 8008202:	687a      	ldr	r2, [r7, #4]
 8008204:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800820a:	4618      	mov	r0, r3
 800820c:	3714      	adds	r7, #20
 800820e:	46bd      	mov	sp, r7
 8008210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008214:	4770      	bx	lr
 8008216:	bf00      	nop
 8008218:	aaaaaaab 	.word	0xaaaaaaab
 800821c:	08015118 	.word	0x08015118

08008220 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008220:	b480      	push	{r7}
 8008222:	b085      	sub	sp, #20
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008228:	2300      	movs	r3, #0
 800822a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008230:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	699b      	ldr	r3, [r3, #24]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d11f      	bne.n	800827a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800823a:	68bb      	ldr	r3, [r7, #8]
 800823c:	2b03      	cmp	r3, #3
 800823e:	d856      	bhi.n	80082ee <DMA_CheckFifoParam+0xce>
 8008240:	a201      	add	r2, pc, #4	; (adr r2, 8008248 <DMA_CheckFifoParam+0x28>)
 8008242:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008246:	bf00      	nop
 8008248:	08008259 	.word	0x08008259
 800824c:	0800826b 	.word	0x0800826b
 8008250:	08008259 	.word	0x08008259
 8008254:	080082ef 	.word	0x080082ef
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800825c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008260:	2b00      	cmp	r3, #0
 8008262:	d046      	beq.n	80082f2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8008264:	2301      	movs	r3, #1
 8008266:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008268:	e043      	b.n	80082f2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800826e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008272:	d140      	bne.n	80082f6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8008274:	2301      	movs	r3, #1
 8008276:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008278:	e03d      	b.n	80082f6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	699b      	ldr	r3, [r3, #24]
 800827e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008282:	d121      	bne.n	80082c8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8008284:	68bb      	ldr	r3, [r7, #8]
 8008286:	2b03      	cmp	r3, #3
 8008288:	d837      	bhi.n	80082fa <DMA_CheckFifoParam+0xda>
 800828a:	a201      	add	r2, pc, #4	; (adr r2, 8008290 <DMA_CheckFifoParam+0x70>)
 800828c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008290:	080082a1 	.word	0x080082a1
 8008294:	080082a7 	.word	0x080082a7
 8008298:	080082a1 	.word	0x080082a1
 800829c:	080082b9 	.word	0x080082b9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80082a0:	2301      	movs	r3, #1
 80082a2:	73fb      	strb	r3, [r7, #15]
      break;
 80082a4:	e030      	b.n	8008308 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d025      	beq.n	80082fe <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80082b2:	2301      	movs	r3, #1
 80082b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80082b6:	e022      	b.n	80082fe <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082bc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80082c0:	d11f      	bne.n	8008302 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80082c2:	2301      	movs	r3, #1
 80082c4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80082c6:	e01c      	b.n	8008302 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80082c8:	68bb      	ldr	r3, [r7, #8]
 80082ca:	2b02      	cmp	r3, #2
 80082cc:	d903      	bls.n	80082d6 <DMA_CheckFifoParam+0xb6>
 80082ce:	68bb      	ldr	r3, [r7, #8]
 80082d0:	2b03      	cmp	r3, #3
 80082d2:	d003      	beq.n	80082dc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80082d4:	e018      	b.n	8008308 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80082d6:	2301      	movs	r3, #1
 80082d8:	73fb      	strb	r3, [r7, #15]
      break;
 80082da:	e015      	b.n	8008308 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d00e      	beq.n	8008306 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80082e8:	2301      	movs	r3, #1
 80082ea:	73fb      	strb	r3, [r7, #15]
      break;
 80082ec:	e00b      	b.n	8008306 <DMA_CheckFifoParam+0xe6>
      break;
 80082ee:	bf00      	nop
 80082f0:	e00a      	b.n	8008308 <DMA_CheckFifoParam+0xe8>
      break;
 80082f2:	bf00      	nop
 80082f4:	e008      	b.n	8008308 <DMA_CheckFifoParam+0xe8>
      break;
 80082f6:	bf00      	nop
 80082f8:	e006      	b.n	8008308 <DMA_CheckFifoParam+0xe8>
      break;
 80082fa:	bf00      	nop
 80082fc:	e004      	b.n	8008308 <DMA_CheckFifoParam+0xe8>
      break;
 80082fe:	bf00      	nop
 8008300:	e002      	b.n	8008308 <DMA_CheckFifoParam+0xe8>
      break;   
 8008302:	bf00      	nop
 8008304:	e000      	b.n	8008308 <DMA_CheckFifoParam+0xe8>
      break;
 8008306:	bf00      	nop
    }
  } 
  
  return status; 
 8008308:	7bfb      	ldrb	r3, [r7, #15]
}
 800830a:	4618      	mov	r0, r3
 800830c:	3714      	adds	r7, #20
 800830e:	46bd      	mov	sp, r7
 8008310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008314:	4770      	bx	lr
 8008316:	bf00      	nop

08008318 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008318:	b480      	push	{r7}
 800831a:	b089      	sub	sp, #36	; 0x24
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
 8008320:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8008322:	2300      	movs	r3, #0
 8008324:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8008326:	2300      	movs	r3, #0
 8008328:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800832a:	2300      	movs	r3, #0
 800832c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800832e:	2300      	movs	r3, #0
 8008330:	61fb      	str	r3, [r7, #28]
 8008332:	e16b      	b.n	800860c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8008334:	2201      	movs	r2, #1
 8008336:	69fb      	ldr	r3, [r7, #28]
 8008338:	fa02 f303 	lsl.w	r3, r2, r3
 800833c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800833e:	683b      	ldr	r3, [r7, #0]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	697a      	ldr	r2, [r7, #20]
 8008344:	4013      	ands	r3, r2
 8008346:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008348:	693a      	ldr	r2, [r7, #16]
 800834a:	697b      	ldr	r3, [r7, #20]
 800834c:	429a      	cmp	r2, r3
 800834e:	f040 815a 	bne.w	8008606 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008352:	683b      	ldr	r3, [r7, #0]
 8008354:	685b      	ldr	r3, [r3, #4]
 8008356:	f003 0303 	and.w	r3, r3, #3
 800835a:	2b01      	cmp	r3, #1
 800835c:	d005      	beq.n	800836a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800835e:	683b      	ldr	r3, [r7, #0]
 8008360:	685b      	ldr	r3, [r3, #4]
 8008362:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008366:	2b02      	cmp	r3, #2
 8008368:	d130      	bne.n	80083cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	689b      	ldr	r3, [r3, #8]
 800836e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008370:	69fb      	ldr	r3, [r7, #28]
 8008372:	005b      	lsls	r3, r3, #1
 8008374:	2203      	movs	r2, #3
 8008376:	fa02 f303 	lsl.w	r3, r2, r3
 800837a:	43db      	mvns	r3, r3
 800837c:	69ba      	ldr	r2, [r7, #24]
 800837e:	4013      	ands	r3, r2
 8008380:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	68da      	ldr	r2, [r3, #12]
 8008386:	69fb      	ldr	r3, [r7, #28]
 8008388:	005b      	lsls	r3, r3, #1
 800838a:	fa02 f303 	lsl.w	r3, r2, r3
 800838e:	69ba      	ldr	r2, [r7, #24]
 8008390:	4313      	orrs	r3, r2
 8008392:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	69ba      	ldr	r2, [r7, #24]
 8008398:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	685b      	ldr	r3, [r3, #4]
 800839e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80083a0:	2201      	movs	r2, #1
 80083a2:	69fb      	ldr	r3, [r7, #28]
 80083a4:	fa02 f303 	lsl.w	r3, r2, r3
 80083a8:	43db      	mvns	r3, r3
 80083aa:	69ba      	ldr	r2, [r7, #24]
 80083ac:	4013      	ands	r3, r2
 80083ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80083b0:	683b      	ldr	r3, [r7, #0]
 80083b2:	685b      	ldr	r3, [r3, #4]
 80083b4:	091b      	lsrs	r3, r3, #4
 80083b6:	f003 0201 	and.w	r2, r3, #1
 80083ba:	69fb      	ldr	r3, [r7, #28]
 80083bc:	fa02 f303 	lsl.w	r3, r2, r3
 80083c0:	69ba      	ldr	r2, [r7, #24]
 80083c2:	4313      	orrs	r3, r2
 80083c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	69ba      	ldr	r2, [r7, #24]
 80083ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80083cc:	683b      	ldr	r3, [r7, #0]
 80083ce:	685b      	ldr	r3, [r3, #4]
 80083d0:	f003 0303 	and.w	r3, r3, #3
 80083d4:	2b03      	cmp	r3, #3
 80083d6:	d017      	beq.n	8008408 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	68db      	ldr	r3, [r3, #12]
 80083dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80083de:	69fb      	ldr	r3, [r7, #28]
 80083e0:	005b      	lsls	r3, r3, #1
 80083e2:	2203      	movs	r2, #3
 80083e4:	fa02 f303 	lsl.w	r3, r2, r3
 80083e8:	43db      	mvns	r3, r3
 80083ea:	69ba      	ldr	r2, [r7, #24]
 80083ec:	4013      	ands	r3, r2
 80083ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80083f0:	683b      	ldr	r3, [r7, #0]
 80083f2:	689a      	ldr	r2, [r3, #8]
 80083f4:	69fb      	ldr	r3, [r7, #28]
 80083f6:	005b      	lsls	r3, r3, #1
 80083f8:	fa02 f303 	lsl.w	r3, r2, r3
 80083fc:	69ba      	ldr	r2, [r7, #24]
 80083fe:	4313      	orrs	r3, r2
 8008400:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	69ba      	ldr	r2, [r7, #24]
 8008406:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008408:	683b      	ldr	r3, [r7, #0]
 800840a:	685b      	ldr	r3, [r3, #4]
 800840c:	f003 0303 	and.w	r3, r3, #3
 8008410:	2b02      	cmp	r3, #2
 8008412:	d123      	bne.n	800845c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008414:	69fb      	ldr	r3, [r7, #28]
 8008416:	08da      	lsrs	r2, r3, #3
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	3208      	adds	r2, #8
 800841c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008420:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8008422:	69fb      	ldr	r3, [r7, #28]
 8008424:	f003 0307 	and.w	r3, r3, #7
 8008428:	009b      	lsls	r3, r3, #2
 800842a:	220f      	movs	r2, #15
 800842c:	fa02 f303 	lsl.w	r3, r2, r3
 8008430:	43db      	mvns	r3, r3
 8008432:	69ba      	ldr	r2, [r7, #24]
 8008434:	4013      	ands	r3, r2
 8008436:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	691a      	ldr	r2, [r3, #16]
 800843c:	69fb      	ldr	r3, [r7, #28]
 800843e:	f003 0307 	and.w	r3, r3, #7
 8008442:	009b      	lsls	r3, r3, #2
 8008444:	fa02 f303 	lsl.w	r3, r2, r3
 8008448:	69ba      	ldr	r2, [r7, #24]
 800844a:	4313      	orrs	r3, r2
 800844c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800844e:	69fb      	ldr	r3, [r7, #28]
 8008450:	08da      	lsrs	r2, r3, #3
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	3208      	adds	r2, #8
 8008456:	69b9      	ldr	r1, [r7, #24]
 8008458:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8008462:	69fb      	ldr	r3, [r7, #28]
 8008464:	005b      	lsls	r3, r3, #1
 8008466:	2203      	movs	r2, #3
 8008468:	fa02 f303 	lsl.w	r3, r2, r3
 800846c:	43db      	mvns	r3, r3
 800846e:	69ba      	ldr	r2, [r7, #24]
 8008470:	4013      	ands	r3, r2
 8008472:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008474:	683b      	ldr	r3, [r7, #0]
 8008476:	685b      	ldr	r3, [r3, #4]
 8008478:	f003 0203 	and.w	r2, r3, #3
 800847c:	69fb      	ldr	r3, [r7, #28]
 800847e:	005b      	lsls	r3, r3, #1
 8008480:	fa02 f303 	lsl.w	r3, r2, r3
 8008484:	69ba      	ldr	r2, [r7, #24]
 8008486:	4313      	orrs	r3, r2
 8008488:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	69ba      	ldr	r2, [r7, #24]
 800848e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008490:	683b      	ldr	r3, [r7, #0]
 8008492:	685b      	ldr	r3, [r3, #4]
 8008494:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008498:	2b00      	cmp	r3, #0
 800849a:	f000 80b4 	beq.w	8008606 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800849e:	2300      	movs	r3, #0
 80084a0:	60fb      	str	r3, [r7, #12]
 80084a2:	4b60      	ldr	r3, [pc, #384]	; (8008624 <HAL_GPIO_Init+0x30c>)
 80084a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084a6:	4a5f      	ldr	r2, [pc, #380]	; (8008624 <HAL_GPIO_Init+0x30c>)
 80084a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80084ac:	6453      	str	r3, [r2, #68]	; 0x44
 80084ae:	4b5d      	ldr	r3, [pc, #372]	; (8008624 <HAL_GPIO_Init+0x30c>)
 80084b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80084b6:	60fb      	str	r3, [r7, #12]
 80084b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80084ba:	4a5b      	ldr	r2, [pc, #364]	; (8008628 <HAL_GPIO_Init+0x310>)
 80084bc:	69fb      	ldr	r3, [r7, #28]
 80084be:	089b      	lsrs	r3, r3, #2
 80084c0:	3302      	adds	r3, #2
 80084c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80084c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80084c8:	69fb      	ldr	r3, [r7, #28]
 80084ca:	f003 0303 	and.w	r3, r3, #3
 80084ce:	009b      	lsls	r3, r3, #2
 80084d0:	220f      	movs	r2, #15
 80084d2:	fa02 f303 	lsl.w	r3, r2, r3
 80084d6:	43db      	mvns	r3, r3
 80084d8:	69ba      	ldr	r2, [r7, #24]
 80084da:	4013      	ands	r3, r2
 80084dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	4a52      	ldr	r2, [pc, #328]	; (800862c <HAL_GPIO_Init+0x314>)
 80084e2:	4293      	cmp	r3, r2
 80084e4:	d02b      	beq.n	800853e <HAL_GPIO_Init+0x226>
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	4a51      	ldr	r2, [pc, #324]	; (8008630 <HAL_GPIO_Init+0x318>)
 80084ea:	4293      	cmp	r3, r2
 80084ec:	d025      	beq.n	800853a <HAL_GPIO_Init+0x222>
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	4a50      	ldr	r2, [pc, #320]	; (8008634 <HAL_GPIO_Init+0x31c>)
 80084f2:	4293      	cmp	r3, r2
 80084f4:	d01f      	beq.n	8008536 <HAL_GPIO_Init+0x21e>
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	4a4f      	ldr	r2, [pc, #316]	; (8008638 <HAL_GPIO_Init+0x320>)
 80084fa:	4293      	cmp	r3, r2
 80084fc:	d019      	beq.n	8008532 <HAL_GPIO_Init+0x21a>
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	4a4e      	ldr	r2, [pc, #312]	; (800863c <HAL_GPIO_Init+0x324>)
 8008502:	4293      	cmp	r3, r2
 8008504:	d013      	beq.n	800852e <HAL_GPIO_Init+0x216>
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	4a4d      	ldr	r2, [pc, #308]	; (8008640 <HAL_GPIO_Init+0x328>)
 800850a:	4293      	cmp	r3, r2
 800850c:	d00d      	beq.n	800852a <HAL_GPIO_Init+0x212>
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	4a4c      	ldr	r2, [pc, #304]	; (8008644 <HAL_GPIO_Init+0x32c>)
 8008512:	4293      	cmp	r3, r2
 8008514:	d007      	beq.n	8008526 <HAL_GPIO_Init+0x20e>
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	4a4b      	ldr	r2, [pc, #300]	; (8008648 <HAL_GPIO_Init+0x330>)
 800851a:	4293      	cmp	r3, r2
 800851c:	d101      	bne.n	8008522 <HAL_GPIO_Init+0x20a>
 800851e:	2307      	movs	r3, #7
 8008520:	e00e      	b.n	8008540 <HAL_GPIO_Init+0x228>
 8008522:	2308      	movs	r3, #8
 8008524:	e00c      	b.n	8008540 <HAL_GPIO_Init+0x228>
 8008526:	2306      	movs	r3, #6
 8008528:	e00a      	b.n	8008540 <HAL_GPIO_Init+0x228>
 800852a:	2305      	movs	r3, #5
 800852c:	e008      	b.n	8008540 <HAL_GPIO_Init+0x228>
 800852e:	2304      	movs	r3, #4
 8008530:	e006      	b.n	8008540 <HAL_GPIO_Init+0x228>
 8008532:	2303      	movs	r3, #3
 8008534:	e004      	b.n	8008540 <HAL_GPIO_Init+0x228>
 8008536:	2302      	movs	r3, #2
 8008538:	e002      	b.n	8008540 <HAL_GPIO_Init+0x228>
 800853a:	2301      	movs	r3, #1
 800853c:	e000      	b.n	8008540 <HAL_GPIO_Init+0x228>
 800853e:	2300      	movs	r3, #0
 8008540:	69fa      	ldr	r2, [r7, #28]
 8008542:	f002 0203 	and.w	r2, r2, #3
 8008546:	0092      	lsls	r2, r2, #2
 8008548:	4093      	lsls	r3, r2
 800854a:	69ba      	ldr	r2, [r7, #24]
 800854c:	4313      	orrs	r3, r2
 800854e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008550:	4935      	ldr	r1, [pc, #212]	; (8008628 <HAL_GPIO_Init+0x310>)
 8008552:	69fb      	ldr	r3, [r7, #28]
 8008554:	089b      	lsrs	r3, r3, #2
 8008556:	3302      	adds	r3, #2
 8008558:	69ba      	ldr	r2, [r7, #24]
 800855a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800855e:	4b3b      	ldr	r3, [pc, #236]	; (800864c <HAL_GPIO_Init+0x334>)
 8008560:	689b      	ldr	r3, [r3, #8]
 8008562:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008564:	693b      	ldr	r3, [r7, #16]
 8008566:	43db      	mvns	r3, r3
 8008568:	69ba      	ldr	r2, [r7, #24]
 800856a:	4013      	ands	r3, r2
 800856c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	685b      	ldr	r3, [r3, #4]
 8008572:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008576:	2b00      	cmp	r3, #0
 8008578:	d003      	beq.n	8008582 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800857a:	69ba      	ldr	r2, [r7, #24]
 800857c:	693b      	ldr	r3, [r7, #16]
 800857e:	4313      	orrs	r3, r2
 8008580:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8008582:	4a32      	ldr	r2, [pc, #200]	; (800864c <HAL_GPIO_Init+0x334>)
 8008584:	69bb      	ldr	r3, [r7, #24]
 8008586:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008588:	4b30      	ldr	r3, [pc, #192]	; (800864c <HAL_GPIO_Init+0x334>)
 800858a:	68db      	ldr	r3, [r3, #12]
 800858c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800858e:	693b      	ldr	r3, [r7, #16]
 8008590:	43db      	mvns	r3, r3
 8008592:	69ba      	ldr	r2, [r7, #24]
 8008594:	4013      	ands	r3, r2
 8008596:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008598:	683b      	ldr	r3, [r7, #0]
 800859a:	685b      	ldr	r3, [r3, #4]
 800859c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d003      	beq.n	80085ac <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80085a4:	69ba      	ldr	r2, [r7, #24]
 80085a6:	693b      	ldr	r3, [r7, #16]
 80085a8:	4313      	orrs	r3, r2
 80085aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80085ac:	4a27      	ldr	r2, [pc, #156]	; (800864c <HAL_GPIO_Init+0x334>)
 80085ae:	69bb      	ldr	r3, [r7, #24]
 80085b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80085b2:	4b26      	ldr	r3, [pc, #152]	; (800864c <HAL_GPIO_Init+0x334>)
 80085b4:	685b      	ldr	r3, [r3, #4]
 80085b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80085b8:	693b      	ldr	r3, [r7, #16]
 80085ba:	43db      	mvns	r3, r3
 80085bc:	69ba      	ldr	r2, [r7, #24]
 80085be:	4013      	ands	r3, r2
 80085c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80085c2:	683b      	ldr	r3, [r7, #0]
 80085c4:	685b      	ldr	r3, [r3, #4]
 80085c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d003      	beq.n	80085d6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80085ce:	69ba      	ldr	r2, [r7, #24]
 80085d0:	693b      	ldr	r3, [r7, #16]
 80085d2:	4313      	orrs	r3, r2
 80085d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80085d6:	4a1d      	ldr	r2, [pc, #116]	; (800864c <HAL_GPIO_Init+0x334>)
 80085d8:	69bb      	ldr	r3, [r7, #24]
 80085da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80085dc:	4b1b      	ldr	r3, [pc, #108]	; (800864c <HAL_GPIO_Init+0x334>)
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80085e2:	693b      	ldr	r3, [r7, #16]
 80085e4:	43db      	mvns	r3, r3
 80085e6:	69ba      	ldr	r2, [r7, #24]
 80085e8:	4013      	ands	r3, r2
 80085ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	685b      	ldr	r3, [r3, #4]
 80085f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d003      	beq.n	8008600 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80085f8:	69ba      	ldr	r2, [r7, #24]
 80085fa:	693b      	ldr	r3, [r7, #16]
 80085fc:	4313      	orrs	r3, r2
 80085fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008600:	4a12      	ldr	r2, [pc, #72]	; (800864c <HAL_GPIO_Init+0x334>)
 8008602:	69bb      	ldr	r3, [r7, #24]
 8008604:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008606:	69fb      	ldr	r3, [r7, #28]
 8008608:	3301      	adds	r3, #1
 800860a:	61fb      	str	r3, [r7, #28]
 800860c:	69fb      	ldr	r3, [r7, #28]
 800860e:	2b0f      	cmp	r3, #15
 8008610:	f67f ae90 	bls.w	8008334 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008614:	bf00      	nop
 8008616:	bf00      	nop
 8008618:	3724      	adds	r7, #36	; 0x24
 800861a:	46bd      	mov	sp, r7
 800861c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008620:	4770      	bx	lr
 8008622:	bf00      	nop
 8008624:	40023800 	.word	0x40023800
 8008628:	40013800 	.word	0x40013800
 800862c:	40020000 	.word	0x40020000
 8008630:	40020400 	.word	0x40020400
 8008634:	40020800 	.word	0x40020800
 8008638:	40020c00 	.word	0x40020c00
 800863c:	40021000 	.word	0x40021000
 8008640:	40021400 	.word	0x40021400
 8008644:	40021800 	.word	0x40021800
 8008648:	40021c00 	.word	0x40021c00
 800864c:	40013c00 	.word	0x40013c00

08008650 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008650:	b480      	push	{r7}
 8008652:	b083      	sub	sp, #12
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
 8008658:	460b      	mov	r3, r1
 800865a:	807b      	strh	r3, [r7, #2]
 800865c:	4613      	mov	r3, r2
 800865e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008660:	787b      	ldrb	r3, [r7, #1]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d003      	beq.n	800866e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008666:	887a      	ldrh	r2, [r7, #2]
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800866c:	e003      	b.n	8008676 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800866e:	887b      	ldrh	r3, [r7, #2]
 8008670:	041a      	lsls	r2, r3, #16
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	619a      	str	r2, [r3, #24]
}
 8008676:	bf00      	nop
 8008678:	370c      	adds	r7, #12
 800867a:	46bd      	mov	sp, r7
 800867c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008680:	4770      	bx	lr

08008682 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008682:	b480      	push	{r7}
 8008684:	b085      	sub	sp, #20
 8008686:	af00      	add	r7, sp, #0
 8008688:	6078      	str	r0, [r7, #4]
 800868a:	460b      	mov	r3, r1
 800868c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	695b      	ldr	r3, [r3, #20]
 8008692:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8008694:	887a      	ldrh	r2, [r7, #2]
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	4013      	ands	r3, r2
 800869a:	041a      	lsls	r2, r3, #16
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	43d9      	mvns	r1, r3
 80086a0:	887b      	ldrh	r3, [r7, #2]
 80086a2:	400b      	ands	r3, r1
 80086a4:	431a      	orrs	r2, r3
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	619a      	str	r2, [r3, #24]
}
 80086aa:	bf00      	nop
 80086ac:	3714      	adds	r7, #20
 80086ae:	46bd      	mov	sp, r7
 80086b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b4:	4770      	bx	lr
	...

080086b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	b082      	sub	sp, #8
 80086bc:	af00      	add	r7, sp, #0
 80086be:	4603      	mov	r3, r0
 80086c0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80086c2:	4b08      	ldr	r3, [pc, #32]	; (80086e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80086c4:	695a      	ldr	r2, [r3, #20]
 80086c6:	88fb      	ldrh	r3, [r7, #6]
 80086c8:	4013      	ands	r3, r2
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d006      	beq.n	80086dc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80086ce:	4a05      	ldr	r2, [pc, #20]	; (80086e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80086d0:	88fb      	ldrh	r3, [r7, #6]
 80086d2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80086d4:	88fb      	ldrh	r3, [r7, #6]
 80086d6:	4618      	mov	r0, r3
 80086d8:	f7f9 fc20 	bl	8001f1c <HAL_GPIO_EXTI_Callback>
  }
}
 80086dc:	bf00      	nop
 80086de:	3708      	adds	r7, #8
 80086e0:	46bd      	mov	sp, r7
 80086e2:	bd80      	pop	{r7, pc}
 80086e4:	40013c00 	.word	0x40013c00

080086e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80086e8:	b580      	push	{r7, lr}
 80086ea:	b084      	sub	sp, #16
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d101      	bne.n	80086fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80086f6:	2301      	movs	r3, #1
 80086f8:	e12b      	b.n	8008952 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008700:	b2db      	uxtb	r3, r3
 8008702:	2b00      	cmp	r3, #0
 8008704:	d106      	bne.n	8008714 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	2200      	movs	r2, #0
 800870a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800870e:	6878      	ldr	r0, [r7, #4]
 8008710:	f7fd ffba 	bl	8006688 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	2224      	movs	r2, #36	; 0x24
 8008718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	681a      	ldr	r2, [r3, #0]
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	f022 0201 	bic.w	r2, r2, #1
 800872a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	681a      	ldr	r2, [r3, #0]
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800873a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	681a      	ldr	r2, [r3, #0]
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800874a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800874c:	f001 fd52 	bl	800a1f4 <HAL_RCC_GetPCLK1Freq>
 8008750:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	685b      	ldr	r3, [r3, #4]
 8008756:	4a81      	ldr	r2, [pc, #516]	; (800895c <HAL_I2C_Init+0x274>)
 8008758:	4293      	cmp	r3, r2
 800875a:	d807      	bhi.n	800876c <HAL_I2C_Init+0x84>
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	4a80      	ldr	r2, [pc, #512]	; (8008960 <HAL_I2C_Init+0x278>)
 8008760:	4293      	cmp	r3, r2
 8008762:	bf94      	ite	ls
 8008764:	2301      	movls	r3, #1
 8008766:	2300      	movhi	r3, #0
 8008768:	b2db      	uxtb	r3, r3
 800876a:	e006      	b.n	800877a <HAL_I2C_Init+0x92>
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	4a7d      	ldr	r2, [pc, #500]	; (8008964 <HAL_I2C_Init+0x27c>)
 8008770:	4293      	cmp	r3, r2
 8008772:	bf94      	ite	ls
 8008774:	2301      	movls	r3, #1
 8008776:	2300      	movhi	r3, #0
 8008778:	b2db      	uxtb	r3, r3
 800877a:	2b00      	cmp	r3, #0
 800877c:	d001      	beq.n	8008782 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800877e:	2301      	movs	r3, #1
 8008780:	e0e7      	b.n	8008952 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	4a78      	ldr	r2, [pc, #480]	; (8008968 <HAL_I2C_Init+0x280>)
 8008786:	fba2 2303 	umull	r2, r3, r2, r3
 800878a:	0c9b      	lsrs	r3, r3, #18
 800878c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	685b      	ldr	r3, [r3, #4]
 8008794:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	68ba      	ldr	r2, [r7, #8]
 800879e:	430a      	orrs	r2, r1
 80087a0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	6a1b      	ldr	r3, [r3, #32]
 80087a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	685b      	ldr	r3, [r3, #4]
 80087b0:	4a6a      	ldr	r2, [pc, #424]	; (800895c <HAL_I2C_Init+0x274>)
 80087b2:	4293      	cmp	r3, r2
 80087b4:	d802      	bhi.n	80087bc <HAL_I2C_Init+0xd4>
 80087b6:	68bb      	ldr	r3, [r7, #8]
 80087b8:	3301      	adds	r3, #1
 80087ba:	e009      	b.n	80087d0 <HAL_I2C_Init+0xe8>
 80087bc:	68bb      	ldr	r3, [r7, #8]
 80087be:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80087c2:	fb02 f303 	mul.w	r3, r2, r3
 80087c6:	4a69      	ldr	r2, [pc, #420]	; (800896c <HAL_I2C_Init+0x284>)
 80087c8:	fba2 2303 	umull	r2, r3, r2, r3
 80087cc:	099b      	lsrs	r3, r3, #6
 80087ce:	3301      	adds	r3, #1
 80087d0:	687a      	ldr	r2, [r7, #4]
 80087d2:	6812      	ldr	r2, [r2, #0]
 80087d4:	430b      	orrs	r3, r1
 80087d6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	69db      	ldr	r3, [r3, #28]
 80087de:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80087e2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	685b      	ldr	r3, [r3, #4]
 80087ea:	495c      	ldr	r1, [pc, #368]	; (800895c <HAL_I2C_Init+0x274>)
 80087ec:	428b      	cmp	r3, r1
 80087ee:	d819      	bhi.n	8008824 <HAL_I2C_Init+0x13c>
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	1e59      	subs	r1, r3, #1
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	685b      	ldr	r3, [r3, #4]
 80087f8:	005b      	lsls	r3, r3, #1
 80087fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80087fe:	1c59      	adds	r1, r3, #1
 8008800:	f640 73fc 	movw	r3, #4092	; 0xffc
 8008804:	400b      	ands	r3, r1
 8008806:	2b00      	cmp	r3, #0
 8008808:	d00a      	beq.n	8008820 <HAL_I2C_Init+0x138>
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	1e59      	subs	r1, r3, #1
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	685b      	ldr	r3, [r3, #4]
 8008812:	005b      	lsls	r3, r3, #1
 8008814:	fbb1 f3f3 	udiv	r3, r1, r3
 8008818:	3301      	adds	r3, #1
 800881a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800881e:	e051      	b.n	80088c4 <HAL_I2C_Init+0x1dc>
 8008820:	2304      	movs	r3, #4
 8008822:	e04f      	b.n	80088c4 <HAL_I2C_Init+0x1dc>
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	689b      	ldr	r3, [r3, #8]
 8008828:	2b00      	cmp	r3, #0
 800882a:	d111      	bne.n	8008850 <HAL_I2C_Init+0x168>
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	1e58      	subs	r0, r3, #1
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	6859      	ldr	r1, [r3, #4]
 8008834:	460b      	mov	r3, r1
 8008836:	005b      	lsls	r3, r3, #1
 8008838:	440b      	add	r3, r1
 800883a:	fbb0 f3f3 	udiv	r3, r0, r3
 800883e:	3301      	adds	r3, #1
 8008840:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008844:	2b00      	cmp	r3, #0
 8008846:	bf0c      	ite	eq
 8008848:	2301      	moveq	r3, #1
 800884a:	2300      	movne	r3, #0
 800884c:	b2db      	uxtb	r3, r3
 800884e:	e012      	b.n	8008876 <HAL_I2C_Init+0x18e>
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	1e58      	subs	r0, r3, #1
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	6859      	ldr	r1, [r3, #4]
 8008858:	460b      	mov	r3, r1
 800885a:	009b      	lsls	r3, r3, #2
 800885c:	440b      	add	r3, r1
 800885e:	0099      	lsls	r1, r3, #2
 8008860:	440b      	add	r3, r1
 8008862:	fbb0 f3f3 	udiv	r3, r0, r3
 8008866:	3301      	adds	r3, #1
 8008868:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800886c:	2b00      	cmp	r3, #0
 800886e:	bf0c      	ite	eq
 8008870:	2301      	moveq	r3, #1
 8008872:	2300      	movne	r3, #0
 8008874:	b2db      	uxtb	r3, r3
 8008876:	2b00      	cmp	r3, #0
 8008878:	d001      	beq.n	800887e <HAL_I2C_Init+0x196>
 800887a:	2301      	movs	r3, #1
 800887c:	e022      	b.n	80088c4 <HAL_I2C_Init+0x1dc>
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	689b      	ldr	r3, [r3, #8]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d10e      	bne.n	80088a4 <HAL_I2C_Init+0x1bc>
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	1e58      	subs	r0, r3, #1
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	6859      	ldr	r1, [r3, #4]
 800888e:	460b      	mov	r3, r1
 8008890:	005b      	lsls	r3, r3, #1
 8008892:	440b      	add	r3, r1
 8008894:	fbb0 f3f3 	udiv	r3, r0, r3
 8008898:	3301      	adds	r3, #1
 800889a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800889e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80088a2:	e00f      	b.n	80088c4 <HAL_I2C_Init+0x1dc>
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	1e58      	subs	r0, r3, #1
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	6859      	ldr	r1, [r3, #4]
 80088ac:	460b      	mov	r3, r1
 80088ae:	009b      	lsls	r3, r3, #2
 80088b0:	440b      	add	r3, r1
 80088b2:	0099      	lsls	r1, r3, #2
 80088b4:	440b      	add	r3, r1
 80088b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80088ba:	3301      	adds	r3, #1
 80088bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80088c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80088c4:	6879      	ldr	r1, [r7, #4]
 80088c6:	6809      	ldr	r1, [r1, #0]
 80088c8:	4313      	orrs	r3, r2
 80088ca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	69da      	ldr	r2, [r3, #28]
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	6a1b      	ldr	r3, [r3, #32]
 80088de:	431a      	orrs	r2, r3
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	430a      	orrs	r2, r1
 80088e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	689b      	ldr	r3, [r3, #8]
 80088ee:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80088f2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80088f6:	687a      	ldr	r2, [r7, #4]
 80088f8:	6911      	ldr	r1, [r2, #16]
 80088fa:	687a      	ldr	r2, [r7, #4]
 80088fc:	68d2      	ldr	r2, [r2, #12]
 80088fe:	4311      	orrs	r1, r2
 8008900:	687a      	ldr	r2, [r7, #4]
 8008902:	6812      	ldr	r2, [r2, #0]
 8008904:	430b      	orrs	r3, r1
 8008906:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	68db      	ldr	r3, [r3, #12]
 800890e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	695a      	ldr	r2, [r3, #20]
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	699b      	ldr	r3, [r3, #24]
 800891a:	431a      	orrs	r2, r3
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	430a      	orrs	r2, r1
 8008922:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	681a      	ldr	r2, [r3, #0]
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	f042 0201 	orr.w	r2, r2, #1
 8008932:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	2200      	movs	r2, #0
 8008938:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	2220      	movs	r2, #32
 800893e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	2200      	movs	r2, #0
 8008946:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	2200      	movs	r2, #0
 800894c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008950:	2300      	movs	r3, #0
}
 8008952:	4618      	mov	r0, r3
 8008954:	3710      	adds	r7, #16
 8008956:	46bd      	mov	sp, r7
 8008958:	bd80      	pop	{r7, pc}
 800895a:	bf00      	nop
 800895c:	000186a0 	.word	0x000186a0
 8008960:	001e847f 	.word	0x001e847f
 8008964:	003d08ff 	.word	0x003d08ff
 8008968:	431bde83 	.word	0x431bde83
 800896c:	10624dd3 	.word	0x10624dd3

08008970 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008970:	b580      	push	{r7, lr}
 8008972:	b088      	sub	sp, #32
 8008974:	af02      	add	r7, sp, #8
 8008976:	60f8      	str	r0, [r7, #12]
 8008978:	4608      	mov	r0, r1
 800897a:	4611      	mov	r1, r2
 800897c:	461a      	mov	r2, r3
 800897e:	4603      	mov	r3, r0
 8008980:	817b      	strh	r3, [r7, #10]
 8008982:	460b      	mov	r3, r1
 8008984:	813b      	strh	r3, [r7, #8]
 8008986:	4613      	mov	r3, r2
 8008988:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800898a:	f7fe fbb1 	bl	80070f0 <HAL_GetTick>
 800898e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008996:	b2db      	uxtb	r3, r3
 8008998:	2b20      	cmp	r3, #32
 800899a:	f040 80d9 	bne.w	8008b50 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800899e:	697b      	ldr	r3, [r7, #20]
 80089a0:	9300      	str	r3, [sp, #0]
 80089a2:	2319      	movs	r3, #25
 80089a4:	2201      	movs	r2, #1
 80089a6:	496d      	ldr	r1, [pc, #436]	; (8008b5c <HAL_I2C_Mem_Write+0x1ec>)
 80089a8:	68f8      	ldr	r0, [r7, #12]
 80089aa:	f000 fdad 	bl	8009508 <I2C_WaitOnFlagUntilTimeout>
 80089ae:	4603      	mov	r3, r0
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d001      	beq.n	80089b8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80089b4:	2302      	movs	r3, #2
 80089b6:	e0cc      	b.n	8008b52 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80089be:	2b01      	cmp	r3, #1
 80089c0:	d101      	bne.n	80089c6 <HAL_I2C_Mem_Write+0x56>
 80089c2:	2302      	movs	r3, #2
 80089c4:	e0c5      	b.n	8008b52 <HAL_I2C_Mem_Write+0x1e2>
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	2201      	movs	r2, #1
 80089ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	f003 0301 	and.w	r3, r3, #1
 80089d8:	2b01      	cmp	r3, #1
 80089da:	d007      	beq.n	80089ec <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	681a      	ldr	r2, [r3, #0]
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	f042 0201 	orr.w	r2, r2, #1
 80089ea:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	681a      	ldr	r2, [r3, #0]
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80089fa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	2221      	movs	r2, #33	; 0x21
 8008a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	2240      	movs	r2, #64	; 0x40
 8008a08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	2200      	movs	r2, #0
 8008a10:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	6a3a      	ldr	r2, [r7, #32]
 8008a16:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008a1c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a22:	b29a      	uxth	r2, r3
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	4a4d      	ldr	r2, [pc, #308]	; (8008b60 <HAL_I2C_Mem_Write+0x1f0>)
 8008a2c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008a2e:	88f8      	ldrh	r0, [r7, #6]
 8008a30:	893a      	ldrh	r2, [r7, #8]
 8008a32:	8979      	ldrh	r1, [r7, #10]
 8008a34:	697b      	ldr	r3, [r7, #20]
 8008a36:	9301      	str	r3, [sp, #4]
 8008a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a3a:	9300      	str	r3, [sp, #0]
 8008a3c:	4603      	mov	r3, r0
 8008a3e:	68f8      	ldr	r0, [r7, #12]
 8008a40:	f000 fbe4 	bl	800920c <I2C_RequestMemoryWrite>
 8008a44:	4603      	mov	r3, r0
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d052      	beq.n	8008af0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8008a4a:	2301      	movs	r3, #1
 8008a4c:	e081      	b.n	8008b52 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008a4e:	697a      	ldr	r2, [r7, #20]
 8008a50:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008a52:	68f8      	ldr	r0, [r7, #12]
 8008a54:	f000 fe2e 	bl	80096b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8008a58:	4603      	mov	r3, r0
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d00d      	beq.n	8008a7a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a62:	2b04      	cmp	r3, #4
 8008a64:	d107      	bne.n	8008a76 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	681a      	ldr	r2, [r3, #0]
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008a74:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008a76:	2301      	movs	r3, #1
 8008a78:	e06b      	b.n	8008b52 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a7e:	781a      	ldrb	r2, [r3, #0]
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a8a:	1c5a      	adds	r2, r3, #1
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a94:	3b01      	subs	r3, #1
 8008a96:	b29a      	uxth	r2, r3
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008aa0:	b29b      	uxth	r3, r3
 8008aa2:	3b01      	subs	r3, #1
 8008aa4:	b29a      	uxth	r2, r3
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	695b      	ldr	r3, [r3, #20]
 8008ab0:	f003 0304 	and.w	r3, r3, #4
 8008ab4:	2b04      	cmp	r3, #4
 8008ab6:	d11b      	bne.n	8008af0 <HAL_I2C_Mem_Write+0x180>
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d017      	beq.n	8008af0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ac4:	781a      	ldrb	r2, [r3, #0]
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ad0:	1c5a      	adds	r2, r3, #1
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ada:	3b01      	subs	r3, #1
 8008adc:	b29a      	uxth	r2, r3
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ae6:	b29b      	uxth	r3, r3
 8008ae8:	3b01      	subs	r3, #1
 8008aea:	b29a      	uxth	r2, r3
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d1aa      	bne.n	8008a4e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008af8:	697a      	ldr	r2, [r7, #20]
 8008afa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008afc:	68f8      	ldr	r0, [r7, #12]
 8008afe:	f000 fe1a 	bl	8009736 <I2C_WaitOnBTFFlagUntilTimeout>
 8008b02:	4603      	mov	r3, r0
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d00d      	beq.n	8008b24 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b0c:	2b04      	cmp	r3, #4
 8008b0e:	d107      	bne.n	8008b20 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	681a      	ldr	r2, [r3, #0]
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008b1e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008b20:	2301      	movs	r3, #1
 8008b22:	e016      	b.n	8008b52 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	681a      	ldr	r2, [r3, #0]
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008b32:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	2220      	movs	r2, #32
 8008b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	2200      	movs	r2, #0
 8008b40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	2200      	movs	r2, #0
 8008b48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008b4c:	2300      	movs	r3, #0
 8008b4e:	e000      	b.n	8008b52 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8008b50:	2302      	movs	r3, #2
  }
}
 8008b52:	4618      	mov	r0, r3
 8008b54:	3718      	adds	r7, #24
 8008b56:	46bd      	mov	sp, r7
 8008b58:	bd80      	pop	{r7, pc}
 8008b5a:	bf00      	nop
 8008b5c:	00100002 	.word	0x00100002
 8008b60:	ffff0000 	.word	0xffff0000

08008b64 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008b64:	b580      	push	{r7, lr}
 8008b66:	b08c      	sub	sp, #48	; 0x30
 8008b68:	af02      	add	r7, sp, #8
 8008b6a:	60f8      	str	r0, [r7, #12]
 8008b6c:	4608      	mov	r0, r1
 8008b6e:	4611      	mov	r1, r2
 8008b70:	461a      	mov	r2, r3
 8008b72:	4603      	mov	r3, r0
 8008b74:	817b      	strh	r3, [r7, #10]
 8008b76:	460b      	mov	r3, r1
 8008b78:	813b      	strh	r3, [r7, #8]
 8008b7a:	4613      	mov	r3, r2
 8008b7c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008b7e:	f7fe fab7 	bl	80070f0 <HAL_GetTick>
 8008b82:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b8a:	b2db      	uxtb	r3, r3
 8008b8c:	2b20      	cmp	r3, #32
 8008b8e:	f040 8208 	bne.w	8008fa2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b94:	9300      	str	r3, [sp, #0]
 8008b96:	2319      	movs	r3, #25
 8008b98:	2201      	movs	r2, #1
 8008b9a:	497b      	ldr	r1, [pc, #492]	; (8008d88 <HAL_I2C_Mem_Read+0x224>)
 8008b9c:	68f8      	ldr	r0, [r7, #12]
 8008b9e:	f000 fcb3 	bl	8009508 <I2C_WaitOnFlagUntilTimeout>
 8008ba2:	4603      	mov	r3, r0
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d001      	beq.n	8008bac <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8008ba8:	2302      	movs	r3, #2
 8008baa:	e1fb      	b.n	8008fa4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008bb2:	2b01      	cmp	r3, #1
 8008bb4:	d101      	bne.n	8008bba <HAL_I2C_Mem_Read+0x56>
 8008bb6:	2302      	movs	r3, #2
 8008bb8:	e1f4      	b.n	8008fa4 <HAL_I2C_Mem_Read+0x440>
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	2201      	movs	r2, #1
 8008bbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	f003 0301 	and.w	r3, r3, #1
 8008bcc:	2b01      	cmp	r3, #1
 8008bce:	d007      	beq.n	8008be0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	681a      	ldr	r2, [r3, #0]
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	f042 0201 	orr.w	r2, r2, #1
 8008bde:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	681a      	ldr	r2, [r3, #0]
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008bee:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	2222      	movs	r2, #34	; 0x22
 8008bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	2240      	movs	r2, #64	; 0x40
 8008bfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	2200      	movs	r2, #0
 8008c04:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c0a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8008c10:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c16:	b29a      	uxth	r2, r3
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	4a5b      	ldr	r2, [pc, #364]	; (8008d8c <HAL_I2C_Mem_Read+0x228>)
 8008c20:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008c22:	88f8      	ldrh	r0, [r7, #6]
 8008c24:	893a      	ldrh	r2, [r7, #8]
 8008c26:	8979      	ldrh	r1, [r7, #10]
 8008c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c2a:	9301      	str	r3, [sp, #4]
 8008c2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c2e:	9300      	str	r3, [sp, #0]
 8008c30:	4603      	mov	r3, r0
 8008c32:	68f8      	ldr	r0, [r7, #12]
 8008c34:	f000 fb80 	bl	8009338 <I2C_RequestMemoryRead>
 8008c38:	4603      	mov	r3, r0
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d001      	beq.n	8008c42 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8008c3e:	2301      	movs	r3, #1
 8008c40:	e1b0      	b.n	8008fa4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d113      	bne.n	8008c72 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	623b      	str	r3, [r7, #32]
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	695b      	ldr	r3, [r3, #20]
 8008c54:	623b      	str	r3, [r7, #32]
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	699b      	ldr	r3, [r3, #24]
 8008c5c:	623b      	str	r3, [r7, #32]
 8008c5e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	681a      	ldr	r2, [r3, #0]
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008c6e:	601a      	str	r2, [r3, #0]
 8008c70:	e184      	b.n	8008f7c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c76:	2b01      	cmp	r3, #1
 8008c78:	d11b      	bne.n	8008cb2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	681a      	ldr	r2, [r3, #0]
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008c88:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	61fb      	str	r3, [r7, #28]
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	695b      	ldr	r3, [r3, #20]
 8008c94:	61fb      	str	r3, [r7, #28]
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	699b      	ldr	r3, [r3, #24]
 8008c9c:	61fb      	str	r3, [r7, #28]
 8008c9e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	681a      	ldr	r2, [r3, #0]
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008cae:	601a      	str	r2, [r3, #0]
 8008cb0:	e164      	b.n	8008f7c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008cb6:	2b02      	cmp	r3, #2
 8008cb8:	d11b      	bne.n	8008cf2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	681a      	ldr	r2, [r3, #0]
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008cc8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	681a      	ldr	r2, [r3, #0]
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008cd8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008cda:	2300      	movs	r3, #0
 8008cdc:	61bb      	str	r3, [r7, #24]
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	695b      	ldr	r3, [r3, #20]
 8008ce4:	61bb      	str	r3, [r7, #24]
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	699b      	ldr	r3, [r3, #24]
 8008cec:	61bb      	str	r3, [r7, #24]
 8008cee:	69bb      	ldr	r3, [r7, #24]
 8008cf0:	e144      	b.n	8008f7c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	617b      	str	r3, [r7, #20]
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	695b      	ldr	r3, [r3, #20]
 8008cfc:	617b      	str	r3, [r7, #20]
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	699b      	ldr	r3, [r3, #24]
 8008d04:	617b      	str	r3, [r7, #20]
 8008d06:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8008d08:	e138      	b.n	8008f7c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008d0e:	2b03      	cmp	r3, #3
 8008d10:	f200 80f1 	bhi.w	8008ef6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008d18:	2b01      	cmp	r3, #1
 8008d1a:	d123      	bne.n	8008d64 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008d1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d1e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008d20:	68f8      	ldr	r0, [r7, #12]
 8008d22:	f000 fd49 	bl	80097b8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008d26:	4603      	mov	r3, r0
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d001      	beq.n	8008d30 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8008d2c:	2301      	movs	r3, #1
 8008d2e:	e139      	b.n	8008fa4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	691a      	ldr	r2, [r3, #16]
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d3a:	b2d2      	uxtb	r2, r2
 8008d3c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d42:	1c5a      	adds	r2, r3, #1
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008d4c:	3b01      	subs	r3, #1
 8008d4e:	b29a      	uxth	r2, r3
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d58:	b29b      	uxth	r3, r3
 8008d5a:	3b01      	subs	r3, #1
 8008d5c:	b29a      	uxth	r2, r3
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008d62:	e10b      	b.n	8008f7c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008d68:	2b02      	cmp	r3, #2
 8008d6a:	d14e      	bne.n	8008e0a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d6e:	9300      	str	r3, [sp, #0]
 8008d70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d72:	2200      	movs	r2, #0
 8008d74:	4906      	ldr	r1, [pc, #24]	; (8008d90 <HAL_I2C_Mem_Read+0x22c>)
 8008d76:	68f8      	ldr	r0, [r7, #12]
 8008d78:	f000 fbc6 	bl	8009508 <I2C_WaitOnFlagUntilTimeout>
 8008d7c:	4603      	mov	r3, r0
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d008      	beq.n	8008d94 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8008d82:	2301      	movs	r3, #1
 8008d84:	e10e      	b.n	8008fa4 <HAL_I2C_Mem_Read+0x440>
 8008d86:	bf00      	nop
 8008d88:	00100002 	.word	0x00100002
 8008d8c:	ffff0000 	.word	0xffff0000
 8008d90:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	681a      	ldr	r2, [r3, #0]
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008da2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	691a      	ldr	r2, [r3, #16]
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dae:	b2d2      	uxtb	r2, r2
 8008db0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008db6:	1c5a      	adds	r2, r3, #1
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008dc0:	3b01      	subs	r3, #1
 8008dc2:	b29a      	uxth	r2, r3
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008dcc:	b29b      	uxth	r3, r3
 8008dce:	3b01      	subs	r3, #1
 8008dd0:	b29a      	uxth	r2, r3
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	691a      	ldr	r2, [r3, #16]
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008de0:	b2d2      	uxtb	r2, r2
 8008de2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008de8:	1c5a      	adds	r2, r3, #1
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008df2:	3b01      	subs	r3, #1
 8008df4:	b29a      	uxth	r2, r3
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008dfe:	b29b      	uxth	r3, r3
 8008e00:	3b01      	subs	r3, #1
 8008e02:	b29a      	uxth	r2, r3
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008e08:	e0b8      	b.n	8008f7c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e0c:	9300      	str	r3, [sp, #0]
 8008e0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e10:	2200      	movs	r2, #0
 8008e12:	4966      	ldr	r1, [pc, #408]	; (8008fac <HAL_I2C_Mem_Read+0x448>)
 8008e14:	68f8      	ldr	r0, [r7, #12]
 8008e16:	f000 fb77 	bl	8009508 <I2C_WaitOnFlagUntilTimeout>
 8008e1a:	4603      	mov	r3, r0
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d001      	beq.n	8008e24 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8008e20:	2301      	movs	r3, #1
 8008e22:	e0bf      	b.n	8008fa4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	681a      	ldr	r2, [r3, #0]
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008e32:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	691a      	ldr	r2, [r3, #16]
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e3e:	b2d2      	uxtb	r2, r2
 8008e40:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e46:	1c5a      	adds	r2, r3, #1
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e50:	3b01      	subs	r3, #1
 8008e52:	b29a      	uxth	r2, r3
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e5c:	b29b      	uxth	r3, r3
 8008e5e:	3b01      	subs	r3, #1
 8008e60:	b29a      	uxth	r2, r3
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e68:	9300      	str	r3, [sp, #0]
 8008e6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e6c:	2200      	movs	r2, #0
 8008e6e:	494f      	ldr	r1, [pc, #316]	; (8008fac <HAL_I2C_Mem_Read+0x448>)
 8008e70:	68f8      	ldr	r0, [r7, #12]
 8008e72:	f000 fb49 	bl	8009508 <I2C_WaitOnFlagUntilTimeout>
 8008e76:	4603      	mov	r3, r0
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d001      	beq.n	8008e80 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8008e7c:	2301      	movs	r3, #1
 8008e7e:	e091      	b.n	8008fa4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	681a      	ldr	r2, [r3, #0]
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008e8e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	691a      	ldr	r2, [r3, #16]
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e9a:	b2d2      	uxtb	r2, r2
 8008e9c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ea2:	1c5a      	adds	r2, r3, #1
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008eac:	3b01      	subs	r3, #1
 8008eae:	b29a      	uxth	r2, r3
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008eb8:	b29b      	uxth	r3, r3
 8008eba:	3b01      	subs	r3, #1
 8008ebc:	b29a      	uxth	r2, r3
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	691a      	ldr	r2, [r3, #16]
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ecc:	b2d2      	uxtb	r2, r2
 8008ece:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ed4:	1c5a      	adds	r2, r3, #1
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ede:	3b01      	subs	r3, #1
 8008ee0:	b29a      	uxth	r2, r3
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008eea:	b29b      	uxth	r3, r3
 8008eec:	3b01      	subs	r3, #1
 8008eee:	b29a      	uxth	r2, r3
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008ef4:	e042      	b.n	8008f7c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008ef6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ef8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008efa:	68f8      	ldr	r0, [r7, #12]
 8008efc:	f000 fc5c 	bl	80097b8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008f00:	4603      	mov	r3, r0
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d001      	beq.n	8008f0a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8008f06:	2301      	movs	r3, #1
 8008f08:	e04c      	b.n	8008fa4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	691a      	ldr	r2, [r3, #16]
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f14:	b2d2      	uxtb	r2, r2
 8008f16:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f1c:	1c5a      	adds	r2, r3, #1
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f26:	3b01      	subs	r3, #1
 8008f28:	b29a      	uxth	r2, r3
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f32:	b29b      	uxth	r3, r3
 8008f34:	3b01      	subs	r3, #1
 8008f36:	b29a      	uxth	r2, r3
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	695b      	ldr	r3, [r3, #20]
 8008f42:	f003 0304 	and.w	r3, r3, #4
 8008f46:	2b04      	cmp	r3, #4
 8008f48:	d118      	bne.n	8008f7c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	691a      	ldr	r2, [r3, #16]
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f54:	b2d2      	uxtb	r2, r2
 8008f56:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f5c:	1c5a      	adds	r2, r3, #1
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f66:	3b01      	subs	r3, #1
 8008f68:	b29a      	uxth	r2, r3
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f72:	b29b      	uxth	r3, r3
 8008f74:	3b01      	subs	r3, #1
 8008f76:	b29a      	uxth	r2, r3
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	f47f aec2 	bne.w	8008d0a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	2220      	movs	r2, #32
 8008f8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	2200      	movs	r2, #0
 8008f92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	2200      	movs	r2, #0
 8008f9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	e000      	b.n	8008fa4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8008fa2:	2302      	movs	r3, #2
  }
}
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	3728      	adds	r7, #40	; 0x28
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	bd80      	pop	{r7, pc}
 8008fac:	00010004 	.word	0x00010004

08008fb0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	b08a      	sub	sp, #40	; 0x28
 8008fb4:	af02      	add	r7, sp, #8
 8008fb6:	60f8      	str	r0, [r7, #12]
 8008fb8:	607a      	str	r2, [r7, #4]
 8008fba:	603b      	str	r3, [r7, #0]
 8008fbc:	460b      	mov	r3, r1
 8008fbe:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8008fc0:	f7fe f896 	bl	80070f0 <HAL_GetTick>
 8008fc4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008fd0:	b2db      	uxtb	r3, r3
 8008fd2:	2b20      	cmp	r3, #32
 8008fd4:	f040 8111 	bne.w	80091fa <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008fd8:	69fb      	ldr	r3, [r7, #28]
 8008fda:	9300      	str	r3, [sp, #0]
 8008fdc:	2319      	movs	r3, #25
 8008fde:	2201      	movs	r2, #1
 8008fe0:	4988      	ldr	r1, [pc, #544]	; (8009204 <HAL_I2C_IsDeviceReady+0x254>)
 8008fe2:	68f8      	ldr	r0, [r7, #12]
 8008fe4:	f000 fa90 	bl	8009508 <I2C_WaitOnFlagUntilTimeout>
 8008fe8:	4603      	mov	r3, r0
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d001      	beq.n	8008ff2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8008fee:	2302      	movs	r3, #2
 8008ff0:	e104      	b.n	80091fc <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008ff8:	2b01      	cmp	r3, #1
 8008ffa:	d101      	bne.n	8009000 <HAL_I2C_IsDeviceReady+0x50>
 8008ffc:	2302      	movs	r3, #2
 8008ffe:	e0fd      	b.n	80091fc <HAL_I2C_IsDeviceReady+0x24c>
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	2201      	movs	r2, #1
 8009004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	f003 0301 	and.w	r3, r3, #1
 8009012:	2b01      	cmp	r3, #1
 8009014:	d007      	beq.n	8009026 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	681a      	ldr	r2, [r3, #0]
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	f042 0201 	orr.w	r2, r2, #1
 8009024:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	681a      	ldr	r2, [r3, #0]
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009034:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	2224      	movs	r2, #36	; 0x24
 800903a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	2200      	movs	r2, #0
 8009042:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	4a70      	ldr	r2, [pc, #448]	; (8009208 <HAL_I2C_IsDeviceReady+0x258>)
 8009048:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	681a      	ldr	r2, [r3, #0]
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009058:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800905a:	69fb      	ldr	r3, [r7, #28]
 800905c:	9300      	str	r3, [sp, #0]
 800905e:	683b      	ldr	r3, [r7, #0]
 8009060:	2200      	movs	r2, #0
 8009062:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009066:	68f8      	ldr	r0, [r7, #12]
 8009068:	f000 fa4e 	bl	8009508 <I2C_WaitOnFlagUntilTimeout>
 800906c:	4603      	mov	r3, r0
 800906e:	2b00      	cmp	r3, #0
 8009070:	d00d      	beq.n	800908e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800907c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009080:	d103      	bne.n	800908a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009088:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800908a:	2303      	movs	r3, #3
 800908c:	e0b6      	b.n	80091fc <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800908e:	897b      	ldrh	r3, [r7, #10]
 8009090:	b2db      	uxtb	r3, r3
 8009092:	461a      	mov	r2, r3
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800909c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800909e:	f7fe f827 	bl	80070f0 <HAL_GetTick>
 80090a2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	695b      	ldr	r3, [r3, #20]
 80090aa:	f003 0302 	and.w	r3, r3, #2
 80090ae:	2b02      	cmp	r3, #2
 80090b0:	bf0c      	ite	eq
 80090b2:	2301      	moveq	r3, #1
 80090b4:	2300      	movne	r3, #0
 80090b6:	b2db      	uxtb	r3, r3
 80090b8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	695b      	ldr	r3, [r3, #20]
 80090c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80090c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80090c8:	bf0c      	ite	eq
 80090ca:	2301      	moveq	r3, #1
 80090cc:	2300      	movne	r3, #0
 80090ce:	b2db      	uxtb	r3, r3
 80090d0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80090d2:	e025      	b.n	8009120 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80090d4:	f7fe f80c 	bl	80070f0 <HAL_GetTick>
 80090d8:	4602      	mov	r2, r0
 80090da:	69fb      	ldr	r3, [r7, #28]
 80090dc:	1ad3      	subs	r3, r2, r3
 80090de:	683a      	ldr	r2, [r7, #0]
 80090e0:	429a      	cmp	r2, r3
 80090e2:	d302      	bcc.n	80090ea <HAL_I2C_IsDeviceReady+0x13a>
 80090e4:	683b      	ldr	r3, [r7, #0]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d103      	bne.n	80090f2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	22a0      	movs	r2, #160	; 0xa0
 80090ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	695b      	ldr	r3, [r3, #20]
 80090f8:	f003 0302 	and.w	r3, r3, #2
 80090fc:	2b02      	cmp	r3, #2
 80090fe:	bf0c      	ite	eq
 8009100:	2301      	moveq	r3, #1
 8009102:	2300      	movne	r3, #0
 8009104:	b2db      	uxtb	r3, r3
 8009106:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	695b      	ldr	r3, [r3, #20]
 800910e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009112:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009116:	bf0c      	ite	eq
 8009118:	2301      	moveq	r3, #1
 800911a:	2300      	movne	r3, #0
 800911c:	b2db      	uxtb	r3, r3
 800911e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009126:	b2db      	uxtb	r3, r3
 8009128:	2ba0      	cmp	r3, #160	; 0xa0
 800912a:	d005      	beq.n	8009138 <HAL_I2C_IsDeviceReady+0x188>
 800912c:	7dfb      	ldrb	r3, [r7, #23]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d102      	bne.n	8009138 <HAL_I2C_IsDeviceReady+0x188>
 8009132:	7dbb      	ldrb	r3, [r7, #22]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d0cd      	beq.n	80090d4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	2220      	movs	r2, #32
 800913c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	695b      	ldr	r3, [r3, #20]
 8009146:	f003 0302 	and.w	r3, r3, #2
 800914a:	2b02      	cmp	r3, #2
 800914c:	d129      	bne.n	80091a2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	681a      	ldr	r2, [r3, #0]
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800915c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800915e:	2300      	movs	r3, #0
 8009160:	613b      	str	r3, [r7, #16]
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	695b      	ldr	r3, [r3, #20]
 8009168:	613b      	str	r3, [r7, #16]
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	699b      	ldr	r3, [r3, #24]
 8009170:	613b      	str	r3, [r7, #16]
 8009172:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009174:	69fb      	ldr	r3, [r7, #28]
 8009176:	9300      	str	r3, [sp, #0]
 8009178:	2319      	movs	r3, #25
 800917a:	2201      	movs	r2, #1
 800917c:	4921      	ldr	r1, [pc, #132]	; (8009204 <HAL_I2C_IsDeviceReady+0x254>)
 800917e:	68f8      	ldr	r0, [r7, #12]
 8009180:	f000 f9c2 	bl	8009508 <I2C_WaitOnFlagUntilTimeout>
 8009184:	4603      	mov	r3, r0
 8009186:	2b00      	cmp	r3, #0
 8009188:	d001      	beq.n	800918e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800918a:	2301      	movs	r3, #1
 800918c:	e036      	b.n	80091fc <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	2220      	movs	r2, #32
 8009192:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	2200      	movs	r2, #0
 800919a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800919e:	2300      	movs	r3, #0
 80091a0:	e02c      	b.n	80091fc <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	681a      	ldr	r2, [r3, #0]
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80091b0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80091ba:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80091bc:	69fb      	ldr	r3, [r7, #28]
 80091be:	9300      	str	r3, [sp, #0]
 80091c0:	2319      	movs	r3, #25
 80091c2:	2201      	movs	r2, #1
 80091c4:	490f      	ldr	r1, [pc, #60]	; (8009204 <HAL_I2C_IsDeviceReady+0x254>)
 80091c6:	68f8      	ldr	r0, [r7, #12]
 80091c8:	f000 f99e 	bl	8009508 <I2C_WaitOnFlagUntilTimeout>
 80091cc:	4603      	mov	r3, r0
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d001      	beq.n	80091d6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80091d2:	2301      	movs	r3, #1
 80091d4:	e012      	b.n	80091fc <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80091d6:	69bb      	ldr	r3, [r7, #24]
 80091d8:	3301      	adds	r3, #1
 80091da:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80091dc:	69ba      	ldr	r2, [r7, #24]
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	429a      	cmp	r2, r3
 80091e2:	f4ff af32 	bcc.w	800904a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	2220      	movs	r2, #32
 80091ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	2200      	movs	r2, #0
 80091f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80091f6:	2301      	movs	r3, #1
 80091f8:	e000      	b.n	80091fc <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80091fa:	2302      	movs	r3, #2
  }
}
 80091fc:	4618      	mov	r0, r3
 80091fe:	3720      	adds	r7, #32
 8009200:	46bd      	mov	sp, r7
 8009202:	bd80      	pop	{r7, pc}
 8009204:	00100002 	.word	0x00100002
 8009208:	ffff0000 	.word	0xffff0000

0800920c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800920c:	b580      	push	{r7, lr}
 800920e:	b088      	sub	sp, #32
 8009210:	af02      	add	r7, sp, #8
 8009212:	60f8      	str	r0, [r7, #12]
 8009214:	4608      	mov	r0, r1
 8009216:	4611      	mov	r1, r2
 8009218:	461a      	mov	r2, r3
 800921a:	4603      	mov	r3, r0
 800921c:	817b      	strh	r3, [r7, #10]
 800921e:	460b      	mov	r3, r1
 8009220:	813b      	strh	r3, [r7, #8]
 8009222:	4613      	mov	r3, r2
 8009224:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	681a      	ldr	r2, [r3, #0]
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009234:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009238:	9300      	str	r3, [sp, #0]
 800923a:	6a3b      	ldr	r3, [r7, #32]
 800923c:	2200      	movs	r2, #0
 800923e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009242:	68f8      	ldr	r0, [r7, #12]
 8009244:	f000 f960 	bl	8009508 <I2C_WaitOnFlagUntilTimeout>
 8009248:	4603      	mov	r3, r0
 800924a:	2b00      	cmp	r3, #0
 800924c:	d00d      	beq.n	800926a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009258:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800925c:	d103      	bne.n	8009266 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009264:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009266:	2303      	movs	r3, #3
 8009268:	e05f      	b.n	800932a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800926a:	897b      	ldrh	r3, [r7, #10]
 800926c:	b2db      	uxtb	r3, r3
 800926e:	461a      	mov	r2, r3
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009278:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800927a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800927c:	6a3a      	ldr	r2, [r7, #32]
 800927e:	492d      	ldr	r1, [pc, #180]	; (8009334 <I2C_RequestMemoryWrite+0x128>)
 8009280:	68f8      	ldr	r0, [r7, #12]
 8009282:	f000 f998 	bl	80095b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009286:	4603      	mov	r3, r0
 8009288:	2b00      	cmp	r3, #0
 800928a:	d001      	beq.n	8009290 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800928c:	2301      	movs	r3, #1
 800928e:	e04c      	b.n	800932a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009290:	2300      	movs	r3, #0
 8009292:	617b      	str	r3, [r7, #20]
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	695b      	ldr	r3, [r3, #20]
 800929a:	617b      	str	r3, [r7, #20]
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	699b      	ldr	r3, [r3, #24]
 80092a2:	617b      	str	r3, [r7, #20]
 80092a4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80092a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80092a8:	6a39      	ldr	r1, [r7, #32]
 80092aa:	68f8      	ldr	r0, [r7, #12]
 80092ac:	f000 fa02 	bl	80096b4 <I2C_WaitOnTXEFlagUntilTimeout>
 80092b0:	4603      	mov	r3, r0
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d00d      	beq.n	80092d2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092ba:	2b04      	cmp	r3, #4
 80092bc:	d107      	bne.n	80092ce <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	681a      	ldr	r2, [r3, #0]
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80092cc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80092ce:	2301      	movs	r3, #1
 80092d0:	e02b      	b.n	800932a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80092d2:	88fb      	ldrh	r3, [r7, #6]
 80092d4:	2b01      	cmp	r3, #1
 80092d6:	d105      	bne.n	80092e4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80092d8:	893b      	ldrh	r3, [r7, #8]
 80092da:	b2da      	uxtb	r2, r3
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	611a      	str	r2, [r3, #16]
 80092e2:	e021      	b.n	8009328 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80092e4:	893b      	ldrh	r3, [r7, #8]
 80092e6:	0a1b      	lsrs	r3, r3, #8
 80092e8:	b29b      	uxth	r3, r3
 80092ea:	b2da      	uxtb	r2, r3
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80092f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80092f4:	6a39      	ldr	r1, [r7, #32]
 80092f6:	68f8      	ldr	r0, [r7, #12]
 80092f8:	f000 f9dc 	bl	80096b4 <I2C_WaitOnTXEFlagUntilTimeout>
 80092fc:	4603      	mov	r3, r0
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d00d      	beq.n	800931e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009306:	2b04      	cmp	r3, #4
 8009308:	d107      	bne.n	800931a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	681a      	ldr	r2, [r3, #0]
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009318:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800931a:	2301      	movs	r3, #1
 800931c:	e005      	b.n	800932a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800931e:	893b      	ldrh	r3, [r7, #8]
 8009320:	b2da      	uxtb	r2, r3
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8009328:	2300      	movs	r3, #0
}
 800932a:	4618      	mov	r0, r3
 800932c:	3718      	adds	r7, #24
 800932e:	46bd      	mov	sp, r7
 8009330:	bd80      	pop	{r7, pc}
 8009332:	bf00      	nop
 8009334:	00010002 	.word	0x00010002

08009338 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009338:	b580      	push	{r7, lr}
 800933a:	b088      	sub	sp, #32
 800933c:	af02      	add	r7, sp, #8
 800933e:	60f8      	str	r0, [r7, #12]
 8009340:	4608      	mov	r0, r1
 8009342:	4611      	mov	r1, r2
 8009344:	461a      	mov	r2, r3
 8009346:	4603      	mov	r3, r0
 8009348:	817b      	strh	r3, [r7, #10]
 800934a:	460b      	mov	r3, r1
 800934c:	813b      	strh	r3, [r7, #8]
 800934e:	4613      	mov	r3, r2
 8009350:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	681a      	ldr	r2, [r3, #0]
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009360:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	681a      	ldr	r2, [r3, #0]
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009370:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009374:	9300      	str	r3, [sp, #0]
 8009376:	6a3b      	ldr	r3, [r7, #32]
 8009378:	2200      	movs	r2, #0
 800937a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800937e:	68f8      	ldr	r0, [r7, #12]
 8009380:	f000 f8c2 	bl	8009508 <I2C_WaitOnFlagUntilTimeout>
 8009384:	4603      	mov	r3, r0
 8009386:	2b00      	cmp	r3, #0
 8009388:	d00d      	beq.n	80093a6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009394:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009398:	d103      	bne.n	80093a2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80093a0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80093a2:	2303      	movs	r3, #3
 80093a4:	e0aa      	b.n	80094fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80093a6:	897b      	ldrh	r3, [r7, #10]
 80093a8:	b2db      	uxtb	r3, r3
 80093aa:	461a      	mov	r2, r3
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80093b4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80093b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093b8:	6a3a      	ldr	r2, [r7, #32]
 80093ba:	4952      	ldr	r1, [pc, #328]	; (8009504 <I2C_RequestMemoryRead+0x1cc>)
 80093bc:	68f8      	ldr	r0, [r7, #12]
 80093be:	f000 f8fa 	bl	80095b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80093c2:	4603      	mov	r3, r0
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d001      	beq.n	80093cc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80093c8:	2301      	movs	r3, #1
 80093ca:	e097      	b.n	80094fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80093cc:	2300      	movs	r3, #0
 80093ce:	617b      	str	r3, [r7, #20]
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	695b      	ldr	r3, [r3, #20]
 80093d6:	617b      	str	r3, [r7, #20]
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	699b      	ldr	r3, [r3, #24]
 80093de:	617b      	str	r3, [r7, #20]
 80093e0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80093e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80093e4:	6a39      	ldr	r1, [r7, #32]
 80093e6:	68f8      	ldr	r0, [r7, #12]
 80093e8:	f000 f964 	bl	80096b4 <I2C_WaitOnTXEFlagUntilTimeout>
 80093ec:	4603      	mov	r3, r0
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d00d      	beq.n	800940e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093f6:	2b04      	cmp	r3, #4
 80093f8:	d107      	bne.n	800940a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	681a      	ldr	r2, [r3, #0]
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009408:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800940a:	2301      	movs	r3, #1
 800940c:	e076      	b.n	80094fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800940e:	88fb      	ldrh	r3, [r7, #6]
 8009410:	2b01      	cmp	r3, #1
 8009412:	d105      	bne.n	8009420 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009414:	893b      	ldrh	r3, [r7, #8]
 8009416:	b2da      	uxtb	r2, r3
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	611a      	str	r2, [r3, #16]
 800941e:	e021      	b.n	8009464 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8009420:	893b      	ldrh	r3, [r7, #8]
 8009422:	0a1b      	lsrs	r3, r3, #8
 8009424:	b29b      	uxth	r3, r3
 8009426:	b2da      	uxtb	r2, r3
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800942e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009430:	6a39      	ldr	r1, [r7, #32]
 8009432:	68f8      	ldr	r0, [r7, #12]
 8009434:	f000 f93e 	bl	80096b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8009438:	4603      	mov	r3, r0
 800943a:	2b00      	cmp	r3, #0
 800943c:	d00d      	beq.n	800945a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009442:	2b04      	cmp	r3, #4
 8009444:	d107      	bne.n	8009456 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	681a      	ldr	r2, [r3, #0]
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009454:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009456:	2301      	movs	r3, #1
 8009458:	e050      	b.n	80094fc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800945a:	893b      	ldrh	r3, [r7, #8]
 800945c:	b2da      	uxtb	r2, r3
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009464:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009466:	6a39      	ldr	r1, [r7, #32]
 8009468:	68f8      	ldr	r0, [r7, #12]
 800946a:	f000 f923 	bl	80096b4 <I2C_WaitOnTXEFlagUntilTimeout>
 800946e:	4603      	mov	r3, r0
 8009470:	2b00      	cmp	r3, #0
 8009472:	d00d      	beq.n	8009490 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009478:	2b04      	cmp	r3, #4
 800947a:	d107      	bne.n	800948c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	681a      	ldr	r2, [r3, #0]
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800948a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800948c:	2301      	movs	r3, #1
 800948e:	e035      	b.n	80094fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	681a      	ldr	r2, [r3, #0]
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800949e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80094a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094a2:	9300      	str	r3, [sp, #0]
 80094a4:	6a3b      	ldr	r3, [r7, #32]
 80094a6:	2200      	movs	r2, #0
 80094a8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80094ac:	68f8      	ldr	r0, [r7, #12]
 80094ae:	f000 f82b 	bl	8009508 <I2C_WaitOnFlagUntilTimeout>
 80094b2:	4603      	mov	r3, r0
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d00d      	beq.n	80094d4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80094c6:	d103      	bne.n	80094d0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80094ce:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80094d0:	2303      	movs	r3, #3
 80094d2:	e013      	b.n	80094fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80094d4:	897b      	ldrh	r3, [r7, #10]
 80094d6:	b2db      	uxtb	r3, r3
 80094d8:	f043 0301 	orr.w	r3, r3, #1
 80094dc:	b2da      	uxtb	r2, r3
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80094e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094e6:	6a3a      	ldr	r2, [r7, #32]
 80094e8:	4906      	ldr	r1, [pc, #24]	; (8009504 <I2C_RequestMemoryRead+0x1cc>)
 80094ea:	68f8      	ldr	r0, [r7, #12]
 80094ec:	f000 f863 	bl	80095b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80094f0:	4603      	mov	r3, r0
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d001      	beq.n	80094fa <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80094f6:	2301      	movs	r3, #1
 80094f8:	e000      	b.n	80094fc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80094fa:	2300      	movs	r3, #0
}
 80094fc:	4618      	mov	r0, r3
 80094fe:	3718      	adds	r7, #24
 8009500:	46bd      	mov	sp, r7
 8009502:	bd80      	pop	{r7, pc}
 8009504:	00010002 	.word	0x00010002

08009508 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8009508:	b580      	push	{r7, lr}
 800950a:	b084      	sub	sp, #16
 800950c:	af00      	add	r7, sp, #0
 800950e:	60f8      	str	r0, [r7, #12]
 8009510:	60b9      	str	r1, [r7, #8]
 8009512:	603b      	str	r3, [r7, #0]
 8009514:	4613      	mov	r3, r2
 8009516:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009518:	e025      	b.n	8009566 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800951a:	683b      	ldr	r3, [r7, #0]
 800951c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009520:	d021      	beq.n	8009566 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009522:	f7fd fde5 	bl	80070f0 <HAL_GetTick>
 8009526:	4602      	mov	r2, r0
 8009528:	69bb      	ldr	r3, [r7, #24]
 800952a:	1ad3      	subs	r3, r2, r3
 800952c:	683a      	ldr	r2, [r7, #0]
 800952e:	429a      	cmp	r2, r3
 8009530:	d302      	bcc.n	8009538 <I2C_WaitOnFlagUntilTimeout+0x30>
 8009532:	683b      	ldr	r3, [r7, #0]
 8009534:	2b00      	cmp	r3, #0
 8009536:	d116      	bne.n	8009566 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	2200      	movs	r2, #0
 800953c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	2220      	movs	r2, #32
 8009542:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	2200      	movs	r2, #0
 800954a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009552:	f043 0220 	orr.w	r2, r3, #32
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	2200      	movs	r2, #0
 800955e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009562:	2301      	movs	r3, #1
 8009564:	e023      	b.n	80095ae <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009566:	68bb      	ldr	r3, [r7, #8]
 8009568:	0c1b      	lsrs	r3, r3, #16
 800956a:	b2db      	uxtb	r3, r3
 800956c:	2b01      	cmp	r3, #1
 800956e:	d10d      	bne.n	800958c <I2C_WaitOnFlagUntilTimeout+0x84>
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	695b      	ldr	r3, [r3, #20]
 8009576:	43da      	mvns	r2, r3
 8009578:	68bb      	ldr	r3, [r7, #8]
 800957a:	4013      	ands	r3, r2
 800957c:	b29b      	uxth	r3, r3
 800957e:	2b00      	cmp	r3, #0
 8009580:	bf0c      	ite	eq
 8009582:	2301      	moveq	r3, #1
 8009584:	2300      	movne	r3, #0
 8009586:	b2db      	uxtb	r3, r3
 8009588:	461a      	mov	r2, r3
 800958a:	e00c      	b.n	80095a6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	699b      	ldr	r3, [r3, #24]
 8009592:	43da      	mvns	r2, r3
 8009594:	68bb      	ldr	r3, [r7, #8]
 8009596:	4013      	ands	r3, r2
 8009598:	b29b      	uxth	r3, r3
 800959a:	2b00      	cmp	r3, #0
 800959c:	bf0c      	ite	eq
 800959e:	2301      	moveq	r3, #1
 80095a0:	2300      	movne	r3, #0
 80095a2:	b2db      	uxtb	r3, r3
 80095a4:	461a      	mov	r2, r3
 80095a6:	79fb      	ldrb	r3, [r7, #7]
 80095a8:	429a      	cmp	r2, r3
 80095aa:	d0b6      	beq.n	800951a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80095ac:	2300      	movs	r3, #0
}
 80095ae:	4618      	mov	r0, r3
 80095b0:	3710      	adds	r7, #16
 80095b2:	46bd      	mov	sp, r7
 80095b4:	bd80      	pop	{r7, pc}

080095b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80095b6:	b580      	push	{r7, lr}
 80095b8:	b084      	sub	sp, #16
 80095ba:	af00      	add	r7, sp, #0
 80095bc:	60f8      	str	r0, [r7, #12]
 80095be:	60b9      	str	r1, [r7, #8]
 80095c0:	607a      	str	r2, [r7, #4]
 80095c2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80095c4:	e051      	b.n	800966a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	695b      	ldr	r3, [r3, #20]
 80095cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80095d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80095d4:	d123      	bne.n	800961e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	681a      	ldr	r2, [r3, #0]
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80095e4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80095ee:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	2200      	movs	r2, #0
 80095f4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	2220      	movs	r2, #32
 80095fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	2200      	movs	r2, #0
 8009602:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800960a:	f043 0204 	orr.w	r2, r3, #4
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	2200      	movs	r2, #0
 8009616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800961a:	2301      	movs	r3, #1
 800961c:	e046      	b.n	80096ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009624:	d021      	beq.n	800966a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009626:	f7fd fd63 	bl	80070f0 <HAL_GetTick>
 800962a:	4602      	mov	r2, r0
 800962c:	683b      	ldr	r3, [r7, #0]
 800962e:	1ad3      	subs	r3, r2, r3
 8009630:	687a      	ldr	r2, [r7, #4]
 8009632:	429a      	cmp	r2, r3
 8009634:	d302      	bcc.n	800963c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d116      	bne.n	800966a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	2200      	movs	r2, #0
 8009640:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	2220      	movs	r2, #32
 8009646:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	2200      	movs	r2, #0
 800964e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009656:	f043 0220 	orr.w	r2, r3, #32
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	2200      	movs	r2, #0
 8009662:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009666:	2301      	movs	r3, #1
 8009668:	e020      	b.n	80096ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800966a:	68bb      	ldr	r3, [r7, #8]
 800966c:	0c1b      	lsrs	r3, r3, #16
 800966e:	b2db      	uxtb	r3, r3
 8009670:	2b01      	cmp	r3, #1
 8009672:	d10c      	bne.n	800968e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	695b      	ldr	r3, [r3, #20]
 800967a:	43da      	mvns	r2, r3
 800967c:	68bb      	ldr	r3, [r7, #8]
 800967e:	4013      	ands	r3, r2
 8009680:	b29b      	uxth	r3, r3
 8009682:	2b00      	cmp	r3, #0
 8009684:	bf14      	ite	ne
 8009686:	2301      	movne	r3, #1
 8009688:	2300      	moveq	r3, #0
 800968a:	b2db      	uxtb	r3, r3
 800968c:	e00b      	b.n	80096a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	699b      	ldr	r3, [r3, #24]
 8009694:	43da      	mvns	r2, r3
 8009696:	68bb      	ldr	r3, [r7, #8]
 8009698:	4013      	ands	r3, r2
 800969a:	b29b      	uxth	r3, r3
 800969c:	2b00      	cmp	r3, #0
 800969e:	bf14      	ite	ne
 80096a0:	2301      	movne	r3, #1
 80096a2:	2300      	moveq	r3, #0
 80096a4:	b2db      	uxtb	r3, r3
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d18d      	bne.n	80095c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80096aa:	2300      	movs	r3, #0
}
 80096ac:	4618      	mov	r0, r3
 80096ae:	3710      	adds	r7, #16
 80096b0:	46bd      	mov	sp, r7
 80096b2:	bd80      	pop	{r7, pc}

080096b4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80096b4:	b580      	push	{r7, lr}
 80096b6:	b084      	sub	sp, #16
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	60f8      	str	r0, [r7, #12]
 80096bc:	60b9      	str	r1, [r7, #8]
 80096be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80096c0:	e02d      	b.n	800971e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80096c2:	68f8      	ldr	r0, [r7, #12]
 80096c4:	f000 f8ce 	bl	8009864 <I2C_IsAcknowledgeFailed>
 80096c8:	4603      	mov	r3, r0
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d001      	beq.n	80096d2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80096ce:	2301      	movs	r3, #1
 80096d0:	e02d      	b.n	800972e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80096d2:	68bb      	ldr	r3, [r7, #8]
 80096d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096d8:	d021      	beq.n	800971e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80096da:	f7fd fd09 	bl	80070f0 <HAL_GetTick>
 80096de:	4602      	mov	r2, r0
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	1ad3      	subs	r3, r2, r3
 80096e4:	68ba      	ldr	r2, [r7, #8]
 80096e6:	429a      	cmp	r2, r3
 80096e8:	d302      	bcc.n	80096f0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80096ea:	68bb      	ldr	r3, [r7, #8]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d116      	bne.n	800971e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	2200      	movs	r2, #0
 80096f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	2220      	movs	r2, #32
 80096fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	2200      	movs	r2, #0
 8009702:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800970a:	f043 0220 	orr.w	r2, r3, #32
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	2200      	movs	r2, #0
 8009716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800971a:	2301      	movs	r3, #1
 800971c:	e007      	b.n	800972e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	695b      	ldr	r3, [r3, #20]
 8009724:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009728:	2b80      	cmp	r3, #128	; 0x80
 800972a:	d1ca      	bne.n	80096c2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800972c:	2300      	movs	r3, #0
}
 800972e:	4618      	mov	r0, r3
 8009730:	3710      	adds	r7, #16
 8009732:	46bd      	mov	sp, r7
 8009734:	bd80      	pop	{r7, pc}

08009736 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009736:	b580      	push	{r7, lr}
 8009738:	b084      	sub	sp, #16
 800973a:	af00      	add	r7, sp, #0
 800973c:	60f8      	str	r0, [r7, #12]
 800973e:	60b9      	str	r1, [r7, #8]
 8009740:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009742:	e02d      	b.n	80097a0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009744:	68f8      	ldr	r0, [r7, #12]
 8009746:	f000 f88d 	bl	8009864 <I2C_IsAcknowledgeFailed>
 800974a:	4603      	mov	r3, r0
 800974c:	2b00      	cmp	r3, #0
 800974e:	d001      	beq.n	8009754 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009750:	2301      	movs	r3, #1
 8009752:	e02d      	b.n	80097b0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009754:	68bb      	ldr	r3, [r7, #8]
 8009756:	f1b3 3fff 	cmp.w	r3, #4294967295
 800975a:	d021      	beq.n	80097a0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800975c:	f7fd fcc8 	bl	80070f0 <HAL_GetTick>
 8009760:	4602      	mov	r2, r0
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	1ad3      	subs	r3, r2, r3
 8009766:	68ba      	ldr	r2, [r7, #8]
 8009768:	429a      	cmp	r2, r3
 800976a:	d302      	bcc.n	8009772 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800976c:	68bb      	ldr	r3, [r7, #8]
 800976e:	2b00      	cmp	r3, #0
 8009770:	d116      	bne.n	80097a0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	2200      	movs	r2, #0
 8009776:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	2220      	movs	r2, #32
 800977c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	2200      	movs	r2, #0
 8009784:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800978c:	f043 0220 	orr.w	r2, r3, #32
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	2200      	movs	r2, #0
 8009798:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800979c:	2301      	movs	r3, #1
 800979e:	e007      	b.n	80097b0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	695b      	ldr	r3, [r3, #20]
 80097a6:	f003 0304 	and.w	r3, r3, #4
 80097aa:	2b04      	cmp	r3, #4
 80097ac:	d1ca      	bne.n	8009744 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80097ae:	2300      	movs	r3, #0
}
 80097b0:	4618      	mov	r0, r3
 80097b2:	3710      	adds	r7, #16
 80097b4:	46bd      	mov	sp, r7
 80097b6:	bd80      	pop	{r7, pc}

080097b8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80097b8:	b580      	push	{r7, lr}
 80097ba:	b084      	sub	sp, #16
 80097bc:	af00      	add	r7, sp, #0
 80097be:	60f8      	str	r0, [r7, #12]
 80097c0:	60b9      	str	r1, [r7, #8]
 80097c2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80097c4:	e042      	b.n	800984c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	695b      	ldr	r3, [r3, #20]
 80097cc:	f003 0310 	and.w	r3, r3, #16
 80097d0:	2b10      	cmp	r3, #16
 80097d2:	d119      	bne.n	8009808 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	f06f 0210 	mvn.w	r2, #16
 80097dc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	2200      	movs	r2, #0
 80097e2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	2220      	movs	r2, #32
 80097e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	2200      	movs	r2, #0
 80097f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	2200      	movs	r2, #0
 8009800:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009804:	2301      	movs	r3, #1
 8009806:	e029      	b.n	800985c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009808:	f7fd fc72 	bl	80070f0 <HAL_GetTick>
 800980c:	4602      	mov	r2, r0
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	1ad3      	subs	r3, r2, r3
 8009812:	68ba      	ldr	r2, [r7, #8]
 8009814:	429a      	cmp	r2, r3
 8009816:	d302      	bcc.n	800981e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8009818:	68bb      	ldr	r3, [r7, #8]
 800981a:	2b00      	cmp	r3, #0
 800981c:	d116      	bne.n	800984c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	2200      	movs	r2, #0
 8009822:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	2220      	movs	r2, #32
 8009828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	2200      	movs	r2, #0
 8009830:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009838:	f043 0220 	orr.w	r2, r3, #32
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	2200      	movs	r2, #0
 8009844:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009848:	2301      	movs	r3, #1
 800984a:	e007      	b.n	800985c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	695b      	ldr	r3, [r3, #20]
 8009852:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009856:	2b40      	cmp	r3, #64	; 0x40
 8009858:	d1b5      	bne.n	80097c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800985a:	2300      	movs	r3, #0
}
 800985c:	4618      	mov	r0, r3
 800985e:	3710      	adds	r7, #16
 8009860:	46bd      	mov	sp, r7
 8009862:	bd80      	pop	{r7, pc}

08009864 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8009864:	b480      	push	{r7}
 8009866:	b083      	sub	sp, #12
 8009868:	af00      	add	r7, sp, #0
 800986a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	695b      	ldr	r3, [r3, #20]
 8009872:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009876:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800987a:	d11b      	bne.n	80098b4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009884:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	2200      	movs	r2, #0
 800988a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	2220      	movs	r2, #32
 8009890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	2200      	movs	r2, #0
 8009898:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098a0:	f043 0204 	orr.w	r2, r3, #4
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	2200      	movs	r2, #0
 80098ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80098b0:	2301      	movs	r3, #1
 80098b2:	e000      	b.n	80098b6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80098b4:	2300      	movs	r3, #0
}
 80098b6:	4618      	mov	r0, r3
 80098b8:	370c      	adds	r7, #12
 80098ba:	46bd      	mov	sp, r7
 80098bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c0:	4770      	bx	lr
	...

080098c4 <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80098c4:	b480      	push	{r7}
 80098c6:	b083      	sub	sp, #12
 80098c8:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 80098ca:	4b06      	ldr	r3, [pc, #24]	; (80098e4 <HAL_PWR_EnableBkUpAccess+0x20>)
 80098cc:	2201      	movs	r2, #1
 80098ce:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 80098d0:	4b05      	ldr	r3, [pc, #20]	; (80098e8 <HAL_PWR_EnableBkUpAccess+0x24>)
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 80098d6:	687b      	ldr	r3, [r7, #4]
}
 80098d8:	bf00      	nop
 80098da:	370c      	adds	r7, #12
 80098dc:	46bd      	mov	sp, r7
 80098de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e2:	4770      	bx	lr
 80098e4:	420e0020 	.word	0x420e0020
 80098e8:	40007000 	.word	0x40007000

080098ec <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 80098ec:	b480      	push	{r7}
 80098ee:	b083      	sub	sp, #12
 80098f0:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 80098f2:	4b06      	ldr	r3, [pc, #24]	; (800990c <HAL_PWR_DisableBkUpAccess+0x20>)
 80098f4:	2200      	movs	r2, #0
 80098f6:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 80098f8:	4b05      	ldr	r3, [pc, #20]	; (8009910 <HAL_PWR_DisableBkUpAccess+0x24>)
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 80098fe:	687b      	ldr	r3, [r7, #4]
}
 8009900:	bf00      	nop
 8009902:	370c      	adds	r7, #12
 8009904:	46bd      	mov	sp, r7
 8009906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800990a:	4770      	bx	lr
 800990c:	420e0020 	.word	0x420e0020
 8009910:	40007000 	.word	0x40007000

08009914 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009914:	b580      	push	{r7, lr}
 8009916:	b086      	sub	sp, #24
 8009918:	af00      	add	r7, sp, #0
 800991a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	2b00      	cmp	r3, #0
 8009920:	d101      	bne.n	8009926 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009922:	2301      	movs	r3, #1
 8009924:	e267      	b.n	8009df6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	f003 0301 	and.w	r3, r3, #1
 800992e:	2b00      	cmp	r3, #0
 8009930:	d075      	beq.n	8009a1e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009932:	4b88      	ldr	r3, [pc, #544]	; (8009b54 <HAL_RCC_OscConfig+0x240>)
 8009934:	689b      	ldr	r3, [r3, #8]
 8009936:	f003 030c 	and.w	r3, r3, #12
 800993a:	2b04      	cmp	r3, #4
 800993c:	d00c      	beq.n	8009958 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800993e:	4b85      	ldr	r3, [pc, #532]	; (8009b54 <HAL_RCC_OscConfig+0x240>)
 8009940:	689b      	ldr	r3, [r3, #8]
 8009942:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009946:	2b08      	cmp	r3, #8
 8009948:	d112      	bne.n	8009970 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800994a:	4b82      	ldr	r3, [pc, #520]	; (8009b54 <HAL_RCC_OscConfig+0x240>)
 800994c:	685b      	ldr	r3, [r3, #4]
 800994e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009952:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009956:	d10b      	bne.n	8009970 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009958:	4b7e      	ldr	r3, [pc, #504]	; (8009b54 <HAL_RCC_OscConfig+0x240>)
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009960:	2b00      	cmp	r3, #0
 8009962:	d05b      	beq.n	8009a1c <HAL_RCC_OscConfig+0x108>
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	685b      	ldr	r3, [r3, #4]
 8009968:	2b00      	cmp	r3, #0
 800996a:	d157      	bne.n	8009a1c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800996c:	2301      	movs	r3, #1
 800996e:	e242      	b.n	8009df6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	685b      	ldr	r3, [r3, #4]
 8009974:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009978:	d106      	bne.n	8009988 <HAL_RCC_OscConfig+0x74>
 800997a:	4b76      	ldr	r3, [pc, #472]	; (8009b54 <HAL_RCC_OscConfig+0x240>)
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	4a75      	ldr	r2, [pc, #468]	; (8009b54 <HAL_RCC_OscConfig+0x240>)
 8009980:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009984:	6013      	str	r3, [r2, #0]
 8009986:	e01d      	b.n	80099c4 <HAL_RCC_OscConfig+0xb0>
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	685b      	ldr	r3, [r3, #4]
 800998c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009990:	d10c      	bne.n	80099ac <HAL_RCC_OscConfig+0x98>
 8009992:	4b70      	ldr	r3, [pc, #448]	; (8009b54 <HAL_RCC_OscConfig+0x240>)
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	4a6f      	ldr	r2, [pc, #444]	; (8009b54 <HAL_RCC_OscConfig+0x240>)
 8009998:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800999c:	6013      	str	r3, [r2, #0]
 800999e:	4b6d      	ldr	r3, [pc, #436]	; (8009b54 <HAL_RCC_OscConfig+0x240>)
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	4a6c      	ldr	r2, [pc, #432]	; (8009b54 <HAL_RCC_OscConfig+0x240>)
 80099a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80099a8:	6013      	str	r3, [r2, #0]
 80099aa:	e00b      	b.n	80099c4 <HAL_RCC_OscConfig+0xb0>
 80099ac:	4b69      	ldr	r3, [pc, #420]	; (8009b54 <HAL_RCC_OscConfig+0x240>)
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	4a68      	ldr	r2, [pc, #416]	; (8009b54 <HAL_RCC_OscConfig+0x240>)
 80099b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80099b6:	6013      	str	r3, [r2, #0]
 80099b8:	4b66      	ldr	r3, [pc, #408]	; (8009b54 <HAL_RCC_OscConfig+0x240>)
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	4a65      	ldr	r2, [pc, #404]	; (8009b54 <HAL_RCC_OscConfig+0x240>)
 80099be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80099c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	685b      	ldr	r3, [r3, #4]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d013      	beq.n	80099f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80099cc:	f7fd fb90 	bl	80070f0 <HAL_GetTick>
 80099d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80099d2:	e008      	b.n	80099e6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80099d4:	f7fd fb8c 	bl	80070f0 <HAL_GetTick>
 80099d8:	4602      	mov	r2, r0
 80099da:	693b      	ldr	r3, [r7, #16]
 80099dc:	1ad3      	subs	r3, r2, r3
 80099de:	2b64      	cmp	r3, #100	; 0x64
 80099e0:	d901      	bls.n	80099e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80099e2:	2303      	movs	r3, #3
 80099e4:	e207      	b.n	8009df6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80099e6:	4b5b      	ldr	r3, [pc, #364]	; (8009b54 <HAL_RCC_OscConfig+0x240>)
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d0f0      	beq.n	80099d4 <HAL_RCC_OscConfig+0xc0>
 80099f2:	e014      	b.n	8009a1e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80099f4:	f7fd fb7c 	bl	80070f0 <HAL_GetTick>
 80099f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80099fa:	e008      	b.n	8009a0e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80099fc:	f7fd fb78 	bl	80070f0 <HAL_GetTick>
 8009a00:	4602      	mov	r2, r0
 8009a02:	693b      	ldr	r3, [r7, #16]
 8009a04:	1ad3      	subs	r3, r2, r3
 8009a06:	2b64      	cmp	r3, #100	; 0x64
 8009a08:	d901      	bls.n	8009a0e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009a0a:	2303      	movs	r3, #3
 8009a0c:	e1f3      	b.n	8009df6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009a0e:	4b51      	ldr	r3, [pc, #324]	; (8009b54 <HAL_RCC_OscConfig+0x240>)
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d1f0      	bne.n	80099fc <HAL_RCC_OscConfig+0xe8>
 8009a1a:	e000      	b.n	8009a1e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009a1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	f003 0302 	and.w	r3, r3, #2
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d063      	beq.n	8009af2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009a2a:	4b4a      	ldr	r3, [pc, #296]	; (8009b54 <HAL_RCC_OscConfig+0x240>)
 8009a2c:	689b      	ldr	r3, [r3, #8]
 8009a2e:	f003 030c 	and.w	r3, r3, #12
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d00b      	beq.n	8009a4e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009a36:	4b47      	ldr	r3, [pc, #284]	; (8009b54 <HAL_RCC_OscConfig+0x240>)
 8009a38:	689b      	ldr	r3, [r3, #8]
 8009a3a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009a3e:	2b08      	cmp	r3, #8
 8009a40:	d11c      	bne.n	8009a7c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009a42:	4b44      	ldr	r3, [pc, #272]	; (8009b54 <HAL_RCC_OscConfig+0x240>)
 8009a44:	685b      	ldr	r3, [r3, #4]
 8009a46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d116      	bne.n	8009a7c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009a4e:	4b41      	ldr	r3, [pc, #260]	; (8009b54 <HAL_RCC_OscConfig+0x240>)
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	f003 0302 	and.w	r3, r3, #2
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d005      	beq.n	8009a66 <HAL_RCC_OscConfig+0x152>
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	68db      	ldr	r3, [r3, #12]
 8009a5e:	2b01      	cmp	r3, #1
 8009a60:	d001      	beq.n	8009a66 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8009a62:	2301      	movs	r3, #1
 8009a64:	e1c7      	b.n	8009df6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009a66:	4b3b      	ldr	r3, [pc, #236]	; (8009b54 <HAL_RCC_OscConfig+0x240>)
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	691b      	ldr	r3, [r3, #16]
 8009a72:	00db      	lsls	r3, r3, #3
 8009a74:	4937      	ldr	r1, [pc, #220]	; (8009b54 <HAL_RCC_OscConfig+0x240>)
 8009a76:	4313      	orrs	r3, r2
 8009a78:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009a7a:	e03a      	b.n	8009af2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	68db      	ldr	r3, [r3, #12]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d020      	beq.n	8009ac6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009a84:	4b34      	ldr	r3, [pc, #208]	; (8009b58 <HAL_RCC_OscConfig+0x244>)
 8009a86:	2201      	movs	r2, #1
 8009a88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a8a:	f7fd fb31 	bl	80070f0 <HAL_GetTick>
 8009a8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009a90:	e008      	b.n	8009aa4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009a92:	f7fd fb2d 	bl	80070f0 <HAL_GetTick>
 8009a96:	4602      	mov	r2, r0
 8009a98:	693b      	ldr	r3, [r7, #16]
 8009a9a:	1ad3      	subs	r3, r2, r3
 8009a9c:	2b02      	cmp	r3, #2
 8009a9e:	d901      	bls.n	8009aa4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8009aa0:	2303      	movs	r3, #3
 8009aa2:	e1a8      	b.n	8009df6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009aa4:	4b2b      	ldr	r3, [pc, #172]	; (8009b54 <HAL_RCC_OscConfig+0x240>)
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	f003 0302 	and.w	r3, r3, #2
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d0f0      	beq.n	8009a92 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009ab0:	4b28      	ldr	r3, [pc, #160]	; (8009b54 <HAL_RCC_OscConfig+0x240>)
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	691b      	ldr	r3, [r3, #16]
 8009abc:	00db      	lsls	r3, r3, #3
 8009abe:	4925      	ldr	r1, [pc, #148]	; (8009b54 <HAL_RCC_OscConfig+0x240>)
 8009ac0:	4313      	orrs	r3, r2
 8009ac2:	600b      	str	r3, [r1, #0]
 8009ac4:	e015      	b.n	8009af2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009ac6:	4b24      	ldr	r3, [pc, #144]	; (8009b58 <HAL_RCC_OscConfig+0x244>)
 8009ac8:	2200      	movs	r2, #0
 8009aca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009acc:	f7fd fb10 	bl	80070f0 <HAL_GetTick>
 8009ad0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009ad2:	e008      	b.n	8009ae6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009ad4:	f7fd fb0c 	bl	80070f0 <HAL_GetTick>
 8009ad8:	4602      	mov	r2, r0
 8009ada:	693b      	ldr	r3, [r7, #16]
 8009adc:	1ad3      	subs	r3, r2, r3
 8009ade:	2b02      	cmp	r3, #2
 8009ae0:	d901      	bls.n	8009ae6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8009ae2:	2303      	movs	r3, #3
 8009ae4:	e187      	b.n	8009df6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009ae6:	4b1b      	ldr	r3, [pc, #108]	; (8009b54 <HAL_RCC_OscConfig+0x240>)
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	f003 0302 	and.w	r3, r3, #2
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d1f0      	bne.n	8009ad4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	f003 0308 	and.w	r3, r3, #8
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d036      	beq.n	8009b6c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	695b      	ldr	r3, [r3, #20]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d016      	beq.n	8009b34 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009b06:	4b15      	ldr	r3, [pc, #84]	; (8009b5c <HAL_RCC_OscConfig+0x248>)
 8009b08:	2201      	movs	r2, #1
 8009b0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009b0c:	f7fd faf0 	bl	80070f0 <HAL_GetTick>
 8009b10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009b12:	e008      	b.n	8009b26 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009b14:	f7fd faec 	bl	80070f0 <HAL_GetTick>
 8009b18:	4602      	mov	r2, r0
 8009b1a:	693b      	ldr	r3, [r7, #16]
 8009b1c:	1ad3      	subs	r3, r2, r3
 8009b1e:	2b02      	cmp	r3, #2
 8009b20:	d901      	bls.n	8009b26 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8009b22:	2303      	movs	r3, #3
 8009b24:	e167      	b.n	8009df6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009b26:	4b0b      	ldr	r3, [pc, #44]	; (8009b54 <HAL_RCC_OscConfig+0x240>)
 8009b28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009b2a:	f003 0302 	and.w	r3, r3, #2
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d0f0      	beq.n	8009b14 <HAL_RCC_OscConfig+0x200>
 8009b32:	e01b      	b.n	8009b6c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009b34:	4b09      	ldr	r3, [pc, #36]	; (8009b5c <HAL_RCC_OscConfig+0x248>)
 8009b36:	2200      	movs	r2, #0
 8009b38:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009b3a:	f7fd fad9 	bl	80070f0 <HAL_GetTick>
 8009b3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009b40:	e00e      	b.n	8009b60 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009b42:	f7fd fad5 	bl	80070f0 <HAL_GetTick>
 8009b46:	4602      	mov	r2, r0
 8009b48:	693b      	ldr	r3, [r7, #16]
 8009b4a:	1ad3      	subs	r3, r2, r3
 8009b4c:	2b02      	cmp	r3, #2
 8009b4e:	d907      	bls.n	8009b60 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8009b50:	2303      	movs	r3, #3
 8009b52:	e150      	b.n	8009df6 <HAL_RCC_OscConfig+0x4e2>
 8009b54:	40023800 	.word	0x40023800
 8009b58:	42470000 	.word	0x42470000
 8009b5c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009b60:	4b88      	ldr	r3, [pc, #544]	; (8009d84 <HAL_RCC_OscConfig+0x470>)
 8009b62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009b64:	f003 0302 	and.w	r3, r3, #2
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d1ea      	bne.n	8009b42 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	f003 0304 	and.w	r3, r3, #4
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	f000 8097 	beq.w	8009ca8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009b7e:	4b81      	ldr	r3, [pc, #516]	; (8009d84 <HAL_RCC_OscConfig+0x470>)
 8009b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d10f      	bne.n	8009baa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	60bb      	str	r3, [r7, #8]
 8009b8e:	4b7d      	ldr	r3, [pc, #500]	; (8009d84 <HAL_RCC_OscConfig+0x470>)
 8009b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b92:	4a7c      	ldr	r2, [pc, #496]	; (8009d84 <HAL_RCC_OscConfig+0x470>)
 8009b94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009b98:	6413      	str	r3, [r2, #64]	; 0x40
 8009b9a:	4b7a      	ldr	r3, [pc, #488]	; (8009d84 <HAL_RCC_OscConfig+0x470>)
 8009b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009ba2:	60bb      	str	r3, [r7, #8]
 8009ba4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009ba6:	2301      	movs	r3, #1
 8009ba8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009baa:	4b77      	ldr	r3, [pc, #476]	; (8009d88 <HAL_RCC_OscConfig+0x474>)
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d118      	bne.n	8009be8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009bb6:	4b74      	ldr	r3, [pc, #464]	; (8009d88 <HAL_RCC_OscConfig+0x474>)
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	4a73      	ldr	r2, [pc, #460]	; (8009d88 <HAL_RCC_OscConfig+0x474>)
 8009bbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009bc0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009bc2:	f7fd fa95 	bl	80070f0 <HAL_GetTick>
 8009bc6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009bc8:	e008      	b.n	8009bdc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009bca:	f7fd fa91 	bl	80070f0 <HAL_GetTick>
 8009bce:	4602      	mov	r2, r0
 8009bd0:	693b      	ldr	r3, [r7, #16]
 8009bd2:	1ad3      	subs	r3, r2, r3
 8009bd4:	2b02      	cmp	r3, #2
 8009bd6:	d901      	bls.n	8009bdc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8009bd8:	2303      	movs	r3, #3
 8009bda:	e10c      	b.n	8009df6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009bdc:	4b6a      	ldr	r3, [pc, #424]	; (8009d88 <HAL_RCC_OscConfig+0x474>)
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d0f0      	beq.n	8009bca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	689b      	ldr	r3, [r3, #8]
 8009bec:	2b01      	cmp	r3, #1
 8009bee:	d106      	bne.n	8009bfe <HAL_RCC_OscConfig+0x2ea>
 8009bf0:	4b64      	ldr	r3, [pc, #400]	; (8009d84 <HAL_RCC_OscConfig+0x470>)
 8009bf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009bf4:	4a63      	ldr	r2, [pc, #396]	; (8009d84 <HAL_RCC_OscConfig+0x470>)
 8009bf6:	f043 0301 	orr.w	r3, r3, #1
 8009bfa:	6713      	str	r3, [r2, #112]	; 0x70
 8009bfc:	e01c      	b.n	8009c38 <HAL_RCC_OscConfig+0x324>
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	689b      	ldr	r3, [r3, #8]
 8009c02:	2b05      	cmp	r3, #5
 8009c04:	d10c      	bne.n	8009c20 <HAL_RCC_OscConfig+0x30c>
 8009c06:	4b5f      	ldr	r3, [pc, #380]	; (8009d84 <HAL_RCC_OscConfig+0x470>)
 8009c08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c0a:	4a5e      	ldr	r2, [pc, #376]	; (8009d84 <HAL_RCC_OscConfig+0x470>)
 8009c0c:	f043 0304 	orr.w	r3, r3, #4
 8009c10:	6713      	str	r3, [r2, #112]	; 0x70
 8009c12:	4b5c      	ldr	r3, [pc, #368]	; (8009d84 <HAL_RCC_OscConfig+0x470>)
 8009c14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c16:	4a5b      	ldr	r2, [pc, #364]	; (8009d84 <HAL_RCC_OscConfig+0x470>)
 8009c18:	f043 0301 	orr.w	r3, r3, #1
 8009c1c:	6713      	str	r3, [r2, #112]	; 0x70
 8009c1e:	e00b      	b.n	8009c38 <HAL_RCC_OscConfig+0x324>
 8009c20:	4b58      	ldr	r3, [pc, #352]	; (8009d84 <HAL_RCC_OscConfig+0x470>)
 8009c22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c24:	4a57      	ldr	r2, [pc, #348]	; (8009d84 <HAL_RCC_OscConfig+0x470>)
 8009c26:	f023 0301 	bic.w	r3, r3, #1
 8009c2a:	6713      	str	r3, [r2, #112]	; 0x70
 8009c2c:	4b55      	ldr	r3, [pc, #340]	; (8009d84 <HAL_RCC_OscConfig+0x470>)
 8009c2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c30:	4a54      	ldr	r2, [pc, #336]	; (8009d84 <HAL_RCC_OscConfig+0x470>)
 8009c32:	f023 0304 	bic.w	r3, r3, #4
 8009c36:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	689b      	ldr	r3, [r3, #8]
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d015      	beq.n	8009c6c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009c40:	f7fd fa56 	bl	80070f0 <HAL_GetTick>
 8009c44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009c46:	e00a      	b.n	8009c5e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009c48:	f7fd fa52 	bl	80070f0 <HAL_GetTick>
 8009c4c:	4602      	mov	r2, r0
 8009c4e:	693b      	ldr	r3, [r7, #16]
 8009c50:	1ad3      	subs	r3, r2, r3
 8009c52:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c56:	4293      	cmp	r3, r2
 8009c58:	d901      	bls.n	8009c5e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8009c5a:	2303      	movs	r3, #3
 8009c5c:	e0cb      	b.n	8009df6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009c5e:	4b49      	ldr	r3, [pc, #292]	; (8009d84 <HAL_RCC_OscConfig+0x470>)
 8009c60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c62:	f003 0302 	and.w	r3, r3, #2
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d0ee      	beq.n	8009c48 <HAL_RCC_OscConfig+0x334>
 8009c6a:	e014      	b.n	8009c96 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009c6c:	f7fd fa40 	bl	80070f0 <HAL_GetTick>
 8009c70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009c72:	e00a      	b.n	8009c8a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009c74:	f7fd fa3c 	bl	80070f0 <HAL_GetTick>
 8009c78:	4602      	mov	r2, r0
 8009c7a:	693b      	ldr	r3, [r7, #16]
 8009c7c:	1ad3      	subs	r3, r2, r3
 8009c7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c82:	4293      	cmp	r3, r2
 8009c84:	d901      	bls.n	8009c8a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8009c86:	2303      	movs	r3, #3
 8009c88:	e0b5      	b.n	8009df6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009c8a:	4b3e      	ldr	r3, [pc, #248]	; (8009d84 <HAL_RCC_OscConfig+0x470>)
 8009c8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c8e:	f003 0302 	and.w	r3, r3, #2
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d1ee      	bne.n	8009c74 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009c96:	7dfb      	ldrb	r3, [r7, #23]
 8009c98:	2b01      	cmp	r3, #1
 8009c9a:	d105      	bne.n	8009ca8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009c9c:	4b39      	ldr	r3, [pc, #228]	; (8009d84 <HAL_RCC_OscConfig+0x470>)
 8009c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ca0:	4a38      	ldr	r2, [pc, #224]	; (8009d84 <HAL_RCC_OscConfig+0x470>)
 8009ca2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009ca6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	699b      	ldr	r3, [r3, #24]
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	f000 80a1 	beq.w	8009df4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009cb2:	4b34      	ldr	r3, [pc, #208]	; (8009d84 <HAL_RCC_OscConfig+0x470>)
 8009cb4:	689b      	ldr	r3, [r3, #8]
 8009cb6:	f003 030c 	and.w	r3, r3, #12
 8009cba:	2b08      	cmp	r3, #8
 8009cbc:	d05c      	beq.n	8009d78 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	699b      	ldr	r3, [r3, #24]
 8009cc2:	2b02      	cmp	r3, #2
 8009cc4:	d141      	bne.n	8009d4a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009cc6:	4b31      	ldr	r3, [pc, #196]	; (8009d8c <HAL_RCC_OscConfig+0x478>)
 8009cc8:	2200      	movs	r2, #0
 8009cca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009ccc:	f7fd fa10 	bl	80070f0 <HAL_GetTick>
 8009cd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009cd2:	e008      	b.n	8009ce6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009cd4:	f7fd fa0c 	bl	80070f0 <HAL_GetTick>
 8009cd8:	4602      	mov	r2, r0
 8009cda:	693b      	ldr	r3, [r7, #16]
 8009cdc:	1ad3      	subs	r3, r2, r3
 8009cde:	2b02      	cmp	r3, #2
 8009ce0:	d901      	bls.n	8009ce6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8009ce2:	2303      	movs	r3, #3
 8009ce4:	e087      	b.n	8009df6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009ce6:	4b27      	ldr	r3, [pc, #156]	; (8009d84 <HAL_RCC_OscConfig+0x470>)
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d1f0      	bne.n	8009cd4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	69da      	ldr	r2, [r3, #28]
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	6a1b      	ldr	r3, [r3, #32]
 8009cfa:	431a      	orrs	r2, r3
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d00:	019b      	lsls	r3, r3, #6
 8009d02:	431a      	orrs	r2, r3
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d08:	085b      	lsrs	r3, r3, #1
 8009d0a:	3b01      	subs	r3, #1
 8009d0c:	041b      	lsls	r3, r3, #16
 8009d0e:	431a      	orrs	r2, r3
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d14:	061b      	lsls	r3, r3, #24
 8009d16:	491b      	ldr	r1, [pc, #108]	; (8009d84 <HAL_RCC_OscConfig+0x470>)
 8009d18:	4313      	orrs	r3, r2
 8009d1a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009d1c:	4b1b      	ldr	r3, [pc, #108]	; (8009d8c <HAL_RCC_OscConfig+0x478>)
 8009d1e:	2201      	movs	r2, #1
 8009d20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009d22:	f7fd f9e5 	bl	80070f0 <HAL_GetTick>
 8009d26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009d28:	e008      	b.n	8009d3c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009d2a:	f7fd f9e1 	bl	80070f0 <HAL_GetTick>
 8009d2e:	4602      	mov	r2, r0
 8009d30:	693b      	ldr	r3, [r7, #16]
 8009d32:	1ad3      	subs	r3, r2, r3
 8009d34:	2b02      	cmp	r3, #2
 8009d36:	d901      	bls.n	8009d3c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8009d38:	2303      	movs	r3, #3
 8009d3a:	e05c      	b.n	8009df6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009d3c:	4b11      	ldr	r3, [pc, #68]	; (8009d84 <HAL_RCC_OscConfig+0x470>)
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d0f0      	beq.n	8009d2a <HAL_RCC_OscConfig+0x416>
 8009d48:	e054      	b.n	8009df4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009d4a:	4b10      	ldr	r3, [pc, #64]	; (8009d8c <HAL_RCC_OscConfig+0x478>)
 8009d4c:	2200      	movs	r2, #0
 8009d4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009d50:	f7fd f9ce 	bl	80070f0 <HAL_GetTick>
 8009d54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009d56:	e008      	b.n	8009d6a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009d58:	f7fd f9ca 	bl	80070f0 <HAL_GetTick>
 8009d5c:	4602      	mov	r2, r0
 8009d5e:	693b      	ldr	r3, [r7, #16]
 8009d60:	1ad3      	subs	r3, r2, r3
 8009d62:	2b02      	cmp	r3, #2
 8009d64:	d901      	bls.n	8009d6a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8009d66:	2303      	movs	r3, #3
 8009d68:	e045      	b.n	8009df6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009d6a:	4b06      	ldr	r3, [pc, #24]	; (8009d84 <HAL_RCC_OscConfig+0x470>)
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d1f0      	bne.n	8009d58 <HAL_RCC_OscConfig+0x444>
 8009d76:	e03d      	b.n	8009df4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	699b      	ldr	r3, [r3, #24]
 8009d7c:	2b01      	cmp	r3, #1
 8009d7e:	d107      	bne.n	8009d90 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8009d80:	2301      	movs	r3, #1
 8009d82:	e038      	b.n	8009df6 <HAL_RCC_OscConfig+0x4e2>
 8009d84:	40023800 	.word	0x40023800
 8009d88:	40007000 	.word	0x40007000
 8009d8c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009d90:	4b1b      	ldr	r3, [pc, #108]	; (8009e00 <HAL_RCC_OscConfig+0x4ec>)
 8009d92:	685b      	ldr	r3, [r3, #4]
 8009d94:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	699b      	ldr	r3, [r3, #24]
 8009d9a:	2b01      	cmp	r3, #1
 8009d9c:	d028      	beq.n	8009df0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009da8:	429a      	cmp	r2, r3
 8009daa:	d121      	bne.n	8009df0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009db6:	429a      	cmp	r2, r3
 8009db8:	d11a      	bne.n	8009df0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009dba:	68fa      	ldr	r2, [r7, #12]
 8009dbc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009dc0:	4013      	ands	r3, r2
 8009dc2:	687a      	ldr	r2, [r7, #4]
 8009dc4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009dc6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009dc8:	4293      	cmp	r3, r2
 8009dca:	d111      	bne.n	8009df0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009dd6:	085b      	lsrs	r3, r3, #1
 8009dd8:	3b01      	subs	r3, #1
 8009dda:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009ddc:	429a      	cmp	r2, r3
 8009dde:	d107      	bne.n	8009df0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009dec:	429a      	cmp	r2, r3
 8009dee:	d001      	beq.n	8009df4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8009df0:	2301      	movs	r3, #1
 8009df2:	e000      	b.n	8009df6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8009df4:	2300      	movs	r3, #0
}
 8009df6:	4618      	mov	r0, r3
 8009df8:	3718      	adds	r7, #24
 8009dfa:	46bd      	mov	sp, r7
 8009dfc:	bd80      	pop	{r7, pc}
 8009dfe:	bf00      	nop
 8009e00:	40023800 	.word	0x40023800

08009e04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009e04:	b580      	push	{r7, lr}
 8009e06:	b084      	sub	sp, #16
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	6078      	str	r0, [r7, #4]
 8009e0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d101      	bne.n	8009e18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009e14:	2301      	movs	r3, #1
 8009e16:	e0cc      	b.n	8009fb2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009e18:	4b68      	ldr	r3, [pc, #416]	; (8009fbc <HAL_RCC_ClockConfig+0x1b8>)
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	f003 0307 	and.w	r3, r3, #7
 8009e20:	683a      	ldr	r2, [r7, #0]
 8009e22:	429a      	cmp	r2, r3
 8009e24:	d90c      	bls.n	8009e40 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009e26:	4b65      	ldr	r3, [pc, #404]	; (8009fbc <HAL_RCC_ClockConfig+0x1b8>)
 8009e28:	683a      	ldr	r2, [r7, #0]
 8009e2a:	b2d2      	uxtb	r2, r2
 8009e2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009e2e:	4b63      	ldr	r3, [pc, #396]	; (8009fbc <HAL_RCC_ClockConfig+0x1b8>)
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	f003 0307 	and.w	r3, r3, #7
 8009e36:	683a      	ldr	r2, [r7, #0]
 8009e38:	429a      	cmp	r2, r3
 8009e3a:	d001      	beq.n	8009e40 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009e3c:	2301      	movs	r3, #1
 8009e3e:	e0b8      	b.n	8009fb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	f003 0302 	and.w	r3, r3, #2
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d020      	beq.n	8009e8e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	f003 0304 	and.w	r3, r3, #4
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d005      	beq.n	8009e64 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009e58:	4b59      	ldr	r3, [pc, #356]	; (8009fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8009e5a:	689b      	ldr	r3, [r3, #8]
 8009e5c:	4a58      	ldr	r2, [pc, #352]	; (8009fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8009e5e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8009e62:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	f003 0308 	and.w	r3, r3, #8
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d005      	beq.n	8009e7c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009e70:	4b53      	ldr	r3, [pc, #332]	; (8009fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8009e72:	689b      	ldr	r3, [r3, #8]
 8009e74:	4a52      	ldr	r2, [pc, #328]	; (8009fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8009e76:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8009e7a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009e7c:	4b50      	ldr	r3, [pc, #320]	; (8009fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8009e7e:	689b      	ldr	r3, [r3, #8]
 8009e80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	689b      	ldr	r3, [r3, #8]
 8009e88:	494d      	ldr	r1, [pc, #308]	; (8009fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8009e8a:	4313      	orrs	r3, r2
 8009e8c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	f003 0301 	and.w	r3, r3, #1
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d044      	beq.n	8009f24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	685b      	ldr	r3, [r3, #4]
 8009e9e:	2b01      	cmp	r3, #1
 8009ea0:	d107      	bne.n	8009eb2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009ea2:	4b47      	ldr	r3, [pc, #284]	; (8009fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d119      	bne.n	8009ee2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009eae:	2301      	movs	r3, #1
 8009eb0:	e07f      	b.n	8009fb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	685b      	ldr	r3, [r3, #4]
 8009eb6:	2b02      	cmp	r3, #2
 8009eb8:	d003      	beq.n	8009ec2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009ebe:	2b03      	cmp	r3, #3
 8009ec0:	d107      	bne.n	8009ed2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009ec2:	4b3f      	ldr	r3, [pc, #252]	; (8009fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d109      	bne.n	8009ee2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009ece:	2301      	movs	r3, #1
 8009ed0:	e06f      	b.n	8009fb2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009ed2:	4b3b      	ldr	r3, [pc, #236]	; (8009fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	f003 0302 	and.w	r3, r3, #2
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d101      	bne.n	8009ee2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009ede:	2301      	movs	r3, #1
 8009ee0:	e067      	b.n	8009fb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009ee2:	4b37      	ldr	r3, [pc, #220]	; (8009fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8009ee4:	689b      	ldr	r3, [r3, #8]
 8009ee6:	f023 0203 	bic.w	r2, r3, #3
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	685b      	ldr	r3, [r3, #4]
 8009eee:	4934      	ldr	r1, [pc, #208]	; (8009fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8009ef0:	4313      	orrs	r3, r2
 8009ef2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009ef4:	f7fd f8fc 	bl	80070f0 <HAL_GetTick>
 8009ef8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009efa:	e00a      	b.n	8009f12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009efc:	f7fd f8f8 	bl	80070f0 <HAL_GetTick>
 8009f00:	4602      	mov	r2, r0
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	1ad3      	subs	r3, r2, r3
 8009f06:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f0a:	4293      	cmp	r3, r2
 8009f0c:	d901      	bls.n	8009f12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009f0e:	2303      	movs	r3, #3
 8009f10:	e04f      	b.n	8009fb2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009f12:	4b2b      	ldr	r3, [pc, #172]	; (8009fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8009f14:	689b      	ldr	r3, [r3, #8]
 8009f16:	f003 020c 	and.w	r2, r3, #12
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	685b      	ldr	r3, [r3, #4]
 8009f1e:	009b      	lsls	r3, r3, #2
 8009f20:	429a      	cmp	r2, r3
 8009f22:	d1eb      	bne.n	8009efc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009f24:	4b25      	ldr	r3, [pc, #148]	; (8009fbc <HAL_RCC_ClockConfig+0x1b8>)
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	f003 0307 	and.w	r3, r3, #7
 8009f2c:	683a      	ldr	r2, [r7, #0]
 8009f2e:	429a      	cmp	r2, r3
 8009f30:	d20c      	bcs.n	8009f4c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009f32:	4b22      	ldr	r3, [pc, #136]	; (8009fbc <HAL_RCC_ClockConfig+0x1b8>)
 8009f34:	683a      	ldr	r2, [r7, #0]
 8009f36:	b2d2      	uxtb	r2, r2
 8009f38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009f3a:	4b20      	ldr	r3, [pc, #128]	; (8009fbc <HAL_RCC_ClockConfig+0x1b8>)
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	f003 0307 	and.w	r3, r3, #7
 8009f42:	683a      	ldr	r2, [r7, #0]
 8009f44:	429a      	cmp	r2, r3
 8009f46:	d001      	beq.n	8009f4c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009f48:	2301      	movs	r3, #1
 8009f4a:	e032      	b.n	8009fb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	f003 0304 	and.w	r3, r3, #4
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d008      	beq.n	8009f6a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009f58:	4b19      	ldr	r3, [pc, #100]	; (8009fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8009f5a:	689b      	ldr	r3, [r3, #8]
 8009f5c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	68db      	ldr	r3, [r3, #12]
 8009f64:	4916      	ldr	r1, [pc, #88]	; (8009fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8009f66:	4313      	orrs	r3, r2
 8009f68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	f003 0308 	and.w	r3, r3, #8
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d009      	beq.n	8009f8a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009f76:	4b12      	ldr	r3, [pc, #72]	; (8009fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8009f78:	689b      	ldr	r3, [r3, #8]
 8009f7a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	691b      	ldr	r3, [r3, #16]
 8009f82:	00db      	lsls	r3, r3, #3
 8009f84:	490e      	ldr	r1, [pc, #56]	; (8009fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8009f86:	4313      	orrs	r3, r2
 8009f88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009f8a:	f000 f821 	bl	8009fd0 <HAL_RCC_GetSysClockFreq>
 8009f8e:	4602      	mov	r2, r0
 8009f90:	4b0b      	ldr	r3, [pc, #44]	; (8009fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8009f92:	689b      	ldr	r3, [r3, #8]
 8009f94:	091b      	lsrs	r3, r3, #4
 8009f96:	f003 030f 	and.w	r3, r3, #15
 8009f9a:	490a      	ldr	r1, [pc, #40]	; (8009fc4 <HAL_RCC_ClockConfig+0x1c0>)
 8009f9c:	5ccb      	ldrb	r3, [r1, r3]
 8009f9e:	fa22 f303 	lsr.w	r3, r2, r3
 8009fa2:	4a09      	ldr	r2, [pc, #36]	; (8009fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8009fa4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8009fa6:	4b09      	ldr	r3, [pc, #36]	; (8009fcc <HAL_RCC_ClockConfig+0x1c8>)
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	4618      	mov	r0, r3
 8009fac:	f7fc fdde 	bl	8006b6c <HAL_InitTick>

  return HAL_OK;
 8009fb0:	2300      	movs	r3, #0
}
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	3710      	adds	r7, #16
 8009fb6:	46bd      	mov	sp, r7
 8009fb8:	bd80      	pop	{r7, pc}
 8009fba:	bf00      	nop
 8009fbc:	40023c00 	.word	0x40023c00
 8009fc0:	40023800 	.word	0x40023800
 8009fc4:	08015100 	.word	0x08015100
 8009fc8:	20000068 	.word	0x20000068
 8009fcc:	2000006c 	.word	0x2000006c

08009fd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009fd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009fd4:	b094      	sub	sp, #80	; 0x50
 8009fd6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8009fd8:	2300      	movs	r3, #0
 8009fda:	647b      	str	r3, [r7, #68]	; 0x44
 8009fdc:	2300      	movs	r3, #0
 8009fde:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009fe0:	2300      	movs	r3, #0
 8009fe2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8009fe4:	2300      	movs	r3, #0
 8009fe6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009fe8:	4b79      	ldr	r3, [pc, #484]	; (800a1d0 <HAL_RCC_GetSysClockFreq+0x200>)
 8009fea:	689b      	ldr	r3, [r3, #8]
 8009fec:	f003 030c 	and.w	r3, r3, #12
 8009ff0:	2b08      	cmp	r3, #8
 8009ff2:	d00d      	beq.n	800a010 <HAL_RCC_GetSysClockFreq+0x40>
 8009ff4:	2b08      	cmp	r3, #8
 8009ff6:	f200 80e1 	bhi.w	800a1bc <HAL_RCC_GetSysClockFreq+0x1ec>
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d002      	beq.n	800a004 <HAL_RCC_GetSysClockFreq+0x34>
 8009ffe:	2b04      	cmp	r3, #4
 800a000:	d003      	beq.n	800a00a <HAL_RCC_GetSysClockFreq+0x3a>
 800a002:	e0db      	b.n	800a1bc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a004:	4b73      	ldr	r3, [pc, #460]	; (800a1d4 <HAL_RCC_GetSysClockFreq+0x204>)
 800a006:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800a008:	e0db      	b.n	800a1c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800a00a:	4b73      	ldr	r3, [pc, #460]	; (800a1d8 <HAL_RCC_GetSysClockFreq+0x208>)
 800a00c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800a00e:	e0d8      	b.n	800a1c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a010:	4b6f      	ldr	r3, [pc, #444]	; (800a1d0 <HAL_RCC_GetSysClockFreq+0x200>)
 800a012:	685b      	ldr	r3, [r3, #4]
 800a014:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a018:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800a01a:	4b6d      	ldr	r3, [pc, #436]	; (800a1d0 <HAL_RCC_GetSysClockFreq+0x200>)
 800a01c:	685b      	ldr	r3, [r3, #4]
 800a01e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a022:	2b00      	cmp	r3, #0
 800a024:	d063      	beq.n	800a0ee <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a026:	4b6a      	ldr	r3, [pc, #424]	; (800a1d0 <HAL_RCC_GetSysClockFreq+0x200>)
 800a028:	685b      	ldr	r3, [r3, #4]
 800a02a:	099b      	lsrs	r3, r3, #6
 800a02c:	2200      	movs	r2, #0
 800a02e:	63bb      	str	r3, [r7, #56]	; 0x38
 800a030:	63fa      	str	r2, [r7, #60]	; 0x3c
 800a032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a034:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a038:	633b      	str	r3, [r7, #48]	; 0x30
 800a03a:	2300      	movs	r3, #0
 800a03c:	637b      	str	r3, [r7, #52]	; 0x34
 800a03e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800a042:	4622      	mov	r2, r4
 800a044:	462b      	mov	r3, r5
 800a046:	f04f 0000 	mov.w	r0, #0
 800a04a:	f04f 0100 	mov.w	r1, #0
 800a04e:	0159      	lsls	r1, r3, #5
 800a050:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a054:	0150      	lsls	r0, r2, #5
 800a056:	4602      	mov	r2, r0
 800a058:	460b      	mov	r3, r1
 800a05a:	4621      	mov	r1, r4
 800a05c:	1a51      	subs	r1, r2, r1
 800a05e:	6139      	str	r1, [r7, #16]
 800a060:	4629      	mov	r1, r5
 800a062:	eb63 0301 	sbc.w	r3, r3, r1
 800a066:	617b      	str	r3, [r7, #20]
 800a068:	f04f 0200 	mov.w	r2, #0
 800a06c:	f04f 0300 	mov.w	r3, #0
 800a070:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a074:	4659      	mov	r1, fp
 800a076:	018b      	lsls	r3, r1, #6
 800a078:	4651      	mov	r1, sl
 800a07a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800a07e:	4651      	mov	r1, sl
 800a080:	018a      	lsls	r2, r1, #6
 800a082:	4651      	mov	r1, sl
 800a084:	ebb2 0801 	subs.w	r8, r2, r1
 800a088:	4659      	mov	r1, fp
 800a08a:	eb63 0901 	sbc.w	r9, r3, r1
 800a08e:	f04f 0200 	mov.w	r2, #0
 800a092:	f04f 0300 	mov.w	r3, #0
 800a096:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a09a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a09e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a0a2:	4690      	mov	r8, r2
 800a0a4:	4699      	mov	r9, r3
 800a0a6:	4623      	mov	r3, r4
 800a0a8:	eb18 0303 	adds.w	r3, r8, r3
 800a0ac:	60bb      	str	r3, [r7, #8]
 800a0ae:	462b      	mov	r3, r5
 800a0b0:	eb49 0303 	adc.w	r3, r9, r3
 800a0b4:	60fb      	str	r3, [r7, #12]
 800a0b6:	f04f 0200 	mov.w	r2, #0
 800a0ba:	f04f 0300 	mov.w	r3, #0
 800a0be:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800a0c2:	4629      	mov	r1, r5
 800a0c4:	024b      	lsls	r3, r1, #9
 800a0c6:	4621      	mov	r1, r4
 800a0c8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800a0cc:	4621      	mov	r1, r4
 800a0ce:	024a      	lsls	r2, r1, #9
 800a0d0:	4610      	mov	r0, r2
 800a0d2:	4619      	mov	r1, r3
 800a0d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a0d6:	2200      	movs	r2, #0
 800a0d8:	62bb      	str	r3, [r7, #40]	; 0x28
 800a0da:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a0dc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a0e0:	f7f6 fdd2 	bl	8000c88 <__aeabi_uldivmod>
 800a0e4:	4602      	mov	r2, r0
 800a0e6:	460b      	mov	r3, r1
 800a0e8:	4613      	mov	r3, r2
 800a0ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a0ec:	e058      	b.n	800a1a0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a0ee:	4b38      	ldr	r3, [pc, #224]	; (800a1d0 <HAL_RCC_GetSysClockFreq+0x200>)
 800a0f0:	685b      	ldr	r3, [r3, #4]
 800a0f2:	099b      	lsrs	r3, r3, #6
 800a0f4:	2200      	movs	r2, #0
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	4611      	mov	r1, r2
 800a0fa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800a0fe:	623b      	str	r3, [r7, #32]
 800a100:	2300      	movs	r3, #0
 800a102:	627b      	str	r3, [r7, #36]	; 0x24
 800a104:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800a108:	4642      	mov	r2, r8
 800a10a:	464b      	mov	r3, r9
 800a10c:	f04f 0000 	mov.w	r0, #0
 800a110:	f04f 0100 	mov.w	r1, #0
 800a114:	0159      	lsls	r1, r3, #5
 800a116:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a11a:	0150      	lsls	r0, r2, #5
 800a11c:	4602      	mov	r2, r0
 800a11e:	460b      	mov	r3, r1
 800a120:	4641      	mov	r1, r8
 800a122:	ebb2 0a01 	subs.w	sl, r2, r1
 800a126:	4649      	mov	r1, r9
 800a128:	eb63 0b01 	sbc.w	fp, r3, r1
 800a12c:	f04f 0200 	mov.w	r2, #0
 800a130:	f04f 0300 	mov.w	r3, #0
 800a134:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800a138:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800a13c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800a140:	ebb2 040a 	subs.w	r4, r2, sl
 800a144:	eb63 050b 	sbc.w	r5, r3, fp
 800a148:	f04f 0200 	mov.w	r2, #0
 800a14c:	f04f 0300 	mov.w	r3, #0
 800a150:	00eb      	lsls	r3, r5, #3
 800a152:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a156:	00e2      	lsls	r2, r4, #3
 800a158:	4614      	mov	r4, r2
 800a15a:	461d      	mov	r5, r3
 800a15c:	4643      	mov	r3, r8
 800a15e:	18e3      	adds	r3, r4, r3
 800a160:	603b      	str	r3, [r7, #0]
 800a162:	464b      	mov	r3, r9
 800a164:	eb45 0303 	adc.w	r3, r5, r3
 800a168:	607b      	str	r3, [r7, #4]
 800a16a:	f04f 0200 	mov.w	r2, #0
 800a16e:	f04f 0300 	mov.w	r3, #0
 800a172:	e9d7 4500 	ldrd	r4, r5, [r7]
 800a176:	4629      	mov	r1, r5
 800a178:	028b      	lsls	r3, r1, #10
 800a17a:	4621      	mov	r1, r4
 800a17c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800a180:	4621      	mov	r1, r4
 800a182:	028a      	lsls	r2, r1, #10
 800a184:	4610      	mov	r0, r2
 800a186:	4619      	mov	r1, r3
 800a188:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a18a:	2200      	movs	r2, #0
 800a18c:	61bb      	str	r3, [r7, #24]
 800a18e:	61fa      	str	r2, [r7, #28]
 800a190:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a194:	f7f6 fd78 	bl	8000c88 <__aeabi_uldivmod>
 800a198:	4602      	mov	r2, r0
 800a19a:	460b      	mov	r3, r1
 800a19c:	4613      	mov	r3, r2
 800a19e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800a1a0:	4b0b      	ldr	r3, [pc, #44]	; (800a1d0 <HAL_RCC_GetSysClockFreq+0x200>)
 800a1a2:	685b      	ldr	r3, [r3, #4]
 800a1a4:	0c1b      	lsrs	r3, r3, #16
 800a1a6:	f003 0303 	and.w	r3, r3, #3
 800a1aa:	3301      	adds	r3, #1
 800a1ac:	005b      	lsls	r3, r3, #1
 800a1ae:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800a1b0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a1b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a1b4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a1b8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800a1ba:	e002      	b.n	800a1c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a1bc:	4b05      	ldr	r3, [pc, #20]	; (800a1d4 <HAL_RCC_GetSysClockFreq+0x204>)
 800a1be:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800a1c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a1c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800a1c4:	4618      	mov	r0, r3
 800a1c6:	3750      	adds	r7, #80	; 0x50
 800a1c8:	46bd      	mov	sp, r7
 800a1ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a1ce:	bf00      	nop
 800a1d0:	40023800 	.word	0x40023800
 800a1d4:	00f42400 	.word	0x00f42400
 800a1d8:	007a1200 	.word	0x007a1200

0800a1dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a1dc:	b480      	push	{r7}
 800a1de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a1e0:	4b03      	ldr	r3, [pc, #12]	; (800a1f0 <HAL_RCC_GetHCLKFreq+0x14>)
 800a1e2:	681b      	ldr	r3, [r3, #0]
}
 800a1e4:	4618      	mov	r0, r3
 800a1e6:	46bd      	mov	sp, r7
 800a1e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ec:	4770      	bx	lr
 800a1ee:	bf00      	nop
 800a1f0:	20000068 	.word	0x20000068

0800a1f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a1f4:	b580      	push	{r7, lr}
 800a1f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800a1f8:	f7ff fff0 	bl	800a1dc <HAL_RCC_GetHCLKFreq>
 800a1fc:	4602      	mov	r2, r0
 800a1fe:	4b05      	ldr	r3, [pc, #20]	; (800a214 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a200:	689b      	ldr	r3, [r3, #8]
 800a202:	0a9b      	lsrs	r3, r3, #10
 800a204:	f003 0307 	and.w	r3, r3, #7
 800a208:	4903      	ldr	r1, [pc, #12]	; (800a218 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a20a:	5ccb      	ldrb	r3, [r1, r3]
 800a20c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a210:	4618      	mov	r0, r3
 800a212:	bd80      	pop	{r7, pc}
 800a214:	40023800 	.word	0x40023800
 800a218:	08015110 	.word	0x08015110

0800a21c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a21c:	b580      	push	{r7, lr}
 800a21e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800a220:	f7ff ffdc 	bl	800a1dc <HAL_RCC_GetHCLKFreq>
 800a224:	4602      	mov	r2, r0
 800a226:	4b05      	ldr	r3, [pc, #20]	; (800a23c <HAL_RCC_GetPCLK2Freq+0x20>)
 800a228:	689b      	ldr	r3, [r3, #8]
 800a22a:	0b5b      	lsrs	r3, r3, #13
 800a22c:	f003 0307 	and.w	r3, r3, #7
 800a230:	4903      	ldr	r1, [pc, #12]	; (800a240 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a232:	5ccb      	ldrb	r3, [r1, r3]
 800a234:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a238:	4618      	mov	r0, r3
 800a23a:	bd80      	pop	{r7, pc}
 800a23c:	40023800 	.word	0x40023800
 800a240:	08015110 	.word	0x08015110

0800a244 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800a244:	b480      	push	{r7}
 800a246:	b083      	sub	sp, #12
 800a248:	af00      	add	r7, sp, #0
 800a24a:	6078      	str	r0, [r7, #4]
 800a24c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	220f      	movs	r2, #15
 800a252:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800a254:	4b12      	ldr	r3, [pc, #72]	; (800a2a0 <HAL_RCC_GetClockConfig+0x5c>)
 800a256:	689b      	ldr	r3, [r3, #8]
 800a258:	f003 0203 	and.w	r2, r3, #3
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800a260:	4b0f      	ldr	r3, [pc, #60]	; (800a2a0 <HAL_RCC_GetClockConfig+0x5c>)
 800a262:	689b      	ldr	r3, [r3, #8]
 800a264:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800a26c:	4b0c      	ldr	r3, [pc, #48]	; (800a2a0 <HAL_RCC_GetClockConfig+0x5c>)
 800a26e:	689b      	ldr	r3, [r3, #8]
 800a270:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800a278:	4b09      	ldr	r3, [pc, #36]	; (800a2a0 <HAL_RCC_GetClockConfig+0x5c>)
 800a27a:	689b      	ldr	r3, [r3, #8]
 800a27c:	08db      	lsrs	r3, r3, #3
 800a27e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800a286:	4b07      	ldr	r3, [pc, #28]	; (800a2a4 <HAL_RCC_GetClockConfig+0x60>)
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	f003 0207 	and.w	r2, r3, #7
 800a28e:	683b      	ldr	r3, [r7, #0]
 800a290:	601a      	str	r2, [r3, #0]
}
 800a292:	bf00      	nop
 800a294:	370c      	adds	r7, #12
 800a296:	46bd      	mov	sp, r7
 800a298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a29c:	4770      	bx	lr
 800a29e:	bf00      	nop
 800a2a0:	40023800 	.word	0x40023800
 800a2a4:	40023c00 	.word	0x40023c00

0800a2a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a2a8:	b580      	push	{r7, lr}
 800a2aa:	b082      	sub	sp, #8
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d101      	bne.n	800a2ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a2b6:	2301      	movs	r3, #1
 800a2b8:	e041      	b.n	800a33e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a2c0:	b2db      	uxtb	r3, r3
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d106      	bne.n	800a2d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	2200      	movs	r2, #0
 800a2ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a2ce:	6878      	ldr	r0, [r7, #4]
 800a2d0:	f7fc fa22 	bl	8006718 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	2202      	movs	r2, #2
 800a2d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	681a      	ldr	r2, [r3, #0]
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	3304      	adds	r3, #4
 800a2e4:	4619      	mov	r1, r3
 800a2e6:	4610      	mov	r0, r2
 800a2e8:	f000 fdae 	bl	800ae48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	2201      	movs	r2, #1
 800a2f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	2201      	movs	r2, #1
 800a2f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	2201      	movs	r2, #1
 800a300:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	2201      	movs	r2, #1
 800a308:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	2201      	movs	r2, #1
 800a310:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	2201      	movs	r2, #1
 800a318:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	2201      	movs	r2, #1
 800a320:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	2201      	movs	r2, #1
 800a328:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	2201      	movs	r2, #1
 800a330:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	2201      	movs	r2, #1
 800a338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a33c:	2300      	movs	r3, #0
}
 800a33e:	4618      	mov	r0, r3
 800a340:	3708      	adds	r7, #8
 800a342:	46bd      	mov	sp, r7
 800a344:	bd80      	pop	{r7, pc}
	...

0800a348 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a348:	b480      	push	{r7}
 800a34a:	b085      	sub	sp, #20
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a356:	b2db      	uxtb	r3, r3
 800a358:	2b01      	cmp	r3, #1
 800a35a:	d001      	beq.n	800a360 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a35c:	2301      	movs	r3, #1
 800a35e:	e04e      	b.n	800a3fe <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	2202      	movs	r2, #2
 800a364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	68da      	ldr	r2, [r3, #12]
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	f042 0201 	orr.w	r2, r2, #1
 800a376:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	4a23      	ldr	r2, [pc, #140]	; (800a40c <HAL_TIM_Base_Start_IT+0xc4>)
 800a37e:	4293      	cmp	r3, r2
 800a380:	d022      	beq.n	800a3c8 <HAL_TIM_Base_Start_IT+0x80>
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a38a:	d01d      	beq.n	800a3c8 <HAL_TIM_Base_Start_IT+0x80>
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	4a1f      	ldr	r2, [pc, #124]	; (800a410 <HAL_TIM_Base_Start_IT+0xc8>)
 800a392:	4293      	cmp	r3, r2
 800a394:	d018      	beq.n	800a3c8 <HAL_TIM_Base_Start_IT+0x80>
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	4a1e      	ldr	r2, [pc, #120]	; (800a414 <HAL_TIM_Base_Start_IT+0xcc>)
 800a39c:	4293      	cmp	r3, r2
 800a39e:	d013      	beq.n	800a3c8 <HAL_TIM_Base_Start_IT+0x80>
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	4a1c      	ldr	r2, [pc, #112]	; (800a418 <HAL_TIM_Base_Start_IT+0xd0>)
 800a3a6:	4293      	cmp	r3, r2
 800a3a8:	d00e      	beq.n	800a3c8 <HAL_TIM_Base_Start_IT+0x80>
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	4a1b      	ldr	r2, [pc, #108]	; (800a41c <HAL_TIM_Base_Start_IT+0xd4>)
 800a3b0:	4293      	cmp	r3, r2
 800a3b2:	d009      	beq.n	800a3c8 <HAL_TIM_Base_Start_IT+0x80>
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	4a19      	ldr	r2, [pc, #100]	; (800a420 <HAL_TIM_Base_Start_IT+0xd8>)
 800a3ba:	4293      	cmp	r3, r2
 800a3bc:	d004      	beq.n	800a3c8 <HAL_TIM_Base_Start_IT+0x80>
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	4a18      	ldr	r2, [pc, #96]	; (800a424 <HAL_TIM_Base_Start_IT+0xdc>)
 800a3c4:	4293      	cmp	r3, r2
 800a3c6:	d111      	bne.n	800a3ec <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	689b      	ldr	r3, [r3, #8]
 800a3ce:	f003 0307 	and.w	r3, r3, #7
 800a3d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	2b06      	cmp	r3, #6
 800a3d8:	d010      	beq.n	800a3fc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	681a      	ldr	r2, [r3, #0]
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	f042 0201 	orr.w	r2, r2, #1
 800a3e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a3ea:	e007      	b.n	800a3fc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	681a      	ldr	r2, [r3, #0]
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	f042 0201 	orr.w	r2, r2, #1
 800a3fa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a3fc:	2300      	movs	r3, #0
}
 800a3fe:	4618      	mov	r0, r3
 800a400:	3714      	adds	r7, #20
 800a402:	46bd      	mov	sp, r7
 800a404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a408:	4770      	bx	lr
 800a40a:	bf00      	nop
 800a40c:	40010000 	.word	0x40010000
 800a410:	40000400 	.word	0x40000400
 800a414:	40000800 	.word	0x40000800
 800a418:	40000c00 	.word	0x40000c00
 800a41c:	40010400 	.word	0x40010400
 800a420:	40014000 	.word	0x40014000
 800a424:	40001800 	.word	0x40001800

0800a428 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a428:	b580      	push	{r7, lr}
 800a42a:	b082      	sub	sp, #8
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	2b00      	cmp	r3, #0
 800a434:	d101      	bne.n	800a43a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a436:	2301      	movs	r3, #1
 800a438:	e041      	b.n	800a4be <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a440:	b2db      	uxtb	r3, r3
 800a442:	2b00      	cmp	r3, #0
 800a444:	d106      	bne.n	800a454 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	2200      	movs	r2, #0
 800a44a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a44e:	6878      	ldr	r0, [r7, #4]
 800a450:	f000 f839 	bl	800a4c6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	2202      	movs	r2, #2
 800a458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	681a      	ldr	r2, [r3, #0]
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	3304      	adds	r3, #4
 800a464:	4619      	mov	r1, r3
 800a466:	4610      	mov	r0, r2
 800a468:	f000 fcee 	bl	800ae48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	2201      	movs	r2, #1
 800a470:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	2201      	movs	r2, #1
 800a478:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	2201      	movs	r2, #1
 800a480:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	2201      	movs	r2, #1
 800a488:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	2201      	movs	r2, #1
 800a490:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	2201      	movs	r2, #1
 800a498:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	2201      	movs	r2, #1
 800a4a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	2201      	movs	r2, #1
 800a4a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	2201      	movs	r2, #1
 800a4b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	2201      	movs	r2, #1
 800a4b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a4bc:	2300      	movs	r3, #0
}
 800a4be:	4618      	mov	r0, r3
 800a4c0:	3708      	adds	r7, #8
 800a4c2:	46bd      	mov	sp, r7
 800a4c4:	bd80      	pop	{r7, pc}

0800a4c6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a4c6:	b480      	push	{r7}
 800a4c8:	b083      	sub	sp, #12
 800a4ca:	af00      	add	r7, sp, #0
 800a4cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a4ce:	bf00      	nop
 800a4d0:	370c      	adds	r7, #12
 800a4d2:	46bd      	mov	sp, r7
 800a4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d8:	4770      	bx	lr
	...

0800a4dc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a4dc:	b580      	push	{r7, lr}
 800a4de:	b084      	sub	sp, #16
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	6078      	str	r0, [r7, #4]
 800a4e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a4e6:	683b      	ldr	r3, [r7, #0]
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d109      	bne.n	800a500 <HAL_TIM_PWM_Start+0x24>
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a4f2:	b2db      	uxtb	r3, r3
 800a4f4:	2b01      	cmp	r3, #1
 800a4f6:	bf14      	ite	ne
 800a4f8:	2301      	movne	r3, #1
 800a4fa:	2300      	moveq	r3, #0
 800a4fc:	b2db      	uxtb	r3, r3
 800a4fe:	e022      	b.n	800a546 <HAL_TIM_PWM_Start+0x6a>
 800a500:	683b      	ldr	r3, [r7, #0]
 800a502:	2b04      	cmp	r3, #4
 800a504:	d109      	bne.n	800a51a <HAL_TIM_PWM_Start+0x3e>
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a50c:	b2db      	uxtb	r3, r3
 800a50e:	2b01      	cmp	r3, #1
 800a510:	bf14      	ite	ne
 800a512:	2301      	movne	r3, #1
 800a514:	2300      	moveq	r3, #0
 800a516:	b2db      	uxtb	r3, r3
 800a518:	e015      	b.n	800a546 <HAL_TIM_PWM_Start+0x6a>
 800a51a:	683b      	ldr	r3, [r7, #0]
 800a51c:	2b08      	cmp	r3, #8
 800a51e:	d109      	bne.n	800a534 <HAL_TIM_PWM_Start+0x58>
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a526:	b2db      	uxtb	r3, r3
 800a528:	2b01      	cmp	r3, #1
 800a52a:	bf14      	ite	ne
 800a52c:	2301      	movne	r3, #1
 800a52e:	2300      	moveq	r3, #0
 800a530:	b2db      	uxtb	r3, r3
 800a532:	e008      	b.n	800a546 <HAL_TIM_PWM_Start+0x6a>
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a53a:	b2db      	uxtb	r3, r3
 800a53c:	2b01      	cmp	r3, #1
 800a53e:	bf14      	ite	ne
 800a540:	2301      	movne	r3, #1
 800a542:	2300      	moveq	r3, #0
 800a544:	b2db      	uxtb	r3, r3
 800a546:	2b00      	cmp	r3, #0
 800a548:	d001      	beq.n	800a54e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800a54a:	2301      	movs	r3, #1
 800a54c:	e07c      	b.n	800a648 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a54e:	683b      	ldr	r3, [r7, #0]
 800a550:	2b00      	cmp	r3, #0
 800a552:	d104      	bne.n	800a55e <HAL_TIM_PWM_Start+0x82>
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	2202      	movs	r2, #2
 800a558:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a55c:	e013      	b.n	800a586 <HAL_TIM_PWM_Start+0xaa>
 800a55e:	683b      	ldr	r3, [r7, #0]
 800a560:	2b04      	cmp	r3, #4
 800a562:	d104      	bne.n	800a56e <HAL_TIM_PWM_Start+0x92>
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	2202      	movs	r2, #2
 800a568:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a56c:	e00b      	b.n	800a586 <HAL_TIM_PWM_Start+0xaa>
 800a56e:	683b      	ldr	r3, [r7, #0]
 800a570:	2b08      	cmp	r3, #8
 800a572:	d104      	bne.n	800a57e <HAL_TIM_PWM_Start+0xa2>
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	2202      	movs	r2, #2
 800a578:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a57c:	e003      	b.n	800a586 <HAL_TIM_PWM_Start+0xaa>
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	2202      	movs	r2, #2
 800a582:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	2201      	movs	r2, #1
 800a58c:	6839      	ldr	r1, [r7, #0]
 800a58e:	4618      	mov	r0, r3
 800a590:	f000 ff44 	bl	800b41c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	4a2d      	ldr	r2, [pc, #180]	; (800a650 <HAL_TIM_PWM_Start+0x174>)
 800a59a:	4293      	cmp	r3, r2
 800a59c:	d004      	beq.n	800a5a8 <HAL_TIM_PWM_Start+0xcc>
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	4a2c      	ldr	r2, [pc, #176]	; (800a654 <HAL_TIM_PWM_Start+0x178>)
 800a5a4:	4293      	cmp	r3, r2
 800a5a6:	d101      	bne.n	800a5ac <HAL_TIM_PWM_Start+0xd0>
 800a5a8:	2301      	movs	r3, #1
 800a5aa:	e000      	b.n	800a5ae <HAL_TIM_PWM_Start+0xd2>
 800a5ac:	2300      	movs	r3, #0
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d007      	beq.n	800a5c2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a5c0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	4a22      	ldr	r2, [pc, #136]	; (800a650 <HAL_TIM_PWM_Start+0x174>)
 800a5c8:	4293      	cmp	r3, r2
 800a5ca:	d022      	beq.n	800a612 <HAL_TIM_PWM_Start+0x136>
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a5d4:	d01d      	beq.n	800a612 <HAL_TIM_PWM_Start+0x136>
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	4a1f      	ldr	r2, [pc, #124]	; (800a658 <HAL_TIM_PWM_Start+0x17c>)
 800a5dc:	4293      	cmp	r3, r2
 800a5de:	d018      	beq.n	800a612 <HAL_TIM_PWM_Start+0x136>
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	4a1d      	ldr	r2, [pc, #116]	; (800a65c <HAL_TIM_PWM_Start+0x180>)
 800a5e6:	4293      	cmp	r3, r2
 800a5e8:	d013      	beq.n	800a612 <HAL_TIM_PWM_Start+0x136>
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	4a1c      	ldr	r2, [pc, #112]	; (800a660 <HAL_TIM_PWM_Start+0x184>)
 800a5f0:	4293      	cmp	r3, r2
 800a5f2:	d00e      	beq.n	800a612 <HAL_TIM_PWM_Start+0x136>
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	4a16      	ldr	r2, [pc, #88]	; (800a654 <HAL_TIM_PWM_Start+0x178>)
 800a5fa:	4293      	cmp	r3, r2
 800a5fc:	d009      	beq.n	800a612 <HAL_TIM_PWM_Start+0x136>
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	4a18      	ldr	r2, [pc, #96]	; (800a664 <HAL_TIM_PWM_Start+0x188>)
 800a604:	4293      	cmp	r3, r2
 800a606:	d004      	beq.n	800a612 <HAL_TIM_PWM_Start+0x136>
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	4a16      	ldr	r2, [pc, #88]	; (800a668 <HAL_TIM_PWM_Start+0x18c>)
 800a60e:	4293      	cmp	r3, r2
 800a610:	d111      	bne.n	800a636 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	689b      	ldr	r3, [r3, #8]
 800a618:	f003 0307 	and.w	r3, r3, #7
 800a61c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	2b06      	cmp	r3, #6
 800a622:	d010      	beq.n	800a646 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	681a      	ldr	r2, [r3, #0]
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	f042 0201 	orr.w	r2, r2, #1
 800a632:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a634:	e007      	b.n	800a646 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	681a      	ldr	r2, [r3, #0]
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	f042 0201 	orr.w	r2, r2, #1
 800a644:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a646:	2300      	movs	r3, #0
}
 800a648:	4618      	mov	r0, r3
 800a64a:	3710      	adds	r7, #16
 800a64c:	46bd      	mov	sp, r7
 800a64e:	bd80      	pop	{r7, pc}
 800a650:	40010000 	.word	0x40010000
 800a654:	40010400 	.word	0x40010400
 800a658:	40000400 	.word	0x40000400
 800a65c:	40000800 	.word	0x40000800
 800a660:	40000c00 	.word	0x40000c00
 800a664:	40014000 	.word	0x40014000
 800a668:	40001800 	.word	0x40001800

0800a66c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800a66c:	b580      	push	{r7, lr}
 800a66e:	b086      	sub	sp, #24
 800a670:	af00      	add	r7, sp, #0
 800a672:	6078      	str	r0, [r7, #4]
 800a674:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d101      	bne.n	800a680 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800a67c:	2301      	movs	r3, #1
 800a67e:	e097      	b.n	800a7b0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a686:	b2db      	uxtb	r3, r3
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d106      	bne.n	800a69a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	2200      	movs	r2, #0
 800a690:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800a694:	6878      	ldr	r0, [r7, #4]
 800a696:	f7fc f8bd 	bl	8006814 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	2202      	movs	r2, #2
 800a69e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	689b      	ldr	r3, [r3, #8]
 800a6a8:	687a      	ldr	r2, [r7, #4]
 800a6aa:	6812      	ldr	r2, [r2, #0]
 800a6ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a6b0:	f023 0307 	bic.w	r3, r3, #7
 800a6b4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	681a      	ldr	r2, [r3, #0]
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	3304      	adds	r3, #4
 800a6be:	4619      	mov	r1, r3
 800a6c0:	4610      	mov	r0, r2
 800a6c2:	f000 fbc1 	bl	800ae48 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	689b      	ldr	r3, [r3, #8]
 800a6cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	699b      	ldr	r3, [r3, #24]
 800a6d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	6a1b      	ldr	r3, [r3, #32]
 800a6dc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800a6de:	683b      	ldr	r3, [r7, #0]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	697a      	ldr	r2, [r7, #20]
 800a6e4:	4313      	orrs	r3, r2
 800a6e6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800a6e8:	693b      	ldr	r3, [r7, #16]
 800a6ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a6ee:	f023 0303 	bic.w	r3, r3, #3
 800a6f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800a6f4:	683b      	ldr	r3, [r7, #0]
 800a6f6:	689a      	ldr	r2, [r3, #8]
 800a6f8:	683b      	ldr	r3, [r7, #0]
 800a6fa:	699b      	ldr	r3, [r3, #24]
 800a6fc:	021b      	lsls	r3, r3, #8
 800a6fe:	4313      	orrs	r3, r2
 800a700:	693a      	ldr	r2, [r7, #16]
 800a702:	4313      	orrs	r3, r2
 800a704:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800a706:	693b      	ldr	r3, [r7, #16]
 800a708:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800a70c:	f023 030c 	bic.w	r3, r3, #12
 800a710:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800a712:	693b      	ldr	r3, [r7, #16]
 800a714:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a718:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a71c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800a71e:	683b      	ldr	r3, [r7, #0]
 800a720:	68da      	ldr	r2, [r3, #12]
 800a722:	683b      	ldr	r3, [r7, #0]
 800a724:	69db      	ldr	r3, [r3, #28]
 800a726:	021b      	lsls	r3, r3, #8
 800a728:	4313      	orrs	r3, r2
 800a72a:	693a      	ldr	r2, [r7, #16]
 800a72c:	4313      	orrs	r3, r2
 800a72e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800a730:	683b      	ldr	r3, [r7, #0]
 800a732:	691b      	ldr	r3, [r3, #16]
 800a734:	011a      	lsls	r2, r3, #4
 800a736:	683b      	ldr	r3, [r7, #0]
 800a738:	6a1b      	ldr	r3, [r3, #32]
 800a73a:	031b      	lsls	r3, r3, #12
 800a73c:	4313      	orrs	r3, r2
 800a73e:	693a      	ldr	r2, [r7, #16]
 800a740:	4313      	orrs	r3, r2
 800a742:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800a74a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800a752:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800a754:	683b      	ldr	r3, [r7, #0]
 800a756:	685a      	ldr	r2, [r3, #4]
 800a758:	683b      	ldr	r3, [r7, #0]
 800a75a:	695b      	ldr	r3, [r3, #20]
 800a75c:	011b      	lsls	r3, r3, #4
 800a75e:	4313      	orrs	r3, r2
 800a760:	68fa      	ldr	r2, [r7, #12]
 800a762:	4313      	orrs	r3, r2
 800a764:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	697a      	ldr	r2, [r7, #20]
 800a76c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	693a      	ldr	r2, [r7, #16]
 800a774:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	68fa      	ldr	r2, [r7, #12]
 800a77c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	2201      	movs	r2, #1
 800a782:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	2201      	movs	r2, #1
 800a78a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	2201      	movs	r2, #1
 800a792:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	2201      	movs	r2, #1
 800a79a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	2201      	movs	r2, #1
 800a7a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	2201      	movs	r2, #1
 800a7aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a7ae:	2300      	movs	r3, #0
}
 800a7b0:	4618      	mov	r0, r3
 800a7b2:	3718      	adds	r7, #24
 800a7b4:	46bd      	mov	sp, r7
 800a7b6:	bd80      	pop	{r7, pc}

0800a7b8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a7b8:	b580      	push	{r7, lr}
 800a7ba:	b084      	sub	sp, #16
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	6078      	str	r0, [r7, #4]
 800a7c0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a7c8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a7d0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a7d8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a7e0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800a7e2:	683b      	ldr	r3, [r7, #0]
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d110      	bne.n	800a80a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a7e8:	7bfb      	ldrb	r3, [r7, #15]
 800a7ea:	2b01      	cmp	r3, #1
 800a7ec:	d102      	bne.n	800a7f4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800a7ee:	7b7b      	ldrb	r3, [r7, #13]
 800a7f0:	2b01      	cmp	r3, #1
 800a7f2:	d001      	beq.n	800a7f8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800a7f4:	2301      	movs	r3, #1
 800a7f6:	e069      	b.n	800a8cc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	2202      	movs	r2, #2
 800a7fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	2202      	movs	r2, #2
 800a804:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a808:	e031      	b.n	800a86e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800a80a:	683b      	ldr	r3, [r7, #0]
 800a80c:	2b04      	cmp	r3, #4
 800a80e:	d110      	bne.n	800a832 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800a810:	7bbb      	ldrb	r3, [r7, #14]
 800a812:	2b01      	cmp	r3, #1
 800a814:	d102      	bne.n	800a81c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800a816:	7b3b      	ldrb	r3, [r7, #12]
 800a818:	2b01      	cmp	r3, #1
 800a81a:	d001      	beq.n	800a820 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800a81c:	2301      	movs	r3, #1
 800a81e:	e055      	b.n	800a8cc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	2202      	movs	r2, #2
 800a824:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	2202      	movs	r2, #2
 800a82c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a830:	e01d      	b.n	800a86e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a832:	7bfb      	ldrb	r3, [r7, #15]
 800a834:	2b01      	cmp	r3, #1
 800a836:	d108      	bne.n	800a84a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800a838:	7bbb      	ldrb	r3, [r7, #14]
 800a83a:	2b01      	cmp	r3, #1
 800a83c:	d105      	bne.n	800a84a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a83e:	7b7b      	ldrb	r3, [r7, #13]
 800a840:	2b01      	cmp	r3, #1
 800a842:	d102      	bne.n	800a84a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800a844:	7b3b      	ldrb	r3, [r7, #12]
 800a846:	2b01      	cmp	r3, #1
 800a848:	d001      	beq.n	800a84e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800a84a:	2301      	movs	r3, #1
 800a84c:	e03e      	b.n	800a8cc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	2202      	movs	r2, #2
 800a852:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	2202      	movs	r2, #2
 800a85a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	2202      	movs	r2, #2
 800a862:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	2202      	movs	r2, #2
 800a86a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800a86e:	683b      	ldr	r3, [r7, #0]
 800a870:	2b00      	cmp	r3, #0
 800a872:	d003      	beq.n	800a87c <HAL_TIM_Encoder_Start+0xc4>
 800a874:	683b      	ldr	r3, [r7, #0]
 800a876:	2b04      	cmp	r3, #4
 800a878:	d008      	beq.n	800a88c <HAL_TIM_Encoder_Start+0xd4>
 800a87a:	e00f      	b.n	800a89c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	2201      	movs	r2, #1
 800a882:	2100      	movs	r1, #0
 800a884:	4618      	mov	r0, r3
 800a886:	f000 fdc9 	bl	800b41c <TIM_CCxChannelCmd>
      break;
 800a88a:	e016      	b.n	800a8ba <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	2201      	movs	r2, #1
 800a892:	2104      	movs	r1, #4
 800a894:	4618      	mov	r0, r3
 800a896:	f000 fdc1 	bl	800b41c <TIM_CCxChannelCmd>
      break;
 800a89a:	e00e      	b.n	800a8ba <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	2201      	movs	r2, #1
 800a8a2:	2100      	movs	r1, #0
 800a8a4:	4618      	mov	r0, r3
 800a8a6:	f000 fdb9 	bl	800b41c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	2201      	movs	r2, #1
 800a8b0:	2104      	movs	r1, #4
 800a8b2:	4618      	mov	r0, r3
 800a8b4:	f000 fdb2 	bl	800b41c <TIM_CCxChannelCmd>
      break;
 800a8b8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	681a      	ldr	r2, [r3, #0]
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	f042 0201 	orr.w	r2, r2, #1
 800a8c8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800a8ca:	2300      	movs	r3, #0
}
 800a8cc:	4618      	mov	r0, r3
 800a8ce:	3710      	adds	r7, #16
 800a8d0:	46bd      	mov	sp, r7
 800a8d2:	bd80      	pop	{r7, pc}

0800a8d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a8d4:	b580      	push	{r7, lr}
 800a8d6:	b082      	sub	sp, #8
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	691b      	ldr	r3, [r3, #16]
 800a8e2:	f003 0302 	and.w	r3, r3, #2
 800a8e6:	2b02      	cmp	r3, #2
 800a8e8:	d122      	bne.n	800a930 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	68db      	ldr	r3, [r3, #12]
 800a8f0:	f003 0302 	and.w	r3, r3, #2
 800a8f4:	2b02      	cmp	r3, #2
 800a8f6:	d11b      	bne.n	800a930 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	f06f 0202 	mvn.w	r2, #2
 800a900:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	2201      	movs	r2, #1
 800a906:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	699b      	ldr	r3, [r3, #24]
 800a90e:	f003 0303 	and.w	r3, r3, #3
 800a912:	2b00      	cmp	r3, #0
 800a914:	d003      	beq.n	800a91e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a916:	6878      	ldr	r0, [r7, #4]
 800a918:	f000 fa77 	bl	800ae0a <HAL_TIM_IC_CaptureCallback>
 800a91c:	e005      	b.n	800a92a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a91e:	6878      	ldr	r0, [r7, #4]
 800a920:	f000 fa69 	bl	800adf6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a924:	6878      	ldr	r0, [r7, #4]
 800a926:	f000 fa7a 	bl	800ae1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	2200      	movs	r2, #0
 800a92e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	691b      	ldr	r3, [r3, #16]
 800a936:	f003 0304 	and.w	r3, r3, #4
 800a93a:	2b04      	cmp	r3, #4
 800a93c:	d122      	bne.n	800a984 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	68db      	ldr	r3, [r3, #12]
 800a944:	f003 0304 	and.w	r3, r3, #4
 800a948:	2b04      	cmp	r3, #4
 800a94a:	d11b      	bne.n	800a984 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	f06f 0204 	mvn.w	r2, #4
 800a954:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	2202      	movs	r2, #2
 800a95a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	699b      	ldr	r3, [r3, #24]
 800a962:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a966:	2b00      	cmp	r3, #0
 800a968:	d003      	beq.n	800a972 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a96a:	6878      	ldr	r0, [r7, #4]
 800a96c:	f000 fa4d 	bl	800ae0a <HAL_TIM_IC_CaptureCallback>
 800a970:	e005      	b.n	800a97e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a972:	6878      	ldr	r0, [r7, #4]
 800a974:	f000 fa3f 	bl	800adf6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a978:	6878      	ldr	r0, [r7, #4]
 800a97a:	f000 fa50 	bl	800ae1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	2200      	movs	r2, #0
 800a982:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	691b      	ldr	r3, [r3, #16]
 800a98a:	f003 0308 	and.w	r3, r3, #8
 800a98e:	2b08      	cmp	r3, #8
 800a990:	d122      	bne.n	800a9d8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	68db      	ldr	r3, [r3, #12]
 800a998:	f003 0308 	and.w	r3, r3, #8
 800a99c:	2b08      	cmp	r3, #8
 800a99e:	d11b      	bne.n	800a9d8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	f06f 0208 	mvn.w	r2, #8
 800a9a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	2204      	movs	r2, #4
 800a9ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	69db      	ldr	r3, [r3, #28]
 800a9b6:	f003 0303 	and.w	r3, r3, #3
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d003      	beq.n	800a9c6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a9be:	6878      	ldr	r0, [r7, #4]
 800a9c0:	f000 fa23 	bl	800ae0a <HAL_TIM_IC_CaptureCallback>
 800a9c4:	e005      	b.n	800a9d2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a9c6:	6878      	ldr	r0, [r7, #4]
 800a9c8:	f000 fa15 	bl	800adf6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a9cc:	6878      	ldr	r0, [r7, #4]
 800a9ce:	f000 fa26 	bl	800ae1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	2200      	movs	r2, #0
 800a9d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	691b      	ldr	r3, [r3, #16]
 800a9de:	f003 0310 	and.w	r3, r3, #16
 800a9e2:	2b10      	cmp	r3, #16
 800a9e4:	d122      	bne.n	800aa2c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	68db      	ldr	r3, [r3, #12]
 800a9ec:	f003 0310 	and.w	r3, r3, #16
 800a9f0:	2b10      	cmp	r3, #16
 800a9f2:	d11b      	bne.n	800aa2c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	f06f 0210 	mvn.w	r2, #16
 800a9fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	2208      	movs	r2, #8
 800aa02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	69db      	ldr	r3, [r3, #28]
 800aa0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d003      	beq.n	800aa1a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aa12:	6878      	ldr	r0, [r7, #4]
 800aa14:	f000 f9f9 	bl	800ae0a <HAL_TIM_IC_CaptureCallback>
 800aa18:	e005      	b.n	800aa26 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aa1a:	6878      	ldr	r0, [r7, #4]
 800aa1c:	f000 f9eb 	bl	800adf6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aa20:	6878      	ldr	r0, [r7, #4]
 800aa22:	f000 f9fc 	bl	800ae1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	2200      	movs	r2, #0
 800aa2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	691b      	ldr	r3, [r3, #16]
 800aa32:	f003 0301 	and.w	r3, r3, #1
 800aa36:	2b01      	cmp	r3, #1
 800aa38:	d10e      	bne.n	800aa58 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	68db      	ldr	r3, [r3, #12]
 800aa40:	f003 0301 	and.w	r3, r3, #1
 800aa44:	2b01      	cmp	r3, #1
 800aa46:	d107      	bne.n	800aa58 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	f06f 0201 	mvn.w	r2, #1
 800aa50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800aa52:	6878      	ldr	r0, [r7, #4]
 800aa54:	f7fb fbc0 	bl	80061d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	691b      	ldr	r3, [r3, #16]
 800aa5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa62:	2b80      	cmp	r3, #128	; 0x80
 800aa64:	d10e      	bne.n	800aa84 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	68db      	ldr	r3, [r3, #12]
 800aa6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa70:	2b80      	cmp	r3, #128	; 0x80
 800aa72:	d107      	bne.n	800aa84 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800aa7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800aa7e:	6878      	ldr	r0, [r7, #4]
 800aa80:	f000 fdca 	bl	800b618 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	691b      	ldr	r3, [r3, #16]
 800aa8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa8e:	2b40      	cmp	r3, #64	; 0x40
 800aa90:	d10e      	bne.n	800aab0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	68db      	ldr	r3, [r3, #12]
 800aa98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa9c:	2b40      	cmp	r3, #64	; 0x40
 800aa9e:	d107      	bne.n	800aab0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800aaa8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800aaaa:	6878      	ldr	r0, [r7, #4]
 800aaac:	f000 f9c1 	bl	800ae32 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	691b      	ldr	r3, [r3, #16]
 800aab6:	f003 0320 	and.w	r3, r3, #32
 800aaba:	2b20      	cmp	r3, #32
 800aabc:	d10e      	bne.n	800aadc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	68db      	ldr	r3, [r3, #12]
 800aac4:	f003 0320 	and.w	r3, r3, #32
 800aac8:	2b20      	cmp	r3, #32
 800aaca:	d107      	bne.n	800aadc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	f06f 0220 	mvn.w	r2, #32
 800aad4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800aad6:	6878      	ldr	r0, [r7, #4]
 800aad8:	f000 fd94 	bl	800b604 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800aadc:	bf00      	nop
 800aade:	3708      	adds	r7, #8
 800aae0:	46bd      	mov	sp, r7
 800aae2:	bd80      	pop	{r7, pc}

0800aae4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800aae4:	b580      	push	{r7, lr}
 800aae6:	b086      	sub	sp, #24
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	60f8      	str	r0, [r7, #12]
 800aaec:	60b9      	str	r1, [r7, #8]
 800aaee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800aaf0:	2300      	movs	r3, #0
 800aaf2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aafa:	2b01      	cmp	r3, #1
 800aafc:	d101      	bne.n	800ab02 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800aafe:	2302      	movs	r3, #2
 800ab00:	e0ae      	b.n	800ac60 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	2201      	movs	r2, #1
 800ab06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	2b0c      	cmp	r3, #12
 800ab0e:	f200 809f 	bhi.w	800ac50 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800ab12:	a201      	add	r2, pc, #4	; (adr r2, 800ab18 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800ab14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab18:	0800ab4d 	.word	0x0800ab4d
 800ab1c:	0800ac51 	.word	0x0800ac51
 800ab20:	0800ac51 	.word	0x0800ac51
 800ab24:	0800ac51 	.word	0x0800ac51
 800ab28:	0800ab8d 	.word	0x0800ab8d
 800ab2c:	0800ac51 	.word	0x0800ac51
 800ab30:	0800ac51 	.word	0x0800ac51
 800ab34:	0800ac51 	.word	0x0800ac51
 800ab38:	0800abcf 	.word	0x0800abcf
 800ab3c:	0800ac51 	.word	0x0800ac51
 800ab40:	0800ac51 	.word	0x0800ac51
 800ab44:	0800ac51 	.word	0x0800ac51
 800ab48:	0800ac0f 	.word	0x0800ac0f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	68b9      	ldr	r1, [r7, #8]
 800ab52:	4618      	mov	r0, r3
 800ab54:	f000 fa18 	bl	800af88 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	699a      	ldr	r2, [r3, #24]
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	f042 0208 	orr.w	r2, r2, #8
 800ab66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	699a      	ldr	r2, [r3, #24]
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	f022 0204 	bic.w	r2, r2, #4
 800ab76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	6999      	ldr	r1, [r3, #24]
 800ab7e:	68bb      	ldr	r3, [r7, #8]
 800ab80:	691a      	ldr	r2, [r3, #16]
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	430a      	orrs	r2, r1
 800ab88:	619a      	str	r2, [r3, #24]
      break;
 800ab8a:	e064      	b.n	800ac56 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	68b9      	ldr	r1, [r7, #8]
 800ab92:	4618      	mov	r0, r3
 800ab94:	f000 fa68 	bl	800b068 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	699a      	ldr	r2, [r3, #24]
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800aba6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	699a      	ldr	r2, [r3, #24]
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800abb6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	6999      	ldr	r1, [r3, #24]
 800abbe:	68bb      	ldr	r3, [r7, #8]
 800abc0:	691b      	ldr	r3, [r3, #16]
 800abc2:	021a      	lsls	r2, r3, #8
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	430a      	orrs	r2, r1
 800abca:	619a      	str	r2, [r3, #24]
      break;
 800abcc:	e043      	b.n	800ac56 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	68b9      	ldr	r1, [r7, #8]
 800abd4:	4618      	mov	r0, r3
 800abd6:	f000 fabd 	bl	800b154 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	69da      	ldr	r2, [r3, #28]
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	f042 0208 	orr.w	r2, r2, #8
 800abe8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	69da      	ldr	r2, [r3, #28]
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	f022 0204 	bic.w	r2, r2, #4
 800abf8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	69d9      	ldr	r1, [r3, #28]
 800ac00:	68bb      	ldr	r3, [r7, #8]
 800ac02:	691a      	ldr	r2, [r3, #16]
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	430a      	orrs	r2, r1
 800ac0a:	61da      	str	r2, [r3, #28]
      break;
 800ac0c:	e023      	b.n	800ac56 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	68b9      	ldr	r1, [r7, #8]
 800ac14:	4618      	mov	r0, r3
 800ac16:	f000 fb11 	bl	800b23c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	69da      	ldr	r2, [r3, #28]
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ac28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	69da      	ldr	r2, [r3, #28]
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ac38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	69d9      	ldr	r1, [r3, #28]
 800ac40:	68bb      	ldr	r3, [r7, #8]
 800ac42:	691b      	ldr	r3, [r3, #16]
 800ac44:	021a      	lsls	r2, r3, #8
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	430a      	orrs	r2, r1
 800ac4c:	61da      	str	r2, [r3, #28]
      break;
 800ac4e:	e002      	b.n	800ac56 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800ac50:	2301      	movs	r3, #1
 800ac52:	75fb      	strb	r3, [r7, #23]
      break;
 800ac54:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	2200      	movs	r2, #0
 800ac5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ac5e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac60:	4618      	mov	r0, r3
 800ac62:	3718      	adds	r7, #24
 800ac64:	46bd      	mov	sp, r7
 800ac66:	bd80      	pop	{r7, pc}

0800ac68 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ac68:	b580      	push	{r7, lr}
 800ac6a:	b084      	sub	sp, #16
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	6078      	str	r0, [r7, #4]
 800ac70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ac72:	2300      	movs	r3, #0
 800ac74:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ac7c:	2b01      	cmp	r3, #1
 800ac7e:	d101      	bne.n	800ac84 <HAL_TIM_ConfigClockSource+0x1c>
 800ac80:	2302      	movs	r3, #2
 800ac82:	e0b4      	b.n	800adee <HAL_TIM_ConfigClockSource+0x186>
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	2201      	movs	r2, #1
 800ac88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	2202      	movs	r2, #2
 800ac90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	689b      	ldr	r3, [r3, #8]
 800ac9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ac9c:	68bb      	ldr	r3, [r7, #8]
 800ac9e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800aca2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800aca4:	68bb      	ldr	r3, [r7, #8]
 800aca6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800acaa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	68ba      	ldr	r2, [r7, #8]
 800acb2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800acb4:	683b      	ldr	r3, [r7, #0]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800acbc:	d03e      	beq.n	800ad3c <HAL_TIM_ConfigClockSource+0xd4>
 800acbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800acc2:	f200 8087 	bhi.w	800add4 <HAL_TIM_ConfigClockSource+0x16c>
 800acc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800acca:	f000 8086 	beq.w	800adda <HAL_TIM_ConfigClockSource+0x172>
 800acce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800acd2:	d87f      	bhi.n	800add4 <HAL_TIM_ConfigClockSource+0x16c>
 800acd4:	2b70      	cmp	r3, #112	; 0x70
 800acd6:	d01a      	beq.n	800ad0e <HAL_TIM_ConfigClockSource+0xa6>
 800acd8:	2b70      	cmp	r3, #112	; 0x70
 800acda:	d87b      	bhi.n	800add4 <HAL_TIM_ConfigClockSource+0x16c>
 800acdc:	2b60      	cmp	r3, #96	; 0x60
 800acde:	d050      	beq.n	800ad82 <HAL_TIM_ConfigClockSource+0x11a>
 800ace0:	2b60      	cmp	r3, #96	; 0x60
 800ace2:	d877      	bhi.n	800add4 <HAL_TIM_ConfigClockSource+0x16c>
 800ace4:	2b50      	cmp	r3, #80	; 0x50
 800ace6:	d03c      	beq.n	800ad62 <HAL_TIM_ConfigClockSource+0xfa>
 800ace8:	2b50      	cmp	r3, #80	; 0x50
 800acea:	d873      	bhi.n	800add4 <HAL_TIM_ConfigClockSource+0x16c>
 800acec:	2b40      	cmp	r3, #64	; 0x40
 800acee:	d058      	beq.n	800ada2 <HAL_TIM_ConfigClockSource+0x13a>
 800acf0:	2b40      	cmp	r3, #64	; 0x40
 800acf2:	d86f      	bhi.n	800add4 <HAL_TIM_ConfigClockSource+0x16c>
 800acf4:	2b30      	cmp	r3, #48	; 0x30
 800acf6:	d064      	beq.n	800adc2 <HAL_TIM_ConfigClockSource+0x15a>
 800acf8:	2b30      	cmp	r3, #48	; 0x30
 800acfa:	d86b      	bhi.n	800add4 <HAL_TIM_ConfigClockSource+0x16c>
 800acfc:	2b20      	cmp	r3, #32
 800acfe:	d060      	beq.n	800adc2 <HAL_TIM_ConfigClockSource+0x15a>
 800ad00:	2b20      	cmp	r3, #32
 800ad02:	d867      	bhi.n	800add4 <HAL_TIM_ConfigClockSource+0x16c>
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d05c      	beq.n	800adc2 <HAL_TIM_ConfigClockSource+0x15a>
 800ad08:	2b10      	cmp	r3, #16
 800ad0a:	d05a      	beq.n	800adc2 <HAL_TIM_ConfigClockSource+0x15a>
 800ad0c:	e062      	b.n	800add4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	6818      	ldr	r0, [r3, #0]
 800ad12:	683b      	ldr	r3, [r7, #0]
 800ad14:	6899      	ldr	r1, [r3, #8]
 800ad16:	683b      	ldr	r3, [r7, #0]
 800ad18:	685a      	ldr	r2, [r3, #4]
 800ad1a:	683b      	ldr	r3, [r7, #0]
 800ad1c:	68db      	ldr	r3, [r3, #12]
 800ad1e:	f000 fb5d 	bl	800b3dc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	689b      	ldr	r3, [r3, #8]
 800ad28:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ad2a:	68bb      	ldr	r3, [r7, #8]
 800ad2c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800ad30:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	68ba      	ldr	r2, [r7, #8]
 800ad38:	609a      	str	r2, [r3, #8]
      break;
 800ad3a:	e04f      	b.n	800addc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	6818      	ldr	r0, [r3, #0]
 800ad40:	683b      	ldr	r3, [r7, #0]
 800ad42:	6899      	ldr	r1, [r3, #8]
 800ad44:	683b      	ldr	r3, [r7, #0]
 800ad46:	685a      	ldr	r2, [r3, #4]
 800ad48:	683b      	ldr	r3, [r7, #0]
 800ad4a:	68db      	ldr	r3, [r3, #12]
 800ad4c:	f000 fb46 	bl	800b3dc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	689a      	ldr	r2, [r3, #8]
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ad5e:	609a      	str	r2, [r3, #8]
      break;
 800ad60:	e03c      	b.n	800addc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	6818      	ldr	r0, [r3, #0]
 800ad66:	683b      	ldr	r3, [r7, #0]
 800ad68:	6859      	ldr	r1, [r3, #4]
 800ad6a:	683b      	ldr	r3, [r7, #0]
 800ad6c:	68db      	ldr	r3, [r3, #12]
 800ad6e:	461a      	mov	r2, r3
 800ad70:	f000 faba 	bl	800b2e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	2150      	movs	r1, #80	; 0x50
 800ad7a:	4618      	mov	r0, r3
 800ad7c:	f000 fb13 	bl	800b3a6 <TIM_ITRx_SetConfig>
      break;
 800ad80:	e02c      	b.n	800addc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	6818      	ldr	r0, [r3, #0]
 800ad86:	683b      	ldr	r3, [r7, #0]
 800ad88:	6859      	ldr	r1, [r3, #4]
 800ad8a:	683b      	ldr	r3, [r7, #0]
 800ad8c:	68db      	ldr	r3, [r3, #12]
 800ad8e:	461a      	mov	r2, r3
 800ad90:	f000 fad9 	bl	800b346 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	2160      	movs	r1, #96	; 0x60
 800ad9a:	4618      	mov	r0, r3
 800ad9c:	f000 fb03 	bl	800b3a6 <TIM_ITRx_SetConfig>
      break;
 800ada0:	e01c      	b.n	800addc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	6818      	ldr	r0, [r3, #0]
 800ada6:	683b      	ldr	r3, [r7, #0]
 800ada8:	6859      	ldr	r1, [r3, #4]
 800adaa:	683b      	ldr	r3, [r7, #0]
 800adac:	68db      	ldr	r3, [r3, #12]
 800adae:	461a      	mov	r2, r3
 800adb0:	f000 fa9a 	bl	800b2e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	2140      	movs	r1, #64	; 0x40
 800adba:	4618      	mov	r0, r3
 800adbc:	f000 faf3 	bl	800b3a6 <TIM_ITRx_SetConfig>
      break;
 800adc0:	e00c      	b.n	800addc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	681a      	ldr	r2, [r3, #0]
 800adc6:	683b      	ldr	r3, [r7, #0]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	4619      	mov	r1, r3
 800adcc:	4610      	mov	r0, r2
 800adce:	f000 faea 	bl	800b3a6 <TIM_ITRx_SetConfig>
      break;
 800add2:	e003      	b.n	800addc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800add4:	2301      	movs	r3, #1
 800add6:	73fb      	strb	r3, [r7, #15]
      break;
 800add8:	e000      	b.n	800addc <HAL_TIM_ConfigClockSource+0x174>
      break;
 800adda:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	2201      	movs	r2, #1
 800ade0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	2200      	movs	r2, #0
 800ade8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800adec:	7bfb      	ldrb	r3, [r7, #15]
}
 800adee:	4618      	mov	r0, r3
 800adf0:	3710      	adds	r7, #16
 800adf2:	46bd      	mov	sp, r7
 800adf4:	bd80      	pop	{r7, pc}

0800adf6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800adf6:	b480      	push	{r7}
 800adf8:	b083      	sub	sp, #12
 800adfa:	af00      	add	r7, sp, #0
 800adfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800adfe:	bf00      	nop
 800ae00:	370c      	adds	r7, #12
 800ae02:	46bd      	mov	sp, r7
 800ae04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae08:	4770      	bx	lr

0800ae0a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ae0a:	b480      	push	{r7}
 800ae0c:	b083      	sub	sp, #12
 800ae0e:	af00      	add	r7, sp, #0
 800ae10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ae12:	bf00      	nop
 800ae14:	370c      	adds	r7, #12
 800ae16:	46bd      	mov	sp, r7
 800ae18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae1c:	4770      	bx	lr

0800ae1e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ae1e:	b480      	push	{r7}
 800ae20:	b083      	sub	sp, #12
 800ae22:	af00      	add	r7, sp, #0
 800ae24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ae26:	bf00      	nop
 800ae28:	370c      	adds	r7, #12
 800ae2a:	46bd      	mov	sp, r7
 800ae2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae30:	4770      	bx	lr

0800ae32 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ae32:	b480      	push	{r7}
 800ae34:	b083      	sub	sp, #12
 800ae36:	af00      	add	r7, sp, #0
 800ae38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ae3a:	bf00      	nop
 800ae3c:	370c      	adds	r7, #12
 800ae3e:	46bd      	mov	sp, r7
 800ae40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae44:	4770      	bx	lr
	...

0800ae48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800ae48:	b480      	push	{r7}
 800ae4a:	b085      	sub	sp, #20
 800ae4c:	af00      	add	r7, sp, #0
 800ae4e:	6078      	str	r0, [r7, #4]
 800ae50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	4a40      	ldr	r2, [pc, #256]	; (800af5c <TIM_Base_SetConfig+0x114>)
 800ae5c:	4293      	cmp	r3, r2
 800ae5e:	d013      	beq.n	800ae88 <TIM_Base_SetConfig+0x40>
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ae66:	d00f      	beq.n	800ae88 <TIM_Base_SetConfig+0x40>
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	4a3d      	ldr	r2, [pc, #244]	; (800af60 <TIM_Base_SetConfig+0x118>)
 800ae6c:	4293      	cmp	r3, r2
 800ae6e:	d00b      	beq.n	800ae88 <TIM_Base_SetConfig+0x40>
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	4a3c      	ldr	r2, [pc, #240]	; (800af64 <TIM_Base_SetConfig+0x11c>)
 800ae74:	4293      	cmp	r3, r2
 800ae76:	d007      	beq.n	800ae88 <TIM_Base_SetConfig+0x40>
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	4a3b      	ldr	r2, [pc, #236]	; (800af68 <TIM_Base_SetConfig+0x120>)
 800ae7c:	4293      	cmp	r3, r2
 800ae7e:	d003      	beq.n	800ae88 <TIM_Base_SetConfig+0x40>
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	4a3a      	ldr	r2, [pc, #232]	; (800af6c <TIM_Base_SetConfig+0x124>)
 800ae84:	4293      	cmp	r3, r2
 800ae86:	d108      	bne.n	800ae9a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ae90:	683b      	ldr	r3, [r7, #0]
 800ae92:	685b      	ldr	r3, [r3, #4]
 800ae94:	68fa      	ldr	r2, [r7, #12]
 800ae96:	4313      	orrs	r3, r2
 800ae98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	4a2f      	ldr	r2, [pc, #188]	; (800af5c <TIM_Base_SetConfig+0x114>)
 800ae9e:	4293      	cmp	r3, r2
 800aea0:	d02b      	beq.n	800aefa <TIM_Base_SetConfig+0xb2>
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aea8:	d027      	beq.n	800aefa <TIM_Base_SetConfig+0xb2>
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	4a2c      	ldr	r2, [pc, #176]	; (800af60 <TIM_Base_SetConfig+0x118>)
 800aeae:	4293      	cmp	r3, r2
 800aeb0:	d023      	beq.n	800aefa <TIM_Base_SetConfig+0xb2>
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	4a2b      	ldr	r2, [pc, #172]	; (800af64 <TIM_Base_SetConfig+0x11c>)
 800aeb6:	4293      	cmp	r3, r2
 800aeb8:	d01f      	beq.n	800aefa <TIM_Base_SetConfig+0xb2>
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	4a2a      	ldr	r2, [pc, #168]	; (800af68 <TIM_Base_SetConfig+0x120>)
 800aebe:	4293      	cmp	r3, r2
 800aec0:	d01b      	beq.n	800aefa <TIM_Base_SetConfig+0xb2>
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	4a29      	ldr	r2, [pc, #164]	; (800af6c <TIM_Base_SetConfig+0x124>)
 800aec6:	4293      	cmp	r3, r2
 800aec8:	d017      	beq.n	800aefa <TIM_Base_SetConfig+0xb2>
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	4a28      	ldr	r2, [pc, #160]	; (800af70 <TIM_Base_SetConfig+0x128>)
 800aece:	4293      	cmp	r3, r2
 800aed0:	d013      	beq.n	800aefa <TIM_Base_SetConfig+0xb2>
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	4a27      	ldr	r2, [pc, #156]	; (800af74 <TIM_Base_SetConfig+0x12c>)
 800aed6:	4293      	cmp	r3, r2
 800aed8:	d00f      	beq.n	800aefa <TIM_Base_SetConfig+0xb2>
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	4a26      	ldr	r2, [pc, #152]	; (800af78 <TIM_Base_SetConfig+0x130>)
 800aede:	4293      	cmp	r3, r2
 800aee0:	d00b      	beq.n	800aefa <TIM_Base_SetConfig+0xb2>
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	4a25      	ldr	r2, [pc, #148]	; (800af7c <TIM_Base_SetConfig+0x134>)
 800aee6:	4293      	cmp	r3, r2
 800aee8:	d007      	beq.n	800aefa <TIM_Base_SetConfig+0xb2>
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	4a24      	ldr	r2, [pc, #144]	; (800af80 <TIM_Base_SetConfig+0x138>)
 800aeee:	4293      	cmp	r3, r2
 800aef0:	d003      	beq.n	800aefa <TIM_Base_SetConfig+0xb2>
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	4a23      	ldr	r2, [pc, #140]	; (800af84 <TIM_Base_SetConfig+0x13c>)
 800aef6:	4293      	cmp	r3, r2
 800aef8:	d108      	bne.n	800af0c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800af00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800af02:	683b      	ldr	r3, [r7, #0]
 800af04:	68db      	ldr	r3, [r3, #12]
 800af06:	68fa      	ldr	r2, [r7, #12]
 800af08:	4313      	orrs	r3, r2
 800af0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800af12:	683b      	ldr	r3, [r7, #0]
 800af14:	695b      	ldr	r3, [r3, #20]
 800af16:	4313      	orrs	r3, r2
 800af18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	68fa      	ldr	r2, [r7, #12]
 800af1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800af20:	683b      	ldr	r3, [r7, #0]
 800af22:	689a      	ldr	r2, [r3, #8]
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800af28:	683b      	ldr	r3, [r7, #0]
 800af2a:	681a      	ldr	r2, [r3, #0]
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	4a0a      	ldr	r2, [pc, #40]	; (800af5c <TIM_Base_SetConfig+0x114>)
 800af34:	4293      	cmp	r3, r2
 800af36:	d003      	beq.n	800af40 <TIM_Base_SetConfig+0xf8>
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	4a0c      	ldr	r2, [pc, #48]	; (800af6c <TIM_Base_SetConfig+0x124>)
 800af3c:	4293      	cmp	r3, r2
 800af3e:	d103      	bne.n	800af48 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800af40:	683b      	ldr	r3, [r7, #0]
 800af42:	691a      	ldr	r2, [r3, #16]
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	2201      	movs	r2, #1
 800af4c:	615a      	str	r2, [r3, #20]
}
 800af4e:	bf00      	nop
 800af50:	3714      	adds	r7, #20
 800af52:	46bd      	mov	sp, r7
 800af54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af58:	4770      	bx	lr
 800af5a:	bf00      	nop
 800af5c:	40010000 	.word	0x40010000
 800af60:	40000400 	.word	0x40000400
 800af64:	40000800 	.word	0x40000800
 800af68:	40000c00 	.word	0x40000c00
 800af6c:	40010400 	.word	0x40010400
 800af70:	40014000 	.word	0x40014000
 800af74:	40014400 	.word	0x40014400
 800af78:	40014800 	.word	0x40014800
 800af7c:	40001800 	.word	0x40001800
 800af80:	40001c00 	.word	0x40001c00
 800af84:	40002000 	.word	0x40002000

0800af88 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800af88:	b480      	push	{r7}
 800af8a:	b087      	sub	sp, #28
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	6078      	str	r0, [r7, #4]
 800af90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	6a1b      	ldr	r3, [r3, #32]
 800af96:	f023 0201 	bic.w	r2, r3, #1
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	6a1b      	ldr	r3, [r3, #32]
 800afa2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	685b      	ldr	r3, [r3, #4]
 800afa8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	699b      	ldr	r3, [r3, #24]
 800afae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800afb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	f023 0303 	bic.w	r3, r3, #3
 800afbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800afc0:	683b      	ldr	r3, [r7, #0]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	68fa      	ldr	r2, [r7, #12]
 800afc6:	4313      	orrs	r3, r2
 800afc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800afca:	697b      	ldr	r3, [r7, #20]
 800afcc:	f023 0302 	bic.w	r3, r3, #2
 800afd0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800afd2:	683b      	ldr	r3, [r7, #0]
 800afd4:	689b      	ldr	r3, [r3, #8]
 800afd6:	697a      	ldr	r2, [r7, #20]
 800afd8:	4313      	orrs	r3, r2
 800afda:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	4a20      	ldr	r2, [pc, #128]	; (800b060 <TIM_OC1_SetConfig+0xd8>)
 800afe0:	4293      	cmp	r3, r2
 800afe2:	d003      	beq.n	800afec <TIM_OC1_SetConfig+0x64>
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	4a1f      	ldr	r2, [pc, #124]	; (800b064 <TIM_OC1_SetConfig+0xdc>)
 800afe8:	4293      	cmp	r3, r2
 800afea:	d10c      	bne.n	800b006 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800afec:	697b      	ldr	r3, [r7, #20]
 800afee:	f023 0308 	bic.w	r3, r3, #8
 800aff2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800aff4:	683b      	ldr	r3, [r7, #0]
 800aff6:	68db      	ldr	r3, [r3, #12]
 800aff8:	697a      	ldr	r2, [r7, #20]
 800affa:	4313      	orrs	r3, r2
 800affc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800affe:	697b      	ldr	r3, [r7, #20]
 800b000:	f023 0304 	bic.w	r3, r3, #4
 800b004:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	4a15      	ldr	r2, [pc, #84]	; (800b060 <TIM_OC1_SetConfig+0xd8>)
 800b00a:	4293      	cmp	r3, r2
 800b00c:	d003      	beq.n	800b016 <TIM_OC1_SetConfig+0x8e>
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	4a14      	ldr	r2, [pc, #80]	; (800b064 <TIM_OC1_SetConfig+0xdc>)
 800b012:	4293      	cmp	r3, r2
 800b014:	d111      	bne.n	800b03a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b016:	693b      	ldr	r3, [r7, #16]
 800b018:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b01c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b01e:	693b      	ldr	r3, [r7, #16]
 800b020:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b024:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b026:	683b      	ldr	r3, [r7, #0]
 800b028:	695b      	ldr	r3, [r3, #20]
 800b02a:	693a      	ldr	r2, [r7, #16]
 800b02c:	4313      	orrs	r3, r2
 800b02e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b030:	683b      	ldr	r3, [r7, #0]
 800b032:	699b      	ldr	r3, [r3, #24]
 800b034:	693a      	ldr	r2, [r7, #16]
 800b036:	4313      	orrs	r3, r2
 800b038:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	693a      	ldr	r2, [r7, #16]
 800b03e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	68fa      	ldr	r2, [r7, #12]
 800b044:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b046:	683b      	ldr	r3, [r7, #0]
 800b048:	685a      	ldr	r2, [r3, #4]
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	697a      	ldr	r2, [r7, #20]
 800b052:	621a      	str	r2, [r3, #32]
}
 800b054:	bf00      	nop
 800b056:	371c      	adds	r7, #28
 800b058:	46bd      	mov	sp, r7
 800b05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b05e:	4770      	bx	lr
 800b060:	40010000 	.word	0x40010000
 800b064:	40010400 	.word	0x40010400

0800b068 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b068:	b480      	push	{r7}
 800b06a:	b087      	sub	sp, #28
 800b06c:	af00      	add	r7, sp, #0
 800b06e:	6078      	str	r0, [r7, #4]
 800b070:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	6a1b      	ldr	r3, [r3, #32]
 800b076:	f023 0210 	bic.w	r2, r3, #16
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	6a1b      	ldr	r3, [r3, #32]
 800b082:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	685b      	ldr	r3, [r3, #4]
 800b088:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	699b      	ldr	r3, [r3, #24]
 800b08e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b096:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b09e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b0a0:	683b      	ldr	r3, [r7, #0]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	021b      	lsls	r3, r3, #8
 800b0a6:	68fa      	ldr	r2, [r7, #12]
 800b0a8:	4313      	orrs	r3, r2
 800b0aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b0ac:	697b      	ldr	r3, [r7, #20]
 800b0ae:	f023 0320 	bic.w	r3, r3, #32
 800b0b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b0b4:	683b      	ldr	r3, [r7, #0]
 800b0b6:	689b      	ldr	r3, [r3, #8]
 800b0b8:	011b      	lsls	r3, r3, #4
 800b0ba:	697a      	ldr	r2, [r7, #20]
 800b0bc:	4313      	orrs	r3, r2
 800b0be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	4a22      	ldr	r2, [pc, #136]	; (800b14c <TIM_OC2_SetConfig+0xe4>)
 800b0c4:	4293      	cmp	r3, r2
 800b0c6:	d003      	beq.n	800b0d0 <TIM_OC2_SetConfig+0x68>
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	4a21      	ldr	r2, [pc, #132]	; (800b150 <TIM_OC2_SetConfig+0xe8>)
 800b0cc:	4293      	cmp	r3, r2
 800b0ce:	d10d      	bne.n	800b0ec <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b0d0:	697b      	ldr	r3, [r7, #20]
 800b0d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b0d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b0d8:	683b      	ldr	r3, [r7, #0]
 800b0da:	68db      	ldr	r3, [r3, #12]
 800b0dc:	011b      	lsls	r3, r3, #4
 800b0de:	697a      	ldr	r2, [r7, #20]
 800b0e0:	4313      	orrs	r3, r2
 800b0e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b0e4:	697b      	ldr	r3, [r7, #20]
 800b0e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b0ea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	4a17      	ldr	r2, [pc, #92]	; (800b14c <TIM_OC2_SetConfig+0xe4>)
 800b0f0:	4293      	cmp	r3, r2
 800b0f2:	d003      	beq.n	800b0fc <TIM_OC2_SetConfig+0x94>
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	4a16      	ldr	r2, [pc, #88]	; (800b150 <TIM_OC2_SetConfig+0xe8>)
 800b0f8:	4293      	cmp	r3, r2
 800b0fa:	d113      	bne.n	800b124 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b0fc:	693b      	ldr	r3, [r7, #16]
 800b0fe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b102:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b104:	693b      	ldr	r3, [r7, #16]
 800b106:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b10a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b10c:	683b      	ldr	r3, [r7, #0]
 800b10e:	695b      	ldr	r3, [r3, #20]
 800b110:	009b      	lsls	r3, r3, #2
 800b112:	693a      	ldr	r2, [r7, #16]
 800b114:	4313      	orrs	r3, r2
 800b116:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b118:	683b      	ldr	r3, [r7, #0]
 800b11a:	699b      	ldr	r3, [r3, #24]
 800b11c:	009b      	lsls	r3, r3, #2
 800b11e:	693a      	ldr	r2, [r7, #16]
 800b120:	4313      	orrs	r3, r2
 800b122:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	693a      	ldr	r2, [r7, #16]
 800b128:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	68fa      	ldr	r2, [r7, #12]
 800b12e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b130:	683b      	ldr	r3, [r7, #0]
 800b132:	685a      	ldr	r2, [r3, #4]
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	697a      	ldr	r2, [r7, #20]
 800b13c:	621a      	str	r2, [r3, #32]
}
 800b13e:	bf00      	nop
 800b140:	371c      	adds	r7, #28
 800b142:	46bd      	mov	sp, r7
 800b144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b148:	4770      	bx	lr
 800b14a:	bf00      	nop
 800b14c:	40010000 	.word	0x40010000
 800b150:	40010400 	.word	0x40010400

0800b154 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b154:	b480      	push	{r7}
 800b156:	b087      	sub	sp, #28
 800b158:	af00      	add	r7, sp, #0
 800b15a:	6078      	str	r0, [r7, #4]
 800b15c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	6a1b      	ldr	r3, [r3, #32]
 800b162:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	6a1b      	ldr	r3, [r3, #32]
 800b16e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	685b      	ldr	r3, [r3, #4]
 800b174:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	69db      	ldr	r3, [r3, #28]
 800b17a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b182:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	f023 0303 	bic.w	r3, r3, #3
 800b18a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b18c:	683b      	ldr	r3, [r7, #0]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	68fa      	ldr	r2, [r7, #12]
 800b192:	4313      	orrs	r3, r2
 800b194:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b196:	697b      	ldr	r3, [r7, #20]
 800b198:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b19c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b19e:	683b      	ldr	r3, [r7, #0]
 800b1a0:	689b      	ldr	r3, [r3, #8]
 800b1a2:	021b      	lsls	r3, r3, #8
 800b1a4:	697a      	ldr	r2, [r7, #20]
 800b1a6:	4313      	orrs	r3, r2
 800b1a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	4a21      	ldr	r2, [pc, #132]	; (800b234 <TIM_OC3_SetConfig+0xe0>)
 800b1ae:	4293      	cmp	r3, r2
 800b1b0:	d003      	beq.n	800b1ba <TIM_OC3_SetConfig+0x66>
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	4a20      	ldr	r2, [pc, #128]	; (800b238 <TIM_OC3_SetConfig+0xe4>)
 800b1b6:	4293      	cmp	r3, r2
 800b1b8:	d10d      	bne.n	800b1d6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b1ba:	697b      	ldr	r3, [r7, #20]
 800b1bc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b1c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b1c2:	683b      	ldr	r3, [r7, #0]
 800b1c4:	68db      	ldr	r3, [r3, #12]
 800b1c6:	021b      	lsls	r3, r3, #8
 800b1c8:	697a      	ldr	r2, [r7, #20]
 800b1ca:	4313      	orrs	r3, r2
 800b1cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b1ce:	697b      	ldr	r3, [r7, #20]
 800b1d0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b1d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	4a16      	ldr	r2, [pc, #88]	; (800b234 <TIM_OC3_SetConfig+0xe0>)
 800b1da:	4293      	cmp	r3, r2
 800b1dc:	d003      	beq.n	800b1e6 <TIM_OC3_SetConfig+0x92>
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	4a15      	ldr	r2, [pc, #84]	; (800b238 <TIM_OC3_SetConfig+0xe4>)
 800b1e2:	4293      	cmp	r3, r2
 800b1e4:	d113      	bne.n	800b20e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b1e6:	693b      	ldr	r3, [r7, #16]
 800b1e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b1ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b1ee:	693b      	ldr	r3, [r7, #16]
 800b1f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b1f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b1f6:	683b      	ldr	r3, [r7, #0]
 800b1f8:	695b      	ldr	r3, [r3, #20]
 800b1fa:	011b      	lsls	r3, r3, #4
 800b1fc:	693a      	ldr	r2, [r7, #16]
 800b1fe:	4313      	orrs	r3, r2
 800b200:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b202:	683b      	ldr	r3, [r7, #0]
 800b204:	699b      	ldr	r3, [r3, #24]
 800b206:	011b      	lsls	r3, r3, #4
 800b208:	693a      	ldr	r2, [r7, #16]
 800b20a:	4313      	orrs	r3, r2
 800b20c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	693a      	ldr	r2, [r7, #16]
 800b212:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	68fa      	ldr	r2, [r7, #12]
 800b218:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b21a:	683b      	ldr	r3, [r7, #0]
 800b21c:	685a      	ldr	r2, [r3, #4]
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	697a      	ldr	r2, [r7, #20]
 800b226:	621a      	str	r2, [r3, #32]
}
 800b228:	bf00      	nop
 800b22a:	371c      	adds	r7, #28
 800b22c:	46bd      	mov	sp, r7
 800b22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b232:	4770      	bx	lr
 800b234:	40010000 	.word	0x40010000
 800b238:	40010400 	.word	0x40010400

0800b23c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b23c:	b480      	push	{r7}
 800b23e:	b087      	sub	sp, #28
 800b240:	af00      	add	r7, sp, #0
 800b242:	6078      	str	r0, [r7, #4]
 800b244:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	6a1b      	ldr	r3, [r3, #32]
 800b24a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	6a1b      	ldr	r3, [r3, #32]
 800b256:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	685b      	ldr	r3, [r3, #4]
 800b25c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	69db      	ldr	r3, [r3, #28]
 800b262:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b26a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b272:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b274:	683b      	ldr	r3, [r7, #0]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	021b      	lsls	r3, r3, #8
 800b27a:	68fa      	ldr	r2, [r7, #12]
 800b27c:	4313      	orrs	r3, r2
 800b27e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b280:	693b      	ldr	r3, [r7, #16]
 800b282:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b286:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b288:	683b      	ldr	r3, [r7, #0]
 800b28a:	689b      	ldr	r3, [r3, #8]
 800b28c:	031b      	lsls	r3, r3, #12
 800b28e:	693a      	ldr	r2, [r7, #16]
 800b290:	4313      	orrs	r3, r2
 800b292:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	4a12      	ldr	r2, [pc, #72]	; (800b2e0 <TIM_OC4_SetConfig+0xa4>)
 800b298:	4293      	cmp	r3, r2
 800b29a:	d003      	beq.n	800b2a4 <TIM_OC4_SetConfig+0x68>
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	4a11      	ldr	r2, [pc, #68]	; (800b2e4 <TIM_OC4_SetConfig+0xa8>)
 800b2a0:	4293      	cmp	r3, r2
 800b2a2:	d109      	bne.n	800b2b8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b2a4:	697b      	ldr	r3, [r7, #20]
 800b2a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b2aa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b2ac:	683b      	ldr	r3, [r7, #0]
 800b2ae:	695b      	ldr	r3, [r3, #20]
 800b2b0:	019b      	lsls	r3, r3, #6
 800b2b2:	697a      	ldr	r2, [r7, #20]
 800b2b4:	4313      	orrs	r3, r2
 800b2b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	697a      	ldr	r2, [r7, #20]
 800b2bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	68fa      	ldr	r2, [r7, #12]
 800b2c2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b2c4:	683b      	ldr	r3, [r7, #0]
 800b2c6:	685a      	ldr	r2, [r3, #4]
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	693a      	ldr	r2, [r7, #16]
 800b2d0:	621a      	str	r2, [r3, #32]
}
 800b2d2:	bf00      	nop
 800b2d4:	371c      	adds	r7, #28
 800b2d6:	46bd      	mov	sp, r7
 800b2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2dc:	4770      	bx	lr
 800b2de:	bf00      	nop
 800b2e0:	40010000 	.word	0x40010000
 800b2e4:	40010400 	.word	0x40010400

0800b2e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b2e8:	b480      	push	{r7}
 800b2ea:	b087      	sub	sp, #28
 800b2ec:	af00      	add	r7, sp, #0
 800b2ee:	60f8      	str	r0, [r7, #12]
 800b2f0:	60b9      	str	r1, [r7, #8]
 800b2f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	6a1b      	ldr	r3, [r3, #32]
 800b2f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	6a1b      	ldr	r3, [r3, #32]
 800b2fe:	f023 0201 	bic.w	r2, r3, #1
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	699b      	ldr	r3, [r3, #24]
 800b30a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b30c:	693b      	ldr	r3, [r7, #16]
 800b30e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b312:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	011b      	lsls	r3, r3, #4
 800b318:	693a      	ldr	r2, [r7, #16]
 800b31a:	4313      	orrs	r3, r2
 800b31c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b31e:	697b      	ldr	r3, [r7, #20]
 800b320:	f023 030a 	bic.w	r3, r3, #10
 800b324:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b326:	697a      	ldr	r2, [r7, #20]
 800b328:	68bb      	ldr	r3, [r7, #8]
 800b32a:	4313      	orrs	r3, r2
 800b32c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	693a      	ldr	r2, [r7, #16]
 800b332:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	697a      	ldr	r2, [r7, #20]
 800b338:	621a      	str	r2, [r3, #32]
}
 800b33a:	bf00      	nop
 800b33c:	371c      	adds	r7, #28
 800b33e:	46bd      	mov	sp, r7
 800b340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b344:	4770      	bx	lr

0800b346 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b346:	b480      	push	{r7}
 800b348:	b087      	sub	sp, #28
 800b34a:	af00      	add	r7, sp, #0
 800b34c:	60f8      	str	r0, [r7, #12]
 800b34e:	60b9      	str	r1, [r7, #8]
 800b350:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	6a1b      	ldr	r3, [r3, #32]
 800b356:	f023 0210 	bic.w	r2, r3, #16
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	699b      	ldr	r3, [r3, #24]
 800b362:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	6a1b      	ldr	r3, [r3, #32]
 800b368:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b36a:	697b      	ldr	r3, [r7, #20]
 800b36c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b370:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	031b      	lsls	r3, r3, #12
 800b376:	697a      	ldr	r2, [r7, #20]
 800b378:	4313      	orrs	r3, r2
 800b37a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b37c:	693b      	ldr	r3, [r7, #16]
 800b37e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b382:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b384:	68bb      	ldr	r3, [r7, #8]
 800b386:	011b      	lsls	r3, r3, #4
 800b388:	693a      	ldr	r2, [r7, #16]
 800b38a:	4313      	orrs	r3, r2
 800b38c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	697a      	ldr	r2, [r7, #20]
 800b392:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	693a      	ldr	r2, [r7, #16]
 800b398:	621a      	str	r2, [r3, #32]
}
 800b39a:	bf00      	nop
 800b39c:	371c      	adds	r7, #28
 800b39e:	46bd      	mov	sp, r7
 800b3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a4:	4770      	bx	lr

0800b3a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b3a6:	b480      	push	{r7}
 800b3a8:	b085      	sub	sp, #20
 800b3aa:	af00      	add	r7, sp, #0
 800b3ac:	6078      	str	r0, [r7, #4]
 800b3ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	689b      	ldr	r3, [r3, #8]
 800b3b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b3bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b3be:	683a      	ldr	r2, [r7, #0]
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	4313      	orrs	r3, r2
 800b3c4:	f043 0307 	orr.w	r3, r3, #7
 800b3c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	68fa      	ldr	r2, [r7, #12]
 800b3ce:	609a      	str	r2, [r3, #8]
}
 800b3d0:	bf00      	nop
 800b3d2:	3714      	adds	r7, #20
 800b3d4:	46bd      	mov	sp, r7
 800b3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3da:	4770      	bx	lr

0800b3dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b3dc:	b480      	push	{r7}
 800b3de:	b087      	sub	sp, #28
 800b3e0:	af00      	add	r7, sp, #0
 800b3e2:	60f8      	str	r0, [r7, #12]
 800b3e4:	60b9      	str	r1, [r7, #8]
 800b3e6:	607a      	str	r2, [r7, #4]
 800b3e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	689b      	ldr	r3, [r3, #8]
 800b3ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b3f0:	697b      	ldr	r3, [r7, #20]
 800b3f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b3f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b3f8:	683b      	ldr	r3, [r7, #0]
 800b3fa:	021a      	lsls	r2, r3, #8
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	431a      	orrs	r2, r3
 800b400:	68bb      	ldr	r3, [r7, #8]
 800b402:	4313      	orrs	r3, r2
 800b404:	697a      	ldr	r2, [r7, #20]
 800b406:	4313      	orrs	r3, r2
 800b408:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	697a      	ldr	r2, [r7, #20]
 800b40e:	609a      	str	r2, [r3, #8]
}
 800b410:	bf00      	nop
 800b412:	371c      	adds	r7, #28
 800b414:	46bd      	mov	sp, r7
 800b416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b41a:	4770      	bx	lr

0800b41c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b41c:	b480      	push	{r7}
 800b41e:	b087      	sub	sp, #28
 800b420:	af00      	add	r7, sp, #0
 800b422:	60f8      	str	r0, [r7, #12]
 800b424:	60b9      	str	r1, [r7, #8]
 800b426:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b428:	68bb      	ldr	r3, [r7, #8]
 800b42a:	f003 031f 	and.w	r3, r3, #31
 800b42e:	2201      	movs	r2, #1
 800b430:	fa02 f303 	lsl.w	r3, r2, r3
 800b434:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	6a1a      	ldr	r2, [r3, #32]
 800b43a:	697b      	ldr	r3, [r7, #20]
 800b43c:	43db      	mvns	r3, r3
 800b43e:	401a      	ands	r2, r3
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	6a1a      	ldr	r2, [r3, #32]
 800b448:	68bb      	ldr	r3, [r7, #8]
 800b44a:	f003 031f 	and.w	r3, r3, #31
 800b44e:	6879      	ldr	r1, [r7, #4]
 800b450:	fa01 f303 	lsl.w	r3, r1, r3
 800b454:	431a      	orrs	r2, r3
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	621a      	str	r2, [r3, #32]
}
 800b45a:	bf00      	nop
 800b45c:	371c      	adds	r7, #28
 800b45e:	46bd      	mov	sp, r7
 800b460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b464:	4770      	bx	lr
	...

0800b468 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b468:	b480      	push	{r7}
 800b46a:	b085      	sub	sp, #20
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	6078      	str	r0, [r7, #4]
 800b470:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b478:	2b01      	cmp	r3, #1
 800b47a:	d101      	bne.n	800b480 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b47c:	2302      	movs	r3, #2
 800b47e:	e05a      	b.n	800b536 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	2201      	movs	r2, #1
 800b484:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	2202      	movs	r2, #2
 800b48c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	685b      	ldr	r3, [r3, #4]
 800b496:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	689b      	ldr	r3, [r3, #8]
 800b49e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b4a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b4a8:	683b      	ldr	r3, [r7, #0]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	68fa      	ldr	r2, [r7, #12]
 800b4ae:	4313      	orrs	r3, r2
 800b4b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	68fa      	ldr	r2, [r7, #12]
 800b4b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	4a21      	ldr	r2, [pc, #132]	; (800b544 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800b4c0:	4293      	cmp	r3, r2
 800b4c2:	d022      	beq.n	800b50a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b4cc:	d01d      	beq.n	800b50a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	4a1d      	ldr	r2, [pc, #116]	; (800b548 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800b4d4:	4293      	cmp	r3, r2
 800b4d6:	d018      	beq.n	800b50a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	4a1b      	ldr	r2, [pc, #108]	; (800b54c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800b4de:	4293      	cmp	r3, r2
 800b4e0:	d013      	beq.n	800b50a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	4a1a      	ldr	r2, [pc, #104]	; (800b550 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800b4e8:	4293      	cmp	r3, r2
 800b4ea:	d00e      	beq.n	800b50a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	4a18      	ldr	r2, [pc, #96]	; (800b554 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800b4f2:	4293      	cmp	r3, r2
 800b4f4:	d009      	beq.n	800b50a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	4a17      	ldr	r2, [pc, #92]	; (800b558 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800b4fc:	4293      	cmp	r3, r2
 800b4fe:	d004      	beq.n	800b50a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	4a15      	ldr	r2, [pc, #84]	; (800b55c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800b506:	4293      	cmp	r3, r2
 800b508:	d10c      	bne.n	800b524 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b50a:	68bb      	ldr	r3, [r7, #8]
 800b50c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b510:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b512:	683b      	ldr	r3, [r7, #0]
 800b514:	685b      	ldr	r3, [r3, #4]
 800b516:	68ba      	ldr	r2, [r7, #8]
 800b518:	4313      	orrs	r3, r2
 800b51a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	68ba      	ldr	r2, [r7, #8]
 800b522:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	2201      	movs	r2, #1
 800b528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	2200      	movs	r2, #0
 800b530:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b534:	2300      	movs	r3, #0
}
 800b536:	4618      	mov	r0, r3
 800b538:	3714      	adds	r7, #20
 800b53a:	46bd      	mov	sp, r7
 800b53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b540:	4770      	bx	lr
 800b542:	bf00      	nop
 800b544:	40010000 	.word	0x40010000
 800b548:	40000400 	.word	0x40000400
 800b54c:	40000800 	.word	0x40000800
 800b550:	40000c00 	.word	0x40000c00
 800b554:	40010400 	.word	0x40010400
 800b558:	40014000 	.word	0x40014000
 800b55c:	40001800 	.word	0x40001800

0800b560 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b560:	b480      	push	{r7}
 800b562:	b085      	sub	sp, #20
 800b564:	af00      	add	r7, sp, #0
 800b566:	6078      	str	r0, [r7, #4]
 800b568:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b56a:	2300      	movs	r3, #0
 800b56c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b574:	2b01      	cmp	r3, #1
 800b576:	d101      	bne.n	800b57c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b578:	2302      	movs	r3, #2
 800b57a:	e03d      	b.n	800b5f8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	2201      	movs	r2, #1
 800b580:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b58a:	683b      	ldr	r3, [r7, #0]
 800b58c:	68db      	ldr	r3, [r3, #12]
 800b58e:	4313      	orrs	r3, r2
 800b590:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b598:	683b      	ldr	r3, [r7, #0]
 800b59a:	689b      	ldr	r3, [r3, #8]
 800b59c:	4313      	orrs	r3, r2
 800b59e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800b5a6:	683b      	ldr	r3, [r7, #0]
 800b5a8:	685b      	ldr	r3, [r3, #4]
 800b5aa:	4313      	orrs	r3, r2
 800b5ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800b5b4:	683b      	ldr	r3, [r7, #0]
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	4313      	orrs	r3, r2
 800b5ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b5c2:	683b      	ldr	r3, [r7, #0]
 800b5c4:	691b      	ldr	r3, [r3, #16]
 800b5c6:	4313      	orrs	r3, r2
 800b5c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800b5d0:	683b      	ldr	r3, [r7, #0]
 800b5d2:	695b      	ldr	r3, [r3, #20]
 800b5d4:	4313      	orrs	r3, r2
 800b5d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b5de:	683b      	ldr	r3, [r7, #0]
 800b5e0:	69db      	ldr	r3, [r3, #28]
 800b5e2:	4313      	orrs	r3, r2
 800b5e4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	68fa      	ldr	r2, [r7, #12]
 800b5ec:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	2200      	movs	r2, #0
 800b5f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b5f6:	2300      	movs	r3, #0
}
 800b5f8:	4618      	mov	r0, r3
 800b5fa:	3714      	adds	r7, #20
 800b5fc:	46bd      	mov	sp, r7
 800b5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b602:	4770      	bx	lr

0800b604 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b604:	b480      	push	{r7}
 800b606:	b083      	sub	sp, #12
 800b608:	af00      	add	r7, sp, #0
 800b60a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b60c:	bf00      	nop
 800b60e:	370c      	adds	r7, #12
 800b610:	46bd      	mov	sp, r7
 800b612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b616:	4770      	bx	lr

0800b618 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b618:	b480      	push	{r7}
 800b61a:	b083      	sub	sp, #12
 800b61c:	af00      	add	r7, sp, #0
 800b61e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b620:	bf00      	nop
 800b622:	370c      	adds	r7, #12
 800b624:	46bd      	mov	sp, r7
 800b626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b62a:	4770      	bx	lr

0800b62c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b62c:	b580      	push	{r7, lr}
 800b62e:	b082      	sub	sp, #8
 800b630:	af00      	add	r7, sp, #0
 800b632:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	2b00      	cmp	r3, #0
 800b638:	d101      	bne.n	800b63e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b63a:	2301      	movs	r3, #1
 800b63c:	e04a      	b.n	800b6d4 <HAL_UART_Init+0xa8>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b644:	b2db      	uxtb	r3, r3
 800b646:	2b00      	cmp	r3, #0
 800b648:	d111      	bne.n	800b66e <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	2200      	movs	r2, #0
 800b64e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800b652:	6878      	ldr	r0, [r7, #4]
 800b654:	f000 fc6a 	bl	800bf2c <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d102      	bne.n	800b666 <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	4a1e      	ldr	r2, [pc, #120]	; (800b6dc <HAL_UART_Init+0xb0>)
 800b664:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b66a:	6878      	ldr	r0, [r7, #4]
 800b66c:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	2224      	movs	r2, #36	; 0x24
 800b672:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	68da      	ldr	r2, [r3, #12]
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b684:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b686:	6878      	ldr	r0, [r7, #4]
 800b688:	f001 f858 	bl	800c73c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	691a      	ldr	r2, [r3, #16]
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b69a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	695a      	ldr	r2, [r3, #20]
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b6aa:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	68da      	ldr	r2, [r3, #12]
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b6ba:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	2200      	movs	r2, #0
 800b6c0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	2220      	movs	r2, #32
 800b6c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	2220      	movs	r2, #32
 800b6ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800b6d2:	2300      	movs	r3, #0
}
 800b6d4:	4618      	mov	r0, r3
 800b6d6:	3708      	adds	r7, #8
 800b6d8:	46bd      	mov	sp, r7
 800b6da:	bd80      	pop	{r7, pc}
 800b6dc:	080069bd 	.word	0x080069bd

0800b6e0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b6e0:	b580      	push	{r7, lr}
 800b6e2:	b08a      	sub	sp, #40	; 0x28
 800b6e4:	af02      	add	r7, sp, #8
 800b6e6:	60f8      	str	r0, [r7, #12]
 800b6e8:	60b9      	str	r1, [r7, #8]
 800b6ea:	603b      	str	r3, [r7, #0]
 800b6ec:	4613      	mov	r3, r2
 800b6ee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800b6f0:	2300      	movs	r3, #0
 800b6f2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b6fa:	b2db      	uxtb	r3, r3
 800b6fc:	2b20      	cmp	r3, #32
 800b6fe:	d17c      	bne.n	800b7fa <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800b700:	68bb      	ldr	r3, [r7, #8]
 800b702:	2b00      	cmp	r3, #0
 800b704:	d002      	beq.n	800b70c <HAL_UART_Transmit+0x2c>
 800b706:	88fb      	ldrh	r3, [r7, #6]
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d101      	bne.n	800b710 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800b70c:	2301      	movs	r3, #1
 800b70e:	e075      	b.n	800b7fc <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b716:	2b01      	cmp	r3, #1
 800b718:	d101      	bne.n	800b71e <HAL_UART_Transmit+0x3e>
 800b71a:	2302      	movs	r3, #2
 800b71c:	e06e      	b.n	800b7fc <HAL_UART_Transmit+0x11c>
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	2201      	movs	r2, #1
 800b722:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	2200      	movs	r2, #0
 800b72a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	2221      	movs	r2, #33	; 0x21
 800b730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b734:	f7fb fcdc 	bl	80070f0 <HAL_GetTick>
 800b738:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	88fa      	ldrh	r2, [r7, #6]
 800b73e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	88fa      	ldrh	r2, [r7, #6]
 800b744:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	689b      	ldr	r3, [r3, #8]
 800b74a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b74e:	d108      	bne.n	800b762 <HAL_UART_Transmit+0x82>
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	691b      	ldr	r3, [r3, #16]
 800b754:	2b00      	cmp	r3, #0
 800b756:	d104      	bne.n	800b762 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800b758:	2300      	movs	r3, #0
 800b75a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b75c:	68bb      	ldr	r3, [r7, #8]
 800b75e:	61bb      	str	r3, [r7, #24]
 800b760:	e003      	b.n	800b76a <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800b762:	68bb      	ldr	r3, [r7, #8]
 800b764:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b766:	2300      	movs	r3, #0
 800b768:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	2200      	movs	r2, #0
 800b76e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800b772:	e02a      	b.n	800b7ca <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b774:	683b      	ldr	r3, [r7, #0]
 800b776:	9300      	str	r3, [sp, #0]
 800b778:	697b      	ldr	r3, [r7, #20]
 800b77a:	2200      	movs	r2, #0
 800b77c:	2180      	movs	r1, #128	; 0x80
 800b77e:	68f8      	ldr	r0, [r7, #12]
 800b780:	f000 fd09 	bl	800c196 <UART_WaitOnFlagUntilTimeout>
 800b784:	4603      	mov	r3, r0
 800b786:	2b00      	cmp	r3, #0
 800b788:	d001      	beq.n	800b78e <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800b78a:	2303      	movs	r3, #3
 800b78c:	e036      	b.n	800b7fc <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800b78e:	69fb      	ldr	r3, [r7, #28]
 800b790:	2b00      	cmp	r3, #0
 800b792:	d10b      	bne.n	800b7ac <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b794:	69bb      	ldr	r3, [r7, #24]
 800b796:	881b      	ldrh	r3, [r3, #0]
 800b798:	461a      	mov	r2, r3
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b7a2:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800b7a4:	69bb      	ldr	r3, [r7, #24]
 800b7a6:	3302      	adds	r3, #2
 800b7a8:	61bb      	str	r3, [r7, #24]
 800b7aa:	e007      	b.n	800b7bc <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800b7ac:	69fb      	ldr	r3, [r7, #28]
 800b7ae:	781a      	ldrb	r2, [r3, #0]
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800b7b6:	69fb      	ldr	r3, [r7, #28]
 800b7b8:	3301      	adds	r3, #1
 800b7ba:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b7c0:	b29b      	uxth	r3, r3
 800b7c2:	3b01      	subs	r3, #1
 800b7c4:	b29a      	uxth	r2, r3
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b7ce:	b29b      	uxth	r3, r3
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d1cf      	bne.n	800b774 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b7d4:	683b      	ldr	r3, [r7, #0]
 800b7d6:	9300      	str	r3, [sp, #0]
 800b7d8:	697b      	ldr	r3, [r7, #20]
 800b7da:	2200      	movs	r2, #0
 800b7dc:	2140      	movs	r1, #64	; 0x40
 800b7de:	68f8      	ldr	r0, [r7, #12]
 800b7e0:	f000 fcd9 	bl	800c196 <UART_WaitOnFlagUntilTimeout>
 800b7e4:	4603      	mov	r3, r0
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d001      	beq.n	800b7ee <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800b7ea:	2303      	movs	r3, #3
 800b7ec:	e006      	b.n	800b7fc <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	2220      	movs	r2, #32
 800b7f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800b7f6:	2300      	movs	r3, #0
 800b7f8:	e000      	b.n	800b7fc <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800b7fa:	2302      	movs	r3, #2
  }
}
 800b7fc:	4618      	mov	r0, r3
 800b7fe:	3720      	adds	r7, #32
 800b800:	46bd      	mov	sp, r7
 800b802:	bd80      	pop	{r7, pc}

0800b804 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b804:	b580      	push	{r7, lr}
 800b806:	b084      	sub	sp, #16
 800b808:	af00      	add	r7, sp, #0
 800b80a:	60f8      	str	r0, [r7, #12]
 800b80c:	60b9      	str	r1, [r7, #8]
 800b80e:	4613      	mov	r3, r2
 800b810:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b818:	b2db      	uxtb	r3, r3
 800b81a:	2b20      	cmp	r3, #32
 800b81c:	d11d      	bne.n	800b85a <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800b81e:	68bb      	ldr	r3, [r7, #8]
 800b820:	2b00      	cmp	r3, #0
 800b822:	d002      	beq.n	800b82a <HAL_UART_Receive_DMA+0x26>
 800b824:	88fb      	ldrh	r3, [r7, #6]
 800b826:	2b00      	cmp	r3, #0
 800b828:	d101      	bne.n	800b82e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800b82a:	2301      	movs	r3, #1
 800b82c:	e016      	b.n	800b85c <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b834:	2b01      	cmp	r3, #1
 800b836:	d101      	bne.n	800b83c <HAL_UART_Receive_DMA+0x38>
 800b838:	2302      	movs	r3, #2
 800b83a:	e00f      	b.n	800b85c <HAL_UART_Receive_DMA+0x58>
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	2201      	movs	r2, #1
 800b840:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	2200      	movs	r2, #0
 800b848:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800b84a:	88fb      	ldrh	r3, [r7, #6]
 800b84c:	461a      	mov	r2, r3
 800b84e:	68b9      	ldr	r1, [r7, #8]
 800b850:	68f8      	ldr	r0, [r7, #12]
 800b852:	f000 fd0f 	bl	800c274 <UART_Start_Receive_DMA>
 800b856:	4603      	mov	r3, r0
 800b858:	e000      	b.n	800b85c <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800b85a:	2302      	movs	r3, #2
  }
}
 800b85c:	4618      	mov	r0, r3
 800b85e:	3710      	adds	r7, #16
 800b860:	46bd      	mov	sp, r7
 800b862:	bd80      	pop	{r7, pc}

0800b864 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800b864:	b580      	push	{r7, lr}
 800b866:	b090      	sub	sp, #64	; 0x40
 800b868:	af00      	add	r7, sp, #0
 800b86a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800b86c:	2300      	movs	r3, #0
 800b86e:	63fb      	str	r3, [r7, #60]	; 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	695b      	ldr	r3, [r3, #20]
 800b876:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b87a:	2b80      	cmp	r3, #128	; 0x80
 800b87c:	bf0c      	ite	eq
 800b87e:	2301      	moveq	r3, #1
 800b880:	2300      	movne	r3, #0
 800b882:	b2db      	uxtb	r3, r3
 800b884:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b88c:	b2db      	uxtb	r3, r3
 800b88e:	2b21      	cmp	r3, #33	; 0x21
 800b890:	d128      	bne.n	800b8e4 <HAL_UART_DMAStop+0x80>
 800b892:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b894:	2b00      	cmp	r3, #0
 800b896:	d025      	beq.n	800b8e4 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	3314      	adds	r3, #20
 800b89e:	627b      	str	r3, [r7, #36]	; 0x24
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8a2:	e853 3f00 	ldrex	r3, [r3]
 800b8a6:	623b      	str	r3, [r7, #32]
   return(result);
 800b8a8:	6a3b      	ldr	r3, [r7, #32]
 800b8aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b8ae:	63bb      	str	r3, [r7, #56]	; 0x38
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	3314      	adds	r3, #20
 800b8b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b8b8:	633a      	str	r2, [r7, #48]	; 0x30
 800b8ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8bc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b8be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b8c0:	e841 2300 	strex	r3, r2, [r1]
 800b8c4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b8c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d1e5      	bne.n	800b898 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d004      	beq.n	800b8de <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8d8:	4618      	mov	r0, r3
 800b8da:	f7fc fa21 	bl	8007d20 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 800b8de:	6878      	ldr	r0, [r7, #4]
 800b8e0:	f000 fd66 	bl	800c3b0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	695b      	ldr	r3, [r3, #20]
 800b8ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b8ee:	2b40      	cmp	r3, #64	; 0x40
 800b8f0:	bf0c      	ite	eq
 800b8f2:	2301      	moveq	r3, #1
 800b8f4:	2300      	movne	r3, #0
 800b8f6:	b2db      	uxtb	r3, r3
 800b8f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b900:	b2db      	uxtb	r3, r3
 800b902:	2b22      	cmp	r3, #34	; 0x22
 800b904:	d128      	bne.n	800b958 <HAL_UART_DMAStop+0xf4>
 800b906:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d025      	beq.n	800b958 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	3314      	adds	r3, #20
 800b912:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b914:	693b      	ldr	r3, [r7, #16]
 800b916:	e853 3f00 	ldrex	r3, [r3]
 800b91a:	60fb      	str	r3, [r7, #12]
   return(result);
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b922:	637b      	str	r3, [r7, #52]	; 0x34
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	3314      	adds	r3, #20
 800b92a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b92c:	61fa      	str	r2, [r7, #28]
 800b92e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b930:	69b9      	ldr	r1, [r7, #24]
 800b932:	69fa      	ldr	r2, [r7, #28]
 800b934:	e841 2300 	strex	r3, r2, [r1]
 800b938:	617b      	str	r3, [r7, #20]
   return(result);
 800b93a:	697b      	ldr	r3, [r7, #20]
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d1e5      	bne.n	800b90c <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b944:	2b00      	cmp	r3, #0
 800b946:	d004      	beq.n	800b952 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b94c:	4618      	mov	r0, r3
 800b94e:	f7fc f9e7 	bl	8007d20 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 800b952:	6878      	ldr	r0, [r7, #4]
 800b954:	f000 fd54 	bl	800c400 <UART_EndRxTransfer>
  }

  return HAL_OK;
 800b958:	2300      	movs	r3, #0
}
 800b95a:	4618      	mov	r0, r3
 800b95c:	3740      	adds	r7, #64	; 0x40
 800b95e:	46bd      	mov	sp, r7
 800b960:	bd80      	pop	{r7, pc}
	...

0800b964 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b964:	b580      	push	{r7, lr}
 800b966:	b0ba      	sub	sp, #232	; 0xe8
 800b968:	af00      	add	r7, sp, #0
 800b96a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	68db      	ldr	r3, [r3, #12]
 800b97c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	695b      	ldr	r3, [r3, #20]
 800b986:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800b98a:	2300      	movs	r3, #0
 800b98c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800b990:	2300      	movs	r3, #0
 800b992:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800b996:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b99a:	f003 030f 	and.w	r3, r3, #15
 800b99e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800b9a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d10f      	bne.n	800b9ca <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b9aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b9ae:	f003 0320 	and.w	r3, r3, #32
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d009      	beq.n	800b9ca <HAL_UART_IRQHandler+0x66>
 800b9b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b9ba:	f003 0320 	and.w	r3, r3, #32
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d003      	beq.n	800b9ca <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800b9c2:	6878      	ldr	r0, [r7, #4]
 800b9c4:	f000 fdfd 	bl	800c5c2 <UART_Receive_IT>
      return;
 800b9c8:	e25b      	b.n	800be82 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800b9ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	f000 80e1 	beq.w	800bb96 <HAL_UART_IRQHandler+0x232>
 800b9d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b9d8:	f003 0301 	and.w	r3, r3, #1
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d106      	bne.n	800b9ee <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800b9e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b9e4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	f000 80d4 	beq.w	800bb96 <HAL_UART_IRQHandler+0x232>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800b9ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b9f2:	f003 0301 	and.w	r3, r3, #1
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d00b      	beq.n	800ba12 <HAL_UART_IRQHandler+0xae>
 800b9fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b9fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d005      	beq.n	800ba12 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba0a:	f043 0201 	orr.w	r2, r3, #1
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ba12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba16:	f003 0304 	and.w	r3, r3, #4
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d00b      	beq.n	800ba36 <HAL_UART_IRQHandler+0xd2>
 800ba1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ba22:	f003 0301 	and.w	r3, r3, #1
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d005      	beq.n	800ba36 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba2e:	f043 0202 	orr.w	r2, r3, #2
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ba36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba3a:	f003 0302 	and.w	r3, r3, #2
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d00b      	beq.n	800ba5a <HAL_UART_IRQHandler+0xf6>
 800ba42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ba46:	f003 0301 	and.w	r3, r3, #1
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d005      	beq.n	800ba5a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba52:	f043 0204 	orr.w	r2, r3, #4
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800ba5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba5e:	f003 0308 	and.w	r3, r3, #8
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d011      	beq.n	800ba8a <HAL_UART_IRQHandler+0x126>
 800ba66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ba6a:	f003 0320 	and.w	r3, r3, #32
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d105      	bne.n	800ba7e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800ba72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ba76:	f003 0301 	and.w	r3, r3, #1
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d005      	beq.n	800ba8a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba82:	f043 0208 	orr.w	r2, r3, #8
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	f000 81f2 	beq.w	800be78 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800ba94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba98:	f003 0320 	and.w	r3, r3, #32
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d008      	beq.n	800bab2 <HAL_UART_IRQHandler+0x14e>
 800baa0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800baa4:	f003 0320 	and.w	r3, r3, #32
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d002      	beq.n	800bab2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800baac:	6878      	ldr	r0, [r7, #4]
 800baae:	f000 fd88 	bl	800c5c2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	695b      	ldr	r3, [r3, #20]
 800bab8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800babc:	2b40      	cmp	r3, #64	; 0x40
 800babe:	bf0c      	ite	eq
 800bac0:	2301      	moveq	r3, #1
 800bac2:	2300      	movne	r3, #0
 800bac4:	b2db      	uxtb	r3, r3
 800bac6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bace:	f003 0308 	and.w	r3, r3, #8
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d103      	bne.n	800bade <HAL_UART_IRQHandler+0x17a>
 800bad6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bada:	2b00      	cmp	r3, #0
 800badc:	d051      	beq.n	800bb82 <HAL_UART_IRQHandler+0x21e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800bade:	6878      	ldr	r0, [r7, #4]
 800bae0:	f000 fc8e 	bl	800c400 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	695b      	ldr	r3, [r3, #20]
 800baea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800baee:	2b40      	cmp	r3, #64	; 0x40
 800baf0:	d142      	bne.n	800bb78 <HAL_UART_IRQHandler+0x214>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	3314      	adds	r3, #20
 800baf8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bafc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bb00:	e853 3f00 	ldrex	r3, [r3]
 800bb04:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800bb08:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bb0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bb10:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	3314      	adds	r3, #20
 800bb1a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800bb1e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800bb22:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb26:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800bb2a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800bb2e:	e841 2300 	strex	r3, r2, [r1]
 800bb32:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800bb36:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d1d9      	bne.n	800baf2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d013      	beq.n	800bb6e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb4a:	4a7f      	ldr	r2, [pc, #508]	; (800bd48 <HAL_UART_IRQHandler+0x3e4>)
 800bb4c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb52:	4618      	mov	r0, r3
 800bb54:	f7fc f954 	bl	8007e00 <HAL_DMA_Abort_IT>
 800bb58:	4603      	mov	r3, r0
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d019      	beq.n	800bb92 <HAL_UART_IRQHandler+0x22e>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb64:	687a      	ldr	r2, [r7, #4]
 800bb66:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800bb68:	4610      	mov	r0, r2
 800bb6a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bb6c:	e011      	b.n	800bb92 <HAL_UART_IRQHandler+0x22e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb72:	6878      	ldr	r0, [r7, #4]
 800bb74:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bb76:	e00c      	b.n	800bb92 <HAL_UART_IRQHandler+0x22e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb7c:	6878      	ldr	r0, [r7, #4]
 800bb7e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bb80:	e007      	b.n	800bb92 <HAL_UART_IRQHandler+0x22e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb86:	6878      	ldr	r0, [r7, #4]
 800bb88:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	2200      	movs	r2, #0
 800bb8e:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800bb90:	e172      	b.n	800be78 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bb92:	bf00      	nop
    return;
 800bb94:	e170      	b.n	800be78 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb9a:	2b01      	cmp	r3, #1
 800bb9c:	f040 814c 	bne.w	800be38 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800bba0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bba4:	f003 0310 	and.w	r3, r3, #16
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	f000 8145 	beq.w	800be38 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800bbae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bbb2:	f003 0310 	and.w	r3, r3, #16
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	f000 813e 	beq.w	800be38 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800bbbc:	2300      	movs	r3, #0
 800bbbe:	60bb      	str	r3, [r7, #8]
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	60bb      	str	r3, [r7, #8]
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	685b      	ldr	r3, [r3, #4]
 800bbce:	60bb      	str	r3, [r7, #8]
 800bbd0:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	695b      	ldr	r3, [r3, #20]
 800bbd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bbdc:	2b40      	cmp	r3, #64	; 0x40
 800bbde:	f040 80b5 	bne.w	800bd4c <HAL_UART_IRQHandler+0x3e8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	685b      	ldr	r3, [r3, #4]
 800bbea:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800bbee:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	f000 8142 	beq.w	800be7c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800bbfc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bc00:	429a      	cmp	r2, r3
 800bc02:	f080 813b 	bcs.w	800be7c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bc0c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc12:	69db      	ldr	r3, [r3, #28]
 800bc14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bc18:	f000 8088 	beq.w	800bd2c <HAL_UART_IRQHandler+0x3c8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	330c      	adds	r3, #12
 800bc22:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc26:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800bc2a:	e853 3f00 	ldrex	r3, [r3]
 800bc2e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800bc32:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800bc36:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bc3a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	330c      	adds	r3, #12
 800bc44:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800bc48:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800bc4c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc50:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800bc54:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800bc58:	e841 2300 	strex	r3, r2, [r1]
 800bc5c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800bc60:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d1d9      	bne.n	800bc1c <HAL_UART_IRQHandler+0x2b8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	3314      	adds	r3, #20
 800bc6e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc70:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bc72:	e853 3f00 	ldrex	r3, [r3]
 800bc76:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800bc78:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bc7a:	f023 0301 	bic.w	r3, r3, #1
 800bc7e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	3314      	adds	r3, #20
 800bc88:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800bc8c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800bc90:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc92:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800bc94:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800bc98:	e841 2300 	strex	r3, r2, [r1]
 800bc9c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800bc9e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d1e1      	bne.n	800bc68 <HAL_UART_IRQHandler+0x304>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	3314      	adds	r3, #20
 800bcaa:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bcae:	e853 3f00 	ldrex	r3, [r3]
 800bcb2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800bcb4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bcb6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bcba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	3314      	adds	r3, #20
 800bcc4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800bcc8:	66fa      	str	r2, [r7, #108]	; 0x6c
 800bcca:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bccc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800bcce:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800bcd0:	e841 2300 	strex	r3, r2, [r1]
 800bcd4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800bcd6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d1e3      	bne.n	800bca4 <HAL_UART_IRQHandler+0x340>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	2220      	movs	r2, #32
 800bce0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	2200      	movs	r2, #0
 800bce8:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	330c      	adds	r3, #12
 800bcf0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcf2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bcf4:	e853 3f00 	ldrex	r3, [r3]
 800bcf8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800bcfa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bcfc:	f023 0310 	bic.w	r3, r3, #16
 800bd00:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	330c      	adds	r3, #12
 800bd0a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800bd0e:	65ba      	str	r2, [r7, #88]	; 0x58
 800bd10:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd12:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bd14:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bd16:	e841 2300 	strex	r3, r2, [r1]
 800bd1a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800bd1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d1e3      	bne.n	800bcea <HAL_UART_IRQHandler+0x386>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd26:	4618      	mov	r0, r3
 800bd28:	f7fb fffa 	bl	8007d20 <HAL_DMA_Abort>
        }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bd30:	687a      	ldr	r2, [r7, #4]
 800bd32:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 800bd34:	687a      	ldr	r2, [r7, #4]
 800bd36:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 800bd38:	b292      	uxth	r2, r2
 800bd3a:	1a8a      	subs	r2, r1, r2
 800bd3c:	b292      	uxth	r2, r2
 800bd3e:	4611      	mov	r1, r2
 800bd40:	6878      	ldr	r0, [r7, #4]
 800bd42:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800bd44:	e09a      	b.n	800be7c <HAL_UART_IRQHandler+0x518>
 800bd46:	bf00      	nop
 800bd48:	0800c4c7 	.word	0x0800c4c7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bd54:	b29b      	uxth	r3, r3
 800bd56:	1ad3      	subs	r3, r2, r3
 800bd58:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bd60:	b29b      	uxth	r3, r3
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	f000 808c 	beq.w	800be80 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800bd68:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	f000 8087 	beq.w	800be80 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	330c      	adds	r3, #12
 800bd78:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd7c:	e853 3f00 	ldrex	r3, [r3]
 800bd80:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800bd82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd84:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bd88:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	330c      	adds	r3, #12
 800bd92:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800bd96:	647a      	str	r2, [r7, #68]	; 0x44
 800bd98:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd9a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bd9c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bd9e:	e841 2300 	strex	r3, r2, [r1]
 800bda2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bda4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d1e3      	bne.n	800bd72 <HAL_UART_IRQHandler+0x40e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	3314      	adds	r3, #20
 800bdb0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdb4:	e853 3f00 	ldrex	r3, [r3]
 800bdb8:	623b      	str	r3, [r7, #32]
   return(result);
 800bdba:	6a3b      	ldr	r3, [r7, #32]
 800bdbc:	f023 0301 	bic.w	r3, r3, #1
 800bdc0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	3314      	adds	r3, #20
 800bdca:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800bdce:	633a      	str	r2, [r7, #48]	; 0x30
 800bdd0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdd2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bdd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bdd6:	e841 2300 	strex	r3, r2, [r1]
 800bdda:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d1e3      	bne.n	800bdaa <HAL_UART_IRQHandler+0x446>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	2220      	movs	r2, #32
 800bde6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	2200      	movs	r2, #0
 800bdee:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	330c      	adds	r3, #12
 800bdf6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdf8:	693b      	ldr	r3, [r7, #16]
 800bdfa:	e853 3f00 	ldrex	r3, [r3]
 800bdfe:	60fb      	str	r3, [r7, #12]
   return(result);
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	f023 0310 	bic.w	r3, r3, #16
 800be06:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	330c      	adds	r3, #12
 800be10:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800be14:	61fa      	str	r2, [r7, #28]
 800be16:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be18:	69b9      	ldr	r1, [r7, #24]
 800be1a:	69fa      	ldr	r2, [r7, #28]
 800be1c:	e841 2300 	strex	r3, r2, [r1]
 800be20:	617b      	str	r3, [r7, #20]
   return(result);
 800be22:	697b      	ldr	r3, [r7, #20]
 800be24:	2b00      	cmp	r3, #0
 800be26:	d1e3      	bne.n	800bdf0 <HAL_UART_IRQHandler+0x48c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800be2c:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 800be30:	4611      	mov	r1, r2
 800be32:	6878      	ldr	r0, [r7, #4]
 800be34:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800be36:	e023      	b.n	800be80 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800be38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800be3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800be40:	2b00      	cmp	r3, #0
 800be42:	d009      	beq.n	800be58 <HAL_UART_IRQHandler+0x4f4>
 800be44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800be48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d003      	beq.n	800be58 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800be50:	6878      	ldr	r0, [r7, #4]
 800be52:	f000 fb4d 	bl	800c4f0 <UART_Transmit_IT>
    return;
 800be56:	e014      	b.n	800be82 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800be58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800be5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be60:	2b00      	cmp	r3, #0
 800be62:	d00e      	beq.n	800be82 <HAL_UART_IRQHandler+0x51e>
 800be64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800be68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d008      	beq.n	800be82 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800be70:	6878      	ldr	r0, [r7, #4]
 800be72:	f000 fb8d 	bl	800c590 <UART_EndTransmit_IT>
    return;
 800be76:	e004      	b.n	800be82 <HAL_UART_IRQHandler+0x51e>
    return;
 800be78:	bf00      	nop
 800be7a:	e002      	b.n	800be82 <HAL_UART_IRQHandler+0x51e>
      return;
 800be7c:	bf00      	nop
 800be7e:	e000      	b.n	800be82 <HAL_UART_IRQHandler+0x51e>
      return;
 800be80:	bf00      	nop
  }
}
 800be82:	37e8      	adds	r7, #232	; 0xe8
 800be84:	46bd      	mov	sp, r7
 800be86:	bd80      	pop	{r7, pc}

0800be88 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800be88:	b480      	push	{r7}
 800be8a:	b083      	sub	sp, #12
 800be8c:	af00      	add	r7, sp, #0
 800be8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800be90:	bf00      	nop
 800be92:	370c      	adds	r7, #12
 800be94:	46bd      	mov	sp, r7
 800be96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be9a:	4770      	bx	lr

0800be9c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800be9c:	b480      	push	{r7}
 800be9e:	b083      	sub	sp, #12
 800bea0:	af00      	add	r7, sp, #0
 800bea2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800bea4:	bf00      	nop
 800bea6:	370c      	adds	r7, #12
 800bea8:	46bd      	mov	sp, r7
 800beaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beae:	4770      	bx	lr

0800beb0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800beb0:	b480      	push	{r7}
 800beb2:	b083      	sub	sp, #12
 800beb4:	af00      	add	r7, sp, #0
 800beb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800beb8:	bf00      	nop
 800beba:	370c      	adds	r7, #12
 800bebc:	46bd      	mov	sp, r7
 800bebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bec2:	4770      	bx	lr

0800bec4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800bec4:	b480      	push	{r7}
 800bec6:	b083      	sub	sp, #12
 800bec8:	af00      	add	r7, sp, #0
 800beca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800becc:	bf00      	nop
 800bece:	370c      	adds	r7, #12
 800bed0:	46bd      	mov	sp, r7
 800bed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed6:	4770      	bx	lr

0800bed8 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800bed8:	b480      	push	{r7}
 800beda:	b083      	sub	sp, #12
 800bedc:	af00      	add	r7, sp, #0
 800bede:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800bee0:	bf00      	nop
 800bee2:	370c      	adds	r7, #12
 800bee4:	46bd      	mov	sp, r7
 800bee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beea:	4770      	bx	lr

0800beec <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800beec:	b480      	push	{r7}
 800beee:	b083      	sub	sp, #12
 800bef0:	af00      	add	r7, sp, #0
 800bef2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800bef4:	bf00      	nop
 800bef6:	370c      	adds	r7, #12
 800bef8:	46bd      	mov	sp, r7
 800befa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800befe:	4770      	bx	lr

0800bf00 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800bf00:	b480      	push	{r7}
 800bf02:	b083      	sub	sp, #12
 800bf04:	af00      	add	r7, sp, #0
 800bf06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800bf08:	bf00      	nop
 800bf0a:	370c      	adds	r7, #12
 800bf0c:	46bd      	mov	sp, r7
 800bf0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf12:	4770      	bx	lr

0800bf14 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800bf14:	b480      	push	{r7}
 800bf16:	b083      	sub	sp, #12
 800bf18:	af00      	add	r7, sp, #0
 800bf1a:	6078      	str	r0, [r7, #4]
 800bf1c:	460b      	mov	r3, r1
 800bf1e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800bf20:	bf00      	nop
 800bf22:	370c      	adds	r7, #12
 800bf24:	46bd      	mov	sp, r7
 800bf26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf2a:	4770      	bx	lr

0800bf2c <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800bf2c:	b480      	push	{r7}
 800bf2e:	b083      	sub	sp, #12
 800bf30:	af00      	add	r7, sp, #0
 800bf32:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	4a10      	ldr	r2, [pc, #64]	; (800bf78 <UART_InitCallbacksToDefault+0x4c>)
 800bf38:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	4a0f      	ldr	r2, [pc, #60]	; (800bf7c <UART_InitCallbacksToDefault+0x50>)
 800bf3e:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	4a0f      	ldr	r2, [pc, #60]	; (800bf80 <UART_InitCallbacksToDefault+0x54>)
 800bf44:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	4a0e      	ldr	r2, [pc, #56]	; (800bf84 <UART_InitCallbacksToDefault+0x58>)
 800bf4a:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	4a0e      	ldr	r2, [pc, #56]	; (800bf88 <UART_InitCallbacksToDefault+0x5c>)
 800bf50:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	4a0d      	ldr	r2, [pc, #52]	; (800bf8c <UART_InitCallbacksToDefault+0x60>)
 800bf56:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	4a0d      	ldr	r2, [pc, #52]	; (800bf90 <UART_InitCallbacksToDefault+0x64>)
 800bf5c:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	4a0c      	ldr	r2, [pc, #48]	; (800bf94 <UART_InitCallbacksToDefault+0x68>)
 800bf62:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	4a0c      	ldr	r2, [pc, #48]	; (800bf98 <UART_InitCallbacksToDefault+0x6c>)
 800bf68:	669a      	str	r2, [r3, #104]	; 0x68

}
 800bf6a:	bf00      	nop
 800bf6c:	370c      	adds	r7, #12
 800bf6e:	46bd      	mov	sp, r7
 800bf70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf74:	4770      	bx	lr
 800bf76:	bf00      	nop
 800bf78:	0800be9d 	.word	0x0800be9d
 800bf7c:	0800be89 	.word	0x0800be89
 800bf80:	0800beb1 	.word	0x0800beb1
 800bf84:	08001f3d 	.word	0x08001f3d
 800bf88:	0800bec5 	.word	0x0800bec5
 800bf8c:	0800bed9 	.word	0x0800bed9
 800bf90:	0800beed 	.word	0x0800beed
 800bf94:	0800bf01 	.word	0x0800bf01
 800bf98:	0800bf15 	.word	0x0800bf15

0800bf9c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800bf9c:	b580      	push	{r7, lr}
 800bf9e:	b09c      	sub	sp, #112	; 0x70
 800bfa0:	af00      	add	r7, sp, #0
 800bfa2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfa8:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d172      	bne.n	800c09e <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800bfb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bfba:	2200      	movs	r2, #0
 800bfbc:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bfbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	330c      	adds	r3, #12
 800bfc4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bfc8:	e853 3f00 	ldrex	r3, [r3]
 800bfcc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800bfce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bfd0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bfd4:	66bb      	str	r3, [r7, #104]	; 0x68
 800bfd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	330c      	adds	r3, #12
 800bfdc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800bfde:	65ba      	str	r2, [r7, #88]	; 0x58
 800bfe0:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfe2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bfe4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bfe6:	e841 2300 	strex	r3, r2, [r1]
 800bfea:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800bfec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d1e5      	bne.n	800bfbe <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bff2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	3314      	adds	r3, #20
 800bff8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bffc:	e853 3f00 	ldrex	r3, [r3]
 800c000:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c002:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c004:	f023 0301 	bic.w	r3, r3, #1
 800c008:	667b      	str	r3, [r7, #100]	; 0x64
 800c00a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	3314      	adds	r3, #20
 800c010:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c012:	647a      	str	r2, [r7, #68]	; 0x44
 800c014:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c016:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c018:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c01a:	e841 2300 	strex	r3, r2, [r1]
 800c01e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c020:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c022:	2b00      	cmp	r3, #0
 800c024:	d1e5      	bne.n	800bff2 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c026:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	3314      	adds	r3, #20
 800c02c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c02e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c030:	e853 3f00 	ldrex	r3, [r3]
 800c034:	623b      	str	r3, [r7, #32]
   return(result);
 800c036:	6a3b      	ldr	r3, [r7, #32]
 800c038:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c03c:	663b      	str	r3, [r7, #96]	; 0x60
 800c03e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	3314      	adds	r3, #20
 800c044:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c046:	633a      	str	r2, [r7, #48]	; 0x30
 800c048:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c04a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c04c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c04e:	e841 2300 	strex	r3, r2, [r1]
 800c052:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c056:	2b00      	cmp	r3, #0
 800c058:	d1e5      	bne.n	800c026 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800c05a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c05c:	2220      	movs	r2, #32
 800c05e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c062:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c066:	2b01      	cmp	r3, #1
 800c068:	d119      	bne.n	800c09e <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c06a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	330c      	adds	r3, #12
 800c070:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c072:	693b      	ldr	r3, [r7, #16]
 800c074:	e853 3f00 	ldrex	r3, [r3]
 800c078:	60fb      	str	r3, [r7, #12]
   return(result);
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	f023 0310 	bic.w	r3, r3, #16
 800c080:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c082:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	330c      	adds	r3, #12
 800c088:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c08a:	61fa      	str	r2, [r7, #28]
 800c08c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c08e:	69b9      	ldr	r1, [r7, #24]
 800c090:	69fa      	ldr	r2, [r7, #28]
 800c092:	e841 2300 	strex	r3, r2, [r1]
 800c096:	617b      	str	r3, [r7, #20]
   return(result);
 800c098:	697b      	ldr	r3, [r7, #20]
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d1e5      	bne.n	800c06a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c09e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c0a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0a2:	2b01      	cmp	r3, #1
 800c0a4:	d107      	bne.n	800c0b6 <UART_DMAReceiveCplt+0x11a>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 800c0a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c0a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c0aa:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c0ac:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 800c0ae:	4611      	mov	r1, r2
 800c0b0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800c0b2:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c0b4:	e003      	b.n	800c0be <UART_DMAReceiveCplt+0x122>
    huart->RxCpltCallback(huart);
 800c0b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c0b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c0ba:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800c0bc:	4798      	blx	r3
}
 800c0be:	bf00      	nop
 800c0c0:	3770      	adds	r7, #112	; 0x70
 800c0c2:	46bd      	mov	sp, r7
 800c0c4:	bd80      	pop	{r7, pc}

0800c0c6 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c0c6:	b580      	push	{r7, lr}
 800c0c8:	b084      	sub	sp, #16
 800c0ca:	af00      	add	r7, sp, #0
 800c0cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0d2:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0d8:	2b01      	cmp	r3, #1
 800c0da:	d109      	bne.n	800c0f0 <UART_DMARxHalfCplt+0x2a>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c0e0:	68fa      	ldr	r2, [r7, #12]
 800c0e2:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 800c0e4:	0852      	lsrs	r2, r2, #1
 800c0e6:	b292      	uxth	r2, r2
 800c0e8:	4611      	mov	r1, r2
 800c0ea:	68f8      	ldr	r0, [r7, #12]
 800c0ec:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c0ee:	e003      	b.n	800c0f8 <UART_DMARxHalfCplt+0x32>
    huart->RxHalfCpltCallback(huart);
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c0f4:	68f8      	ldr	r0, [r7, #12]
 800c0f6:	4798      	blx	r3
}
 800c0f8:	bf00      	nop
 800c0fa:	3710      	adds	r7, #16
 800c0fc:	46bd      	mov	sp, r7
 800c0fe:	bd80      	pop	{r7, pc}

0800c100 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800c100:	b580      	push	{r7, lr}
 800c102:	b084      	sub	sp, #16
 800c104:	af00      	add	r7, sp, #0
 800c106:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800c108:	2300      	movs	r3, #0
 800c10a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c110:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800c112:	68bb      	ldr	r3, [r7, #8]
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	695b      	ldr	r3, [r3, #20]
 800c118:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c11c:	2b80      	cmp	r3, #128	; 0x80
 800c11e:	bf0c      	ite	eq
 800c120:	2301      	moveq	r3, #1
 800c122:	2300      	movne	r3, #0
 800c124:	b2db      	uxtb	r3, r3
 800c126:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800c128:	68bb      	ldr	r3, [r7, #8]
 800c12a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c12e:	b2db      	uxtb	r3, r3
 800c130:	2b21      	cmp	r3, #33	; 0x21
 800c132:	d108      	bne.n	800c146 <UART_DMAError+0x46>
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	2b00      	cmp	r3, #0
 800c138:	d005      	beq.n	800c146 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800c13a:	68bb      	ldr	r3, [r7, #8]
 800c13c:	2200      	movs	r2, #0
 800c13e:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800c140:	68b8      	ldr	r0, [r7, #8]
 800c142:	f000 f935 	bl	800c3b0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800c146:	68bb      	ldr	r3, [r7, #8]
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	695b      	ldr	r3, [r3, #20]
 800c14c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c150:	2b40      	cmp	r3, #64	; 0x40
 800c152:	bf0c      	ite	eq
 800c154:	2301      	moveq	r3, #1
 800c156:	2300      	movne	r3, #0
 800c158:	b2db      	uxtb	r3, r3
 800c15a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800c15c:	68bb      	ldr	r3, [r7, #8]
 800c15e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c162:	b2db      	uxtb	r3, r3
 800c164:	2b22      	cmp	r3, #34	; 0x22
 800c166:	d108      	bne.n	800c17a <UART_DMAError+0x7a>
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d005      	beq.n	800c17a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800c16e:	68bb      	ldr	r3, [r7, #8]
 800c170:	2200      	movs	r2, #0
 800c172:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800c174:	68b8      	ldr	r0, [r7, #8]
 800c176:	f000 f943 	bl	800c400 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800c17a:	68bb      	ldr	r3, [r7, #8]
 800c17c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c17e:	f043 0210 	orr.w	r2, r3, #16
 800c182:	68bb      	ldr	r3, [r7, #8]
 800c184:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800c186:	68bb      	ldr	r3, [r7, #8]
 800c188:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c18a:	68b8      	ldr	r0, [r7, #8]
 800c18c:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c18e:	bf00      	nop
 800c190:	3710      	adds	r7, #16
 800c192:	46bd      	mov	sp, r7
 800c194:	bd80      	pop	{r7, pc}

0800c196 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800c196:	b580      	push	{r7, lr}
 800c198:	b090      	sub	sp, #64	; 0x40
 800c19a:	af00      	add	r7, sp, #0
 800c19c:	60f8      	str	r0, [r7, #12]
 800c19e:	60b9      	str	r1, [r7, #8]
 800c1a0:	603b      	str	r3, [r7, #0]
 800c1a2:	4613      	mov	r3, r2
 800c1a4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c1a6:	e050      	b.n	800c24a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c1a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c1aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1ae:	d04c      	beq.n	800c24a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800c1b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d007      	beq.n	800c1c6 <UART_WaitOnFlagUntilTimeout+0x30>
 800c1b6:	f7fa ff9b 	bl	80070f0 <HAL_GetTick>
 800c1ba:	4602      	mov	r2, r0
 800c1bc:	683b      	ldr	r3, [r7, #0]
 800c1be:	1ad3      	subs	r3, r2, r3
 800c1c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c1c2:	429a      	cmp	r2, r3
 800c1c4:	d241      	bcs.n	800c24a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	330c      	adds	r3, #12
 800c1cc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1d0:	e853 3f00 	ldrex	r3, [r3]
 800c1d4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c1d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1d8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c1dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	330c      	adds	r3, #12
 800c1e4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c1e6:	637a      	str	r2, [r7, #52]	; 0x34
 800c1e8:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1ea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c1ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c1ee:	e841 2300 	strex	r3, r2, [r1]
 800c1f2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c1f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d1e5      	bne.n	800c1c6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	3314      	adds	r3, #20
 800c200:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c202:	697b      	ldr	r3, [r7, #20]
 800c204:	e853 3f00 	ldrex	r3, [r3]
 800c208:	613b      	str	r3, [r7, #16]
   return(result);
 800c20a:	693b      	ldr	r3, [r7, #16]
 800c20c:	f023 0301 	bic.w	r3, r3, #1
 800c210:	63bb      	str	r3, [r7, #56]	; 0x38
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	3314      	adds	r3, #20
 800c218:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c21a:	623a      	str	r2, [r7, #32]
 800c21c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c21e:	69f9      	ldr	r1, [r7, #28]
 800c220:	6a3a      	ldr	r2, [r7, #32]
 800c222:	e841 2300 	strex	r3, r2, [r1]
 800c226:	61bb      	str	r3, [r7, #24]
   return(result);
 800c228:	69bb      	ldr	r3, [r7, #24]
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d1e5      	bne.n	800c1fa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	2220      	movs	r2, #32
 800c232:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	2220      	movs	r2, #32
 800c23a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	2200      	movs	r2, #0
 800c242:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800c246:	2303      	movs	r3, #3
 800c248:	e00f      	b.n	800c26a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	681a      	ldr	r2, [r3, #0]
 800c250:	68bb      	ldr	r3, [r7, #8]
 800c252:	4013      	ands	r3, r2
 800c254:	68ba      	ldr	r2, [r7, #8]
 800c256:	429a      	cmp	r2, r3
 800c258:	bf0c      	ite	eq
 800c25a:	2301      	moveq	r3, #1
 800c25c:	2300      	movne	r3, #0
 800c25e:	b2db      	uxtb	r3, r3
 800c260:	461a      	mov	r2, r3
 800c262:	79fb      	ldrb	r3, [r7, #7]
 800c264:	429a      	cmp	r2, r3
 800c266:	d09f      	beq.n	800c1a8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800c268:	2300      	movs	r3, #0
}
 800c26a:	4618      	mov	r0, r3
 800c26c:	3740      	adds	r7, #64	; 0x40
 800c26e:	46bd      	mov	sp, r7
 800c270:	bd80      	pop	{r7, pc}
	...

0800c274 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c274:	b580      	push	{r7, lr}
 800c276:	b098      	sub	sp, #96	; 0x60
 800c278:	af00      	add	r7, sp, #0
 800c27a:	60f8      	str	r0, [r7, #12]
 800c27c:	60b9      	str	r1, [r7, #8]
 800c27e:	4613      	mov	r3, r2
 800c280:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800c282:	68ba      	ldr	r2, [r7, #8]
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	88fa      	ldrh	r2, [r7, #6]
 800c28c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c28e:	68fb      	ldr	r3, [r7, #12]
 800c290:	2200      	movs	r2, #0
 800c292:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	2222      	movs	r2, #34	; 0x22
 800c298:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2a0:	4a40      	ldr	r2, [pc, #256]	; (800c3a4 <UART_Start_Receive_DMA+0x130>)
 800c2a2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2a8:	4a3f      	ldr	r2, [pc, #252]	; (800c3a8 <UART_Start_Receive_DMA+0x134>)
 800c2aa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2b0:	4a3e      	ldr	r2, [pc, #248]	; (800c3ac <UART_Start_Receive_DMA+0x138>)
 800c2b2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2b8:	2200      	movs	r2, #0
 800c2ba:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800c2bc:	f107 0308 	add.w	r3, r7, #8
 800c2c0:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	3304      	adds	r3, #4
 800c2cc:	4619      	mov	r1, r3
 800c2ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c2d0:	681a      	ldr	r2, [r3, #0]
 800c2d2:	88fb      	ldrh	r3, [r7, #6]
 800c2d4:	f7fb fccc 	bl	8007c70 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800c2d8:	2300      	movs	r3, #0
 800c2da:	613b      	str	r3, [r7, #16]
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	613b      	str	r3, [r7, #16]
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	685b      	ldr	r3, [r3, #4]
 800c2ea:	613b      	str	r3, [r7, #16]
 800c2ec:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	2200      	movs	r2, #0
 800c2f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	691b      	ldr	r3, [r3, #16]
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d019      	beq.n	800c332 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	330c      	adds	r3, #12
 800c304:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c306:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c308:	e853 3f00 	ldrex	r3, [r3]
 800c30c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c30e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c310:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c314:	65bb      	str	r3, [r7, #88]	; 0x58
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	330c      	adds	r3, #12
 800c31c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c31e:	64fa      	str	r2, [r7, #76]	; 0x4c
 800c320:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c322:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800c324:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c326:	e841 2300 	strex	r3, r2, [r1]
 800c32a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800c32c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d1e5      	bne.n	800c2fe <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	3314      	adds	r3, #20
 800c338:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c33a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c33c:	e853 3f00 	ldrex	r3, [r3]
 800c340:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c344:	f043 0301 	orr.w	r3, r3, #1
 800c348:	657b      	str	r3, [r7, #84]	; 0x54
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	3314      	adds	r3, #20
 800c350:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c352:	63ba      	str	r2, [r7, #56]	; 0x38
 800c354:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c356:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c358:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c35a:	e841 2300 	strex	r3, r2, [r1]
 800c35e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c362:	2b00      	cmp	r3, #0
 800c364:	d1e5      	bne.n	800c332 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	3314      	adds	r3, #20
 800c36c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c36e:	69bb      	ldr	r3, [r7, #24]
 800c370:	e853 3f00 	ldrex	r3, [r3]
 800c374:	617b      	str	r3, [r7, #20]
   return(result);
 800c376:	697b      	ldr	r3, [r7, #20]
 800c378:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c37c:	653b      	str	r3, [r7, #80]	; 0x50
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	3314      	adds	r3, #20
 800c384:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c386:	627a      	str	r2, [r7, #36]	; 0x24
 800c388:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c38a:	6a39      	ldr	r1, [r7, #32]
 800c38c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c38e:	e841 2300 	strex	r3, r2, [r1]
 800c392:	61fb      	str	r3, [r7, #28]
   return(result);
 800c394:	69fb      	ldr	r3, [r7, #28]
 800c396:	2b00      	cmp	r3, #0
 800c398:	d1e5      	bne.n	800c366 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800c39a:	2300      	movs	r3, #0
}
 800c39c:	4618      	mov	r0, r3
 800c39e:	3760      	adds	r7, #96	; 0x60
 800c3a0:	46bd      	mov	sp, r7
 800c3a2:	bd80      	pop	{r7, pc}
 800c3a4:	0800bf9d 	.word	0x0800bf9d
 800c3a8:	0800c0c7 	.word	0x0800c0c7
 800c3ac:	0800c101 	.word	0x0800c101

0800c3b0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800c3b0:	b480      	push	{r7}
 800c3b2:	b089      	sub	sp, #36	; 0x24
 800c3b4:	af00      	add	r7, sp, #0
 800c3b6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	330c      	adds	r3, #12
 800c3be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	e853 3f00 	ldrex	r3, [r3]
 800c3c6:	60bb      	str	r3, [r7, #8]
   return(result);
 800c3c8:	68bb      	ldr	r3, [r7, #8]
 800c3ca:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800c3ce:	61fb      	str	r3, [r7, #28]
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	330c      	adds	r3, #12
 800c3d6:	69fa      	ldr	r2, [r7, #28]
 800c3d8:	61ba      	str	r2, [r7, #24]
 800c3da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3dc:	6979      	ldr	r1, [r7, #20]
 800c3de:	69ba      	ldr	r2, [r7, #24]
 800c3e0:	e841 2300 	strex	r3, r2, [r1]
 800c3e4:	613b      	str	r3, [r7, #16]
   return(result);
 800c3e6:	693b      	ldr	r3, [r7, #16]
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d1e5      	bne.n	800c3b8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	2220      	movs	r2, #32
 800c3f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800c3f4:	bf00      	nop
 800c3f6:	3724      	adds	r7, #36	; 0x24
 800c3f8:	46bd      	mov	sp, r7
 800c3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3fe:	4770      	bx	lr

0800c400 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c400:	b480      	push	{r7}
 800c402:	b095      	sub	sp, #84	; 0x54
 800c404:	af00      	add	r7, sp, #0
 800c406:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	330c      	adds	r3, #12
 800c40e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c410:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c412:	e853 3f00 	ldrex	r3, [r3]
 800c416:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c41a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c41e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	330c      	adds	r3, #12
 800c426:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c428:	643a      	str	r2, [r7, #64]	; 0x40
 800c42a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c42c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c42e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c430:	e841 2300 	strex	r3, r2, [r1]
 800c434:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d1e5      	bne.n	800c408 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	3314      	adds	r3, #20
 800c442:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c444:	6a3b      	ldr	r3, [r7, #32]
 800c446:	e853 3f00 	ldrex	r3, [r3]
 800c44a:	61fb      	str	r3, [r7, #28]
   return(result);
 800c44c:	69fb      	ldr	r3, [r7, #28]
 800c44e:	f023 0301 	bic.w	r3, r3, #1
 800c452:	64bb      	str	r3, [r7, #72]	; 0x48
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	3314      	adds	r3, #20
 800c45a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c45c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c45e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c460:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c462:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c464:	e841 2300 	strex	r3, r2, [r1]
 800c468:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c46a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	d1e5      	bne.n	800c43c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c474:	2b01      	cmp	r3, #1
 800c476:	d119      	bne.n	800c4ac <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	330c      	adds	r3, #12
 800c47e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c480:	68fb      	ldr	r3, [r7, #12]
 800c482:	e853 3f00 	ldrex	r3, [r3]
 800c486:	60bb      	str	r3, [r7, #8]
   return(result);
 800c488:	68bb      	ldr	r3, [r7, #8]
 800c48a:	f023 0310 	bic.w	r3, r3, #16
 800c48e:	647b      	str	r3, [r7, #68]	; 0x44
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	330c      	adds	r3, #12
 800c496:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c498:	61ba      	str	r2, [r7, #24]
 800c49a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c49c:	6979      	ldr	r1, [r7, #20]
 800c49e:	69ba      	ldr	r2, [r7, #24]
 800c4a0:	e841 2300 	strex	r3, r2, [r1]
 800c4a4:	613b      	str	r3, [r7, #16]
   return(result);
 800c4a6:	693b      	ldr	r3, [r7, #16]
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d1e5      	bne.n	800c478 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	2220      	movs	r2, #32
 800c4b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	2200      	movs	r2, #0
 800c4b8:	631a      	str	r2, [r3, #48]	; 0x30
}
 800c4ba:	bf00      	nop
 800c4bc:	3754      	adds	r7, #84	; 0x54
 800c4be:	46bd      	mov	sp, r7
 800c4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4c4:	4770      	bx	lr

0800c4c6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c4c6:	b580      	push	{r7, lr}
 800c4c8:	b084      	sub	sp, #16
 800c4ca:	af00      	add	r7, sp, #0
 800c4cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4d2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800c4d4:	68fb      	ldr	r3, [r7, #12]
 800c4d6:	2200      	movs	r2, #0
 800c4d8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	2200      	movs	r2, #0
 800c4de:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c4e4:	68f8      	ldr	r0, [r7, #12]
 800c4e6:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c4e8:	bf00      	nop
 800c4ea:	3710      	adds	r7, #16
 800c4ec:	46bd      	mov	sp, r7
 800c4ee:	bd80      	pop	{r7, pc}

0800c4f0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800c4f0:	b480      	push	{r7}
 800c4f2:	b085      	sub	sp, #20
 800c4f4:	af00      	add	r7, sp, #0
 800c4f6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c4fe:	b2db      	uxtb	r3, r3
 800c500:	2b21      	cmp	r3, #33	; 0x21
 800c502:	d13e      	bne.n	800c582 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	689b      	ldr	r3, [r3, #8]
 800c508:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c50c:	d114      	bne.n	800c538 <UART_Transmit_IT+0x48>
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	691b      	ldr	r3, [r3, #16]
 800c512:	2b00      	cmp	r3, #0
 800c514:	d110      	bne.n	800c538 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	6a1b      	ldr	r3, [r3, #32]
 800c51a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	881b      	ldrh	r3, [r3, #0]
 800c520:	461a      	mov	r2, r3
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c52a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	6a1b      	ldr	r3, [r3, #32]
 800c530:	1c9a      	adds	r2, r3, #2
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	621a      	str	r2, [r3, #32]
 800c536:	e008      	b.n	800c54a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	6a1b      	ldr	r3, [r3, #32]
 800c53c:	1c59      	adds	r1, r3, #1
 800c53e:	687a      	ldr	r2, [r7, #4]
 800c540:	6211      	str	r1, [r2, #32]
 800c542:	781a      	ldrb	r2, [r3, #0]
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c54e:	b29b      	uxth	r3, r3
 800c550:	3b01      	subs	r3, #1
 800c552:	b29b      	uxth	r3, r3
 800c554:	687a      	ldr	r2, [r7, #4]
 800c556:	4619      	mov	r1, r3
 800c558:	84d1      	strh	r1, [r2, #38]	; 0x26
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d10f      	bne.n	800c57e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	68da      	ldr	r2, [r3, #12]
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c56c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	68da      	ldr	r2, [r3, #12]
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c57c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800c57e:	2300      	movs	r3, #0
 800c580:	e000      	b.n	800c584 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800c582:	2302      	movs	r3, #2
  }
}
 800c584:	4618      	mov	r0, r3
 800c586:	3714      	adds	r7, #20
 800c588:	46bd      	mov	sp, r7
 800c58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c58e:	4770      	bx	lr

0800c590 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c590:	b580      	push	{r7, lr}
 800c592:	b082      	sub	sp, #8
 800c594:	af00      	add	r7, sp, #0
 800c596:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	68da      	ldr	r2, [r3, #12]
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c5a6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	2220      	movs	r2, #32
 800c5ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c5b4:	6878      	ldr	r0, [r7, #4]
 800c5b6:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800c5b8:	2300      	movs	r3, #0
}
 800c5ba:	4618      	mov	r0, r3
 800c5bc:	3708      	adds	r7, #8
 800c5be:	46bd      	mov	sp, r7
 800c5c0:	bd80      	pop	{r7, pc}

0800c5c2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800c5c2:	b580      	push	{r7, lr}
 800c5c4:	b08c      	sub	sp, #48	; 0x30
 800c5c6:	af00      	add	r7, sp, #0
 800c5c8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c5d0:	b2db      	uxtb	r3, r3
 800c5d2:	2b22      	cmp	r3, #34	; 0x22
 800c5d4:	f040 80ad 	bne.w	800c732 <UART_Receive_IT+0x170>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	689b      	ldr	r3, [r3, #8]
 800c5dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c5e0:	d117      	bne.n	800c612 <UART_Receive_IT+0x50>
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	691b      	ldr	r3, [r3, #16]
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d113      	bne.n	800c612 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800c5ea:	2300      	movs	r3, #0
 800c5ec:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5f2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	685b      	ldr	r3, [r3, #4]
 800c5fa:	b29b      	uxth	r3, r3
 800c5fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c600:	b29a      	uxth	r2, r3
 800c602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c604:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c60a:	1c9a      	adds	r2, r3, #2
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	629a      	str	r2, [r3, #40]	; 0x28
 800c610:	e026      	b.n	800c660 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c616:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800c618:	2300      	movs	r3, #0
 800c61a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	689b      	ldr	r3, [r3, #8]
 800c620:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c624:	d007      	beq.n	800c636 <UART_Receive_IT+0x74>
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	689b      	ldr	r3, [r3, #8]
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d10a      	bne.n	800c644 <UART_Receive_IT+0x82>
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	691b      	ldr	r3, [r3, #16]
 800c632:	2b00      	cmp	r3, #0
 800c634:	d106      	bne.n	800c644 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	685b      	ldr	r3, [r3, #4]
 800c63c:	b2da      	uxtb	r2, r3
 800c63e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c640:	701a      	strb	r2, [r3, #0]
 800c642:	e008      	b.n	800c656 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	685b      	ldr	r3, [r3, #4]
 800c64a:	b2db      	uxtb	r3, r3
 800c64c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c650:	b2da      	uxtb	r2, r3
 800c652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c654:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c65a:	1c5a      	adds	r2, r3, #1
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c664:	b29b      	uxth	r3, r3
 800c666:	3b01      	subs	r3, #1
 800c668:	b29b      	uxth	r3, r3
 800c66a:	687a      	ldr	r2, [r7, #4]
 800c66c:	4619      	mov	r1, r3
 800c66e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800c670:	2b00      	cmp	r3, #0
 800c672:	d15c      	bne.n	800c72e <UART_Receive_IT+0x16c>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	68da      	ldr	r2, [r3, #12]
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	f022 0220 	bic.w	r2, r2, #32
 800c682:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	68da      	ldr	r2, [r3, #12]
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c692:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	695a      	ldr	r2, [r3, #20]
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	f022 0201 	bic.w	r2, r2, #1
 800c6a2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	2220      	movs	r2, #32
 800c6a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c6b0:	2b01      	cmp	r3, #1
 800c6b2:	d136      	bne.n	800c722 <UART_Receive_IT+0x160>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	2200      	movs	r2, #0
 800c6b8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	330c      	adds	r3, #12
 800c6c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6c2:	697b      	ldr	r3, [r7, #20]
 800c6c4:	e853 3f00 	ldrex	r3, [r3]
 800c6c8:	613b      	str	r3, [r7, #16]
   return(result);
 800c6ca:	693b      	ldr	r3, [r7, #16]
 800c6cc:	f023 0310 	bic.w	r3, r3, #16
 800c6d0:	627b      	str	r3, [r7, #36]	; 0x24
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	330c      	adds	r3, #12
 800c6d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c6da:	623a      	str	r2, [r7, #32]
 800c6dc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6de:	69f9      	ldr	r1, [r7, #28]
 800c6e0:	6a3a      	ldr	r2, [r7, #32]
 800c6e2:	e841 2300 	strex	r3, r2, [r1]
 800c6e6:	61bb      	str	r3, [r7, #24]
   return(result);
 800c6e8:	69bb      	ldr	r3, [r7, #24]
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d1e5      	bne.n	800c6ba <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	f003 0310 	and.w	r3, r3, #16
 800c6f8:	2b10      	cmp	r3, #16
 800c6fa:	d10a      	bne.n	800c712 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c6fc:	2300      	movs	r3, #0
 800c6fe:	60fb      	str	r3, [r7, #12]
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	60fb      	str	r3, [r7, #12]
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	685b      	ldr	r3, [r3, #4]
 800c70e:	60fb      	str	r3, [r7, #12]
 800c710:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c716:	687a      	ldr	r2, [r7, #4]
 800c718:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 800c71a:	4611      	mov	r1, r2
 800c71c:	6878      	ldr	r0, [r7, #4]
 800c71e:	4798      	blx	r3
 800c720:	e003      	b.n	800c72a <UART_Receive_IT+0x168>
      else
      {
        /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c726:	6878      	ldr	r0, [r7, #4]
 800c728:	4798      	blx	r3
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800c72a:	2300      	movs	r3, #0
 800c72c:	e002      	b.n	800c734 <UART_Receive_IT+0x172>
    }
    return HAL_OK;
 800c72e:	2300      	movs	r3, #0
 800c730:	e000      	b.n	800c734 <UART_Receive_IT+0x172>
  }
  else
  {
    return HAL_BUSY;
 800c732:	2302      	movs	r3, #2
  }
}
 800c734:	4618      	mov	r0, r3
 800c736:	3730      	adds	r7, #48	; 0x30
 800c738:	46bd      	mov	sp, r7
 800c73a:	bd80      	pop	{r7, pc}

0800c73c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c73c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c740:	b0c0      	sub	sp, #256	; 0x100
 800c742:	af00      	add	r7, sp, #0
 800c744:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c748:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	691b      	ldr	r3, [r3, #16]
 800c750:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800c754:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c758:	68d9      	ldr	r1, [r3, #12]
 800c75a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c75e:	681a      	ldr	r2, [r3, #0]
 800c760:	ea40 0301 	orr.w	r3, r0, r1
 800c764:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800c766:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c76a:	689a      	ldr	r2, [r3, #8]
 800c76c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c770:	691b      	ldr	r3, [r3, #16]
 800c772:	431a      	orrs	r2, r3
 800c774:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c778:	695b      	ldr	r3, [r3, #20]
 800c77a:	431a      	orrs	r2, r3
 800c77c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c780:	69db      	ldr	r3, [r3, #28]
 800c782:	4313      	orrs	r3, r2
 800c784:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800c788:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	68db      	ldr	r3, [r3, #12]
 800c790:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800c794:	f021 010c 	bic.w	r1, r1, #12
 800c798:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c79c:	681a      	ldr	r2, [r3, #0]
 800c79e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800c7a2:	430b      	orrs	r3, r1
 800c7a4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c7a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	695b      	ldr	r3, [r3, #20]
 800c7ae:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800c7b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c7b6:	6999      	ldr	r1, [r3, #24]
 800c7b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c7bc:	681a      	ldr	r2, [r3, #0]
 800c7be:	ea40 0301 	orr.w	r3, r0, r1
 800c7c2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800c7c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c7c8:	681a      	ldr	r2, [r3, #0]
 800c7ca:	4b8f      	ldr	r3, [pc, #572]	; (800ca08 <UART_SetConfig+0x2cc>)
 800c7cc:	429a      	cmp	r2, r3
 800c7ce:	d005      	beq.n	800c7dc <UART_SetConfig+0xa0>
 800c7d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c7d4:	681a      	ldr	r2, [r3, #0]
 800c7d6:	4b8d      	ldr	r3, [pc, #564]	; (800ca0c <UART_SetConfig+0x2d0>)
 800c7d8:	429a      	cmp	r2, r3
 800c7da:	d104      	bne.n	800c7e6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800c7dc:	f7fd fd1e 	bl	800a21c <HAL_RCC_GetPCLK2Freq>
 800c7e0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800c7e4:	e003      	b.n	800c7ee <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800c7e6:	f7fd fd05 	bl	800a1f4 <HAL_RCC_GetPCLK1Freq>
 800c7ea:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c7ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c7f2:	69db      	ldr	r3, [r3, #28]
 800c7f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c7f8:	f040 810c 	bne.w	800ca14 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800c7fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c800:	2200      	movs	r2, #0
 800c802:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800c806:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800c80a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800c80e:	4622      	mov	r2, r4
 800c810:	462b      	mov	r3, r5
 800c812:	1891      	adds	r1, r2, r2
 800c814:	65b9      	str	r1, [r7, #88]	; 0x58
 800c816:	415b      	adcs	r3, r3
 800c818:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c81a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800c81e:	4621      	mov	r1, r4
 800c820:	eb12 0801 	adds.w	r8, r2, r1
 800c824:	4629      	mov	r1, r5
 800c826:	eb43 0901 	adc.w	r9, r3, r1
 800c82a:	f04f 0200 	mov.w	r2, #0
 800c82e:	f04f 0300 	mov.w	r3, #0
 800c832:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c836:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c83a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c83e:	4690      	mov	r8, r2
 800c840:	4699      	mov	r9, r3
 800c842:	4623      	mov	r3, r4
 800c844:	eb18 0303 	adds.w	r3, r8, r3
 800c848:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c84c:	462b      	mov	r3, r5
 800c84e:	eb49 0303 	adc.w	r3, r9, r3
 800c852:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c856:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c85a:	685b      	ldr	r3, [r3, #4]
 800c85c:	2200      	movs	r2, #0
 800c85e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c862:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800c866:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800c86a:	460b      	mov	r3, r1
 800c86c:	18db      	adds	r3, r3, r3
 800c86e:	653b      	str	r3, [r7, #80]	; 0x50
 800c870:	4613      	mov	r3, r2
 800c872:	eb42 0303 	adc.w	r3, r2, r3
 800c876:	657b      	str	r3, [r7, #84]	; 0x54
 800c878:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800c87c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800c880:	f7f4 fa02 	bl	8000c88 <__aeabi_uldivmod>
 800c884:	4602      	mov	r2, r0
 800c886:	460b      	mov	r3, r1
 800c888:	4b61      	ldr	r3, [pc, #388]	; (800ca10 <UART_SetConfig+0x2d4>)
 800c88a:	fba3 2302 	umull	r2, r3, r3, r2
 800c88e:	095b      	lsrs	r3, r3, #5
 800c890:	011c      	lsls	r4, r3, #4
 800c892:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c896:	2200      	movs	r2, #0
 800c898:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c89c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800c8a0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800c8a4:	4642      	mov	r2, r8
 800c8a6:	464b      	mov	r3, r9
 800c8a8:	1891      	adds	r1, r2, r2
 800c8aa:	64b9      	str	r1, [r7, #72]	; 0x48
 800c8ac:	415b      	adcs	r3, r3
 800c8ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c8b0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800c8b4:	4641      	mov	r1, r8
 800c8b6:	eb12 0a01 	adds.w	sl, r2, r1
 800c8ba:	4649      	mov	r1, r9
 800c8bc:	eb43 0b01 	adc.w	fp, r3, r1
 800c8c0:	f04f 0200 	mov.w	r2, #0
 800c8c4:	f04f 0300 	mov.w	r3, #0
 800c8c8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800c8cc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800c8d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c8d4:	4692      	mov	sl, r2
 800c8d6:	469b      	mov	fp, r3
 800c8d8:	4643      	mov	r3, r8
 800c8da:	eb1a 0303 	adds.w	r3, sl, r3
 800c8de:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c8e2:	464b      	mov	r3, r9
 800c8e4:	eb4b 0303 	adc.w	r3, fp, r3
 800c8e8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c8ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c8f0:	685b      	ldr	r3, [r3, #4]
 800c8f2:	2200      	movs	r2, #0
 800c8f4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c8f8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800c8fc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800c900:	460b      	mov	r3, r1
 800c902:	18db      	adds	r3, r3, r3
 800c904:	643b      	str	r3, [r7, #64]	; 0x40
 800c906:	4613      	mov	r3, r2
 800c908:	eb42 0303 	adc.w	r3, r2, r3
 800c90c:	647b      	str	r3, [r7, #68]	; 0x44
 800c90e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800c912:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800c916:	f7f4 f9b7 	bl	8000c88 <__aeabi_uldivmod>
 800c91a:	4602      	mov	r2, r0
 800c91c:	460b      	mov	r3, r1
 800c91e:	4611      	mov	r1, r2
 800c920:	4b3b      	ldr	r3, [pc, #236]	; (800ca10 <UART_SetConfig+0x2d4>)
 800c922:	fba3 2301 	umull	r2, r3, r3, r1
 800c926:	095b      	lsrs	r3, r3, #5
 800c928:	2264      	movs	r2, #100	; 0x64
 800c92a:	fb02 f303 	mul.w	r3, r2, r3
 800c92e:	1acb      	subs	r3, r1, r3
 800c930:	00db      	lsls	r3, r3, #3
 800c932:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800c936:	4b36      	ldr	r3, [pc, #216]	; (800ca10 <UART_SetConfig+0x2d4>)
 800c938:	fba3 2302 	umull	r2, r3, r3, r2
 800c93c:	095b      	lsrs	r3, r3, #5
 800c93e:	005b      	lsls	r3, r3, #1
 800c940:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800c944:	441c      	add	r4, r3
 800c946:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c94a:	2200      	movs	r2, #0
 800c94c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c950:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800c954:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800c958:	4642      	mov	r2, r8
 800c95a:	464b      	mov	r3, r9
 800c95c:	1891      	adds	r1, r2, r2
 800c95e:	63b9      	str	r1, [r7, #56]	; 0x38
 800c960:	415b      	adcs	r3, r3
 800c962:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c964:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800c968:	4641      	mov	r1, r8
 800c96a:	1851      	adds	r1, r2, r1
 800c96c:	6339      	str	r1, [r7, #48]	; 0x30
 800c96e:	4649      	mov	r1, r9
 800c970:	414b      	adcs	r3, r1
 800c972:	637b      	str	r3, [r7, #52]	; 0x34
 800c974:	f04f 0200 	mov.w	r2, #0
 800c978:	f04f 0300 	mov.w	r3, #0
 800c97c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800c980:	4659      	mov	r1, fp
 800c982:	00cb      	lsls	r3, r1, #3
 800c984:	4651      	mov	r1, sl
 800c986:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c98a:	4651      	mov	r1, sl
 800c98c:	00ca      	lsls	r2, r1, #3
 800c98e:	4610      	mov	r0, r2
 800c990:	4619      	mov	r1, r3
 800c992:	4603      	mov	r3, r0
 800c994:	4642      	mov	r2, r8
 800c996:	189b      	adds	r3, r3, r2
 800c998:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c99c:	464b      	mov	r3, r9
 800c99e:	460a      	mov	r2, r1
 800c9a0:	eb42 0303 	adc.w	r3, r2, r3
 800c9a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c9a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c9ac:	685b      	ldr	r3, [r3, #4]
 800c9ae:	2200      	movs	r2, #0
 800c9b0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800c9b4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800c9b8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800c9bc:	460b      	mov	r3, r1
 800c9be:	18db      	adds	r3, r3, r3
 800c9c0:	62bb      	str	r3, [r7, #40]	; 0x28
 800c9c2:	4613      	mov	r3, r2
 800c9c4:	eb42 0303 	adc.w	r3, r2, r3
 800c9c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c9ca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800c9ce:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800c9d2:	f7f4 f959 	bl	8000c88 <__aeabi_uldivmod>
 800c9d6:	4602      	mov	r2, r0
 800c9d8:	460b      	mov	r3, r1
 800c9da:	4b0d      	ldr	r3, [pc, #52]	; (800ca10 <UART_SetConfig+0x2d4>)
 800c9dc:	fba3 1302 	umull	r1, r3, r3, r2
 800c9e0:	095b      	lsrs	r3, r3, #5
 800c9e2:	2164      	movs	r1, #100	; 0x64
 800c9e4:	fb01 f303 	mul.w	r3, r1, r3
 800c9e8:	1ad3      	subs	r3, r2, r3
 800c9ea:	00db      	lsls	r3, r3, #3
 800c9ec:	3332      	adds	r3, #50	; 0x32
 800c9ee:	4a08      	ldr	r2, [pc, #32]	; (800ca10 <UART_SetConfig+0x2d4>)
 800c9f0:	fba2 2303 	umull	r2, r3, r2, r3
 800c9f4:	095b      	lsrs	r3, r3, #5
 800c9f6:	f003 0207 	and.w	r2, r3, #7
 800c9fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	4422      	add	r2, r4
 800ca02:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800ca04:	e105      	b.n	800cc12 <UART_SetConfig+0x4d6>
 800ca06:	bf00      	nop
 800ca08:	40011000 	.word	0x40011000
 800ca0c:	40011400 	.word	0x40011400
 800ca10:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ca14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ca18:	2200      	movs	r2, #0
 800ca1a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800ca1e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800ca22:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800ca26:	4642      	mov	r2, r8
 800ca28:	464b      	mov	r3, r9
 800ca2a:	1891      	adds	r1, r2, r2
 800ca2c:	6239      	str	r1, [r7, #32]
 800ca2e:	415b      	adcs	r3, r3
 800ca30:	627b      	str	r3, [r7, #36]	; 0x24
 800ca32:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800ca36:	4641      	mov	r1, r8
 800ca38:	1854      	adds	r4, r2, r1
 800ca3a:	4649      	mov	r1, r9
 800ca3c:	eb43 0501 	adc.w	r5, r3, r1
 800ca40:	f04f 0200 	mov.w	r2, #0
 800ca44:	f04f 0300 	mov.w	r3, #0
 800ca48:	00eb      	lsls	r3, r5, #3
 800ca4a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800ca4e:	00e2      	lsls	r2, r4, #3
 800ca50:	4614      	mov	r4, r2
 800ca52:	461d      	mov	r5, r3
 800ca54:	4643      	mov	r3, r8
 800ca56:	18e3      	adds	r3, r4, r3
 800ca58:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800ca5c:	464b      	mov	r3, r9
 800ca5e:	eb45 0303 	adc.w	r3, r5, r3
 800ca62:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800ca66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ca6a:	685b      	ldr	r3, [r3, #4]
 800ca6c:	2200      	movs	r2, #0
 800ca6e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800ca72:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800ca76:	f04f 0200 	mov.w	r2, #0
 800ca7a:	f04f 0300 	mov.w	r3, #0
 800ca7e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800ca82:	4629      	mov	r1, r5
 800ca84:	008b      	lsls	r3, r1, #2
 800ca86:	4621      	mov	r1, r4
 800ca88:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ca8c:	4621      	mov	r1, r4
 800ca8e:	008a      	lsls	r2, r1, #2
 800ca90:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800ca94:	f7f4 f8f8 	bl	8000c88 <__aeabi_uldivmod>
 800ca98:	4602      	mov	r2, r0
 800ca9a:	460b      	mov	r3, r1
 800ca9c:	4b60      	ldr	r3, [pc, #384]	; (800cc20 <UART_SetConfig+0x4e4>)
 800ca9e:	fba3 2302 	umull	r2, r3, r3, r2
 800caa2:	095b      	lsrs	r3, r3, #5
 800caa4:	011c      	lsls	r4, r3, #4
 800caa6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800caaa:	2200      	movs	r2, #0
 800caac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800cab0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800cab4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800cab8:	4642      	mov	r2, r8
 800caba:	464b      	mov	r3, r9
 800cabc:	1891      	adds	r1, r2, r2
 800cabe:	61b9      	str	r1, [r7, #24]
 800cac0:	415b      	adcs	r3, r3
 800cac2:	61fb      	str	r3, [r7, #28]
 800cac4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800cac8:	4641      	mov	r1, r8
 800caca:	1851      	adds	r1, r2, r1
 800cacc:	6139      	str	r1, [r7, #16]
 800cace:	4649      	mov	r1, r9
 800cad0:	414b      	adcs	r3, r1
 800cad2:	617b      	str	r3, [r7, #20]
 800cad4:	f04f 0200 	mov.w	r2, #0
 800cad8:	f04f 0300 	mov.w	r3, #0
 800cadc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800cae0:	4659      	mov	r1, fp
 800cae2:	00cb      	lsls	r3, r1, #3
 800cae4:	4651      	mov	r1, sl
 800cae6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800caea:	4651      	mov	r1, sl
 800caec:	00ca      	lsls	r2, r1, #3
 800caee:	4610      	mov	r0, r2
 800caf0:	4619      	mov	r1, r3
 800caf2:	4603      	mov	r3, r0
 800caf4:	4642      	mov	r2, r8
 800caf6:	189b      	adds	r3, r3, r2
 800caf8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800cafc:	464b      	mov	r3, r9
 800cafe:	460a      	mov	r2, r1
 800cb00:	eb42 0303 	adc.w	r3, r2, r3
 800cb04:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800cb08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cb0c:	685b      	ldr	r3, [r3, #4]
 800cb0e:	2200      	movs	r2, #0
 800cb10:	67bb      	str	r3, [r7, #120]	; 0x78
 800cb12:	67fa      	str	r2, [r7, #124]	; 0x7c
 800cb14:	f04f 0200 	mov.w	r2, #0
 800cb18:	f04f 0300 	mov.w	r3, #0
 800cb1c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800cb20:	4649      	mov	r1, r9
 800cb22:	008b      	lsls	r3, r1, #2
 800cb24:	4641      	mov	r1, r8
 800cb26:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800cb2a:	4641      	mov	r1, r8
 800cb2c:	008a      	lsls	r2, r1, #2
 800cb2e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800cb32:	f7f4 f8a9 	bl	8000c88 <__aeabi_uldivmod>
 800cb36:	4602      	mov	r2, r0
 800cb38:	460b      	mov	r3, r1
 800cb3a:	4b39      	ldr	r3, [pc, #228]	; (800cc20 <UART_SetConfig+0x4e4>)
 800cb3c:	fba3 1302 	umull	r1, r3, r3, r2
 800cb40:	095b      	lsrs	r3, r3, #5
 800cb42:	2164      	movs	r1, #100	; 0x64
 800cb44:	fb01 f303 	mul.w	r3, r1, r3
 800cb48:	1ad3      	subs	r3, r2, r3
 800cb4a:	011b      	lsls	r3, r3, #4
 800cb4c:	3332      	adds	r3, #50	; 0x32
 800cb4e:	4a34      	ldr	r2, [pc, #208]	; (800cc20 <UART_SetConfig+0x4e4>)
 800cb50:	fba2 2303 	umull	r2, r3, r2, r3
 800cb54:	095b      	lsrs	r3, r3, #5
 800cb56:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cb5a:	441c      	add	r4, r3
 800cb5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cb60:	2200      	movs	r2, #0
 800cb62:	673b      	str	r3, [r7, #112]	; 0x70
 800cb64:	677a      	str	r2, [r7, #116]	; 0x74
 800cb66:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800cb6a:	4642      	mov	r2, r8
 800cb6c:	464b      	mov	r3, r9
 800cb6e:	1891      	adds	r1, r2, r2
 800cb70:	60b9      	str	r1, [r7, #8]
 800cb72:	415b      	adcs	r3, r3
 800cb74:	60fb      	str	r3, [r7, #12]
 800cb76:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800cb7a:	4641      	mov	r1, r8
 800cb7c:	1851      	adds	r1, r2, r1
 800cb7e:	6039      	str	r1, [r7, #0]
 800cb80:	4649      	mov	r1, r9
 800cb82:	414b      	adcs	r3, r1
 800cb84:	607b      	str	r3, [r7, #4]
 800cb86:	f04f 0200 	mov.w	r2, #0
 800cb8a:	f04f 0300 	mov.w	r3, #0
 800cb8e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800cb92:	4659      	mov	r1, fp
 800cb94:	00cb      	lsls	r3, r1, #3
 800cb96:	4651      	mov	r1, sl
 800cb98:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800cb9c:	4651      	mov	r1, sl
 800cb9e:	00ca      	lsls	r2, r1, #3
 800cba0:	4610      	mov	r0, r2
 800cba2:	4619      	mov	r1, r3
 800cba4:	4603      	mov	r3, r0
 800cba6:	4642      	mov	r2, r8
 800cba8:	189b      	adds	r3, r3, r2
 800cbaa:	66bb      	str	r3, [r7, #104]	; 0x68
 800cbac:	464b      	mov	r3, r9
 800cbae:	460a      	mov	r2, r1
 800cbb0:	eb42 0303 	adc.w	r3, r2, r3
 800cbb4:	66fb      	str	r3, [r7, #108]	; 0x6c
 800cbb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cbba:	685b      	ldr	r3, [r3, #4]
 800cbbc:	2200      	movs	r2, #0
 800cbbe:	663b      	str	r3, [r7, #96]	; 0x60
 800cbc0:	667a      	str	r2, [r7, #100]	; 0x64
 800cbc2:	f04f 0200 	mov.w	r2, #0
 800cbc6:	f04f 0300 	mov.w	r3, #0
 800cbca:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800cbce:	4649      	mov	r1, r9
 800cbd0:	008b      	lsls	r3, r1, #2
 800cbd2:	4641      	mov	r1, r8
 800cbd4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800cbd8:	4641      	mov	r1, r8
 800cbda:	008a      	lsls	r2, r1, #2
 800cbdc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800cbe0:	f7f4 f852 	bl	8000c88 <__aeabi_uldivmod>
 800cbe4:	4602      	mov	r2, r0
 800cbe6:	460b      	mov	r3, r1
 800cbe8:	4b0d      	ldr	r3, [pc, #52]	; (800cc20 <UART_SetConfig+0x4e4>)
 800cbea:	fba3 1302 	umull	r1, r3, r3, r2
 800cbee:	095b      	lsrs	r3, r3, #5
 800cbf0:	2164      	movs	r1, #100	; 0x64
 800cbf2:	fb01 f303 	mul.w	r3, r1, r3
 800cbf6:	1ad3      	subs	r3, r2, r3
 800cbf8:	011b      	lsls	r3, r3, #4
 800cbfa:	3332      	adds	r3, #50	; 0x32
 800cbfc:	4a08      	ldr	r2, [pc, #32]	; (800cc20 <UART_SetConfig+0x4e4>)
 800cbfe:	fba2 2303 	umull	r2, r3, r2, r3
 800cc02:	095b      	lsrs	r3, r3, #5
 800cc04:	f003 020f 	and.w	r2, r3, #15
 800cc08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	4422      	add	r2, r4
 800cc10:	609a      	str	r2, [r3, #8]
}
 800cc12:	bf00      	nop
 800cc14:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800cc18:	46bd      	mov	sp, r7
 800cc1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800cc1e:	bf00      	nop
 800cc20:	51eb851f 	.word	0x51eb851f

0800cc24 <__NVIC_SetPriority>:
{
 800cc24:	b480      	push	{r7}
 800cc26:	b083      	sub	sp, #12
 800cc28:	af00      	add	r7, sp, #0
 800cc2a:	4603      	mov	r3, r0
 800cc2c:	6039      	str	r1, [r7, #0]
 800cc2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800cc30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	db0a      	blt.n	800cc4e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800cc38:	683b      	ldr	r3, [r7, #0]
 800cc3a:	b2da      	uxtb	r2, r3
 800cc3c:	490c      	ldr	r1, [pc, #48]	; (800cc70 <__NVIC_SetPriority+0x4c>)
 800cc3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cc42:	0112      	lsls	r2, r2, #4
 800cc44:	b2d2      	uxtb	r2, r2
 800cc46:	440b      	add	r3, r1
 800cc48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800cc4c:	e00a      	b.n	800cc64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800cc4e:	683b      	ldr	r3, [r7, #0]
 800cc50:	b2da      	uxtb	r2, r3
 800cc52:	4908      	ldr	r1, [pc, #32]	; (800cc74 <__NVIC_SetPriority+0x50>)
 800cc54:	79fb      	ldrb	r3, [r7, #7]
 800cc56:	f003 030f 	and.w	r3, r3, #15
 800cc5a:	3b04      	subs	r3, #4
 800cc5c:	0112      	lsls	r2, r2, #4
 800cc5e:	b2d2      	uxtb	r2, r2
 800cc60:	440b      	add	r3, r1
 800cc62:	761a      	strb	r2, [r3, #24]
}
 800cc64:	bf00      	nop
 800cc66:	370c      	adds	r7, #12
 800cc68:	46bd      	mov	sp, r7
 800cc6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc6e:	4770      	bx	lr
 800cc70:	e000e100 	.word	0xe000e100
 800cc74:	e000ed00 	.word	0xe000ed00

0800cc78 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800cc78:	b580      	push	{r7, lr}
 800cc7a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800cc7c:	4b05      	ldr	r3, [pc, #20]	; (800cc94 <SysTick_Handler+0x1c>)
 800cc7e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800cc80:	f001 ff38 	bl	800eaf4 <xTaskGetSchedulerState>
 800cc84:	4603      	mov	r3, r0
 800cc86:	2b01      	cmp	r3, #1
 800cc88:	d001      	beq.n	800cc8e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800cc8a:	f002 fd1d 	bl	800f6c8 <xPortSysTickHandler>
  }
}
 800cc8e:	bf00      	nop
 800cc90:	bd80      	pop	{r7, pc}
 800cc92:	bf00      	nop
 800cc94:	e000e010 	.word	0xe000e010

0800cc98 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800cc98:	b580      	push	{r7, lr}
 800cc9a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800cc9c:	2100      	movs	r1, #0
 800cc9e:	f06f 0004 	mvn.w	r0, #4
 800cca2:	f7ff ffbf 	bl	800cc24 <__NVIC_SetPriority>
#endif
}
 800cca6:	bf00      	nop
 800cca8:	bd80      	pop	{r7, pc}
	...

0800ccac <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800ccac:	b480      	push	{r7}
 800ccae:	b083      	sub	sp, #12
 800ccb0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ccb2:	f3ef 8305 	mrs	r3, IPSR
 800ccb6:	603b      	str	r3, [r7, #0]
  return(result);
 800ccb8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d003      	beq.n	800ccc6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800ccbe:	f06f 0305 	mvn.w	r3, #5
 800ccc2:	607b      	str	r3, [r7, #4]
 800ccc4:	e00c      	b.n	800cce0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800ccc6:	4b0a      	ldr	r3, [pc, #40]	; (800ccf0 <osKernelInitialize+0x44>)
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d105      	bne.n	800ccda <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800ccce:	4b08      	ldr	r3, [pc, #32]	; (800ccf0 <osKernelInitialize+0x44>)
 800ccd0:	2201      	movs	r2, #1
 800ccd2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800ccd4:	2300      	movs	r3, #0
 800ccd6:	607b      	str	r3, [r7, #4]
 800ccd8:	e002      	b.n	800cce0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800ccda:	f04f 33ff 	mov.w	r3, #4294967295
 800ccde:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800cce0:	687b      	ldr	r3, [r7, #4]
}
 800cce2:	4618      	mov	r0, r3
 800cce4:	370c      	adds	r7, #12
 800cce6:	46bd      	mov	sp, r7
 800cce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccec:	4770      	bx	lr
 800ccee:	bf00      	nop
 800ccf0:	20000c84 	.word	0x20000c84

0800ccf4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800ccf4:	b580      	push	{r7, lr}
 800ccf6:	b082      	sub	sp, #8
 800ccf8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ccfa:	f3ef 8305 	mrs	r3, IPSR
 800ccfe:	603b      	str	r3, [r7, #0]
  return(result);
 800cd00:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d003      	beq.n	800cd0e <osKernelStart+0x1a>
    stat = osErrorISR;
 800cd06:	f06f 0305 	mvn.w	r3, #5
 800cd0a:	607b      	str	r3, [r7, #4]
 800cd0c:	e010      	b.n	800cd30 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800cd0e:	4b0b      	ldr	r3, [pc, #44]	; (800cd3c <osKernelStart+0x48>)
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	2b01      	cmp	r3, #1
 800cd14:	d109      	bne.n	800cd2a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800cd16:	f7ff ffbf 	bl	800cc98 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800cd1a:	4b08      	ldr	r3, [pc, #32]	; (800cd3c <osKernelStart+0x48>)
 800cd1c:	2202      	movs	r2, #2
 800cd1e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800cd20:	f001 fac4 	bl	800e2ac <vTaskStartScheduler>
      stat = osOK;
 800cd24:	2300      	movs	r3, #0
 800cd26:	607b      	str	r3, [r7, #4]
 800cd28:	e002      	b.n	800cd30 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800cd2a:	f04f 33ff 	mov.w	r3, #4294967295
 800cd2e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800cd30:	687b      	ldr	r3, [r7, #4]
}
 800cd32:	4618      	mov	r0, r3
 800cd34:	3708      	adds	r7, #8
 800cd36:	46bd      	mov	sp, r7
 800cd38:	bd80      	pop	{r7, pc}
 800cd3a:	bf00      	nop
 800cd3c:	20000c84 	.word	0x20000c84

0800cd40 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800cd40:	b580      	push	{r7, lr}
 800cd42:	b08e      	sub	sp, #56	; 0x38
 800cd44:	af04      	add	r7, sp, #16
 800cd46:	60f8      	str	r0, [r7, #12]
 800cd48:	60b9      	str	r1, [r7, #8]
 800cd4a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800cd4c:	2300      	movs	r3, #0
 800cd4e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cd50:	f3ef 8305 	mrs	r3, IPSR
 800cd54:	617b      	str	r3, [r7, #20]
  return(result);
 800cd56:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d17f      	bne.n	800ce5c <osThreadNew+0x11c>
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d07c      	beq.n	800ce5c <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 800cd62:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cd66:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800cd68:	2318      	movs	r3, #24
 800cd6a:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800cd6c:	2300      	movs	r3, #0
 800cd6e:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800cd70:	f04f 33ff 	mov.w	r3, #4294967295
 800cd74:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d045      	beq.n	800ce08 <osThreadNew+0xc8>
      if (attr->name != NULL) {
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d002      	beq.n	800cd8a <osThreadNew+0x4a>
        name = attr->name;
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	699b      	ldr	r3, [r3, #24]
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d002      	beq.n	800cd98 <osThreadNew+0x58>
        prio = (UBaseType_t)attr->priority;
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	699b      	ldr	r3, [r3, #24]
 800cd96:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800cd98:	69fb      	ldr	r3, [r7, #28]
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d008      	beq.n	800cdb0 <osThreadNew+0x70>
 800cd9e:	69fb      	ldr	r3, [r7, #28]
 800cda0:	2b38      	cmp	r3, #56	; 0x38
 800cda2:	d805      	bhi.n	800cdb0 <osThreadNew+0x70>
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	685b      	ldr	r3, [r3, #4]
 800cda8:	f003 0301 	and.w	r3, r3, #1
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d001      	beq.n	800cdb4 <osThreadNew+0x74>
        return (NULL);
 800cdb0:	2300      	movs	r3, #0
 800cdb2:	e054      	b.n	800ce5e <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	695b      	ldr	r3, [r3, #20]
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d003      	beq.n	800cdc4 <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	695b      	ldr	r3, [r3, #20]
 800cdc0:	089b      	lsrs	r3, r3, #2
 800cdc2:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	689b      	ldr	r3, [r3, #8]
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d00e      	beq.n	800cdea <osThreadNew+0xaa>
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	68db      	ldr	r3, [r3, #12]
 800cdd0:	2bbb      	cmp	r3, #187	; 0xbb
 800cdd2:	d90a      	bls.n	800cdea <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d006      	beq.n	800cdea <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	695b      	ldr	r3, [r3, #20]
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d002      	beq.n	800cdea <osThreadNew+0xaa>
        mem = 1;
 800cde4:	2301      	movs	r3, #1
 800cde6:	61bb      	str	r3, [r7, #24]
 800cde8:	e010      	b.n	800ce0c <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	689b      	ldr	r3, [r3, #8]
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d10c      	bne.n	800ce0c <osThreadNew+0xcc>
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	68db      	ldr	r3, [r3, #12]
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d108      	bne.n	800ce0c <osThreadNew+0xcc>
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	691b      	ldr	r3, [r3, #16]
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	d104      	bne.n	800ce0c <osThreadNew+0xcc>
          mem = 0;
 800ce02:	2300      	movs	r3, #0
 800ce04:	61bb      	str	r3, [r7, #24]
 800ce06:	e001      	b.n	800ce0c <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 800ce08:	2300      	movs	r3, #0
 800ce0a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800ce0c:	69bb      	ldr	r3, [r7, #24]
 800ce0e:	2b01      	cmp	r3, #1
 800ce10:	d110      	bne.n	800ce34 <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800ce16:	687a      	ldr	r2, [r7, #4]
 800ce18:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ce1a:	9202      	str	r2, [sp, #8]
 800ce1c:	9301      	str	r3, [sp, #4]
 800ce1e:	69fb      	ldr	r3, [r7, #28]
 800ce20:	9300      	str	r3, [sp, #0]
 800ce22:	68bb      	ldr	r3, [r7, #8]
 800ce24:	6a3a      	ldr	r2, [r7, #32]
 800ce26:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ce28:	68f8      	ldr	r0, [r7, #12]
 800ce2a:	f001 f863 	bl	800def4 <xTaskCreateStatic>
 800ce2e:	4603      	mov	r3, r0
 800ce30:	613b      	str	r3, [r7, #16]
 800ce32:	e013      	b.n	800ce5c <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 800ce34:	69bb      	ldr	r3, [r7, #24]
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d110      	bne.n	800ce5c <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800ce3a:	6a3b      	ldr	r3, [r7, #32]
 800ce3c:	b29a      	uxth	r2, r3
 800ce3e:	f107 0310 	add.w	r3, r7, #16
 800ce42:	9301      	str	r3, [sp, #4]
 800ce44:	69fb      	ldr	r3, [r7, #28]
 800ce46:	9300      	str	r3, [sp, #0]
 800ce48:	68bb      	ldr	r3, [r7, #8]
 800ce4a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ce4c:	68f8      	ldr	r0, [r7, #12]
 800ce4e:	f001 f8ae 	bl	800dfae <xTaskCreate>
 800ce52:	4603      	mov	r3, r0
 800ce54:	2b01      	cmp	r3, #1
 800ce56:	d001      	beq.n	800ce5c <osThreadNew+0x11c>
            hTask = NULL;
 800ce58:	2300      	movs	r3, #0
 800ce5a:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800ce5c:	693b      	ldr	r3, [r7, #16]
}
 800ce5e:	4618      	mov	r0, r3
 800ce60:	3728      	adds	r7, #40	; 0x28
 800ce62:	46bd      	mov	sp, r7
 800ce64:	bd80      	pop	{r7, pc}
	...

0800ce68 <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 800ce68:	b480      	push	{r7}
 800ce6a:	b083      	sub	sp, #12
 800ce6c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ce6e:	f3ef 8305 	mrs	r3, IPSR
 800ce72:	603b      	str	r3, [r7, #0]
  return(result);
 800ce74:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d003      	beq.n	800ce82 <osThreadYield+0x1a>
    stat = osErrorISR;
 800ce7a:	f06f 0305 	mvn.w	r3, #5
 800ce7e:	607b      	str	r3, [r7, #4]
 800ce80:	e009      	b.n	800ce96 <osThreadYield+0x2e>
  } else {
    stat = osOK;
 800ce82:	2300      	movs	r3, #0
 800ce84:	607b      	str	r3, [r7, #4]
    taskYIELD();
 800ce86:	4b07      	ldr	r3, [pc, #28]	; (800cea4 <osThreadYield+0x3c>)
 800ce88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce8c:	601a      	str	r2, [r3, #0]
 800ce8e:	f3bf 8f4f 	dsb	sy
 800ce92:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 800ce96:	687b      	ldr	r3, [r7, #4]
}
 800ce98:	4618      	mov	r0, r3
 800ce9a:	370c      	adds	r7, #12
 800ce9c:	46bd      	mov	sp, r7
 800ce9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cea2:	4770      	bx	lr
 800cea4:	e000ed04 	.word	0xe000ed04

0800cea8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800cea8:	b580      	push	{r7, lr}
 800ceaa:	b084      	sub	sp, #16
 800ceac:	af00      	add	r7, sp, #0
 800ceae:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ceb0:	f3ef 8305 	mrs	r3, IPSR
 800ceb4:	60bb      	str	r3, [r7, #8]
  return(result);
 800ceb6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d003      	beq.n	800cec4 <osDelay+0x1c>
    stat = osErrorISR;
 800cebc:	f06f 0305 	mvn.w	r3, #5
 800cec0:	60fb      	str	r3, [r7, #12]
 800cec2:	e007      	b.n	800ced4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800cec4:	2300      	movs	r3, #0
 800cec6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	d002      	beq.n	800ced4 <osDelay+0x2c>
      vTaskDelay(ticks);
 800cece:	6878      	ldr	r0, [r7, #4]
 800ced0:	f001 f9b8 	bl	800e244 <vTaskDelay>
    }
  }

  return (stat);
 800ced4:	68fb      	ldr	r3, [r7, #12]
}
 800ced6:	4618      	mov	r0, r3
 800ced8:	3710      	adds	r7, #16
 800ceda:	46bd      	mov	sp, r7
 800cedc:	bd80      	pop	{r7, pc}

0800cede <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800cede:	b580      	push	{r7, lr}
 800cee0:	b08a      	sub	sp, #40	; 0x28
 800cee2:	af02      	add	r7, sp, #8
 800cee4:	60f8      	str	r0, [r7, #12]
 800cee6:	60b9      	str	r1, [r7, #8]
 800cee8:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800ceea:	2300      	movs	r3, #0
 800ceec:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ceee:	f3ef 8305 	mrs	r3, IPSR
 800cef2:	613b      	str	r3, [r7, #16]
  return(result);
 800cef4:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d15f      	bne.n	800cfba <osMessageQueueNew+0xdc>
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	d05c      	beq.n	800cfba <osMessageQueueNew+0xdc>
 800cf00:	68bb      	ldr	r3, [r7, #8]
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d059      	beq.n	800cfba <osMessageQueueNew+0xdc>
    mem = -1;
 800cf06:	f04f 33ff 	mov.w	r3, #4294967295
 800cf0a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d029      	beq.n	800cf66 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	689b      	ldr	r3, [r3, #8]
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d012      	beq.n	800cf40 <osMessageQueueNew+0x62>
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	68db      	ldr	r3, [r3, #12]
 800cf1e:	2b4f      	cmp	r3, #79	; 0x4f
 800cf20:	d90e      	bls.n	800cf40 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d00a      	beq.n	800cf40 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	695a      	ldr	r2, [r3, #20]
 800cf2e:	68fb      	ldr	r3, [r7, #12]
 800cf30:	68b9      	ldr	r1, [r7, #8]
 800cf32:	fb01 f303 	mul.w	r3, r1, r3
 800cf36:	429a      	cmp	r2, r3
 800cf38:	d302      	bcc.n	800cf40 <osMessageQueueNew+0x62>
        mem = 1;
 800cf3a:	2301      	movs	r3, #1
 800cf3c:	61bb      	str	r3, [r7, #24]
 800cf3e:	e014      	b.n	800cf6a <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	689b      	ldr	r3, [r3, #8]
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d110      	bne.n	800cf6a <osMessageQueueNew+0x8c>
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	68db      	ldr	r3, [r3, #12]
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d10c      	bne.n	800cf6a <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d108      	bne.n	800cf6a <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	695b      	ldr	r3, [r3, #20]
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d104      	bne.n	800cf6a <osMessageQueueNew+0x8c>
          mem = 0;
 800cf60:	2300      	movs	r3, #0
 800cf62:	61bb      	str	r3, [r7, #24]
 800cf64:	e001      	b.n	800cf6a <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800cf66:	2300      	movs	r3, #0
 800cf68:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800cf6a:	69bb      	ldr	r3, [r7, #24]
 800cf6c:	2b01      	cmp	r3, #1
 800cf6e:	d10b      	bne.n	800cf88 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	691a      	ldr	r2, [r3, #16]
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	689b      	ldr	r3, [r3, #8]
 800cf78:	2100      	movs	r1, #0
 800cf7a:	9100      	str	r1, [sp, #0]
 800cf7c:	68b9      	ldr	r1, [r7, #8]
 800cf7e:	68f8      	ldr	r0, [r7, #12]
 800cf80:	f000 fa63 	bl	800d44a <xQueueGenericCreateStatic>
 800cf84:	61f8      	str	r0, [r7, #28]
 800cf86:	e008      	b.n	800cf9a <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800cf88:	69bb      	ldr	r3, [r7, #24]
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d105      	bne.n	800cf9a <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800cf8e:	2200      	movs	r2, #0
 800cf90:	68b9      	ldr	r1, [r7, #8]
 800cf92:	68f8      	ldr	r0, [r7, #12]
 800cf94:	f000 fad1 	bl	800d53a <xQueueGenericCreate>
 800cf98:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800cf9a:	69fb      	ldr	r3, [r7, #28]
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d00c      	beq.n	800cfba <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	d003      	beq.n	800cfae <osMessageQueueNew+0xd0>
        name = attr->name;
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	617b      	str	r3, [r7, #20]
 800cfac:	e001      	b.n	800cfb2 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800cfae:	2300      	movs	r3, #0
 800cfb0:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800cfb2:	6979      	ldr	r1, [r7, #20]
 800cfb4:	69f8      	ldr	r0, [r7, #28]
 800cfb6:	f000 ff3f 	bl	800de38 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800cfba:	69fb      	ldr	r3, [r7, #28]
}
 800cfbc:	4618      	mov	r0, r3
 800cfbe:	3720      	adds	r7, #32
 800cfc0:	46bd      	mov	sp, r7
 800cfc2:	bd80      	pop	{r7, pc}

0800cfc4 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800cfc4:	b580      	push	{r7, lr}
 800cfc6:	b088      	sub	sp, #32
 800cfc8:	af00      	add	r7, sp, #0
 800cfca:	60f8      	str	r0, [r7, #12]
 800cfcc:	60b9      	str	r1, [r7, #8]
 800cfce:	603b      	str	r3, [r7, #0]
 800cfd0:	4613      	mov	r3, r2
 800cfd2:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800cfd4:	68fb      	ldr	r3, [r7, #12]
 800cfd6:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800cfd8:	2300      	movs	r3, #0
 800cfda:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cfdc:	f3ef 8305 	mrs	r3, IPSR
 800cfe0:	617b      	str	r3, [r7, #20]
  return(result);
 800cfe2:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d028      	beq.n	800d03a <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800cfe8:	69bb      	ldr	r3, [r7, #24]
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d005      	beq.n	800cffa <osMessageQueuePut+0x36>
 800cfee:	68bb      	ldr	r3, [r7, #8]
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	d002      	beq.n	800cffa <osMessageQueuePut+0x36>
 800cff4:	683b      	ldr	r3, [r7, #0]
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d003      	beq.n	800d002 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800cffa:	f06f 0303 	mvn.w	r3, #3
 800cffe:	61fb      	str	r3, [r7, #28]
 800d000:	e038      	b.n	800d074 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800d002:	2300      	movs	r3, #0
 800d004:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800d006:	f107 0210 	add.w	r2, r7, #16
 800d00a:	2300      	movs	r3, #0
 800d00c:	68b9      	ldr	r1, [r7, #8]
 800d00e:	69b8      	ldr	r0, [r7, #24]
 800d010:	f000 fbd6 	bl	800d7c0 <xQueueGenericSendFromISR>
 800d014:	4603      	mov	r3, r0
 800d016:	2b01      	cmp	r3, #1
 800d018:	d003      	beq.n	800d022 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800d01a:	f06f 0302 	mvn.w	r3, #2
 800d01e:	61fb      	str	r3, [r7, #28]
 800d020:	e028      	b.n	800d074 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800d022:	693b      	ldr	r3, [r7, #16]
 800d024:	2b00      	cmp	r3, #0
 800d026:	d025      	beq.n	800d074 <osMessageQueuePut+0xb0>
 800d028:	4b15      	ldr	r3, [pc, #84]	; (800d080 <osMessageQueuePut+0xbc>)
 800d02a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d02e:	601a      	str	r2, [r3, #0]
 800d030:	f3bf 8f4f 	dsb	sy
 800d034:	f3bf 8f6f 	isb	sy
 800d038:	e01c      	b.n	800d074 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800d03a:	69bb      	ldr	r3, [r7, #24]
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d002      	beq.n	800d046 <osMessageQueuePut+0x82>
 800d040:	68bb      	ldr	r3, [r7, #8]
 800d042:	2b00      	cmp	r3, #0
 800d044:	d103      	bne.n	800d04e <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800d046:	f06f 0303 	mvn.w	r3, #3
 800d04a:	61fb      	str	r3, [r7, #28]
 800d04c:	e012      	b.n	800d074 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800d04e:	2300      	movs	r3, #0
 800d050:	683a      	ldr	r2, [r7, #0]
 800d052:	68b9      	ldr	r1, [r7, #8]
 800d054:	69b8      	ldr	r0, [r7, #24]
 800d056:	f000 facd 	bl	800d5f4 <xQueueGenericSend>
 800d05a:	4603      	mov	r3, r0
 800d05c:	2b01      	cmp	r3, #1
 800d05e:	d009      	beq.n	800d074 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800d060:	683b      	ldr	r3, [r7, #0]
 800d062:	2b00      	cmp	r3, #0
 800d064:	d003      	beq.n	800d06e <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800d066:	f06f 0301 	mvn.w	r3, #1
 800d06a:	61fb      	str	r3, [r7, #28]
 800d06c:	e002      	b.n	800d074 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800d06e:	f06f 0302 	mvn.w	r3, #2
 800d072:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800d074:	69fb      	ldr	r3, [r7, #28]
}
 800d076:	4618      	mov	r0, r3
 800d078:	3720      	adds	r7, #32
 800d07a:	46bd      	mov	sp, r7
 800d07c:	bd80      	pop	{r7, pc}
 800d07e:	bf00      	nop
 800d080:	e000ed04 	.word	0xe000ed04

0800d084 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800d084:	b580      	push	{r7, lr}
 800d086:	b088      	sub	sp, #32
 800d088:	af00      	add	r7, sp, #0
 800d08a:	60f8      	str	r0, [r7, #12]
 800d08c:	60b9      	str	r1, [r7, #8]
 800d08e:	607a      	str	r2, [r7, #4]
 800d090:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800d092:	68fb      	ldr	r3, [r7, #12]
 800d094:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800d096:	2300      	movs	r3, #0
 800d098:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d09a:	f3ef 8305 	mrs	r3, IPSR
 800d09e:	617b      	str	r3, [r7, #20]
  return(result);
 800d0a0:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d028      	beq.n	800d0f8 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d0a6:	69bb      	ldr	r3, [r7, #24]
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d005      	beq.n	800d0b8 <osMessageQueueGet+0x34>
 800d0ac:	68bb      	ldr	r3, [r7, #8]
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d002      	beq.n	800d0b8 <osMessageQueueGet+0x34>
 800d0b2:	683b      	ldr	r3, [r7, #0]
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d003      	beq.n	800d0c0 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800d0b8:	f06f 0303 	mvn.w	r3, #3
 800d0bc:	61fb      	str	r3, [r7, #28]
 800d0be:	e037      	b.n	800d130 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800d0c0:	2300      	movs	r3, #0
 800d0c2:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800d0c4:	f107 0310 	add.w	r3, r7, #16
 800d0c8:	461a      	mov	r2, r3
 800d0ca:	68b9      	ldr	r1, [r7, #8]
 800d0cc:	69b8      	ldr	r0, [r7, #24]
 800d0ce:	f000 fce7 	bl	800daa0 <xQueueReceiveFromISR>
 800d0d2:	4603      	mov	r3, r0
 800d0d4:	2b01      	cmp	r3, #1
 800d0d6:	d003      	beq.n	800d0e0 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800d0d8:	f06f 0302 	mvn.w	r3, #2
 800d0dc:	61fb      	str	r3, [r7, #28]
 800d0de:	e027      	b.n	800d130 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800d0e0:	693b      	ldr	r3, [r7, #16]
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d024      	beq.n	800d130 <osMessageQueueGet+0xac>
 800d0e6:	4b15      	ldr	r3, [pc, #84]	; (800d13c <osMessageQueueGet+0xb8>)
 800d0e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d0ec:	601a      	str	r2, [r3, #0]
 800d0ee:	f3bf 8f4f 	dsb	sy
 800d0f2:	f3bf 8f6f 	isb	sy
 800d0f6:	e01b      	b.n	800d130 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800d0f8:	69bb      	ldr	r3, [r7, #24]
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d002      	beq.n	800d104 <osMessageQueueGet+0x80>
 800d0fe:	68bb      	ldr	r3, [r7, #8]
 800d100:	2b00      	cmp	r3, #0
 800d102:	d103      	bne.n	800d10c <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800d104:	f06f 0303 	mvn.w	r3, #3
 800d108:	61fb      	str	r3, [r7, #28]
 800d10a:	e011      	b.n	800d130 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800d10c:	683a      	ldr	r2, [r7, #0]
 800d10e:	68b9      	ldr	r1, [r7, #8]
 800d110:	69b8      	ldr	r0, [r7, #24]
 800d112:	f000 fbf1 	bl	800d8f8 <xQueueReceive>
 800d116:	4603      	mov	r3, r0
 800d118:	2b01      	cmp	r3, #1
 800d11a:	d009      	beq.n	800d130 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800d11c:	683b      	ldr	r3, [r7, #0]
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d003      	beq.n	800d12a <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800d122:	f06f 0301 	mvn.w	r3, #1
 800d126:	61fb      	str	r3, [r7, #28]
 800d128:	e002      	b.n	800d130 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800d12a:	f06f 0302 	mvn.w	r3, #2
 800d12e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800d130:	69fb      	ldr	r3, [r7, #28]
}
 800d132:	4618      	mov	r0, r3
 800d134:	3720      	adds	r7, #32
 800d136:	46bd      	mov	sp, r7
 800d138:	bd80      	pop	{r7, pc}
 800d13a:	bf00      	nop
 800d13c:	e000ed04 	.word	0xe000ed04

0800d140 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 800d140:	b580      	push	{r7, lr}
 800d142:	b086      	sub	sp, #24
 800d144:	af00      	add	r7, sp, #0
 800d146:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 800d14c:	693b      	ldr	r3, [r7, #16]
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d102      	bne.n	800d158 <osMessageQueueGetCount+0x18>
    count = 0U;
 800d152:	2300      	movs	r3, #0
 800d154:	617b      	str	r3, [r7, #20]
 800d156:	e00e      	b.n	800d176 <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d158:	f3ef 8305 	mrs	r3, IPSR
 800d15c:	60fb      	str	r3, [r7, #12]
  return(result);
 800d15e:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800d160:	2b00      	cmp	r3, #0
 800d162:	d004      	beq.n	800d16e <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 800d164:	6938      	ldr	r0, [r7, #16]
 800d166:	f000 fd39 	bl	800dbdc <uxQueueMessagesWaitingFromISR>
 800d16a:	6178      	str	r0, [r7, #20]
 800d16c:	e003      	b.n	800d176 <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 800d16e:	6938      	ldr	r0, [r7, #16]
 800d170:	f000 fd16 	bl	800dba0 <uxQueueMessagesWaiting>
 800d174:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 800d176:	697b      	ldr	r3, [r7, #20]
}
 800d178:	4618      	mov	r0, r3
 800d17a:	3718      	adds	r7, #24
 800d17c:	46bd      	mov	sp, r7
 800d17e:	bd80      	pop	{r7, pc}

0800d180 <osMessageQueueReset>:
  }

  return (space);
}

osStatus_t osMessageQueueReset (osMessageQueueId_t mq_id) {
 800d180:	b580      	push	{r7, lr}
 800d182:	b086      	sub	sp, #24
 800d184:	af00      	add	r7, sp, #0
 800d186:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d18c:	f3ef 8305 	mrs	r3, IPSR
 800d190:	60fb      	str	r3, [r7, #12]
  return(result);
 800d192:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d194:	2b00      	cmp	r3, #0
 800d196:	d003      	beq.n	800d1a0 <osMessageQueueReset+0x20>
    stat = osErrorISR;
 800d198:	f06f 0305 	mvn.w	r3, #5
 800d19c:	617b      	str	r3, [r7, #20]
 800d19e:	e00c      	b.n	800d1ba <osMessageQueueReset+0x3a>
  }
  else if (hQueue == NULL) {
 800d1a0:	693b      	ldr	r3, [r7, #16]
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d103      	bne.n	800d1ae <osMessageQueueReset+0x2e>
    stat = osErrorParameter;
 800d1a6:	f06f 0303 	mvn.w	r3, #3
 800d1aa:	617b      	str	r3, [r7, #20]
 800d1ac:	e005      	b.n	800d1ba <osMessageQueueReset+0x3a>
  }
  else {
    stat = osOK;
 800d1ae:	2300      	movs	r3, #0
 800d1b0:	617b      	str	r3, [r7, #20]
    (void)xQueueReset (hQueue);
 800d1b2:	2100      	movs	r1, #0
 800d1b4:	6938      	ldr	r0, [r7, #16]
 800d1b6:	f000 f8ed 	bl	800d394 <xQueueGenericReset>
  }

  return (stat);
 800d1ba:	697b      	ldr	r3, [r7, #20]
}
 800d1bc:	4618      	mov	r0, r3
 800d1be:	3718      	adds	r7, #24
 800d1c0:	46bd      	mov	sp, r7
 800d1c2:	bd80      	pop	{r7, pc}

0800d1c4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800d1c4:	b480      	push	{r7}
 800d1c6:	b085      	sub	sp, #20
 800d1c8:	af00      	add	r7, sp, #0
 800d1ca:	60f8      	str	r0, [r7, #12]
 800d1cc:	60b9      	str	r1, [r7, #8]
 800d1ce:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800d1d0:	68fb      	ldr	r3, [r7, #12]
 800d1d2:	4a07      	ldr	r2, [pc, #28]	; (800d1f0 <vApplicationGetIdleTaskMemory+0x2c>)
 800d1d4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800d1d6:	68bb      	ldr	r3, [r7, #8]
 800d1d8:	4a06      	ldr	r2, [pc, #24]	; (800d1f4 <vApplicationGetIdleTaskMemory+0x30>)
 800d1da:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d1e2:	601a      	str	r2, [r3, #0]
}
 800d1e4:	bf00      	nop
 800d1e6:	3714      	adds	r7, #20
 800d1e8:	46bd      	mov	sp, r7
 800d1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ee:	4770      	bx	lr
 800d1f0:	20000c88 	.word	0x20000c88
 800d1f4:	20000d44 	.word	0x20000d44

0800d1f8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800d1f8:	b480      	push	{r7}
 800d1fa:	b085      	sub	sp, #20
 800d1fc:	af00      	add	r7, sp, #0
 800d1fe:	60f8      	str	r0, [r7, #12]
 800d200:	60b9      	str	r1, [r7, #8]
 800d202:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	4a07      	ldr	r2, [pc, #28]	; (800d224 <vApplicationGetTimerTaskMemory+0x2c>)
 800d208:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800d20a:	68bb      	ldr	r3, [r7, #8]
 800d20c:	4a06      	ldr	r2, [pc, #24]	; (800d228 <vApplicationGetTimerTaskMemory+0x30>)
 800d20e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d216:	601a      	str	r2, [r3, #0]
}
 800d218:	bf00      	nop
 800d21a:	3714      	adds	r7, #20
 800d21c:	46bd      	mov	sp, r7
 800d21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d222:	4770      	bx	lr
 800d224:	20001144 	.word	0x20001144
 800d228:	20001200 	.word	0x20001200

0800d22c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800d22c:	b480      	push	{r7}
 800d22e:	b083      	sub	sp, #12
 800d230:	af00      	add	r7, sp, #0
 800d232:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	f103 0208 	add.w	r2, r3, #8
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	f04f 32ff 	mov.w	r2, #4294967295
 800d244:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	f103 0208 	add.w	r2, r3, #8
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	f103 0208 	add.w	r2, r3, #8
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	2200      	movs	r2, #0
 800d25e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d260:	bf00      	nop
 800d262:	370c      	adds	r7, #12
 800d264:	46bd      	mov	sp, r7
 800d266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d26a:	4770      	bx	lr

0800d26c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800d26c:	b480      	push	{r7}
 800d26e:	b083      	sub	sp, #12
 800d270:	af00      	add	r7, sp, #0
 800d272:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	2200      	movs	r2, #0
 800d278:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d27a:	bf00      	nop
 800d27c:	370c      	adds	r7, #12
 800d27e:	46bd      	mov	sp, r7
 800d280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d284:	4770      	bx	lr

0800d286 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d286:	b480      	push	{r7}
 800d288:	b085      	sub	sp, #20
 800d28a:	af00      	add	r7, sp, #0
 800d28c:	6078      	str	r0, [r7, #4]
 800d28e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	685b      	ldr	r3, [r3, #4]
 800d294:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800d296:	683b      	ldr	r3, [r7, #0]
 800d298:	68fa      	ldr	r2, [r7, #12]
 800d29a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d29c:	68fb      	ldr	r3, [r7, #12]
 800d29e:	689a      	ldr	r2, [r3, #8]
 800d2a0:	683b      	ldr	r3, [r7, #0]
 800d2a2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d2a4:	68fb      	ldr	r3, [r7, #12]
 800d2a6:	689b      	ldr	r3, [r3, #8]
 800d2a8:	683a      	ldr	r2, [r7, #0]
 800d2aa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d2ac:	68fb      	ldr	r3, [r7, #12]
 800d2ae:	683a      	ldr	r2, [r7, #0]
 800d2b0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800d2b2:	683b      	ldr	r3, [r7, #0]
 800d2b4:	687a      	ldr	r2, [r7, #4]
 800d2b6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	1c5a      	adds	r2, r3, #1
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	601a      	str	r2, [r3, #0]
}
 800d2c2:	bf00      	nop
 800d2c4:	3714      	adds	r7, #20
 800d2c6:	46bd      	mov	sp, r7
 800d2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2cc:	4770      	bx	lr

0800d2ce <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d2ce:	b480      	push	{r7}
 800d2d0:	b085      	sub	sp, #20
 800d2d2:	af00      	add	r7, sp, #0
 800d2d4:	6078      	str	r0, [r7, #4]
 800d2d6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d2d8:	683b      	ldr	r3, [r7, #0]
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d2de:	68bb      	ldr	r3, [r7, #8]
 800d2e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2e4:	d103      	bne.n	800d2ee <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	691b      	ldr	r3, [r3, #16]
 800d2ea:	60fb      	str	r3, [r7, #12]
 800d2ec:	e00c      	b.n	800d308 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	3308      	adds	r3, #8
 800d2f2:	60fb      	str	r3, [r7, #12]
 800d2f4:	e002      	b.n	800d2fc <vListInsert+0x2e>
 800d2f6:	68fb      	ldr	r3, [r7, #12]
 800d2f8:	685b      	ldr	r3, [r3, #4]
 800d2fa:	60fb      	str	r3, [r7, #12]
 800d2fc:	68fb      	ldr	r3, [r7, #12]
 800d2fe:	685b      	ldr	r3, [r3, #4]
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	68ba      	ldr	r2, [r7, #8]
 800d304:	429a      	cmp	r2, r3
 800d306:	d2f6      	bcs.n	800d2f6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d308:	68fb      	ldr	r3, [r7, #12]
 800d30a:	685a      	ldr	r2, [r3, #4]
 800d30c:	683b      	ldr	r3, [r7, #0]
 800d30e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d310:	683b      	ldr	r3, [r7, #0]
 800d312:	685b      	ldr	r3, [r3, #4]
 800d314:	683a      	ldr	r2, [r7, #0]
 800d316:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d318:	683b      	ldr	r3, [r7, #0]
 800d31a:	68fa      	ldr	r2, [r7, #12]
 800d31c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800d31e:	68fb      	ldr	r3, [r7, #12]
 800d320:	683a      	ldr	r2, [r7, #0]
 800d322:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800d324:	683b      	ldr	r3, [r7, #0]
 800d326:	687a      	ldr	r2, [r7, #4]
 800d328:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	681b      	ldr	r3, [r3, #0]
 800d32e:	1c5a      	adds	r2, r3, #1
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	601a      	str	r2, [r3, #0]
}
 800d334:	bf00      	nop
 800d336:	3714      	adds	r7, #20
 800d338:	46bd      	mov	sp, r7
 800d33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d33e:	4770      	bx	lr

0800d340 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800d340:	b480      	push	{r7}
 800d342:	b085      	sub	sp, #20
 800d344:	af00      	add	r7, sp, #0
 800d346:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	691b      	ldr	r3, [r3, #16]
 800d34c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	685b      	ldr	r3, [r3, #4]
 800d352:	687a      	ldr	r2, [r7, #4]
 800d354:	6892      	ldr	r2, [r2, #8]
 800d356:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	689b      	ldr	r3, [r3, #8]
 800d35c:	687a      	ldr	r2, [r7, #4]
 800d35e:	6852      	ldr	r2, [r2, #4]
 800d360:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d362:	68fb      	ldr	r3, [r7, #12]
 800d364:	685b      	ldr	r3, [r3, #4]
 800d366:	687a      	ldr	r2, [r7, #4]
 800d368:	429a      	cmp	r2, r3
 800d36a:	d103      	bne.n	800d374 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	689a      	ldr	r2, [r3, #8]
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	2200      	movs	r2, #0
 800d378:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	681b      	ldr	r3, [r3, #0]
 800d37e:	1e5a      	subs	r2, r3, #1
 800d380:	68fb      	ldr	r3, [r7, #12]
 800d382:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d384:	68fb      	ldr	r3, [r7, #12]
 800d386:	681b      	ldr	r3, [r3, #0]
}
 800d388:	4618      	mov	r0, r3
 800d38a:	3714      	adds	r7, #20
 800d38c:	46bd      	mov	sp, r7
 800d38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d392:	4770      	bx	lr

0800d394 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800d394:	b580      	push	{r7, lr}
 800d396:	b084      	sub	sp, #16
 800d398:	af00      	add	r7, sp, #0
 800d39a:	6078      	str	r0, [r7, #4]
 800d39c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d10a      	bne.n	800d3be <xQueueGenericReset+0x2a>
	__asm volatile
 800d3a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3ac:	f383 8811 	msr	BASEPRI, r3
 800d3b0:	f3bf 8f6f 	isb	sy
 800d3b4:	f3bf 8f4f 	dsb	sy
 800d3b8:	60bb      	str	r3, [r7, #8]
}
 800d3ba:	bf00      	nop
 800d3bc:	e7fe      	b.n	800d3bc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800d3be:	f002 f8f1 	bl	800f5a4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d3c2:	68fb      	ldr	r3, [r7, #12]
 800d3c4:	681a      	ldr	r2, [r3, #0]
 800d3c6:	68fb      	ldr	r3, [r7, #12]
 800d3c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d3ca:	68f9      	ldr	r1, [r7, #12]
 800d3cc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d3ce:	fb01 f303 	mul.w	r3, r1, r3
 800d3d2:	441a      	add	r2, r3
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d3d8:	68fb      	ldr	r3, [r7, #12]
 800d3da:	2200      	movs	r2, #0
 800d3dc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d3de:	68fb      	ldr	r3, [r7, #12]
 800d3e0:	681a      	ldr	r2, [r3, #0]
 800d3e2:	68fb      	ldr	r3, [r7, #12]
 800d3e4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	681a      	ldr	r2, [r3, #0]
 800d3ea:	68fb      	ldr	r3, [r7, #12]
 800d3ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d3ee:	3b01      	subs	r3, #1
 800d3f0:	68f9      	ldr	r1, [r7, #12]
 800d3f2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d3f4:	fb01 f303 	mul.w	r3, r1, r3
 800d3f8:	441a      	add	r2, r3
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800d3fe:	68fb      	ldr	r3, [r7, #12]
 800d400:	22ff      	movs	r2, #255	; 0xff
 800d402:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	22ff      	movs	r2, #255	; 0xff
 800d40a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800d40e:	683b      	ldr	r3, [r7, #0]
 800d410:	2b00      	cmp	r3, #0
 800d412:	d109      	bne.n	800d428 <xQueueGenericReset+0x94>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	691b      	ldr	r3, [r3, #16]
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d00f      	beq.n	800d43c <xQueueGenericReset+0xa8>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d41c:	68fb      	ldr	r3, [r7, #12]
 800d41e:	3310      	adds	r3, #16
 800d420:	4618      	mov	r0, r3
 800d422:	f001 f9ab 	bl	800e77c <xTaskRemoveFromEventList>
 800d426:	e009      	b.n	800d43c <xQueueGenericReset+0xa8>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d428:	68fb      	ldr	r3, [r7, #12]
 800d42a:	3310      	adds	r3, #16
 800d42c:	4618      	mov	r0, r3
 800d42e:	f7ff fefd 	bl	800d22c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	3324      	adds	r3, #36	; 0x24
 800d436:	4618      	mov	r0, r3
 800d438:	f7ff fef8 	bl	800d22c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800d43c:	f002 f8e2 	bl	800f604 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800d440:	2301      	movs	r3, #1
}
 800d442:	4618      	mov	r0, r3
 800d444:	3710      	adds	r7, #16
 800d446:	46bd      	mov	sp, r7
 800d448:	bd80      	pop	{r7, pc}

0800d44a <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800d44a:	b580      	push	{r7, lr}
 800d44c:	b08e      	sub	sp, #56	; 0x38
 800d44e:	af02      	add	r7, sp, #8
 800d450:	60f8      	str	r0, [r7, #12]
 800d452:	60b9      	str	r1, [r7, #8]
 800d454:	607a      	str	r2, [r7, #4]
 800d456:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d10a      	bne.n	800d474 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800d45e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d462:	f383 8811 	msr	BASEPRI, r3
 800d466:	f3bf 8f6f 	isb	sy
 800d46a:	f3bf 8f4f 	dsb	sy
 800d46e:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d470:	bf00      	nop
 800d472:	e7fe      	b.n	800d472 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800d474:	683b      	ldr	r3, [r7, #0]
 800d476:	2b00      	cmp	r3, #0
 800d478:	d10a      	bne.n	800d490 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800d47a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d47e:	f383 8811 	msr	BASEPRI, r3
 800d482:	f3bf 8f6f 	isb	sy
 800d486:	f3bf 8f4f 	dsb	sy
 800d48a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d48c:	bf00      	nop
 800d48e:	e7fe      	b.n	800d48e <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	2b00      	cmp	r3, #0
 800d494:	d002      	beq.n	800d49c <xQueueGenericCreateStatic+0x52>
 800d496:	68bb      	ldr	r3, [r7, #8]
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d001      	beq.n	800d4a0 <xQueueGenericCreateStatic+0x56>
 800d49c:	2301      	movs	r3, #1
 800d49e:	e000      	b.n	800d4a2 <xQueueGenericCreateStatic+0x58>
 800d4a0:	2300      	movs	r3, #0
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d10a      	bne.n	800d4bc <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800d4a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4aa:	f383 8811 	msr	BASEPRI, r3
 800d4ae:	f3bf 8f6f 	isb	sy
 800d4b2:	f3bf 8f4f 	dsb	sy
 800d4b6:	623b      	str	r3, [r7, #32]
}
 800d4b8:	bf00      	nop
 800d4ba:	e7fe      	b.n	800d4ba <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d102      	bne.n	800d4c8 <xQueueGenericCreateStatic+0x7e>
 800d4c2:	68bb      	ldr	r3, [r7, #8]
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d101      	bne.n	800d4cc <xQueueGenericCreateStatic+0x82>
 800d4c8:	2301      	movs	r3, #1
 800d4ca:	e000      	b.n	800d4ce <xQueueGenericCreateStatic+0x84>
 800d4cc:	2300      	movs	r3, #0
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d10a      	bne.n	800d4e8 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800d4d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4d6:	f383 8811 	msr	BASEPRI, r3
 800d4da:	f3bf 8f6f 	isb	sy
 800d4de:	f3bf 8f4f 	dsb	sy
 800d4e2:	61fb      	str	r3, [r7, #28]
}
 800d4e4:	bf00      	nop
 800d4e6:	e7fe      	b.n	800d4e6 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800d4e8:	2350      	movs	r3, #80	; 0x50
 800d4ea:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800d4ec:	697b      	ldr	r3, [r7, #20]
 800d4ee:	2b50      	cmp	r3, #80	; 0x50
 800d4f0:	d00a      	beq.n	800d508 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800d4f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4f6:	f383 8811 	msr	BASEPRI, r3
 800d4fa:	f3bf 8f6f 	isb	sy
 800d4fe:	f3bf 8f4f 	dsb	sy
 800d502:	61bb      	str	r3, [r7, #24]
}
 800d504:	bf00      	nop
 800d506:	e7fe      	b.n	800d506 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d508:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d50a:	683b      	ldr	r3, [r7, #0]
 800d50c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800d50e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d510:	2b00      	cmp	r3, #0
 800d512:	d00d      	beq.n	800d530 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d516:	2201      	movs	r2, #1
 800d518:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d51c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800d520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d522:	9300      	str	r3, [sp, #0]
 800d524:	4613      	mov	r3, r2
 800d526:	687a      	ldr	r2, [r7, #4]
 800d528:	68b9      	ldr	r1, [r7, #8]
 800d52a:	68f8      	ldr	r0, [r7, #12]
 800d52c:	f000 f83f 	bl	800d5ae <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800d532:	4618      	mov	r0, r3
 800d534:	3730      	adds	r7, #48	; 0x30
 800d536:	46bd      	mov	sp, r7
 800d538:	bd80      	pop	{r7, pc}

0800d53a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800d53a:	b580      	push	{r7, lr}
 800d53c:	b08a      	sub	sp, #40	; 0x28
 800d53e:	af02      	add	r7, sp, #8
 800d540:	60f8      	str	r0, [r7, #12]
 800d542:	60b9      	str	r1, [r7, #8]
 800d544:	4613      	mov	r3, r2
 800d546:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d548:	68fb      	ldr	r3, [r7, #12]
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	d10a      	bne.n	800d564 <xQueueGenericCreate+0x2a>
	__asm volatile
 800d54e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d552:	f383 8811 	msr	BASEPRI, r3
 800d556:	f3bf 8f6f 	isb	sy
 800d55a:	f3bf 8f4f 	dsb	sy
 800d55e:	613b      	str	r3, [r7, #16]
}
 800d560:	bf00      	nop
 800d562:	e7fe      	b.n	800d562 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d564:	68fb      	ldr	r3, [r7, #12]
 800d566:	68ba      	ldr	r2, [r7, #8]
 800d568:	fb02 f303 	mul.w	r3, r2, r3
 800d56c:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800d56e:	69fb      	ldr	r3, [r7, #28]
 800d570:	3350      	adds	r3, #80	; 0x50
 800d572:	4618      	mov	r0, r3
 800d574:	f002 f938 	bl	800f7e8 <pvPortMalloc>
 800d578:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800d57a:	69bb      	ldr	r3, [r7, #24]
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d011      	beq.n	800d5a4 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800d580:	69bb      	ldr	r3, [r7, #24]
 800d582:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d584:	697b      	ldr	r3, [r7, #20]
 800d586:	3350      	adds	r3, #80	; 0x50
 800d588:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800d58a:	69bb      	ldr	r3, [r7, #24]
 800d58c:	2200      	movs	r2, #0
 800d58e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d592:	79fa      	ldrb	r2, [r7, #7]
 800d594:	69bb      	ldr	r3, [r7, #24]
 800d596:	9300      	str	r3, [sp, #0]
 800d598:	4613      	mov	r3, r2
 800d59a:	697a      	ldr	r2, [r7, #20]
 800d59c:	68b9      	ldr	r1, [r7, #8]
 800d59e:	68f8      	ldr	r0, [r7, #12]
 800d5a0:	f000 f805 	bl	800d5ae <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d5a4:	69bb      	ldr	r3, [r7, #24]
	}
 800d5a6:	4618      	mov	r0, r3
 800d5a8:	3720      	adds	r7, #32
 800d5aa:	46bd      	mov	sp, r7
 800d5ac:	bd80      	pop	{r7, pc}

0800d5ae <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d5ae:	b580      	push	{r7, lr}
 800d5b0:	b084      	sub	sp, #16
 800d5b2:	af00      	add	r7, sp, #0
 800d5b4:	60f8      	str	r0, [r7, #12]
 800d5b6:	60b9      	str	r1, [r7, #8]
 800d5b8:	607a      	str	r2, [r7, #4]
 800d5ba:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d5bc:	68bb      	ldr	r3, [r7, #8]
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d103      	bne.n	800d5ca <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d5c2:	69bb      	ldr	r3, [r7, #24]
 800d5c4:	69ba      	ldr	r2, [r7, #24]
 800d5c6:	601a      	str	r2, [r3, #0]
 800d5c8:	e002      	b.n	800d5d0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d5ca:	69bb      	ldr	r3, [r7, #24]
 800d5cc:	687a      	ldr	r2, [r7, #4]
 800d5ce:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d5d0:	69bb      	ldr	r3, [r7, #24]
 800d5d2:	68fa      	ldr	r2, [r7, #12]
 800d5d4:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d5d6:	69bb      	ldr	r3, [r7, #24]
 800d5d8:	68ba      	ldr	r2, [r7, #8]
 800d5da:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d5dc:	2101      	movs	r1, #1
 800d5de:	69b8      	ldr	r0, [r7, #24]
 800d5e0:	f7ff fed8 	bl	800d394 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800d5e4:	69bb      	ldr	r3, [r7, #24]
 800d5e6:	78fa      	ldrb	r2, [r7, #3]
 800d5e8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d5ec:	bf00      	nop
 800d5ee:	3710      	adds	r7, #16
 800d5f0:	46bd      	mov	sp, r7
 800d5f2:	bd80      	pop	{r7, pc}

0800d5f4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d5f4:	b580      	push	{r7, lr}
 800d5f6:	b08e      	sub	sp, #56	; 0x38
 800d5f8:	af00      	add	r7, sp, #0
 800d5fa:	60f8      	str	r0, [r7, #12]
 800d5fc:	60b9      	str	r1, [r7, #8]
 800d5fe:	607a      	str	r2, [r7, #4]
 800d600:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d602:	2300      	movs	r3, #0
 800d604:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d606:	68fb      	ldr	r3, [r7, #12]
 800d608:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d60a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d10a      	bne.n	800d626 <xQueueGenericSend+0x32>
	__asm volatile
 800d610:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d614:	f383 8811 	msr	BASEPRI, r3
 800d618:	f3bf 8f6f 	isb	sy
 800d61c:	f3bf 8f4f 	dsb	sy
 800d620:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d622:	bf00      	nop
 800d624:	e7fe      	b.n	800d624 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d626:	68bb      	ldr	r3, [r7, #8]
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d103      	bne.n	800d634 <xQueueGenericSend+0x40>
 800d62c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d62e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d630:	2b00      	cmp	r3, #0
 800d632:	d101      	bne.n	800d638 <xQueueGenericSend+0x44>
 800d634:	2301      	movs	r3, #1
 800d636:	e000      	b.n	800d63a <xQueueGenericSend+0x46>
 800d638:	2300      	movs	r3, #0
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d10a      	bne.n	800d654 <xQueueGenericSend+0x60>
	__asm volatile
 800d63e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d642:	f383 8811 	msr	BASEPRI, r3
 800d646:	f3bf 8f6f 	isb	sy
 800d64a:	f3bf 8f4f 	dsb	sy
 800d64e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d650:	bf00      	nop
 800d652:	e7fe      	b.n	800d652 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d654:	683b      	ldr	r3, [r7, #0]
 800d656:	2b02      	cmp	r3, #2
 800d658:	d103      	bne.n	800d662 <xQueueGenericSend+0x6e>
 800d65a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d65c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d65e:	2b01      	cmp	r3, #1
 800d660:	d101      	bne.n	800d666 <xQueueGenericSend+0x72>
 800d662:	2301      	movs	r3, #1
 800d664:	e000      	b.n	800d668 <xQueueGenericSend+0x74>
 800d666:	2300      	movs	r3, #0
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d10a      	bne.n	800d682 <xQueueGenericSend+0x8e>
	__asm volatile
 800d66c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d670:	f383 8811 	msr	BASEPRI, r3
 800d674:	f3bf 8f6f 	isb	sy
 800d678:	f3bf 8f4f 	dsb	sy
 800d67c:	623b      	str	r3, [r7, #32]
}
 800d67e:	bf00      	nop
 800d680:	e7fe      	b.n	800d680 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d682:	f001 fa37 	bl	800eaf4 <xTaskGetSchedulerState>
 800d686:	4603      	mov	r3, r0
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d102      	bne.n	800d692 <xQueueGenericSend+0x9e>
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d101      	bne.n	800d696 <xQueueGenericSend+0xa2>
 800d692:	2301      	movs	r3, #1
 800d694:	e000      	b.n	800d698 <xQueueGenericSend+0xa4>
 800d696:	2300      	movs	r3, #0
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d10a      	bne.n	800d6b2 <xQueueGenericSend+0xbe>
	__asm volatile
 800d69c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6a0:	f383 8811 	msr	BASEPRI, r3
 800d6a4:	f3bf 8f6f 	isb	sy
 800d6a8:	f3bf 8f4f 	dsb	sy
 800d6ac:	61fb      	str	r3, [r7, #28]
}
 800d6ae:	bf00      	nop
 800d6b0:	e7fe      	b.n	800d6b0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d6b2:	f001 ff77 	bl	800f5a4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d6b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d6ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d6be:	429a      	cmp	r2, r3
 800d6c0:	d302      	bcc.n	800d6c8 <xQueueGenericSend+0xd4>
 800d6c2:	683b      	ldr	r3, [r7, #0]
 800d6c4:	2b02      	cmp	r3, #2
 800d6c6:	d112      	bne.n	800d6ee <xQueueGenericSend+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d6c8:	683a      	ldr	r2, [r7, #0]
 800d6ca:	68b9      	ldr	r1, [r7, #8]
 800d6cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d6ce:	f000 faa3 	bl	800dc18 <prvCopyDataToQueue>
 800d6d2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d6d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d004      	beq.n	800d6e6 <xQueueGenericSend+0xf2>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d6dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6de:	3324      	adds	r3, #36	; 0x24
 800d6e0:	4618      	mov	r0, r3
 800d6e2:	f001 f84b 	bl	800e77c <xTaskRemoveFromEventList>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d6e6:	f001 ff8d 	bl	800f604 <vPortExitCritical>
				return pdPASS;
 800d6ea:	2301      	movs	r3, #1
 800d6ec:	e062      	b.n	800d7b4 <xQueueGenericSend+0x1c0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d103      	bne.n	800d6fc <xQueueGenericSend+0x108>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d6f4:	f001 ff86 	bl	800f604 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d6f8:	2300      	movs	r3, #0
 800d6fa:	e05b      	b.n	800d7b4 <xQueueGenericSend+0x1c0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d6fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	d106      	bne.n	800d710 <xQueueGenericSend+0x11c>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d702:	f107 0314 	add.w	r3, r7, #20
 800d706:	4618      	mov	r0, r3
 800d708:	f001 f89c 	bl	800e844 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d70c:	2301      	movs	r3, #1
 800d70e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d710:	f001 ff78 	bl	800f604 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d714:	f000 fe3a 	bl	800e38c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d718:	f001 ff44 	bl	800f5a4 <vPortEnterCritical>
 800d71c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d71e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d722:	b25b      	sxtb	r3, r3
 800d724:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d728:	d103      	bne.n	800d732 <xQueueGenericSend+0x13e>
 800d72a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d72c:	2200      	movs	r2, #0
 800d72e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d734:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d738:	b25b      	sxtb	r3, r3
 800d73a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d73e:	d103      	bne.n	800d748 <xQueueGenericSend+0x154>
 800d740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d742:	2200      	movs	r2, #0
 800d744:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d748:	f001 ff5c 	bl	800f604 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d74c:	1d3a      	adds	r2, r7, #4
 800d74e:	f107 0314 	add.w	r3, r7, #20
 800d752:	4611      	mov	r1, r2
 800d754:	4618      	mov	r0, r3
 800d756:	f001 f88b 	bl	800e870 <xTaskCheckForTimeOut>
 800d75a:	4603      	mov	r3, r0
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d123      	bne.n	800d7a8 <xQueueGenericSend+0x1b4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d760:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d762:	f000 fb51 	bl	800de08 <prvIsQueueFull>
 800d766:	4603      	mov	r3, r0
 800d768:	2b00      	cmp	r3, #0
 800d76a:	d017      	beq.n	800d79c <xQueueGenericSend+0x1a8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d76c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d76e:	3310      	adds	r3, #16
 800d770:	687a      	ldr	r2, [r7, #4]
 800d772:	4611      	mov	r1, r2
 800d774:	4618      	mov	r0, r3
 800d776:	f000 ffb1 	bl	800e6dc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d77a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d77c:	f000 fadc 	bl	800dd38 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d780:	f000 fe12 	bl	800e3a8 <xTaskResumeAll>
 800d784:	4603      	mov	r3, r0
 800d786:	2b00      	cmp	r3, #0
 800d788:	d193      	bne.n	800d6b2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800d78a:	4b0c      	ldr	r3, [pc, #48]	; (800d7bc <xQueueGenericSend+0x1c8>)
 800d78c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d790:	601a      	str	r2, [r3, #0]
 800d792:	f3bf 8f4f 	dsb	sy
 800d796:	f3bf 8f6f 	isb	sy
 800d79a:	e78a      	b.n	800d6b2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d79c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d79e:	f000 facb 	bl	800dd38 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d7a2:	f000 fe01 	bl	800e3a8 <xTaskResumeAll>
 800d7a6:	e784      	b.n	800d6b2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d7a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d7aa:	f000 fac5 	bl	800dd38 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d7ae:	f000 fdfb 	bl	800e3a8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d7b2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d7b4:	4618      	mov	r0, r3
 800d7b6:	3738      	adds	r7, #56	; 0x38
 800d7b8:	46bd      	mov	sp, r7
 800d7ba:	bd80      	pop	{r7, pc}
 800d7bc:	e000ed04 	.word	0xe000ed04

0800d7c0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800d7c0:	b580      	push	{r7, lr}
 800d7c2:	b090      	sub	sp, #64	; 0x40
 800d7c4:	af00      	add	r7, sp, #0
 800d7c6:	60f8      	str	r0, [r7, #12]
 800d7c8:	60b9      	str	r1, [r7, #8]
 800d7ca:	607a      	str	r2, [r7, #4]
 800d7cc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d7ce:	68fb      	ldr	r3, [r7, #12]
 800d7d0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800d7d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	d10a      	bne.n	800d7ee <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800d7d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7dc:	f383 8811 	msr	BASEPRI, r3
 800d7e0:	f3bf 8f6f 	isb	sy
 800d7e4:	f3bf 8f4f 	dsb	sy
 800d7e8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d7ea:	bf00      	nop
 800d7ec:	e7fe      	b.n	800d7ec <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d7ee:	68bb      	ldr	r3, [r7, #8]
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d103      	bne.n	800d7fc <xQueueGenericSendFromISR+0x3c>
 800d7f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d101      	bne.n	800d800 <xQueueGenericSendFromISR+0x40>
 800d7fc:	2301      	movs	r3, #1
 800d7fe:	e000      	b.n	800d802 <xQueueGenericSendFromISR+0x42>
 800d800:	2300      	movs	r3, #0
 800d802:	2b00      	cmp	r3, #0
 800d804:	d10a      	bne.n	800d81c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800d806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d80a:	f383 8811 	msr	BASEPRI, r3
 800d80e:	f3bf 8f6f 	isb	sy
 800d812:	f3bf 8f4f 	dsb	sy
 800d816:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d818:	bf00      	nop
 800d81a:	e7fe      	b.n	800d81a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d81c:	683b      	ldr	r3, [r7, #0]
 800d81e:	2b02      	cmp	r3, #2
 800d820:	d103      	bne.n	800d82a <xQueueGenericSendFromISR+0x6a>
 800d822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d824:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d826:	2b01      	cmp	r3, #1
 800d828:	d101      	bne.n	800d82e <xQueueGenericSendFromISR+0x6e>
 800d82a:	2301      	movs	r3, #1
 800d82c:	e000      	b.n	800d830 <xQueueGenericSendFromISR+0x70>
 800d82e:	2300      	movs	r3, #0
 800d830:	2b00      	cmp	r3, #0
 800d832:	d10a      	bne.n	800d84a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800d834:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d838:	f383 8811 	msr	BASEPRI, r3
 800d83c:	f3bf 8f6f 	isb	sy
 800d840:	f3bf 8f4f 	dsb	sy
 800d844:	623b      	str	r3, [r7, #32]
}
 800d846:	bf00      	nop
 800d848:	e7fe      	b.n	800d848 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d84a:	f001 ff8d 	bl	800f768 <vPortValidateInterruptPriority>
	__asm volatile
 800d84e:	f3ef 8211 	mrs	r2, BASEPRI
 800d852:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d856:	f383 8811 	msr	BASEPRI, r3
 800d85a:	f3bf 8f6f 	isb	sy
 800d85e:	f3bf 8f4f 	dsb	sy
 800d862:	61fa      	str	r2, [r7, #28]
 800d864:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800d866:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d868:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d86a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d86c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d86e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d870:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d872:	429a      	cmp	r2, r3
 800d874:	d302      	bcc.n	800d87c <xQueueGenericSendFromISR+0xbc>
 800d876:	683b      	ldr	r3, [r7, #0]
 800d878:	2b02      	cmp	r3, #2
 800d87a:	d12f      	bne.n	800d8dc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d87c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d87e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d882:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d88a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d88c:	683a      	ldr	r2, [r7, #0]
 800d88e:	68b9      	ldr	r1, [r7, #8]
 800d890:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d892:	f000 f9c1 	bl	800dc18 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d896:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800d89a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d89e:	d112      	bne.n	800d8c6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d8a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d016      	beq.n	800d8d6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d8a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8aa:	3324      	adds	r3, #36	; 0x24
 800d8ac:	4618      	mov	r0, r3
 800d8ae:	f000 ff65 	bl	800e77c <xTaskRemoveFromEventList>
 800d8b2:	4603      	mov	r3, r0
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d00e      	beq.n	800d8d6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	d00b      	beq.n	800d8d6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	2201      	movs	r2, #1
 800d8c2:	601a      	str	r2, [r3, #0]
 800d8c4:	e007      	b.n	800d8d6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d8c6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d8ca:	3301      	adds	r3, #1
 800d8cc:	b2db      	uxtb	r3, r3
 800d8ce:	b25a      	sxtb	r2, r3
 800d8d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d8d6:	2301      	movs	r3, #1
 800d8d8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800d8da:	e001      	b.n	800d8e0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d8dc:	2300      	movs	r3, #0
 800d8de:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d8e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d8e2:	617b      	str	r3, [r7, #20]
	__asm volatile
 800d8e4:	697b      	ldr	r3, [r7, #20]
 800d8e6:	f383 8811 	msr	BASEPRI, r3
}
 800d8ea:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d8ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800d8ee:	4618      	mov	r0, r3
 800d8f0:	3740      	adds	r7, #64	; 0x40
 800d8f2:	46bd      	mov	sp, r7
 800d8f4:	bd80      	pop	{r7, pc}
	...

0800d8f8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d8f8:	b580      	push	{r7, lr}
 800d8fa:	b08c      	sub	sp, #48	; 0x30
 800d8fc:	af00      	add	r7, sp, #0
 800d8fe:	60f8      	str	r0, [r7, #12]
 800d900:	60b9      	str	r1, [r7, #8]
 800d902:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d904:	2300      	movs	r3, #0
 800d906:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d908:	68fb      	ldr	r3, [r7, #12]
 800d90a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d90c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d90e:	2b00      	cmp	r3, #0
 800d910:	d10a      	bne.n	800d928 <xQueueReceive+0x30>
	__asm volatile
 800d912:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d916:	f383 8811 	msr	BASEPRI, r3
 800d91a:	f3bf 8f6f 	isb	sy
 800d91e:	f3bf 8f4f 	dsb	sy
 800d922:	623b      	str	r3, [r7, #32]
}
 800d924:	bf00      	nop
 800d926:	e7fe      	b.n	800d926 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d928:	68bb      	ldr	r3, [r7, #8]
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d103      	bne.n	800d936 <xQueueReceive+0x3e>
 800d92e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d932:	2b00      	cmp	r3, #0
 800d934:	d101      	bne.n	800d93a <xQueueReceive+0x42>
 800d936:	2301      	movs	r3, #1
 800d938:	e000      	b.n	800d93c <xQueueReceive+0x44>
 800d93a:	2300      	movs	r3, #0
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d10a      	bne.n	800d956 <xQueueReceive+0x5e>
	__asm volatile
 800d940:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d944:	f383 8811 	msr	BASEPRI, r3
 800d948:	f3bf 8f6f 	isb	sy
 800d94c:	f3bf 8f4f 	dsb	sy
 800d950:	61fb      	str	r3, [r7, #28]
}
 800d952:	bf00      	nop
 800d954:	e7fe      	b.n	800d954 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d956:	f001 f8cd 	bl	800eaf4 <xTaskGetSchedulerState>
 800d95a:	4603      	mov	r3, r0
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d102      	bne.n	800d966 <xQueueReceive+0x6e>
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	2b00      	cmp	r3, #0
 800d964:	d101      	bne.n	800d96a <xQueueReceive+0x72>
 800d966:	2301      	movs	r3, #1
 800d968:	e000      	b.n	800d96c <xQueueReceive+0x74>
 800d96a:	2300      	movs	r3, #0
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d10a      	bne.n	800d986 <xQueueReceive+0x8e>
	__asm volatile
 800d970:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d974:	f383 8811 	msr	BASEPRI, r3
 800d978:	f3bf 8f6f 	isb	sy
 800d97c:	f3bf 8f4f 	dsb	sy
 800d980:	61bb      	str	r3, [r7, #24]
}
 800d982:	bf00      	nop
 800d984:	e7fe      	b.n	800d984 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d986:	f001 fe0d 	bl	800f5a4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d98a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d98c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d98e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d992:	2b00      	cmp	r3, #0
 800d994:	d014      	beq.n	800d9c0 <xQueueReceive+0xc8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d996:	68b9      	ldr	r1, [r7, #8]
 800d998:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d99a:	f000 f9a7 	bl	800dcec <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d99e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9a0:	1e5a      	subs	r2, r3, #1
 800d9a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9a4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d9a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9a8:	691b      	ldr	r3, [r3, #16]
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	d004      	beq.n	800d9b8 <xQueueReceive+0xc0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d9ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9b0:	3310      	adds	r3, #16
 800d9b2:	4618      	mov	r0, r3
 800d9b4:	f000 fee2 	bl	800e77c <xTaskRemoveFromEventList>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d9b8:	f001 fe24 	bl	800f604 <vPortExitCritical>
				return pdPASS;
 800d9bc:	2301      	movs	r3, #1
 800d9be:	e069      	b.n	800da94 <xQueueReceive+0x19c>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d103      	bne.n	800d9ce <xQueueReceive+0xd6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d9c6:	f001 fe1d 	bl	800f604 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d9ca:	2300      	movs	r3, #0
 800d9cc:	e062      	b.n	800da94 <xQueueReceive+0x19c>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d9ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d106      	bne.n	800d9e2 <xQueueReceive+0xea>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d9d4:	f107 0310 	add.w	r3, r7, #16
 800d9d8:	4618      	mov	r0, r3
 800d9da:	f000 ff33 	bl	800e844 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d9de:	2301      	movs	r3, #1
 800d9e0:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d9e2:	f001 fe0f 	bl	800f604 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d9e6:	f000 fcd1 	bl	800e38c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d9ea:	f001 fddb 	bl	800f5a4 <vPortEnterCritical>
 800d9ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d9f4:	b25b      	sxtb	r3, r3
 800d9f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9fa:	d103      	bne.n	800da04 <xQueueReceive+0x10c>
 800d9fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9fe:	2200      	movs	r2, #0
 800da00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800da04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da06:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800da0a:	b25b      	sxtb	r3, r3
 800da0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da10:	d103      	bne.n	800da1a <xQueueReceive+0x122>
 800da12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da14:	2200      	movs	r2, #0
 800da16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800da1a:	f001 fdf3 	bl	800f604 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800da1e:	1d3a      	adds	r2, r7, #4
 800da20:	f107 0310 	add.w	r3, r7, #16
 800da24:	4611      	mov	r1, r2
 800da26:	4618      	mov	r0, r3
 800da28:	f000 ff22 	bl	800e870 <xTaskCheckForTimeOut>
 800da2c:	4603      	mov	r3, r0
 800da2e:	2b00      	cmp	r3, #0
 800da30:	d123      	bne.n	800da7a <xQueueReceive+0x182>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800da32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800da34:	f000 f9d2 	bl	800dddc <prvIsQueueEmpty>
 800da38:	4603      	mov	r3, r0
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d017      	beq.n	800da6e <xQueueReceive+0x176>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800da3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da40:	3324      	adds	r3, #36	; 0x24
 800da42:	687a      	ldr	r2, [r7, #4]
 800da44:	4611      	mov	r1, r2
 800da46:	4618      	mov	r0, r3
 800da48:	f000 fe48 	bl	800e6dc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800da4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800da4e:	f000 f973 	bl	800dd38 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800da52:	f000 fca9 	bl	800e3a8 <xTaskResumeAll>
 800da56:	4603      	mov	r3, r0
 800da58:	2b00      	cmp	r3, #0
 800da5a:	d194      	bne.n	800d986 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800da5c:	4b0f      	ldr	r3, [pc, #60]	; (800da9c <xQueueReceive+0x1a4>)
 800da5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800da62:	601a      	str	r2, [r3, #0]
 800da64:	f3bf 8f4f 	dsb	sy
 800da68:	f3bf 8f6f 	isb	sy
 800da6c:	e78b      	b.n	800d986 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800da6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800da70:	f000 f962 	bl	800dd38 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800da74:	f000 fc98 	bl	800e3a8 <xTaskResumeAll>
 800da78:	e785      	b.n	800d986 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800da7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800da7c:	f000 f95c 	bl	800dd38 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800da80:	f000 fc92 	bl	800e3a8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800da84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800da86:	f000 f9a9 	bl	800dddc <prvIsQueueEmpty>
 800da8a:	4603      	mov	r3, r0
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	f43f af7a 	beq.w	800d986 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800da92:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800da94:	4618      	mov	r0, r3
 800da96:	3730      	adds	r7, #48	; 0x30
 800da98:	46bd      	mov	sp, r7
 800da9a:	bd80      	pop	{r7, pc}
 800da9c:	e000ed04 	.word	0xe000ed04

0800daa0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800daa0:	b580      	push	{r7, lr}
 800daa2:	b08e      	sub	sp, #56	; 0x38
 800daa4:	af00      	add	r7, sp, #0
 800daa6:	60f8      	str	r0, [r7, #12]
 800daa8:	60b9      	str	r1, [r7, #8]
 800daaa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800daac:	68fb      	ldr	r3, [r7, #12]
 800daae:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800dab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d10a      	bne.n	800dacc <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800dab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800daba:	f383 8811 	msr	BASEPRI, r3
 800dabe:	f3bf 8f6f 	isb	sy
 800dac2:	f3bf 8f4f 	dsb	sy
 800dac6:	623b      	str	r3, [r7, #32]
}
 800dac8:	bf00      	nop
 800daca:	e7fe      	b.n	800daca <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800dacc:	68bb      	ldr	r3, [r7, #8]
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d103      	bne.n	800dada <xQueueReceiveFromISR+0x3a>
 800dad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d101      	bne.n	800dade <xQueueReceiveFromISR+0x3e>
 800dada:	2301      	movs	r3, #1
 800dadc:	e000      	b.n	800dae0 <xQueueReceiveFromISR+0x40>
 800dade:	2300      	movs	r3, #0
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d10a      	bne.n	800dafa <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800dae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dae8:	f383 8811 	msr	BASEPRI, r3
 800daec:	f3bf 8f6f 	isb	sy
 800daf0:	f3bf 8f4f 	dsb	sy
 800daf4:	61fb      	str	r3, [r7, #28]
}
 800daf6:	bf00      	nop
 800daf8:	e7fe      	b.n	800daf8 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800dafa:	f001 fe35 	bl	800f768 <vPortValidateInterruptPriority>
	__asm volatile
 800dafe:	f3ef 8211 	mrs	r2, BASEPRI
 800db02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db06:	f383 8811 	msr	BASEPRI, r3
 800db0a:	f3bf 8f6f 	isb	sy
 800db0e:	f3bf 8f4f 	dsb	sy
 800db12:	61ba      	str	r2, [r7, #24]
 800db14:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800db16:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800db18:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800db1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db1e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800db20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db22:	2b00      	cmp	r3, #0
 800db24:	d02f      	beq.n	800db86 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800db26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db28:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800db2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800db30:	68b9      	ldr	r1, [r7, #8]
 800db32:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800db34:	f000 f8da 	bl	800dcec <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800db38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db3a:	1e5a      	subs	r2, r3, #1
 800db3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db3e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800db40:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800db44:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db48:	d112      	bne.n	800db70 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800db4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db4c:	691b      	ldr	r3, [r3, #16]
 800db4e:	2b00      	cmp	r3, #0
 800db50:	d016      	beq.n	800db80 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800db52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db54:	3310      	adds	r3, #16
 800db56:	4618      	mov	r0, r3
 800db58:	f000 fe10 	bl	800e77c <xTaskRemoveFromEventList>
 800db5c:	4603      	mov	r3, r0
 800db5e:	2b00      	cmp	r3, #0
 800db60:	d00e      	beq.n	800db80 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	2b00      	cmp	r3, #0
 800db66:	d00b      	beq.n	800db80 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	2201      	movs	r2, #1
 800db6c:	601a      	str	r2, [r3, #0]
 800db6e:	e007      	b.n	800db80 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800db70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800db74:	3301      	adds	r3, #1
 800db76:	b2db      	uxtb	r3, r3
 800db78:	b25a      	sxtb	r2, r3
 800db7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800db80:	2301      	movs	r3, #1
 800db82:	637b      	str	r3, [r7, #52]	; 0x34
 800db84:	e001      	b.n	800db8a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800db86:	2300      	movs	r3, #0
 800db88:	637b      	str	r3, [r7, #52]	; 0x34
 800db8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db8c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800db8e:	693b      	ldr	r3, [r7, #16]
 800db90:	f383 8811 	msr	BASEPRI, r3
}
 800db94:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800db96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800db98:	4618      	mov	r0, r3
 800db9a:	3738      	adds	r7, #56	; 0x38
 800db9c:	46bd      	mov	sp, r7
 800db9e:	bd80      	pop	{r7, pc}

0800dba0 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800dba0:	b580      	push	{r7, lr}
 800dba2:	b084      	sub	sp, #16
 800dba4:	af00      	add	r7, sp, #0
 800dba6:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	d10a      	bne.n	800dbc4 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 800dbae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbb2:	f383 8811 	msr	BASEPRI, r3
 800dbb6:	f3bf 8f6f 	isb	sy
 800dbba:	f3bf 8f4f 	dsb	sy
 800dbbe:	60bb      	str	r3, [r7, #8]
}
 800dbc0:	bf00      	nop
 800dbc2:	e7fe      	b.n	800dbc2 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 800dbc4:	f001 fcee 	bl	800f5a4 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dbcc:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800dbce:	f001 fd19 	bl	800f604 <vPortExitCritical>

	return uxReturn;
 800dbd2:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800dbd4:	4618      	mov	r0, r3
 800dbd6:	3710      	adds	r7, #16
 800dbd8:	46bd      	mov	sp, r7
 800dbda:	bd80      	pop	{r7, pc}

0800dbdc <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800dbdc:	b480      	push	{r7}
 800dbde:	b087      	sub	sp, #28
 800dbe0:	af00      	add	r7, sp, #0
 800dbe2:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800dbe8:	697b      	ldr	r3, [r7, #20]
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d10a      	bne.n	800dc04 <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 800dbee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbf2:	f383 8811 	msr	BASEPRI, r3
 800dbf6:	f3bf 8f6f 	isb	sy
 800dbfa:	f3bf 8f4f 	dsb	sy
 800dbfe:	60fb      	str	r3, [r7, #12]
}
 800dc00:	bf00      	nop
 800dc02:	e7fe      	b.n	800dc02 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 800dc04:	697b      	ldr	r3, [r7, #20]
 800dc06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc08:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800dc0a:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800dc0c:	4618      	mov	r0, r3
 800dc0e:	371c      	adds	r7, #28
 800dc10:	46bd      	mov	sp, r7
 800dc12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc16:	4770      	bx	lr

0800dc18 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800dc18:	b580      	push	{r7, lr}
 800dc1a:	b086      	sub	sp, #24
 800dc1c:	af00      	add	r7, sp, #0
 800dc1e:	60f8      	str	r0, [r7, #12]
 800dc20:	60b9      	str	r1, [r7, #8]
 800dc22:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800dc24:	2300      	movs	r3, #0
 800dc26:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dc28:	68fb      	ldr	r3, [r7, #12]
 800dc2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc2c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800dc2e:	68fb      	ldr	r3, [r7, #12]
 800dc30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d10d      	bne.n	800dc52 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800dc36:	68fb      	ldr	r3, [r7, #12]
 800dc38:	681b      	ldr	r3, [r3, #0]
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	d14d      	bne.n	800dcda <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800dc3e:	68fb      	ldr	r3, [r7, #12]
 800dc40:	689b      	ldr	r3, [r3, #8]
 800dc42:	4618      	mov	r0, r3
 800dc44:	f000 ff74 	bl	800eb30 <xTaskPriorityDisinherit>
 800dc48:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800dc4a:	68fb      	ldr	r3, [r7, #12]
 800dc4c:	2200      	movs	r2, #0
 800dc4e:	609a      	str	r2, [r3, #8]
 800dc50:	e043      	b.n	800dcda <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	d119      	bne.n	800dc8c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	6858      	ldr	r0, [r3, #4]
 800dc5c:	68fb      	ldr	r3, [r7, #12]
 800dc5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc60:	461a      	mov	r2, r3
 800dc62:	68b9      	ldr	r1, [r7, #8]
 800dc64:	f003 fc0a 	bl	801147c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	685a      	ldr	r2, [r3, #4]
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc70:	441a      	add	r2, r3
 800dc72:	68fb      	ldr	r3, [r7, #12]
 800dc74:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800dc76:	68fb      	ldr	r3, [r7, #12]
 800dc78:	685a      	ldr	r2, [r3, #4]
 800dc7a:	68fb      	ldr	r3, [r7, #12]
 800dc7c:	689b      	ldr	r3, [r3, #8]
 800dc7e:	429a      	cmp	r2, r3
 800dc80:	d32b      	bcc.n	800dcda <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800dc82:	68fb      	ldr	r3, [r7, #12]
 800dc84:	681a      	ldr	r2, [r3, #0]
 800dc86:	68fb      	ldr	r3, [r7, #12]
 800dc88:	605a      	str	r2, [r3, #4]
 800dc8a:	e026      	b.n	800dcda <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800dc8c:	68fb      	ldr	r3, [r7, #12]
 800dc8e:	68d8      	ldr	r0, [r3, #12]
 800dc90:	68fb      	ldr	r3, [r7, #12]
 800dc92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc94:	461a      	mov	r2, r3
 800dc96:	68b9      	ldr	r1, [r7, #8]
 800dc98:	f003 fbf0 	bl	801147c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800dc9c:	68fb      	ldr	r3, [r7, #12]
 800dc9e:	68da      	ldr	r2, [r3, #12]
 800dca0:	68fb      	ldr	r3, [r7, #12]
 800dca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dca4:	425b      	negs	r3, r3
 800dca6:	441a      	add	r2, r3
 800dca8:	68fb      	ldr	r3, [r7, #12]
 800dcaa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800dcac:	68fb      	ldr	r3, [r7, #12]
 800dcae:	68da      	ldr	r2, [r3, #12]
 800dcb0:	68fb      	ldr	r3, [r7, #12]
 800dcb2:	681b      	ldr	r3, [r3, #0]
 800dcb4:	429a      	cmp	r2, r3
 800dcb6:	d207      	bcs.n	800dcc8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800dcb8:	68fb      	ldr	r3, [r7, #12]
 800dcba:	689a      	ldr	r2, [r3, #8]
 800dcbc:	68fb      	ldr	r3, [r7, #12]
 800dcbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dcc0:	425b      	negs	r3, r3
 800dcc2:	441a      	add	r2, r3
 800dcc4:	68fb      	ldr	r3, [r7, #12]
 800dcc6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	2b02      	cmp	r3, #2
 800dccc:	d105      	bne.n	800dcda <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800dcce:	693b      	ldr	r3, [r7, #16]
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	d002      	beq.n	800dcda <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800dcd4:	693b      	ldr	r3, [r7, #16]
 800dcd6:	3b01      	subs	r3, #1
 800dcd8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800dcda:	693b      	ldr	r3, [r7, #16]
 800dcdc:	1c5a      	adds	r2, r3, #1
 800dcde:	68fb      	ldr	r3, [r7, #12]
 800dce0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800dce2:	697b      	ldr	r3, [r7, #20]
}
 800dce4:	4618      	mov	r0, r3
 800dce6:	3718      	adds	r7, #24
 800dce8:	46bd      	mov	sp, r7
 800dcea:	bd80      	pop	{r7, pc}

0800dcec <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800dcec:	b580      	push	{r7, lr}
 800dcee:	b082      	sub	sp, #8
 800dcf0:	af00      	add	r7, sp, #0
 800dcf2:	6078      	str	r0, [r7, #4]
 800dcf4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d018      	beq.n	800dd30 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	68da      	ldr	r2, [r3, #12]
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd06:	441a      	add	r2, r3
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	68da      	ldr	r2, [r3, #12]
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	689b      	ldr	r3, [r3, #8]
 800dd14:	429a      	cmp	r2, r3
 800dd16:	d303      	bcc.n	800dd20 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	681a      	ldr	r2, [r3, #0]
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	68d9      	ldr	r1, [r3, #12]
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd28:	461a      	mov	r2, r3
 800dd2a:	6838      	ldr	r0, [r7, #0]
 800dd2c:	f003 fba6 	bl	801147c <memcpy>
	}
}
 800dd30:	bf00      	nop
 800dd32:	3708      	adds	r7, #8
 800dd34:	46bd      	mov	sp, r7
 800dd36:	bd80      	pop	{r7, pc}

0800dd38 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800dd38:	b580      	push	{r7, lr}
 800dd3a:	b084      	sub	sp, #16
 800dd3c:	af00      	add	r7, sp, #0
 800dd3e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800dd40:	f001 fc30 	bl	800f5a4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dd4a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800dd4c:	e011      	b.n	800dd72 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	d012      	beq.n	800dd7c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	3324      	adds	r3, #36	; 0x24
 800dd5a:	4618      	mov	r0, r3
 800dd5c:	f000 fd0e 	bl	800e77c <xTaskRemoveFromEventList>
 800dd60:	4603      	mov	r3, r0
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	d001      	beq.n	800dd6a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800dd66:	f000 fde5 	bl	800e934 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800dd6a:	7bfb      	ldrb	r3, [r7, #15]
 800dd6c:	3b01      	subs	r3, #1
 800dd6e:	b2db      	uxtb	r3, r3
 800dd70:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800dd72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	dce9      	bgt.n	800dd4e <prvUnlockQueue+0x16>
 800dd7a:	e000      	b.n	800dd7e <prvUnlockQueue+0x46>
					break;
 800dd7c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	22ff      	movs	r2, #255	; 0xff
 800dd82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800dd86:	f001 fc3d 	bl	800f604 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800dd8a:	f001 fc0b 	bl	800f5a4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dd94:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800dd96:	e011      	b.n	800ddbc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	691b      	ldr	r3, [r3, #16]
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	d012      	beq.n	800ddc6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	3310      	adds	r3, #16
 800dda4:	4618      	mov	r0, r3
 800dda6:	f000 fce9 	bl	800e77c <xTaskRemoveFromEventList>
 800ddaa:	4603      	mov	r3, r0
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	d001      	beq.n	800ddb4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ddb0:	f000 fdc0 	bl	800e934 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ddb4:	7bbb      	ldrb	r3, [r7, #14]
 800ddb6:	3b01      	subs	r3, #1
 800ddb8:	b2db      	uxtb	r3, r3
 800ddba:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ddbc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	dce9      	bgt.n	800dd98 <prvUnlockQueue+0x60>
 800ddc4:	e000      	b.n	800ddc8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ddc6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	22ff      	movs	r2, #255	; 0xff
 800ddcc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800ddd0:	f001 fc18 	bl	800f604 <vPortExitCritical>
}
 800ddd4:	bf00      	nop
 800ddd6:	3710      	adds	r7, #16
 800ddd8:	46bd      	mov	sp, r7
 800ddda:	bd80      	pop	{r7, pc}

0800dddc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800dddc:	b580      	push	{r7, lr}
 800ddde:	b084      	sub	sp, #16
 800dde0:	af00      	add	r7, sp, #0
 800dde2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800dde4:	f001 fbde 	bl	800f5a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d102      	bne.n	800ddf6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ddf0:	2301      	movs	r3, #1
 800ddf2:	60fb      	str	r3, [r7, #12]
 800ddf4:	e001      	b.n	800ddfa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ddf6:	2300      	movs	r3, #0
 800ddf8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ddfa:	f001 fc03 	bl	800f604 <vPortExitCritical>

	return xReturn;
 800ddfe:	68fb      	ldr	r3, [r7, #12]
}
 800de00:	4618      	mov	r0, r3
 800de02:	3710      	adds	r7, #16
 800de04:	46bd      	mov	sp, r7
 800de06:	bd80      	pop	{r7, pc}

0800de08 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800de08:	b580      	push	{r7, lr}
 800de0a:	b084      	sub	sp, #16
 800de0c:	af00      	add	r7, sp, #0
 800de0e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800de10:	f001 fbc8 	bl	800f5a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800de1c:	429a      	cmp	r2, r3
 800de1e:	d102      	bne.n	800de26 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800de20:	2301      	movs	r3, #1
 800de22:	60fb      	str	r3, [r7, #12]
 800de24:	e001      	b.n	800de2a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800de26:	2300      	movs	r3, #0
 800de28:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800de2a:	f001 fbeb 	bl	800f604 <vPortExitCritical>

	return xReturn;
 800de2e:	68fb      	ldr	r3, [r7, #12]
}
 800de30:	4618      	mov	r0, r3
 800de32:	3710      	adds	r7, #16
 800de34:	46bd      	mov	sp, r7
 800de36:	bd80      	pop	{r7, pc}

0800de38 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800de38:	b480      	push	{r7}
 800de3a:	b085      	sub	sp, #20
 800de3c:	af00      	add	r7, sp, #0
 800de3e:	6078      	str	r0, [r7, #4]
 800de40:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800de42:	2300      	movs	r3, #0
 800de44:	60fb      	str	r3, [r7, #12]
 800de46:	e014      	b.n	800de72 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800de48:	4a0f      	ldr	r2, [pc, #60]	; (800de88 <vQueueAddToRegistry+0x50>)
 800de4a:	68fb      	ldr	r3, [r7, #12]
 800de4c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800de50:	2b00      	cmp	r3, #0
 800de52:	d10b      	bne.n	800de6c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800de54:	490c      	ldr	r1, [pc, #48]	; (800de88 <vQueueAddToRegistry+0x50>)
 800de56:	68fb      	ldr	r3, [r7, #12]
 800de58:	683a      	ldr	r2, [r7, #0]
 800de5a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800de5e:	4a0a      	ldr	r2, [pc, #40]	; (800de88 <vQueueAddToRegistry+0x50>)
 800de60:	68fb      	ldr	r3, [r7, #12]
 800de62:	00db      	lsls	r3, r3, #3
 800de64:	4413      	add	r3, r2
 800de66:	687a      	ldr	r2, [r7, #4]
 800de68:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800de6a:	e006      	b.n	800de7a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800de6c:	68fb      	ldr	r3, [r7, #12]
 800de6e:	3301      	adds	r3, #1
 800de70:	60fb      	str	r3, [r7, #12]
 800de72:	68fb      	ldr	r3, [r7, #12]
 800de74:	2b07      	cmp	r3, #7
 800de76:	d9e7      	bls.n	800de48 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800de78:	bf00      	nop
 800de7a:	bf00      	nop
 800de7c:	3714      	adds	r7, #20
 800de7e:	46bd      	mov	sp, r7
 800de80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de84:	4770      	bx	lr
 800de86:	bf00      	nop
 800de88:	20001a00 	.word	0x20001a00

0800de8c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800de8c:	b580      	push	{r7, lr}
 800de8e:	b086      	sub	sp, #24
 800de90:	af00      	add	r7, sp, #0
 800de92:	60f8      	str	r0, [r7, #12]
 800de94:	60b9      	str	r1, [r7, #8]
 800de96:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800de98:	68fb      	ldr	r3, [r7, #12]
 800de9a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800de9c:	f001 fb82 	bl	800f5a4 <vPortEnterCritical>
 800dea0:	697b      	ldr	r3, [r7, #20]
 800dea2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dea6:	b25b      	sxtb	r3, r3
 800dea8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800deac:	d103      	bne.n	800deb6 <vQueueWaitForMessageRestricted+0x2a>
 800deae:	697b      	ldr	r3, [r7, #20]
 800deb0:	2200      	movs	r2, #0
 800deb2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800deb6:	697b      	ldr	r3, [r7, #20]
 800deb8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800debc:	b25b      	sxtb	r3, r3
 800debe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dec2:	d103      	bne.n	800decc <vQueueWaitForMessageRestricted+0x40>
 800dec4:	697b      	ldr	r3, [r7, #20]
 800dec6:	2200      	movs	r2, #0
 800dec8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800decc:	f001 fb9a 	bl	800f604 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ded0:	697b      	ldr	r3, [r7, #20]
 800ded2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	d106      	bne.n	800dee6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800ded8:	697b      	ldr	r3, [r7, #20]
 800deda:	3324      	adds	r3, #36	; 0x24
 800dedc:	687a      	ldr	r2, [r7, #4]
 800dede:	68b9      	ldr	r1, [r7, #8]
 800dee0:	4618      	mov	r0, r3
 800dee2:	f000 fc1f 	bl	800e724 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800dee6:	6978      	ldr	r0, [r7, #20]
 800dee8:	f7ff ff26 	bl	800dd38 <prvUnlockQueue>
	}
 800deec:	bf00      	nop
 800deee:	3718      	adds	r7, #24
 800def0:	46bd      	mov	sp, r7
 800def2:	bd80      	pop	{r7, pc}

0800def4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800def4:	b580      	push	{r7, lr}
 800def6:	b08e      	sub	sp, #56	; 0x38
 800def8:	af04      	add	r7, sp, #16
 800defa:	60f8      	str	r0, [r7, #12]
 800defc:	60b9      	str	r1, [r7, #8]
 800defe:	607a      	str	r2, [r7, #4]
 800df00:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800df02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df04:	2b00      	cmp	r3, #0
 800df06:	d10a      	bne.n	800df1e <xTaskCreateStatic+0x2a>
	__asm volatile
 800df08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df0c:	f383 8811 	msr	BASEPRI, r3
 800df10:	f3bf 8f6f 	isb	sy
 800df14:	f3bf 8f4f 	dsb	sy
 800df18:	623b      	str	r3, [r7, #32]
}
 800df1a:	bf00      	nop
 800df1c:	e7fe      	b.n	800df1c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800df1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df20:	2b00      	cmp	r3, #0
 800df22:	d10a      	bne.n	800df3a <xTaskCreateStatic+0x46>
	__asm volatile
 800df24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df28:	f383 8811 	msr	BASEPRI, r3
 800df2c:	f3bf 8f6f 	isb	sy
 800df30:	f3bf 8f4f 	dsb	sy
 800df34:	61fb      	str	r3, [r7, #28]
}
 800df36:	bf00      	nop
 800df38:	e7fe      	b.n	800df38 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800df3a:	23bc      	movs	r3, #188	; 0xbc
 800df3c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800df3e:	693b      	ldr	r3, [r7, #16]
 800df40:	2bbc      	cmp	r3, #188	; 0xbc
 800df42:	d00a      	beq.n	800df5a <xTaskCreateStatic+0x66>
	__asm volatile
 800df44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df48:	f383 8811 	msr	BASEPRI, r3
 800df4c:	f3bf 8f6f 	isb	sy
 800df50:	f3bf 8f4f 	dsb	sy
 800df54:	61bb      	str	r3, [r7, #24]
}
 800df56:	bf00      	nop
 800df58:	e7fe      	b.n	800df58 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800df5a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800df5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df5e:	2b00      	cmp	r3, #0
 800df60:	d01e      	beq.n	800dfa0 <xTaskCreateStatic+0xac>
 800df62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df64:	2b00      	cmp	r3, #0
 800df66:	d01b      	beq.n	800dfa0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800df68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df6a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800df6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df6e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800df70:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800df72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df74:	2202      	movs	r2, #2
 800df76:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800df7a:	2300      	movs	r3, #0
 800df7c:	9303      	str	r3, [sp, #12]
 800df7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df80:	9302      	str	r3, [sp, #8]
 800df82:	f107 0314 	add.w	r3, r7, #20
 800df86:	9301      	str	r3, [sp, #4]
 800df88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df8a:	9300      	str	r3, [sp, #0]
 800df8c:	683b      	ldr	r3, [r7, #0]
 800df8e:	687a      	ldr	r2, [r7, #4]
 800df90:	68b9      	ldr	r1, [r7, #8]
 800df92:	68f8      	ldr	r0, [r7, #12]
 800df94:	f000 f850 	bl	800e038 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800df98:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800df9a:	f000 f8f3 	bl	800e184 <prvAddNewTaskToReadyList>
 800df9e:	e001      	b.n	800dfa4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800dfa0:	2300      	movs	r3, #0
 800dfa2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800dfa4:	697b      	ldr	r3, [r7, #20]
	}
 800dfa6:	4618      	mov	r0, r3
 800dfa8:	3728      	adds	r7, #40	; 0x28
 800dfaa:	46bd      	mov	sp, r7
 800dfac:	bd80      	pop	{r7, pc}

0800dfae <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800dfae:	b580      	push	{r7, lr}
 800dfb0:	b08c      	sub	sp, #48	; 0x30
 800dfb2:	af04      	add	r7, sp, #16
 800dfb4:	60f8      	str	r0, [r7, #12]
 800dfb6:	60b9      	str	r1, [r7, #8]
 800dfb8:	603b      	str	r3, [r7, #0]
 800dfba:	4613      	mov	r3, r2
 800dfbc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800dfbe:	88fb      	ldrh	r3, [r7, #6]
 800dfc0:	009b      	lsls	r3, r3, #2
 800dfc2:	4618      	mov	r0, r3
 800dfc4:	f001 fc10 	bl	800f7e8 <pvPortMalloc>
 800dfc8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800dfca:	697b      	ldr	r3, [r7, #20]
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	d00e      	beq.n	800dfee <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800dfd0:	20bc      	movs	r0, #188	; 0xbc
 800dfd2:	f001 fc09 	bl	800f7e8 <pvPortMalloc>
 800dfd6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800dfd8:	69fb      	ldr	r3, [r7, #28]
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d003      	beq.n	800dfe6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800dfde:	69fb      	ldr	r3, [r7, #28]
 800dfe0:	697a      	ldr	r2, [r7, #20]
 800dfe2:	631a      	str	r2, [r3, #48]	; 0x30
 800dfe4:	e005      	b.n	800dff2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800dfe6:	6978      	ldr	r0, [r7, #20]
 800dfe8:	f001 fcca 	bl	800f980 <vPortFree>
 800dfec:	e001      	b.n	800dff2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800dfee:	2300      	movs	r3, #0
 800dff0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800dff2:	69fb      	ldr	r3, [r7, #28]
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	d017      	beq.n	800e028 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800dff8:	69fb      	ldr	r3, [r7, #28]
 800dffa:	2200      	movs	r2, #0
 800dffc:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e000:	88fa      	ldrh	r2, [r7, #6]
 800e002:	2300      	movs	r3, #0
 800e004:	9303      	str	r3, [sp, #12]
 800e006:	69fb      	ldr	r3, [r7, #28]
 800e008:	9302      	str	r3, [sp, #8]
 800e00a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e00c:	9301      	str	r3, [sp, #4]
 800e00e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e010:	9300      	str	r3, [sp, #0]
 800e012:	683b      	ldr	r3, [r7, #0]
 800e014:	68b9      	ldr	r1, [r7, #8]
 800e016:	68f8      	ldr	r0, [r7, #12]
 800e018:	f000 f80e 	bl	800e038 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e01c:	69f8      	ldr	r0, [r7, #28]
 800e01e:	f000 f8b1 	bl	800e184 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800e022:	2301      	movs	r3, #1
 800e024:	61bb      	str	r3, [r7, #24]
 800e026:	e002      	b.n	800e02e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e028:	f04f 33ff 	mov.w	r3, #4294967295
 800e02c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800e02e:	69bb      	ldr	r3, [r7, #24]
	}
 800e030:	4618      	mov	r0, r3
 800e032:	3720      	adds	r7, #32
 800e034:	46bd      	mov	sp, r7
 800e036:	bd80      	pop	{r7, pc}

0800e038 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800e038:	b580      	push	{r7, lr}
 800e03a:	b088      	sub	sp, #32
 800e03c:	af00      	add	r7, sp, #0
 800e03e:	60f8      	str	r0, [r7, #12]
 800e040:	60b9      	str	r1, [r7, #8]
 800e042:	607a      	str	r2, [r7, #4]
 800e044:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800e046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e048:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	009b      	lsls	r3, r3, #2
 800e04e:	461a      	mov	r2, r3
 800e050:	21a5      	movs	r1, #165	; 0xa5
 800e052:	f003 fa21 	bl	8011498 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800e056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e058:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800e060:	3b01      	subs	r3, #1
 800e062:	009b      	lsls	r3, r3, #2
 800e064:	4413      	add	r3, r2
 800e066:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800e068:	69bb      	ldr	r3, [r7, #24]
 800e06a:	f023 0307 	bic.w	r3, r3, #7
 800e06e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800e070:	69bb      	ldr	r3, [r7, #24]
 800e072:	f003 0307 	and.w	r3, r3, #7
 800e076:	2b00      	cmp	r3, #0
 800e078:	d00a      	beq.n	800e090 <prvInitialiseNewTask+0x58>
	__asm volatile
 800e07a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e07e:	f383 8811 	msr	BASEPRI, r3
 800e082:	f3bf 8f6f 	isb	sy
 800e086:	f3bf 8f4f 	dsb	sy
 800e08a:	617b      	str	r3, [r7, #20]
}
 800e08c:	bf00      	nop
 800e08e:	e7fe      	b.n	800e08e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800e090:	68bb      	ldr	r3, [r7, #8]
 800e092:	2b00      	cmp	r3, #0
 800e094:	d01f      	beq.n	800e0d6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e096:	2300      	movs	r3, #0
 800e098:	61fb      	str	r3, [r7, #28]
 800e09a:	e012      	b.n	800e0c2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800e09c:	68ba      	ldr	r2, [r7, #8]
 800e09e:	69fb      	ldr	r3, [r7, #28]
 800e0a0:	4413      	add	r3, r2
 800e0a2:	7819      	ldrb	r1, [r3, #0]
 800e0a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e0a6:	69fb      	ldr	r3, [r7, #28]
 800e0a8:	4413      	add	r3, r2
 800e0aa:	3334      	adds	r3, #52	; 0x34
 800e0ac:	460a      	mov	r2, r1
 800e0ae:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800e0b0:	68ba      	ldr	r2, [r7, #8]
 800e0b2:	69fb      	ldr	r3, [r7, #28]
 800e0b4:	4413      	add	r3, r2
 800e0b6:	781b      	ldrb	r3, [r3, #0]
 800e0b8:	2b00      	cmp	r3, #0
 800e0ba:	d006      	beq.n	800e0ca <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e0bc:	69fb      	ldr	r3, [r7, #28]
 800e0be:	3301      	adds	r3, #1
 800e0c0:	61fb      	str	r3, [r7, #28]
 800e0c2:	69fb      	ldr	r3, [r7, #28]
 800e0c4:	2b0f      	cmp	r3, #15
 800e0c6:	d9e9      	bls.n	800e09c <prvInitialiseNewTask+0x64>
 800e0c8:	e000      	b.n	800e0cc <prvInitialiseNewTask+0x94>
			{
				break;
 800e0ca:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e0cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0ce:	2200      	movs	r2, #0
 800e0d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800e0d4:	e003      	b.n	800e0de <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800e0d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0d8:	2200      	movs	r2, #0
 800e0da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e0de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0e0:	2b37      	cmp	r3, #55	; 0x37
 800e0e2:	d901      	bls.n	800e0e8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800e0e4:	2337      	movs	r3, #55	; 0x37
 800e0e6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800e0e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e0ec:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800e0ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e0f2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800e0f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0f6:	2200      	movs	r2, #0
 800e0f8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e0fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0fc:	3304      	adds	r3, #4
 800e0fe:	4618      	mov	r0, r3
 800e100:	f7ff f8b4 	bl	800d26c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800e104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e106:	3318      	adds	r3, #24
 800e108:	4618      	mov	r0, r3
 800e10a:	f7ff f8af 	bl	800d26c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800e10e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e110:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e112:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e116:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e11a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e11c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800e11e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e120:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e122:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800e124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e126:	2200      	movs	r2, #0
 800e128:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e12c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e12e:	2200      	movs	r2, #0
 800e130:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800e134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e136:	3354      	adds	r3, #84	; 0x54
 800e138:	2260      	movs	r2, #96	; 0x60
 800e13a:	2100      	movs	r1, #0
 800e13c:	4618      	mov	r0, r3
 800e13e:	f003 f9ab 	bl	8011498 <memset>
 800e142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e144:	4a0c      	ldr	r2, [pc, #48]	; (800e178 <prvInitialiseNewTask+0x140>)
 800e146:	659a      	str	r2, [r3, #88]	; 0x58
 800e148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e14a:	4a0c      	ldr	r2, [pc, #48]	; (800e17c <prvInitialiseNewTask+0x144>)
 800e14c:	65da      	str	r2, [r3, #92]	; 0x5c
 800e14e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e150:	4a0b      	ldr	r2, [pc, #44]	; (800e180 <prvInitialiseNewTask+0x148>)
 800e152:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e154:	683a      	ldr	r2, [r7, #0]
 800e156:	68f9      	ldr	r1, [r7, #12]
 800e158:	69b8      	ldr	r0, [r7, #24]
 800e15a:	f001 f8f9 	bl	800f350 <pxPortInitialiseStack>
 800e15e:	4602      	mov	r2, r0
 800e160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e162:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800e164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e166:	2b00      	cmp	r3, #0
 800e168:	d002      	beq.n	800e170 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e16a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e16c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e16e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e170:	bf00      	nop
 800e172:	3720      	adds	r7, #32
 800e174:	46bd      	mov	sp, r7
 800e176:	bd80      	pop	{r7, pc}
 800e178:	080151f0 	.word	0x080151f0
 800e17c:	08015210 	.word	0x08015210
 800e180:	080151d0 	.word	0x080151d0

0800e184 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800e184:	b580      	push	{r7, lr}
 800e186:	b082      	sub	sp, #8
 800e188:	af00      	add	r7, sp, #0
 800e18a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800e18c:	f001 fa0a 	bl	800f5a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800e190:	4b26      	ldr	r3, [pc, #152]	; (800e22c <prvAddNewTaskToReadyList+0xa8>)
 800e192:	681b      	ldr	r3, [r3, #0]
 800e194:	3301      	adds	r3, #1
 800e196:	4a25      	ldr	r2, [pc, #148]	; (800e22c <prvAddNewTaskToReadyList+0xa8>)
 800e198:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800e19a:	4b25      	ldr	r3, [pc, #148]	; (800e230 <prvAddNewTaskToReadyList+0xac>)
 800e19c:	681b      	ldr	r3, [r3, #0]
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	d109      	bne.n	800e1b6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800e1a2:	4a23      	ldr	r2, [pc, #140]	; (800e230 <prvAddNewTaskToReadyList+0xac>)
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e1a8:	4b20      	ldr	r3, [pc, #128]	; (800e22c <prvAddNewTaskToReadyList+0xa8>)
 800e1aa:	681b      	ldr	r3, [r3, #0]
 800e1ac:	2b01      	cmp	r3, #1
 800e1ae:	d110      	bne.n	800e1d2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800e1b0:	f000 fbde 	bl	800e970 <prvInitialiseTaskLists>
 800e1b4:	e00d      	b.n	800e1d2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800e1b6:	4b1f      	ldr	r3, [pc, #124]	; (800e234 <prvAddNewTaskToReadyList+0xb0>)
 800e1b8:	681b      	ldr	r3, [r3, #0]
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d109      	bne.n	800e1d2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e1be:	4b1c      	ldr	r3, [pc, #112]	; (800e230 <prvAddNewTaskToReadyList+0xac>)
 800e1c0:	681b      	ldr	r3, [r3, #0]
 800e1c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1c8:	429a      	cmp	r2, r3
 800e1ca:	d802      	bhi.n	800e1d2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800e1cc:	4a18      	ldr	r2, [pc, #96]	; (800e230 <prvAddNewTaskToReadyList+0xac>)
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800e1d2:	4b19      	ldr	r3, [pc, #100]	; (800e238 <prvAddNewTaskToReadyList+0xb4>)
 800e1d4:	681b      	ldr	r3, [r3, #0]
 800e1d6:	3301      	adds	r3, #1
 800e1d8:	4a17      	ldr	r2, [pc, #92]	; (800e238 <prvAddNewTaskToReadyList+0xb4>)
 800e1da:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800e1dc:	4b16      	ldr	r3, [pc, #88]	; (800e238 <prvAddNewTaskToReadyList+0xb4>)
 800e1de:	681a      	ldr	r2, [r3, #0]
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e1e8:	4b14      	ldr	r3, [pc, #80]	; (800e23c <prvAddNewTaskToReadyList+0xb8>)
 800e1ea:	681b      	ldr	r3, [r3, #0]
 800e1ec:	429a      	cmp	r2, r3
 800e1ee:	d903      	bls.n	800e1f8 <prvAddNewTaskToReadyList+0x74>
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1f4:	4a11      	ldr	r2, [pc, #68]	; (800e23c <prvAddNewTaskToReadyList+0xb8>)
 800e1f6:	6013      	str	r3, [r2, #0]
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e1fc:	4613      	mov	r3, r2
 800e1fe:	009b      	lsls	r3, r3, #2
 800e200:	4413      	add	r3, r2
 800e202:	009b      	lsls	r3, r3, #2
 800e204:	4a0e      	ldr	r2, [pc, #56]	; (800e240 <prvAddNewTaskToReadyList+0xbc>)
 800e206:	441a      	add	r2, r3
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	3304      	adds	r3, #4
 800e20c:	4619      	mov	r1, r3
 800e20e:	4610      	mov	r0, r2
 800e210:	f7ff f839 	bl	800d286 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800e214:	f001 f9f6 	bl	800f604 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800e218:	4b06      	ldr	r3, [pc, #24]	; (800e234 <prvAddNewTaskToReadyList+0xb0>)
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	d001      	beq.n	800e224 <prvAddNewTaskToReadyList+0xa0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e220:	4b03      	ldr	r3, [pc, #12]	; (800e230 <prvAddNewTaskToReadyList+0xac>)
 800e222:	681b      	ldr	r3, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e224:	bf00      	nop
 800e226:	3708      	adds	r7, #8
 800e228:	46bd      	mov	sp, r7
 800e22a:	bd80      	pop	{r7, pc}
 800e22c:	20001f14 	.word	0x20001f14
 800e230:	20001a40 	.word	0x20001a40
 800e234:	20001f20 	.word	0x20001f20
 800e238:	20001f30 	.word	0x20001f30
 800e23c:	20001f1c 	.word	0x20001f1c
 800e240:	20001a44 	.word	0x20001a44

0800e244 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800e244:	b580      	push	{r7, lr}
 800e246:	b084      	sub	sp, #16
 800e248:	af00      	add	r7, sp, #0
 800e24a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800e24c:	2300      	movs	r3, #0
 800e24e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	2b00      	cmp	r3, #0
 800e254:	d017      	beq.n	800e286 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800e256:	4b13      	ldr	r3, [pc, #76]	; (800e2a4 <vTaskDelay+0x60>)
 800e258:	681b      	ldr	r3, [r3, #0]
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	d00a      	beq.n	800e274 <vTaskDelay+0x30>
	__asm volatile
 800e25e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e262:	f383 8811 	msr	BASEPRI, r3
 800e266:	f3bf 8f6f 	isb	sy
 800e26a:	f3bf 8f4f 	dsb	sy
 800e26e:	60bb      	str	r3, [r7, #8]
}
 800e270:	bf00      	nop
 800e272:	e7fe      	b.n	800e272 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800e274:	f000 f88a 	bl	800e38c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800e278:	2100      	movs	r1, #0
 800e27a:	6878      	ldr	r0, [r7, #4]
 800e27c:	f000 fcc6 	bl	800ec0c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800e280:	f000 f892 	bl	800e3a8 <xTaskResumeAll>
 800e284:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e286:	68fb      	ldr	r3, [r7, #12]
 800e288:	2b00      	cmp	r3, #0
 800e28a:	d107      	bne.n	800e29c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800e28c:	4b06      	ldr	r3, [pc, #24]	; (800e2a8 <vTaskDelay+0x64>)
 800e28e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e292:	601a      	str	r2, [r3, #0]
 800e294:	f3bf 8f4f 	dsb	sy
 800e298:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e29c:	bf00      	nop
 800e29e:	3710      	adds	r7, #16
 800e2a0:	46bd      	mov	sp, r7
 800e2a2:	bd80      	pop	{r7, pc}
 800e2a4:	20001f3c 	.word	0x20001f3c
 800e2a8:	e000ed04 	.word	0xe000ed04

0800e2ac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e2ac:	b580      	push	{r7, lr}
 800e2ae:	b08a      	sub	sp, #40	; 0x28
 800e2b0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e2b2:	2300      	movs	r3, #0
 800e2b4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e2b6:	2300      	movs	r3, #0
 800e2b8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e2ba:	463a      	mov	r2, r7
 800e2bc:	1d39      	adds	r1, r7, #4
 800e2be:	f107 0308 	add.w	r3, r7, #8
 800e2c2:	4618      	mov	r0, r3
 800e2c4:	f7fe ff7e 	bl	800d1c4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e2c8:	6839      	ldr	r1, [r7, #0]
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	68ba      	ldr	r2, [r7, #8]
 800e2ce:	9202      	str	r2, [sp, #8]
 800e2d0:	9301      	str	r3, [sp, #4]
 800e2d2:	2300      	movs	r3, #0
 800e2d4:	9300      	str	r3, [sp, #0]
 800e2d6:	2300      	movs	r3, #0
 800e2d8:	460a      	mov	r2, r1
 800e2da:	4924      	ldr	r1, [pc, #144]	; (800e36c <vTaskStartScheduler+0xc0>)
 800e2dc:	4824      	ldr	r0, [pc, #144]	; (800e370 <vTaskStartScheduler+0xc4>)
 800e2de:	f7ff fe09 	bl	800def4 <xTaskCreateStatic>
 800e2e2:	4603      	mov	r3, r0
 800e2e4:	4a23      	ldr	r2, [pc, #140]	; (800e374 <vTaskStartScheduler+0xc8>)
 800e2e6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800e2e8:	4b22      	ldr	r3, [pc, #136]	; (800e374 <vTaskStartScheduler+0xc8>)
 800e2ea:	681b      	ldr	r3, [r3, #0]
 800e2ec:	2b00      	cmp	r3, #0
 800e2ee:	d002      	beq.n	800e2f6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800e2f0:	2301      	movs	r3, #1
 800e2f2:	617b      	str	r3, [r7, #20]
 800e2f4:	e001      	b.n	800e2fa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800e2f6:	2300      	movs	r3, #0
 800e2f8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800e2fa:	697b      	ldr	r3, [r7, #20]
 800e2fc:	2b01      	cmp	r3, #1
 800e2fe:	d102      	bne.n	800e306 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800e300:	f000 fcd8 	bl	800ecb4 <xTimerCreateTimerTask>
 800e304:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e306:	697b      	ldr	r3, [r7, #20]
 800e308:	2b01      	cmp	r3, #1
 800e30a:	d11b      	bne.n	800e344 <vTaskStartScheduler+0x98>
	__asm volatile
 800e30c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e310:	f383 8811 	msr	BASEPRI, r3
 800e314:	f3bf 8f6f 	isb	sy
 800e318:	f3bf 8f4f 	dsb	sy
 800e31c:	613b      	str	r3, [r7, #16]
}
 800e31e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e320:	4b15      	ldr	r3, [pc, #84]	; (800e378 <vTaskStartScheduler+0xcc>)
 800e322:	681b      	ldr	r3, [r3, #0]
 800e324:	3354      	adds	r3, #84	; 0x54
 800e326:	4a15      	ldr	r2, [pc, #84]	; (800e37c <vTaskStartScheduler+0xd0>)
 800e328:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e32a:	4b15      	ldr	r3, [pc, #84]	; (800e380 <vTaskStartScheduler+0xd4>)
 800e32c:	f04f 32ff 	mov.w	r2, #4294967295
 800e330:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e332:	4b14      	ldr	r3, [pc, #80]	; (800e384 <vTaskStartScheduler+0xd8>)
 800e334:	2201      	movs	r2, #1
 800e336:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e338:	4b13      	ldr	r3, [pc, #76]	; (800e388 <vTaskStartScheduler+0xdc>)
 800e33a:	2200      	movs	r2, #0
 800e33c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800e33e:	f001 f88f 	bl	800f460 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800e342:	e00e      	b.n	800e362 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e344:	697b      	ldr	r3, [r7, #20]
 800e346:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e34a:	d10a      	bne.n	800e362 <vTaskStartScheduler+0xb6>
	__asm volatile
 800e34c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e350:	f383 8811 	msr	BASEPRI, r3
 800e354:	f3bf 8f6f 	isb	sy
 800e358:	f3bf 8f4f 	dsb	sy
 800e35c:	60fb      	str	r3, [r7, #12]
}
 800e35e:	bf00      	nop
 800e360:	e7fe      	b.n	800e360 <vTaskStartScheduler+0xb4>
}
 800e362:	bf00      	nop
 800e364:	3718      	adds	r7, #24
 800e366:	46bd      	mov	sp, r7
 800e368:	bd80      	pop	{r7, pc}
 800e36a:	bf00      	nop
 800e36c:	080145e4 	.word	0x080145e4
 800e370:	0800e94d 	.word	0x0800e94d
 800e374:	20001f38 	.word	0x20001f38
 800e378:	20001a40 	.word	0x20001a40
 800e37c:	20000078 	.word	0x20000078
 800e380:	20001f34 	.word	0x20001f34
 800e384:	20001f20 	.word	0x20001f20
 800e388:	20001f18 	.word	0x20001f18

0800e38c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e38c:	b480      	push	{r7}
 800e38e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800e390:	4b04      	ldr	r3, [pc, #16]	; (800e3a4 <vTaskSuspendAll+0x18>)
 800e392:	681b      	ldr	r3, [r3, #0]
 800e394:	3301      	adds	r3, #1
 800e396:	4a03      	ldr	r2, [pc, #12]	; (800e3a4 <vTaskSuspendAll+0x18>)
 800e398:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800e39a:	bf00      	nop
 800e39c:	46bd      	mov	sp, r7
 800e39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3a2:	4770      	bx	lr
 800e3a4:	20001f3c 	.word	0x20001f3c

0800e3a8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e3a8:	b580      	push	{r7, lr}
 800e3aa:	b084      	sub	sp, #16
 800e3ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e3ae:	2300      	movs	r3, #0
 800e3b0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e3b2:	2300      	movs	r3, #0
 800e3b4:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e3b6:	4b3c      	ldr	r3, [pc, #240]	; (800e4a8 <xTaskResumeAll+0x100>)
 800e3b8:	681b      	ldr	r3, [r3, #0]
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	d10a      	bne.n	800e3d4 <xTaskResumeAll+0x2c>
	__asm volatile
 800e3be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3c2:	f383 8811 	msr	BASEPRI, r3
 800e3c6:	f3bf 8f6f 	isb	sy
 800e3ca:	f3bf 8f4f 	dsb	sy
 800e3ce:	603b      	str	r3, [r7, #0]
}
 800e3d0:	bf00      	nop
 800e3d2:	e7fe      	b.n	800e3d2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e3d4:	f001 f8e6 	bl	800f5a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e3d8:	4b33      	ldr	r3, [pc, #204]	; (800e4a8 <xTaskResumeAll+0x100>)
 800e3da:	681b      	ldr	r3, [r3, #0]
 800e3dc:	3b01      	subs	r3, #1
 800e3de:	4a32      	ldr	r2, [pc, #200]	; (800e4a8 <xTaskResumeAll+0x100>)
 800e3e0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e3e2:	4b31      	ldr	r3, [pc, #196]	; (800e4a8 <xTaskResumeAll+0x100>)
 800e3e4:	681b      	ldr	r3, [r3, #0]
 800e3e6:	2b00      	cmp	r3, #0
 800e3e8:	d156      	bne.n	800e498 <xTaskResumeAll+0xf0>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e3ea:	4b30      	ldr	r3, [pc, #192]	; (800e4ac <xTaskResumeAll+0x104>)
 800e3ec:	681b      	ldr	r3, [r3, #0]
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d052      	beq.n	800e498 <xTaskResumeAll+0xf0>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e3f2:	e02f      	b.n	800e454 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e3f4:	4b2e      	ldr	r3, [pc, #184]	; (800e4b0 <xTaskResumeAll+0x108>)
 800e3f6:	68db      	ldr	r3, [r3, #12]
 800e3f8:	68db      	ldr	r3, [r3, #12]
 800e3fa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e3fc:	68fb      	ldr	r3, [r7, #12]
 800e3fe:	3318      	adds	r3, #24
 800e400:	4618      	mov	r0, r3
 800e402:	f7fe ff9d 	bl	800d340 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e406:	68fb      	ldr	r3, [r7, #12]
 800e408:	3304      	adds	r3, #4
 800e40a:	4618      	mov	r0, r3
 800e40c:	f7fe ff98 	bl	800d340 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e410:	68fb      	ldr	r3, [r7, #12]
 800e412:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e414:	4b27      	ldr	r3, [pc, #156]	; (800e4b4 <xTaskResumeAll+0x10c>)
 800e416:	681b      	ldr	r3, [r3, #0]
 800e418:	429a      	cmp	r2, r3
 800e41a:	d903      	bls.n	800e424 <xTaskResumeAll+0x7c>
 800e41c:	68fb      	ldr	r3, [r7, #12]
 800e41e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e420:	4a24      	ldr	r2, [pc, #144]	; (800e4b4 <xTaskResumeAll+0x10c>)
 800e422:	6013      	str	r3, [r2, #0]
 800e424:	68fb      	ldr	r3, [r7, #12]
 800e426:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e428:	4613      	mov	r3, r2
 800e42a:	009b      	lsls	r3, r3, #2
 800e42c:	4413      	add	r3, r2
 800e42e:	009b      	lsls	r3, r3, #2
 800e430:	4a21      	ldr	r2, [pc, #132]	; (800e4b8 <xTaskResumeAll+0x110>)
 800e432:	441a      	add	r2, r3
 800e434:	68fb      	ldr	r3, [r7, #12]
 800e436:	3304      	adds	r3, #4
 800e438:	4619      	mov	r1, r3
 800e43a:	4610      	mov	r0, r2
 800e43c:	f7fe ff23 	bl	800d286 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e440:	68fb      	ldr	r3, [r7, #12]
 800e442:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e444:	4b1d      	ldr	r3, [pc, #116]	; (800e4bc <xTaskResumeAll+0x114>)
 800e446:	681b      	ldr	r3, [r3, #0]
 800e448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e44a:	429a      	cmp	r2, r3
 800e44c:	d302      	bcc.n	800e454 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800e44e:	4b1c      	ldr	r3, [pc, #112]	; (800e4c0 <xTaskResumeAll+0x118>)
 800e450:	2201      	movs	r2, #1
 800e452:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e454:	4b16      	ldr	r3, [pc, #88]	; (800e4b0 <xTaskResumeAll+0x108>)
 800e456:	681b      	ldr	r3, [r3, #0]
 800e458:	2b00      	cmp	r3, #0
 800e45a:	d1cb      	bne.n	800e3f4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e45c:	68fb      	ldr	r3, [r7, #12]
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d001      	beq.n	800e466 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e462:	f000 fb27 	bl	800eab4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800e466:	4b17      	ldr	r3, [pc, #92]	; (800e4c4 <xTaskResumeAll+0x11c>)
 800e468:	681b      	ldr	r3, [r3, #0]
 800e46a:	60bb      	str	r3, [r7, #8]

					if( xPendedCounts > ( TickType_t ) 0U )
 800e46c:	68bb      	ldr	r3, [r7, #8]
 800e46e:	2b00      	cmp	r3, #0
 800e470:	d010      	beq.n	800e494 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e472:	f000 f839 	bl	800e4e8 <xTaskIncrementTick>
 800e476:	4603      	mov	r3, r0
 800e478:	2b00      	cmp	r3, #0
 800e47a:	d002      	beq.n	800e482 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800e47c:	4b10      	ldr	r3, [pc, #64]	; (800e4c0 <xTaskResumeAll+0x118>)
 800e47e:	2201      	movs	r2, #1
 800e480:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800e482:	68bb      	ldr	r3, [r7, #8]
 800e484:	3b01      	subs	r3, #1
 800e486:	60bb      	str	r3, [r7, #8]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800e488:	68bb      	ldr	r3, [r7, #8]
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	d1f1      	bne.n	800e472 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800e48e:	4b0d      	ldr	r3, [pc, #52]	; (800e4c4 <xTaskResumeAll+0x11c>)
 800e490:	2200      	movs	r2, #0
 800e492:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e494:	4b0a      	ldr	r3, [pc, #40]	; (800e4c0 <xTaskResumeAll+0x118>)
 800e496:	681b      	ldr	r3, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e498:	f001 f8b4 	bl	800f604 <vPortExitCritical>

	return xAlreadyYielded;
 800e49c:	687b      	ldr	r3, [r7, #4]
}
 800e49e:	4618      	mov	r0, r3
 800e4a0:	3710      	adds	r7, #16
 800e4a2:	46bd      	mov	sp, r7
 800e4a4:	bd80      	pop	{r7, pc}
 800e4a6:	bf00      	nop
 800e4a8:	20001f3c 	.word	0x20001f3c
 800e4ac:	20001f14 	.word	0x20001f14
 800e4b0:	20001ed4 	.word	0x20001ed4
 800e4b4:	20001f1c 	.word	0x20001f1c
 800e4b8:	20001a44 	.word	0x20001a44
 800e4bc:	20001a40 	.word	0x20001a40
 800e4c0:	20001f28 	.word	0x20001f28
 800e4c4:	20001f24 	.word	0x20001f24

0800e4c8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800e4c8:	b480      	push	{r7}
 800e4ca:	b083      	sub	sp, #12
 800e4cc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800e4ce:	4b05      	ldr	r3, [pc, #20]	; (800e4e4 <xTaskGetTickCount+0x1c>)
 800e4d0:	681b      	ldr	r3, [r3, #0]
 800e4d2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800e4d4:	687b      	ldr	r3, [r7, #4]
}
 800e4d6:	4618      	mov	r0, r3
 800e4d8:	370c      	adds	r7, #12
 800e4da:	46bd      	mov	sp, r7
 800e4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4e0:	4770      	bx	lr
 800e4e2:	bf00      	nop
 800e4e4:	20001f18 	.word	0x20001f18

0800e4e8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e4e8:	b580      	push	{r7, lr}
 800e4ea:	b086      	sub	sp, #24
 800e4ec:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e4ee:	2300      	movs	r3, #0
 800e4f0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e4f2:	4b3f      	ldr	r3, [pc, #252]	; (800e5f0 <xTaskIncrementTick+0x108>)
 800e4f4:	681b      	ldr	r3, [r3, #0]
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	d170      	bne.n	800e5dc <xTaskIncrementTick+0xf4>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e4fa:	4b3e      	ldr	r3, [pc, #248]	; (800e5f4 <xTaskIncrementTick+0x10c>)
 800e4fc:	681b      	ldr	r3, [r3, #0]
 800e4fe:	3301      	adds	r3, #1
 800e500:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e502:	4a3c      	ldr	r2, [pc, #240]	; (800e5f4 <xTaskIncrementTick+0x10c>)
 800e504:	693b      	ldr	r3, [r7, #16]
 800e506:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e508:	693b      	ldr	r3, [r7, #16]
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	d120      	bne.n	800e550 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800e50e:	4b3a      	ldr	r3, [pc, #232]	; (800e5f8 <xTaskIncrementTick+0x110>)
 800e510:	681b      	ldr	r3, [r3, #0]
 800e512:	681b      	ldr	r3, [r3, #0]
 800e514:	2b00      	cmp	r3, #0
 800e516:	d00a      	beq.n	800e52e <xTaskIncrementTick+0x46>
	__asm volatile
 800e518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e51c:	f383 8811 	msr	BASEPRI, r3
 800e520:	f3bf 8f6f 	isb	sy
 800e524:	f3bf 8f4f 	dsb	sy
 800e528:	603b      	str	r3, [r7, #0]
}
 800e52a:	bf00      	nop
 800e52c:	e7fe      	b.n	800e52c <xTaskIncrementTick+0x44>
 800e52e:	4b32      	ldr	r3, [pc, #200]	; (800e5f8 <xTaskIncrementTick+0x110>)
 800e530:	681b      	ldr	r3, [r3, #0]
 800e532:	60fb      	str	r3, [r7, #12]
 800e534:	4b31      	ldr	r3, [pc, #196]	; (800e5fc <xTaskIncrementTick+0x114>)
 800e536:	681b      	ldr	r3, [r3, #0]
 800e538:	4a2f      	ldr	r2, [pc, #188]	; (800e5f8 <xTaskIncrementTick+0x110>)
 800e53a:	6013      	str	r3, [r2, #0]
 800e53c:	4a2f      	ldr	r2, [pc, #188]	; (800e5fc <xTaskIncrementTick+0x114>)
 800e53e:	68fb      	ldr	r3, [r7, #12]
 800e540:	6013      	str	r3, [r2, #0]
 800e542:	4b2f      	ldr	r3, [pc, #188]	; (800e600 <xTaskIncrementTick+0x118>)
 800e544:	681b      	ldr	r3, [r3, #0]
 800e546:	3301      	adds	r3, #1
 800e548:	4a2d      	ldr	r2, [pc, #180]	; (800e600 <xTaskIncrementTick+0x118>)
 800e54a:	6013      	str	r3, [r2, #0]
 800e54c:	f000 fab2 	bl	800eab4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e550:	4b2c      	ldr	r3, [pc, #176]	; (800e604 <xTaskIncrementTick+0x11c>)
 800e552:	681b      	ldr	r3, [r3, #0]
 800e554:	693a      	ldr	r2, [r7, #16]
 800e556:	429a      	cmp	r2, r3
 800e558:	d345      	bcc.n	800e5e6 <xTaskIncrementTick+0xfe>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e55a:	4b27      	ldr	r3, [pc, #156]	; (800e5f8 <xTaskIncrementTick+0x110>)
 800e55c:	681b      	ldr	r3, [r3, #0]
 800e55e:	681b      	ldr	r3, [r3, #0]
 800e560:	2b00      	cmp	r3, #0
 800e562:	d104      	bne.n	800e56e <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e564:	4b27      	ldr	r3, [pc, #156]	; (800e604 <xTaskIncrementTick+0x11c>)
 800e566:	f04f 32ff 	mov.w	r2, #4294967295
 800e56a:	601a      	str	r2, [r3, #0]
					break;
 800e56c:	e03b      	b.n	800e5e6 <xTaskIncrementTick+0xfe>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e56e:	4b22      	ldr	r3, [pc, #136]	; (800e5f8 <xTaskIncrementTick+0x110>)
 800e570:	681b      	ldr	r3, [r3, #0]
 800e572:	68db      	ldr	r3, [r3, #12]
 800e574:	68db      	ldr	r3, [r3, #12]
 800e576:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e578:	68bb      	ldr	r3, [r7, #8]
 800e57a:	685b      	ldr	r3, [r3, #4]
 800e57c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e57e:	693a      	ldr	r2, [r7, #16]
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	429a      	cmp	r2, r3
 800e584:	d203      	bcs.n	800e58e <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e586:	4a1f      	ldr	r2, [pc, #124]	; (800e604 <xTaskIncrementTick+0x11c>)
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e58c:	e02b      	b.n	800e5e6 <xTaskIncrementTick+0xfe>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e58e:	68bb      	ldr	r3, [r7, #8]
 800e590:	3304      	adds	r3, #4
 800e592:	4618      	mov	r0, r3
 800e594:	f7fe fed4 	bl	800d340 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e598:	68bb      	ldr	r3, [r7, #8]
 800e59a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	d004      	beq.n	800e5aa <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e5a0:	68bb      	ldr	r3, [r7, #8]
 800e5a2:	3318      	adds	r3, #24
 800e5a4:	4618      	mov	r0, r3
 800e5a6:	f7fe fecb 	bl	800d340 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e5aa:	68bb      	ldr	r3, [r7, #8]
 800e5ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e5ae:	4b16      	ldr	r3, [pc, #88]	; (800e608 <xTaskIncrementTick+0x120>)
 800e5b0:	681b      	ldr	r3, [r3, #0]
 800e5b2:	429a      	cmp	r2, r3
 800e5b4:	d903      	bls.n	800e5be <xTaskIncrementTick+0xd6>
 800e5b6:	68bb      	ldr	r3, [r7, #8]
 800e5b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5ba:	4a13      	ldr	r2, [pc, #76]	; (800e608 <xTaskIncrementTick+0x120>)
 800e5bc:	6013      	str	r3, [r2, #0]
 800e5be:	68bb      	ldr	r3, [r7, #8]
 800e5c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e5c2:	4613      	mov	r3, r2
 800e5c4:	009b      	lsls	r3, r3, #2
 800e5c6:	4413      	add	r3, r2
 800e5c8:	009b      	lsls	r3, r3, #2
 800e5ca:	4a10      	ldr	r2, [pc, #64]	; (800e60c <xTaskIncrementTick+0x124>)
 800e5cc:	441a      	add	r2, r3
 800e5ce:	68bb      	ldr	r3, [r7, #8]
 800e5d0:	3304      	adds	r3, #4
 800e5d2:	4619      	mov	r1, r3
 800e5d4:	4610      	mov	r0, r2
 800e5d6:	f7fe fe56 	bl	800d286 <vListInsertEnd>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e5da:	e7be      	b.n	800e55a <xTaskIncrementTick+0x72>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800e5dc:	4b0c      	ldr	r3, [pc, #48]	; (800e610 <xTaskIncrementTick+0x128>)
 800e5de:	681b      	ldr	r3, [r3, #0]
 800e5e0:	3301      	adds	r3, #1
 800e5e2:	4a0b      	ldr	r2, [pc, #44]	; (800e610 <xTaskIncrementTick+0x128>)
 800e5e4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800e5e6:	697b      	ldr	r3, [r7, #20]
}
 800e5e8:	4618      	mov	r0, r3
 800e5ea:	3718      	adds	r7, #24
 800e5ec:	46bd      	mov	sp, r7
 800e5ee:	bd80      	pop	{r7, pc}
 800e5f0:	20001f3c 	.word	0x20001f3c
 800e5f4:	20001f18 	.word	0x20001f18
 800e5f8:	20001ecc 	.word	0x20001ecc
 800e5fc:	20001ed0 	.word	0x20001ed0
 800e600:	20001f2c 	.word	0x20001f2c
 800e604:	20001f34 	.word	0x20001f34
 800e608:	20001f1c 	.word	0x20001f1c
 800e60c:	20001a44 	.word	0x20001a44
 800e610:	20001f24 	.word	0x20001f24

0800e614 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e614:	b480      	push	{r7}
 800e616:	b085      	sub	sp, #20
 800e618:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e61a:	4b2a      	ldr	r3, [pc, #168]	; (800e6c4 <vTaskSwitchContext+0xb0>)
 800e61c:	681b      	ldr	r3, [r3, #0]
 800e61e:	2b00      	cmp	r3, #0
 800e620:	d003      	beq.n	800e62a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e622:	4b29      	ldr	r3, [pc, #164]	; (800e6c8 <vTaskSwitchContext+0xb4>)
 800e624:	2201      	movs	r2, #1
 800e626:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e628:	e046      	b.n	800e6b8 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800e62a:	4b27      	ldr	r3, [pc, #156]	; (800e6c8 <vTaskSwitchContext+0xb4>)
 800e62c:	2200      	movs	r2, #0
 800e62e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e630:	4b26      	ldr	r3, [pc, #152]	; (800e6cc <vTaskSwitchContext+0xb8>)
 800e632:	681b      	ldr	r3, [r3, #0]
 800e634:	60fb      	str	r3, [r7, #12]
 800e636:	e010      	b.n	800e65a <vTaskSwitchContext+0x46>
 800e638:	68fb      	ldr	r3, [r7, #12]
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	d10a      	bne.n	800e654 <vTaskSwitchContext+0x40>
	__asm volatile
 800e63e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e642:	f383 8811 	msr	BASEPRI, r3
 800e646:	f3bf 8f6f 	isb	sy
 800e64a:	f3bf 8f4f 	dsb	sy
 800e64e:	607b      	str	r3, [r7, #4]
}
 800e650:	bf00      	nop
 800e652:	e7fe      	b.n	800e652 <vTaskSwitchContext+0x3e>
 800e654:	68fb      	ldr	r3, [r7, #12]
 800e656:	3b01      	subs	r3, #1
 800e658:	60fb      	str	r3, [r7, #12]
 800e65a:	491d      	ldr	r1, [pc, #116]	; (800e6d0 <vTaskSwitchContext+0xbc>)
 800e65c:	68fa      	ldr	r2, [r7, #12]
 800e65e:	4613      	mov	r3, r2
 800e660:	009b      	lsls	r3, r3, #2
 800e662:	4413      	add	r3, r2
 800e664:	009b      	lsls	r3, r3, #2
 800e666:	440b      	add	r3, r1
 800e668:	681b      	ldr	r3, [r3, #0]
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	d0e4      	beq.n	800e638 <vTaskSwitchContext+0x24>
 800e66e:	68fa      	ldr	r2, [r7, #12]
 800e670:	4613      	mov	r3, r2
 800e672:	009b      	lsls	r3, r3, #2
 800e674:	4413      	add	r3, r2
 800e676:	009b      	lsls	r3, r3, #2
 800e678:	4a15      	ldr	r2, [pc, #84]	; (800e6d0 <vTaskSwitchContext+0xbc>)
 800e67a:	4413      	add	r3, r2
 800e67c:	60bb      	str	r3, [r7, #8]
 800e67e:	68bb      	ldr	r3, [r7, #8]
 800e680:	685b      	ldr	r3, [r3, #4]
 800e682:	685a      	ldr	r2, [r3, #4]
 800e684:	68bb      	ldr	r3, [r7, #8]
 800e686:	605a      	str	r2, [r3, #4]
 800e688:	68bb      	ldr	r3, [r7, #8]
 800e68a:	685a      	ldr	r2, [r3, #4]
 800e68c:	68bb      	ldr	r3, [r7, #8]
 800e68e:	3308      	adds	r3, #8
 800e690:	429a      	cmp	r2, r3
 800e692:	d104      	bne.n	800e69e <vTaskSwitchContext+0x8a>
 800e694:	68bb      	ldr	r3, [r7, #8]
 800e696:	685b      	ldr	r3, [r3, #4]
 800e698:	685a      	ldr	r2, [r3, #4]
 800e69a:	68bb      	ldr	r3, [r7, #8]
 800e69c:	605a      	str	r2, [r3, #4]
 800e69e:	68bb      	ldr	r3, [r7, #8]
 800e6a0:	685b      	ldr	r3, [r3, #4]
 800e6a2:	68db      	ldr	r3, [r3, #12]
 800e6a4:	4a0b      	ldr	r2, [pc, #44]	; (800e6d4 <vTaskSwitchContext+0xc0>)
 800e6a6:	6013      	str	r3, [r2, #0]
 800e6a8:	4a08      	ldr	r2, [pc, #32]	; (800e6cc <vTaskSwitchContext+0xb8>)
 800e6aa:	68fb      	ldr	r3, [r7, #12]
 800e6ac:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e6ae:	4b09      	ldr	r3, [pc, #36]	; (800e6d4 <vTaskSwitchContext+0xc0>)
 800e6b0:	681b      	ldr	r3, [r3, #0]
 800e6b2:	3354      	adds	r3, #84	; 0x54
 800e6b4:	4a08      	ldr	r2, [pc, #32]	; (800e6d8 <vTaskSwitchContext+0xc4>)
 800e6b6:	6013      	str	r3, [r2, #0]
}
 800e6b8:	bf00      	nop
 800e6ba:	3714      	adds	r7, #20
 800e6bc:	46bd      	mov	sp, r7
 800e6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6c2:	4770      	bx	lr
 800e6c4:	20001f3c 	.word	0x20001f3c
 800e6c8:	20001f28 	.word	0x20001f28
 800e6cc:	20001f1c 	.word	0x20001f1c
 800e6d0:	20001a44 	.word	0x20001a44
 800e6d4:	20001a40 	.word	0x20001a40
 800e6d8:	20000078 	.word	0x20000078

0800e6dc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e6dc:	b580      	push	{r7, lr}
 800e6de:	b084      	sub	sp, #16
 800e6e0:	af00      	add	r7, sp, #0
 800e6e2:	6078      	str	r0, [r7, #4]
 800e6e4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	2b00      	cmp	r3, #0
 800e6ea:	d10a      	bne.n	800e702 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800e6ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6f0:	f383 8811 	msr	BASEPRI, r3
 800e6f4:	f3bf 8f6f 	isb	sy
 800e6f8:	f3bf 8f4f 	dsb	sy
 800e6fc:	60fb      	str	r3, [r7, #12]
}
 800e6fe:	bf00      	nop
 800e700:	e7fe      	b.n	800e700 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e702:	4b07      	ldr	r3, [pc, #28]	; (800e720 <vTaskPlaceOnEventList+0x44>)
 800e704:	681b      	ldr	r3, [r3, #0]
 800e706:	3318      	adds	r3, #24
 800e708:	4619      	mov	r1, r3
 800e70a:	6878      	ldr	r0, [r7, #4]
 800e70c:	f7fe fddf 	bl	800d2ce <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e710:	2101      	movs	r1, #1
 800e712:	6838      	ldr	r0, [r7, #0]
 800e714:	f000 fa7a 	bl	800ec0c <prvAddCurrentTaskToDelayedList>
}
 800e718:	bf00      	nop
 800e71a:	3710      	adds	r7, #16
 800e71c:	46bd      	mov	sp, r7
 800e71e:	bd80      	pop	{r7, pc}
 800e720:	20001a40 	.word	0x20001a40

0800e724 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e724:	b580      	push	{r7, lr}
 800e726:	b086      	sub	sp, #24
 800e728:	af00      	add	r7, sp, #0
 800e72a:	60f8      	str	r0, [r7, #12]
 800e72c:	60b9      	str	r1, [r7, #8]
 800e72e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800e730:	68fb      	ldr	r3, [r7, #12]
 800e732:	2b00      	cmp	r3, #0
 800e734:	d10a      	bne.n	800e74c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800e736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e73a:	f383 8811 	msr	BASEPRI, r3
 800e73e:	f3bf 8f6f 	isb	sy
 800e742:	f3bf 8f4f 	dsb	sy
 800e746:	617b      	str	r3, [r7, #20]
}
 800e748:	bf00      	nop
 800e74a:	e7fe      	b.n	800e74a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e74c:	4b0a      	ldr	r3, [pc, #40]	; (800e778 <vTaskPlaceOnEventListRestricted+0x54>)
 800e74e:	681b      	ldr	r3, [r3, #0]
 800e750:	3318      	adds	r3, #24
 800e752:	4619      	mov	r1, r3
 800e754:	68f8      	ldr	r0, [r7, #12]
 800e756:	f7fe fd96 	bl	800d286 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	d002      	beq.n	800e766 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800e760:	f04f 33ff 	mov.w	r3, #4294967295
 800e764:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e766:	6879      	ldr	r1, [r7, #4]
 800e768:	68b8      	ldr	r0, [r7, #8]
 800e76a:	f000 fa4f 	bl	800ec0c <prvAddCurrentTaskToDelayedList>
	}
 800e76e:	bf00      	nop
 800e770:	3718      	adds	r7, #24
 800e772:	46bd      	mov	sp, r7
 800e774:	bd80      	pop	{r7, pc}
 800e776:	bf00      	nop
 800e778:	20001a40 	.word	0x20001a40

0800e77c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e77c:	b580      	push	{r7, lr}
 800e77e:	b086      	sub	sp, #24
 800e780:	af00      	add	r7, sp, #0
 800e782:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	68db      	ldr	r3, [r3, #12]
 800e788:	68db      	ldr	r3, [r3, #12]
 800e78a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e78c:	693b      	ldr	r3, [r7, #16]
 800e78e:	2b00      	cmp	r3, #0
 800e790:	d10a      	bne.n	800e7a8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800e792:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e796:	f383 8811 	msr	BASEPRI, r3
 800e79a:	f3bf 8f6f 	isb	sy
 800e79e:	f3bf 8f4f 	dsb	sy
 800e7a2:	60fb      	str	r3, [r7, #12]
}
 800e7a4:	bf00      	nop
 800e7a6:	e7fe      	b.n	800e7a6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e7a8:	693b      	ldr	r3, [r7, #16]
 800e7aa:	3318      	adds	r3, #24
 800e7ac:	4618      	mov	r0, r3
 800e7ae:	f7fe fdc7 	bl	800d340 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e7b2:	4b1e      	ldr	r3, [pc, #120]	; (800e82c <xTaskRemoveFromEventList+0xb0>)
 800e7b4:	681b      	ldr	r3, [r3, #0]
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	d11d      	bne.n	800e7f6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e7ba:	693b      	ldr	r3, [r7, #16]
 800e7bc:	3304      	adds	r3, #4
 800e7be:	4618      	mov	r0, r3
 800e7c0:	f7fe fdbe 	bl	800d340 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e7c4:	693b      	ldr	r3, [r7, #16]
 800e7c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e7c8:	4b19      	ldr	r3, [pc, #100]	; (800e830 <xTaskRemoveFromEventList+0xb4>)
 800e7ca:	681b      	ldr	r3, [r3, #0]
 800e7cc:	429a      	cmp	r2, r3
 800e7ce:	d903      	bls.n	800e7d8 <xTaskRemoveFromEventList+0x5c>
 800e7d0:	693b      	ldr	r3, [r7, #16]
 800e7d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e7d4:	4a16      	ldr	r2, [pc, #88]	; (800e830 <xTaskRemoveFromEventList+0xb4>)
 800e7d6:	6013      	str	r3, [r2, #0]
 800e7d8:	693b      	ldr	r3, [r7, #16]
 800e7da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e7dc:	4613      	mov	r3, r2
 800e7de:	009b      	lsls	r3, r3, #2
 800e7e0:	4413      	add	r3, r2
 800e7e2:	009b      	lsls	r3, r3, #2
 800e7e4:	4a13      	ldr	r2, [pc, #76]	; (800e834 <xTaskRemoveFromEventList+0xb8>)
 800e7e6:	441a      	add	r2, r3
 800e7e8:	693b      	ldr	r3, [r7, #16]
 800e7ea:	3304      	adds	r3, #4
 800e7ec:	4619      	mov	r1, r3
 800e7ee:	4610      	mov	r0, r2
 800e7f0:	f7fe fd49 	bl	800d286 <vListInsertEnd>
 800e7f4:	e005      	b.n	800e802 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e7f6:	693b      	ldr	r3, [r7, #16]
 800e7f8:	3318      	adds	r3, #24
 800e7fa:	4619      	mov	r1, r3
 800e7fc:	480e      	ldr	r0, [pc, #56]	; (800e838 <xTaskRemoveFromEventList+0xbc>)
 800e7fe:	f7fe fd42 	bl	800d286 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e802:	693b      	ldr	r3, [r7, #16]
 800e804:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e806:	4b0d      	ldr	r3, [pc, #52]	; (800e83c <xTaskRemoveFromEventList+0xc0>)
 800e808:	681b      	ldr	r3, [r3, #0]
 800e80a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e80c:	429a      	cmp	r2, r3
 800e80e:	d905      	bls.n	800e81c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e810:	2301      	movs	r3, #1
 800e812:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e814:	4b0a      	ldr	r3, [pc, #40]	; (800e840 <xTaskRemoveFromEventList+0xc4>)
 800e816:	2201      	movs	r2, #1
 800e818:	601a      	str	r2, [r3, #0]
 800e81a:	e001      	b.n	800e820 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800e81c:	2300      	movs	r3, #0
 800e81e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e820:	697b      	ldr	r3, [r7, #20]
}
 800e822:	4618      	mov	r0, r3
 800e824:	3718      	adds	r7, #24
 800e826:	46bd      	mov	sp, r7
 800e828:	bd80      	pop	{r7, pc}
 800e82a:	bf00      	nop
 800e82c:	20001f3c 	.word	0x20001f3c
 800e830:	20001f1c 	.word	0x20001f1c
 800e834:	20001a44 	.word	0x20001a44
 800e838:	20001ed4 	.word	0x20001ed4
 800e83c:	20001a40 	.word	0x20001a40
 800e840:	20001f28 	.word	0x20001f28

0800e844 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e844:	b480      	push	{r7}
 800e846:	b083      	sub	sp, #12
 800e848:	af00      	add	r7, sp, #0
 800e84a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e84c:	4b06      	ldr	r3, [pc, #24]	; (800e868 <vTaskInternalSetTimeOutState+0x24>)
 800e84e:	681a      	ldr	r2, [r3, #0]
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e854:	4b05      	ldr	r3, [pc, #20]	; (800e86c <vTaskInternalSetTimeOutState+0x28>)
 800e856:	681a      	ldr	r2, [r3, #0]
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	605a      	str	r2, [r3, #4]
}
 800e85c:	bf00      	nop
 800e85e:	370c      	adds	r7, #12
 800e860:	46bd      	mov	sp, r7
 800e862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e866:	4770      	bx	lr
 800e868:	20001f2c 	.word	0x20001f2c
 800e86c:	20001f18 	.word	0x20001f18

0800e870 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e870:	b580      	push	{r7, lr}
 800e872:	b088      	sub	sp, #32
 800e874:	af00      	add	r7, sp, #0
 800e876:	6078      	str	r0, [r7, #4]
 800e878:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	d10a      	bne.n	800e896 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800e880:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e884:	f383 8811 	msr	BASEPRI, r3
 800e888:	f3bf 8f6f 	isb	sy
 800e88c:	f3bf 8f4f 	dsb	sy
 800e890:	613b      	str	r3, [r7, #16]
}
 800e892:	bf00      	nop
 800e894:	e7fe      	b.n	800e894 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800e896:	683b      	ldr	r3, [r7, #0]
 800e898:	2b00      	cmp	r3, #0
 800e89a:	d10a      	bne.n	800e8b2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800e89c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8a0:	f383 8811 	msr	BASEPRI, r3
 800e8a4:	f3bf 8f6f 	isb	sy
 800e8a8:	f3bf 8f4f 	dsb	sy
 800e8ac:	60fb      	str	r3, [r7, #12]
}
 800e8ae:	bf00      	nop
 800e8b0:	e7fe      	b.n	800e8b0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800e8b2:	f000 fe77 	bl	800f5a4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e8b6:	4b1d      	ldr	r3, [pc, #116]	; (800e92c <xTaskCheckForTimeOut+0xbc>)
 800e8b8:	681b      	ldr	r3, [r3, #0]
 800e8ba:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	685b      	ldr	r3, [r3, #4]
 800e8c0:	69ba      	ldr	r2, [r7, #24]
 800e8c2:	1ad3      	subs	r3, r2, r3
 800e8c4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e8c6:	683b      	ldr	r3, [r7, #0]
 800e8c8:	681b      	ldr	r3, [r3, #0]
 800e8ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e8ce:	d102      	bne.n	800e8d6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e8d0:	2300      	movs	r3, #0
 800e8d2:	61fb      	str	r3, [r7, #28]
 800e8d4:	e023      	b.n	800e91e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	681a      	ldr	r2, [r3, #0]
 800e8da:	4b15      	ldr	r3, [pc, #84]	; (800e930 <xTaskCheckForTimeOut+0xc0>)
 800e8dc:	681b      	ldr	r3, [r3, #0]
 800e8de:	429a      	cmp	r2, r3
 800e8e0:	d007      	beq.n	800e8f2 <xTaskCheckForTimeOut+0x82>
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	685b      	ldr	r3, [r3, #4]
 800e8e6:	69ba      	ldr	r2, [r7, #24]
 800e8e8:	429a      	cmp	r2, r3
 800e8ea:	d302      	bcc.n	800e8f2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e8ec:	2301      	movs	r3, #1
 800e8ee:	61fb      	str	r3, [r7, #28]
 800e8f0:	e015      	b.n	800e91e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e8f2:	683b      	ldr	r3, [r7, #0]
 800e8f4:	681b      	ldr	r3, [r3, #0]
 800e8f6:	697a      	ldr	r2, [r7, #20]
 800e8f8:	429a      	cmp	r2, r3
 800e8fa:	d20b      	bcs.n	800e914 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e8fc:	683b      	ldr	r3, [r7, #0]
 800e8fe:	681a      	ldr	r2, [r3, #0]
 800e900:	697b      	ldr	r3, [r7, #20]
 800e902:	1ad2      	subs	r2, r2, r3
 800e904:	683b      	ldr	r3, [r7, #0]
 800e906:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e908:	6878      	ldr	r0, [r7, #4]
 800e90a:	f7ff ff9b 	bl	800e844 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e90e:	2300      	movs	r3, #0
 800e910:	61fb      	str	r3, [r7, #28]
 800e912:	e004      	b.n	800e91e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800e914:	683b      	ldr	r3, [r7, #0]
 800e916:	2200      	movs	r2, #0
 800e918:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e91a:	2301      	movs	r3, #1
 800e91c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e91e:	f000 fe71 	bl	800f604 <vPortExitCritical>

	return xReturn;
 800e922:	69fb      	ldr	r3, [r7, #28]
}
 800e924:	4618      	mov	r0, r3
 800e926:	3720      	adds	r7, #32
 800e928:	46bd      	mov	sp, r7
 800e92a:	bd80      	pop	{r7, pc}
 800e92c:	20001f18 	.word	0x20001f18
 800e930:	20001f2c 	.word	0x20001f2c

0800e934 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e934:	b480      	push	{r7}
 800e936:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e938:	4b03      	ldr	r3, [pc, #12]	; (800e948 <vTaskMissedYield+0x14>)
 800e93a:	2201      	movs	r2, #1
 800e93c:	601a      	str	r2, [r3, #0]
}
 800e93e:	bf00      	nop
 800e940:	46bd      	mov	sp, r7
 800e942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e946:	4770      	bx	lr
 800e948:	20001f28 	.word	0x20001f28

0800e94c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e94c:	b580      	push	{r7, lr}
 800e94e:	b082      	sub	sp, #8
 800e950:	af00      	add	r7, sp, #0
 800e952:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e954:	f000 f84c 	bl	800e9f0 <prvCheckTasksWaitingTermination>
		{
			/* If we are not using preemption we keep forcing a task switch to
			see if any other task has become available.  If we are using
			preemption we don't need to do this as any task becoming available
			will automatically get the processor anyway. */
			taskYIELD();
 800e958:	4b04      	ldr	r3, [pc, #16]	; (800e96c <prvIdleTask+0x20>)
 800e95a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e95e:	601a      	str	r2, [r3, #0]
 800e960:	f3bf 8f4f 	dsb	sy
 800e964:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e968:	e7f4      	b.n	800e954 <prvIdleTask+0x8>
 800e96a:	bf00      	nop
 800e96c:	e000ed04 	.word	0xe000ed04

0800e970 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e970:	b580      	push	{r7, lr}
 800e972:	b082      	sub	sp, #8
 800e974:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e976:	2300      	movs	r3, #0
 800e978:	607b      	str	r3, [r7, #4]
 800e97a:	e00c      	b.n	800e996 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e97c:	687a      	ldr	r2, [r7, #4]
 800e97e:	4613      	mov	r3, r2
 800e980:	009b      	lsls	r3, r3, #2
 800e982:	4413      	add	r3, r2
 800e984:	009b      	lsls	r3, r3, #2
 800e986:	4a12      	ldr	r2, [pc, #72]	; (800e9d0 <prvInitialiseTaskLists+0x60>)
 800e988:	4413      	add	r3, r2
 800e98a:	4618      	mov	r0, r3
 800e98c:	f7fe fc4e 	bl	800d22c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	3301      	adds	r3, #1
 800e994:	607b      	str	r3, [r7, #4]
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	2b37      	cmp	r3, #55	; 0x37
 800e99a:	d9ef      	bls.n	800e97c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e99c:	480d      	ldr	r0, [pc, #52]	; (800e9d4 <prvInitialiseTaskLists+0x64>)
 800e99e:	f7fe fc45 	bl	800d22c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e9a2:	480d      	ldr	r0, [pc, #52]	; (800e9d8 <prvInitialiseTaskLists+0x68>)
 800e9a4:	f7fe fc42 	bl	800d22c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e9a8:	480c      	ldr	r0, [pc, #48]	; (800e9dc <prvInitialiseTaskLists+0x6c>)
 800e9aa:	f7fe fc3f 	bl	800d22c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e9ae:	480c      	ldr	r0, [pc, #48]	; (800e9e0 <prvInitialiseTaskLists+0x70>)
 800e9b0:	f7fe fc3c 	bl	800d22c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e9b4:	480b      	ldr	r0, [pc, #44]	; (800e9e4 <prvInitialiseTaskLists+0x74>)
 800e9b6:	f7fe fc39 	bl	800d22c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e9ba:	4b0b      	ldr	r3, [pc, #44]	; (800e9e8 <prvInitialiseTaskLists+0x78>)
 800e9bc:	4a05      	ldr	r2, [pc, #20]	; (800e9d4 <prvInitialiseTaskLists+0x64>)
 800e9be:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e9c0:	4b0a      	ldr	r3, [pc, #40]	; (800e9ec <prvInitialiseTaskLists+0x7c>)
 800e9c2:	4a05      	ldr	r2, [pc, #20]	; (800e9d8 <prvInitialiseTaskLists+0x68>)
 800e9c4:	601a      	str	r2, [r3, #0]
}
 800e9c6:	bf00      	nop
 800e9c8:	3708      	adds	r7, #8
 800e9ca:	46bd      	mov	sp, r7
 800e9cc:	bd80      	pop	{r7, pc}
 800e9ce:	bf00      	nop
 800e9d0:	20001a44 	.word	0x20001a44
 800e9d4:	20001ea4 	.word	0x20001ea4
 800e9d8:	20001eb8 	.word	0x20001eb8
 800e9dc:	20001ed4 	.word	0x20001ed4
 800e9e0:	20001ee8 	.word	0x20001ee8
 800e9e4:	20001f00 	.word	0x20001f00
 800e9e8:	20001ecc 	.word	0x20001ecc
 800e9ec:	20001ed0 	.word	0x20001ed0

0800e9f0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e9f0:	b580      	push	{r7, lr}
 800e9f2:	b082      	sub	sp, #8
 800e9f4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e9f6:	e019      	b.n	800ea2c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e9f8:	f000 fdd4 	bl	800f5a4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e9fc:	4b10      	ldr	r3, [pc, #64]	; (800ea40 <prvCheckTasksWaitingTermination+0x50>)
 800e9fe:	68db      	ldr	r3, [r3, #12]
 800ea00:	68db      	ldr	r3, [r3, #12]
 800ea02:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	3304      	adds	r3, #4
 800ea08:	4618      	mov	r0, r3
 800ea0a:	f7fe fc99 	bl	800d340 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ea0e:	4b0d      	ldr	r3, [pc, #52]	; (800ea44 <prvCheckTasksWaitingTermination+0x54>)
 800ea10:	681b      	ldr	r3, [r3, #0]
 800ea12:	3b01      	subs	r3, #1
 800ea14:	4a0b      	ldr	r2, [pc, #44]	; (800ea44 <prvCheckTasksWaitingTermination+0x54>)
 800ea16:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ea18:	4b0b      	ldr	r3, [pc, #44]	; (800ea48 <prvCheckTasksWaitingTermination+0x58>)
 800ea1a:	681b      	ldr	r3, [r3, #0]
 800ea1c:	3b01      	subs	r3, #1
 800ea1e:	4a0a      	ldr	r2, [pc, #40]	; (800ea48 <prvCheckTasksWaitingTermination+0x58>)
 800ea20:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ea22:	f000 fdef 	bl	800f604 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ea26:	6878      	ldr	r0, [r7, #4]
 800ea28:	f000 f810 	bl	800ea4c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ea2c:	4b06      	ldr	r3, [pc, #24]	; (800ea48 <prvCheckTasksWaitingTermination+0x58>)
 800ea2e:	681b      	ldr	r3, [r3, #0]
 800ea30:	2b00      	cmp	r3, #0
 800ea32:	d1e1      	bne.n	800e9f8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ea34:	bf00      	nop
 800ea36:	bf00      	nop
 800ea38:	3708      	adds	r7, #8
 800ea3a:	46bd      	mov	sp, r7
 800ea3c:	bd80      	pop	{r7, pc}
 800ea3e:	bf00      	nop
 800ea40:	20001ee8 	.word	0x20001ee8
 800ea44:	20001f14 	.word	0x20001f14
 800ea48:	20001efc 	.word	0x20001efc

0800ea4c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ea4c:	b580      	push	{r7, lr}
 800ea4e:	b084      	sub	sp, #16
 800ea50:	af00      	add	r7, sp, #0
 800ea52:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	3354      	adds	r3, #84	; 0x54
 800ea58:	4618      	mov	r0, r3
 800ea5a:	f003 fb21 	bl	80120a0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800ea64:	2b00      	cmp	r3, #0
 800ea66:	d108      	bne.n	800ea7a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ea6c:	4618      	mov	r0, r3
 800ea6e:	f000 ff87 	bl	800f980 <vPortFree>
				vPortFree( pxTCB );
 800ea72:	6878      	ldr	r0, [r7, #4]
 800ea74:	f000 ff84 	bl	800f980 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ea78:	e018      	b.n	800eaac <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800ea80:	2b01      	cmp	r3, #1
 800ea82:	d103      	bne.n	800ea8c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800ea84:	6878      	ldr	r0, [r7, #4]
 800ea86:	f000 ff7b 	bl	800f980 <vPortFree>
	}
 800ea8a:	e00f      	b.n	800eaac <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800ea92:	2b02      	cmp	r3, #2
 800ea94:	d00a      	beq.n	800eaac <prvDeleteTCB+0x60>
	__asm volatile
 800ea96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea9a:	f383 8811 	msr	BASEPRI, r3
 800ea9e:	f3bf 8f6f 	isb	sy
 800eaa2:	f3bf 8f4f 	dsb	sy
 800eaa6:	60fb      	str	r3, [r7, #12]
}
 800eaa8:	bf00      	nop
 800eaaa:	e7fe      	b.n	800eaaa <prvDeleteTCB+0x5e>
	}
 800eaac:	bf00      	nop
 800eaae:	3710      	adds	r7, #16
 800eab0:	46bd      	mov	sp, r7
 800eab2:	bd80      	pop	{r7, pc}

0800eab4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800eab4:	b480      	push	{r7}
 800eab6:	b083      	sub	sp, #12
 800eab8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800eaba:	4b0c      	ldr	r3, [pc, #48]	; (800eaec <prvResetNextTaskUnblockTime+0x38>)
 800eabc:	681b      	ldr	r3, [r3, #0]
 800eabe:	681b      	ldr	r3, [r3, #0]
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	d104      	bne.n	800eace <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800eac4:	4b0a      	ldr	r3, [pc, #40]	; (800eaf0 <prvResetNextTaskUnblockTime+0x3c>)
 800eac6:	f04f 32ff 	mov.w	r2, #4294967295
 800eaca:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800eacc:	e008      	b.n	800eae0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eace:	4b07      	ldr	r3, [pc, #28]	; (800eaec <prvResetNextTaskUnblockTime+0x38>)
 800ead0:	681b      	ldr	r3, [r3, #0]
 800ead2:	68db      	ldr	r3, [r3, #12]
 800ead4:	68db      	ldr	r3, [r3, #12]
 800ead6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	685b      	ldr	r3, [r3, #4]
 800eadc:	4a04      	ldr	r2, [pc, #16]	; (800eaf0 <prvResetNextTaskUnblockTime+0x3c>)
 800eade:	6013      	str	r3, [r2, #0]
}
 800eae0:	bf00      	nop
 800eae2:	370c      	adds	r7, #12
 800eae4:	46bd      	mov	sp, r7
 800eae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaea:	4770      	bx	lr
 800eaec:	20001ecc 	.word	0x20001ecc
 800eaf0:	20001f34 	.word	0x20001f34

0800eaf4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800eaf4:	b480      	push	{r7}
 800eaf6:	b083      	sub	sp, #12
 800eaf8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800eafa:	4b0b      	ldr	r3, [pc, #44]	; (800eb28 <xTaskGetSchedulerState+0x34>)
 800eafc:	681b      	ldr	r3, [r3, #0]
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	d102      	bne.n	800eb08 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800eb02:	2301      	movs	r3, #1
 800eb04:	607b      	str	r3, [r7, #4]
 800eb06:	e008      	b.n	800eb1a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800eb08:	4b08      	ldr	r3, [pc, #32]	; (800eb2c <xTaskGetSchedulerState+0x38>)
 800eb0a:	681b      	ldr	r3, [r3, #0]
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	d102      	bne.n	800eb16 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800eb10:	2302      	movs	r3, #2
 800eb12:	607b      	str	r3, [r7, #4]
 800eb14:	e001      	b.n	800eb1a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800eb16:	2300      	movs	r3, #0
 800eb18:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800eb1a:	687b      	ldr	r3, [r7, #4]
	}
 800eb1c:	4618      	mov	r0, r3
 800eb1e:	370c      	adds	r7, #12
 800eb20:	46bd      	mov	sp, r7
 800eb22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb26:	4770      	bx	lr
 800eb28:	20001f20 	.word	0x20001f20
 800eb2c:	20001f3c 	.word	0x20001f3c

0800eb30 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800eb30:	b580      	push	{r7, lr}
 800eb32:	b086      	sub	sp, #24
 800eb34:	af00      	add	r7, sp, #0
 800eb36:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800eb3c:	2300      	movs	r3, #0
 800eb3e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	2b00      	cmp	r3, #0
 800eb44:	d056      	beq.n	800ebf4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800eb46:	4b2e      	ldr	r3, [pc, #184]	; (800ec00 <xTaskPriorityDisinherit+0xd0>)
 800eb48:	681b      	ldr	r3, [r3, #0]
 800eb4a:	693a      	ldr	r2, [r7, #16]
 800eb4c:	429a      	cmp	r2, r3
 800eb4e:	d00a      	beq.n	800eb66 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800eb50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb54:	f383 8811 	msr	BASEPRI, r3
 800eb58:	f3bf 8f6f 	isb	sy
 800eb5c:	f3bf 8f4f 	dsb	sy
 800eb60:	60fb      	str	r3, [r7, #12]
}
 800eb62:	bf00      	nop
 800eb64:	e7fe      	b.n	800eb64 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800eb66:	693b      	ldr	r3, [r7, #16]
 800eb68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	d10a      	bne.n	800eb84 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800eb6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb72:	f383 8811 	msr	BASEPRI, r3
 800eb76:	f3bf 8f6f 	isb	sy
 800eb7a:	f3bf 8f4f 	dsb	sy
 800eb7e:	60bb      	str	r3, [r7, #8]
}
 800eb80:	bf00      	nop
 800eb82:	e7fe      	b.n	800eb82 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800eb84:	693b      	ldr	r3, [r7, #16]
 800eb86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800eb88:	1e5a      	subs	r2, r3, #1
 800eb8a:	693b      	ldr	r3, [r7, #16]
 800eb8c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800eb8e:	693b      	ldr	r3, [r7, #16]
 800eb90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb92:	693b      	ldr	r3, [r7, #16]
 800eb94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800eb96:	429a      	cmp	r2, r3
 800eb98:	d02c      	beq.n	800ebf4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800eb9a:	693b      	ldr	r3, [r7, #16]
 800eb9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800eb9e:	2b00      	cmp	r3, #0
 800eba0:	d128      	bne.n	800ebf4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800eba2:	693b      	ldr	r3, [r7, #16]
 800eba4:	3304      	adds	r3, #4
 800eba6:	4618      	mov	r0, r3
 800eba8:	f7fe fbca 	bl	800d340 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ebac:	693b      	ldr	r3, [r7, #16]
 800ebae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ebb0:	693b      	ldr	r3, [r7, #16]
 800ebb2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ebb4:	693b      	ldr	r3, [r7, #16]
 800ebb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ebb8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ebbc:	693b      	ldr	r3, [r7, #16]
 800ebbe:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ebc0:	693b      	ldr	r3, [r7, #16]
 800ebc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ebc4:	4b0f      	ldr	r3, [pc, #60]	; (800ec04 <xTaskPriorityDisinherit+0xd4>)
 800ebc6:	681b      	ldr	r3, [r3, #0]
 800ebc8:	429a      	cmp	r2, r3
 800ebca:	d903      	bls.n	800ebd4 <xTaskPriorityDisinherit+0xa4>
 800ebcc:	693b      	ldr	r3, [r7, #16]
 800ebce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ebd0:	4a0c      	ldr	r2, [pc, #48]	; (800ec04 <xTaskPriorityDisinherit+0xd4>)
 800ebd2:	6013      	str	r3, [r2, #0]
 800ebd4:	693b      	ldr	r3, [r7, #16]
 800ebd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ebd8:	4613      	mov	r3, r2
 800ebda:	009b      	lsls	r3, r3, #2
 800ebdc:	4413      	add	r3, r2
 800ebde:	009b      	lsls	r3, r3, #2
 800ebe0:	4a09      	ldr	r2, [pc, #36]	; (800ec08 <xTaskPriorityDisinherit+0xd8>)
 800ebe2:	441a      	add	r2, r3
 800ebe4:	693b      	ldr	r3, [r7, #16]
 800ebe6:	3304      	adds	r3, #4
 800ebe8:	4619      	mov	r1, r3
 800ebea:	4610      	mov	r0, r2
 800ebec:	f7fe fb4b 	bl	800d286 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ebf0:	2301      	movs	r3, #1
 800ebf2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ebf4:	697b      	ldr	r3, [r7, #20]
	}
 800ebf6:	4618      	mov	r0, r3
 800ebf8:	3718      	adds	r7, #24
 800ebfa:	46bd      	mov	sp, r7
 800ebfc:	bd80      	pop	{r7, pc}
 800ebfe:	bf00      	nop
 800ec00:	20001a40 	.word	0x20001a40
 800ec04:	20001f1c 	.word	0x20001f1c
 800ec08:	20001a44 	.word	0x20001a44

0800ec0c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ec0c:	b580      	push	{r7, lr}
 800ec0e:	b084      	sub	sp, #16
 800ec10:	af00      	add	r7, sp, #0
 800ec12:	6078      	str	r0, [r7, #4]
 800ec14:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ec16:	4b21      	ldr	r3, [pc, #132]	; (800ec9c <prvAddCurrentTaskToDelayedList+0x90>)
 800ec18:	681b      	ldr	r3, [r3, #0]
 800ec1a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ec1c:	4b20      	ldr	r3, [pc, #128]	; (800eca0 <prvAddCurrentTaskToDelayedList+0x94>)
 800ec1e:	681b      	ldr	r3, [r3, #0]
 800ec20:	3304      	adds	r3, #4
 800ec22:	4618      	mov	r0, r3
 800ec24:	f7fe fb8c 	bl	800d340 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec2e:	d10a      	bne.n	800ec46 <prvAddCurrentTaskToDelayedList+0x3a>
 800ec30:	683b      	ldr	r3, [r7, #0]
 800ec32:	2b00      	cmp	r3, #0
 800ec34:	d007      	beq.n	800ec46 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ec36:	4b1a      	ldr	r3, [pc, #104]	; (800eca0 <prvAddCurrentTaskToDelayedList+0x94>)
 800ec38:	681b      	ldr	r3, [r3, #0]
 800ec3a:	3304      	adds	r3, #4
 800ec3c:	4619      	mov	r1, r3
 800ec3e:	4819      	ldr	r0, [pc, #100]	; (800eca4 <prvAddCurrentTaskToDelayedList+0x98>)
 800ec40:	f7fe fb21 	bl	800d286 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ec44:	e026      	b.n	800ec94 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ec46:	68fa      	ldr	r2, [r7, #12]
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	4413      	add	r3, r2
 800ec4c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ec4e:	4b14      	ldr	r3, [pc, #80]	; (800eca0 <prvAddCurrentTaskToDelayedList+0x94>)
 800ec50:	681b      	ldr	r3, [r3, #0]
 800ec52:	68ba      	ldr	r2, [r7, #8]
 800ec54:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ec56:	68ba      	ldr	r2, [r7, #8]
 800ec58:	68fb      	ldr	r3, [r7, #12]
 800ec5a:	429a      	cmp	r2, r3
 800ec5c:	d209      	bcs.n	800ec72 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ec5e:	4b12      	ldr	r3, [pc, #72]	; (800eca8 <prvAddCurrentTaskToDelayedList+0x9c>)
 800ec60:	681a      	ldr	r2, [r3, #0]
 800ec62:	4b0f      	ldr	r3, [pc, #60]	; (800eca0 <prvAddCurrentTaskToDelayedList+0x94>)
 800ec64:	681b      	ldr	r3, [r3, #0]
 800ec66:	3304      	adds	r3, #4
 800ec68:	4619      	mov	r1, r3
 800ec6a:	4610      	mov	r0, r2
 800ec6c:	f7fe fb2f 	bl	800d2ce <vListInsert>
}
 800ec70:	e010      	b.n	800ec94 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ec72:	4b0e      	ldr	r3, [pc, #56]	; (800ecac <prvAddCurrentTaskToDelayedList+0xa0>)
 800ec74:	681a      	ldr	r2, [r3, #0]
 800ec76:	4b0a      	ldr	r3, [pc, #40]	; (800eca0 <prvAddCurrentTaskToDelayedList+0x94>)
 800ec78:	681b      	ldr	r3, [r3, #0]
 800ec7a:	3304      	adds	r3, #4
 800ec7c:	4619      	mov	r1, r3
 800ec7e:	4610      	mov	r0, r2
 800ec80:	f7fe fb25 	bl	800d2ce <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ec84:	4b0a      	ldr	r3, [pc, #40]	; (800ecb0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ec86:	681b      	ldr	r3, [r3, #0]
 800ec88:	68ba      	ldr	r2, [r7, #8]
 800ec8a:	429a      	cmp	r2, r3
 800ec8c:	d202      	bcs.n	800ec94 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800ec8e:	4a08      	ldr	r2, [pc, #32]	; (800ecb0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ec90:	68bb      	ldr	r3, [r7, #8]
 800ec92:	6013      	str	r3, [r2, #0]
}
 800ec94:	bf00      	nop
 800ec96:	3710      	adds	r7, #16
 800ec98:	46bd      	mov	sp, r7
 800ec9a:	bd80      	pop	{r7, pc}
 800ec9c:	20001f18 	.word	0x20001f18
 800eca0:	20001a40 	.word	0x20001a40
 800eca4:	20001f00 	.word	0x20001f00
 800eca8:	20001ed0 	.word	0x20001ed0
 800ecac:	20001ecc 	.word	0x20001ecc
 800ecb0:	20001f34 	.word	0x20001f34

0800ecb4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800ecb4:	b580      	push	{r7, lr}
 800ecb6:	b08a      	sub	sp, #40	; 0x28
 800ecb8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800ecba:	2300      	movs	r3, #0
 800ecbc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800ecbe:	f000 fb07 	bl	800f2d0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800ecc2:	4b1c      	ldr	r3, [pc, #112]	; (800ed34 <xTimerCreateTimerTask+0x80>)
 800ecc4:	681b      	ldr	r3, [r3, #0]
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	d021      	beq.n	800ed0e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ecca:	2300      	movs	r3, #0
 800eccc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ecce:	2300      	movs	r3, #0
 800ecd0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ecd2:	1d3a      	adds	r2, r7, #4
 800ecd4:	f107 0108 	add.w	r1, r7, #8
 800ecd8:	f107 030c 	add.w	r3, r7, #12
 800ecdc:	4618      	mov	r0, r3
 800ecde:	f7fe fa8b 	bl	800d1f8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ece2:	6879      	ldr	r1, [r7, #4]
 800ece4:	68bb      	ldr	r3, [r7, #8]
 800ece6:	68fa      	ldr	r2, [r7, #12]
 800ece8:	9202      	str	r2, [sp, #8]
 800ecea:	9301      	str	r3, [sp, #4]
 800ecec:	2302      	movs	r3, #2
 800ecee:	9300      	str	r3, [sp, #0]
 800ecf0:	2300      	movs	r3, #0
 800ecf2:	460a      	mov	r2, r1
 800ecf4:	4910      	ldr	r1, [pc, #64]	; (800ed38 <xTimerCreateTimerTask+0x84>)
 800ecf6:	4811      	ldr	r0, [pc, #68]	; (800ed3c <xTimerCreateTimerTask+0x88>)
 800ecf8:	f7ff f8fc 	bl	800def4 <xTaskCreateStatic>
 800ecfc:	4603      	mov	r3, r0
 800ecfe:	4a10      	ldr	r2, [pc, #64]	; (800ed40 <xTimerCreateTimerTask+0x8c>)
 800ed00:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800ed02:	4b0f      	ldr	r3, [pc, #60]	; (800ed40 <xTimerCreateTimerTask+0x8c>)
 800ed04:	681b      	ldr	r3, [r3, #0]
 800ed06:	2b00      	cmp	r3, #0
 800ed08:	d001      	beq.n	800ed0e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ed0a:	2301      	movs	r3, #1
 800ed0c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ed0e:	697b      	ldr	r3, [r7, #20]
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	d10a      	bne.n	800ed2a <xTimerCreateTimerTask+0x76>
	__asm volatile
 800ed14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed18:	f383 8811 	msr	BASEPRI, r3
 800ed1c:	f3bf 8f6f 	isb	sy
 800ed20:	f3bf 8f4f 	dsb	sy
 800ed24:	613b      	str	r3, [r7, #16]
}
 800ed26:	bf00      	nop
 800ed28:	e7fe      	b.n	800ed28 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800ed2a:	697b      	ldr	r3, [r7, #20]
}
 800ed2c:	4618      	mov	r0, r3
 800ed2e:	3718      	adds	r7, #24
 800ed30:	46bd      	mov	sp, r7
 800ed32:	bd80      	pop	{r7, pc}
 800ed34:	20001f70 	.word	0x20001f70
 800ed38:	080145ec 	.word	0x080145ec
 800ed3c:	0800ee79 	.word	0x0800ee79
 800ed40:	20001f74 	.word	0x20001f74

0800ed44 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ed44:	b580      	push	{r7, lr}
 800ed46:	b08a      	sub	sp, #40	; 0x28
 800ed48:	af00      	add	r7, sp, #0
 800ed4a:	60f8      	str	r0, [r7, #12]
 800ed4c:	60b9      	str	r1, [r7, #8]
 800ed4e:	607a      	str	r2, [r7, #4]
 800ed50:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ed52:	2300      	movs	r3, #0
 800ed54:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ed56:	68fb      	ldr	r3, [r7, #12]
 800ed58:	2b00      	cmp	r3, #0
 800ed5a:	d10a      	bne.n	800ed72 <xTimerGenericCommand+0x2e>
	__asm volatile
 800ed5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed60:	f383 8811 	msr	BASEPRI, r3
 800ed64:	f3bf 8f6f 	isb	sy
 800ed68:	f3bf 8f4f 	dsb	sy
 800ed6c:	623b      	str	r3, [r7, #32]
}
 800ed6e:	bf00      	nop
 800ed70:	e7fe      	b.n	800ed70 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ed72:	4b1a      	ldr	r3, [pc, #104]	; (800eddc <xTimerGenericCommand+0x98>)
 800ed74:	681b      	ldr	r3, [r3, #0]
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	d02a      	beq.n	800edd0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ed7a:	68bb      	ldr	r3, [r7, #8]
 800ed7c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ed82:	68fb      	ldr	r3, [r7, #12]
 800ed84:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ed86:	68bb      	ldr	r3, [r7, #8]
 800ed88:	2b05      	cmp	r3, #5
 800ed8a:	dc18      	bgt.n	800edbe <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ed8c:	f7ff feb2 	bl	800eaf4 <xTaskGetSchedulerState>
 800ed90:	4603      	mov	r3, r0
 800ed92:	2b02      	cmp	r3, #2
 800ed94:	d109      	bne.n	800edaa <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ed96:	4b11      	ldr	r3, [pc, #68]	; (800eddc <xTimerGenericCommand+0x98>)
 800ed98:	6818      	ldr	r0, [r3, #0]
 800ed9a:	f107 0110 	add.w	r1, r7, #16
 800ed9e:	2300      	movs	r3, #0
 800eda0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eda2:	f7fe fc27 	bl	800d5f4 <xQueueGenericSend>
 800eda6:	6278      	str	r0, [r7, #36]	; 0x24
 800eda8:	e012      	b.n	800edd0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800edaa:	4b0c      	ldr	r3, [pc, #48]	; (800eddc <xTimerGenericCommand+0x98>)
 800edac:	6818      	ldr	r0, [r3, #0]
 800edae:	f107 0110 	add.w	r1, r7, #16
 800edb2:	2300      	movs	r3, #0
 800edb4:	2200      	movs	r2, #0
 800edb6:	f7fe fc1d 	bl	800d5f4 <xQueueGenericSend>
 800edba:	6278      	str	r0, [r7, #36]	; 0x24
 800edbc:	e008      	b.n	800edd0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800edbe:	4b07      	ldr	r3, [pc, #28]	; (800eddc <xTimerGenericCommand+0x98>)
 800edc0:	6818      	ldr	r0, [r3, #0]
 800edc2:	f107 0110 	add.w	r1, r7, #16
 800edc6:	2300      	movs	r3, #0
 800edc8:	683a      	ldr	r2, [r7, #0]
 800edca:	f7fe fcf9 	bl	800d7c0 <xQueueGenericSendFromISR>
 800edce:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800edd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800edd2:	4618      	mov	r0, r3
 800edd4:	3728      	adds	r7, #40	; 0x28
 800edd6:	46bd      	mov	sp, r7
 800edd8:	bd80      	pop	{r7, pc}
 800edda:	bf00      	nop
 800eddc:	20001f70 	.word	0x20001f70

0800ede0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ede0:	b580      	push	{r7, lr}
 800ede2:	b088      	sub	sp, #32
 800ede4:	af02      	add	r7, sp, #8
 800ede6:	6078      	str	r0, [r7, #4]
 800ede8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800edea:	4b22      	ldr	r3, [pc, #136]	; (800ee74 <prvProcessExpiredTimer+0x94>)
 800edec:	681b      	ldr	r3, [r3, #0]
 800edee:	68db      	ldr	r3, [r3, #12]
 800edf0:	68db      	ldr	r3, [r3, #12]
 800edf2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800edf4:	697b      	ldr	r3, [r7, #20]
 800edf6:	3304      	adds	r3, #4
 800edf8:	4618      	mov	r0, r3
 800edfa:	f7fe faa1 	bl	800d340 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800edfe:	697b      	ldr	r3, [r7, #20]
 800ee00:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ee04:	f003 0304 	and.w	r3, r3, #4
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	d022      	beq.n	800ee52 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ee0c:	697b      	ldr	r3, [r7, #20]
 800ee0e:	699a      	ldr	r2, [r3, #24]
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	18d1      	adds	r1, r2, r3
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	683a      	ldr	r2, [r7, #0]
 800ee18:	6978      	ldr	r0, [r7, #20]
 800ee1a:	f000 f8d1 	bl	800efc0 <prvInsertTimerInActiveList>
 800ee1e:	4603      	mov	r3, r0
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	d01f      	beq.n	800ee64 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ee24:	2300      	movs	r3, #0
 800ee26:	9300      	str	r3, [sp, #0]
 800ee28:	2300      	movs	r3, #0
 800ee2a:	687a      	ldr	r2, [r7, #4]
 800ee2c:	2100      	movs	r1, #0
 800ee2e:	6978      	ldr	r0, [r7, #20]
 800ee30:	f7ff ff88 	bl	800ed44 <xTimerGenericCommand>
 800ee34:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800ee36:	693b      	ldr	r3, [r7, #16]
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	d113      	bne.n	800ee64 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800ee3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee40:	f383 8811 	msr	BASEPRI, r3
 800ee44:	f3bf 8f6f 	isb	sy
 800ee48:	f3bf 8f4f 	dsb	sy
 800ee4c:	60fb      	str	r3, [r7, #12]
}
 800ee4e:	bf00      	nop
 800ee50:	e7fe      	b.n	800ee50 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ee52:	697b      	ldr	r3, [r7, #20]
 800ee54:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ee58:	f023 0301 	bic.w	r3, r3, #1
 800ee5c:	b2da      	uxtb	r2, r3
 800ee5e:	697b      	ldr	r3, [r7, #20]
 800ee60:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ee64:	697b      	ldr	r3, [r7, #20]
 800ee66:	6a1b      	ldr	r3, [r3, #32]
 800ee68:	6978      	ldr	r0, [r7, #20]
 800ee6a:	4798      	blx	r3
}
 800ee6c:	bf00      	nop
 800ee6e:	3718      	adds	r7, #24
 800ee70:	46bd      	mov	sp, r7
 800ee72:	bd80      	pop	{r7, pc}
 800ee74:	20001f68 	.word	0x20001f68

0800ee78 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800ee78:	b580      	push	{r7, lr}
 800ee7a:	b084      	sub	sp, #16
 800ee7c:	af00      	add	r7, sp, #0
 800ee7e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ee80:	f107 0308 	add.w	r3, r7, #8
 800ee84:	4618      	mov	r0, r3
 800ee86:	f000 f857 	bl	800ef38 <prvGetNextExpireTime>
 800ee8a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ee8c:	68bb      	ldr	r3, [r7, #8]
 800ee8e:	4619      	mov	r1, r3
 800ee90:	68f8      	ldr	r0, [r7, #12]
 800ee92:	f000 f803 	bl	800ee9c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ee96:	f000 f8d5 	bl	800f044 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ee9a:	e7f1      	b.n	800ee80 <prvTimerTask+0x8>

0800ee9c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800ee9c:	b580      	push	{r7, lr}
 800ee9e:	b084      	sub	sp, #16
 800eea0:	af00      	add	r7, sp, #0
 800eea2:	6078      	str	r0, [r7, #4]
 800eea4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800eea6:	f7ff fa71 	bl	800e38c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800eeaa:	f107 0308 	add.w	r3, r7, #8
 800eeae:	4618      	mov	r0, r3
 800eeb0:	f000 f866 	bl	800ef80 <prvSampleTimeNow>
 800eeb4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800eeb6:	68bb      	ldr	r3, [r7, #8]
 800eeb8:	2b00      	cmp	r3, #0
 800eeba:	d130      	bne.n	800ef1e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800eebc:	683b      	ldr	r3, [r7, #0]
 800eebe:	2b00      	cmp	r3, #0
 800eec0:	d10a      	bne.n	800eed8 <prvProcessTimerOrBlockTask+0x3c>
 800eec2:	687a      	ldr	r2, [r7, #4]
 800eec4:	68fb      	ldr	r3, [r7, #12]
 800eec6:	429a      	cmp	r2, r3
 800eec8:	d806      	bhi.n	800eed8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800eeca:	f7ff fa6d 	bl	800e3a8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800eece:	68f9      	ldr	r1, [r7, #12]
 800eed0:	6878      	ldr	r0, [r7, #4]
 800eed2:	f7ff ff85 	bl	800ede0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800eed6:	e024      	b.n	800ef22 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800eed8:	683b      	ldr	r3, [r7, #0]
 800eeda:	2b00      	cmp	r3, #0
 800eedc:	d008      	beq.n	800eef0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800eede:	4b13      	ldr	r3, [pc, #76]	; (800ef2c <prvProcessTimerOrBlockTask+0x90>)
 800eee0:	681b      	ldr	r3, [r3, #0]
 800eee2:	681b      	ldr	r3, [r3, #0]
 800eee4:	2b00      	cmp	r3, #0
 800eee6:	d101      	bne.n	800eeec <prvProcessTimerOrBlockTask+0x50>
 800eee8:	2301      	movs	r3, #1
 800eeea:	e000      	b.n	800eeee <prvProcessTimerOrBlockTask+0x52>
 800eeec:	2300      	movs	r3, #0
 800eeee:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800eef0:	4b0f      	ldr	r3, [pc, #60]	; (800ef30 <prvProcessTimerOrBlockTask+0x94>)
 800eef2:	6818      	ldr	r0, [r3, #0]
 800eef4:	687a      	ldr	r2, [r7, #4]
 800eef6:	68fb      	ldr	r3, [r7, #12]
 800eef8:	1ad3      	subs	r3, r2, r3
 800eefa:	683a      	ldr	r2, [r7, #0]
 800eefc:	4619      	mov	r1, r3
 800eefe:	f7fe ffc5 	bl	800de8c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ef02:	f7ff fa51 	bl	800e3a8 <xTaskResumeAll>
 800ef06:	4603      	mov	r3, r0
 800ef08:	2b00      	cmp	r3, #0
 800ef0a:	d10a      	bne.n	800ef22 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800ef0c:	4b09      	ldr	r3, [pc, #36]	; (800ef34 <prvProcessTimerOrBlockTask+0x98>)
 800ef0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ef12:	601a      	str	r2, [r3, #0]
 800ef14:	f3bf 8f4f 	dsb	sy
 800ef18:	f3bf 8f6f 	isb	sy
}
 800ef1c:	e001      	b.n	800ef22 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800ef1e:	f7ff fa43 	bl	800e3a8 <xTaskResumeAll>
}
 800ef22:	bf00      	nop
 800ef24:	3710      	adds	r7, #16
 800ef26:	46bd      	mov	sp, r7
 800ef28:	bd80      	pop	{r7, pc}
 800ef2a:	bf00      	nop
 800ef2c:	20001f6c 	.word	0x20001f6c
 800ef30:	20001f70 	.word	0x20001f70
 800ef34:	e000ed04 	.word	0xe000ed04

0800ef38 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800ef38:	b480      	push	{r7}
 800ef3a:	b085      	sub	sp, #20
 800ef3c:	af00      	add	r7, sp, #0
 800ef3e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ef40:	4b0e      	ldr	r3, [pc, #56]	; (800ef7c <prvGetNextExpireTime+0x44>)
 800ef42:	681b      	ldr	r3, [r3, #0]
 800ef44:	681b      	ldr	r3, [r3, #0]
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	d101      	bne.n	800ef4e <prvGetNextExpireTime+0x16>
 800ef4a:	2201      	movs	r2, #1
 800ef4c:	e000      	b.n	800ef50 <prvGetNextExpireTime+0x18>
 800ef4e:	2200      	movs	r2, #0
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	681b      	ldr	r3, [r3, #0]
 800ef58:	2b00      	cmp	r3, #0
 800ef5a:	d105      	bne.n	800ef68 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ef5c:	4b07      	ldr	r3, [pc, #28]	; (800ef7c <prvGetNextExpireTime+0x44>)
 800ef5e:	681b      	ldr	r3, [r3, #0]
 800ef60:	68db      	ldr	r3, [r3, #12]
 800ef62:	681b      	ldr	r3, [r3, #0]
 800ef64:	60fb      	str	r3, [r7, #12]
 800ef66:	e001      	b.n	800ef6c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800ef68:	2300      	movs	r3, #0
 800ef6a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ef6c:	68fb      	ldr	r3, [r7, #12]
}
 800ef6e:	4618      	mov	r0, r3
 800ef70:	3714      	adds	r7, #20
 800ef72:	46bd      	mov	sp, r7
 800ef74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef78:	4770      	bx	lr
 800ef7a:	bf00      	nop
 800ef7c:	20001f68 	.word	0x20001f68

0800ef80 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ef80:	b580      	push	{r7, lr}
 800ef82:	b084      	sub	sp, #16
 800ef84:	af00      	add	r7, sp, #0
 800ef86:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800ef88:	f7ff fa9e 	bl	800e4c8 <xTaskGetTickCount>
 800ef8c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800ef8e:	4b0b      	ldr	r3, [pc, #44]	; (800efbc <prvSampleTimeNow+0x3c>)
 800ef90:	681b      	ldr	r3, [r3, #0]
 800ef92:	68fa      	ldr	r2, [r7, #12]
 800ef94:	429a      	cmp	r2, r3
 800ef96:	d205      	bcs.n	800efa4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ef98:	f000 f936 	bl	800f208 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	2201      	movs	r2, #1
 800efa0:	601a      	str	r2, [r3, #0]
 800efa2:	e002      	b.n	800efaa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	2200      	movs	r2, #0
 800efa8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800efaa:	4a04      	ldr	r2, [pc, #16]	; (800efbc <prvSampleTimeNow+0x3c>)
 800efac:	68fb      	ldr	r3, [r7, #12]
 800efae:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800efb0:	68fb      	ldr	r3, [r7, #12]
}
 800efb2:	4618      	mov	r0, r3
 800efb4:	3710      	adds	r7, #16
 800efb6:	46bd      	mov	sp, r7
 800efb8:	bd80      	pop	{r7, pc}
 800efba:	bf00      	nop
 800efbc:	20001f78 	.word	0x20001f78

0800efc0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800efc0:	b580      	push	{r7, lr}
 800efc2:	b086      	sub	sp, #24
 800efc4:	af00      	add	r7, sp, #0
 800efc6:	60f8      	str	r0, [r7, #12]
 800efc8:	60b9      	str	r1, [r7, #8]
 800efca:	607a      	str	r2, [r7, #4]
 800efcc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800efce:	2300      	movs	r3, #0
 800efd0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800efd2:	68fb      	ldr	r3, [r7, #12]
 800efd4:	68ba      	ldr	r2, [r7, #8]
 800efd6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800efd8:	68fb      	ldr	r3, [r7, #12]
 800efda:	68fa      	ldr	r2, [r7, #12]
 800efdc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800efde:	68ba      	ldr	r2, [r7, #8]
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	429a      	cmp	r2, r3
 800efe4:	d812      	bhi.n	800f00c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800efe6:	687a      	ldr	r2, [r7, #4]
 800efe8:	683b      	ldr	r3, [r7, #0]
 800efea:	1ad2      	subs	r2, r2, r3
 800efec:	68fb      	ldr	r3, [r7, #12]
 800efee:	699b      	ldr	r3, [r3, #24]
 800eff0:	429a      	cmp	r2, r3
 800eff2:	d302      	bcc.n	800effa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800eff4:	2301      	movs	r3, #1
 800eff6:	617b      	str	r3, [r7, #20]
 800eff8:	e01b      	b.n	800f032 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800effa:	4b10      	ldr	r3, [pc, #64]	; (800f03c <prvInsertTimerInActiveList+0x7c>)
 800effc:	681a      	ldr	r2, [r3, #0]
 800effe:	68fb      	ldr	r3, [r7, #12]
 800f000:	3304      	adds	r3, #4
 800f002:	4619      	mov	r1, r3
 800f004:	4610      	mov	r0, r2
 800f006:	f7fe f962 	bl	800d2ce <vListInsert>
 800f00a:	e012      	b.n	800f032 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800f00c:	687a      	ldr	r2, [r7, #4]
 800f00e:	683b      	ldr	r3, [r7, #0]
 800f010:	429a      	cmp	r2, r3
 800f012:	d206      	bcs.n	800f022 <prvInsertTimerInActiveList+0x62>
 800f014:	68ba      	ldr	r2, [r7, #8]
 800f016:	683b      	ldr	r3, [r7, #0]
 800f018:	429a      	cmp	r2, r3
 800f01a:	d302      	bcc.n	800f022 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800f01c:	2301      	movs	r3, #1
 800f01e:	617b      	str	r3, [r7, #20]
 800f020:	e007      	b.n	800f032 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f022:	4b07      	ldr	r3, [pc, #28]	; (800f040 <prvInsertTimerInActiveList+0x80>)
 800f024:	681a      	ldr	r2, [r3, #0]
 800f026:	68fb      	ldr	r3, [r7, #12]
 800f028:	3304      	adds	r3, #4
 800f02a:	4619      	mov	r1, r3
 800f02c:	4610      	mov	r0, r2
 800f02e:	f7fe f94e 	bl	800d2ce <vListInsert>
		}
	}

	return xProcessTimerNow;
 800f032:	697b      	ldr	r3, [r7, #20]
}
 800f034:	4618      	mov	r0, r3
 800f036:	3718      	adds	r7, #24
 800f038:	46bd      	mov	sp, r7
 800f03a:	bd80      	pop	{r7, pc}
 800f03c:	20001f6c 	.word	0x20001f6c
 800f040:	20001f68 	.word	0x20001f68

0800f044 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800f044:	b580      	push	{r7, lr}
 800f046:	b08e      	sub	sp, #56	; 0x38
 800f048:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f04a:	e0ca      	b.n	800f1e2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	2b00      	cmp	r3, #0
 800f050:	da18      	bge.n	800f084 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800f052:	1d3b      	adds	r3, r7, #4
 800f054:	3304      	adds	r3, #4
 800f056:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800f058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	d10a      	bne.n	800f074 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800f05e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f062:	f383 8811 	msr	BASEPRI, r3
 800f066:	f3bf 8f6f 	isb	sy
 800f06a:	f3bf 8f4f 	dsb	sy
 800f06e:	61fb      	str	r3, [r7, #28]
}
 800f070:	bf00      	nop
 800f072:	e7fe      	b.n	800f072 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800f074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f076:	681b      	ldr	r3, [r3, #0]
 800f078:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f07a:	6850      	ldr	r0, [r2, #4]
 800f07c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f07e:	6892      	ldr	r2, [r2, #8]
 800f080:	4611      	mov	r1, r2
 800f082:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	2b00      	cmp	r3, #0
 800f088:	f2c0 80aa 	blt.w	800f1e0 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800f08c:	68fb      	ldr	r3, [r7, #12]
 800f08e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800f090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f092:	695b      	ldr	r3, [r3, #20]
 800f094:	2b00      	cmp	r3, #0
 800f096:	d004      	beq.n	800f0a2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f09a:	3304      	adds	r3, #4
 800f09c:	4618      	mov	r0, r3
 800f09e:	f7fe f94f 	bl	800d340 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f0a2:	463b      	mov	r3, r7
 800f0a4:	4618      	mov	r0, r3
 800f0a6:	f7ff ff6b 	bl	800ef80 <prvSampleTimeNow>
 800f0aa:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	2b09      	cmp	r3, #9
 800f0b0:	f200 8097 	bhi.w	800f1e2 <prvProcessReceivedCommands+0x19e>
 800f0b4:	a201      	add	r2, pc, #4	; (adr r2, 800f0bc <prvProcessReceivedCommands+0x78>)
 800f0b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0ba:	bf00      	nop
 800f0bc:	0800f0e5 	.word	0x0800f0e5
 800f0c0:	0800f0e5 	.word	0x0800f0e5
 800f0c4:	0800f0e5 	.word	0x0800f0e5
 800f0c8:	0800f159 	.word	0x0800f159
 800f0cc:	0800f16d 	.word	0x0800f16d
 800f0d0:	0800f1b7 	.word	0x0800f1b7
 800f0d4:	0800f0e5 	.word	0x0800f0e5
 800f0d8:	0800f0e5 	.word	0x0800f0e5
 800f0dc:	0800f159 	.word	0x0800f159
 800f0e0:	0800f16d 	.word	0x0800f16d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f0e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f0ea:	f043 0301 	orr.w	r3, r3, #1
 800f0ee:	b2da      	uxtb	r2, r3
 800f0f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800f0f6:	68ba      	ldr	r2, [r7, #8]
 800f0f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0fa:	699b      	ldr	r3, [r3, #24]
 800f0fc:	18d1      	adds	r1, r2, r3
 800f0fe:	68bb      	ldr	r3, [r7, #8]
 800f100:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f102:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f104:	f7ff ff5c 	bl	800efc0 <prvInsertTimerInActiveList>
 800f108:	4603      	mov	r3, r0
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	d069      	beq.n	800f1e2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f10e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f110:	6a1b      	ldr	r3, [r3, #32]
 800f112:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f114:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f118:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f11c:	f003 0304 	and.w	r3, r3, #4
 800f120:	2b00      	cmp	r3, #0
 800f122:	d05e      	beq.n	800f1e2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800f124:	68ba      	ldr	r2, [r7, #8]
 800f126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f128:	699b      	ldr	r3, [r3, #24]
 800f12a:	441a      	add	r2, r3
 800f12c:	2300      	movs	r3, #0
 800f12e:	9300      	str	r3, [sp, #0]
 800f130:	2300      	movs	r3, #0
 800f132:	2100      	movs	r1, #0
 800f134:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f136:	f7ff fe05 	bl	800ed44 <xTimerGenericCommand>
 800f13a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800f13c:	6a3b      	ldr	r3, [r7, #32]
 800f13e:	2b00      	cmp	r3, #0
 800f140:	d14f      	bne.n	800f1e2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800f142:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f146:	f383 8811 	msr	BASEPRI, r3
 800f14a:	f3bf 8f6f 	isb	sy
 800f14e:	f3bf 8f4f 	dsb	sy
 800f152:	61bb      	str	r3, [r7, #24]
}
 800f154:	bf00      	nop
 800f156:	e7fe      	b.n	800f156 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f15a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f15e:	f023 0301 	bic.w	r3, r3, #1
 800f162:	b2da      	uxtb	r2, r3
 800f164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f166:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800f16a:	e03a      	b.n	800f1e2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f16c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f16e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f172:	f043 0301 	orr.w	r3, r3, #1
 800f176:	b2da      	uxtb	r2, r3
 800f178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f17a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800f17e:	68ba      	ldr	r2, [r7, #8]
 800f180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f182:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800f184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f186:	699b      	ldr	r3, [r3, #24]
 800f188:	2b00      	cmp	r3, #0
 800f18a:	d10a      	bne.n	800f1a2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800f18c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f190:	f383 8811 	msr	BASEPRI, r3
 800f194:	f3bf 8f6f 	isb	sy
 800f198:	f3bf 8f4f 	dsb	sy
 800f19c:	617b      	str	r3, [r7, #20]
}
 800f19e:	bf00      	nop
 800f1a0:	e7fe      	b.n	800f1a0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800f1a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1a4:	699a      	ldr	r2, [r3, #24]
 800f1a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1a8:	18d1      	adds	r1, r2, r3
 800f1aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f1ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f1b0:	f7ff ff06 	bl	800efc0 <prvInsertTimerInActiveList>
					break;
 800f1b4:	e015      	b.n	800f1e2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800f1b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f1bc:	f003 0302 	and.w	r3, r3, #2
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	d103      	bne.n	800f1cc <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800f1c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f1c6:	f000 fbdb 	bl	800f980 <vPortFree>
 800f1ca:	e00a      	b.n	800f1e2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f1cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1ce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f1d2:	f023 0301 	bic.w	r3, r3, #1
 800f1d6:	b2da      	uxtb	r2, r3
 800f1d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800f1de:	e000      	b.n	800f1e2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800f1e0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f1e2:	4b08      	ldr	r3, [pc, #32]	; (800f204 <prvProcessReceivedCommands+0x1c0>)
 800f1e4:	681b      	ldr	r3, [r3, #0]
 800f1e6:	1d39      	adds	r1, r7, #4
 800f1e8:	2200      	movs	r2, #0
 800f1ea:	4618      	mov	r0, r3
 800f1ec:	f7fe fb84 	bl	800d8f8 <xQueueReceive>
 800f1f0:	4603      	mov	r3, r0
 800f1f2:	2b00      	cmp	r3, #0
 800f1f4:	f47f af2a 	bne.w	800f04c <prvProcessReceivedCommands+0x8>
	}
}
 800f1f8:	bf00      	nop
 800f1fa:	bf00      	nop
 800f1fc:	3730      	adds	r7, #48	; 0x30
 800f1fe:	46bd      	mov	sp, r7
 800f200:	bd80      	pop	{r7, pc}
 800f202:	bf00      	nop
 800f204:	20001f70 	.word	0x20001f70

0800f208 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800f208:	b580      	push	{r7, lr}
 800f20a:	b088      	sub	sp, #32
 800f20c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f20e:	e048      	b.n	800f2a2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f210:	4b2d      	ldr	r3, [pc, #180]	; (800f2c8 <prvSwitchTimerLists+0xc0>)
 800f212:	681b      	ldr	r3, [r3, #0]
 800f214:	68db      	ldr	r3, [r3, #12]
 800f216:	681b      	ldr	r3, [r3, #0]
 800f218:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f21a:	4b2b      	ldr	r3, [pc, #172]	; (800f2c8 <prvSwitchTimerLists+0xc0>)
 800f21c:	681b      	ldr	r3, [r3, #0]
 800f21e:	68db      	ldr	r3, [r3, #12]
 800f220:	68db      	ldr	r3, [r3, #12]
 800f222:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f224:	68fb      	ldr	r3, [r7, #12]
 800f226:	3304      	adds	r3, #4
 800f228:	4618      	mov	r0, r3
 800f22a:	f7fe f889 	bl	800d340 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f22e:	68fb      	ldr	r3, [r7, #12]
 800f230:	6a1b      	ldr	r3, [r3, #32]
 800f232:	68f8      	ldr	r0, [r7, #12]
 800f234:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f236:	68fb      	ldr	r3, [r7, #12]
 800f238:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f23c:	f003 0304 	and.w	r3, r3, #4
 800f240:	2b00      	cmp	r3, #0
 800f242:	d02e      	beq.n	800f2a2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800f244:	68fb      	ldr	r3, [r7, #12]
 800f246:	699b      	ldr	r3, [r3, #24]
 800f248:	693a      	ldr	r2, [r7, #16]
 800f24a:	4413      	add	r3, r2
 800f24c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800f24e:	68ba      	ldr	r2, [r7, #8]
 800f250:	693b      	ldr	r3, [r7, #16]
 800f252:	429a      	cmp	r2, r3
 800f254:	d90e      	bls.n	800f274 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800f256:	68fb      	ldr	r3, [r7, #12]
 800f258:	68ba      	ldr	r2, [r7, #8]
 800f25a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f25c:	68fb      	ldr	r3, [r7, #12]
 800f25e:	68fa      	ldr	r2, [r7, #12]
 800f260:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f262:	4b19      	ldr	r3, [pc, #100]	; (800f2c8 <prvSwitchTimerLists+0xc0>)
 800f264:	681a      	ldr	r2, [r3, #0]
 800f266:	68fb      	ldr	r3, [r7, #12]
 800f268:	3304      	adds	r3, #4
 800f26a:	4619      	mov	r1, r3
 800f26c:	4610      	mov	r0, r2
 800f26e:	f7fe f82e 	bl	800d2ce <vListInsert>
 800f272:	e016      	b.n	800f2a2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f274:	2300      	movs	r3, #0
 800f276:	9300      	str	r3, [sp, #0]
 800f278:	2300      	movs	r3, #0
 800f27a:	693a      	ldr	r2, [r7, #16]
 800f27c:	2100      	movs	r1, #0
 800f27e:	68f8      	ldr	r0, [r7, #12]
 800f280:	f7ff fd60 	bl	800ed44 <xTimerGenericCommand>
 800f284:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	2b00      	cmp	r3, #0
 800f28a:	d10a      	bne.n	800f2a2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800f28c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f290:	f383 8811 	msr	BASEPRI, r3
 800f294:	f3bf 8f6f 	isb	sy
 800f298:	f3bf 8f4f 	dsb	sy
 800f29c:	603b      	str	r3, [r7, #0]
}
 800f29e:	bf00      	nop
 800f2a0:	e7fe      	b.n	800f2a0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f2a2:	4b09      	ldr	r3, [pc, #36]	; (800f2c8 <prvSwitchTimerLists+0xc0>)
 800f2a4:	681b      	ldr	r3, [r3, #0]
 800f2a6:	681b      	ldr	r3, [r3, #0]
 800f2a8:	2b00      	cmp	r3, #0
 800f2aa:	d1b1      	bne.n	800f210 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800f2ac:	4b06      	ldr	r3, [pc, #24]	; (800f2c8 <prvSwitchTimerLists+0xc0>)
 800f2ae:	681b      	ldr	r3, [r3, #0]
 800f2b0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800f2b2:	4b06      	ldr	r3, [pc, #24]	; (800f2cc <prvSwitchTimerLists+0xc4>)
 800f2b4:	681b      	ldr	r3, [r3, #0]
 800f2b6:	4a04      	ldr	r2, [pc, #16]	; (800f2c8 <prvSwitchTimerLists+0xc0>)
 800f2b8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800f2ba:	4a04      	ldr	r2, [pc, #16]	; (800f2cc <prvSwitchTimerLists+0xc4>)
 800f2bc:	697b      	ldr	r3, [r7, #20]
 800f2be:	6013      	str	r3, [r2, #0]
}
 800f2c0:	bf00      	nop
 800f2c2:	3718      	adds	r7, #24
 800f2c4:	46bd      	mov	sp, r7
 800f2c6:	bd80      	pop	{r7, pc}
 800f2c8:	20001f68 	.word	0x20001f68
 800f2cc:	20001f6c 	.word	0x20001f6c

0800f2d0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800f2d0:	b580      	push	{r7, lr}
 800f2d2:	b082      	sub	sp, #8
 800f2d4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800f2d6:	f000 f965 	bl	800f5a4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800f2da:	4b15      	ldr	r3, [pc, #84]	; (800f330 <prvCheckForValidListAndQueue+0x60>)
 800f2dc:	681b      	ldr	r3, [r3, #0]
 800f2de:	2b00      	cmp	r3, #0
 800f2e0:	d120      	bne.n	800f324 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800f2e2:	4814      	ldr	r0, [pc, #80]	; (800f334 <prvCheckForValidListAndQueue+0x64>)
 800f2e4:	f7fd ffa2 	bl	800d22c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800f2e8:	4813      	ldr	r0, [pc, #76]	; (800f338 <prvCheckForValidListAndQueue+0x68>)
 800f2ea:	f7fd ff9f 	bl	800d22c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800f2ee:	4b13      	ldr	r3, [pc, #76]	; (800f33c <prvCheckForValidListAndQueue+0x6c>)
 800f2f0:	4a10      	ldr	r2, [pc, #64]	; (800f334 <prvCheckForValidListAndQueue+0x64>)
 800f2f2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800f2f4:	4b12      	ldr	r3, [pc, #72]	; (800f340 <prvCheckForValidListAndQueue+0x70>)
 800f2f6:	4a10      	ldr	r2, [pc, #64]	; (800f338 <prvCheckForValidListAndQueue+0x68>)
 800f2f8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800f2fa:	2300      	movs	r3, #0
 800f2fc:	9300      	str	r3, [sp, #0]
 800f2fe:	4b11      	ldr	r3, [pc, #68]	; (800f344 <prvCheckForValidListAndQueue+0x74>)
 800f300:	4a11      	ldr	r2, [pc, #68]	; (800f348 <prvCheckForValidListAndQueue+0x78>)
 800f302:	2110      	movs	r1, #16
 800f304:	200a      	movs	r0, #10
 800f306:	f7fe f8a0 	bl	800d44a <xQueueGenericCreateStatic>
 800f30a:	4603      	mov	r3, r0
 800f30c:	4a08      	ldr	r2, [pc, #32]	; (800f330 <prvCheckForValidListAndQueue+0x60>)
 800f30e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800f310:	4b07      	ldr	r3, [pc, #28]	; (800f330 <prvCheckForValidListAndQueue+0x60>)
 800f312:	681b      	ldr	r3, [r3, #0]
 800f314:	2b00      	cmp	r3, #0
 800f316:	d005      	beq.n	800f324 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800f318:	4b05      	ldr	r3, [pc, #20]	; (800f330 <prvCheckForValidListAndQueue+0x60>)
 800f31a:	681b      	ldr	r3, [r3, #0]
 800f31c:	490b      	ldr	r1, [pc, #44]	; (800f34c <prvCheckForValidListAndQueue+0x7c>)
 800f31e:	4618      	mov	r0, r3
 800f320:	f7fe fd8a 	bl	800de38 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f324:	f000 f96e 	bl	800f604 <vPortExitCritical>
}
 800f328:	bf00      	nop
 800f32a:	46bd      	mov	sp, r7
 800f32c:	bd80      	pop	{r7, pc}
 800f32e:	bf00      	nop
 800f330:	20001f70 	.word	0x20001f70
 800f334:	20001f40 	.word	0x20001f40
 800f338:	20001f54 	.word	0x20001f54
 800f33c:	20001f68 	.word	0x20001f68
 800f340:	20001f6c 	.word	0x20001f6c
 800f344:	2000201c 	.word	0x2000201c
 800f348:	20001f7c 	.word	0x20001f7c
 800f34c:	080145f4 	.word	0x080145f4

0800f350 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800f350:	b480      	push	{r7}
 800f352:	b085      	sub	sp, #20
 800f354:	af00      	add	r7, sp, #0
 800f356:	60f8      	str	r0, [r7, #12]
 800f358:	60b9      	str	r1, [r7, #8]
 800f35a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800f35c:	68fb      	ldr	r3, [r7, #12]
 800f35e:	3b04      	subs	r3, #4
 800f360:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f362:	68fb      	ldr	r3, [r7, #12]
 800f364:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800f368:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f36a:	68fb      	ldr	r3, [r7, #12]
 800f36c:	3b04      	subs	r3, #4
 800f36e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f370:	68bb      	ldr	r3, [r7, #8]
 800f372:	f023 0201 	bic.w	r2, r3, #1
 800f376:	68fb      	ldr	r3, [r7, #12]
 800f378:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f37a:	68fb      	ldr	r3, [r7, #12]
 800f37c:	3b04      	subs	r3, #4
 800f37e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f380:	4a0c      	ldr	r2, [pc, #48]	; (800f3b4 <pxPortInitialiseStack+0x64>)
 800f382:	68fb      	ldr	r3, [r7, #12]
 800f384:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800f386:	68fb      	ldr	r3, [r7, #12]
 800f388:	3b14      	subs	r3, #20
 800f38a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f38c:	687a      	ldr	r2, [r7, #4]
 800f38e:	68fb      	ldr	r3, [r7, #12]
 800f390:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800f392:	68fb      	ldr	r3, [r7, #12]
 800f394:	3b04      	subs	r3, #4
 800f396:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800f398:	68fb      	ldr	r3, [r7, #12]
 800f39a:	f06f 0202 	mvn.w	r2, #2
 800f39e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f3a0:	68fb      	ldr	r3, [r7, #12]
 800f3a2:	3b20      	subs	r3, #32
 800f3a4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800f3a6:	68fb      	ldr	r3, [r7, #12]
}
 800f3a8:	4618      	mov	r0, r3
 800f3aa:	3714      	adds	r7, #20
 800f3ac:	46bd      	mov	sp, r7
 800f3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3b2:	4770      	bx	lr
 800f3b4:	0800f3b9 	.word	0x0800f3b9

0800f3b8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f3b8:	b480      	push	{r7}
 800f3ba:	b085      	sub	sp, #20
 800f3bc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800f3be:	2300      	movs	r3, #0
 800f3c0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f3c2:	4b12      	ldr	r3, [pc, #72]	; (800f40c <prvTaskExitError+0x54>)
 800f3c4:	681b      	ldr	r3, [r3, #0]
 800f3c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f3ca:	d00a      	beq.n	800f3e2 <prvTaskExitError+0x2a>
	__asm volatile
 800f3cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3d0:	f383 8811 	msr	BASEPRI, r3
 800f3d4:	f3bf 8f6f 	isb	sy
 800f3d8:	f3bf 8f4f 	dsb	sy
 800f3dc:	60fb      	str	r3, [r7, #12]
}
 800f3de:	bf00      	nop
 800f3e0:	e7fe      	b.n	800f3e0 <prvTaskExitError+0x28>
	__asm volatile
 800f3e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3e6:	f383 8811 	msr	BASEPRI, r3
 800f3ea:	f3bf 8f6f 	isb	sy
 800f3ee:	f3bf 8f4f 	dsb	sy
 800f3f2:	60bb      	str	r3, [r7, #8]
}
 800f3f4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f3f6:	bf00      	nop
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	2b00      	cmp	r3, #0
 800f3fc:	d0fc      	beq.n	800f3f8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800f3fe:	bf00      	nop
 800f400:	bf00      	nop
 800f402:	3714      	adds	r7, #20
 800f404:	46bd      	mov	sp, r7
 800f406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f40a:	4770      	bx	lr
 800f40c:	20000074 	.word	0x20000074

0800f410 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f410:	4b07      	ldr	r3, [pc, #28]	; (800f430 <pxCurrentTCBConst2>)
 800f412:	6819      	ldr	r1, [r3, #0]
 800f414:	6808      	ldr	r0, [r1, #0]
 800f416:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f41a:	f380 8809 	msr	PSP, r0
 800f41e:	f3bf 8f6f 	isb	sy
 800f422:	f04f 0000 	mov.w	r0, #0
 800f426:	f380 8811 	msr	BASEPRI, r0
 800f42a:	4770      	bx	lr
 800f42c:	f3af 8000 	nop.w

0800f430 <pxCurrentTCBConst2>:
 800f430:	20001a40 	.word	0x20001a40
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f434:	bf00      	nop
 800f436:	bf00      	nop

0800f438 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f438:	4808      	ldr	r0, [pc, #32]	; (800f45c <prvPortStartFirstTask+0x24>)
 800f43a:	6800      	ldr	r0, [r0, #0]
 800f43c:	6800      	ldr	r0, [r0, #0]
 800f43e:	f380 8808 	msr	MSP, r0
 800f442:	f04f 0000 	mov.w	r0, #0
 800f446:	f380 8814 	msr	CONTROL, r0
 800f44a:	b662      	cpsie	i
 800f44c:	b661      	cpsie	f
 800f44e:	f3bf 8f4f 	dsb	sy
 800f452:	f3bf 8f6f 	isb	sy
 800f456:	df00      	svc	0
 800f458:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f45a:	bf00      	nop
 800f45c:	e000ed08 	.word	0xe000ed08

0800f460 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f460:	b580      	push	{r7, lr}
 800f462:	b086      	sub	sp, #24
 800f464:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800f466:	4b46      	ldr	r3, [pc, #280]	; (800f580 <xPortStartScheduler+0x120>)
 800f468:	681b      	ldr	r3, [r3, #0]
 800f46a:	4a46      	ldr	r2, [pc, #280]	; (800f584 <xPortStartScheduler+0x124>)
 800f46c:	4293      	cmp	r3, r2
 800f46e:	d10a      	bne.n	800f486 <xPortStartScheduler+0x26>
	__asm volatile
 800f470:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f474:	f383 8811 	msr	BASEPRI, r3
 800f478:	f3bf 8f6f 	isb	sy
 800f47c:	f3bf 8f4f 	dsb	sy
 800f480:	613b      	str	r3, [r7, #16]
}
 800f482:	bf00      	nop
 800f484:	e7fe      	b.n	800f484 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800f486:	4b3e      	ldr	r3, [pc, #248]	; (800f580 <xPortStartScheduler+0x120>)
 800f488:	681b      	ldr	r3, [r3, #0]
 800f48a:	4a3f      	ldr	r2, [pc, #252]	; (800f588 <xPortStartScheduler+0x128>)
 800f48c:	4293      	cmp	r3, r2
 800f48e:	d10a      	bne.n	800f4a6 <xPortStartScheduler+0x46>
	__asm volatile
 800f490:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f494:	f383 8811 	msr	BASEPRI, r3
 800f498:	f3bf 8f6f 	isb	sy
 800f49c:	f3bf 8f4f 	dsb	sy
 800f4a0:	60fb      	str	r3, [r7, #12]
}
 800f4a2:	bf00      	nop
 800f4a4:	e7fe      	b.n	800f4a4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f4a6:	4b39      	ldr	r3, [pc, #228]	; (800f58c <xPortStartScheduler+0x12c>)
 800f4a8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f4aa:	697b      	ldr	r3, [r7, #20]
 800f4ac:	781b      	ldrb	r3, [r3, #0]
 800f4ae:	b2db      	uxtb	r3, r3
 800f4b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f4b2:	697b      	ldr	r3, [r7, #20]
 800f4b4:	22ff      	movs	r2, #255	; 0xff
 800f4b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f4b8:	697b      	ldr	r3, [r7, #20]
 800f4ba:	781b      	ldrb	r3, [r3, #0]
 800f4bc:	b2db      	uxtb	r3, r3
 800f4be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f4c0:	78fb      	ldrb	r3, [r7, #3]
 800f4c2:	b2db      	uxtb	r3, r3
 800f4c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800f4c8:	b2da      	uxtb	r2, r3
 800f4ca:	4b31      	ldr	r3, [pc, #196]	; (800f590 <xPortStartScheduler+0x130>)
 800f4cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f4ce:	4b31      	ldr	r3, [pc, #196]	; (800f594 <xPortStartScheduler+0x134>)
 800f4d0:	2207      	movs	r2, #7
 800f4d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f4d4:	e009      	b.n	800f4ea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800f4d6:	4b2f      	ldr	r3, [pc, #188]	; (800f594 <xPortStartScheduler+0x134>)
 800f4d8:	681b      	ldr	r3, [r3, #0]
 800f4da:	3b01      	subs	r3, #1
 800f4dc:	4a2d      	ldr	r2, [pc, #180]	; (800f594 <xPortStartScheduler+0x134>)
 800f4de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f4e0:	78fb      	ldrb	r3, [r7, #3]
 800f4e2:	b2db      	uxtb	r3, r3
 800f4e4:	005b      	lsls	r3, r3, #1
 800f4e6:	b2db      	uxtb	r3, r3
 800f4e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f4ea:	78fb      	ldrb	r3, [r7, #3]
 800f4ec:	b2db      	uxtb	r3, r3
 800f4ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f4f2:	2b80      	cmp	r3, #128	; 0x80
 800f4f4:	d0ef      	beq.n	800f4d6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f4f6:	4b27      	ldr	r3, [pc, #156]	; (800f594 <xPortStartScheduler+0x134>)
 800f4f8:	681b      	ldr	r3, [r3, #0]
 800f4fa:	f1c3 0307 	rsb	r3, r3, #7
 800f4fe:	2b04      	cmp	r3, #4
 800f500:	d00a      	beq.n	800f518 <xPortStartScheduler+0xb8>
	__asm volatile
 800f502:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f506:	f383 8811 	msr	BASEPRI, r3
 800f50a:	f3bf 8f6f 	isb	sy
 800f50e:	f3bf 8f4f 	dsb	sy
 800f512:	60bb      	str	r3, [r7, #8]
}
 800f514:	bf00      	nop
 800f516:	e7fe      	b.n	800f516 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f518:	4b1e      	ldr	r3, [pc, #120]	; (800f594 <xPortStartScheduler+0x134>)
 800f51a:	681b      	ldr	r3, [r3, #0]
 800f51c:	021b      	lsls	r3, r3, #8
 800f51e:	4a1d      	ldr	r2, [pc, #116]	; (800f594 <xPortStartScheduler+0x134>)
 800f520:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f522:	4b1c      	ldr	r3, [pc, #112]	; (800f594 <xPortStartScheduler+0x134>)
 800f524:	681b      	ldr	r3, [r3, #0]
 800f526:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f52a:	4a1a      	ldr	r2, [pc, #104]	; (800f594 <xPortStartScheduler+0x134>)
 800f52c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	b2da      	uxtb	r2, r3
 800f532:	697b      	ldr	r3, [r7, #20]
 800f534:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f536:	4b18      	ldr	r3, [pc, #96]	; (800f598 <xPortStartScheduler+0x138>)
 800f538:	681b      	ldr	r3, [r3, #0]
 800f53a:	4a17      	ldr	r2, [pc, #92]	; (800f598 <xPortStartScheduler+0x138>)
 800f53c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800f540:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f542:	4b15      	ldr	r3, [pc, #84]	; (800f598 <xPortStartScheduler+0x138>)
 800f544:	681b      	ldr	r3, [r3, #0]
 800f546:	4a14      	ldr	r2, [pc, #80]	; (800f598 <xPortStartScheduler+0x138>)
 800f548:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800f54c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f54e:	f000 f8dd 	bl	800f70c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f552:	4b12      	ldr	r3, [pc, #72]	; (800f59c <xPortStartScheduler+0x13c>)
 800f554:	2200      	movs	r2, #0
 800f556:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f558:	f000 f8fc 	bl	800f754 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f55c:	4b10      	ldr	r3, [pc, #64]	; (800f5a0 <xPortStartScheduler+0x140>)
 800f55e:	681b      	ldr	r3, [r3, #0]
 800f560:	4a0f      	ldr	r2, [pc, #60]	; (800f5a0 <xPortStartScheduler+0x140>)
 800f562:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800f566:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f568:	f7ff ff66 	bl	800f438 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800f56c:	f7ff f852 	bl	800e614 <vTaskSwitchContext>
	prvTaskExitError();
 800f570:	f7ff ff22 	bl	800f3b8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f574:	2300      	movs	r3, #0
}
 800f576:	4618      	mov	r0, r3
 800f578:	3718      	adds	r7, #24
 800f57a:	46bd      	mov	sp, r7
 800f57c:	bd80      	pop	{r7, pc}
 800f57e:	bf00      	nop
 800f580:	e000ed00 	.word	0xe000ed00
 800f584:	410fc271 	.word	0x410fc271
 800f588:	410fc270 	.word	0x410fc270
 800f58c:	e000e400 	.word	0xe000e400
 800f590:	2000206c 	.word	0x2000206c
 800f594:	20002070 	.word	0x20002070
 800f598:	e000ed20 	.word	0xe000ed20
 800f59c:	20000074 	.word	0x20000074
 800f5a0:	e000ef34 	.word	0xe000ef34

0800f5a4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f5a4:	b480      	push	{r7}
 800f5a6:	b083      	sub	sp, #12
 800f5a8:	af00      	add	r7, sp, #0
	__asm volatile
 800f5aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5ae:	f383 8811 	msr	BASEPRI, r3
 800f5b2:	f3bf 8f6f 	isb	sy
 800f5b6:	f3bf 8f4f 	dsb	sy
 800f5ba:	607b      	str	r3, [r7, #4]
}
 800f5bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f5be:	4b0f      	ldr	r3, [pc, #60]	; (800f5fc <vPortEnterCritical+0x58>)
 800f5c0:	681b      	ldr	r3, [r3, #0]
 800f5c2:	3301      	adds	r3, #1
 800f5c4:	4a0d      	ldr	r2, [pc, #52]	; (800f5fc <vPortEnterCritical+0x58>)
 800f5c6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f5c8:	4b0c      	ldr	r3, [pc, #48]	; (800f5fc <vPortEnterCritical+0x58>)
 800f5ca:	681b      	ldr	r3, [r3, #0]
 800f5cc:	2b01      	cmp	r3, #1
 800f5ce:	d10f      	bne.n	800f5f0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f5d0:	4b0b      	ldr	r3, [pc, #44]	; (800f600 <vPortEnterCritical+0x5c>)
 800f5d2:	681b      	ldr	r3, [r3, #0]
 800f5d4:	b2db      	uxtb	r3, r3
 800f5d6:	2b00      	cmp	r3, #0
 800f5d8:	d00a      	beq.n	800f5f0 <vPortEnterCritical+0x4c>
	__asm volatile
 800f5da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5de:	f383 8811 	msr	BASEPRI, r3
 800f5e2:	f3bf 8f6f 	isb	sy
 800f5e6:	f3bf 8f4f 	dsb	sy
 800f5ea:	603b      	str	r3, [r7, #0]
}
 800f5ec:	bf00      	nop
 800f5ee:	e7fe      	b.n	800f5ee <vPortEnterCritical+0x4a>
	}
}
 800f5f0:	bf00      	nop
 800f5f2:	370c      	adds	r7, #12
 800f5f4:	46bd      	mov	sp, r7
 800f5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5fa:	4770      	bx	lr
 800f5fc:	20000074 	.word	0x20000074
 800f600:	e000ed04 	.word	0xe000ed04

0800f604 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f604:	b480      	push	{r7}
 800f606:	b083      	sub	sp, #12
 800f608:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f60a:	4b12      	ldr	r3, [pc, #72]	; (800f654 <vPortExitCritical+0x50>)
 800f60c:	681b      	ldr	r3, [r3, #0]
 800f60e:	2b00      	cmp	r3, #0
 800f610:	d10a      	bne.n	800f628 <vPortExitCritical+0x24>
	__asm volatile
 800f612:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f616:	f383 8811 	msr	BASEPRI, r3
 800f61a:	f3bf 8f6f 	isb	sy
 800f61e:	f3bf 8f4f 	dsb	sy
 800f622:	607b      	str	r3, [r7, #4]
}
 800f624:	bf00      	nop
 800f626:	e7fe      	b.n	800f626 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800f628:	4b0a      	ldr	r3, [pc, #40]	; (800f654 <vPortExitCritical+0x50>)
 800f62a:	681b      	ldr	r3, [r3, #0]
 800f62c:	3b01      	subs	r3, #1
 800f62e:	4a09      	ldr	r2, [pc, #36]	; (800f654 <vPortExitCritical+0x50>)
 800f630:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f632:	4b08      	ldr	r3, [pc, #32]	; (800f654 <vPortExitCritical+0x50>)
 800f634:	681b      	ldr	r3, [r3, #0]
 800f636:	2b00      	cmp	r3, #0
 800f638:	d105      	bne.n	800f646 <vPortExitCritical+0x42>
 800f63a:	2300      	movs	r3, #0
 800f63c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f63e:	683b      	ldr	r3, [r7, #0]
 800f640:	f383 8811 	msr	BASEPRI, r3
}
 800f644:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800f646:	bf00      	nop
 800f648:	370c      	adds	r7, #12
 800f64a:	46bd      	mov	sp, r7
 800f64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f650:	4770      	bx	lr
 800f652:	bf00      	nop
 800f654:	20000074 	.word	0x20000074
	...

0800f660 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800f660:	f3ef 8009 	mrs	r0, PSP
 800f664:	f3bf 8f6f 	isb	sy
 800f668:	4b15      	ldr	r3, [pc, #84]	; (800f6c0 <pxCurrentTCBConst>)
 800f66a:	681a      	ldr	r2, [r3, #0]
 800f66c:	f01e 0f10 	tst.w	lr, #16
 800f670:	bf08      	it	eq
 800f672:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f676:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f67a:	6010      	str	r0, [r2, #0]
 800f67c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f680:	f04f 0050 	mov.w	r0, #80	; 0x50
 800f684:	f380 8811 	msr	BASEPRI, r0
 800f688:	f3bf 8f4f 	dsb	sy
 800f68c:	f3bf 8f6f 	isb	sy
 800f690:	f7fe ffc0 	bl	800e614 <vTaskSwitchContext>
 800f694:	f04f 0000 	mov.w	r0, #0
 800f698:	f380 8811 	msr	BASEPRI, r0
 800f69c:	bc09      	pop	{r0, r3}
 800f69e:	6819      	ldr	r1, [r3, #0]
 800f6a0:	6808      	ldr	r0, [r1, #0]
 800f6a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6a6:	f01e 0f10 	tst.w	lr, #16
 800f6aa:	bf08      	it	eq
 800f6ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f6b0:	f380 8809 	msr	PSP, r0
 800f6b4:	f3bf 8f6f 	isb	sy
 800f6b8:	4770      	bx	lr
 800f6ba:	bf00      	nop
 800f6bc:	f3af 8000 	nop.w

0800f6c0 <pxCurrentTCBConst>:
 800f6c0:	20001a40 	.word	0x20001a40
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800f6c4:	bf00      	nop
 800f6c6:	bf00      	nop

0800f6c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800f6c8:	b580      	push	{r7, lr}
 800f6ca:	b082      	sub	sp, #8
 800f6cc:	af00      	add	r7, sp, #0
	__asm volatile
 800f6ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6d2:	f383 8811 	msr	BASEPRI, r3
 800f6d6:	f3bf 8f6f 	isb	sy
 800f6da:	f3bf 8f4f 	dsb	sy
 800f6de:	607b      	str	r3, [r7, #4]
}
 800f6e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800f6e2:	f7fe ff01 	bl	800e4e8 <xTaskIncrementTick>
 800f6e6:	4603      	mov	r3, r0
 800f6e8:	2b00      	cmp	r3, #0
 800f6ea:	d003      	beq.n	800f6f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f6ec:	4b06      	ldr	r3, [pc, #24]	; (800f708 <xPortSysTickHandler+0x40>)
 800f6ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f6f2:	601a      	str	r2, [r3, #0]
 800f6f4:	2300      	movs	r3, #0
 800f6f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f6f8:	683b      	ldr	r3, [r7, #0]
 800f6fa:	f383 8811 	msr	BASEPRI, r3
}
 800f6fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800f700:	bf00      	nop
 800f702:	3708      	adds	r7, #8
 800f704:	46bd      	mov	sp, r7
 800f706:	bd80      	pop	{r7, pc}
 800f708:	e000ed04 	.word	0xe000ed04

0800f70c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800f70c:	b480      	push	{r7}
 800f70e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f710:	4b0b      	ldr	r3, [pc, #44]	; (800f740 <vPortSetupTimerInterrupt+0x34>)
 800f712:	2200      	movs	r2, #0
 800f714:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f716:	4b0b      	ldr	r3, [pc, #44]	; (800f744 <vPortSetupTimerInterrupt+0x38>)
 800f718:	2200      	movs	r2, #0
 800f71a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f71c:	4b0a      	ldr	r3, [pc, #40]	; (800f748 <vPortSetupTimerInterrupt+0x3c>)
 800f71e:	681b      	ldr	r3, [r3, #0]
 800f720:	4a0a      	ldr	r2, [pc, #40]	; (800f74c <vPortSetupTimerInterrupt+0x40>)
 800f722:	fba2 2303 	umull	r2, r3, r2, r3
 800f726:	099b      	lsrs	r3, r3, #6
 800f728:	4a09      	ldr	r2, [pc, #36]	; (800f750 <vPortSetupTimerInterrupt+0x44>)
 800f72a:	3b01      	subs	r3, #1
 800f72c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800f72e:	4b04      	ldr	r3, [pc, #16]	; (800f740 <vPortSetupTimerInterrupt+0x34>)
 800f730:	2207      	movs	r2, #7
 800f732:	601a      	str	r2, [r3, #0]
}
 800f734:	bf00      	nop
 800f736:	46bd      	mov	sp, r7
 800f738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f73c:	4770      	bx	lr
 800f73e:	bf00      	nop
 800f740:	e000e010 	.word	0xe000e010
 800f744:	e000e018 	.word	0xe000e018
 800f748:	20000068 	.word	0x20000068
 800f74c:	10624dd3 	.word	0x10624dd3
 800f750:	e000e014 	.word	0xe000e014

0800f754 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800f754:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800f764 <vPortEnableVFP+0x10>
 800f758:	6801      	ldr	r1, [r0, #0]
 800f75a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800f75e:	6001      	str	r1, [r0, #0]
 800f760:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800f762:	bf00      	nop
 800f764:	e000ed88 	.word	0xe000ed88

0800f768 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800f768:	b480      	push	{r7}
 800f76a:	b085      	sub	sp, #20
 800f76c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800f76e:	f3ef 8305 	mrs	r3, IPSR
 800f772:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800f774:	68fb      	ldr	r3, [r7, #12]
 800f776:	2b0f      	cmp	r3, #15
 800f778:	d914      	bls.n	800f7a4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800f77a:	4a17      	ldr	r2, [pc, #92]	; (800f7d8 <vPortValidateInterruptPriority+0x70>)
 800f77c:	68fb      	ldr	r3, [r7, #12]
 800f77e:	4413      	add	r3, r2
 800f780:	781b      	ldrb	r3, [r3, #0]
 800f782:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800f784:	4b15      	ldr	r3, [pc, #84]	; (800f7dc <vPortValidateInterruptPriority+0x74>)
 800f786:	781b      	ldrb	r3, [r3, #0]
 800f788:	7afa      	ldrb	r2, [r7, #11]
 800f78a:	429a      	cmp	r2, r3
 800f78c:	d20a      	bcs.n	800f7a4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800f78e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f792:	f383 8811 	msr	BASEPRI, r3
 800f796:	f3bf 8f6f 	isb	sy
 800f79a:	f3bf 8f4f 	dsb	sy
 800f79e:	607b      	str	r3, [r7, #4]
}
 800f7a0:	bf00      	nop
 800f7a2:	e7fe      	b.n	800f7a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800f7a4:	4b0e      	ldr	r3, [pc, #56]	; (800f7e0 <vPortValidateInterruptPriority+0x78>)
 800f7a6:	681b      	ldr	r3, [r3, #0]
 800f7a8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800f7ac:	4b0d      	ldr	r3, [pc, #52]	; (800f7e4 <vPortValidateInterruptPriority+0x7c>)
 800f7ae:	681b      	ldr	r3, [r3, #0]
 800f7b0:	429a      	cmp	r2, r3
 800f7b2:	d90a      	bls.n	800f7ca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800f7b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7b8:	f383 8811 	msr	BASEPRI, r3
 800f7bc:	f3bf 8f6f 	isb	sy
 800f7c0:	f3bf 8f4f 	dsb	sy
 800f7c4:	603b      	str	r3, [r7, #0]
}
 800f7c6:	bf00      	nop
 800f7c8:	e7fe      	b.n	800f7c8 <vPortValidateInterruptPriority+0x60>
	}
 800f7ca:	bf00      	nop
 800f7cc:	3714      	adds	r7, #20
 800f7ce:	46bd      	mov	sp, r7
 800f7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7d4:	4770      	bx	lr
 800f7d6:	bf00      	nop
 800f7d8:	e000e3f0 	.word	0xe000e3f0
 800f7dc:	2000206c 	.word	0x2000206c
 800f7e0:	e000ed0c 	.word	0xe000ed0c
 800f7e4:	20002070 	.word	0x20002070

0800f7e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800f7e8:	b580      	push	{r7, lr}
 800f7ea:	b08a      	sub	sp, #40	; 0x28
 800f7ec:	af00      	add	r7, sp, #0
 800f7ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800f7f0:	2300      	movs	r3, #0
 800f7f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800f7f4:	f7fe fdca 	bl	800e38c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800f7f8:	4b5b      	ldr	r3, [pc, #364]	; (800f968 <pvPortMalloc+0x180>)
 800f7fa:	681b      	ldr	r3, [r3, #0]
 800f7fc:	2b00      	cmp	r3, #0
 800f7fe:	d101      	bne.n	800f804 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800f800:	f000 f920 	bl	800fa44 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f804:	4b59      	ldr	r3, [pc, #356]	; (800f96c <pvPortMalloc+0x184>)
 800f806:	681a      	ldr	r2, [r3, #0]
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	4013      	ands	r3, r2
 800f80c:	2b00      	cmp	r3, #0
 800f80e:	f040 8093 	bne.w	800f938 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	2b00      	cmp	r3, #0
 800f816:	d01d      	beq.n	800f854 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800f818:	2208      	movs	r2, #8
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	4413      	add	r3, r2
 800f81e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	f003 0307 	and.w	r3, r3, #7
 800f826:	2b00      	cmp	r3, #0
 800f828:	d014      	beq.n	800f854 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	f023 0307 	bic.w	r3, r3, #7
 800f830:	3308      	adds	r3, #8
 800f832:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	f003 0307 	and.w	r3, r3, #7
 800f83a:	2b00      	cmp	r3, #0
 800f83c:	d00a      	beq.n	800f854 <pvPortMalloc+0x6c>
	__asm volatile
 800f83e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f842:	f383 8811 	msr	BASEPRI, r3
 800f846:	f3bf 8f6f 	isb	sy
 800f84a:	f3bf 8f4f 	dsb	sy
 800f84e:	617b      	str	r3, [r7, #20]
}
 800f850:	bf00      	nop
 800f852:	e7fe      	b.n	800f852 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	2b00      	cmp	r3, #0
 800f858:	d06e      	beq.n	800f938 <pvPortMalloc+0x150>
 800f85a:	4b45      	ldr	r3, [pc, #276]	; (800f970 <pvPortMalloc+0x188>)
 800f85c:	681b      	ldr	r3, [r3, #0]
 800f85e:	687a      	ldr	r2, [r7, #4]
 800f860:	429a      	cmp	r2, r3
 800f862:	d869      	bhi.n	800f938 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800f864:	4b43      	ldr	r3, [pc, #268]	; (800f974 <pvPortMalloc+0x18c>)
 800f866:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800f868:	4b42      	ldr	r3, [pc, #264]	; (800f974 <pvPortMalloc+0x18c>)
 800f86a:	681b      	ldr	r3, [r3, #0]
 800f86c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f86e:	e004      	b.n	800f87a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800f870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f872:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800f874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f876:	681b      	ldr	r3, [r3, #0]
 800f878:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f87a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f87c:	685b      	ldr	r3, [r3, #4]
 800f87e:	687a      	ldr	r2, [r7, #4]
 800f880:	429a      	cmp	r2, r3
 800f882:	d903      	bls.n	800f88c <pvPortMalloc+0xa4>
 800f884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f886:	681b      	ldr	r3, [r3, #0]
 800f888:	2b00      	cmp	r3, #0
 800f88a:	d1f1      	bne.n	800f870 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800f88c:	4b36      	ldr	r3, [pc, #216]	; (800f968 <pvPortMalloc+0x180>)
 800f88e:	681b      	ldr	r3, [r3, #0]
 800f890:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f892:	429a      	cmp	r2, r3
 800f894:	d050      	beq.n	800f938 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f896:	6a3b      	ldr	r3, [r7, #32]
 800f898:	681b      	ldr	r3, [r3, #0]
 800f89a:	2208      	movs	r2, #8
 800f89c:	4413      	add	r3, r2
 800f89e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f8a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8a2:	681a      	ldr	r2, [r3, #0]
 800f8a4:	6a3b      	ldr	r3, [r7, #32]
 800f8a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f8a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8aa:	685a      	ldr	r2, [r3, #4]
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	1ad2      	subs	r2, r2, r3
 800f8b0:	2308      	movs	r3, #8
 800f8b2:	005b      	lsls	r3, r3, #1
 800f8b4:	429a      	cmp	r2, r3
 800f8b6:	d91f      	bls.n	800f8f8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f8b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	4413      	add	r3, r2
 800f8be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f8c0:	69bb      	ldr	r3, [r7, #24]
 800f8c2:	f003 0307 	and.w	r3, r3, #7
 800f8c6:	2b00      	cmp	r3, #0
 800f8c8:	d00a      	beq.n	800f8e0 <pvPortMalloc+0xf8>
	__asm volatile
 800f8ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8ce:	f383 8811 	msr	BASEPRI, r3
 800f8d2:	f3bf 8f6f 	isb	sy
 800f8d6:	f3bf 8f4f 	dsb	sy
 800f8da:	613b      	str	r3, [r7, #16]
}
 800f8dc:	bf00      	nop
 800f8de:	e7fe      	b.n	800f8de <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f8e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8e2:	685a      	ldr	r2, [r3, #4]
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	1ad2      	subs	r2, r2, r3
 800f8e8:	69bb      	ldr	r3, [r7, #24]
 800f8ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f8ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8ee:	687a      	ldr	r2, [r7, #4]
 800f8f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800f8f2:	69b8      	ldr	r0, [r7, #24]
 800f8f4:	f000 f908 	bl	800fb08 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f8f8:	4b1d      	ldr	r3, [pc, #116]	; (800f970 <pvPortMalloc+0x188>)
 800f8fa:	681a      	ldr	r2, [r3, #0]
 800f8fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8fe:	685b      	ldr	r3, [r3, #4]
 800f900:	1ad3      	subs	r3, r2, r3
 800f902:	4a1b      	ldr	r2, [pc, #108]	; (800f970 <pvPortMalloc+0x188>)
 800f904:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f906:	4b1a      	ldr	r3, [pc, #104]	; (800f970 <pvPortMalloc+0x188>)
 800f908:	681a      	ldr	r2, [r3, #0]
 800f90a:	4b1b      	ldr	r3, [pc, #108]	; (800f978 <pvPortMalloc+0x190>)
 800f90c:	681b      	ldr	r3, [r3, #0]
 800f90e:	429a      	cmp	r2, r3
 800f910:	d203      	bcs.n	800f91a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f912:	4b17      	ldr	r3, [pc, #92]	; (800f970 <pvPortMalloc+0x188>)
 800f914:	681b      	ldr	r3, [r3, #0]
 800f916:	4a18      	ldr	r2, [pc, #96]	; (800f978 <pvPortMalloc+0x190>)
 800f918:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f91a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f91c:	685a      	ldr	r2, [r3, #4]
 800f91e:	4b13      	ldr	r3, [pc, #76]	; (800f96c <pvPortMalloc+0x184>)
 800f920:	681b      	ldr	r3, [r3, #0]
 800f922:	431a      	orrs	r2, r3
 800f924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f926:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f92a:	2200      	movs	r2, #0
 800f92c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800f92e:	4b13      	ldr	r3, [pc, #76]	; (800f97c <pvPortMalloc+0x194>)
 800f930:	681b      	ldr	r3, [r3, #0]
 800f932:	3301      	adds	r3, #1
 800f934:	4a11      	ldr	r2, [pc, #68]	; (800f97c <pvPortMalloc+0x194>)
 800f936:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800f938:	f7fe fd36 	bl	800e3a8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800f93c:	69fb      	ldr	r3, [r7, #28]
 800f93e:	f003 0307 	and.w	r3, r3, #7
 800f942:	2b00      	cmp	r3, #0
 800f944:	d00a      	beq.n	800f95c <pvPortMalloc+0x174>
	__asm volatile
 800f946:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f94a:	f383 8811 	msr	BASEPRI, r3
 800f94e:	f3bf 8f6f 	isb	sy
 800f952:	f3bf 8f4f 	dsb	sy
 800f956:	60fb      	str	r3, [r7, #12]
}
 800f958:	bf00      	nop
 800f95a:	e7fe      	b.n	800f95a <pvPortMalloc+0x172>
	return pvReturn;
 800f95c:	69fb      	ldr	r3, [r7, #28]
}
 800f95e:	4618      	mov	r0, r3
 800f960:	3728      	adds	r7, #40	; 0x28
 800f962:	46bd      	mov	sp, r7
 800f964:	bd80      	pop	{r7, pc}
 800f966:	bf00      	nop
 800f968:	20005c7c 	.word	0x20005c7c
 800f96c:	20005c90 	.word	0x20005c90
 800f970:	20005c80 	.word	0x20005c80
 800f974:	20005c74 	.word	0x20005c74
 800f978:	20005c84 	.word	0x20005c84
 800f97c:	20005c88 	.word	0x20005c88

0800f980 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800f980:	b580      	push	{r7, lr}
 800f982:	b086      	sub	sp, #24
 800f984:	af00      	add	r7, sp, #0
 800f986:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	2b00      	cmp	r3, #0
 800f990:	d04d      	beq.n	800fa2e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800f992:	2308      	movs	r3, #8
 800f994:	425b      	negs	r3, r3
 800f996:	697a      	ldr	r2, [r7, #20]
 800f998:	4413      	add	r3, r2
 800f99a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800f99c:	697b      	ldr	r3, [r7, #20]
 800f99e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f9a0:	693b      	ldr	r3, [r7, #16]
 800f9a2:	685a      	ldr	r2, [r3, #4]
 800f9a4:	4b24      	ldr	r3, [pc, #144]	; (800fa38 <vPortFree+0xb8>)
 800f9a6:	681b      	ldr	r3, [r3, #0]
 800f9a8:	4013      	ands	r3, r2
 800f9aa:	2b00      	cmp	r3, #0
 800f9ac:	d10a      	bne.n	800f9c4 <vPortFree+0x44>
	__asm volatile
 800f9ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9b2:	f383 8811 	msr	BASEPRI, r3
 800f9b6:	f3bf 8f6f 	isb	sy
 800f9ba:	f3bf 8f4f 	dsb	sy
 800f9be:	60fb      	str	r3, [r7, #12]
}
 800f9c0:	bf00      	nop
 800f9c2:	e7fe      	b.n	800f9c2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f9c4:	693b      	ldr	r3, [r7, #16]
 800f9c6:	681b      	ldr	r3, [r3, #0]
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	d00a      	beq.n	800f9e2 <vPortFree+0x62>
	__asm volatile
 800f9cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9d0:	f383 8811 	msr	BASEPRI, r3
 800f9d4:	f3bf 8f6f 	isb	sy
 800f9d8:	f3bf 8f4f 	dsb	sy
 800f9dc:	60bb      	str	r3, [r7, #8]
}
 800f9de:	bf00      	nop
 800f9e0:	e7fe      	b.n	800f9e0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800f9e2:	693b      	ldr	r3, [r7, #16]
 800f9e4:	685a      	ldr	r2, [r3, #4]
 800f9e6:	4b14      	ldr	r3, [pc, #80]	; (800fa38 <vPortFree+0xb8>)
 800f9e8:	681b      	ldr	r3, [r3, #0]
 800f9ea:	4013      	ands	r3, r2
 800f9ec:	2b00      	cmp	r3, #0
 800f9ee:	d01e      	beq.n	800fa2e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800f9f0:	693b      	ldr	r3, [r7, #16]
 800f9f2:	681b      	ldr	r3, [r3, #0]
 800f9f4:	2b00      	cmp	r3, #0
 800f9f6:	d11a      	bne.n	800fa2e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f9f8:	693b      	ldr	r3, [r7, #16]
 800f9fa:	685a      	ldr	r2, [r3, #4]
 800f9fc:	4b0e      	ldr	r3, [pc, #56]	; (800fa38 <vPortFree+0xb8>)
 800f9fe:	681b      	ldr	r3, [r3, #0]
 800fa00:	43db      	mvns	r3, r3
 800fa02:	401a      	ands	r2, r3
 800fa04:	693b      	ldr	r3, [r7, #16]
 800fa06:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800fa08:	f7fe fcc0 	bl	800e38c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800fa0c:	693b      	ldr	r3, [r7, #16]
 800fa0e:	685a      	ldr	r2, [r3, #4]
 800fa10:	4b0a      	ldr	r3, [pc, #40]	; (800fa3c <vPortFree+0xbc>)
 800fa12:	681b      	ldr	r3, [r3, #0]
 800fa14:	4413      	add	r3, r2
 800fa16:	4a09      	ldr	r2, [pc, #36]	; (800fa3c <vPortFree+0xbc>)
 800fa18:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800fa1a:	6938      	ldr	r0, [r7, #16]
 800fa1c:	f000 f874 	bl	800fb08 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800fa20:	4b07      	ldr	r3, [pc, #28]	; (800fa40 <vPortFree+0xc0>)
 800fa22:	681b      	ldr	r3, [r3, #0]
 800fa24:	3301      	adds	r3, #1
 800fa26:	4a06      	ldr	r2, [pc, #24]	; (800fa40 <vPortFree+0xc0>)
 800fa28:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800fa2a:	f7fe fcbd 	bl	800e3a8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800fa2e:	bf00      	nop
 800fa30:	3718      	adds	r7, #24
 800fa32:	46bd      	mov	sp, r7
 800fa34:	bd80      	pop	{r7, pc}
 800fa36:	bf00      	nop
 800fa38:	20005c90 	.word	0x20005c90
 800fa3c:	20005c80 	.word	0x20005c80
 800fa40:	20005c8c 	.word	0x20005c8c

0800fa44 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800fa44:	b480      	push	{r7}
 800fa46:	b085      	sub	sp, #20
 800fa48:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800fa4a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800fa4e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800fa50:	4b27      	ldr	r3, [pc, #156]	; (800faf0 <prvHeapInit+0xac>)
 800fa52:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800fa54:	68fb      	ldr	r3, [r7, #12]
 800fa56:	f003 0307 	and.w	r3, r3, #7
 800fa5a:	2b00      	cmp	r3, #0
 800fa5c:	d00c      	beq.n	800fa78 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800fa5e:	68fb      	ldr	r3, [r7, #12]
 800fa60:	3307      	adds	r3, #7
 800fa62:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800fa64:	68fb      	ldr	r3, [r7, #12]
 800fa66:	f023 0307 	bic.w	r3, r3, #7
 800fa6a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800fa6c:	68ba      	ldr	r2, [r7, #8]
 800fa6e:	68fb      	ldr	r3, [r7, #12]
 800fa70:	1ad3      	subs	r3, r2, r3
 800fa72:	4a1f      	ldr	r2, [pc, #124]	; (800faf0 <prvHeapInit+0xac>)
 800fa74:	4413      	add	r3, r2
 800fa76:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800fa78:	68fb      	ldr	r3, [r7, #12]
 800fa7a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800fa7c:	4a1d      	ldr	r2, [pc, #116]	; (800faf4 <prvHeapInit+0xb0>)
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800fa82:	4b1c      	ldr	r3, [pc, #112]	; (800faf4 <prvHeapInit+0xb0>)
 800fa84:	2200      	movs	r2, #0
 800fa86:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	68ba      	ldr	r2, [r7, #8]
 800fa8c:	4413      	add	r3, r2
 800fa8e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800fa90:	2208      	movs	r2, #8
 800fa92:	68fb      	ldr	r3, [r7, #12]
 800fa94:	1a9b      	subs	r3, r3, r2
 800fa96:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800fa98:	68fb      	ldr	r3, [r7, #12]
 800fa9a:	f023 0307 	bic.w	r3, r3, #7
 800fa9e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800faa0:	68fb      	ldr	r3, [r7, #12]
 800faa2:	4a15      	ldr	r2, [pc, #84]	; (800faf8 <prvHeapInit+0xb4>)
 800faa4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800faa6:	4b14      	ldr	r3, [pc, #80]	; (800faf8 <prvHeapInit+0xb4>)
 800faa8:	681b      	ldr	r3, [r3, #0]
 800faaa:	2200      	movs	r2, #0
 800faac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800faae:	4b12      	ldr	r3, [pc, #72]	; (800faf8 <prvHeapInit+0xb4>)
 800fab0:	681b      	ldr	r3, [r3, #0]
 800fab2:	2200      	movs	r2, #0
 800fab4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800faba:	683b      	ldr	r3, [r7, #0]
 800fabc:	68fa      	ldr	r2, [r7, #12]
 800fabe:	1ad2      	subs	r2, r2, r3
 800fac0:	683b      	ldr	r3, [r7, #0]
 800fac2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800fac4:	4b0c      	ldr	r3, [pc, #48]	; (800faf8 <prvHeapInit+0xb4>)
 800fac6:	681a      	ldr	r2, [r3, #0]
 800fac8:	683b      	ldr	r3, [r7, #0]
 800faca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800facc:	683b      	ldr	r3, [r7, #0]
 800face:	685b      	ldr	r3, [r3, #4]
 800fad0:	4a0a      	ldr	r2, [pc, #40]	; (800fafc <prvHeapInit+0xb8>)
 800fad2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fad4:	683b      	ldr	r3, [r7, #0]
 800fad6:	685b      	ldr	r3, [r3, #4]
 800fad8:	4a09      	ldr	r2, [pc, #36]	; (800fb00 <prvHeapInit+0xbc>)
 800fada:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800fadc:	4b09      	ldr	r3, [pc, #36]	; (800fb04 <prvHeapInit+0xc0>)
 800fade:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800fae2:	601a      	str	r2, [r3, #0]
}
 800fae4:	bf00      	nop
 800fae6:	3714      	adds	r7, #20
 800fae8:	46bd      	mov	sp, r7
 800faea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faee:	4770      	bx	lr
 800faf0:	20002074 	.word	0x20002074
 800faf4:	20005c74 	.word	0x20005c74
 800faf8:	20005c7c 	.word	0x20005c7c
 800fafc:	20005c84 	.word	0x20005c84
 800fb00:	20005c80 	.word	0x20005c80
 800fb04:	20005c90 	.word	0x20005c90

0800fb08 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800fb08:	b480      	push	{r7}
 800fb0a:	b085      	sub	sp, #20
 800fb0c:	af00      	add	r7, sp, #0
 800fb0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800fb10:	4b28      	ldr	r3, [pc, #160]	; (800fbb4 <prvInsertBlockIntoFreeList+0xac>)
 800fb12:	60fb      	str	r3, [r7, #12]
 800fb14:	e002      	b.n	800fb1c <prvInsertBlockIntoFreeList+0x14>
 800fb16:	68fb      	ldr	r3, [r7, #12]
 800fb18:	681b      	ldr	r3, [r3, #0]
 800fb1a:	60fb      	str	r3, [r7, #12]
 800fb1c:	68fb      	ldr	r3, [r7, #12]
 800fb1e:	681b      	ldr	r3, [r3, #0]
 800fb20:	687a      	ldr	r2, [r7, #4]
 800fb22:	429a      	cmp	r2, r3
 800fb24:	d8f7      	bhi.n	800fb16 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800fb26:	68fb      	ldr	r3, [r7, #12]
 800fb28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800fb2a:	68fb      	ldr	r3, [r7, #12]
 800fb2c:	685b      	ldr	r3, [r3, #4]
 800fb2e:	68ba      	ldr	r2, [r7, #8]
 800fb30:	4413      	add	r3, r2
 800fb32:	687a      	ldr	r2, [r7, #4]
 800fb34:	429a      	cmp	r2, r3
 800fb36:	d108      	bne.n	800fb4a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800fb38:	68fb      	ldr	r3, [r7, #12]
 800fb3a:	685a      	ldr	r2, [r3, #4]
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	685b      	ldr	r3, [r3, #4]
 800fb40:	441a      	add	r2, r3
 800fb42:	68fb      	ldr	r3, [r7, #12]
 800fb44:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800fb46:	68fb      	ldr	r3, [r7, #12]
 800fb48:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	685b      	ldr	r3, [r3, #4]
 800fb52:	68ba      	ldr	r2, [r7, #8]
 800fb54:	441a      	add	r2, r3
 800fb56:	68fb      	ldr	r3, [r7, #12]
 800fb58:	681b      	ldr	r3, [r3, #0]
 800fb5a:	429a      	cmp	r2, r3
 800fb5c:	d118      	bne.n	800fb90 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800fb5e:	68fb      	ldr	r3, [r7, #12]
 800fb60:	681a      	ldr	r2, [r3, #0]
 800fb62:	4b15      	ldr	r3, [pc, #84]	; (800fbb8 <prvInsertBlockIntoFreeList+0xb0>)
 800fb64:	681b      	ldr	r3, [r3, #0]
 800fb66:	429a      	cmp	r2, r3
 800fb68:	d00d      	beq.n	800fb86 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	685a      	ldr	r2, [r3, #4]
 800fb6e:	68fb      	ldr	r3, [r7, #12]
 800fb70:	681b      	ldr	r3, [r3, #0]
 800fb72:	685b      	ldr	r3, [r3, #4]
 800fb74:	441a      	add	r2, r3
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800fb7a:	68fb      	ldr	r3, [r7, #12]
 800fb7c:	681b      	ldr	r3, [r3, #0]
 800fb7e:	681a      	ldr	r2, [r3, #0]
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	601a      	str	r2, [r3, #0]
 800fb84:	e008      	b.n	800fb98 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800fb86:	4b0c      	ldr	r3, [pc, #48]	; (800fbb8 <prvInsertBlockIntoFreeList+0xb0>)
 800fb88:	681a      	ldr	r2, [r3, #0]
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	601a      	str	r2, [r3, #0]
 800fb8e:	e003      	b.n	800fb98 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800fb90:	68fb      	ldr	r3, [r7, #12]
 800fb92:	681a      	ldr	r2, [r3, #0]
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800fb98:	68fa      	ldr	r2, [r7, #12]
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	429a      	cmp	r2, r3
 800fb9e:	d002      	beq.n	800fba6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800fba0:	68fb      	ldr	r3, [r7, #12]
 800fba2:	687a      	ldr	r2, [r7, #4]
 800fba4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fba6:	bf00      	nop
 800fba8:	3714      	adds	r7, #20
 800fbaa:	46bd      	mov	sp, r7
 800fbac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbb0:	4770      	bx	lr
 800fbb2:	bf00      	nop
 800fbb4:	20005c74 	.word	0x20005c74
 800fbb8:	20005c7c 	.word	0x20005c7c

0800fbbc <_Znwj>:
 800fbbc:	2801      	cmp	r0, #1
 800fbbe:	bf38      	it	cc
 800fbc0:	2001      	movcc	r0, #1
 800fbc2:	b510      	push	{r4, lr}
 800fbc4:	4604      	mov	r4, r0
 800fbc6:	4620      	mov	r0, r4
 800fbc8:	f001 fc50 	bl	801146c <malloc>
 800fbcc:	b930      	cbnz	r0, 800fbdc <_Znwj+0x20>
 800fbce:	f000 f807 	bl	800fbe0 <_ZSt15get_new_handlerv>
 800fbd2:	b908      	cbnz	r0, 800fbd8 <_Znwj+0x1c>
 800fbd4:	f001 fb22 	bl	801121c <abort>
 800fbd8:	4780      	blx	r0
 800fbda:	e7f4      	b.n	800fbc6 <_Znwj+0xa>
 800fbdc:	bd10      	pop	{r4, pc}
	...

0800fbe0 <_ZSt15get_new_handlerv>:
 800fbe0:	4b02      	ldr	r3, [pc, #8]	; (800fbec <_ZSt15get_new_handlerv+0xc>)
 800fbe2:	6818      	ldr	r0, [r3, #0]
 800fbe4:	f3bf 8f5b 	dmb	ish
 800fbe8:	4770      	bx	lr
 800fbea:	bf00      	nop
 800fbec:	20005c94 	.word	0x20005c94

0800fbf0 <roundf>:
 800fbf0:	ee10 0a10 	vmov	r0, s0
 800fbf4:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 800fbf8:	3a7f      	subs	r2, #127	; 0x7f
 800fbfa:	2a16      	cmp	r2, #22
 800fbfc:	dc15      	bgt.n	800fc2a <roundf+0x3a>
 800fbfe:	2a00      	cmp	r2, #0
 800fc00:	da08      	bge.n	800fc14 <roundf+0x24>
 800fc02:	3201      	adds	r2, #1
 800fc04:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800fc08:	d101      	bne.n	800fc0e <roundf+0x1e>
 800fc0a:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 800fc0e:	ee00 3a10 	vmov	s0, r3
 800fc12:	4770      	bx	lr
 800fc14:	4907      	ldr	r1, [pc, #28]	; (800fc34 <roundf+0x44>)
 800fc16:	4111      	asrs	r1, r2
 800fc18:	4208      	tst	r0, r1
 800fc1a:	d0fa      	beq.n	800fc12 <roundf+0x22>
 800fc1c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800fc20:	4113      	asrs	r3, r2
 800fc22:	4403      	add	r3, r0
 800fc24:	ea23 0301 	bic.w	r3, r3, r1
 800fc28:	e7f1      	b.n	800fc0e <roundf+0x1e>
 800fc2a:	2a80      	cmp	r2, #128	; 0x80
 800fc2c:	d1f1      	bne.n	800fc12 <roundf+0x22>
 800fc2e:	ee30 0a00 	vadd.f32	s0, s0, s0
 800fc32:	4770      	bx	lr
 800fc34:	007fffff 	.word	0x007fffff

0800fc38 <atan2>:
 800fc38:	f000 b8ca 	b.w	800fdd0 <__ieee754_atan2>

0800fc3c <fmod>:
 800fc3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc3e:	ed2d 8b02 	vpush	{d8}
 800fc42:	ec57 6b10 	vmov	r6, r7, d0
 800fc46:	ec55 4b11 	vmov	r4, r5, d1
 800fc4a:	f000 f98b 	bl	800ff64 <__ieee754_fmod>
 800fc4e:	4622      	mov	r2, r4
 800fc50:	462b      	mov	r3, r5
 800fc52:	4630      	mov	r0, r6
 800fc54:	4639      	mov	r1, r7
 800fc56:	eeb0 8a40 	vmov.f32	s16, s0
 800fc5a:	eef0 8a60 	vmov.f32	s17, s1
 800fc5e:	f7f0 ff65 	bl	8000b2c <__aeabi_dcmpun>
 800fc62:	b990      	cbnz	r0, 800fc8a <fmod+0x4e>
 800fc64:	2200      	movs	r2, #0
 800fc66:	2300      	movs	r3, #0
 800fc68:	4620      	mov	r0, r4
 800fc6a:	4629      	mov	r1, r5
 800fc6c:	f7f0 ff2c 	bl	8000ac8 <__aeabi_dcmpeq>
 800fc70:	b158      	cbz	r0, 800fc8a <fmod+0x4e>
 800fc72:	f001 fadb 	bl	801122c <__errno>
 800fc76:	2321      	movs	r3, #33	; 0x21
 800fc78:	6003      	str	r3, [r0, #0]
 800fc7a:	2200      	movs	r2, #0
 800fc7c:	2300      	movs	r3, #0
 800fc7e:	4610      	mov	r0, r2
 800fc80:	4619      	mov	r1, r3
 800fc82:	f7f0 fde3 	bl	800084c <__aeabi_ddiv>
 800fc86:	ec41 0b18 	vmov	d8, r0, r1
 800fc8a:	eeb0 0a48 	vmov.f32	s0, s16
 800fc8e:	eef0 0a68 	vmov.f32	s1, s17
 800fc92:	ecbd 8b02 	vpop	{d8}
 800fc96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800fc98 <pow>:
 800fc98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc9a:	ed2d 8b02 	vpush	{d8}
 800fc9e:	eeb0 8a40 	vmov.f32	s16, s0
 800fca2:	eef0 8a60 	vmov.f32	s17, s1
 800fca6:	ec55 4b11 	vmov	r4, r5, d1
 800fcaa:	f000 fa6d 	bl	8010188 <__ieee754_pow>
 800fcae:	4622      	mov	r2, r4
 800fcb0:	462b      	mov	r3, r5
 800fcb2:	4620      	mov	r0, r4
 800fcb4:	4629      	mov	r1, r5
 800fcb6:	ec57 6b10 	vmov	r6, r7, d0
 800fcba:	f7f0 ff37 	bl	8000b2c <__aeabi_dcmpun>
 800fcbe:	2800      	cmp	r0, #0
 800fcc0:	d13b      	bne.n	800fd3a <pow+0xa2>
 800fcc2:	ec51 0b18 	vmov	r0, r1, d8
 800fcc6:	2200      	movs	r2, #0
 800fcc8:	2300      	movs	r3, #0
 800fcca:	f7f0 fefd 	bl	8000ac8 <__aeabi_dcmpeq>
 800fcce:	b1b8      	cbz	r0, 800fd00 <pow+0x68>
 800fcd0:	2200      	movs	r2, #0
 800fcd2:	2300      	movs	r3, #0
 800fcd4:	4620      	mov	r0, r4
 800fcd6:	4629      	mov	r1, r5
 800fcd8:	f7f0 fef6 	bl	8000ac8 <__aeabi_dcmpeq>
 800fcdc:	2800      	cmp	r0, #0
 800fcde:	d146      	bne.n	800fd6e <pow+0xd6>
 800fce0:	ec45 4b10 	vmov	d0, r4, r5
 800fce4:	f001 fa09 	bl	80110fa <finite>
 800fce8:	b338      	cbz	r0, 800fd3a <pow+0xa2>
 800fcea:	2200      	movs	r2, #0
 800fcec:	2300      	movs	r3, #0
 800fcee:	4620      	mov	r0, r4
 800fcf0:	4629      	mov	r1, r5
 800fcf2:	f7f0 fef3 	bl	8000adc <__aeabi_dcmplt>
 800fcf6:	b300      	cbz	r0, 800fd3a <pow+0xa2>
 800fcf8:	f001 fa98 	bl	801122c <__errno>
 800fcfc:	2322      	movs	r3, #34	; 0x22
 800fcfe:	e01b      	b.n	800fd38 <pow+0xa0>
 800fd00:	ec47 6b10 	vmov	d0, r6, r7
 800fd04:	f001 f9f9 	bl	80110fa <finite>
 800fd08:	b9e0      	cbnz	r0, 800fd44 <pow+0xac>
 800fd0a:	eeb0 0a48 	vmov.f32	s0, s16
 800fd0e:	eef0 0a68 	vmov.f32	s1, s17
 800fd12:	f001 f9f2 	bl	80110fa <finite>
 800fd16:	b1a8      	cbz	r0, 800fd44 <pow+0xac>
 800fd18:	ec45 4b10 	vmov	d0, r4, r5
 800fd1c:	f001 f9ed 	bl	80110fa <finite>
 800fd20:	b180      	cbz	r0, 800fd44 <pow+0xac>
 800fd22:	4632      	mov	r2, r6
 800fd24:	463b      	mov	r3, r7
 800fd26:	4630      	mov	r0, r6
 800fd28:	4639      	mov	r1, r7
 800fd2a:	f7f0 feff 	bl	8000b2c <__aeabi_dcmpun>
 800fd2e:	2800      	cmp	r0, #0
 800fd30:	d0e2      	beq.n	800fcf8 <pow+0x60>
 800fd32:	f001 fa7b 	bl	801122c <__errno>
 800fd36:	2321      	movs	r3, #33	; 0x21
 800fd38:	6003      	str	r3, [r0, #0]
 800fd3a:	ecbd 8b02 	vpop	{d8}
 800fd3e:	ec47 6b10 	vmov	d0, r6, r7
 800fd42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fd44:	2200      	movs	r2, #0
 800fd46:	2300      	movs	r3, #0
 800fd48:	4630      	mov	r0, r6
 800fd4a:	4639      	mov	r1, r7
 800fd4c:	f7f0 febc 	bl	8000ac8 <__aeabi_dcmpeq>
 800fd50:	2800      	cmp	r0, #0
 800fd52:	d0f2      	beq.n	800fd3a <pow+0xa2>
 800fd54:	eeb0 0a48 	vmov.f32	s0, s16
 800fd58:	eef0 0a68 	vmov.f32	s1, s17
 800fd5c:	f001 f9cd 	bl	80110fa <finite>
 800fd60:	2800      	cmp	r0, #0
 800fd62:	d0ea      	beq.n	800fd3a <pow+0xa2>
 800fd64:	ec45 4b10 	vmov	d0, r4, r5
 800fd68:	f001 f9c7 	bl	80110fa <finite>
 800fd6c:	e7c3      	b.n	800fcf6 <pow+0x5e>
 800fd6e:	4f01      	ldr	r7, [pc, #4]	; (800fd74 <pow+0xdc>)
 800fd70:	2600      	movs	r6, #0
 800fd72:	e7e2      	b.n	800fd3a <pow+0xa2>
 800fd74:	3ff00000 	.word	0x3ff00000

0800fd78 <sqrt>:
 800fd78:	b538      	push	{r3, r4, r5, lr}
 800fd7a:	ed2d 8b02 	vpush	{d8}
 800fd7e:	ec55 4b10 	vmov	r4, r5, d0
 800fd82:	f000 ff2f 	bl	8010be4 <__ieee754_sqrt>
 800fd86:	4622      	mov	r2, r4
 800fd88:	462b      	mov	r3, r5
 800fd8a:	4620      	mov	r0, r4
 800fd8c:	4629      	mov	r1, r5
 800fd8e:	eeb0 8a40 	vmov.f32	s16, s0
 800fd92:	eef0 8a60 	vmov.f32	s17, s1
 800fd96:	f7f0 fec9 	bl	8000b2c <__aeabi_dcmpun>
 800fd9a:	b990      	cbnz	r0, 800fdc2 <sqrt+0x4a>
 800fd9c:	2200      	movs	r2, #0
 800fd9e:	2300      	movs	r3, #0
 800fda0:	4620      	mov	r0, r4
 800fda2:	4629      	mov	r1, r5
 800fda4:	f7f0 fe9a 	bl	8000adc <__aeabi_dcmplt>
 800fda8:	b158      	cbz	r0, 800fdc2 <sqrt+0x4a>
 800fdaa:	f001 fa3f 	bl	801122c <__errno>
 800fdae:	2321      	movs	r3, #33	; 0x21
 800fdb0:	6003      	str	r3, [r0, #0]
 800fdb2:	2200      	movs	r2, #0
 800fdb4:	2300      	movs	r3, #0
 800fdb6:	4610      	mov	r0, r2
 800fdb8:	4619      	mov	r1, r3
 800fdba:	f7f0 fd47 	bl	800084c <__aeabi_ddiv>
 800fdbe:	ec41 0b18 	vmov	d8, r0, r1
 800fdc2:	eeb0 0a48 	vmov.f32	s0, s16
 800fdc6:	eef0 0a68 	vmov.f32	s1, s17
 800fdca:	ecbd 8b02 	vpop	{d8}
 800fdce:	bd38      	pop	{r3, r4, r5, pc}

0800fdd0 <__ieee754_atan2>:
 800fdd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fdd4:	ec57 6b11 	vmov	r6, r7, d1
 800fdd8:	4273      	negs	r3, r6
 800fdda:	f8df e184 	ldr.w	lr, [pc, #388]	; 800ff60 <__ieee754_atan2+0x190>
 800fdde:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800fde2:	4333      	orrs	r3, r6
 800fde4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800fde8:	4573      	cmp	r3, lr
 800fdea:	ec51 0b10 	vmov	r0, r1, d0
 800fdee:	ee11 8a10 	vmov	r8, s2
 800fdf2:	d80a      	bhi.n	800fe0a <__ieee754_atan2+0x3a>
 800fdf4:	4244      	negs	r4, r0
 800fdf6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800fdfa:	4304      	orrs	r4, r0
 800fdfc:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800fe00:	4574      	cmp	r4, lr
 800fe02:	ee10 9a10 	vmov	r9, s0
 800fe06:	468c      	mov	ip, r1
 800fe08:	d907      	bls.n	800fe1a <__ieee754_atan2+0x4a>
 800fe0a:	4632      	mov	r2, r6
 800fe0c:	463b      	mov	r3, r7
 800fe0e:	f7f0 fa3d 	bl	800028c <__adddf3>
 800fe12:	ec41 0b10 	vmov	d0, r0, r1
 800fe16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fe1a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800fe1e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800fe22:	4334      	orrs	r4, r6
 800fe24:	d103      	bne.n	800fe2e <__ieee754_atan2+0x5e>
 800fe26:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fe2a:	f000 bfbd 	b.w	8010da8 <atan>
 800fe2e:	17bc      	asrs	r4, r7, #30
 800fe30:	f004 0402 	and.w	r4, r4, #2
 800fe34:	ea53 0909 	orrs.w	r9, r3, r9
 800fe38:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800fe3c:	d107      	bne.n	800fe4e <__ieee754_atan2+0x7e>
 800fe3e:	2c02      	cmp	r4, #2
 800fe40:	d060      	beq.n	800ff04 <__ieee754_atan2+0x134>
 800fe42:	2c03      	cmp	r4, #3
 800fe44:	d1e5      	bne.n	800fe12 <__ieee754_atan2+0x42>
 800fe46:	a142      	add	r1, pc, #264	; (adr r1, 800ff50 <__ieee754_atan2+0x180>)
 800fe48:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fe4c:	e7e1      	b.n	800fe12 <__ieee754_atan2+0x42>
 800fe4e:	ea52 0808 	orrs.w	r8, r2, r8
 800fe52:	d106      	bne.n	800fe62 <__ieee754_atan2+0x92>
 800fe54:	f1bc 0f00 	cmp.w	ip, #0
 800fe58:	da5f      	bge.n	800ff1a <__ieee754_atan2+0x14a>
 800fe5a:	a13f      	add	r1, pc, #252	; (adr r1, 800ff58 <__ieee754_atan2+0x188>)
 800fe5c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fe60:	e7d7      	b.n	800fe12 <__ieee754_atan2+0x42>
 800fe62:	4572      	cmp	r2, lr
 800fe64:	d10f      	bne.n	800fe86 <__ieee754_atan2+0xb6>
 800fe66:	4293      	cmp	r3, r2
 800fe68:	f104 34ff 	add.w	r4, r4, #4294967295
 800fe6c:	d107      	bne.n	800fe7e <__ieee754_atan2+0xae>
 800fe6e:	2c02      	cmp	r4, #2
 800fe70:	d84c      	bhi.n	800ff0c <__ieee754_atan2+0x13c>
 800fe72:	4b35      	ldr	r3, [pc, #212]	; (800ff48 <__ieee754_atan2+0x178>)
 800fe74:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800fe78:	e9d4 0100 	ldrd	r0, r1, [r4]
 800fe7c:	e7c9      	b.n	800fe12 <__ieee754_atan2+0x42>
 800fe7e:	2c02      	cmp	r4, #2
 800fe80:	d848      	bhi.n	800ff14 <__ieee754_atan2+0x144>
 800fe82:	4b32      	ldr	r3, [pc, #200]	; (800ff4c <__ieee754_atan2+0x17c>)
 800fe84:	e7f6      	b.n	800fe74 <__ieee754_atan2+0xa4>
 800fe86:	4573      	cmp	r3, lr
 800fe88:	d0e4      	beq.n	800fe54 <__ieee754_atan2+0x84>
 800fe8a:	1a9b      	subs	r3, r3, r2
 800fe8c:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800fe90:	ea4f 5223 	mov.w	r2, r3, asr #20
 800fe94:	da1e      	bge.n	800fed4 <__ieee754_atan2+0x104>
 800fe96:	2f00      	cmp	r7, #0
 800fe98:	da01      	bge.n	800fe9e <__ieee754_atan2+0xce>
 800fe9a:	323c      	adds	r2, #60	; 0x3c
 800fe9c:	db1e      	blt.n	800fedc <__ieee754_atan2+0x10c>
 800fe9e:	4632      	mov	r2, r6
 800fea0:	463b      	mov	r3, r7
 800fea2:	f7f0 fcd3 	bl	800084c <__aeabi_ddiv>
 800fea6:	ec41 0b10 	vmov	d0, r0, r1
 800feaa:	f001 f91d 	bl	80110e8 <fabs>
 800feae:	f000 ff7b 	bl	8010da8 <atan>
 800feb2:	ec51 0b10 	vmov	r0, r1, d0
 800feb6:	2c01      	cmp	r4, #1
 800feb8:	d013      	beq.n	800fee2 <__ieee754_atan2+0x112>
 800feba:	2c02      	cmp	r4, #2
 800febc:	d015      	beq.n	800feea <__ieee754_atan2+0x11a>
 800febe:	2c00      	cmp	r4, #0
 800fec0:	d0a7      	beq.n	800fe12 <__ieee754_atan2+0x42>
 800fec2:	a319      	add	r3, pc, #100	; (adr r3, 800ff28 <__ieee754_atan2+0x158>)
 800fec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fec8:	f7f0 f9de 	bl	8000288 <__aeabi_dsub>
 800fecc:	a318      	add	r3, pc, #96	; (adr r3, 800ff30 <__ieee754_atan2+0x160>)
 800fece:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fed2:	e014      	b.n	800fefe <__ieee754_atan2+0x12e>
 800fed4:	a118      	add	r1, pc, #96	; (adr r1, 800ff38 <__ieee754_atan2+0x168>)
 800fed6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800feda:	e7ec      	b.n	800feb6 <__ieee754_atan2+0xe6>
 800fedc:	2000      	movs	r0, #0
 800fede:	2100      	movs	r1, #0
 800fee0:	e7e9      	b.n	800feb6 <__ieee754_atan2+0xe6>
 800fee2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fee6:	4619      	mov	r1, r3
 800fee8:	e793      	b.n	800fe12 <__ieee754_atan2+0x42>
 800feea:	a30f      	add	r3, pc, #60	; (adr r3, 800ff28 <__ieee754_atan2+0x158>)
 800feec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fef0:	f7f0 f9ca 	bl	8000288 <__aeabi_dsub>
 800fef4:	4602      	mov	r2, r0
 800fef6:	460b      	mov	r3, r1
 800fef8:	a10d      	add	r1, pc, #52	; (adr r1, 800ff30 <__ieee754_atan2+0x160>)
 800fefa:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fefe:	f7f0 f9c3 	bl	8000288 <__aeabi_dsub>
 800ff02:	e786      	b.n	800fe12 <__ieee754_atan2+0x42>
 800ff04:	a10a      	add	r1, pc, #40	; (adr r1, 800ff30 <__ieee754_atan2+0x160>)
 800ff06:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ff0a:	e782      	b.n	800fe12 <__ieee754_atan2+0x42>
 800ff0c:	a10c      	add	r1, pc, #48	; (adr r1, 800ff40 <__ieee754_atan2+0x170>)
 800ff0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ff12:	e77e      	b.n	800fe12 <__ieee754_atan2+0x42>
 800ff14:	2000      	movs	r0, #0
 800ff16:	2100      	movs	r1, #0
 800ff18:	e77b      	b.n	800fe12 <__ieee754_atan2+0x42>
 800ff1a:	a107      	add	r1, pc, #28	; (adr r1, 800ff38 <__ieee754_atan2+0x168>)
 800ff1c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ff20:	e777      	b.n	800fe12 <__ieee754_atan2+0x42>
 800ff22:	bf00      	nop
 800ff24:	f3af 8000 	nop.w
 800ff28:	33145c07 	.word	0x33145c07
 800ff2c:	3ca1a626 	.word	0x3ca1a626
 800ff30:	54442d18 	.word	0x54442d18
 800ff34:	400921fb 	.word	0x400921fb
 800ff38:	54442d18 	.word	0x54442d18
 800ff3c:	3ff921fb 	.word	0x3ff921fb
 800ff40:	54442d18 	.word	0x54442d18
 800ff44:	3fe921fb 	.word	0x3fe921fb
 800ff48:	08015120 	.word	0x08015120
 800ff4c:	08015138 	.word	0x08015138
 800ff50:	54442d18 	.word	0x54442d18
 800ff54:	c00921fb 	.word	0xc00921fb
 800ff58:	54442d18 	.word	0x54442d18
 800ff5c:	bff921fb 	.word	0xbff921fb
 800ff60:	7ff00000 	.word	0x7ff00000

0800ff64 <__ieee754_fmod>:
 800ff64:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff68:	ec53 2b11 	vmov	r2, r3, d1
 800ff6c:	f023 4e00 	bic.w	lr, r3, #2147483648	; 0x80000000
 800ff70:	ea5e 0402 	orrs.w	r4, lr, r2
 800ff74:	ec51 0b10 	vmov	r0, r1, d0
 800ff78:	ee11 7a10 	vmov	r7, s2
 800ff7c:	ee11 ca10 	vmov	ip, s2
 800ff80:	461e      	mov	r6, r3
 800ff82:	d00d      	beq.n	800ffa0 <__ieee754_fmod+0x3c>
 800ff84:	4c7a      	ldr	r4, [pc, #488]	; (8010170 <__ieee754_fmod+0x20c>)
 800ff86:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 800ff8a:	45a0      	cmp	r8, r4
 800ff8c:	4689      	mov	r9, r1
 800ff8e:	dc07      	bgt.n	800ffa0 <__ieee754_fmod+0x3c>
 800ff90:	4254      	negs	r4, r2
 800ff92:	f8df b1e8 	ldr.w	fp, [pc, #488]	; 801017c <__ieee754_fmod+0x218>
 800ff96:	4314      	orrs	r4, r2
 800ff98:	ea4e 74d4 	orr.w	r4, lr, r4, lsr #31
 800ff9c:	455c      	cmp	r4, fp
 800ff9e:	d909      	bls.n	800ffb4 <__ieee754_fmod+0x50>
 800ffa0:	f7f0 fb2a 	bl	80005f8 <__aeabi_dmul>
 800ffa4:	4602      	mov	r2, r0
 800ffa6:	460b      	mov	r3, r1
 800ffa8:	f7f0 fc50 	bl	800084c <__aeabi_ddiv>
 800ffac:	ec41 0b10 	vmov	d0, r0, r1
 800ffb0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ffb4:	45f0      	cmp	r8, lr
 800ffb6:	ee10 aa10 	vmov	sl, s0
 800ffba:	ee10 4a10 	vmov	r4, s0
 800ffbe:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800ffc2:	dc09      	bgt.n	800ffd8 <__ieee754_fmod+0x74>
 800ffc4:	dbf2      	blt.n	800ffac <__ieee754_fmod+0x48>
 800ffc6:	4290      	cmp	r0, r2
 800ffc8:	d3f0      	bcc.n	800ffac <__ieee754_fmod+0x48>
 800ffca:	d105      	bne.n	800ffd8 <__ieee754_fmod+0x74>
 800ffcc:	4b69      	ldr	r3, [pc, #420]	; (8010174 <__ieee754_fmod+0x210>)
 800ffce:	eb03 7515 	add.w	r5, r3, r5, lsr #28
 800ffd2:	e9d5 0100 	ldrd	r0, r1, [r5]
 800ffd6:	e7e9      	b.n	800ffac <__ieee754_fmod+0x48>
 800ffd8:	ea19 0f0b 	tst.w	r9, fp
 800ffdc:	d14a      	bne.n	8010074 <__ieee754_fmod+0x110>
 800ffde:	f1b8 0f00 	cmp.w	r8, #0
 800ffe2:	d13f      	bne.n	8010064 <__ieee754_fmod+0x100>
 800ffe4:	4964      	ldr	r1, [pc, #400]	; (8010178 <__ieee754_fmod+0x214>)
 800ffe6:	4653      	mov	r3, sl
 800ffe8:	2b00      	cmp	r3, #0
 800ffea:	dc38      	bgt.n	801005e <__ieee754_fmod+0xfa>
 800ffec:	4b63      	ldr	r3, [pc, #396]	; (801017c <__ieee754_fmod+0x218>)
 800ffee:	4033      	ands	r3, r6
 800fff0:	2b00      	cmp	r3, #0
 800fff2:	d14f      	bne.n	8010094 <__ieee754_fmod+0x130>
 800fff4:	f1be 0f00 	cmp.w	lr, #0
 800fff8:	d144      	bne.n	8010084 <__ieee754_fmod+0x120>
 800fffa:	4a5f      	ldr	r2, [pc, #380]	; (8010178 <__ieee754_fmod+0x214>)
 800fffc:	463b      	mov	r3, r7
 800fffe:	2b00      	cmp	r3, #0
 8010000:	dc3d      	bgt.n	801007e <__ieee754_fmod+0x11a>
 8010002:	4b5f      	ldr	r3, [pc, #380]	; (8010180 <__ieee754_fmod+0x21c>)
 8010004:	4299      	cmp	r1, r3
 8010006:	db4a      	blt.n	801009e <__ieee754_fmod+0x13a>
 8010008:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801000c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010010:	485b      	ldr	r0, [pc, #364]	; (8010180 <__ieee754_fmod+0x21c>)
 8010012:	4282      	cmp	r2, r0
 8010014:	db57      	blt.n	80100c6 <__ieee754_fmod+0x162>
 8010016:	f3c6 0613 	ubfx	r6, r6, #0, #20
 801001a:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 801001e:	1a89      	subs	r1, r1, r2
 8010020:	1b98      	subs	r0, r3, r6
 8010022:	eba4 070c 	sub.w	r7, r4, ip
 8010026:	2900      	cmp	r1, #0
 8010028:	d164      	bne.n	80100f4 <__ieee754_fmod+0x190>
 801002a:	4564      	cmp	r4, ip
 801002c:	bf38      	it	cc
 801002e:	f100 30ff 	addcc.w	r0, r0, #4294967295
 8010032:	2800      	cmp	r0, #0
 8010034:	bfa4      	itt	ge
 8010036:	463c      	movge	r4, r7
 8010038:	4603      	movge	r3, r0
 801003a:	ea53 0104 	orrs.w	r1, r3, r4
 801003e:	d0c5      	beq.n	800ffcc <__ieee754_fmod+0x68>
 8010040:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010044:	db6b      	blt.n	801011e <__ieee754_fmod+0x1ba>
 8010046:	494e      	ldr	r1, [pc, #312]	; (8010180 <__ieee754_fmod+0x21c>)
 8010048:	428a      	cmp	r2, r1
 801004a:	db6e      	blt.n	801012a <__ieee754_fmod+0x1c6>
 801004c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8010050:	431d      	orrs	r5, r3
 8010052:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 8010056:	ea45 5102 	orr.w	r1, r5, r2, lsl #20
 801005a:	4620      	mov	r0, r4
 801005c:	e7a6      	b.n	800ffac <__ieee754_fmod+0x48>
 801005e:	3901      	subs	r1, #1
 8010060:	005b      	lsls	r3, r3, #1
 8010062:	e7c1      	b.n	800ffe8 <__ieee754_fmod+0x84>
 8010064:	4946      	ldr	r1, [pc, #280]	; (8010180 <__ieee754_fmod+0x21c>)
 8010066:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 801006a:	2b00      	cmp	r3, #0
 801006c:	ddbe      	ble.n	800ffec <__ieee754_fmod+0x88>
 801006e:	3901      	subs	r1, #1
 8010070:	005b      	lsls	r3, r3, #1
 8010072:	e7fa      	b.n	801006a <__ieee754_fmod+0x106>
 8010074:	ea4f 5128 	mov.w	r1, r8, asr #20
 8010078:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 801007c:	e7b6      	b.n	800ffec <__ieee754_fmod+0x88>
 801007e:	3a01      	subs	r2, #1
 8010080:	005b      	lsls	r3, r3, #1
 8010082:	e7bc      	b.n	800fffe <__ieee754_fmod+0x9a>
 8010084:	4a3e      	ldr	r2, [pc, #248]	; (8010180 <__ieee754_fmod+0x21c>)
 8010086:	ea4f 23ce 	mov.w	r3, lr, lsl #11
 801008a:	2b00      	cmp	r3, #0
 801008c:	ddb9      	ble.n	8010002 <__ieee754_fmod+0x9e>
 801008e:	3a01      	subs	r2, #1
 8010090:	005b      	lsls	r3, r3, #1
 8010092:	e7fa      	b.n	801008a <__ieee754_fmod+0x126>
 8010094:	ea4f 522e 	mov.w	r2, lr, asr #20
 8010098:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 801009c:	e7b1      	b.n	8010002 <__ieee754_fmod+0x9e>
 801009e:	1a5c      	subs	r4, r3, r1
 80100a0:	2c1f      	cmp	r4, #31
 80100a2:	dc0a      	bgt.n	80100ba <__ieee754_fmod+0x156>
 80100a4:	f201 431e 	addw	r3, r1, #1054	; 0x41e
 80100a8:	fa08 f804 	lsl.w	r8, r8, r4
 80100ac:	fa2a f303 	lsr.w	r3, sl, r3
 80100b0:	ea43 0308 	orr.w	r3, r3, r8
 80100b4:	fa0a f404 	lsl.w	r4, sl, r4
 80100b8:	e7aa      	b.n	8010010 <__ieee754_fmod+0xac>
 80100ba:	4b32      	ldr	r3, [pc, #200]	; (8010184 <__ieee754_fmod+0x220>)
 80100bc:	1a5b      	subs	r3, r3, r1
 80100be:	fa0a f303 	lsl.w	r3, sl, r3
 80100c2:	2400      	movs	r4, #0
 80100c4:	e7a4      	b.n	8010010 <__ieee754_fmod+0xac>
 80100c6:	eba0 0c02 	sub.w	ip, r0, r2
 80100ca:	f1bc 0f1f 	cmp.w	ip, #31
 80100ce:	dc0a      	bgt.n	80100e6 <__ieee754_fmod+0x182>
 80100d0:	f202 461e 	addw	r6, r2, #1054	; 0x41e
 80100d4:	fa0e fe0c 	lsl.w	lr, lr, ip
 80100d8:	fa27 f606 	lsr.w	r6, r7, r6
 80100dc:	ea46 060e 	orr.w	r6, r6, lr
 80100e0:	fa07 fc0c 	lsl.w	ip, r7, ip
 80100e4:	e79b      	b.n	801001e <__ieee754_fmod+0xba>
 80100e6:	4e27      	ldr	r6, [pc, #156]	; (8010184 <__ieee754_fmod+0x220>)
 80100e8:	1ab6      	subs	r6, r6, r2
 80100ea:	fa07 f606 	lsl.w	r6, r7, r6
 80100ee:	f04f 0c00 	mov.w	ip, #0
 80100f2:	e794      	b.n	801001e <__ieee754_fmod+0xba>
 80100f4:	4564      	cmp	r4, ip
 80100f6:	bf38      	it	cc
 80100f8:	f100 30ff 	addcc.w	r0, r0, #4294967295
 80100fc:	2800      	cmp	r0, #0
 80100fe:	da05      	bge.n	801010c <__ieee754_fmod+0x1a8>
 8010100:	0fe0      	lsrs	r0, r4, #31
 8010102:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8010106:	0064      	lsls	r4, r4, #1
 8010108:	3901      	subs	r1, #1
 801010a:	e789      	b.n	8010020 <__ieee754_fmod+0xbc>
 801010c:	ea50 0307 	orrs.w	r3, r0, r7
 8010110:	f43f af5c 	beq.w	800ffcc <__ieee754_fmod+0x68>
 8010114:	0ffb      	lsrs	r3, r7, #31
 8010116:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 801011a:	007c      	lsls	r4, r7, #1
 801011c:	e7f4      	b.n	8010108 <__ieee754_fmod+0x1a4>
 801011e:	0fe1      	lsrs	r1, r4, #31
 8010120:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8010124:	0064      	lsls	r4, r4, #1
 8010126:	3a01      	subs	r2, #1
 8010128:	e78a      	b.n	8010040 <__ieee754_fmod+0xdc>
 801012a:	1a89      	subs	r1, r1, r2
 801012c:	2914      	cmp	r1, #20
 801012e:	dc0a      	bgt.n	8010146 <__ieee754_fmod+0x1e2>
 8010130:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 8010134:	fa03 f202 	lsl.w	r2, r3, r2
 8010138:	40cc      	lsrs	r4, r1
 801013a:	4322      	orrs	r2, r4
 801013c:	410b      	asrs	r3, r1
 801013e:	ea43 0105 	orr.w	r1, r3, r5
 8010142:	4610      	mov	r0, r2
 8010144:	e732      	b.n	800ffac <__ieee754_fmod+0x48>
 8010146:	291f      	cmp	r1, #31
 8010148:	dc07      	bgt.n	801015a <__ieee754_fmod+0x1f6>
 801014a:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 801014e:	40cc      	lsrs	r4, r1
 8010150:	fa03 f202 	lsl.w	r2, r3, r2
 8010154:	4322      	orrs	r2, r4
 8010156:	462b      	mov	r3, r5
 8010158:	e7f1      	b.n	801013e <__ieee754_fmod+0x1da>
 801015a:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
 801015e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8010162:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
 8010166:	32e2      	adds	r2, #226	; 0xe2
 8010168:	fa43 f202 	asr.w	r2, r3, r2
 801016c:	e7f3      	b.n	8010156 <__ieee754_fmod+0x1f2>
 801016e:	bf00      	nop
 8010170:	7fefffff 	.word	0x7fefffff
 8010174:	08015150 	.word	0x08015150
 8010178:	fffffbed 	.word	0xfffffbed
 801017c:	7ff00000 	.word	0x7ff00000
 8010180:	fffffc02 	.word	0xfffffc02
 8010184:	fffffbe2 	.word	0xfffffbe2

08010188 <__ieee754_pow>:
 8010188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801018c:	ed2d 8b06 	vpush	{d8-d10}
 8010190:	b089      	sub	sp, #36	; 0x24
 8010192:	ed8d 1b00 	vstr	d1, [sp]
 8010196:	e9dd 2900 	ldrd	r2, r9, [sp]
 801019a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 801019e:	ea58 0102 	orrs.w	r1, r8, r2
 80101a2:	ec57 6b10 	vmov	r6, r7, d0
 80101a6:	d115      	bne.n	80101d4 <__ieee754_pow+0x4c>
 80101a8:	19b3      	adds	r3, r6, r6
 80101aa:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 80101ae:	4152      	adcs	r2, r2
 80101b0:	4299      	cmp	r1, r3
 80101b2:	4b89      	ldr	r3, [pc, #548]	; (80103d8 <__ieee754_pow+0x250>)
 80101b4:	4193      	sbcs	r3, r2
 80101b6:	f080 84d2 	bcs.w	8010b5e <__ieee754_pow+0x9d6>
 80101ba:	e9dd 2300 	ldrd	r2, r3, [sp]
 80101be:	4630      	mov	r0, r6
 80101c0:	4639      	mov	r1, r7
 80101c2:	f7f0 f863 	bl	800028c <__adddf3>
 80101c6:	ec41 0b10 	vmov	d0, r0, r1
 80101ca:	b009      	add	sp, #36	; 0x24
 80101cc:	ecbd 8b06 	vpop	{d8-d10}
 80101d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80101d4:	4b81      	ldr	r3, [pc, #516]	; (80103dc <__ieee754_pow+0x254>)
 80101d6:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80101da:	429c      	cmp	r4, r3
 80101dc:	ee10 aa10 	vmov	sl, s0
 80101e0:	463d      	mov	r5, r7
 80101e2:	dc06      	bgt.n	80101f2 <__ieee754_pow+0x6a>
 80101e4:	d101      	bne.n	80101ea <__ieee754_pow+0x62>
 80101e6:	2e00      	cmp	r6, #0
 80101e8:	d1e7      	bne.n	80101ba <__ieee754_pow+0x32>
 80101ea:	4598      	cmp	r8, r3
 80101ec:	dc01      	bgt.n	80101f2 <__ieee754_pow+0x6a>
 80101ee:	d10f      	bne.n	8010210 <__ieee754_pow+0x88>
 80101f0:	b172      	cbz	r2, 8010210 <__ieee754_pow+0x88>
 80101f2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80101f6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80101fa:	ea55 050a 	orrs.w	r5, r5, sl
 80101fe:	d1dc      	bne.n	80101ba <__ieee754_pow+0x32>
 8010200:	e9dd 3200 	ldrd	r3, r2, [sp]
 8010204:	18db      	adds	r3, r3, r3
 8010206:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 801020a:	4152      	adcs	r2, r2
 801020c:	429d      	cmp	r5, r3
 801020e:	e7d0      	b.n	80101b2 <__ieee754_pow+0x2a>
 8010210:	2d00      	cmp	r5, #0
 8010212:	da3b      	bge.n	801028c <__ieee754_pow+0x104>
 8010214:	4b72      	ldr	r3, [pc, #456]	; (80103e0 <__ieee754_pow+0x258>)
 8010216:	4598      	cmp	r8, r3
 8010218:	dc51      	bgt.n	80102be <__ieee754_pow+0x136>
 801021a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 801021e:	4598      	cmp	r8, r3
 8010220:	f340 84ac 	ble.w	8010b7c <__ieee754_pow+0x9f4>
 8010224:	ea4f 5328 	mov.w	r3, r8, asr #20
 8010228:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801022c:	2b14      	cmp	r3, #20
 801022e:	dd0f      	ble.n	8010250 <__ieee754_pow+0xc8>
 8010230:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8010234:	fa22 f103 	lsr.w	r1, r2, r3
 8010238:	fa01 f303 	lsl.w	r3, r1, r3
 801023c:	4293      	cmp	r3, r2
 801023e:	f040 849d 	bne.w	8010b7c <__ieee754_pow+0x9f4>
 8010242:	f001 0101 	and.w	r1, r1, #1
 8010246:	f1c1 0302 	rsb	r3, r1, #2
 801024a:	9304      	str	r3, [sp, #16]
 801024c:	b182      	cbz	r2, 8010270 <__ieee754_pow+0xe8>
 801024e:	e05f      	b.n	8010310 <__ieee754_pow+0x188>
 8010250:	2a00      	cmp	r2, #0
 8010252:	d15b      	bne.n	801030c <__ieee754_pow+0x184>
 8010254:	f1c3 0314 	rsb	r3, r3, #20
 8010258:	fa48 f103 	asr.w	r1, r8, r3
 801025c:	fa01 f303 	lsl.w	r3, r1, r3
 8010260:	4543      	cmp	r3, r8
 8010262:	f040 8488 	bne.w	8010b76 <__ieee754_pow+0x9ee>
 8010266:	f001 0101 	and.w	r1, r1, #1
 801026a:	f1c1 0302 	rsb	r3, r1, #2
 801026e:	9304      	str	r3, [sp, #16]
 8010270:	4b5c      	ldr	r3, [pc, #368]	; (80103e4 <__ieee754_pow+0x25c>)
 8010272:	4598      	cmp	r8, r3
 8010274:	d132      	bne.n	80102dc <__ieee754_pow+0x154>
 8010276:	f1b9 0f00 	cmp.w	r9, #0
 801027a:	f280 8478 	bge.w	8010b6e <__ieee754_pow+0x9e6>
 801027e:	4959      	ldr	r1, [pc, #356]	; (80103e4 <__ieee754_pow+0x25c>)
 8010280:	4632      	mov	r2, r6
 8010282:	463b      	mov	r3, r7
 8010284:	2000      	movs	r0, #0
 8010286:	f7f0 fae1 	bl	800084c <__aeabi_ddiv>
 801028a:	e79c      	b.n	80101c6 <__ieee754_pow+0x3e>
 801028c:	2300      	movs	r3, #0
 801028e:	9304      	str	r3, [sp, #16]
 8010290:	2a00      	cmp	r2, #0
 8010292:	d13d      	bne.n	8010310 <__ieee754_pow+0x188>
 8010294:	4b51      	ldr	r3, [pc, #324]	; (80103dc <__ieee754_pow+0x254>)
 8010296:	4598      	cmp	r8, r3
 8010298:	d1ea      	bne.n	8010270 <__ieee754_pow+0xe8>
 801029a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 801029e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80102a2:	ea53 030a 	orrs.w	r3, r3, sl
 80102a6:	f000 845a 	beq.w	8010b5e <__ieee754_pow+0x9d6>
 80102aa:	4b4f      	ldr	r3, [pc, #316]	; (80103e8 <__ieee754_pow+0x260>)
 80102ac:	429c      	cmp	r4, r3
 80102ae:	dd08      	ble.n	80102c2 <__ieee754_pow+0x13a>
 80102b0:	f1b9 0f00 	cmp.w	r9, #0
 80102b4:	f2c0 8457 	blt.w	8010b66 <__ieee754_pow+0x9de>
 80102b8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80102bc:	e783      	b.n	80101c6 <__ieee754_pow+0x3e>
 80102be:	2302      	movs	r3, #2
 80102c0:	e7e5      	b.n	801028e <__ieee754_pow+0x106>
 80102c2:	f1b9 0f00 	cmp.w	r9, #0
 80102c6:	f04f 0000 	mov.w	r0, #0
 80102ca:	f04f 0100 	mov.w	r1, #0
 80102ce:	f6bf af7a 	bge.w	80101c6 <__ieee754_pow+0x3e>
 80102d2:	e9dd 0300 	ldrd	r0, r3, [sp]
 80102d6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80102da:	e774      	b.n	80101c6 <__ieee754_pow+0x3e>
 80102dc:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80102e0:	d106      	bne.n	80102f0 <__ieee754_pow+0x168>
 80102e2:	4632      	mov	r2, r6
 80102e4:	463b      	mov	r3, r7
 80102e6:	4630      	mov	r0, r6
 80102e8:	4639      	mov	r1, r7
 80102ea:	f7f0 f985 	bl	80005f8 <__aeabi_dmul>
 80102ee:	e76a      	b.n	80101c6 <__ieee754_pow+0x3e>
 80102f0:	4b3e      	ldr	r3, [pc, #248]	; (80103ec <__ieee754_pow+0x264>)
 80102f2:	4599      	cmp	r9, r3
 80102f4:	d10c      	bne.n	8010310 <__ieee754_pow+0x188>
 80102f6:	2d00      	cmp	r5, #0
 80102f8:	db0a      	blt.n	8010310 <__ieee754_pow+0x188>
 80102fa:	ec47 6b10 	vmov	d0, r6, r7
 80102fe:	b009      	add	sp, #36	; 0x24
 8010300:	ecbd 8b06 	vpop	{d8-d10}
 8010304:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010308:	f000 bc6c 	b.w	8010be4 <__ieee754_sqrt>
 801030c:	2300      	movs	r3, #0
 801030e:	9304      	str	r3, [sp, #16]
 8010310:	ec47 6b10 	vmov	d0, r6, r7
 8010314:	f000 fee8 	bl	80110e8 <fabs>
 8010318:	ec51 0b10 	vmov	r0, r1, d0
 801031c:	f1ba 0f00 	cmp.w	sl, #0
 8010320:	d129      	bne.n	8010376 <__ieee754_pow+0x1ee>
 8010322:	b124      	cbz	r4, 801032e <__ieee754_pow+0x1a6>
 8010324:	4b2f      	ldr	r3, [pc, #188]	; (80103e4 <__ieee754_pow+0x25c>)
 8010326:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 801032a:	429a      	cmp	r2, r3
 801032c:	d123      	bne.n	8010376 <__ieee754_pow+0x1ee>
 801032e:	f1b9 0f00 	cmp.w	r9, #0
 8010332:	da05      	bge.n	8010340 <__ieee754_pow+0x1b8>
 8010334:	4602      	mov	r2, r0
 8010336:	460b      	mov	r3, r1
 8010338:	2000      	movs	r0, #0
 801033a:	492a      	ldr	r1, [pc, #168]	; (80103e4 <__ieee754_pow+0x25c>)
 801033c:	f7f0 fa86 	bl	800084c <__aeabi_ddiv>
 8010340:	2d00      	cmp	r5, #0
 8010342:	f6bf af40 	bge.w	80101c6 <__ieee754_pow+0x3e>
 8010346:	9b04      	ldr	r3, [sp, #16]
 8010348:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801034c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8010350:	4323      	orrs	r3, r4
 8010352:	d108      	bne.n	8010366 <__ieee754_pow+0x1de>
 8010354:	4602      	mov	r2, r0
 8010356:	460b      	mov	r3, r1
 8010358:	4610      	mov	r0, r2
 801035a:	4619      	mov	r1, r3
 801035c:	f7ef ff94 	bl	8000288 <__aeabi_dsub>
 8010360:	4602      	mov	r2, r0
 8010362:	460b      	mov	r3, r1
 8010364:	e78f      	b.n	8010286 <__ieee754_pow+0xfe>
 8010366:	9b04      	ldr	r3, [sp, #16]
 8010368:	2b01      	cmp	r3, #1
 801036a:	f47f af2c 	bne.w	80101c6 <__ieee754_pow+0x3e>
 801036e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010372:	4619      	mov	r1, r3
 8010374:	e727      	b.n	80101c6 <__ieee754_pow+0x3e>
 8010376:	0feb      	lsrs	r3, r5, #31
 8010378:	3b01      	subs	r3, #1
 801037a:	9306      	str	r3, [sp, #24]
 801037c:	9a06      	ldr	r2, [sp, #24]
 801037e:	9b04      	ldr	r3, [sp, #16]
 8010380:	4313      	orrs	r3, r2
 8010382:	d102      	bne.n	801038a <__ieee754_pow+0x202>
 8010384:	4632      	mov	r2, r6
 8010386:	463b      	mov	r3, r7
 8010388:	e7e6      	b.n	8010358 <__ieee754_pow+0x1d0>
 801038a:	4b19      	ldr	r3, [pc, #100]	; (80103f0 <__ieee754_pow+0x268>)
 801038c:	4598      	cmp	r8, r3
 801038e:	f340 80fb 	ble.w	8010588 <__ieee754_pow+0x400>
 8010392:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8010396:	4598      	cmp	r8, r3
 8010398:	4b13      	ldr	r3, [pc, #76]	; (80103e8 <__ieee754_pow+0x260>)
 801039a:	dd0c      	ble.n	80103b6 <__ieee754_pow+0x22e>
 801039c:	429c      	cmp	r4, r3
 801039e:	dc0f      	bgt.n	80103c0 <__ieee754_pow+0x238>
 80103a0:	f1b9 0f00 	cmp.w	r9, #0
 80103a4:	da0f      	bge.n	80103c6 <__ieee754_pow+0x23e>
 80103a6:	2000      	movs	r0, #0
 80103a8:	b009      	add	sp, #36	; 0x24
 80103aa:	ecbd 8b06 	vpop	{d8-d10}
 80103ae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80103b2:	f000 bcf0 	b.w	8010d96 <__math_oflow>
 80103b6:	429c      	cmp	r4, r3
 80103b8:	dbf2      	blt.n	80103a0 <__ieee754_pow+0x218>
 80103ba:	4b0a      	ldr	r3, [pc, #40]	; (80103e4 <__ieee754_pow+0x25c>)
 80103bc:	429c      	cmp	r4, r3
 80103be:	dd19      	ble.n	80103f4 <__ieee754_pow+0x26c>
 80103c0:	f1b9 0f00 	cmp.w	r9, #0
 80103c4:	dcef      	bgt.n	80103a6 <__ieee754_pow+0x21e>
 80103c6:	2000      	movs	r0, #0
 80103c8:	b009      	add	sp, #36	; 0x24
 80103ca:	ecbd 8b06 	vpop	{d8-d10}
 80103ce:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80103d2:	f000 bcd7 	b.w	8010d84 <__math_uflow>
 80103d6:	bf00      	nop
 80103d8:	fff00000 	.word	0xfff00000
 80103dc:	7ff00000 	.word	0x7ff00000
 80103e0:	433fffff 	.word	0x433fffff
 80103e4:	3ff00000 	.word	0x3ff00000
 80103e8:	3fefffff 	.word	0x3fefffff
 80103ec:	3fe00000 	.word	0x3fe00000
 80103f0:	41e00000 	.word	0x41e00000
 80103f4:	4b60      	ldr	r3, [pc, #384]	; (8010578 <__ieee754_pow+0x3f0>)
 80103f6:	2200      	movs	r2, #0
 80103f8:	f7ef ff46 	bl	8000288 <__aeabi_dsub>
 80103fc:	a354      	add	r3, pc, #336	; (adr r3, 8010550 <__ieee754_pow+0x3c8>)
 80103fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010402:	4604      	mov	r4, r0
 8010404:	460d      	mov	r5, r1
 8010406:	f7f0 f8f7 	bl	80005f8 <__aeabi_dmul>
 801040a:	a353      	add	r3, pc, #332	; (adr r3, 8010558 <__ieee754_pow+0x3d0>)
 801040c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010410:	4606      	mov	r6, r0
 8010412:	460f      	mov	r7, r1
 8010414:	4620      	mov	r0, r4
 8010416:	4629      	mov	r1, r5
 8010418:	f7f0 f8ee 	bl	80005f8 <__aeabi_dmul>
 801041c:	4b57      	ldr	r3, [pc, #348]	; (801057c <__ieee754_pow+0x3f4>)
 801041e:	4682      	mov	sl, r0
 8010420:	468b      	mov	fp, r1
 8010422:	2200      	movs	r2, #0
 8010424:	4620      	mov	r0, r4
 8010426:	4629      	mov	r1, r5
 8010428:	f7f0 f8e6 	bl	80005f8 <__aeabi_dmul>
 801042c:	4602      	mov	r2, r0
 801042e:	460b      	mov	r3, r1
 8010430:	a14b      	add	r1, pc, #300	; (adr r1, 8010560 <__ieee754_pow+0x3d8>)
 8010432:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010436:	f7ef ff27 	bl	8000288 <__aeabi_dsub>
 801043a:	4622      	mov	r2, r4
 801043c:	462b      	mov	r3, r5
 801043e:	f7f0 f8db 	bl	80005f8 <__aeabi_dmul>
 8010442:	4602      	mov	r2, r0
 8010444:	460b      	mov	r3, r1
 8010446:	2000      	movs	r0, #0
 8010448:	494d      	ldr	r1, [pc, #308]	; (8010580 <__ieee754_pow+0x3f8>)
 801044a:	f7ef ff1d 	bl	8000288 <__aeabi_dsub>
 801044e:	4622      	mov	r2, r4
 8010450:	4680      	mov	r8, r0
 8010452:	4689      	mov	r9, r1
 8010454:	462b      	mov	r3, r5
 8010456:	4620      	mov	r0, r4
 8010458:	4629      	mov	r1, r5
 801045a:	f7f0 f8cd 	bl	80005f8 <__aeabi_dmul>
 801045e:	4602      	mov	r2, r0
 8010460:	460b      	mov	r3, r1
 8010462:	4640      	mov	r0, r8
 8010464:	4649      	mov	r1, r9
 8010466:	f7f0 f8c7 	bl	80005f8 <__aeabi_dmul>
 801046a:	a33f      	add	r3, pc, #252	; (adr r3, 8010568 <__ieee754_pow+0x3e0>)
 801046c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010470:	f7f0 f8c2 	bl	80005f8 <__aeabi_dmul>
 8010474:	4602      	mov	r2, r0
 8010476:	460b      	mov	r3, r1
 8010478:	4650      	mov	r0, sl
 801047a:	4659      	mov	r1, fp
 801047c:	f7ef ff04 	bl	8000288 <__aeabi_dsub>
 8010480:	4602      	mov	r2, r0
 8010482:	460b      	mov	r3, r1
 8010484:	4680      	mov	r8, r0
 8010486:	4689      	mov	r9, r1
 8010488:	4630      	mov	r0, r6
 801048a:	4639      	mov	r1, r7
 801048c:	f7ef fefe 	bl	800028c <__adddf3>
 8010490:	2000      	movs	r0, #0
 8010492:	4632      	mov	r2, r6
 8010494:	463b      	mov	r3, r7
 8010496:	4604      	mov	r4, r0
 8010498:	460d      	mov	r5, r1
 801049a:	f7ef fef5 	bl	8000288 <__aeabi_dsub>
 801049e:	4602      	mov	r2, r0
 80104a0:	460b      	mov	r3, r1
 80104a2:	4640      	mov	r0, r8
 80104a4:	4649      	mov	r1, r9
 80104a6:	f7ef feef 	bl	8000288 <__aeabi_dsub>
 80104aa:	9b04      	ldr	r3, [sp, #16]
 80104ac:	9a06      	ldr	r2, [sp, #24]
 80104ae:	3b01      	subs	r3, #1
 80104b0:	4313      	orrs	r3, r2
 80104b2:	4682      	mov	sl, r0
 80104b4:	468b      	mov	fp, r1
 80104b6:	f040 81e7 	bne.w	8010888 <__ieee754_pow+0x700>
 80104ba:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8010570 <__ieee754_pow+0x3e8>
 80104be:	eeb0 8a47 	vmov.f32	s16, s14
 80104c2:	eef0 8a67 	vmov.f32	s17, s15
 80104c6:	e9dd 6700 	ldrd	r6, r7, [sp]
 80104ca:	2600      	movs	r6, #0
 80104cc:	4632      	mov	r2, r6
 80104ce:	463b      	mov	r3, r7
 80104d0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80104d4:	f7ef fed8 	bl	8000288 <__aeabi_dsub>
 80104d8:	4622      	mov	r2, r4
 80104da:	462b      	mov	r3, r5
 80104dc:	f7f0 f88c 	bl	80005f8 <__aeabi_dmul>
 80104e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80104e4:	4680      	mov	r8, r0
 80104e6:	4689      	mov	r9, r1
 80104e8:	4650      	mov	r0, sl
 80104ea:	4659      	mov	r1, fp
 80104ec:	f7f0 f884 	bl	80005f8 <__aeabi_dmul>
 80104f0:	4602      	mov	r2, r0
 80104f2:	460b      	mov	r3, r1
 80104f4:	4640      	mov	r0, r8
 80104f6:	4649      	mov	r1, r9
 80104f8:	f7ef fec8 	bl	800028c <__adddf3>
 80104fc:	4632      	mov	r2, r6
 80104fe:	463b      	mov	r3, r7
 8010500:	4680      	mov	r8, r0
 8010502:	4689      	mov	r9, r1
 8010504:	4620      	mov	r0, r4
 8010506:	4629      	mov	r1, r5
 8010508:	f7f0 f876 	bl	80005f8 <__aeabi_dmul>
 801050c:	460b      	mov	r3, r1
 801050e:	4604      	mov	r4, r0
 8010510:	460d      	mov	r5, r1
 8010512:	4602      	mov	r2, r0
 8010514:	4649      	mov	r1, r9
 8010516:	4640      	mov	r0, r8
 8010518:	f7ef feb8 	bl	800028c <__adddf3>
 801051c:	4b19      	ldr	r3, [pc, #100]	; (8010584 <__ieee754_pow+0x3fc>)
 801051e:	4299      	cmp	r1, r3
 8010520:	ec45 4b19 	vmov	d9, r4, r5
 8010524:	4606      	mov	r6, r0
 8010526:	460f      	mov	r7, r1
 8010528:	468b      	mov	fp, r1
 801052a:	f340 82f1 	ble.w	8010b10 <__ieee754_pow+0x988>
 801052e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8010532:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8010536:	4303      	orrs	r3, r0
 8010538:	f000 81e4 	beq.w	8010904 <__ieee754_pow+0x77c>
 801053c:	ec51 0b18 	vmov	r0, r1, d8
 8010540:	2200      	movs	r2, #0
 8010542:	2300      	movs	r3, #0
 8010544:	f7f0 faca 	bl	8000adc <__aeabi_dcmplt>
 8010548:	3800      	subs	r0, #0
 801054a:	bf18      	it	ne
 801054c:	2001      	movne	r0, #1
 801054e:	e72b      	b.n	80103a8 <__ieee754_pow+0x220>
 8010550:	60000000 	.word	0x60000000
 8010554:	3ff71547 	.word	0x3ff71547
 8010558:	f85ddf44 	.word	0xf85ddf44
 801055c:	3e54ae0b 	.word	0x3e54ae0b
 8010560:	55555555 	.word	0x55555555
 8010564:	3fd55555 	.word	0x3fd55555
 8010568:	652b82fe 	.word	0x652b82fe
 801056c:	3ff71547 	.word	0x3ff71547
 8010570:	00000000 	.word	0x00000000
 8010574:	bff00000 	.word	0xbff00000
 8010578:	3ff00000 	.word	0x3ff00000
 801057c:	3fd00000 	.word	0x3fd00000
 8010580:	3fe00000 	.word	0x3fe00000
 8010584:	408fffff 	.word	0x408fffff
 8010588:	4bd5      	ldr	r3, [pc, #852]	; (80108e0 <__ieee754_pow+0x758>)
 801058a:	402b      	ands	r3, r5
 801058c:	2200      	movs	r2, #0
 801058e:	b92b      	cbnz	r3, 801059c <__ieee754_pow+0x414>
 8010590:	4bd4      	ldr	r3, [pc, #848]	; (80108e4 <__ieee754_pow+0x75c>)
 8010592:	f7f0 f831 	bl	80005f8 <__aeabi_dmul>
 8010596:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801059a:	460c      	mov	r4, r1
 801059c:	1523      	asrs	r3, r4, #20
 801059e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80105a2:	4413      	add	r3, r2
 80105a4:	9305      	str	r3, [sp, #20]
 80105a6:	4bd0      	ldr	r3, [pc, #832]	; (80108e8 <__ieee754_pow+0x760>)
 80105a8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80105ac:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80105b0:	429c      	cmp	r4, r3
 80105b2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80105b6:	dd08      	ble.n	80105ca <__ieee754_pow+0x442>
 80105b8:	4bcc      	ldr	r3, [pc, #816]	; (80108ec <__ieee754_pow+0x764>)
 80105ba:	429c      	cmp	r4, r3
 80105bc:	f340 8162 	ble.w	8010884 <__ieee754_pow+0x6fc>
 80105c0:	9b05      	ldr	r3, [sp, #20]
 80105c2:	3301      	adds	r3, #1
 80105c4:	9305      	str	r3, [sp, #20]
 80105c6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80105ca:	2400      	movs	r4, #0
 80105cc:	00e3      	lsls	r3, r4, #3
 80105ce:	9307      	str	r3, [sp, #28]
 80105d0:	4bc7      	ldr	r3, [pc, #796]	; (80108f0 <__ieee754_pow+0x768>)
 80105d2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80105d6:	ed93 7b00 	vldr	d7, [r3]
 80105da:	4629      	mov	r1, r5
 80105dc:	ec53 2b17 	vmov	r2, r3, d7
 80105e0:	eeb0 9a47 	vmov.f32	s18, s14
 80105e4:	eef0 9a67 	vmov.f32	s19, s15
 80105e8:	4682      	mov	sl, r0
 80105ea:	f7ef fe4d 	bl	8000288 <__aeabi_dsub>
 80105ee:	4652      	mov	r2, sl
 80105f0:	4606      	mov	r6, r0
 80105f2:	460f      	mov	r7, r1
 80105f4:	462b      	mov	r3, r5
 80105f6:	ec51 0b19 	vmov	r0, r1, d9
 80105fa:	f7ef fe47 	bl	800028c <__adddf3>
 80105fe:	4602      	mov	r2, r0
 8010600:	460b      	mov	r3, r1
 8010602:	2000      	movs	r0, #0
 8010604:	49bb      	ldr	r1, [pc, #748]	; (80108f4 <__ieee754_pow+0x76c>)
 8010606:	f7f0 f921 	bl	800084c <__aeabi_ddiv>
 801060a:	ec41 0b1a 	vmov	d10, r0, r1
 801060e:	4602      	mov	r2, r0
 8010610:	460b      	mov	r3, r1
 8010612:	4630      	mov	r0, r6
 8010614:	4639      	mov	r1, r7
 8010616:	f7ef ffef 	bl	80005f8 <__aeabi_dmul>
 801061a:	2300      	movs	r3, #0
 801061c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010620:	9302      	str	r3, [sp, #8]
 8010622:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8010626:	46ab      	mov	fp, r5
 8010628:	106d      	asrs	r5, r5, #1
 801062a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 801062e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8010632:	ec41 0b18 	vmov	d8, r0, r1
 8010636:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 801063a:	2200      	movs	r2, #0
 801063c:	4640      	mov	r0, r8
 801063e:	4649      	mov	r1, r9
 8010640:	4614      	mov	r4, r2
 8010642:	461d      	mov	r5, r3
 8010644:	f7ef ffd8 	bl	80005f8 <__aeabi_dmul>
 8010648:	4602      	mov	r2, r0
 801064a:	460b      	mov	r3, r1
 801064c:	4630      	mov	r0, r6
 801064e:	4639      	mov	r1, r7
 8010650:	f7ef fe1a 	bl	8000288 <__aeabi_dsub>
 8010654:	ec53 2b19 	vmov	r2, r3, d9
 8010658:	4606      	mov	r6, r0
 801065a:	460f      	mov	r7, r1
 801065c:	4620      	mov	r0, r4
 801065e:	4629      	mov	r1, r5
 8010660:	f7ef fe12 	bl	8000288 <__aeabi_dsub>
 8010664:	4602      	mov	r2, r0
 8010666:	460b      	mov	r3, r1
 8010668:	4650      	mov	r0, sl
 801066a:	4659      	mov	r1, fp
 801066c:	f7ef fe0c 	bl	8000288 <__aeabi_dsub>
 8010670:	4642      	mov	r2, r8
 8010672:	464b      	mov	r3, r9
 8010674:	f7ef ffc0 	bl	80005f8 <__aeabi_dmul>
 8010678:	4602      	mov	r2, r0
 801067a:	460b      	mov	r3, r1
 801067c:	4630      	mov	r0, r6
 801067e:	4639      	mov	r1, r7
 8010680:	f7ef fe02 	bl	8000288 <__aeabi_dsub>
 8010684:	ec53 2b1a 	vmov	r2, r3, d10
 8010688:	f7ef ffb6 	bl	80005f8 <__aeabi_dmul>
 801068c:	ec53 2b18 	vmov	r2, r3, d8
 8010690:	ec41 0b19 	vmov	d9, r0, r1
 8010694:	ec51 0b18 	vmov	r0, r1, d8
 8010698:	f7ef ffae 	bl	80005f8 <__aeabi_dmul>
 801069c:	a37c      	add	r3, pc, #496	; (adr r3, 8010890 <__ieee754_pow+0x708>)
 801069e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106a2:	4604      	mov	r4, r0
 80106a4:	460d      	mov	r5, r1
 80106a6:	f7ef ffa7 	bl	80005f8 <__aeabi_dmul>
 80106aa:	a37b      	add	r3, pc, #492	; (adr r3, 8010898 <__ieee754_pow+0x710>)
 80106ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106b0:	f7ef fdec 	bl	800028c <__adddf3>
 80106b4:	4622      	mov	r2, r4
 80106b6:	462b      	mov	r3, r5
 80106b8:	f7ef ff9e 	bl	80005f8 <__aeabi_dmul>
 80106bc:	a378      	add	r3, pc, #480	; (adr r3, 80108a0 <__ieee754_pow+0x718>)
 80106be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106c2:	f7ef fde3 	bl	800028c <__adddf3>
 80106c6:	4622      	mov	r2, r4
 80106c8:	462b      	mov	r3, r5
 80106ca:	f7ef ff95 	bl	80005f8 <__aeabi_dmul>
 80106ce:	a376      	add	r3, pc, #472	; (adr r3, 80108a8 <__ieee754_pow+0x720>)
 80106d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106d4:	f7ef fdda 	bl	800028c <__adddf3>
 80106d8:	4622      	mov	r2, r4
 80106da:	462b      	mov	r3, r5
 80106dc:	f7ef ff8c 	bl	80005f8 <__aeabi_dmul>
 80106e0:	a373      	add	r3, pc, #460	; (adr r3, 80108b0 <__ieee754_pow+0x728>)
 80106e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106e6:	f7ef fdd1 	bl	800028c <__adddf3>
 80106ea:	4622      	mov	r2, r4
 80106ec:	462b      	mov	r3, r5
 80106ee:	f7ef ff83 	bl	80005f8 <__aeabi_dmul>
 80106f2:	a371      	add	r3, pc, #452	; (adr r3, 80108b8 <__ieee754_pow+0x730>)
 80106f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106f8:	f7ef fdc8 	bl	800028c <__adddf3>
 80106fc:	4622      	mov	r2, r4
 80106fe:	4606      	mov	r6, r0
 8010700:	460f      	mov	r7, r1
 8010702:	462b      	mov	r3, r5
 8010704:	4620      	mov	r0, r4
 8010706:	4629      	mov	r1, r5
 8010708:	f7ef ff76 	bl	80005f8 <__aeabi_dmul>
 801070c:	4602      	mov	r2, r0
 801070e:	460b      	mov	r3, r1
 8010710:	4630      	mov	r0, r6
 8010712:	4639      	mov	r1, r7
 8010714:	f7ef ff70 	bl	80005f8 <__aeabi_dmul>
 8010718:	4642      	mov	r2, r8
 801071a:	4604      	mov	r4, r0
 801071c:	460d      	mov	r5, r1
 801071e:	464b      	mov	r3, r9
 8010720:	ec51 0b18 	vmov	r0, r1, d8
 8010724:	f7ef fdb2 	bl	800028c <__adddf3>
 8010728:	ec53 2b19 	vmov	r2, r3, d9
 801072c:	f7ef ff64 	bl	80005f8 <__aeabi_dmul>
 8010730:	4622      	mov	r2, r4
 8010732:	462b      	mov	r3, r5
 8010734:	f7ef fdaa 	bl	800028c <__adddf3>
 8010738:	4642      	mov	r2, r8
 801073a:	4682      	mov	sl, r0
 801073c:	468b      	mov	fp, r1
 801073e:	464b      	mov	r3, r9
 8010740:	4640      	mov	r0, r8
 8010742:	4649      	mov	r1, r9
 8010744:	f7ef ff58 	bl	80005f8 <__aeabi_dmul>
 8010748:	4b6b      	ldr	r3, [pc, #428]	; (80108f8 <__ieee754_pow+0x770>)
 801074a:	2200      	movs	r2, #0
 801074c:	4606      	mov	r6, r0
 801074e:	460f      	mov	r7, r1
 8010750:	f7ef fd9c 	bl	800028c <__adddf3>
 8010754:	4652      	mov	r2, sl
 8010756:	465b      	mov	r3, fp
 8010758:	f7ef fd98 	bl	800028c <__adddf3>
 801075c:	2000      	movs	r0, #0
 801075e:	4604      	mov	r4, r0
 8010760:	460d      	mov	r5, r1
 8010762:	4602      	mov	r2, r0
 8010764:	460b      	mov	r3, r1
 8010766:	4640      	mov	r0, r8
 8010768:	4649      	mov	r1, r9
 801076a:	f7ef ff45 	bl	80005f8 <__aeabi_dmul>
 801076e:	4b62      	ldr	r3, [pc, #392]	; (80108f8 <__ieee754_pow+0x770>)
 8010770:	4680      	mov	r8, r0
 8010772:	4689      	mov	r9, r1
 8010774:	2200      	movs	r2, #0
 8010776:	4620      	mov	r0, r4
 8010778:	4629      	mov	r1, r5
 801077a:	f7ef fd85 	bl	8000288 <__aeabi_dsub>
 801077e:	4632      	mov	r2, r6
 8010780:	463b      	mov	r3, r7
 8010782:	f7ef fd81 	bl	8000288 <__aeabi_dsub>
 8010786:	4602      	mov	r2, r0
 8010788:	460b      	mov	r3, r1
 801078a:	4650      	mov	r0, sl
 801078c:	4659      	mov	r1, fp
 801078e:	f7ef fd7b 	bl	8000288 <__aeabi_dsub>
 8010792:	ec53 2b18 	vmov	r2, r3, d8
 8010796:	f7ef ff2f 	bl	80005f8 <__aeabi_dmul>
 801079a:	4622      	mov	r2, r4
 801079c:	4606      	mov	r6, r0
 801079e:	460f      	mov	r7, r1
 80107a0:	462b      	mov	r3, r5
 80107a2:	ec51 0b19 	vmov	r0, r1, d9
 80107a6:	f7ef ff27 	bl	80005f8 <__aeabi_dmul>
 80107aa:	4602      	mov	r2, r0
 80107ac:	460b      	mov	r3, r1
 80107ae:	4630      	mov	r0, r6
 80107b0:	4639      	mov	r1, r7
 80107b2:	f7ef fd6b 	bl	800028c <__adddf3>
 80107b6:	4606      	mov	r6, r0
 80107b8:	460f      	mov	r7, r1
 80107ba:	4602      	mov	r2, r0
 80107bc:	460b      	mov	r3, r1
 80107be:	4640      	mov	r0, r8
 80107c0:	4649      	mov	r1, r9
 80107c2:	f7ef fd63 	bl	800028c <__adddf3>
 80107c6:	a33e      	add	r3, pc, #248	; (adr r3, 80108c0 <__ieee754_pow+0x738>)
 80107c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107cc:	2000      	movs	r0, #0
 80107ce:	4604      	mov	r4, r0
 80107d0:	460d      	mov	r5, r1
 80107d2:	f7ef ff11 	bl	80005f8 <__aeabi_dmul>
 80107d6:	4642      	mov	r2, r8
 80107d8:	ec41 0b18 	vmov	d8, r0, r1
 80107dc:	464b      	mov	r3, r9
 80107de:	4620      	mov	r0, r4
 80107e0:	4629      	mov	r1, r5
 80107e2:	f7ef fd51 	bl	8000288 <__aeabi_dsub>
 80107e6:	4602      	mov	r2, r0
 80107e8:	460b      	mov	r3, r1
 80107ea:	4630      	mov	r0, r6
 80107ec:	4639      	mov	r1, r7
 80107ee:	f7ef fd4b 	bl	8000288 <__aeabi_dsub>
 80107f2:	a335      	add	r3, pc, #212	; (adr r3, 80108c8 <__ieee754_pow+0x740>)
 80107f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107f8:	f7ef fefe 	bl	80005f8 <__aeabi_dmul>
 80107fc:	a334      	add	r3, pc, #208	; (adr r3, 80108d0 <__ieee754_pow+0x748>)
 80107fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010802:	4606      	mov	r6, r0
 8010804:	460f      	mov	r7, r1
 8010806:	4620      	mov	r0, r4
 8010808:	4629      	mov	r1, r5
 801080a:	f7ef fef5 	bl	80005f8 <__aeabi_dmul>
 801080e:	4602      	mov	r2, r0
 8010810:	460b      	mov	r3, r1
 8010812:	4630      	mov	r0, r6
 8010814:	4639      	mov	r1, r7
 8010816:	f7ef fd39 	bl	800028c <__adddf3>
 801081a:	9a07      	ldr	r2, [sp, #28]
 801081c:	4b37      	ldr	r3, [pc, #220]	; (80108fc <__ieee754_pow+0x774>)
 801081e:	4413      	add	r3, r2
 8010820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010824:	f7ef fd32 	bl	800028c <__adddf3>
 8010828:	4682      	mov	sl, r0
 801082a:	9805      	ldr	r0, [sp, #20]
 801082c:	468b      	mov	fp, r1
 801082e:	f7ef fe79 	bl	8000524 <__aeabi_i2d>
 8010832:	9a07      	ldr	r2, [sp, #28]
 8010834:	4b32      	ldr	r3, [pc, #200]	; (8010900 <__ieee754_pow+0x778>)
 8010836:	4413      	add	r3, r2
 8010838:	e9d3 8900 	ldrd	r8, r9, [r3]
 801083c:	4606      	mov	r6, r0
 801083e:	460f      	mov	r7, r1
 8010840:	4652      	mov	r2, sl
 8010842:	465b      	mov	r3, fp
 8010844:	ec51 0b18 	vmov	r0, r1, d8
 8010848:	f7ef fd20 	bl	800028c <__adddf3>
 801084c:	4642      	mov	r2, r8
 801084e:	464b      	mov	r3, r9
 8010850:	f7ef fd1c 	bl	800028c <__adddf3>
 8010854:	4632      	mov	r2, r6
 8010856:	463b      	mov	r3, r7
 8010858:	f7ef fd18 	bl	800028c <__adddf3>
 801085c:	2000      	movs	r0, #0
 801085e:	4632      	mov	r2, r6
 8010860:	463b      	mov	r3, r7
 8010862:	4604      	mov	r4, r0
 8010864:	460d      	mov	r5, r1
 8010866:	f7ef fd0f 	bl	8000288 <__aeabi_dsub>
 801086a:	4642      	mov	r2, r8
 801086c:	464b      	mov	r3, r9
 801086e:	f7ef fd0b 	bl	8000288 <__aeabi_dsub>
 8010872:	ec53 2b18 	vmov	r2, r3, d8
 8010876:	f7ef fd07 	bl	8000288 <__aeabi_dsub>
 801087a:	4602      	mov	r2, r0
 801087c:	460b      	mov	r3, r1
 801087e:	4650      	mov	r0, sl
 8010880:	4659      	mov	r1, fp
 8010882:	e610      	b.n	80104a6 <__ieee754_pow+0x31e>
 8010884:	2401      	movs	r4, #1
 8010886:	e6a1      	b.n	80105cc <__ieee754_pow+0x444>
 8010888:	ed9f 7b13 	vldr	d7, [pc, #76]	; 80108d8 <__ieee754_pow+0x750>
 801088c:	e617      	b.n	80104be <__ieee754_pow+0x336>
 801088e:	bf00      	nop
 8010890:	4a454eef 	.word	0x4a454eef
 8010894:	3fca7e28 	.word	0x3fca7e28
 8010898:	93c9db65 	.word	0x93c9db65
 801089c:	3fcd864a 	.word	0x3fcd864a
 80108a0:	a91d4101 	.word	0xa91d4101
 80108a4:	3fd17460 	.word	0x3fd17460
 80108a8:	518f264d 	.word	0x518f264d
 80108ac:	3fd55555 	.word	0x3fd55555
 80108b0:	db6fabff 	.word	0xdb6fabff
 80108b4:	3fdb6db6 	.word	0x3fdb6db6
 80108b8:	33333303 	.word	0x33333303
 80108bc:	3fe33333 	.word	0x3fe33333
 80108c0:	e0000000 	.word	0xe0000000
 80108c4:	3feec709 	.word	0x3feec709
 80108c8:	dc3a03fd 	.word	0xdc3a03fd
 80108cc:	3feec709 	.word	0x3feec709
 80108d0:	145b01f5 	.word	0x145b01f5
 80108d4:	be3e2fe0 	.word	0xbe3e2fe0
 80108d8:	00000000 	.word	0x00000000
 80108dc:	3ff00000 	.word	0x3ff00000
 80108e0:	7ff00000 	.word	0x7ff00000
 80108e4:	43400000 	.word	0x43400000
 80108e8:	0003988e 	.word	0x0003988e
 80108ec:	000bb679 	.word	0x000bb679
 80108f0:	08015160 	.word	0x08015160
 80108f4:	3ff00000 	.word	0x3ff00000
 80108f8:	40080000 	.word	0x40080000
 80108fc:	08015180 	.word	0x08015180
 8010900:	08015170 	.word	0x08015170
 8010904:	a3b5      	add	r3, pc, #724	; (adr r3, 8010bdc <__ieee754_pow+0xa54>)
 8010906:	e9d3 2300 	ldrd	r2, r3, [r3]
 801090a:	4640      	mov	r0, r8
 801090c:	4649      	mov	r1, r9
 801090e:	f7ef fcbd 	bl	800028c <__adddf3>
 8010912:	4622      	mov	r2, r4
 8010914:	ec41 0b1a 	vmov	d10, r0, r1
 8010918:	462b      	mov	r3, r5
 801091a:	4630      	mov	r0, r6
 801091c:	4639      	mov	r1, r7
 801091e:	f7ef fcb3 	bl	8000288 <__aeabi_dsub>
 8010922:	4602      	mov	r2, r0
 8010924:	460b      	mov	r3, r1
 8010926:	ec51 0b1a 	vmov	r0, r1, d10
 801092a:	f7f0 f8f5 	bl	8000b18 <__aeabi_dcmpgt>
 801092e:	2800      	cmp	r0, #0
 8010930:	f47f ae04 	bne.w	801053c <__ieee754_pow+0x3b4>
 8010934:	4aa4      	ldr	r2, [pc, #656]	; (8010bc8 <__ieee754_pow+0xa40>)
 8010936:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801093a:	4293      	cmp	r3, r2
 801093c:	f340 8108 	ble.w	8010b50 <__ieee754_pow+0x9c8>
 8010940:	151b      	asrs	r3, r3, #20
 8010942:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8010946:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801094a:	fa4a f303 	asr.w	r3, sl, r3
 801094e:	445b      	add	r3, fp
 8010950:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8010954:	4e9d      	ldr	r6, [pc, #628]	; (8010bcc <__ieee754_pow+0xa44>)
 8010956:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 801095a:	4116      	asrs	r6, r2
 801095c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8010960:	2000      	movs	r0, #0
 8010962:	ea23 0106 	bic.w	r1, r3, r6
 8010966:	f1c2 0214 	rsb	r2, r2, #20
 801096a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801096e:	fa4a fa02 	asr.w	sl, sl, r2
 8010972:	f1bb 0f00 	cmp.w	fp, #0
 8010976:	4602      	mov	r2, r0
 8010978:	460b      	mov	r3, r1
 801097a:	4620      	mov	r0, r4
 801097c:	4629      	mov	r1, r5
 801097e:	bfb8      	it	lt
 8010980:	f1ca 0a00 	rsblt	sl, sl, #0
 8010984:	f7ef fc80 	bl	8000288 <__aeabi_dsub>
 8010988:	ec41 0b19 	vmov	d9, r0, r1
 801098c:	4642      	mov	r2, r8
 801098e:	464b      	mov	r3, r9
 8010990:	ec51 0b19 	vmov	r0, r1, d9
 8010994:	f7ef fc7a 	bl	800028c <__adddf3>
 8010998:	a37b      	add	r3, pc, #492	; (adr r3, 8010b88 <__ieee754_pow+0xa00>)
 801099a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801099e:	2000      	movs	r0, #0
 80109a0:	4604      	mov	r4, r0
 80109a2:	460d      	mov	r5, r1
 80109a4:	f7ef fe28 	bl	80005f8 <__aeabi_dmul>
 80109a8:	ec53 2b19 	vmov	r2, r3, d9
 80109ac:	4606      	mov	r6, r0
 80109ae:	460f      	mov	r7, r1
 80109b0:	4620      	mov	r0, r4
 80109b2:	4629      	mov	r1, r5
 80109b4:	f7ef fc68 	bl	8000288 <__aeabi_dsub>
 80109b8:	4602      	mov	r2, r0
 80109ba:	460b      	mov	r3, r1
 80109bc:	4640      	mov	r0, r8
 80109be:	4649      	mov	r1, r9
 80109c0:	f7ef fc62 	bl	8000288 <__aeabi_dsub>
 80109c4:	a372      	add	r3, pc, #456	; (adr r3, 8010b90 <__ieee754_pow+0xa08>)
 80109c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109ca:	f7ef fe15 	bl	80005f8 <__aeabi_dmul>
 80109ce:	a372      	add	r3, pc, #456	; (adr r3, 8010b98 <__ieee754_pow+0xa10>)
 80109d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109d4:	4680      	mov	r8, r0
 80109d6:	4689      	mov	r9, r1
 80109d8:	4620      	mov	r0, r4
 80109da:	4629      	mov	r1, r5
 80109dc:	f7ef fe0c 	bl	80005f8 <__aeabi_dmul>
 80109e0:	4602      	mov	r2, r0
 80109e2:	460b      	mov	r3, r1
 80109e4:	4640      	mov	r0, r8
 80109e6:	4649      	mov	r1, r9
 80109e8:	f7ef fc50 	bl	800028c <__adddf3>
 80109ec:	4604      	mov	r4, r0
 80109ee:	460d      	mov	r5, r1
 80109f0:	4602      	mov	r2, r0
 80109f2:	460b      	mov	r3, r1
 80109f4:	4630      	mov	r0, r6
 80109f6:	4639      	mov	r1, r7
 80109f8:	f7ef fc48 	bl	800028c <__adddf3>
 80109fc:	4632      	mov	r2, r6
 80109fe:	463b      	mov	r3, r7
 8010a00:	4680      	mov	r8, r0
 8010a02:	4689      	mov	r9, r1
 8010a04:	f7ef fc40 	bl	8000288 <__aeabi_dsub>
 8010a08:	4602      	mov	r2, r0
 8010a0a:	460b      	mov	r3, r1
 8010a0c:	4620      	mov	r0, r4
 8010a0e:	4629      	mov	r1, r5
 8010a10:	f7ef fc3a 	bl	8000288 <__aeabi_dsub>
 8010a14:	4642      	mov	r2, r8
 8010a16:	4606      	mov	r6, r0
 8010a18:	460f      	mov	r7, r1
 8010a1a:	464b      	mov	r3, r9
 8010a1c:	4640      	mov	r0, r8
 8010a1e:	4649      	mov	r1, r9
 8010a20:	f7ef fdea 	bl	80005f8 <__aeabi_dmul>
 8010a24:	a35e      	add	r3, pc, #376	; (adr r3, 8010ba0 <__ieee754_pow+0xa18>)
 8010a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a2a:	4604      	mov	r4, r0
 8010a2c:	460d      	mov	r5, r1
 8010a2e:	f7ef fde3 	bl	80005f8 <__aeabi_dmul>
 8010a32:	a35d      	add	r3, pc, #372	; (adr r3, 8010ba8 <__ieee754_pow+0xa20>)
 8010a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a38:	f7ef fc26 	bl	8000288 <__aeabi_dsub>
 8010a3c:	4622      	mov	r2, r4
 8010a3e:	462b      	mov	r3, r5
 8010a40:	f7ef fdda 	bl	80005f8 <__aeabi_dmul>
 8010a44:	a35a      	add	r3, pc, #360	; (adr r3, 8010bb0 <__ieee754_pow+0xa28>)
 8010a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a4a:	f7ef fc1f 	bl	800028c <__adddf3>
 8010a4e:	4622      	mov	r2, r4
 8010a50:	462b      	mov	r3, r5
 8010a52:	f7ef fdd1 	bl	80005f8 <__aeabi_dmul>
 8010a56:	a358      	add	r3, pc, #352	; (adr r3, 8010bb8 <__ieee754_pow+0xa30>)
 8010a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a5c:	f7ef fc14 	bl	8000288 <__aeabi_dsub>
 8010a60:	4622      	mov	r2, r4
 8010a62:	462b      	mov	r3, r5
 8010a64:	f7ef fdc8 	bl	80005f8 <__aeabi_dmul>
 8010a68:	a355      	add	r3, pc, #340	; (adr r3, 8010bc0 <__ieee754_pow+0xa38>)
 8010a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a6e:	f7ef fc0d 	bl	800028c <__adddf3>
 8010a72:	4622      	mov	r2, r4
 8010a74:	462b      	mov	r3, r5
 8010a76:	f7ef fdbf 	bl	80005f8 <__aeabi_dmul>
 8010a7a:	4602      	mov	r2, r0
 8010a7c:	460b      	mov	r3, r1
 8010a7e:	4640      	mov	r0, r8
 8010a80:	4649      	mov	r1, r9
 8010a82:	f7ef fc01 	bl	8000288 <__aeabi_dsub>
 8010a86:	4604      	mov	r4, r0
 8010a88:	460d      	mov	r5, r1
 8010a8a:	4602      	mov	r2, r0
 8010a8c:	460b      	mov	r3, r1
 8010a8e:	4640      	mov	r0, r8
 8010a90:	4649      	mov	r1, r9
 8010a92:	f7ef fdb1 	bl	80005f8 <__aeabi_dmul>
 8010a96:	2200      	movs	r2, #0
 8010a98:	ec41 0b19 	vmov	d9, r0, r1
 8010a9c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8010aa0:	4620      	mov	r0, r4
 8010aa2:	4629      	mov	r1, r5
 8010aa4:	f7ef fbf0 	bl	8000288 <__aeabi_dsub>
 8010aa8:	4602      	mov	r2, r0
 8010aaa:	460b      	mov	r3, r1
 8010aac:	ec51 0b19 	vmov	r0, r1, d9
 8010ab0:	f7ef fecc 	bl	800084c <__aeabi_ddiv>
 8010ab4:	4632      	mov	r2, r6
 8010ab6:	4604      	mov	r4, r0
 8010ab8:	460d      	mov	r5, r1
 8010aba:	463b      	mov	r3, r7
 8010abc:	4640      	mov	r0, r8
 8010abe:	4649      	mov	r1, r9
 8010ac0:	f7ef fd9a 	bl	80005f8 <__aeabi_dmul>
 8010ac4:	4632      	mov	r2, r6
 8010ac6:	463b      	mov	r3, r7
 8010ac8:	f7ef fbe0 	bl	800028c <__adddf3>
 8010acc:	4602      	mov	r2, r0
 8010ace:	460b      	mov	r3, r1
 8010ad0:	4620      	mov	r0, r4
 8010ad2:	4629      	mov	r1, r5
 8010ad4:	f7ef fbd8 	bl	8000288 <__aeabi_dsub>
 8010ad8:	4642      	mov	r2, r8
 8010ada:	464b      	mov	r3, r9
 8010adc:	f7ef fbd4 	bl	8000288 <__aeabi_dsub>
 8010ae0:	460b      	mov	r3, r1
 8010ae2:	4602      	mov	r2, r0
 8010ae4:	493a      	ldr	r1, [pc, #232]	; (8010bd0 <__ieee754_pow+0xa48>)
 8010ae6:	2000      	movs	r0, #0
 8010ae8:	f7ef fbce 	bl	8000288 <__aeabi_dsub>
 8010aec:	ec41 0b10 	vmov	d0, r0, r1
 8010af0:	ee10 3a90 	vmov	r3, s1
 8010af4:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8010af8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010afc:	da2b      	bge.n	8010b56 <__ieee754_pow+0x9ce>
 8010afe:	4650      	mov	r0, sl
 8010b00:	f000 fb06 	bl	8011110 <scalbn>
 8010b04:	ec51 0b10 	vmov	r0, r1, d0
 8010b08:	ec53 2b18 	vmov	r2, r3, d8
 8010b0c:	f7ff bbed 	b.w	80102ea <__ieee754_pow+0x162>
 8010b10:	4b30      	ldr	r3, [pc, #192]	; (8010bd4 <__ieee754_pow+0xa4c>)
 8010b12:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8010b16:	429e      	cmp	r6, r3
 8010b18:	f77f af0c 	ble.w	8010934 <__ieee754_pow+0x7ac>
 8010b1c:	4b2e      	ldr	r3, [pc, #184]	; (8010bd8 <__ieee754_pow+0xa50>)
 8010b1e:	440b      	add	r3, r1
 8010b20:	4303      	orrs	r3, r0
 8010b22:	d009      	beq.n	8010b38 <__ieee754_pow+0x9b0>
 8010b24:	ec51 0b18 	vmov	r0, r1, d8
 8010b28:	2200      	movs	r2, #0
 8010b2a:	2300      	movs	r3, #0
 8010b2c:	f7ef ffd6 	bl	8000adc <__aeabi_dcmplt>
 8010b30:	3800      	subs	r0, #0
 8010b32:	bf18      	it	ne
 8010b34:	2001      	movne	r0, #1
 8010b36:	e447      	b.n	80103c8 <__ieee754_pow+0x240>
 8010b38:	4622      	mov	r2, r4
 8010b3a:	462b      	mov	r3, r5
 8010b3c:	f7ef fba4 	bl	8000288 <__aeabi_dsub>
 8010b40:	4642      	mov	r2, r8
 8010b42:	464b      	mov	r3, r9
 8010b44:	f7ef ffde 	bl	8000b04 <__aeabi_dcmpge>
 8010b48:	2800      	cmp	r0, #0
 8010b4a:	f43f aef3 	beq.w	8010934 <__ieee754_pow+0x7ac>
 8010b4e:	e7e9      	b.n	8010b24 <__ieee754_pow+0x99c>
 8010b50:	f04f 0a00 	mov.w	sl, #0
 8010b54:	e71a      	b.n	801098c <__ieee754_pow+0x804>
 8010b56:	ec51 0b10 	vmov	r0, r1, d0
 8010b5a:	4619      	mov	r1, r3
 8010b5c:	e7d4      	b.n	8010b08 <__ieee754_pow+0x980>
 8010b5e:	491c      	ldr	r1, [pc, #112]	; (8010bd0 <__ieee754_pow+0xa48>)
 8010b60:	2000      	movs	r0, #0
 8010b62:	f7ff bb30 	b.w	80101c6 <__ieee754_pow+0x3e>
 8010b66:	2000      	movs	r0, #0
 8010b68:	2100      	movs	r1, #0
 8010b6a:	f7ff bb2c 	b.w	80101c6 <__ieee754_pow+0x3e>
 8010b6e:	4630      	mov	r0, r6
 8010b70:	4639      	mov	r1, r7
 8010b72:	f7ff bb28 	b.w	80101c6 <__ieee754_pow+0x3e>
 8010b76:	9204      	str	r2, [sp, #16]
 8010b78:	f7ff bb7a 	b.w	8010270 <__ieee754_pow+0xe8>
 8010b7c:	2300      	movs	r3, #0
 8010b7e:	f7ff bb64 	b.w	801024a <__ieee754_pow+0xc2>
 8010b82:	bf00      	nop
 8010b84:	f3af 8000 	nop.w
 8010b88:	00000000 	.word	0x00000000
 8010b8c:	3fe62e43 	.word	0x3fe62e43
 8010b90:	fefa39ef 	.word	0xfefa39ef
 8010b94:	3fe62e42 	.word	0x3fe62e42
 8010b98:	0ca86c39 	.word	0x0ca86c39
 8010b9c:	be205c61 	.word	0xbe205c61
 8010ba0:	72bea4d0 	.word	0x72bea4d0
 8010ba4:	3e663769 	.word	0x3e663769
 8010ba8:	c5d26bf1 	.word	0xc5d26bf1
 8010bac:	3ebbbd41 	.word	0x3ebbbd41
 8010bb0:	af25de2c 	.word	0xaf25de2c
 8010bb4:	3f11566a 	.word	0x3f11566a
 8010bb8:	16bebd93 	.word	0x16bebd93
 8010bbc:	3f66c16c 	.word	0x3f66c16c
 8010bc0:	5555553e 	.word	0x5555553e
 8010bc4:	3fc55555 	.word	0x3fc55555
 8010bc8:	3fe00000 	.word	0x3fe00000
 8010bcc:	000fffff 	.word	0x000fffff
 8010bd0:	3ff00000 	.word	0x3ff00000
 8010bd4:	4090cbff 	.word	0x4090cbff
 8010bd8:	3f6f3400 	.word	0x3f6f3400
 8010bdc:	652b82fe 	.word	0x652b82fe
 8010be0:	3c971547 	.word	0x3c971547

08010be4 <__ieee754_sqrt>:
 8010be4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010be8:	ec55 4b10 	vmov	r4, r5, d0
 8010bec:	4e55      	ldr	r6, [pc, #340]	; (8010d44 <__ieee754_sqrt+0x160>)
 8010bee:	43ae      	bics	r6, r5
 8010bf0:	ee10 0a10 	vmov	r0, s0
 8010bf4:	ee10 3a10 	vmov	r3, s0
 8010bf8:	462a      	mov	r2, r5
 8010bfa:	4629      	mov	r1, r5
 8010bfc:	d110      	bne.n	8010c20 <__ieee754_sqrt+0x3c>
 8010bfe:	ee10 2a10 	vmov	r2, s0
 8010c02:	462b      	mov	r3, r5
 8010c04:	f7ef fcf8 	bl	80005f8 <__aeabi_dmul>
 8010c08:	4602      	mov	r2, r0
 8010c0a:	460b      	mov	r3, r1
 8010c0c:	4620      	mov	r0, r4
 8010c0e:	4629      	mov	r1, r5
 8010c10:	f7ef fb3c 	bl	800028c <__adddf3>
 8010c14:	4604      	mov	r4, r0
 8010c16:	460d      	mov	r5, r1
 8010c18:	ec45 4b10 	vmov	d0, r4, r5
 8010c1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010c20:	2d00      	cmp	r5, #0
 8010c22:	dc10      	bgt.n	8010c46 <__ieee754_sqrt+0x62>
 8010c24:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8010c28:	4330      	orrs	r0, r6
 8010c2a:	d0f5      	beq.n	8010c18 <__ieee754_sqrt+0x34>
 8010c2c:	b15d      	cbz	r5, 8010c46 <__ieee754_sqrt+0x62>
 8010c2e:	ee10 2a10 	vmov	r2, s0
 8010c32:	462b      	mov	r3, r5
 8010c34:	ee10 0a10 	vmov	r0, s0
 8010c38:	f7ef fb26 	bl	8000288 <__aeabi_dsub>
 8010c3c:	4602      	mov	r2, r0
 8010c3e:	460b      	mov	r3, r1
 8010c40:	f7ef fe04 	bl	800084c <__aeabi_ddiv>
 8010c44:	e7e6      	b.n	8010c14 <__ieee754_sqrt+0x30>
 8010c46:	1512      	asrs	r2, r2, #20
 8010c48:	d074      	beq.n	8010d34 <__ieee754_sqrt+0x150>
 8010c4a:	07d4      	lsls	r4, r2, #31
 8010c4c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8010c50:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8010c54:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8010c58:	bf5e      	ittt	pl
 8010c5a:	0fda      	lsrpl	r2, r3, #31
 8010c5c:	005b      	lslpl	r3, r3, #1
 8010c5e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8010c62:	2400      	movs	r4, #0
 8010c64:	0fda      	lsrs	r2, r3, #31
 8010c66:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8010c6a:	107f      	asrs	r7, r7, #1
 8010c6c:	005b      	lsls	r3, r3, #1
 8010c6e:	2516      	movs	r5, #22
 8010c70:	4620      	mov	r0, r4
 8010c72:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8010c76:	1886      	adds	r6, r0, r2
 8010c78:	428e      	cmp	r6, r1
 8010c7a:	bfde      	ittt	le
 8010c7c:	1b89      	suble	r1, r1, r6
 8010c7e:	18b0      	addle	r0, r6, r2
 8010c80:	18a4      	addle	r4, r4, r2
 8010c82:	0049      	lsls	r1, r1, #1
 8010c84:	3d01      	subs	r5, #1
 8010c86:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8010c8a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8010c8e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8010c92:	d1f0      	bne.n	8010c76 <__ieee754_sqrt+0x92>
 8010c94:	462a      	mov	r2, r5
 8010c96:	f04f 0e20 	mov.w	lr, #32
 8010c9a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8010c9e:	4281      	cmp	r1, r0
 8010ca0:	eb06 0c05 	add.w	ip, r6, r5
 8010ca4:	dc02      	bgt.n	8010cac <__ieee754_sqrt+0xc8>
 8010ca6:	d113      	bne.n	8010cd0 <__ieee754_sqrt+0xec>
 8010ca8:	459c      	cmp	ip, r3
 8010caa:	d811      	bhi.n	8010cd0 <__ieee754_sqrt+0xec>
 8010cac:	f1bc 0f00 	cmp.w	ip, #0
 8010cb0:	eb0c 0506 	add.w	r5, ip, r6
 8010cb4:	da43      	bge.n	8010d3e <__ieee754_sqrt+0x15a>
 8010cb6:	2d00      	cmp	r5, #0
 8010cb8:	db41      	blt.n	8010d3e <__ieee754_sqrt+0x15a>
 8010cba:	f100 0801 	add.w	r8, r0, #1
 8010cbe:	1a09      	subs	r1, r1, r0
 8010cc0:	459c      	cmp	ip, r3
 8010cc2:	bf88      	it	hi
 8010cc4:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8010cc8:	eba3 030c 	sub.w	r3, r3, ip
 8010ccc:	4432      	add	r2, r6
 8010cce:	4640      	mov	r0, r8
 8010cd0:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8010cd4:	f1be 0e01 	subs.w	lr, lr, #1
 8010cd8:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8010cdc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8010ce0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8010ce4:	d1db      	bne.n	8010c9e <__ieee754_sqrt+0xba>
 8010ce6:	430b      	orrs	r3, r1
 8010ce8:	d006      	beq.n	8010cf8 <__ieee754_sqrt+0x114>
 8010cea:	1c50      	adds	r0, r2, #1
 8010cec:	bf13      	iteet	ne
 8010cee:	3201      	addne	r2, #1
 8010cf0:	3401      	addeq	r4, #1
 8010cf2:	4672      	moveq	r2, lr
 8010cf4:	f022 0201 	bicne.w	r2, r2, #1
 8010cf8:	1063      	asrs	r3, r4, #1
 8010cfa:	0852      	lsrs	r2, r2, #1
 8010cfc:	07e1      	lsls	r1, r4, #31
 8010cfe:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8010d02:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8010d06:	bf48      	it	mi
 8010d08:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8010d0c:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8010d10:	4614      	mov	r4, r2
 8010d12:	e781      	b.n	8010c18 <__ieee754_sqrt+0x34>
 8010d14:	0ad9      	lsrs	r1, r3, #11
 8010d16:	3815      	subs	r0, #21
 8010d18:	055b      	lsls	r3, r3, #21
 8010d1a:	2900      	cmp	r1, #0
 8010d1c:	d0fa      	beq.n	8010d14 <__ieee754_sqrt+0x130>
 8010d1e:	02cd      	lsls	r5, r1, #11
 8010d20:	d50a      	bpl.n	8010d38 <__ieee754_sqrt+0x154>
 8010d22:	f1c2 0420 	rsb	r4, r2, #32
 8010d26:	fa23 f404 	lsr.w	r4, r3, r4
 8010d2a:	1e55      	subs	r5, r2, #1
 8010d2c:	4093      	lsls	r3, r2
 8010d2e:	4321      	orrs	r1, r4
 8010d30:	1b42      	subs	r2, r0, r5
 8010d32:	e78a      	b.n	8010c4a <__ieee754_sqrt+0x66>
 8010d34:	4610      	mov	r0, r2
 8010d36:	e7f0      	b.n	8010d1a <__ieee754_sqrt+0x136>
 8010d38:	0049      	lsls	r1, r1, #1
 8010d3a:	3201      	adds	r2, #1
 8010d3c:	e7ef      	b.n	8010d1e <__ieee754_sqrt+0x13a>
 8010d3e:	4680      	mov	r8, r0
 8010d40:	e7bd      	b.n	8010cbe <__ieee754_sqrt+0xda>
 8010d42:	bf00      	nop
 8010d44:	7ff00000 	.word	0x7ff00000

08010d48 <with_errno>:
 8010d48:	b570      	push	{r4, r5, r6, lr}
 8010d4a:	4604      	mov	r4, r0
 8010d4c:	460d      	mov	r5, r1
 8010d4e:	4616      	mov	r6, r2
 8010d50:	f000 fa6c 	bl	801122c <__errno>
 8010d54:	4629      	mov	r1, r5
 8010d56:	6006      	str	r6, [r0, #0]
 8010d58:	4620      	mov	r0, r4
 8010d5a:	bd70      	pop	{r4, r5, r6, pc}

08010d5c <xflow>:
 8010d5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010d5e:	4614      	mov	r4, r2
 8010d60:	461d      	mov	r5, r3
 8010d62:	b108      	cbz	r0, 8010d68 <xflow+0xc>
 8010d64:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8010d68:	e9cd 2300 	strd	r2, r3, [sp]
 8010d6c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010d70:	4620      	mov	r0, r4
 8010d72:	4629      	mov	r1, r5
 8010d74:	f7ef fc40 	bl	80005f8 <__aeabi_dmul>
 8010d78:	2222      	movs	r2, #34	; 0x22
 8010d7a:	b003      	add	sp, #12
 8010d7c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010d80:	f7ff bfe2 	b.w	8010d48 <with_errno>

08010d84 <__math_uflow>:
 8010d84:	b508      	push	{r3, lr}
 8010d86:	2200      	movs	r2, #0
 8010d88:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8010d8c:	f7ff ffe6 	bl	8010d5c <xflow>
 8010d90:	ec41 0b10 	vmov	d0, r0, r1
 8010d94:	bd08      	pop	{r3, pc}

08010d96 <__math_oflow>:
 8010d96:	b508      	push	{r3, lr}
 8010d98:	2200      	movs	r2, #0
 8010d9a:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8010d9e:	f7ff ffdd 	bl	8010d5c <xflow>
 8010da2:	ec41 0b10 	vmov	d0, r0, r1
 8010da6:	bd08      	pop	{r3, pc}

08010da8 <atan>:
 8010da8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010dac:	ec55 4b10 	vmov	r4, r5, d0
 8010db0:	4bc3      	ldr	r3, [pc, #780]	; (80110c0 <atan+0x318>)
 8010db2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8010db6:	429e      	cmp	r6, r3
 8010db8:	46ab      	mov	fp, r5
 8010dba:	dd18      	ble.n	8010dee <atan+0x46>
 8010dbc:	4bc1      	ldr	r3, [pc, #772]	; (80110c4 <atan+0x31c>)
 8010dbe:	429e      	cmp	r6, r3
 8010dc0:	dc01      	bgt.n	8010dc6 <atan+0x1e>
 8010dc2:	d109      	bne.n	8010dd8 <atan+0x30>
 8010dc4:	b144      	cbz	r4, 8010dd8 <atan+0x30>
 8010dc6:	4622      	mov	r2, r4
 8010dc8:	462b      	mov	r3, r5
 8010dca:	4620      	mov	r0, r4
 8010dcc:	4629      	mov	r1, r5
 8010dce:	f7ef fa5d 	bl	800028c <__adddf3>
 8010dd2:	4604      	mov	r4, r0
 8010dd4:	460d      	mov	r5, r1
 8010dd6:	e006      	b.n	8010de6 <atan+0x3e>
 8010dd8:	f1bb 0f00 	cmp.w	fp, #0
 8010ddc:	f300 8131 	bgt.w	8011042 <atan+0x29a>
 8010de0:	a59b      	add	r5, pc, #620	; (adr r5, 8011050 <atan+0x2a8>)
 8010de2:	e9d5 4500 	ldrd	r4, r5, [r5]
 8010de6:	ec45 4b10 	vmov	d0, r4, r5
 8010dea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010dee:	4bb6      	ldr	r3, [pc, #728]	; (80110c8 <atan+0x320>)
 8010df0:	429e      	cmp	r6, r3
 8010df2:	dc14      	bgt.n	8010e1e <atan+0x76>
 8010df4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8010df8:	429e      	cmp	r6, r3
 8010dfa:	dc0d      	bgt.n	8010e18 <atan+0x70>
 8010dfc:	a396      	add	r3, pc, #600	; (adr r3, 8011058 <atan+0x2b0>)
 8010dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e02:	ee10 0a10 	vmov	r0, s0
 8010e06:	4629      	mov	r1, r5
 8010e08:	f7ef fa40 	bl	800028c <__adddf3>
 8010e0c:	4baf      	ldr	r3, [pc, #700]	; (80110cc <atan+0x324>)
 8010e0e:	2200      	movs	r2, #0
 8010e10:	f7ef fe82 	bl	8000b18 <__aeabi_dcmpgt>
 8010e14:	2800      	cmp	r0, #0
 8010e16:	d1e6      	bne.n	8010de6 <atan+0x3e>
 8010e18:	f04f 3aff 	mov.w	sl, #4294967295
 8010e1c:	e02b      	b.n	8010e76 <atan+0xce>
 8010e1e:	f000 f963 	bl	80110e8 <fabs>
 8010e22:	4bab      	ldr	r3, [pc, #684]	; (80110d0 <atan+0x328>)
 8010e24:	429e      	cmp	r6, r3
 8010e26:	ec55 4b10 	vmov	r4, r5, d0
 8010e2a:	f300 80bf 	bgt.w	8010fac <atan+0x204>
 8010e2e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8010e32:	429e      	cmp	r6, r3
 8010e34:	f300 80a0 	bgt.w	8010f78 <atan+0x1d0>
 8010e38:	ee10 2a10 	vmov	r2, s0
 8010e3c:	ee10 0a10 	vmov	r0, s0
 8010e40:	462b      	mov	r3, r5
 8010e42:	4629      	mov	r1, r5
 8010e44:	f7ef fa22 	bl	800028c <__adddf3>
 8010e48:	4ba0      	ldr	r3, [pc, #640]	; (80110cc <atan+0x324>)
 8010e4a:	2200      	movs	r2, #0
 8010e4c:	f7ef fa1c 	bl	8000288 <__aeabi_dsub>
 8010e50:	2200      	movs	r2, #0
 8010e52:	4606      	mov	r6, r0
 8010e54:	460f      	mov	r7, r1
 8010e56:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8010e5a:	4620      	mov	r0, r4
 8010e5c:	4629      	mov	r1, r5
 8010e5e:	f7ef fa15 	bl	800028c <__adddf3>
 8010e62:	4602      	mov	r2, r0
 8010e64:	460b      	mov	r3, r1
 8010e66:	4630      	mov	r0, r6
 8010e68:	4639      	mov	r1, r7
 8010e6a:	f7ef fcef 	bl	800084c <__aeabi_ddiv>
 8010e6e:	f04f 0a00 	mov.w	sl, #0
 8010e72:	4604      	mov	r4, r0
 8010e74:	460d      	mov	r5, r1
 8010e76:	4622      	mov	r2, r4
 8010e78:	462b      	mov	r3, r5
 8010e7a:	4620      	mov	r0, r4
 8010e7c:	4629      	mov	r1, r5
 8010e7e:	f7ef fbbb 	bl	80005f8 <__aeabi_dmul>
 8010e82:	4602      	mov	r2, r0
 8010e84:	460b      	mov	r3, r1
 8010e86:	4680      	mov	r8, r0
 8010e88:	4689      	mov	r9, r1
 8010e8a:	f7ef fbb5 	bl	80005f8 <__aeabi_dmul>
 8010e8e:	a374      	add	r3, pc, #464	; (adr r3, 8011060 <atan+0x2b8>)
 8010e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e94:	4606      	mov	r6, r0
 8010e96:	460f      	mov	r7, r1
 8010e98:	f7ef fbae 	bl	80005f8 <__aeabi_dmul>
 8010e9c:	a372      	add	r3, pc, #456	; (adr r3, 8011068 <atan+0x2c0>)
 8010e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ea2:	f7ef f9f3 	bl	800028c <__adddf3>
 8010ea6:	4632      	mov	r2, r6
 8010ea8:	463b      	mov	r3, r7
 8010eaa:	f7ef fba5 	bl	80005f8 <__aeabi_dmul>
 8010eae:	a370      	add	r3, pc, #448	; (adr r3, 8011070 <atan+0x2c8>)
 8010eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010eb4:	f7ef f9ea 	bl	800028c <__adddf3>
 8010eb8:	4632      	mov	r2, r6
 8010eba:	463b      	mov	r3, r7
 8010ebc:	f7ef fb9c 	bl	80005f8 <__aeabi_dmul>
 8010ec0:	a36d      	add	r3, pc, #436	; (adr r3, 8011078 <atan+0x2d0>)
 8010ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ec6:	f7ef f9e1 	bl	800028c <__adddf3>
 8010eca:	4632      	mov	r2, r6
 8010ecc:	463b      	mov	r3, r7
 8010ece:	f7ef fb93 	bl	80005f8 <__aeabi_dmul>
 8010ed2:	a36b      	add	r3, pc, #428	; (adr r3, 8011080 <atan+0x2d8>)
 8010ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ed8:	f7ef f9d8 	bl	800028c <__adddf3>
 8010edc:	4632      	mov	r2, r6
 8010ede:	463b      	mov	r3, r7
 8010ee0:	f7ef fb8a 	bl	80005f8 <__aeabi_dmul>
 8010ee4:	a368      	add	r3, pc, #416	; (adr r3, 8011088 <atan+0x2e0>)
 8010ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010eea:	f7ef f9cf 	bl	800028c <__adddf3>
 8010eee:	4642      	mov	r2, r8
 8010ef0:	464b      	mov	r3, r9
 8010ef2:	f7ef fb81 	bl	80005f8 <__aeabi_dmul>
 8010ef6:	a366      	add	r3, pc, #408	; (adr r3, 8011090 <atan+0x2e8>)
 8010ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010efc:	4680      	mov	r8, r0
 8010efe:	4689      	mov	r9, r1
 8010f00:	4630      	mov	r0, r6
 8010f02:	4639      	mov	r1, r7
 8010f04:	f7ef fb78 	bl	80005f8 <__aeabi_dmul>
 8010f08:	a363      	add	r3, pc, #396	; (adr r3, 8011098 <atan+0x2f0>)
 8010f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f0e:	f7ef f9bb 	bl	8000288 <__aeabi_dsub>
 8010f12:	4632      	mov	r2, r6
 8010f14:	463b      	mov	r3, r7
 8010f16:	f7ef fb6f 	bl	80005f8 <__aeabi_dmul>
 8010f1a:	a361      	add	r3, pc, #388	; (adr r3, 80110a0 <atan+0x2f8>)
 8010f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f20:	f7ef f9b2 	bl	8000288 <__aeabi_dsub>
 8010f24:	4632      	mov	r2, r6
 8010f26:	463b      	mov	r3, r7
 8010f28:	f7ef fb66 	bl	80005f8 <__aeabi_dmul>
 8010f2c:	a35e      	add	r3, pc, #376	; (adr r3, 80110a8 <atan+0x300>)
 8010f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f32:	f7ef f9a9 	bl	8000288 <__aeabi_dsub>
 8010f36:	4632      	mov	r2, r6
 8010f38:	463b      	mov	r3, r7
 8010f3a:	f7ef fb5d 	bl	80005f8 <__aeabi_dmul>
 8010f3e:	a35c      	add	r3, pc, #368	; (adr r3, 80110b0 <atan+0x308>)
 8010f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f44:	f7ef f9a0 	bl	8000288 <__aeabi_dsub>
 8010f48:	4632      	mov	r2, r6
 8010f4a:	463b      	mov	r3, r7
 8010f4c:	f7ef fb54 	bl	80005f8 <__aeabi_dmul>
 8010f50:	4602      	mov	r2, r0
 8010f52:	460b      	mov	r3, r1
 8010f54:	4640      	mov	r0, r8
 8010f56:	4649      	mov	r1, r9
 8010f58:	f7ef f998 	bl	800028c <__adddf3>
 8010f5c:	4622      	mov	r2, r4
 8010f5e:	462b      	mov	r3, r5
 8010f60:	f7ef fb4a 	bl	80005f8 <__aeabi_dmul>
 8010f64:	f1ba 3fff 	cmp.w	sl, #4294967295
 8010f68:	4602      	mov	r2, r0
 8010f6a:	460b      	mov	r3, r1
 8010f6c:	d14b      	bne.n	8011006 <atan+0x25e>
 8010f6e:	4620      	mov	r0, r4
 8010f70:	4629      	mov	r1, r5
 8010f72:	f7ef f989 	bl	8000288 <__aeabi_dsub>
 8010f76:	e72c      	b.n	8010dd2 <atan+0x2a>
 8010f78:	ee10 0a10 	vmov	r0, s0
 8010f7c:	4b53      	ldr	r3, [pc, #332]	; (80110cc <atan+0x324>)
 8010f7e:	2200      	movs	r2, #0
 8010f80:	4629      	mov	r1, r5
 8010f82:	f7ef f981 	bl	8000288 <__aeabi_dsub>
 8010f86:	4b51      	ldr	r3, [pc, #324]	; (80110cc <atan+0x324>)
 8010f88:	4606      	mov	r6, r0
 8010f8a:	460f      	mov	r7, r1
 8010f8c:	2200      	movs	r2, #0
 8010f8e:	4620      	mov	r0, r4
 8010f90:	4629      	mov	r1, r5
 8010f92:	f7ef f97b 	bl	800028c <__adddf3>
 8010f96:	4602      	mov	r2, r0
 8010f98:	460b      	mov	r3, r1
 8010f9a:	4630      	mov	r0, r6
 8010f9c:	4639      	mov	r1, r7
 8010f9e:	f7ef fc55 	bl	800084c <__aeabi_ddiv>
 8010fa2:	f04f 0a01 	mov.w	sl, #1
 8010fa6:	4604      	mov	r4, r0
 8010fa8:	460d      	mov	r5, r1
 8010faa:	e764      	b.n	8010e76 <atan+0xce>
 8010fac:	4b49      	ldr	r3, [pc, #292]	; (80110d4 <atan+0x32c>)
 8010fae:	429e      	cmp	r6, r3
 8010fb0:	da1d      	bge.n	8010fee <atan+0x246>
 8010fb2:	ee10 0a10 	vmov	r0, s0
 8010fb6:	4b48      	ldr	r3, [pc, #288]	; (80110d8 <atan+0x330>)
 8010fb8:	2200      	movs	r2, #0
 8010fba:	4629      	mov	r1, r5
 8010fbc:	f7ef f964 	bl	8000288 <__aeabi_dsub>
 8010fc0:	4b45      	ldr	r3, [pc, #276]	; (80110d8 <atan+0x330>)
 8010fc2:	4606      	mov	r6, r0
 8010fc4:	460f      	mov	r7, r1
 8010fc6:	2200      	movs	r2, #0
 8010fc8:	4620      	mov	r0, r4
 8010fca:	4629      	mov	r1, r5
 8010fcc:	f7ef fb14 	bl	80005f8 <__aeabi_dmul>
 8010fd0:	4b3e      	ldr	r3, [pc, #248]	; (80110cc <atan+0x324>)
 8010fd2:	2200      	movs	r2, #0
 8010fd4:	f7ef f95a 	bl	800028c <__adddf3>
 8010fd8:	4602      	mov	r2, r0
 8010fda:	460b      	mov	r3, r1
 8010fdc:	4630      	mov	r0, r6
 8010fde:	4639      	mov	r1, r7
 8010fe0:	f7ef fc34 	bl	800084c <__aeabi_ddiv>
 8010fe4:	f04f 0a02 	mov.w	sl, #2
 8010fe8:	4604      	mov	r4, r0
 8010fea:	460d      	mov	r5, r1
 8010fec:	e743      	b.n	8010e76 <atan+0xce>
 8010fee:	462b      	mov	r3, r5
 8010ff0:	ee10 2a10 	vmov	r2, s0
 8010ff4:	4939      	ldr	r1, [pc, #228]	; (80110dc <atan+0x334>)
 8010ff6:	2000      	movs	r0, #0
 8010ff8:	f7ef fc28 	bl	800084c <__aeabi_ddiv>
 8010ffc:	f04f 0a03 	mov.w	sl, #3
 8011000:	4604      	mov	r4, r0
 8011002:	460d      	mov	r5, r1
 8011004:	e737      	b.n	8010e76 <atan+0xce>
 8011006:	4b36      	ldr	r3, [pc, #216]	; (80110e0 <atan+0x338>)
 8011008:	4e36      	ldr	r6, [pc, #216]	; (80110e4 <atan+0x33c>)
 801100a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 801100e:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8011012:	e9da 2300 	ldrd	r2, r3, [sl]
 8011016:	f7ef f937 	bl	8000288 <__aeabi_dsub>
 801101a:	4622      	mov	r2, r4
 801101c:	462b      	mov	r3, r5
 801101e:	f7ef f933 	bl	8000288 <__aeabi_dsub>
 8011022:	4602      	mov	r2, r0
 8011024:	460b      	mov	r3, r1
 8011026:	e9d6 0100 	ldrd	r0, r1, [r6]
 801102a:	f7ef f92d 	bl	8000288 <__aeabi_dsub>
 801102e:	f1bb 0f00 	cmp.w	fp, #0
 8011032:	4604      	mov	r4, r0
 8011034:	460d      	mov	r5, r1
 8011036:	f6bf aed6 	bge.w	8010de6 <atan+0x3e>
 801103a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801103e:	461d      	mov	r5, r3
 8011040:	e6d1      	b.n	8010de6 <atan+0x3e>
 8011042:	a51d      	add	r5, pc, #116	; (adr r5, 80110b8 <atan+0x310>)
 8011044:	e9d5 4500 	ldrd	r4, r5, [r5]
 8011048:	e6cd      	b.n	8010de6 <atan+0x3e>
 801104a:	bf00      	nop
 801104c:	f3af 8000 	nop.w
 8011050:	54442d18 	.word	0x54442d18
 8011054:	bff921fb 	.word	0xbff921fb
 8011058:	8800759c 	.word	0x8800759c
 801105c:	7e37e43c 	.word	0x7e37e43c
 8011060:	e322da11 	.word	0xe322da11
 8011064:	3f90ad3a 	.word	0x3f90ad3a
 8011068:	24760deb 	.word	0x24760deb
 801106c:	3fa97b4b 	.word	0x3fa97b4b
 8011070:	a0d03d51 	.word	0xa0d03d51
 8011074:	3fb10d66 	.word	0x3fb10d66
 8011078:	c54c206e 	.word	0xc54c206e
 801107c:	3fb745cd 	.word	0x3fb745cd
 8011080:	920083ff 	.word	0x920083ff
 8011084:	3fc24924 	.word	0x3fc24924
 8011088:	5555550d 	.word	0x5555550d
 801108c:	3fd55555 	.word	0x3fd55555
 8011090:	2c6a6c2f 	.word	0x2c6a6c2f
 8011094:	bfa2b444 	.word	0xbfa2b444
 8011098:	52defd9a 	.word	0x52defd9a
 801109c:	3fadde2d 	.word	0x3fadde2d
 80110a0:	af749a6d 	.word	0xaf749a6d
 80110a4:	3fb3b0f2 	.word	0x3fb3b0f2
 80110a8:	fe231671 	.word	0xfe231671
 80110ac:	3fbc71c6 	.word	0x3fbc71c6
 80110b0:	9998ebc4 	.word	0x9998ebc4
 80110b4:	3fc99999 	.word	0x3fc99999
 80110b8:	54442d18 	.word	0x54442d18
 80110bc:	3ff921fb 	.word	0x3ff921fb
 80110c0:	440fffff 	.word	0x440fffff
 80110c4:	7ff00000 	.word	0x7ff00000
 80110c8:	3fdbffff 	.word	0x3fdbffff
 80110cc:	3ff00000 	.word	0x3ff00000
 80110d0:	3ff2ffff 	.word	0x3ff2ffff
 80110d4:	40038000 	.word	0x40038000
 80110d8:	3ff80000 	.word	0x3ff80000
 80110dc:	bff00000 	.word	0xbff00000
 80110e0:	080151b0 	.word	0x080151b0
 80110e4:	08015190 	.word	0x08015190

080110e8 <fabs>:
 80110e8:	ec51 0b10 	vmov	r0, r1, d0
 80110ec:	ee10 2a10 	vmov	r2, s0
 80110f0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80110f4:	ec43 2b10 	vmov	d0, r2, r3
 80110f8:	4770      	bx	lr

080110fa <finite>:
 80110fa:	b082      	sub	sp, #8
 80110fc:	ed8d 0b00 	vstr	d0, [sp]
 8011100:	9801      	ldr	r0, [sp, #4]
 8011102:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8011106:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801110a:	0fc0      	lsrs	r0, r0, #31
 801110c:	b002      	add	sp, #8
 801110e:	4770      	bx	lr

08011110 <scalbn>:
 8011110:	b570      	push	{r4, r5, r6, lr}
 8011112:	ec55 4b10 	vmov	r4, r5, d0
 8011116:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801111a:	4606      	mov	r6, r0
 801111c:	462b      	mov	r3, r5
 801111e:	b99a      	cbnz	r2, 8011148 <scalbn+0x38>
 8011120:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8011124:	4323      	orrs	r3, r4
 8011126:	d036      	beq.n	8011196 <scalbn+0x86>
 8011128:	4b39      	ldr	r3, [pc, #228]	; (8011210 <scalbn+0x100>)
 801112a:	4629      	mov	r1, r5
 801112c:	ee10 0a10 	vmov	r0, s0
 8011130:	2200      	movs	r2, #0
 8011132:	f7ef fa61 	bl	80005f8 <__aeabi_dmul>
 8011136:	4b37      	ldr	r3, [pc, #220]	; (8011214 <scalbn+0x104>)
 8011138:	429e      	cmp	r6, r3
 801113a:	4604      	mov	r4, r0
 801113c:	460d      	mov	r5, r1
 801113e:	da10      	bge.n	8011162 <scalbn+0x52>
 8011140:	a32b      	add	r3, pc, #172	; (adr r3, 80111f0 <scalbn+0xe0>)
 8011142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011146:	e03a      	b.n	80111be <scalbn+0xae>
 8011148:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801114c:	428a      	cmp	r2, r1
 801114e:	d10c      	bne.n	801116a <scalbn+0x5a>
 8011150:	ee10 2a10 	vmov	r2, s0
 8011154:	4620      	mov	r0, r4
 8011156:	4629      	mov	r1, r5
 8011158:	f7ef f898 	bl	800028c <__adddf3>
 801115c:	4604      	mov	r4, r0
 801115e:	460d      	mov	r5, r1
 8011160:	e019      	b.n	8011196 <scalbn+0x86>
 8011162:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8011166:	460b      	mov	r3, r1
 8011168:	3a36      	subs	r2, #54	; 0x36
 801116a:	4432      	add	r2, r6
 801116c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8011170:	428a      	cmp	r2, r1
 8011172:	dd08      	ble.n	8011186 <scalbn+0x76>
 8011174:	2d00      	cmp	r5, #0
 8011176:	a120      	add	r1, pc, #128	; (adr r1, 80111f8 <scalbn+0xe8>)
 8011178:	e9d1 0100 	ldrd	r0, r1, [r1]
 801117c:	da1c      	bge.n	80111b8 <scalbn+0xa8>
 801117e:	a120      	add	r1, pc, #128	; (adr r1, 8011200 <scalbn+0xf0>)
 8011180:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011184:	e018      	b.n	80111b8 <scalbn+0xa8>
 8011186:	2a00      	cmp	r2, #0
 8011188:	dd08      	ble.n	801119c <scalbn+0x8c>
 801118a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801118e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8011192:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8011196:	ec45 4b10 	vmov	d0, r4, r5
 801119a:	bd70      	pop	{r4, r5, r6, pc}
 801119c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80111a0:	da19      	bge.n	80111d6 <scalbn+0xc6>
 80111a2:	f24c 3350 	movw	r3, #50000	; 0xc350
 80111a6:	429e      	cmp	r6, r3
 80111a8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80111ac:	dd0a      	ble.n	80111c4 <scalbn+0xb4>
 80111ae:	a112      	add	r1, pc, #72	; (adr r1, 80111f8 <scalbn+0xe8>)
 80111b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80111b4:	2b00      	cmp	r3, #0
 80111b6:	d1e2      	bne.n	801117e <scalbn+0x6e>
 80111b8:	a30f      	add	r3, pc, #60	; (adr r3, 80111f8 <scalbn+0xe8>)
 80111ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111be:	f7ef fa1b 	bl	80005f8 <__aeabi_dmul>
 80111c2:	e7cb      	b.n	801115c <scalbn+0x4c>
 80111c4:	a10a      	add	r1, pc, #40	; (adr r1, 80111f0 <scalbn+0xe0>)
 80111c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80111ca:	2b00      	cmp	r3, #0
 80111cc:	d0b8      	beq.n	8011140 <scalbn+0x30>
 80111ce:	a10e      	add	r1, pc, #56	; (adr r1, 8011208 <scalbn+0xf8>)
 80111d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80111d4:	e7b4      	b.n	8011140 <scalbn+0x30>
 80111d6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80111da:	3236      	adds	r2, #54	; 0x36
 80111dc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80111e0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80111e4:	4620      	mov	r0, r4
 80111e6:	4b0c      	ldr	r3, [pc, #48]	; (8011218 <scalbn+0x108>)
 80111e8:	2200      	movs	r2, #0
 80111ea:	e7e8      	b.n	80111be <scalbn+0xae>
 80111ec:	f3af 8000 	nop.w
 80111f0:	c2f8f359 	.word	0xc2f8f359
 80111f4:	01a56e1f 	.word	0x01a56e1f
 80111f8:	8800759c 	.word	0x8800759c
 80111fc:	7e37e43c 	.word	0x7e37e43c
 8011200:	8800759c 	.word	0x8800759c
 8011204:	fe37e43c 	.word	0xfe37e43c
 8011208:	c2f8f359 	.word	0xc2f8f359
 801120c:	81a56e1f 	.word	0x81a56e1f
 8011210:	43500000 	.word	0x43500000
 8011214:	ffff3cb0 	.word	0xffff3cb0
 8011218:	3c900000 	.word	0x3c900000

0801121c <abort>:
 801121c:	b508      	push	{r3, lr}
 801121e:	2006      	movs	r0, #6
 8011220:	f000 ffd2 	bl	80121c8 <raise>
 8011224:	2001      	movs	r0, #1
 8011226:	f7f5 fd7b 	bl	8006d20 <_exit>
	...

0801122c <__errno>:
 801122c:	4b01      	ldr	r3, [pc, #4]	; (8011234 <__errno+0x8>)
 801122e:	6818      	ldr	r0, [r3, #0]
 8011230:	4770      	bx	lr
 8011232:	bf00      	nop
 8011234:	20000078 	.word	0x20000078

08011238 <std>:
 8011238:	2300      	movs	r3, #0
 801123a:	b510      	push	{r4, lr}
 801123c:	4604      	mov	r4, r0
 801123e:	e9c0 3300 	strd	r3, r3, [r0]
 8011242:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011246:	6083      	str	r3, [r0, #8]
 8011248:	8181      	strh	r1, [r0, #12]
 801124a:	6643      	str	r3, [r0, #100]	; 0x64
 801124c:	81c2      	strh	r2, [r0, #14]
 801124e:	6183      	str	r3, [r0, #24]
 8011250:	4619      	mov	r1, r3
 8011252:	2208      	movs	r2, #8
 8011254:	305c      	adds	r0, #92	; 0x5c
 8011256:	f000 f91f 	bl	8011498 <memset>
 801125a:	4b05      	ldr	r3, [pc, #20]	; (8011270 <std+0x38>)
 801125c:	6263      	str	r3, [r4, #36]	; 0x24
 801125e:	4b05      	ldr	r3, [pc, #20]	; (8011274 <std+0x3c>)
 8011260:	62a3      	str	r3, [r4, #40]	; 0x28
 8011262:	4b05      	ldr	r3, [pc, #20]	; (8011278 <std+0x40>)
 8011264:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011266:	4b05      	ldr	r3, [pc, #20]	; (801127c <std+0x44>)
 8011268:	6224      	str	r4, [r4, #32]
 801126a:	6323      	str	r3, [r4, #48]	; 0x30
 801126c:	bd10      	pop	{r4, pc}
 801126e:	bf00      	nop
 8011270:	080122a9 	.word	0x080122a9
 8011274:	080122cb 	.word	0x080122cb
 8011278:	08012303 	.word	0x08012303
 801127c:	08012327 	.word	0x08012327

08011280 <_cleanup_r>:
 8011280:	4901      	ldr	r1, [pc, #4]	; (8011288 <_cleanup_r+0x8>)
 8011282:	f000 b8af 	b.w	80113e4 <_fwalk_reent>
 8011286:	bf00      	nop
 8011288:	08013411 	.word	0x08013411

0801128c <__sfmoreglue>:
 801128c:	b570      	push	{r4, r5, r6, lr}
 801128e:	2268      	movs	r2, #104	; 0x68
 8011290:	1e4d      	subs	r5, r1, #1
 8011292:	4355      	muls	r5, r2
 8011294:	460e      	mov	r6, r1
 8011296:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801129a:	f000 f971 	bl	8011580 <_malloc_r>
 801129e:	4604      	mov	r4, r0
 80112a0:	b140      	cbz	r0, 80112b4 <__sfmoreglue+0x28>
 80112a2:	2100      	movs	r1, #0
 80112a4:	e9c0 1600 	strd	r1, r6, [r0]
 80112a8:	300c      	adds	r0, #12
 80112aa:	60a0      	str	r0, [r4, #8]
 80112ac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80112b0:	f000 f8f2 	bl	8011498 <memset>
 80112b4:	4620      	mov	r0, r4
 80112b6:	bd70      	pop	{r4, r5, r6, pc}

080112b8 <__sfp_lock_acquire>:
 80112b8:	4801      	ldr	r0, [pc, #4]	; (80112c0 <__sfp_lock_acquire+0x8>)
 80112ba:	f7f5 bebb 	b.w	8007034 <__retarget_lock_acquire_recursive>
 80112be:	bf00      	nop
 80112c0:	20000c68 	.word	0x20000c68

080112c4 <__sfp_lock_release>:
 80112c4:	4801      	ldr	r0, [pc, #4]	; (80112cc <__sfp_lock_release+0x8>)
 80112c6:	f7f5 bec9 	b.w	800705c <__retarget_lock_release_recursive>
 80112ca:	bf00      	nop
 80112cc:	20000c68 	.word	0x20000c68

080112d0 <__sinit_lock_acquire>:
 80112d0:	4801      	ldr	r0, [pc, #4]	; (80112d8 <__sinit_lock_acquire+0x8>)
 80112d2:	f7f5 beaf 	b.w	8007034 <__retarget_lock_acquire_recursive>
 80112d6:	bf00      	nop
 80112d8:	20000c5c 	.word	0x20000c5c

080112dc <__sinit_lock_release>:
 80112dc:	4801      	ldr	r0, [pc, #4]	; (80112e4 <__sinit_lock_release+0x8>)
 80112de:	f7f5 bebd 	b.w	800705c <__retarget_lock_release_recursive>
 80112e2:	bf00      	nop
 80112e4:	20000c5c 	.word	0x20000c5c

080112e8 <__sinit>:
 80112e8:	b510      	push	{r4, lr}
 80112ea:	4604      	mov	r4, r0
 80112ec:	f7ff fff0 	bl	80112d0 <__sinit_lock_acquire>
 80112f0:	69a3      	ldr	r3, [r4, #24]
 80112f2:	b11b      	cbz	r3, 80112fc <__sinit+0x14>
 80112f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80112f8:	f7ff bff0 	b.w	80112dc <__sinit_lock_release>
 80112fc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8011300:	6523      	str	r3, [r4, #80]	; 0x50
 8011302:	4b13      	ldr	r3, [pc, #76]	; (8011350 <__sinit+0x68>)
 8011304:	4a13      	ldr	r2, [pc, #76]	; (8011354 <__sinit+0x6c>)
 8011306:	681b      	ldr	r3, [r3, #0]
 8011308:	62a2      	str	r2, [r4, #40]	; 0x28
 801130a:	42a3      	cmp	r3, r4
 801130c:	bf04      	itt	eq
 801130e:	2301      	moveq	r3, #1
 8011310:	61a3      	streq	r3, [r4, #24]
 8011312:	4620      	mov	r0, r4
 8011314:	f000 f820 	bl	8011358 <__sfp>
 8011318:	6060      	str	r0, [r4, #4]
 801131a:	4620      	mov	r0, r4
 801131c:	f000 f81c 	bl	8011358 <__sfp>
 8011320:	60a0      	str	r0, [r4, #8]
 8011322:	4620      	mov	r0, r4
 8011324:	f000 f818 	bl	8011358 <__sfp>
 8011328:	2200      	movs	r2, #0
 801132a:	60e0      	str	r0, [r4, #12]
 801132c:	2104      	movs	r1, #4
 801132e:	6860      	ldr	r0, [r4, #4]
 8011330:	f7ff ff82 	bl	8011238 <std>
 8011334:	68a0      	ldr	r0, [r4, #8]
 8011336:	2201      	movs	r2, #1
 8011338:	2109      	movs	r1, #9
 801133a:	f7ff ff7d 	bl	8011238 <std>
 801133e:	68e0      	ldr	r0, [r4, #12]
 8011340:	2202      	movs	r2, #2
 8011342:	2112      	movs	r1, #18
 8011344:	f7ff ff78 	bl	8011238 <std>
 8011348:	2301      	movs	r3, #1
 801134a:	61a3      	str	r3, [r4, #24]
 801134c:	e7d2      	b.n	80112f4 <__sinit+0xc>
 801134e:	bf00      	nop
 8011350:	08015230 	.word	0x08015230
 8011354:	08011281 	.word	0x08011281

08011358 <__sfp>:
 8011358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801135a:	4607      	mov	r7, r0
 801135c:	f7ff ffac 	bl	80112b8 <__sfp_lock_acquire>
 8011360:	4b1e      	ldr	r3, [pc, #120]	; (80113dc <__sfp+0x84>)
 8011362:	681e      	ldr	r6, [r3, #0]
 8011364:	69b3      	ldr	r3, [r6, #24]
 8011366:	b913      	cbnz	r3, 801136e <__sfp+0x16>
 8011368:	4630      	mov	r0, r6
 801136a:	f7ff ffbd 	bl	80112e8 <__sinit>
 801136e:	3648      	adds	r6, #72	; 0x48
 8011370:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011374:	3b01      	subs	r3, #1
 8011376:	d503      	bpl.n	8011380 <__sfp+0x28>
 8011378:	6833      	ldr	r3, [r6, #0]
 801137a:	b30b      	cbz	r3, 80113c0 <__sfp+0x68>
 801137c:	6836      	ldr	r6, [r6, #0]
 801137e:	e7f7      	b.n	8011370 <__sfp+0x18>
 8011380:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011384:	b9d5      	cbnz	r5, 80113bc <__sfp+0x64>
 8011386:	4b16      	ldr	r3, [pc, #88]	; (80113e0 <__sfp+0x88>)
 8011388:	60e3      	str	r3, [r4, #12]
 801138a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801138e:	6665      	str	r5, [r4, #100]	; 0x64
 8011390:	f7f5 fe2a 	bl	8006fe8 <__retarget_lock_init_recursive>
 8011394:	f7ff ff96 	bl	80112c4 <__sfp_lock_release>
 8011398:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801139c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80113a0:	6025      	str	r5, [r4, #0]
 80113a2:	61a5      	str	r5, [r4, #24]
 80113a4:	2208      	movs	r2, #8
 80113a6:	4629      	mov	r1, r5
 80113a8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80113ac:	f000 f874 	bl	8011498 <memset>
 80113b0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80113b4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80113b8:	4620      	mov	r0, r4
 80113ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80113bc:	3468      	adds	r4, #104	; 0x68
 80113be:	e7d9      	b.n	8011374 <__sfp+0x1c>
 80113c0:	2104      	movs	r1, #4
 80113c2:	4638      	mov	r0, r7
 80113c4:	f7ff ff62 	bl	801128c <__sfmoreglue>
 80113c8:	4604      	mov	r4, r0
 80113ca:	6030      	str	r0, [r6, #0]
 80113cc:	2800      	cmp	r0, #0
 80113ce:	d1d5      	bne.n	801137c <__sfp+0x24>
 80113d0:	f7ff ff78 	bl	80112c4 <__sfp_lock_release>
 80113d4:	230c      	movs	r3, #12
 80113d6:	603b      	str	r3, [r7, #0]
 80113d8:	e7ee      	b.n	80113b8 <__sfp+0x60>
 80113da:	bf00      	nop
 80113dc:	08015230 	.word	0x08015230
 80113e0:	ffff0001 	.word	0xffff0001

080113e4 <_fwalk_reent>:
 80113e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80113e8:	4606      	mov	r6, r0
 80113ea:	4688      	mov	r8, r1
 80113ec:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80113f0:	2700      	movs	r7, #0
 80113f2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80113f6:	f1b9 0901 	subs.w	r9, r9, #1
 80113fa:	d505      	bpl.n	8011408 <_fwalk_reent+0x24>
 80113fc:	6824      	ldr	r4, [r4, #0]
 80113fe:	2c00      	cmp	r4, #0
 8011400:	d1f7      	bne.n	80113f2 <_fwalk_reent+0xe>
 8011402:	4638      	mov	r0, r7
 8011404:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011408:	89ab      	ldrh	r3, [r5, #12]
 801140a:	2b01      	cmp	r3, #1
 801140c:	d907      	bls.n	801141e <_fwalk_reent+0x3a>
 801140e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011412:	3301      	adds	r3, #1
 8011414:	d003      	beq.n	801141e <_fwalk_reent+0x3a>
 8011416:	4629      	mov	r1, r5
 8011418:	4630      	mov	r0, r6
 801141a:	47c0      	blx	r8
 801141c:	4307      	orrs	r7, r0
 801141e:	3568      	adds	r5, #104	; 0x68
 8011420:	e7e9      	b.n	80113f6 <_fwalk_reent+0x12>
	...

08011424 <__libc_init_array>:
 8011424:	b570      	push	{r4, r5, r6, lr}
 8011426:	4d0d      	ldr	r5, [pc, #52]	; (801145c <__libc_init_array+0x38>)
 8011428:	4c0d      	ldr	r4, [pc, #52]	; (8011460 <__libc_init_array+0x3c>)
 801142a:	1b64      	subs	r4, r4, r5
 801142c:	10a4      	asrs	r4, r4, #2
 801142e:	2600      	movs	r6, #0
 8011430:	42a6      	cmp	r6, r4
 8011432:	d109      	bne.n	8011448 <__libc_init_array+0x24>
 8011434:	4d0b      	ldr	r5, [pc, #44]	; (8011464 <__libc_init_array+0x40>)
 8011436:	4c0c      	ldr	r4, [pc, #48]	; (8011468 <__libc_init_array+0x44>)
 8011438:	f003 f81a 	bl	8014470 <_init>
 801143c:	1b64      	subs	r4, r4, r5
 801143e:	10a4      	asrs	r4, r4, #2
 8011440:	2600      	movs	r6, #0
 8011442:	42a6      	cmp	r6, r4
 8011444:	d105      	bne.n	8011452 <__libc_init_array+0x2e>
 8011446:	bd70      	pop	{r4, r5, r6, pc}
 8011448:	f855 3b04 	ldr.w	r3, [r5], #4
 801144c:	4798      	blx	r3
 801144e:	3601      	adds	r6, #1
 8011450:	e7ee      	b.n	8011430 <__libc_init_array+0xc>
 8011452:	f855 3b04 	ldr.w	r3, [r5], #4
 8011456:	4798      	blx	r3
 8011458:	3601      	adds	r6, #1
 801145a:	e7f2      	b.n	8011442 <__libc_init_array+0x1e>
 801145c:	080155b4 	.word	0x080155b4
 8011460:	080155b4 	.word	0x080155b4
 8011464:	080155b4 	.word	0x080155b4
 8011468:	080155bc 	.word	0x080155bc

0801146c <malloc>:
 801146c:	4b02      	ldr	r3, [pc, #8]	; (8011478 <malloc+0xc>)
 801146e:	4601      	mov	r1, r0
 8011470:	6818      	ldr	r0, [r3, #0]
 8011472:	f000 b885 	b.w	8011580 <_malloc_r>
 8011476:	bf00      	nop
 8011478:	20000078 	.word	0x20000078

0801147c <memcpy>:
 801147c:	440a      	add	r2, r1
 801147e:	4291      	cmp	r1, r2
 8011480:	f100 33ff 	add.w	r3, r0, #4294967295
 8011484:	d100      	bne.n	8011488 <memcpy+0xc>
 8011486:	4770      	bx	lr
 8011488:	b510      	push	{r4, lr}
 801148a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801148e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011492:	4291      	cmp	r1, r2
 8011494:	d1f9      	bne.n	801148a <memcpy+0xe>
 8011496:	bd10      	pop	{r4, pc}

08011498 <memset>:
 8011498:	4402      	add	r2, r0
 801149a:	4603      	mov	r3, r0
 801149c:	4293      	cmp	r3, r2
 801149e:	d100      	bne.n	80114a2 <memset+0xa>
 80114a0:	4770      	bx	lr
 80114a2:	f803 1b01 	strb.w	r1, [r3], #1
 80114a6:	e7f9      	b.n	801149c <memset+0x4>

080114a8 <_free_r>:
 80114a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80114aa:	2900      	cmp	r1, #0
 80114ac:	d044      	beq.n	8011538 <_free_r+0x90>
 80114ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80114b2:	9001      	str	r0, [sp, #4]
 80114b4:	2b00      	cmp	r3, #0
 80114b6:	f1a1 0404 	sub.w	r4, r1, #4
 80114ba:	bfb8      	it	lt
 80114bc:	18e4      	addlt	r4, r4, r3
 80114be:	f002 f85f 	bl	8013580 <__malloc_lock>
 80114c2:	4a1e      	ldr	r2, [pc, #120]	; (801153c <_free_r+0x94>)
 80114c4:	9801      	ldr	r0, [sp, #4]
 80114c6:	6813      	ldr	r3, [r2, #0]
 80114c8:	b933      	cbnz	r3, 80114d8 <_free_r+0x30>
 80114ca:	6063      	str	r3, [r4, #4]
 80114cc:	6014      	str	r4, [r2, #0]
 80114ce:	b003      	add	sp, #12
 80114d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80114d4:	f002 b85a 	b.w	801358c <__malloc_unlock>
 80114d8:	42a3      	cmp	r3, r4
 80114da:	d908      	bls.n	80114ee <_free_r+0x46>
 80114dc:	6825      	ldr	r5, [r4, #0]
 80114de:	1961      	adds	r1, r4, r5
 80114e0:	428b      	cmp	r3, r1
 80114e2:	bf01      	itttt	eq
 80114e4:	6819      	ldreq	r1, [r3, #0]
 80114e6:	685b      	ldreq	r3, [r3, #4]
 80114e8:	1949      	addeq	r1, r1, r5
 80114ea:	6021      	streq	r1, [r4, #0]
 80114ec:	e7ed      	b.n	80114ca <_free_r+0x22>
 80114ee:	461a      	mov	r2, r3
 80114f0:	685b      	ldr	r3, [r3, #4]
 80114f2:	b10b      	cbz	r3, 80114f8 <_free_r+0x50>
 80114f4:	42a3      	cmp	r3, r4
 80114f6:	d9fa      	bls.n	80114ee <_free_r+0x46>
 80114f8:	6811      	ldr	r1, [r2, #0]
 80114fa:	1855      	adds	r5, r2, r1
 80114fc:	42a5      	cmp	r5, r4
 80114fe:	d10b      	bne.n	8011518 <_free_r+0x70>
 8011500:	6824      	ldr	r4, [r4, #0]
 8011502:	4421      	add	r1, r4
 8011504:	1854      	adds	r4, r2, r1
 8011506:	42a3      	cmp	r3, r4
 8011508:	6011      	str	r1, [r2, #0]
 801150a:	d1e0      	bne.n	80114ce <_free_r+0x26>
 801150c:	681c      	ldr	r4, [r3, #0]
 801150e:	685b      	ldr	r3, [r3, #4]
 8011510:	6053      	str	r3, [r2, #4]
 8011512:	4421      	add	r1, r4
 8011514:	6011      	str	r1, [r2, #0]
 8011516:	e7da      	b.n	80114ce <_free_r+0x26>
 8011518:	d902      	bls.n	8011520 <_free_r+0x78>
 801151a:	230c      	movs	r3, #12
 801151c:	6003      	str	r3, [r0, #0]
 801151e:	e7d6      	b.n	80114ce <_free_r+0x26>
 8011520:	6825      	ldr	r5, [r4, #0]
 8011522:	1961      	adds	r1, r4, r5
 8011524:	428b      	cmp	r3, r1
 8011526:	bf04      	itt	eq
 8011528:	6819      	ldreq	r1, [r3, #0]
 801152a:	685b      	ldreq	r3, [r3, #4]
 801152c:	6063      	str	r3, [r4, #4]
 801152e:	bf04      	itt	eq
 8011530:	1949      	addeq	r1, r1, r5
 8011532:	6021      	streq	r1, [r4, #0]
 8011534:	6054      	str	r4, [r2, #4]
 8011536:	e7ca      	b.n	80114ce <_free_r+0x26>
 8011538:	b003      	add	sp, #12
 801153a:	bd30      	pop	{r4, r5, pc}
 801153c:	20005c98 	.word	0x20005c98

08011540 <sbrk_aligned>:
 8011540:	b570      	push	{r4, r5, r6, lr}
 8011542:	4e0e      	ldr	r6, [pc, #56]	; (801157c <sbrk_aligned+0x3c>)
 8011544:	460c      	mov	r4, r1
 8011546:	6831      	ldr	r1, [r6, #0]
 8011548:	4605      	mov	r5, r0
 801154a:	b911      	cbnz	r1, 8011552 <sbrk_aligned+0x12>
 801154c:	f000 fe04 	bl	8012158 <_sbrk_r>
 8011550:	6030      	str	r0, [r6, #0]
 8011552:	4621      	mov	r1, r4
 8011554:	4628      	mov	r0, r5
 8011556:	f000 fdff 	bl	8012158 <_sbrk_r>
 801155a:	1c43      	adds	r3, r0, #1
 801155c:	d00a      	beq.n	8011574 <sbrk_aligned+0x34>
 801155e:	1cc4      	adds	r4, r0, #3
 8011560:	f024 0403 	bic.w	r4, r4, #3
 8011564:	42a0      	cmp	r0, r4
 8011566:	d007      	beq.n	8011578 <sbrk_aligned+0x38>
 8011568:	1a21      	subs	r1, r4, r0
 801156a:	4628      	mov	r0, r5
 801156c:	f000 fdf4 	bl	8012158 <_sbrk_r>
 8011570:	3001      	adds	r0, #1
 8011572:	d101      	bne.n	8011578 <sbrk_aligned+0x38>
 8011574:	f04f 34ff 	mov.w	r4, #4294967295
 8011578:	4620      	mov	r0, r4
 801157a:	bd70      	pop	{r4, r5, r6, pc}
 801157c:	20005c9c 	.word	0x20005c9c

08011580 <_malloc_r>:
 8011580:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011584:	1ccd      	adds	r5, r1, #3
 8011586:	f025 0503 	bic.w	r5, r5, #3
 801158a:	3508      	adds	r5, #8
 801158c:	2d0c      	cmp	r5, #12
 801158e:	bf38      	it	cc
 8011590:	250c      	movcc	r5, #12
 8011592:	2d00      	cmp	r5, #0
 8011594:	4607      	mov	r7, r0
 8011596:	db01      	blt.n	801159c <_malloc_r+0x1c>
 8011598:	42a9      	cmp	r1, r5
 801159a:	d905      	bls.n	80115a8 <_malloc_r+0x28>
 801159c:	230c      	movs	r3, #12
 801159e:	603b      	str	r3, [r7, #0]
 80115a0:	2600      	movs	r6, #0
 80115a2:	4630      	mov	r0, r6
 80115a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80115a8:	4e2e      	ldr	r6, [pc, #184]	; (8011664 <_malloc_r+0xe4>)
 80115aa:	f001 ffe9 	bl	8013580 <__malloc_lock>
 80115ae:	6833      	ldr	r3, [r6, #0]
 80115b0:	461c      	mov	r4, r3
 80115b2:	bb34      	cbnz	r4, 8011602 <_malloc_r+0x82>
 80115b4:	4629      	mov	r1, r5
 80115b6:	4638      	mov	r0, r7
 80115b8:	f7ff ffc2 	bl	8011540 <sbrk_aligned>
 80115bc:	1c43      	adds	r3, r0, #1
 80115be:	4604      	mov	r4, r0
 80115c0:	d14d      	bne.n	801165e <_malloc_r+0xde>
 80115c2:	6834      	ldr	r4, [r6, #0]
 80115c4:	4626      	mov	r6, r4
 80115c6:	2e00      	cmp	r6, #0
 80115c8:	d140      	bne.n	801164c <_malloc_r+0xcc>
 80115ca:	6823      	ldr	r3, [r4, #0]
 80115cc:	4631      	mov	r1, r6
 80115ce:	4638      	mov	r0, r7
 80115d0:	eb04 0803 	add.w	r8, r4, r3
 80115d4:	f000 fdc0 	bl	8012158 <_sbrk_r>
 80115d8:	4580      	cmp	r8, r0
 80115da:	d13a      	bne.n	8011652 <_malloc_r+0xd2>
 80115dc:	6821      	ldr	r1, [r4, #0]
 80115de:	3503      	adds	r5, #3
 80115e0:	1a6d      	subs	r5, r5, r1
 80115e2:	f025 0503 	bic.w	r5, r5, #3
 80115e6:	3508      	adds	r5, #8
 80115e8:	2d0c      	cmp	r5, #12
 80115ea:	bf38      	it	cc
 80115ec:	250c      	movcc	r5, #12
 80115ee:	4629      	mov	r1, r5
 80115f0:	4638      	mov	r0, r7
 80115f2:	f7ff ffa5 	bl	8011540 <sbrk_aligned>
 80115f6:	3001      	adds	r0, #1
 80115f8:	d02b      	beq.n	8011652 <_malloc_r+0xd2>
 80115fa:	6823      	ldr	r3, [r4, #0]
 80115fc:	442b      	add	r3, r5
 80115fe:	6023      	str	r3, [r4, #0]
 8011600:	e00e      	b.n	8011620 <_malloc_r+0xa0>
 8011602:	6822      	ldr	r2, [r4, #0]
 8011604:	1b52      	subs	r2, r2, r5
 8011606:	d41e      	bmi.n	8011646 <_malloc_r+0xc6>
 8011608:	2a0b      	cmp	r2, #11
 801160a:	d916      	bls.n	801163a <_malloc_r+0xba>
 801160c:	1961      	adds	r1, r4, r5
 801160e:	42a3      	cmp	r3, r4
 8011610:	6025      	str	r5, [r4, #0]
 8011612:	bf18      	it	ne
 8011614:	6059      	strne	r1, [r3, #4]
 8011616:	6863      	ldr	r3, [r4, #4]
 8011618:	bf08      	it	eq
 801161a:	6031      	streq	r1, [r6, #0]
 801161c:	5162      	str	r2, [r4, r5]
 801161e:	604b      	str	r3, [r1, #4]
 8011620:	4638      	mov	r0, r7
 8011622:	f104 060b 	add.w	r6, r4, #11
 8011626:	f001 ffb1 	bl	801358c <__malloc_unlock>
 801162a:	f026 0607 	bic.w	r6, r6, #7
 801162e:	1d23      	adds	r3, r4, #4
 8011630:	1af2      	subs	r2, r6, r3
 8011632:	d0b6      	beq.n	80115a2 <_malloc_r+0x22>
 8011634:	1b9b      	subs	r3, r3, r6
 8011636:	50a3      	str	r3, [r4, r2]
 8011638:	e7b3      	b.n	80115a2 <_malloc_r+0x22>
 801163a:	6862      	ldr	r2, [r4, #4]
 801163c:	42a3      	cmp	r3, r4
 801163e:	bf0c      	ite	eq
 8011640:	6032      	streq	r2, [r6, #0]
 8011642:	605a      	strne	r2, [r3, #4]
 8011644:	e7ec      	b.n	8011620 <_malloc_r+0xa0>
 8011646:	4623      	mov	r3, r4
 8011648:	6864      	ldr	r4, [r4, #4]
 801164a:	e7b2      	b.n	80115b2 <_malloc_r+0x32>
 801164c:	4634      	mov	r4, r6
 801164e:	6876      	ldr	r6, [r6, #4]
 8011650:	e7b9      	b.n	80115c6 <_malloc_r+0x46>
 8011652:	230c      	movs	r3, #12
 8011654:	603b      	str	r3, [r7, #0]
 8011656:	4638      	mov	r0, r7
 8011658:	f001 ff98 	bl	801358c <__malloc_unlock>
 801165c:	e7a1      	b.n	80115a2 <_malloc_r+0x22>
 801165e:	6025      	str	r5, [r4, #0]
 8011660:	e7de      	b.n	8011620 <_malloc_r+0xa0>
 8011662:	bf00      	nop
 8011664:	20005c98 	.word	0x20005c98

08011668 <__cvt>:
 8011668:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801166c:	ec55 4b10 	vmov	r4, r5, d0
 8011670:	2d00      	cmp	r5, #0
 8011672:	460e      	mov	r6, r1
 8011674:	4619      	mov	r1, r3
 8011676:	462b      	mov	r3, r5
 8011678:	bfbb      	ittet	lt
 801167a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801167e:	461d      	movlt	r5, r3
 8011680:	2300      	movge	r3, #0
 8011682:	232d      	movlt	r3, #45	; 0x2d
 8011684:	700b      	strb	r3, [r1, #0]
 8011686:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011688:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801168c:	4691      	mov	r9, r2
 801168e:	f023 0820 	bic.w	r8, r3, #32
 8011692:	bfbc      	itt	lt
 8011694:	4622      	movlt	r2, r4
 8011696:	4614      	movlt	r4, r2
 8011698:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801169c:	d005      	beq.n	80116aa <__cvt+0x42>
 801169e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80116a2:	d100      	bne.n	80116a6 <__cvt+0x3e>
 80116a4:	3601      	adds	r6, #1
 80116a6:	2102      	movs	r1, #2
 80116a8:	e000      	b.n	80116ac <__cvt+0x44>
 80116aa:	2103      	movs	r1, #3
 80116ac:	ab03      	add	r3, sp, #12
 80116ae:	9301      	str	r3, [sp, #4]
 80116b0:	ab02      	add	r3, sp, #8
 80116b2:	9300      	str	r3, [sp, #0]
 80116b4:	ec45 4b10 	vmov	d0, r4, r5
 80116b8:	4653      	mov	r3, sl
 80116ba:	4632      	mov	r2, r6
 80116bc:	f001 f834 	bl	8012728 <_dtoa_r>
 80116c0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80116c4:	4607      	mov	r7, r0
 80116c6:	d102      	bne.n	80116ce <__cvt+0x66>
 80116c8:	f019 0f01 	tst.w	r9, #1
 80116cc:	d022      	beq.n	8011714 <__cvt+0xac>
 80116ce:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80116d2:	eb07 0906 	add.w	r9, r7, r6
 80116d6:	d110      	bne.n	80116fa <__cvt+0x92>
 80116d8:	783b      	ldrb	r3, [r7, #0]
 80116da:	2b30      	cmp	r3, #48	; 0x30
 80116dc:	d10a      	bne.n	80116f4 <__cvt+0x8c>
 80116de:	2200      	movs	r2, #0
 80116e0:	2300      	movs	r3, #0
 80116e2:	4620      	mov	r0, r4
 80116e4:	4629      	mov	r1, r5
 80116e6:	f7ef f9ef 	bl	8000ac8 <__aeabi_dcmpeq>
 80116ea:	b918      	cbnz	r0, 80116f4 <__cvt+0x8c>
 80116ec:	f1c6 0601 	rsb	r6, r6, #1
 80116f0:	f8ca 6000 	str.w	r6, [sl]
 80116f4:	f8da 3000 	ldr.w	r3, [sl]
 80116f8:	4499      	add	r9, r3
 80116fa:	2200      	movs	r2, #0
 80116fc:	2300      	movs	r3, #0
 80116fe:	4620      	mov	r0, r4
 8011700:	4629      	mov	r1, r5
 8011702:	f7ef f9e1 	bl	8000ac8 <__aeabi_dcmpeq>
 8011706:	b108      	cbz	r0, 801170c <__cvt+0xa4>
 8011708:	f8cd 900c 	str.w	r9, [sp, #12]
 801170c:	2230      	movs	r2, #48	; 0x30
 801170e:	9b03      	ldr	r3, [sp, #12]
 8011710:	454b      	cmp	r3, r9
 8011712:	d307      	bcc.n	8011724 <__cvt+0xbc>
 8011714:	9b03      	ldr	r3, [sp, #12]
 8011716:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011718:	1bdb      	subs	r3, r3, r7
 801171a:	4638      	mov	r0, r7
 801171c:	6013      	str	r3, [r2, #0]
 801171e:	b004      	add	sp, #16
 8011720:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011724:	1c59      	adds	r1, r3, #1
 8011726:	9103      	str	r1, [sp, #12]
 8011728:	701a      	strb	r2, [r3, #0]
 801172a:	e7f0      	b.n	801170e <__cvt+0xa6>

0801172c <__exponent>:
 801172c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801172e:	4603      	mov	r3, r0
 8011730:	2900      	cmp	r1, #0
 8011732:	bfb8      	it	lt
 8011734:	4249      	neglt	r1, r1
 8011736:	f803 2b02 	strb.w	r2, [r3], #2
 801173a:	bfb4      	ite	lt
 801173c:	222d      	movlt	r2, #45	; 0x2d
 801173e:	222b      	movge	r2, #43	; 0x2b
 8011740:	2909      	cmp	r1, #9
 8011742:	7042      	strb	r2, [r0, #1]
 8011744:	dd2a      	ble.n	801179c <__exponent+0x70>
 8011746:	f10d 0407 	add.w	r4, sp, #7
 801174a:	46a4      	mov	ip, r4
 801174c:	270a      	movs	r7, #10
 801174e:	46a6      	mov	lr, r4
 8011750:	460a      	mov	r2, r1
 8011752:	fb91 f6f7 	sdiv	r6, r1, r7
 8011756:	fb07 1516 	mls	r5, r7, r6, r1
 801175a:	3530      	adds	r5, #48	; 0x30
 801175c:	2a63      	cmp	r2, #99	; 0x63
 801175e:	f104 34ff 	add.w	r4, r4, #4294967295
 8011762:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8011766:	4631      	mov	r1, r6
 8011768:	dcf1      	bgt.n	801174e <__exponent+0x22>
 801176a:	3130      	adds	r1, #48	; 0x30
 801176c:	f1ae 0502 	sub.w	r5, lr, #2
 8011770:	f804 1c01 	strb.w	r1, [r4, #-1]
 8011774:	1c44      	adds	r4, r0, #1
 8011776:	4629      	mov	r1, r5
 8011778:	4561      	cmp	r1, ip
 801177a:	d30a      	bcc.n	8011792 <__exponent+0x66>
 801177c:	f10d 0209 	add.w	r2, sp, #9
 8011780:	eba2 020e 	sub.w	r2, r2, lr
 8011784:	4565      	cmp	r5, ip
 8011786:	bf88      	it	hi
 8011788:	2200      	movhi	r2, #0
 801178a:	4413      	add	r3, r2
 801178c:	1a18      	subs	r0, r3, r0
 801178e:	b003      	add	sp, #12
 8011790:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011792:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011796:	f804 2f01 	strb.w	r2, [r4, #1]!
 801179a:	e7ed      	b.n	8011778 <__exponent+0x4c>
 801179c:	2330      	movs	r3, #48	; 0x30
 801179e:	3130      	adds	r1, #48	; 0x30
 80117a0:	7083      	strb	r3, [r0, #2]
 80117a2:	70c1      	strb	r1, [r0, #3]
 80117a4:	1d03      	adds	r3, r0, #4
 80117a6:	e7f1      	b.n	801178c <__exponent+0x60>

080117a8 <_printf_float>:
 80117a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80117ac:	ed2d 8b02 	vpush	{d8}
 80117b0:	b08d      	sub	sp, #52	; 0x34
 80117b2:	460c      	mov	r4, r1
 80117b4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80117b8:	4616      	mov	r6, r2
 80117ba:	461f      	mov	r7, r3
 80117bc:	4605      	mov	r5, r0
 80117be:	f001 fe63 	bl	8013488 <_localeconv_r>
 80117c2:	f8d0 a000 	ldr.w	sl, [r0]
 80117c6:	4650      	mov	r0, sl
 80117c8:	f7ee fd02 	bl	80001d0 <strlen>
 80117cc:	2300      	movs	r3, #0
 80117ce:	930a      	str	r3, [sp, #40]	; 0x28
 80117d0:	6823      	ldr	r3, [r4, #0]
 80117d2:	9305      	str	r3, [sp, #20]
 80117d4:	f8d8 3000 	ldr.w	r3, [r8]
 80117d8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80117dc:	3307      	adds	r3, #7
 80117de:	f023 0307 	bic.w	r3, r3, #7
 80117e2:	f103 0208 	add.w	r2, r3, #8
 80117e6:	f8c8 2000 	str.w	r2, [r8]
 80117ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117ee:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80117f2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80117f6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80117fa:	9307      	str	r3, [sp, #28]
 80117fc:	f8cd 8018 	str.w	r8, [sp, #24]
 8011800:	ee08 0a10 	vmov	s16, r0
 8011804:	4b9f      	ldr	r3, [pc, #636]	; (8011a84 <_printf_float+0x2dc>)
 8011806:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801180a:	f04f 32ff 	mov.w	r2, #4294967295
 801180e:	f7ef f98d 	bl	8000b2c <__aeabi_dcmpun>
 8011812:	bb88      	cbnz	r0, 8011878 <_printf_float+0xd0>
 8011814:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011818:	4b9a      	ldr	r3, [pc, #616]	; (8011a84 <_printf_float+0x2dc>)
 801181a:	f04f 32ff 	mov.w	r2, #4294967295
 801181e:	f7ef f967 	bl	8000af0 <__aeabi_dcmple>
 8011822:	bb48      	cbnz	r0, 8011878 <_printf_float+0xd0>
 8011824:	2200      	movs	r2, #0
 8011826:	2300      	movs	r3, #0
 8011828:	4640      	mov	r0, r8
 801182a:	4649      	mov	r1, r9
 801182c:	f7ef f956 	bl	8000adc <__aeabi_dcmplt>
 8011830:	b110      	cbz	r0, 8011838 <_printf_float+0x90>
 8011832:	232d      	movs	r3, #45	; 0x2d
 8011834:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011838:	4b93      	ldr	r3, [pc, #588]	; (8011a88 <_printf_float+0x2e0>)
 801183a:	4894      	ldr	r0, [pc, #592]	; (8011a8c <_printf_float+0x2e4>)
 801183c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8011840:	bf94      	ite	ls
 8011842:	4698      	movls	r8, r3
 8011844:	4680      	movhi	r8, r0
 8011846:	2303      	movs	r3, #3
 8011848:	6123      	str	r3, [r4, #16]
 801184a:	9b05      	ldr	r3, [sp, #20]
 801184c:	f023 0204 	bic.w	r2, r3, #4
 8011850:	6022      	str	r2, [r4, #0]
 8011852:	f04f 0900 	mov.w	r9, #0
 8011856:	9700      	str	r7, [sp, #0]
 8011858:	4633      	mov	r3, r6
 801185a:	aa0b      	add	r2, sp, #44	; 0x2c
 801185c:	4621      	mov	r1, r4
 801185e:	4628      	mov	r0, r5
 8011860:	f000 f9d8 	bl	8011c14 <_printf_common>
 8011864:	3001      	adds	r0, #1
 8011866:	f040 8090 	bne.w	801198a <_printf_float+0x1e2>
 801186a:	f04f 30ff 	mov.w	r0, #4294967295
 801186e:	b00d      	add	sp, #52	; 0x34
 8011870:	ecbd 8b02 	vpop	{d8}
 8011874:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011878:	4642      	mov	r2, r8
 801187a:	464b      	mov	r3, r9
 801187c:	4640      	mov	r0, r8
 801187e:	4649      	mov	r1, r9
 8011880:	f7ef f954 	bl	8000b2c <__aeabi_dcmpun>
 8011884:	b140      	cbz	r0, 8011898 <_printf_float+0xf0>
 8011886:	464b      	mov	r3, r9
 8011888:	2b00      	cmp	r3, #0
 801188a:	bfbc      	itt	lt
 801188c:	232d      	movlt	r3, #45	; 0x2d
 801188e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8011892:	487f      	ldr	r0, [pc, #508]	; (8011a90 <_printf_float+0x2e8>)
 8011894:	4b7f      	ldr	r3, [pc, #508]	; (8011a94 <_printf_float+0x2ec>)
 8011896:	e7d1      	b.n	801183c <_printf_float+0x94>
 8011898:	6863      	ldr	r3, [r4, #4]
 801189a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801189e:	9206      	str	r2, [sp, #24]
 80118a0:	1c5a      	adds	r2, r3, #1
 80118a2:	d13f      	bne.n	8011924 <_printf_float+0x17c>
 80118a4:	2306      	movs	r3, #6
 80118a6:	6063      	str	r3, [r4, #4]
 80118a8:	9b05      	ldr	r3, [sp, #20]
 80118aa:	6861      	ldr	r1, [r4, #4]
 80118ac:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80118b0:	2300      	movs	r3, #0
 80118b2:	9303      	str	r3, [sp, #12]
 80118b4:	ab0a      	add	r3, sp, #40	; 0x28
 80118b6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80118ba:	ab09      	add	r3, sp, #36	; 0x24
 80118bc:	ec49 8b10 	vmov	d0, r8, r9
 80118c0:	9300      	str	r3, [sp, #0]
 80118c2:	6022      	str	r2, [r4, #0]
 80118c4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80118c8:	4628      	mov	r0, r5
 80118ca:	f7ff fecd 	bl	8011668 <__cvt>
 80118ce:	9b06      	ldr	r3, [sp, #24]
 80118d0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80118d2:	2b47      	cmp	r3, #71	; 0x47
 80118d4:	4680      	mov	r8, r0
 80118d6:	d108      	bne.n	80118ea <_printf_float+0x142>
 80118d8:	1cc8      	adds	r0, r1, #3
 80118da:	db02      	blt.n	80118e2 <_printf_float+0x13a>
 80118dc:	6863      	ldr	r3, [r4, #4]
 80118de:	4299      	cmp	r1, r3
 80118e0:	dd41      	ble.n	8011966 <_printf_float+0x1be>
 80118e2:	f1ab 0b02 	sub.w	fp, fp, #2
 80118e6:	fa5f fb8b 	uxtb.w	fp, fp
 80118ea:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80118ee:	d820      	bhi.n	8011932 <_printf_float+0x18a>
 80118f0:	3901      	subs	r1, #1
 80118f2:	465a      	mov	r2, fp
 80118f4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80118f8:	9109      	str	r1, [sp, #36]	; 0x24
 80118fa:	f7ff ff17 	bl	801172c <__exponent>
 80118fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011900:	1813      	adds	r3, r2, r0
 8011902:	2a01      	cmp	r2, #1
 8011904:	4681      	mov	r9, r0
 8011906:	6123      	str	r3, [r4, #16]
 8011908:	dc02      	bgt.n	8011910 <_printf_float+0x168>
 801190a:	6822      	ldr	r2, [r4, #0]
 801190c:	07d2      	lsls	r2, r2, #31
 801190e:	d501      	bpl.n	8011914 <_printf_float+0x16c>
 8011910:	3301      	adds	r3, #1
 8011912:	6123      	str	r3, [r4, #16]
 8011914:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8011918:	2b00      	cmp	r3, #0
 801191a:	d09c      	beq.n	8011856 <_printf_float+0xae>
 801191c:	232d      	movs	r3, #45	; 0x2d
 801191e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011922:	e798      	b.n	8011856 <_printf_float+0xae>
 8011924:	9a06      	ldr	r2, [sp, #24]
 8011926:	2a47      	cmp	r2, #71	; 0x47
 8011928:	d1be      	bne.n	80118a8 <_printf_float+0x100>
 801192a:	2b00      	cmp	r3, #0
 801192c:	d1bc      	bne.n	80118a8 <_printf_float+0x100>
 801192e:	2301      	movs	r3, #1
 8011930:	e7b9      	b.n	80118a6 <_printf_float+0xfe>
 8011932:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8011936:	d118      	bne.n	801196a <_printf_float+0x1c2>
 8011938:	2900      	cmp	r1, #0
 801193a:	6863      	ldr	r3, [r4, #4]
 801193c:	dd0b      	ble.n	8011956 <_printf_float+0x1ae>
 801193e:	6121      	str	r1, [r4, #16]
 8011940:	b913      	cbnz	r3, 8011948 <_printf_float+0x1a0>
 8011942:	6822      	ldr	r2, [r4, #0]
 8011944:	07d0      	lsls	r0, r2, #31
 8011946:	d502      	bpl.n	801194e <_printf_float+0x1a6>
 8011948:	3301      	adds	r3, #1
 801194a:	440b      	add	r3, r1
 801194c:	6123      	str	r3, [r4, #16]
 801194e:	65a1      	str	r1, [r4, #88]	; 0x58
 8011950:	f04f 0900 	mov.w	r9, #0
 8011954:	e7de      	b.n	8011914 <_printf_float+0x16c>
 8011956:	b913      	cbnz	r3, 801195e <_printf_float+0x1b6>
 8011958:	6822      	ldr	r2, [r4, #0]
 801195a:	07d2      	lsls	r2, r2, #31
 801195c:	d501      	bpl.n	8011962 <_printf_float+0x1ba>
 801195e:	3302      	adds	r3, #2
 8011960:	e7f4      	b.n	801194c <_printf_float+0x1a4>
 8011962:	2301      	movs	r3, #1
 8011964:	e7f2      	b.n	801194c <_printf_float+0x1a4>
 8011966:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801196a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801196c:	4299      	cmp	r1, r3
 801196e:	db05      	blt.n	801197c <_printf_float+0x1d4>
 8011970:	6823      	ldr	r3, [r4, #0]
 8011972:	6121      	str	r1, [r4, #16]
 8011974:	07d8      	lsls	r0, r3, #31
 8011976:	d5ea      	bpl.n	801194e <_printf_float+0x1a6>
 8011978:	1c4b      	adds	r3, r1, #1
 801197a:	e7e7      	b.n	801194c <_printf_float+0x1a4>
 801197c:	2900      	cmp	r1, #0
 801197e:	bfd4      	ite	le
 8011980:	f1c1 0202 	rsble	r2, r1, #2
 8011984:	2201      	movgt	r2, #1
 8011986:	4413      	add	r3, r2
 8011988:	e7e0      	b.n	801194c <_printf_float+0x1a4>
 801198a:	6823      	ldr	r3, [r4, #0]
 801198c:	055a      	lsls	r2, r3, #21
 801198e:	d407      	bmi.n	80119a0 <_printf_float+0x1f8>
 8011990:	6923      	ldr	r3, [r4, #16]
 8011992:	4642      	mov	r2, r8
 8011994:	4631      	mov	r1, r6
 8011996:	4628      	mov	r0, r5
 8011998:	47b8      	blx	r7
 801199a:	3001      	adds	r0, #1
 801199c:	d12c      	bne.n	80119f8 <_printf_float+0x250>
 801199e:	e764      	b.n	801186a <_printf_float+0xc2>
 80119a0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80119a4:	f240 80e0 	bls.w	8011b68 <_printf_float+0x3c0>
 80119a8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80119ac:	2200      	movs	r2, #0
 80119ae:	2300      	movs	r3, #0
 80119b0:	f7ef f88a 	bl	8000ac8 <__aeabi_dcmpeq>
 80119b4:	2800      	cmp	r0, #0
 80119b6:	d034      	beq.n	8011a22 <_printf_float+0x27a>
 80119b8:	4a37      	ldr	r2, [pc, #220]	; (8011a98 <_printf_float+0x2f0>)
 80119ba:	2301      	movs	r3, #1
 80119bc:	4631      	mov	r1, r6
 80119be:	4628      	mov	r0, r5
 80119c0:	47b8      	blx	r7
 80119c2:	3001      	adds	r0, #1
 80119c4:	f43f af51 	beq.w	801186a <_printf_float+0xc2>
 80119c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80119cc:	429a      	cmp	r2, r3
 80119ce:	db02      	blt.n	80119d6 <_printf_float+0x22e>
 80119d0:	6823      	ldr	r3, [r4, #0]
 80119d2:	07d8      	lsls	r0, r3, #31
 80119d4:	d510      	bpl.n	80119f8 <_printf_float+0x250>
 80119d6:	ee18 3a10 	vmov	r3, s16
 80119da:	4652      	mov	r2, sl
 80119dc:	4631      	mov	r1, r6
 80119de:	4628      	mov	r0, r5
 80119e0:	47b8      	blx	r7
 80119e2:	3001      	adds	r0, #1
 80119e4:	f43f af41 	beq.w	801186a <_printf_float+0xc2>
 80119e8:	f04f 0800 	mov.w	r8, #0
 80119ec:	f104 091a 	add.w	r9, r4, #26
 80119f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80119f2:	3b01      	subs	r3, #1
 80119f4:	4543      	cmp	r3, r8
 80119f6:	dc09      	bgt.n	8011a0c <_printf_float+0x264>
 80119f8:	6823      	ldr	r3, [r4, #0]
 80119fa:	079b      	lsls	r3, r3, #30
 80119fc:	f100 8105 	bmi.w	8011c0a <_printf_float+0x462>
 8011a00:	68e0      	ldr	r0, [r4, #12]
 8011a02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011a04:	4298      	cmp	r0, r3
 8011a06:	bfb8      	it	lt
 8011a08:	4618      	movlt	r0, r3
 8011a0a:	e730      	b.n	801186e <_printf_float+0xc6>
 8011a0c:	2301      	movs	r3, #1
 8011a0e:	464a      	mov	r2, r9
 8011a10:	4631      	mov	r1, r6
 8011a12:	4628      	mov	r0, r5
 8011a14:	47b8      	blx	r7
 8011a16:	3001      	adds	r0, #1
 8011a18:	f43f af27 	beq.w	801186a <_printf_float+0xc2>
 8011a1c:	f108 0801 	add.w	r8, r8, #1
 8011a20:	e7e6      	b.n	80119f0 <_printf_float+0x248>
 8011a22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011a24:	2b00      	cmp	r3, #0
 8011a26:	dc39      	bgt.n	8011a9c <_printf_float+0x2f4>
 8011a28:	4a1b      	ldr	r2, [pc, #108]	; (8011a98 <_printf_float+0x2f0>)
 8011a2a:	2301      	movs	r3, #1
 8011a2c:	4631      	mov	r1, r6
 8011a2e:	4628      	mov	r0, r5
 8011a30:	47b8      	blx	r7
 8011a32:	3001      	adds	r0, #1
 8011a34:	f43f af19 	beq.w	801186a <_printf_float+0xc2>
 8011a38:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011a3c:	4313      	orrs	r3, r2
 8011a3e:	d102      	bne.n	8011a46 <_printf_float+0x29e>
 8011a40:	6823      	ldr	r3, [r4, #0]
 8011a42:	07d9      	lsls	r1, r3, #31
 8011a44:	d5d8      	bpl.n	80119f8 <_printf_float+0x250>
 8011a46:	ee18 3a10 	vmov	r3, s16
 8011a4a:	4652      	mov	r2, sl
 8011a4c:	4631      	mov	r1, r6
 8011a4e:	4628      	mov	r0, r5
 8011a50:	47b8      	blx	r7
 8011a52:	3001      	adds	r0, #1
 8011a54:	f43f af09 	beq.w	801186a <_printf_float+0xc2>
 8011a58:	f04f 0900 	mov.w	r9, #0
 8011a5c:	f104 0a1a 	add.w	sl, r4, #26
 8011a60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011a62:	425b      	negs	r3, r3
 8011a64:	454b      	cmp	r3, r9
 8011a66:	dc01      	bgt.n	8011a6c <_printf_float+0x2c4>
 8011a68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011a6a:	e792      	b.n	8011992 <_printf_float+0x1ea>
 8011a6c:	2301      	movs	r3, #1
 8011a6e:	4652      	mov	r2, sl
 8011a70:	4631      	mov	r1, r6
 8011a72:	4628      	mov	r0, r5
 8011a74:	47b8      	blx	r7
 8011a76:	3001      	adds	r0, #1
 8011a78:	f43f aef7 	beq.w	801186a <_printf_float+0xc2>
 8011a7c:	f109 0901 	add.w	r9, r9, #1
 8011a80:	e7ee      	b.n	8011a60 <_printf_float+0x2b8>
 8011a82:	bf00      	nop
 8011a84:	7fefffff 	.word	0x7fefffff
 8011a88:	08015234 	.word	0x08015234
 8011a8c:	08015238 	.word	0x08015238
 8011a90:	08015240 	.word	0x08015240
 8011a94:	0801523c 	.word	0x0801523c
 8011a98:	08015244 	.word	0x08015244
 8011a9c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011a9e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011aa0:	429a      	cmp	r2, r3
 8011aa2:	bfa8      	it	ge
 8011aa4:	461a      	movge	r2, r3
 8011aa6:	2a00      	cmp	r2, #0
 8011aa8:	4691      	mov	r9, r2
 8011aaa:	dc37      	bgt.n	8011b1c <_printf_float+0x374>
 8011aac:	f04f 0b00 	mov.w	fp, #0
 8011ab0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011ab4:	f104 021a 	add.w	r2, r4, #26
 8011ab8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011aba:	9305      	str	r3, [sp, #20]
 8011abc:	eba3 0309 	sub.w	r3, r3, r9
 8011ac0:	455b      	cmp	r3, fp
 8011ac2:	dc33      	bgt.n	8011b2c <_printf_float+0x384>
 8011ac4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011ac8:	429a      	cmp	r2, r3
 8011aca:	db3b      	blt.n	8011b44 <_printf_float+0x39c>
 8011acc:	6823      	ldr	r3, [r4, #0]
 8011ace:	07da      	lsls	r2, r3, #31
 8011ad0:	d438      	bmi.n	8011b44 <_printf_float+0x39c>
 8011ad2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011ad4:	9a05      	ldr	r2, [sp, #20]
 8011ad6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011ad8:	1a9a      	subs	r2, r3, r2
 8011ada:	eba3 0901 	sub.w	r9, r3, r1
 8011ade:	4591      	cmp	r9, r2
 8011ae0:	bfa8      	it	ge
 8011ae2:	4691      	movge	r9, r2
 8011ae4:	f1b9 0f00 	cmp.w	r9, #0
 8011ae8:	dc35      	bgt.n	8011b56 <_printf_float+0x3ae>
 8011aea:	f04f 0800 	mov.w	r8, #0
 8011aee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011af2:	f104 0a1a 	add.w	sl, r4, #26
 8011af6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011afa:	1a9b      	subs	r3, r3, r2
 8011afc:	eba3 0309 	sub.w	r3, r3, r9
 8011b00:	4543      	cmp	r3, r8
 8011b02:	f77f af79 	ble.w	80119f8 <_printf_float+0x250>
 8011b06:	2301      	movs	r3, #1
 8011b08:	4652      	mov	r2, sl
 8011b0a:	4631      	mov	r1, r6
 8011b0c:	4628      	mov	r0, r5
 8011b0e:	47b8      	blx	r7
 8011b10:	3001      	adds	r0, #1
 8011b12:	f43f aeaa 	beq.w	801186a <_printf_float+0xc2>
 8011b16:	f108 0801 	add.w	r8, r8, #1
 8011b1a:	e7ec      	b.n	8011af6 <_printf_float+0x34e>
 8011b1c:	4613      	mov	r3, r2
 8011b1e:	4631      	mov	r1, r6
 8011b20:	4642      	mov	r2, r8
 8011b22:	4628      	mov	r0, r5
 8011b24:	47b8      	blx	r7
 8011b26:	3001      	adds	r0, #1
 8011b28:	d1c0      	bne.n	8011aac <_printf_float+0x304>
 8011b2a:	e69e      	b.n	801186a <_printf_float+0xc2>
 8011b2c:	2301      	movs	r3, #1
 8011b2e:	4631      	mov	r1, r6
 8011b30:	4628      	mov	r0, r5
 8011b32:	9205      	str	r2, [sp, #20]
 8011b34:	47b8      	blx	r7
 8011b36:	3001      	adds	r0, #1
 8011b38:	f43f ae97 	beq.w	801186a <_printf_float+0xc2>
 8011b3c:	9a05      	ldr	r2, [sp, #20]
 8011b3e:	f10b 0b01 	add.w	fp, fp, #1
 8011b42:	e7b9      	b.n	8011ab8 <_printf_float+0x310>
 8011b44:	ee18 3a10 	vmov	r3, s16
 8011b48:	4652      	mov	r2, sl
 8011b4a:	4631      	mov	r1, r6
 8011b4c:	4628      	mov	r0, r5
 8011b4e:	47b8      	blx	r7
 8011b50:	3001      	adds	r0, #1
 8011b52:	d1be      	bne.n	8011ad2 <_printf_float+0x32a>
 8011b54:	e689      	b.n	801186a <_printf_float+0xc2>
 8011b56:	9a05      	ldr	r2, [sp, #20]
 8011b58:	464b      	mov	r3, r9
 8011b5a:	4442      	add	r2, r8
 8011b5c:	4631      	mov	r1, r6
 8011b5e:	4628      	mov	r0, r5
 8011b60:	47b8      	blx	r7
 8011b62:	3001      	adds	r0, #1
 8011b64:	d1c1      	bne.n	8011aea <_printf_float+0x342>
 8011b66:	e680      	b.n	801186a <_printf_float+0xc2>
 8011b68:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011b6a:	2a01      	cmp	r2, #1
 8011b6c:	dc01      	bgt.n	8011b72 <_printf_float+0x3ca>
 8011b6e:	07db      	lsls	r3, r3, #31
 8011b70:	d538      	bpl.n	8011be4 <_printf_float+0x43c>
 8011b72:	2301      	movs	r3, #1
 8011b74:	4642      	mov	r2, r8
 8011b76:	4631      	mov	r1, r6
 8011b78:	4628      	mov	r0, r5
 8011b7a:	47b8      	blx	r7
 8011b7c:	3001      	adds	r0, #1
 8011b7e:	f43f ae74 	beq.w	801186a <_printf_float+0xc2>
 8011b82:	ee18 3a10 	vmov	r3, s16
 8011b86:	4652      	mov	r2, sl
 8011b88:	4631      	mov	r1, r6
 8011b8a:	4628      	mov	r0, r5
 8011b8c:	47b8      	blx	r7
 8011b8e:	3001      	adds	r0, #1
 8011b90:	f43f ae6b 	beq.w	801186a <_printf_float+0xc2>
 8011b94:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8011b98:	2200      	movs	r2, #0
 8011b9a:	2300      	movs	r3, #0
 8011b9c:	f7ee ff94 	bl	8000ac8 <__aeabi_dcmpeq>
 8011ba0:	b9d8      	cbnz	r0, 8011bda <_printf_float+0x432>
 8011ba2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011ba4:	f108 0201 	add.w	r2, r8, #1
 8011ba8:	3b01      	subs	r3, #1
 8011baa:	4631      	mov	r1, r6
 8011bac:	4628      	mov	r0, r5
 8011bae:	47b8      	blx	r7
 8011bb0:	3001      	adds	r0, #1
 8011bb2:	d10e      	bne.n	8011bd2 <_printf_float+0x42a>
 8011bb4:	e659      	b.n	801186a <_printf_float+0xc2>
 8011bb6:	2301      	movs	r3, #1
 8011bb8:	4652      	mov	r2, sl
 8011bba:	4631      	mov	r1, r6
 8011bbc:	4628      	mov	r0, r5
 8011bbe:	47b8      	blx	r7
 8011bc0:	3001      	adds	r0, #1
 8011bc2:	f43f ae52 	beq.w	801186a <_printf_float+0xc2>
 8011bc6:	f108 0801 	add.w	r8, r8, #1
 8011bca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011bcc:	3b01      	subs	r3, #1
 8011bce:	4543      	cmp	r3, r8
 8011bd0:	dcf1      	bgt.n	8011bb6 <_printf_float+0x40e>
 8011bd2:	464b      	mov	r3, r9
 8011bd4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8011bd8:	e6dc      	b.n	8011994 <_printf_float+0x1ec>
 8011bda:	f04f 0800 	mov.w	r8, #0
 8011bde:	f104 0a1a 	add.w	sl, r4, #26
 8011be2:	e7f2      	b.n	8011bca <_printf_float+0x422>
 8011be4:	2301      	movs	r3, #1
 8011be6:	4642      	mov	r2, r8
 8011be8:	e7df      	b.n	8011baa <_printf_float+0x402>
 8011bea:	2301      	movs	r3, #1
 8011bec:	464a      	mov	r2, r9
 8011bee:	4631      	mov	r1, r6
 8011bf0:	4628      	mov	r0, r5
 8011bf2:	47b8      	blx	r7
 8011bf4:	3001      	adds	r0, #1
 8011bf6:	f43f ae38 	beq.w	801186a <_printf_float+0xc2>
 8011bfa:	f108 0801 	add.w	r8, r8, #1
 8011bfe:	68e3      	ldr	r3, [r4, #12]
 8011c00:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011c02:	1a5b      	subs	r3, r3, r1
 8011c04:	4543      	cmp	r3, r8
 8011c06:	dcf0      	bgt.n	8011bea <_printf_float+0x442>
 8011c08:	e6fa      	b.n	8011a00 <_printf_float+0x258>
 8011c0a:	f04f 0800 	mov.w	r8, #0
 8011c0e:	f104 0919 	add.w	r9, r4, #25
 8011c12:	e7f4      	b.n	8011bfe <_printf_float+0x456>

08011c14 <_printf_common>:
 8011c14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011c18:	4616      	mov	r6, r2
 8011c1a:	4699      	mov	r9, r3
 8011c1c:	688a      	ldr	r2, [r1, #8]
 8011c1e:	690b      	ldr	r3, [r1, #16]
 8011c20:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011c24:	4293      	cmp	r3, r2
 8011c26:	bfb8      	it	lt
 8011c28:	4613      	movlt	r3, r2
 8011c2a:	6033      	str	r3, [r6, #0]
 8011c2c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011c30:	4607      	mov	r7, r0
 8011c32:	460c      	mov	r4, r1
 8011c34:	b10a      	cbz	r2, 8011c3a <_printf_common+0x26>
 8011c36:	3301      	adds	r3, #1
 8011c38:	6033      	str	r3, [r6, #0]
 8011c3a:	6823      	ldr	r3, [r4, #0]
 8011c3c:	0699      	lsls	r1, r3, #26
 8011c3e:	bf42      	ittt	mi
 8011c40:	6833      	ldrmi	r3, [r6, #0]
 8011c42:	3302      	addmi	r3, #2
 8011c44:	6033      	strmi	r3, [r6, #0]
 8011c46:	6825      	ldr	r5, [r4, #0]
 8011c48:	f015 0506 	ands.w	r5, r5, #6
 8011c4c:	d106      	bne.n	8011c5c <_printf_common+0x48>
 8011c4e:	f104 0a19 	add.w	sl, r4, #25
 8011c52:	68e3      	ldr	r3, [r4, #12]
 8011c54:	6832      	ldr	r2, [r6, #0]
 8011c56:	1a9b      	subs	r3, r3, r2
 8011c58:	42ab      	cmp	r3, r5
 8011c5a:	dc26      	bgt.n	8011caa <_printf_common+0x96>
 8011c5c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011c60:	1e13      	subs	r3, r2, #0
 8011c62:	6822      	ldr	r2, [r4, #0]
 8011c64:	bf18      	it	ne
 8011c66:	2301      	movne	r3, #1
 8011c68:	0692      	lsls	r2, r2, #26
 8011c6a:	d42b      	bmi.n	8011cc4 <_printf_common+0xb0>
 8011c6c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011c70:	4649      	mov	r1, r9
 8011c72:	4638      	mov	r0, r7
 8011c74:	47c0      	blx	r8
 8011c76:	3001      	adds	r0, #1
 8011c78:	d01e      	beq.n	8011cb8 <_printf_common+0xa4>
 8011c7a:	6823      	ldr	r3, [r4, #0]
 8011c7c:	68e5      	ldr	r5, [r4, #12]
 8011c7e:	6832      	ldr	r2, [r6, #0]
 8011c80:	f003 0306 	and.w	r3, r3, #6
 8011c84:	2b04      	cmp	r3, #4
 8011c86:	bf08      	it	eq
 8011c88:	1aad      	subeq	r5, r5, r2
 8011c8a:	68a3      	ldr	r3, [r4, #8]
 8011c8c:	6922      	ldr	r2, [r4, #16]
 8011c8e:	bf0c      	ite	eq
 8011c90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011c94:	2500      	movne	r5, #0
 8011c96:	4293      	cmp	r3, r2
 8011c98:	bfc4      	itt	gt
 8011c9a:	1a9b      	subgt	r3, r3, r2
 8011c9c:	18ed      	addgt	r5, r5, r3
 8011c9e:	2600      	movs	r6, #0
 8011ca0:	341a      	adds	r4, #26
 8011ca2:	42b5      	cmp	r5, r6
 8011ca4:	d11a      	bne.n	8011cdc <_printf_common+0xc8>
 8011ca6:	2000      	movs	r0, #0
 8011ca8:	e008      	b.n	8011cbc <_printf_common+0xa8>
 8011caa:	2301      	movs	r3, #1
 8011cac:	4652      	mov	r2, sl
 8011cae:	4649      	mov	r1, r9
 8011cb0:	4638      	mov	r0, r7
 8011cb2:	47c0      	blx	r8
 8011cb4:	3001      	adds	r0, #1
 8011cb6:	d103      	bne.n	8011cc0 <_printf_common+0xac>
 8011cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8011cbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011cc0:	3501      	adds	r5, #1
 8011cc2:	e7c6      	b.n	8011c52 <_printf_common+0x3e>
 8011cc4:	18e1      	adds	r1, r4, r3
 8011cc6:	1c5a      	adds	r2, r3, #1
 8011cc8:	2030      	movs	r0, #48	; 0x30
 8011cca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011cce:	4422      	add	r2, r4
 8011cd0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011cd4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011cd8:	3302      	adds	r3, #2
 8011cda:	e7c7      	b.n	8011c6c <_printf_common+0x58>
 8011cdc:	2301      	movs	r3, #1
 8011cde:	4622      	mov	r2, r4
 8011ce0:	4649      	mov	r1, r9
 8011ce2:	4638      	mov	r0, r7
 8011ce4:	47c0      	blx	r8
 8011ce6:	3001      	adds	r0, #1
 8011ce8:	d0e6      	beq.n	8011cb8 <_printf_common+0xa4>
 8011cea:	3601      	adds	r6, #1
 8011cec:	e7d9      	b.n	8011ca2 <_printf_common+0x8e>
	...

08011cf0 <_printf_i>:
 8011cf0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011cf4:	7e0f      	ldrb	r7, [r1, #24]
 8011cf6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011cf8:	2f78      	cmp	r7, #120	; 0x78
 8011cfa:	4691      	mov	r9, r2
 8011cfc:	4680      	mov	r8, r0
 8011cfe:	460c      	mov	r4, r1
 8011d00:	469a      	mov	sl, r3
 8011d02:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8011d06:	d807      	bhi.n	8011d18 <_printf_i+0x28>
 8011d08:	2f62      	cmp	r7, #98	; 0x62
 8011d0a:	d80a      	bhi.n	8011d22 <_printf_i+0x32>
 8011d0c:	2f00      	cmp	r7, #0
 8011d0e:	f000 80d8 	beq.w	8011ec2 <_printf_i+0x1d2>
 8011d12:	2f58      	cmp	r7, #88	; 0x58
 8011d14:	f000 80a3 	beq.w	8011e5e <_printf_i+0x16e>
 8011d18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011d1c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011d20:	e03a      	b.n	8011d98 <_printf_i+0xa8>
 8011d22:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8011d26:	2b15      	cmp	r3, #21
 8011d28:	d8f6      	bhi.n	8011d18 <_printf_i+0x28>
 8011d2a:	a101      	add	r1, pc, #4	; (adr r1, 8011d30 <_printf_i+0x40>)
 8011d2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011d30:	08011d89 	.word	0x08011d89
 8011d34:	08011d9d 	.word	0x08011d9d
 8011d38:	08011d19 	.word	0x08011d19
 8011d3c:	08011d19 	.word	0x08011d19
 8011d40:	08011d19 	.word	0x08011d19
 8011d44:	08011d19 	.word	0x08011d19
 8011d48:	08011d9d 	.word	0x08011d9d
 8011d4c:	08011d19 	.word	0x08011d19
 8011d50:	08011d19 	.word	0x08011d19
 8011d54:	08011d19 	.word	0x08011d19
 8011d58:	08011d19 	.word	0x08011d19
 8011d5c:	08011ea9 	.word	0x08011ea9
 8011d60:	08011dcd 	.word	0x08011dcd
 8011d64:	08011e8b 	.word	0x08011e8b
 8011d68:	08011d19 	.word	0x08011d19
 8011d6c:	08011d19 	.word	0x08011d19
 8011d70:	08011ecb 	.word	0x08011ecb
 8011d74:	08011d19 	.word	0x08011d19
 8011d78:	08011dcd 	.word	0x08011dcd
 8011d7c:	08011d19 	.word	0x08011d19
 8011d80:	08011d19 	.word	0x08011d19
 8011d84:	08011e93 	.word	0x08011e93
 8011d88:	682b      	ldr	r3, [r5, #0]
 8011d8a:	1d1a      	adds	r2, r3, #4
 8011d8c:	681b      	ldr	r3, [r3, #0]
 8011d8e:	602a      	str	r2, [r5, #0]
 8011d90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011d94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011d98:	2301      	movs	r3, #1
 8011d9a:	e0a3      	b.n	8011ee4 <_printf_i+0x1f4>
 8011d9c:	6820      	ldr	r0, [r4, #0]
 8011d9e:	6829      	ldr	r1, [r5, #0]
 8011da0:	0606      	lsls	r6, r0, #24
 8011da2:	f101 0304 	add.w	r3, r1, #4
 8011da6:	d50a      	bpl.n	8011dbe <_printf_i+0xce>
 8011da8:	680e      	ldr	r6, [r1, #0]
 8011daa:	602b      	str	r3, [r5, #0]
 8011dac:	2e00      	cmp	r6, #0
 8011dae:	da03      	bge.n	8011db8 <_printf_i+0xc8>
 8011db0:	232d      	movs	r3, #45	; 0x2d
 8011db2:	4276      	negs	r6, r6
 8011db4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011db8:	485e      	ldr	r0, [pc, #376]	; (8011f34 <_printf_i+0x244>)
 8011dba:	230a      	movs	r3, #10
 8011dbc:	e019      	b.n	8011df2 <_printf_i+0x102>
 8011dbe:	680e      	ldr	r6, [r1, #0]
 8011dc0:	602b      	str	r3, [r5, #0]
 8011dc2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8011dc6:	bf18      	it	ne
 8011dc8:	b236      	sxthne	r6, r6
 8011dca:	e7ef      	b.n	8011dac <_printf_i+0xbc>
 8011dcc:	682b      	ldr	r3, [r5, #0]
 8011dce:	6820      	ldr	r0, [r4, #0]
 8011dd0:	1d19      	adds	r1, r3, #4
 8011dd2:	6029      	str	r1, [r5, #0]
 8011dd4:	0601      	lsls	r1, r0, #24
 8011dd6:	d501      	bpl.n	8011ddc <_printf_i+0xec>
 8011dd8:	681e      	ldr	r6, [r3, #0]
 8011dda:	e002      	b.n	8011de2 <_printf_i+0xf2>
 8011ddc:	0646      	lsls	r6, r0, #25
 8011dde:	d5fb      	bpl.n	8011dd8 <_printf_i+0xe8>
 8011de0:	881e      	ldrh	r6, [r3, #0]
 8011de2:	4854      	ldr	r0, [pc, #336]	; (8011f34 <_printf_i+0x244>)
 8011de4:	2f6f      	cmp	r7, #111	; 0x6f
 8011de6:	bf0c      	ite	eq
 8011de8:	2308      	moveq	r3, #8
 8011dea:	230a      	movne	r3, #10
 8011dec:	2100      	movs	r1, #0
 8011dee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011df2:	6865      	ldr	r5, [r4, #4]
 8011df4:	60a5      	str	r5, [r4, #8]
 8011df6:	2d00      	cmp	r5, #0
 8011df8:	bfa2      	ittt	ge
 8011dfa:	6821      	ldrge	r1, [r4, #0]
 8011dfc:	f021 0104 	bicge.w	r1, r1, #4
 8011e00:	6021      	strge	r1, [r4, #0]
 8011e02:	b90e      	cbnz	r6, 8011e08 <_printf_i+0x118>
 8011e04:	2d00      	cmp	r5, #0
 8011e06:	d04d      	beq.n	8011ea4 <_printf_i+0x1b4>
 8011e08:	4615      	mov	r5, r2
 8011e0a:	fbb6 f1f3 	udiv	r1, r6, r3
 8011e0e:	fb03 6711 	mls	r7, r3, r1, r6
 8011e12:	5dc7      	ldrb	r7, [r0, r7]
 8011e14:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8011e18:	4637      	mov	r7, r6
 8011e1a:	42bb      	cmp	r3, r7
 8011e1c:	460e      	mov	r6, r1
 8011e1e:	d9f4      	bls.n	8011e0a <_printf_i+0x11a>
 8011e20:	2b08      	cmp	r3, #8
 8011e22:	d10b      	bne.n	8011e3c <_printf_i+0x14c>
 8011e24:	6823      	ldr	r3, [r4, #0]
 8011e26:	07de      	lsls	r6, r3, #31
 8011e28:	d508      	bpl.n	8011e3c <_printf_i+0x14c>
 8011e2a:	6923      	ldr	r3, [r4, #16]
 8011e2c:	6861      	ldr	r1, [r4, #4]
 8011e2e:	4299      	cmp	r1, r3
 8011e30:	bfde      	ittt	le
 8011e32:	2330      	movle	r3, #48	; 0x30
 8011e34:	f805 3c01 	strble.w	r3, [r5, #-1]
 8011e38:	f105 35ff 	addle.w	r5, r5, #4294967295
 8011e3c:	1b52      	subs	r2, r2, r5
 8011e3e:	6122      	str	r2, [r4, #16]
 8011e40:	f8cd a000 	str.w	sl, [sp]
 8011e44:	464b      	mov	r3, r9
 8011e46:	aa03      	add	r2, sp, #12
 8011e48:	4621      	mov	r1, r4
 8011e4a:	4640      	mov	r0, r8
 8011e4c:	f7ff fee2 	bl	8011c14 <_printf_common>
 8011e50:	3001      	adds	r0, #1
 8011e52:	d14c      	bne.n	8011eee <_printf_i+0x1fe>
 8011e54:	f04f 30ff 	mov.w	r0, #4294967295
 8011e58:	b004      	add	sp, #16
 8011e5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011e5e:	4835      	ldr	r0, [pc, #212]	; (8011f34 <_printf_i+0x244>)
 8011e60:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8011e64:	6829      	ldr	r1, [r5, #0]
 8011e66:	6823      	ldr	r3, [r4, #0]
 8011e68:	f851 6b04 	ldr.w	r6, [r1], #4
 8011e6c:	6029      	str	r1, [r5, #0]
 8011e6e:	061d      	lsls	r5, r3, #24
 8011e70:	d514      	bpl.n	8011e9c <_printf_i+0x1ac>
 8011e72:	07df      	lsls	r7, r3, #31
 8011e74:	bf44      	itt	mi
 8011e76:	f043 0320 	orrmi.w	r3, r3, #32
 8011e7a:	6023      	strmi	r3, [r4, #0]
 8011e7c:	b91e      	cbnz	r6, 8011e86 <_printf_i+0x196>
 8011e7e:	6823      	ldr	r3, [r4, #0]
 8011e80:	f023 0320 	bic.w	r3, r3, #32
 8011e84:	6023      	str	r3, [r4, #0]
 8011e86:	2310      	movs	r3, #16
 8011e88:	e7b0      	b.n	8011dec <_printf_i+0xfc>
 8011e8a:	6823      	ldr	r3, [r4, #0]
 8011e8c:	f043 0320 	orr.w	r3, r3, #32
 8011e90:	6023      	str	r3, [r4, #0]
 8011e92:	2378      	movs	r3, #120	; 0x78
 8011e94:	4828      	ldr	r0, [pc, #160]	; (8011f38 <_printf_i+0x248>)
 8011e96:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8011e9a:	e7e3      	b.n	8011e64 <_printf_i+0x174>
 8011e9c:	0659      	lsls	r1, r3, #25
 8011e9e:	bf48      	it	mi
 8011ea0:	b2b6      	uxthmi	r6, r6
 8011ea2:	e7e6      	b.n	8011e72 <_printf_i+0x182>
 8011ea4:	4615      	mov	r5, r2
 8011ea6:	e7bb      	b.n	8011e20 <_printf_i+0x130>
 8011ea8:	682b      	ldr	r3, [r5, #0]
 8011eaa:	6826      	ldr	r6, [r4, #0]
 8011eac:	6961      	ldr	r1, [r4, #20]
 8011eae:	1d18      	adds	r0, r3, #4
 8011eb0:	6028      	str	r0, [r5, #0]
 8011eb2:	0635      	lsls	r5, r6, #24
 8011eb4:	681b      	ldr	r3, [r3, #0]
 8011eb6:	d501      	bpl.n	8011ebc <_printf_i+0x1cc>
 8011eb8:	6019      	str	r1, [r3, #0]
 8011eba:	e002      	b.n	8011ec2 <_printf_i+0x1d2>
 8011ebc:	0670      	lsls	r0, r6, #25
 8011ebe:	d5fb      	bpl.n	8011eb8 <_printf_i+0x1c8>
 8011ec0:	8019      	strh	r1, [r3, #0]
 8011ec2:	2300      	movs	r3, #0
 8011ec4:	6123      	str	r3, [r4, #16]
 8011ec6:	4615      	mov	r5, r2
 8011ec8:	e7ba      	b.n	8011e40 <_printf_i+0x150>
 8011eca:	682b      	ldr	r3, [r5, #0]
 8011ecc:	1d1a      	adds	r2, r3, #4
 8011ece:	602a      	str	r2, [r5, #0]
 8011ed0:	681d      	ldr	r5, [r3, #0]
 8011ed2:	6862      	ldr	r2, [r4, #4]
 8011ed4:	2100      	movs	r1, #0
 8011ed6:	4628      	mov	r0, r5
 8011ed8:	f7ee f982 	bl	80001e0 <memchr>
 8011edc:	b108      	cbz	r0, 8011ee2 <_printf_i+0x1f2>
 8011ede:	1b40      	subs	r0, r0, r5
 8011ee0:	6060      	str	r0, [r4, #4]
 8011ee2:	6863      	ldr	r3, [r4, #4]
 8011ee4:	6123      	str	r3, [r4, #16]
 8011ee6:	2300      	movs	r3, #0
 8011ee8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011eec:	e7a8      	b.n	8011e40 <_printf_i+0x150>
 8011eee:	6923      	ldr	r3, [r4, #16]
 8011ef0:	462a      	mov	r2, r5
 8011ef2:	4649      	mov	r1, r9
 8011ef4:	4640      	mov	r0, r8
 8011ef6:	47d0      	blx	sl
 8011ef8:	3001      	adds	r0, #1
 8011efa:	d0ab      	beq.n	8011e54 <_printf_i+0x164>
 8011efc:	6823      	ldr	r3, [r4, #0]
 8011efe:	079b      	lsls	r3, r3, #30
 8011f00:	d413      	bmi.n	8011f2a <_printf_i+0x23a>
 8011f02:	68e0      	ldr	r0, [r4, #12]
 8011f04:	9b03      	ldr	r3, [sp, #12]
 8011f06:	4298      	cmp	r0, r3
 8011f08:	bfb8      	it	lt
 8011f0a:	4618      	movlt	r0, r3
 8011f0c:	e7a4      	b.n	8011e58 <_printf_i+0x168>
 8011f0e:	2301      	movs	r3, #1
 8011f10:	4632      	mov	r2, r6
 8011f12:	4649      	mov	r1, r9
 8011f14:	4640      	mov	r0, r8
 8011f16:	47d0      	blx	sl
 8011f18:	3001      	adds	r0, #1
 8011f1a:	d09b      	beq.n	8011e54 <_printf_i+0x164>
 8011f1c:	3501      	adds	r5, #1
 8011f1e:	68e3      	ldr	r3, [r4, #12]
 8011f20:	9903      	ldr	r1, [sp, #12]
 8011f22:	1a5b      	subs	r3, r3, r1
 8011f24:	42ab      	cmp	r3, r5
 8011f26:	dcf2      	bgt.n	8011f0e <_printf_i+0x21e>
 8011f28:	e7eb      	b.n	8011f02 <_printf_i+0x212>
 8011f2a:	2500      	movs	r5, #0
 8011f2c:	f104 0619 	add.w	r6, r4, #25
 8011f30:	e7f5      	b.n	8011f1e <_printf_i+0x22e>
 8011f32:	bf00      	nop
 8011f34:	08015246 	.word	0x08015246
 8011f38:	08015257 	.word	0x08015257

08011f3c <iprintf>:
 8011f3c:	b40f      	push	{r0, r1, r2, r3}
 8011f3e:	4b0a      	ldr	r3, [pc, #40]	; (8011f68 <iprintf+0x2c>)
 8011f40:	b513      	push	{r0, r1, r4, lr}
 8011f42:	681c      	ldr	r4, [r3, #0]
 8011f44:	b124      	cbz	r4, 8011f50 <iprintf+0x14>
 8011f46:	69a3      	ldr	r3, [r4, #24]
 8011f48:	b913      	cbnz	r3, 8011f50 <iprintf+0x14>
 8011f4a:	4620      	mov	r0, r4
 8011f4c:	f7ff f9cc 	bl	80112e8 <__sinit>
 8011f50:	ab05      	add	r3, sp, #20
 8011f52:	9a04      	ldr	r2, [sp, #16]
 8011f54:	68a1      	ldr	r1, [r4, #8]
 8011f56:	9301      	str	r3, [sp, #4]
 8011f58:	4620      	mov	r0, r4
 8011f5a:	f002 f83d 	bl	8013fd8 <_vfiprintf_r>
 8011f5e:	b002      	add	sp, #8
 8011f60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011f64:	b004      	add	sp, #16
 8011f66:	4770      	bx	lr
 8011f68:	20000078 	.word	0x20000078

08011f6c <putchar>:
 8011f6c:	4b09      	ldr	r3, [pc, #36]	; (8011f94 <putchar+0x28>)
 8011f6e:	b513      	push	{r0, r1, r4, lr}
 8011f70:	681c      	ldr	r4, [r3, #0]
 8011f72:	4601      	mov	r1, r0
 8011f74:	b134      	cbz	r4, 8011f84 <putchar+0x18>
 8011f76:	69a3      	ldr	r3, [r4, #24]
 8011f78:	b923      	cbnz	r3, 8011f84 <putchar+0x18>
 8011f7a:	9001      	str	r0, [sp, #4]
 8011f7c:	4620      	mov	r0, r4
 8011f7e:	f7ff f9b3 	bl	80112e8 <__sinit>
 8011f82:	9901      	ldr	r1, [sp, #4]
 8011f84:	68a2      	ldr	r2, [r4, #8]
 8011f86:	4620      	mov	r0, r4
 8011f88:	b002      	add	sp, #8
 8011f8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011f8e:	f002 b953 	b.w	8014238 <_putc_r>
 8011f92:	bf00      	nop
 8011f94:	20000078 	.word	0x20000078

08011f98 <_puts_r>:
 8011f98:	b570      	push	{r4, r5, r6, lr}
 8011f9a:	460e      	mov	r6, r1
 8011f9c:	4605      	mov	r5, r0
 8011f9e:	b118      	cbz	r0, 8011fa8 <_puts_r+0x10>
 8011fa0:	6983      	ldr	r3, [r0, #24]
 8011fa2:	b90b      	cbnz	r3, 8011fa8 <_puts_r+0x10>
 8011fa4:	f7ff f9a0 	bl	80112e8 <__sinit>
 8011fa8:	69ab      	ldr	r3, [r5, #24]
 8011faa:	68ac      	ldr	r4, [r5, #8]
 8011fac:	b913      	cbnz	r3, 8011fb4 <_puts_r+0x1c>
 8011fae:	4628      	mov	r0, r5
 8011fb0:	f7ff f99a 	bl	80112e8 <__sinit>
 8011fb4:	4b2c      	ldr	r3, [pc, #176]	; (8012068 <_puts_r+0xd0>)
 8011fb6:	429c      	cmp	r4, r3
 8011fb8:	d120      	bne.n	8011ffc <_puts_r+0x64>
 8011fba:	686c      	ldr	r4, [r5, #4]
 8011fbc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011fbe:	07db      	lsls	r3, r3, #31
 8011fc0:	d405      	bmi.n	8011fce <_puts_r+0x36>
 8011fc2:	89a3      	ldrh	r3, [r4, #12]
 8011fc4:	0598      	lsls	r0, r3, #22
 8011fc6:	d402      	bmi.n	8011fce <_puts_r+0x36>
 8011fc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011fca:	f7f5 f833 	bl	8007034 <__retarget_lock_acquire_recursive>
 8011fce:	89a3      	ldrh	r3, [r4, #12]
 8011fd0:	0719      	lsls	r1, r3, #28
 8011fd2:	d51d      	bpl.n	8012010 <_puts_r+0x78>
 8011fd4:	6923      	ldr	r3, [r4, #16]
 8011fd6:	b1db      	cbz	r3, 8012010 <_puts_r+0x78>
 8011fd8:	3e01      	subs	r6, #1
 8011fda:	68a3      	ldr	r3, [r4, #8]
 8011fdc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8011fe0:	3b01      	subs	r3, #1
 8011fe2:	60a3      	str	r3, [r4, #8]
 8011fe4:	bb39      	cbnz	r1, 8012036 <_puts_r+0x9e>
 8011fe6:	2b00      	cmp	r3, #0
 8011fe8:	da38      	bge.n	801205c <_puts_r+0xc4>
 8011fea:	4622      	mov	r2, r4
 8011fec:	210a      	movs	r1, #10
 8011fee:	4628      	mov	r0, r5
 8011ff0:	f000 fa2a 	bl	8012448 <__swbuf_r>
 8011ff4:	3001      	adds	r0, #1
 8011ff6:	d011      	beq.n	801201c <_puts_r+0x84>
 8011ff8:	250a      	movs	r5, #10
 8011ffa:	e011      	b.n	8012020 <_puts_r+0x88>
 8011ffc:	4b1b      	ldr	r3, [pc, #108]	; (801206c <_puts_r+0xd4>)
 8011ffe:	429c      	cmp	r4, r3
 8012000:	d101      	bne.n	8012006 <_puts_r+0x6e>
 8012002:	68ac      	ldr	r4, [r5, #8]
 8012004:	e7da      	b.n	8011fbc <_puts_r+0x24>
 8012006:	4b1a      	ldr	r3, [pc, #104]	; (8012070 <_puts_r+0xd8>)
 8012008:	429c      	cmp	r4, r3
 801200a:	bf08      	it	eq
 801200c:	68ec      	ldreq	r4, [r5, #12]
 801200e:	e7d5      	b.n	8011fbc <_puts_r+0x24>
 8012010:	4621      	mov	r1, r4
 8012012:	4628      	mov	r0, r5
 8012014:	f000 fa7c 	bl	8012510 <__swsetup_r>
 8012018:	2800      	cmp	r0, #0
 801201a:	d0dd      	beq.n	8011fd8 <_puts_r+0x40>
 801201c:	f04f 35ff 	mov.w	r5, #4294967295
 8012020:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012022:	07da      	lsls	r2, r3, #31
 8012024:	d405      	bmi.n	8012032 <_puts_r+0x9a>
 8012026:	89a3      	ldrh	r3, [r4, #12]
 8012028:	059b      	lsls	r3, r3, #22
 801202a:	d402      	bmi.n	8012032 <_puts_r+0x9a>
 801202c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801202e:	f7f5 f815 	bl	800705c <__retarget_lock_release_recursive>
 8012032:	4628      	mov	r0, r5
 8012034:	bd70      	pop	{r4, r5, r6, pc}
 8012036:	2b00      	cmp	r3, #0
 8012038:	da04      	bge.n	8012044 <_puts_r+0xac>
 801203a:	69a2      	ldr	r2, [r4, #24]
 801203c:	429a      	cmp	r2, r3
 801203e:	dc06      	bgt.n	801204e <_puts_r+0xb6>
 8012040:	290a      	cmp	r1, #10
 8012042:	d004      	beq.n	801204e <_puts_r+0xb6>
 8012044:	6823      	ldr	r3, [r4, #0]
 8012046:	1c5a      	adds	r2, r3, #1
 8012048:	6022      	str	r2, [r4, #0]
 801204a:	7019      	strb	r1, [r3, #0]
 801204c:	e7c5      	b.n	8011fda <_puts_r+0x42>
 801204e:	4622      	mov	r2, r4
 8012050:	4628      	mov	r0, r5
 8012052:	f000 f9f9 	bl	8012448 <__swbuf_r>
 8012056:	3001      	adds	r0, #1
 8012058:	d1bf      	bne.n	8011fda <_puts_r+0x42>
 801205a:	e7df      	b.n	801201c <_puts_r+0x84>
 801205c:	6823      	ldr	r3, [r4, #0]
 801205e:	250a      	movs	r5, #10
 8012060:	1c5a      	adds	r2, r3, #1
 8012062:	6022      	str	r2, [r4, #0]
 8012064:	701d      	strb	r5, [r3, #0]
 8012066:	e7db      	b.n	8012020 <_puts_r+0x88>
 8012068:	080151f0 	.word	0x080151f0
 801206c:	08015210 	.word	0x08015210
 8012070:	080151d0 	.word	0x080151d0

08012074 <puts>:
 8012074:	4b02      	ldr	r3, [pc, #8]	; (8012080 <puts+0xc>)
 8012076:	4601      	mov	r1, r0
 8012078:	6818      	ldr	r0, [r3, #0]
 801207a:	f7ff bf8d 	b.w	8011f98 <_puts_r>
 801207e:	bf00      	nop
 8012080:	20000078 	.word	0x20000078

08012084 <cleanup_glue>:
 8012084:	b538      	push	{r3, r4, r5, lr}
 8012086:	460c      	mov	r4, r1
 8012088:	6809      	ldr	r1, [r1, #0]
 801208a:	4605      	mov	r5, r0
 801208c:	b109      	cbz	r1, 8012092 <cleanup_glue+0xe>
 801208e:	f7ff fff9 	bl	8012084 <cleanup_glue>
 8012092:	4621      	mov	r1, r4
 8012094:	4628      	mov	r0, r5
 8012096:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801209a:	f7ff ba05 	b.w	80114a8 <_free_r>
	...

080120a0 <_reclaim_reent>:
 80120a0:	4b2c      	ldr	r3, [pc, #176]	; (8012154 <_reclaim_reent+0xb4>)
 80120a2:	681b      	ldr	r3, [r3, #0]
 80120a4:	4283      	cmp	r3, r0
 80120a6:	b570      	push	{r4, r5, r6, lr}
 80120a8:	4604      	mov	r4, r0
 80120aa:	d051      	beq.n	8012150 <_reclaim_reent+0xb0>
 80120ac:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80120ae:	b143      	cbz	r3, 80120c2 <_reclaim_reent+0x22>
 80120b0:	68db      	ldr	r3, [r3, #12]
 80120b2:	2b00      	cmp	r3, #0
 80120b4:	d14a      	bne.n	801214c <_reclaim_reent+0xac>
 80120b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80120b8:	6819      	ldr	r1, [r3, #0]
 80120ba:	b111      	cbz	r1, 80120c2 <_reclaim_reent+0x22>
 80120bc:	4620      	mov	r0, r4
 80120be:	f7ff f9f3 	bl	80114a8 <_free_r>
 80120c2:	6961      	ldr	r1, [r4, #20]
 80120c4:	b111      	cbz	r1, 80120cc <_reclaim_reent+0x2c>
 80120c6:	4620      	mov	r0, r4
 80120c8:	f7ff f9ee 	bl	80114a8 <_free_r>
 80120cc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80120ce:	b111      	cbz	r1, 80120d6 <_reclaim_reent+0x36>
 80120d0:	4620      	mov	r0, r4
 80120d2:	f7ff f9e9 	bl	80114a8 <_free_r>
 80120d6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80120d8:	b111      	cbz	r1, 80120e0 <_reclaim_reent+0x40>
 80120da:	4620      	mov	r0, r4
 80120dc:	f7ff f9e4 	bl	80114a8 <_free_r>
 80120e0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80120e2:	b111      	cbz	r1, 80120ea <_reclaim_reent+0x4a>
 80120e4:	4620      	mov	r0, r4
 80120e6:	f7ff f9df 	bl	80114a8 <_free_r>
 80120ea:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80120ec:	b111      	cbz	r1, 80120f4 <_reclaim_reent+0x54>
 80120ee:	4620      	mov	r0, r4
 80120f0:	f7ff f9da 	bl	80114a8 <_free_r>
 80120f4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80120f6:	b111      	cbz	r1, 80120fe <_reclaim_reent+0x5e>
 80120f8:	4620      	mov	r0, r4
 80120fa:	f7ff f9d5 	bl	80114a8 <_free_r>
 80120fe:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8012100:	b111      	cbz	r1, 8012108 <_reclaim_reent+0x68>
 8012102:	4620      	mov	r0, r4
 8012104:	f7ff f9d0 	bl	80114a8 <_free_r>
 8012108:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801210a:	b111      	cbz	r1, 8012112 <_reclaim_reent+0x72>
 801210c:	4620      	mov	r0, r4
 801210e:	f7ff f9cb 	bl	80114a8 <_free_r>
 8012112:	69a3      	ldr	r3, [r4, #24]
 8012114:	b1e3      	cbz	r3, 8012150 <_reclaim_reent+0xb0>
 8012116:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8012118:	4620      	mov	r0, r4
 801211a:	4798      	blx	r3
 801211c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801211e:	b1b9      	cbz	r1, 8012150 <_reclaim_reent+0xb0>
 8012120:	4620      	mov	r0, r4
 8012122:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012126:	f7ff bfad 	b.w	8012084 <cleanup_glue>
 801212a:	5949      	ldr	r1, [r1, r5]
 801212c:	b941      	cbnz	r1, 8012140 <_reclaim_reent+0xa0>
 801212e:	3504      	adds	r5, #4
 8012130:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012132:	2d80      	cmp	r5, #128	; 0x80
 8012134:	68d9      	ldr	r1, [r3, #12]
 8012136:	d1f8      	bne.n	801212a <_reclaim_reent+0x8a>
 8012138:	4620      	mov	r0, r4
 801213a:	f7ff f9b5 	bl	80114a8 <_free_r>
 801213e:	e7ba      	b.n	80120b6 <_reclaim_reent+0x16>
 8012140:	680e      	ldr	r6, [r1, #0]
 8012142:	4620      	mov	r0, r4
 8012144:	f7ff f9b0 	bl	80114a8 <_free_r>
 8012148:	4631      	mov	r1, r6
 801214a:	e7ef      	b.n	801212c <_reclaim_reent+0x8c>
 801214c:	2500      	movs	r5, #0
 801214e:	e7ef      	b.n	8012130 <_reclaim_reent+0x90>
 8012150:	bd70      	pop	{r4, r5, r6, pc}
 8012152:	bf00      	nop
 8012154:	20000078 	.word	0x20000078

08012158 <_sbrk_r>:
 8012158:	b538      	push	{r3, r4, r5, lr}
 801215a:	4d06      	ldr	r5, [pc, #24]	; (8012174 <_sbrk_r+0x1c>)
 801215c:	2300      	movs	r3, #0
 801215e:	4604      	mov	r4, r0
 8012160:	4608      	mov	r0, r1
 8012162:	602b      	str	r3, [r5, #0]
 8012164:	f7f4 fe54 	bl	8006e10 <_sbrk>
 8012168:	1c43      	adds	r3, r0, #1
 801216a:	d102      	bne.n	8012172 <_sbrk_r+0x1a>
 801216c:	682b      	ldr	r3, [r5, #0]
 801216e:	b103      	cbz	r3, 8012172 <_sbrk_r+0x1a>
 8012170:	6023      	str	r3, [r4, #0]
 8012172:	bd38      	pop	{r3, r4, r5, pc}
 8012174:	20005ca0 	.word	0x20005ca0

08012178 <_raise_r>:
 8012178:	291f      	cmp	r1, #31
 801217a:	b538      	push	{r3, r4, r5, lr}
 801217c:	4604      	mov	r4, r0
 801217e:	460d      	mov	r5, r1
 8012180:	d904      	bls.n	801218c <_raise_r+0x14>
 8012182:	2316      	movs	r3, #22
 8012184:	6003      	str	r3, [r0, #0]
 8012186:	f04f 30ff 	mov.w	r0, #4294967295
 801218a:	bd38      	pop	{r3, r4, r5, pc}
 801218c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801218e:	b112      	cbz	r2, 8012196 <_raise_r+0x1e>
 8012190:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012194:	b94b      	cbnz	r3, 80121aa <_raise_r+0x32>
 8012196:	4620      	mov	r0, r4
 8012198:	f000 f830 	bl	80121fc <_getpid_r>
 801219c:	462a      	mov	r2, r5
 801219e:	4601      	mov	r1, r0
 80121a0:	4620      	mov	r0, r4
 80121a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80121a6:	f000 b817 	b.w	80121d8 <_kill_r>
 80121aa:	2b01      	cmp	r3, #1
 80121ac:	d00a      	beq.n	80121c4 <_raise_r+0x4c>
 80121ae:	1c59      	adds	r1, r3, #1
 80121b0:	d103      	bne.n	80121ba <_raise_r+0x42>
 80121b2:	2316      	movs	r3, #22
 80121b4:	6003      	str	r3, [r0, #0]
 80121b6:	2001      	movs	r0, #1
 80121b8:	e7e7      	b.n	801218a <_raise_r+0x12>
 80121ba:	2400      	movs	r4, #0
 80121bc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80121c0:	4628      	mov	r0, r5
 80121c2:	4798      	blx	r3
 80121c4:	2000      	movs	r0, #0
 80121c6:	e7e0      	b.n	801218a <_raise_r+0x12>

080121c8 <raise>:
 80121c8:	4b02      	ldr	r3, [pc, #8]	; (80121d4 <raise+0xc>)
 80121ca:	4601      	mov	r1, r0
 80121cc:	6818      	ldr	r0, [r3, #0]
 80121ce:	f7ff bfd3 	b.w	8012178 <_raise_r>
 80121d2:	bf00      	nop
 80121d4:	20000078 	.word	0x20000078

080121d8 <_kill_r>:
 80121d8:	b538      	push	{r3, r4, r5, lr}
 80121da:	4d07      	ldr	r5, [pc, #28]	; (80121f8 <_kill_r+0x20>)
 80121dc:	2300      	movs	r3, #0
 80121de:	4604      	mov	r4, r0
 80121e0:	4608      	mov	r0, r1
 80121e2:	4611      	mov	r1, r2
 80121e4:	602b      	str	r3, [r5, #0]
 80121e6:	f7f4 fd8b 	bl	8006d00 <_kill>
 80121ea:	1c43      	adds	r3, r0, #1
 80121ec:	d102      	bne.n	80121f4 <_kill_r+0x1c>
 80121ee:	682b      	ldr	r3, [r5, #0]
 80121f0:	b103      	cbz	r3, 80121f4 <_kill_r+0x1c>
 80121f2:	6023      	str	r3, [r4, #0]
 80121f4:	bd38      	pop	{r3, r4, r5, pc}
 80121f6:	bf00      	nop
 80121f8:	20005ca0 	.word	0x20005ca0

080121fc <_getpid_r>:
 80121fc:	f7f4 bd78 	b.w	8006cf0 <_getpid>

08012200 <sniprintf>:
 8012200:	b40c      	push	{r2, r3}
 8012202:	b530      	push	{r4, r5, lr}
 8012204:	4b17      	ldr	r3, [pc, #92]	; (8012264 <sniprintf+0x64>)
 8012206:	1e0c      	subs	r4, r1, #0
 8012208:	681d      	ldr	r5, [r3, #0]
 801220a:	b09d      	sub	sp, #116	; 0x74
 801220c:	da08      	bge.n	8012220 <sniprintf+0x20>
 801220e:	238b      	movs	r3, #139	; 0x8b
 8012210:	602b      	str	r3, [r5, #0]
 8012212:	f04f 30ff 	mov.w	r0, #4294967295
 8012216:	b01d      	add	sp, #116	; 0x74
 8012218:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801221c:	b002      	add	sp, #8
 801221e:	4770      	bx	lr
 8012220:	f44f 7302 	mov.w	r3, #520	; 0x208
 8012224:	f8ad 3014 	strh.w	r3, [sp, #20]
 8012228:	bf14      	ite	ne
 801222a:	f104 33ff 	addne.w	r3, r4, #4294967295
 801222e:	4623      	moveq	r3, r4
 8012230:	9304      	str	r3, [sp, #16]
 8012232:	9307      	str	r3, [sp, #28]
 8012234:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012238:	9002      	str	r0, [sp, #8]
 801223a:	9006      	str	r0, [sp, #24]
 801223c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8012240:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8012242:	ab21      	add	r3, sp, #132	; 0x84
 8012244:	a902      	add	r1, sp, #8
 8012246:	4628      	mov	r0, r5
 8012248:	9301      	str	r3, [sp, #4]
 801224a:	f001 fd9b 	bl	8013d84 <_svfiprintf_r>
 801224e:	1c43      	adds	r3, r0, #1
 8012250:	bfbc      	itt	lt
 8012252:	238b      	movlt	r3, #139	; 0x8b
 8012254:	602b      	strlt	r3, [r5, #0]
 8012256:	2c00      	cmp	r4, #0
 8012258:	d0dd      	beq.n	8012216 <sniprintf+0x16>
 801225a:	9b02      	ldr	r3, [sp, #8]
 801225c:	2200      	movs	r2, #0
 801225e:	701a      	strb	r2, [r3, #0]
 8012260:	e7d9      	b.n	8012216 <sniprintf+0x16>
 8012262:	bf00      	nop
 8012264:	20000078 	.word	0x20000078

08012268 <siprintf>:
 8012268:	b40e      	push	{r1, r2, r3}
 801226a:	b500      	push	{lr}
 801226c:	b09c      	sub	sp, #112	; 0x70
 801226e:	ab1d      	add	r3, sp, #116	; 0x74
 8012270:	9002      	str	r0, [sp, #8]
 8012272:	9006      	str	r0, [sp, #24]
 8012274:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8012278:	4809      	ldr	r0, [pc, #36]	; (80122a0 <siprintf+0x38>)
 801227a:	9107      	str	r1, [sp, #28]
 801227c:	9104      	str	r1, [sp, #16]
 801227e:	4909      	ldr	r1, [pc, #36]	; (80122a4 <siprintf+0x3c>)
 8012280:	f853 2b04 	ldr.w	r2, [r3], #4
 8012284:	9105      	str	r1, [sp, #20]
 8012286:	6800      	ldr	r0, [r0, #0]
 8012288:	9301      	str	r3, [sp, #4]
 801228a:	a902      	add	r1, sp, #8
 801228c:	f001 fd7a 	bl	8013d84 <_svfiprintf_r>
 8012290:	9b02      	ldr	r3, [sp, #8]
 8012292:	2200      	movs	r2, #0
 8012294:	701a      	strb	r2, [r3, #0]
 8012296:	b01c      	add	sp, #112	; 0x70
 8012298:	f85d eb04 	ldr.w	lr, [sp], #4
 801229c:	b003      	add	sp, #12
 801229e:	4770      	bx	lr
 80122a0:	20000078 	.word	0x20000078
 80122a4:	ffff0208 	.word	0xffff0208

080122a8 <__sread>:
 80122a8:	b510      	push	{r4, lr}
 80122aa:	460c      	mov	r4, r1
 80122ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80122b0:	f002 f80a 	bl	80142c8 <_read_r>
 80122b4:	2800      	cmp	r0, #0
 80122b6:	bfab      	itete	ge
 80122b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80122ba:	89a3      	ldrhlt	r3, [r4, #12]
 80122bc:	181b      	addge	r3, r3, r0
 80122be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80122c2:	bfac      	ite	ge
 80122c4:	6563      	strge	r3, [r4, #84]	; 0x54
 80122c6:	81a3      	strhlt	r3, [r4, #12]
 80122c8:	bd10      	pop	{r4, pc}

080122ca <__swrite>:
 80122ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80122ce:	461f      	mov	r7, r3
 80122d0:	898b      	ldrh	r3, [r1, #12]
 80122d2:	05db      	lsls	r3, r3, #23
 80122d4:	4605      	mov	r5, r0
 80122d6:	460c      	mov	r4, r1
 80122d8:	4616      	mov	r6, r2
 80122da:	d505      	bpl.n	80122e8 <__swrite+0x1e>
 80122dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80122e0:	2302      	movs	r3, #2
 80122e2:	2200      	movs	r2, #0
 80122e4:	f001 f8d4 	bl	8013490 <_lseek_r>
 80122e8:	89a3      	ldrh	r3, [r4, #12]
 80122ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80122ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80122f2:	81a3      	strh	r3, [r4, #12]
 80122f4:	4632      	mov	r2, r6
 80122f6:	463b      	mov	r3, r7
 80122f8:	4628      	mov	r0, r5
 80122fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80122fe:	f000 b8f5 	b.w	80124ec <_write_r>

08012302 <__sseek>:
 8012302:	b510      	push	{r4, lr}
 8012304:	460c      	mov	r4, r1
 8012306:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801230a:	f001 f8c1 	bl	8013490 <_lseek_r>
 801230e:	1c43      	adds	r3, r0, #1
 8012310:	89a3      	ldrh	r3, [r4, #12]
 8012312:	bf15      	itete	ne
 8012314:	6560      	strne	r0, [r4, #84]	; 0x54
 8012316:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801231a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801231e:	81a3      	strheq	r3, [r4, #12]
 8012320:	bf18      	it	ne
 8012322:	81a3      	strhne	r3, [r4, #12]
 8012324:	bd10      	pop	{r4, pc}

08012326 <__sclose>:
 8012326:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801232a:	f000 b95f 	b.w	80125ec <_close_r>
	...

08012330 <_strtol_l.constprop.0>:
 8012330:	2b01      	cmp	r3, #1
 8012332:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012336:	d001      	beq.n	801233c <_strtol_l.constprop.0+0xc>
 8012338:	2b24      	cmp	r3, #36	; 0x24
 801233a:	d906      	bls.n	801234a <_strtol_l.constprop.0+0x1a>
 801233c:	f7fe ff76 	bl	801122c <__errno>
 8012340:	2316      	movs	r3, #22
 8012342:	6003      	str	r3, [r0, #0]
 8012344:	2000      	movs	r0, #0
 8012346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801234a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8012430 <_strtol_l.constprop.0+0x100>
 801234e:	460d      	mov	r5, r1
 8012350:	462e      	mov	r6, r5
 8012352:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012356:	f814 700c 	ldrb.w	r7, [r4, ip]
 801235a:	f017 0708 	ands.w	r7, r7, #8
 801235e:	d1f7      	bne.n	8012350 <_strtol_l.constprop.0+0x20>
 8012360:	2c2d      	cmp	r4, #45	; 0x2d
 8012362:	d132      	bne.n	80123ca <_strtol_l.constprop.0+0x9a>
 8012364:	782c      	ldrb	r4, [r5, #0]
 8012366:	2701      	movs	r7, #1
 8012368:	1cb5      	adds	r5, r6, #2
 801236a:	2b00      	cmp	r3, #0
 801236c:	d05b      	beq.n	8012426 <_strtol_l.constprop.0+0xf6>
 801236e:	2b10      	cmp	r3, #16
 8012370:	d109      	bne.n	8012386 <_strtol_l.constprop.0+0x56>
 8012372:	2c30      	cmp	r4, #48	; 0x30
 8012374:	d107      	bne.n	8012386 <_strtol_l.constprop.0+0x56>
 8012376:	782c      	ldrb	r4, [r5, #0]
 8012378:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801237c:	2c58      	cmp	r4, #88	; 0x58
 801237e:	d14d      	bne.n	801241c <_strtol_l.constprop.0+0xec>
 8012380:	786c      	ldrb	r4, [r5, #1]
 8012382:	2310      	movs	r3, #16
 8012384:	3502      	adds	r5, #2
 8012386:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801238a:	f108 38ff 	add.w	r8, r8, #4294967295
 801238e:	f04f 0c00 	mov.w	ip, #0
 8012392:	fbb8 f9f3 	udiv	r9, r8, r3
 8012396:	4666      	mov	r6, ip
 8012398:	fb03 8a19 	mls	sl, r3, r9, r8
 801239c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80123a0:	f1be 0f09 	cmp.w	lr, #9
 80123a4:	d816      	bhi.n	80123d4 <_strtol_l.constprop.0+0xa4>
 80123a6:	4674      	mov	r4, lr
 80123a8:	42a3      	cmp	r3, r4
 80123aa:	dd24      	ble.n	80123f6 <_strtol_l.constprop.0+0xc6>
 80123ac:	f1bc 0f00 	cmp.w	ip, #0
 80123b0:	db1e      	blt.n	80123f0 <_strtol_l.constprop.0+0xc0>
 80123b2:	45b1      	cmp	r9, r6
 80123b4:	d31c      	bcc.n	80123f0 <_strtol_l.constprop.0+0xc0>
 80123b6:	d101      	bne.n	80123bc <_strtol_l.constprop.0+0x8c>
 80123b8:	45a2      	cmp	sl, r4
 80123ba:	db19      	blt.n	80123f0 <_strtol_l.constprop.0+0xc0>
 80123bc:	fb06 4603 	mla	r6, r6, r3, r4
 80123c0:	f04f 0c01 	mov.w	ip, #1
 80123c4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80123c8:	e7e8      	b.n	801239c <_strtol_l.constprop.0+0x6c>
 80123ca:	2c2b      	cmp	r4, #43	; 0x2b
 80123cc:	bf04      	itt	eq
 80123ce:	782c      	ldrbeq	r4, [r5, #0]
 80123d0:	1cb5      	addeq	r5, r6, #2
 80123d2:	e7ca      	b.n	801236a <_strtol_l.constprop.0+0x3a>
 80123d4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80123d8:	f1be 0f19 	cmp.w	lr, #25
 80123dc:	d801      	bhi.n	80123e2 <_strtol_l.constprop.0+0xb2>
 80123de:	3c37      	subs	r4, #55	; 0x37
 80123e0:	e7e2      	b.n	80123a8 <_strtol_l.constprop.0+0x78>
 80123e2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80123e6:	f1be 0f19 	cmp.w	lr, #25
 80123ea:	d804      	bhi.n	80123f6 <_strtol_l.constprop.0+0xc6>
 80123ec:	3c57      	subs	r4, #87	; 0x57
 80123ee:	e7db      	b.n	80123a8 <_strtol_l.constprop.0+0x78>
 80123f0:	f04f 3cff 	mov.w	ip, #4294967295
 80123f4:	e7e6      	b.n	80123c4 <_strtol_l.constprop.0+0x94>
 80123f6:	f1bc 0f00 	cmp.w	ip, #0
 80123fa:	da05      	bge.n	8012408 <_strtol_l.constprop.0+0xd8>
 80123fc:	2322      	movs	r3, #34	; 0x22
 80123fe:	6003      	str	r3, [r0, #0]
 8012400:	4646      	mov	r6, r8
 8012402:	b942      	cbnz	r2, 8012416 <_strtol_l.constprop.0+0xe6>
 8012404:	4630      	mov	r0, r6
 8012406:	e79e      	b.n	8012346 <_strtol_l.constprop.0+0x16>
 8012408:	b107      	cbz	r7, 801240c <_strtol_l.constprop.0+0xdc>
 801240a:	4276      	negs	r6, r6
 801240c:	2a00      	cmp	r2, #0
 801240e:	d0f9      	beq.n	8012404 <_strtol_l.constprop.0+0xd4>
 8012410:	f1bc 0f00 	cmp.w	ip, #0
 8012414:	d000      	beq.n	8012418 <_strtol_l.constprop.0+0xe8>
 8012416:	1e69      	subs	r1, r5, #1
 8012418:	6011      	str	r1, [r2, #0]
 801241a:	e7f3      	b.n	8012404 <_strtol_l.constprop.0+0xd4>
 801241c:	2430      	movs	r4, #48	; 0x30
 801241e:	2b00      	cmp	r3, #0
 8012420:	d1b1      	bne.n	8012386 <_strtol_l.constprop.0+0x56>
 8012422:	2308      	movs	r3, #8
 8012424:	e7af      	b.n	8012386 <_strtol_l.constprop.0+0x56>
 8012426:	2c30      	cmp	r4, #48	; 0x30
 8012428:	d0a5      	beq.n	8012376 <_strtol_l.constprop.0+0x46>
 801242a:	230a      	movs	r3, #10
 801242c:	e7ab      	b.n	8012386 <_strtol_l.constprop.0+0x56>
 801242e:	bf00      	nop
 8012430:	08015269 	.word	0x08015269

08012434 <strtol>:
 8012434:	4613      	mov	r3, r2
 8012436:	460a      	mov	r2, r1
 8012438:	4601      	mov	r1, r0
 801243a:	4802      	ldr	r0, [pc, #8]	; (8012444 <strtol+0x10>)
 801243c:	6800      	ldr	r0, [r0, #0]
 801243e:	f7ff bf77 	b.w	8012330 <_strtol_l.constprop.0>
 8012442:	bf00      	nop
 8012444:	20000078 	.word	0x20000078

08012448 <__swbuf_r>:
 8012448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801244a:	460e      	mov	r6, r1
 801244c:	4614      	mov	r4, r2
 801244e:	4605      	mov	r5, r0
 8012450:	b118      	cbz	r0, 801245a <__swbuf_r+0x12>
 8012452:	6983      	ldr	r3, [r0, #24]
 8012454:	b90b      	cbnz	r3, 801245a <__swbuf_r+0x12>
 8012456:	f7fe ff47 	bl	80112e8 <__sinit>
 801245a:	4b21      	ldr	r3, [pc, #132]	; (80124e0 <__swbuf_r+0x98>)
 801245c:	429c      	cmp	r4, r3
 801245e:	d12b      	bne.n	80124b8 <__swbuf_r+0x70>
 8012460:	686c      	ldr	r4, [r5, #4]
 8012462:	69a3      	ldr	r3, [r4, #24]
 8012464:	60a3      	str	r3, [r4, #8]
 8012466:	89a3      	ldrh	r3, [r4, #12]
 8012468:	071a      	lsls	r2, r3, #28
 801246a:	d52f      	bpl.n	80124cc <__swbuf_r+0x84>
 801246c:	6923      	ldr	r3, [r4, #16]
 801246e:	b36b      	cbz	r3, 80124cc <__swbuf_r+0x84>
 8012470:	6923      	ldr	r3, [r4, #16]
 8012472:	6820      	ldr	r0, [r4, #0]
 8012474:	1ac0      	subs	r0, r0, r3
 8012476:	6963      	ldr	r3, [r4, #20]
 8012478:	b2f6      	uxtb	r6, r6
 801247a:	4283      	cmp	r3, r0
 801247c:	4637      	mov	r7, r6
 801247e:	dc04      	bgt.n	801248a <__swbuf_r+0x42>
 8012480:	4621      	mov	r1, r4
 8012482:	4628      	mov	r0, r5
 8012484:	f000 ffc4 	bl	8013410 <_fflush_r>
 8012488:	bb30      	cbnz	r0, 80124d8 <__swbuf_r+0x90>
 801248a:	68a3      	ldr	r3, [r4, #8]
 801248c:	3b01      	subs	r3, #1
 801248e:	60a3      	str	r3, [r4, #8]
 8012490:	6823      	ldr	r3, [r4, #0]
 8012492:	1c5a      	adds	r2, r3, #1
 8012494:	6022      	str	r2, [r4, #0]
 8012496:	701e      	strb	r6, [r3, #0]
 8012498:	6963      	ldr	r3, [r4, #20]
 801249a:	3001      	adds	r0, #1
 801249c:	4283      	cmp	r3, r0
 801249e:	d004      	beq.n	80124aa <__swbuf_r+0x62>
 80124a0:	89a3      	ldrh	r3, [r4, #12]
 80124a2:	07db      	lsls	r3, r3, #31
 80124a4:	d506      	bpl.n	80124b4 <__swbuf_r+0x6c>
 80124a6:	2e0a      	cmp	r6, #10
 80124a8:	d104      	bne.n	80124b4 <__swbuf_r+0x6c>
 80124aa:	4621      	mov	r1, r4
 80124ac:	4628      	mov	r0, r5
 80124ae:	f000 ffaf 	bl	8013410 <_fflush_r>
 80124b2:	b988      	cbnz	r0, 80124d8 <__swbuf_r+0x90>
 80124b4:	4638      	mov	r0, r7
 80124b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80124b8:	4b0a      	ldr	r3, [pc, #40]	; (80124e4 <__swbuf_r+0x9c>)
 80124ba:	429c      	cmp	r4, r3
 80124bc:	d101      	bne.n	80124c2 <__swbuf_r+0x7a>
 80124be:	68ac      	ldr	r4, [r5, #8]
 80124c0:	e7cf      	b.n	8012462 <__swbuf_r+0x1a>
 80124c2:	4b09      	ldr	r3, [pc, #36]	; (80124e8 <__swbuf_r+0xa0>)
 80124c4:	429c      	cmp	r4, r3
 80124c6:	bf08      	it	eq
 80124c8:	68ec      	ldreq	r4, [r5, #12]
 80124ca:	e7ca      	b.n	8012462 <__swbuf_r+0x1a>
 80124cc:	4621      	mov	r1, r4
 80124ce:	4628      	mov	r0, r5
 80124d0:	f000 f81e 	bl	8012510 <__swsetup_r>
 80124d4:	2800      	cmp	r0, #0
 80124d6:	d0cb      	beq.n	8012470 <__swbuf_r+0x28>
 80124d8:	f04f 37ff 	mov.w	r7, #4294967295
 80124dc:	e7ea      	b.n	80124b4 <__swbuf_r+0x6c>
 80124de:	bf00      	nop
 80124e0:	080151f0 	.word	0x080151f0
 80124e4:	08015210 	.word	0x08015210
 80124e8:	080151d0 	.word	0x080151d0

080124ec <_write_r>:
 80124ec:	b538      	push	{r3, r4, r5, lr}
 80124ee:	4d07      	ldr	r5, [pc, #28]	; (801250c <_write_r+0x20>)
 80124f0:	4604      	mov	r4, r0
 80124f2:	4608      	mov	r0, r1
 80124f4:	4611      	mov	r1, r2
 80124f6:	2200      	movs	r2, #0
 80124f8:	602a      	str	r2, [r5, #0]
 80124fa:	461a      	mov	r2, r3
 80124fc:	f7f4 fc37 	bl	8006d6e <_write>
 8012500:	1c43      	adds	r3, r0, #1
 8012502:	d102      	bne.n	801250a <_write_r+0x1e>
 8012504:	682b      	ldr	r3, [r5, #0]
 8012506:	b103      	cbz	r3, 801250a <_write_r+0x1e>
 8012508:	6023      	str	r3, [r4, #0]
 801250a:	bd38      	pop	{r3, r4, r5, pc}
 801250c:	20005ca0 	.word	0x20005ca0

08012510 <__swsetup_r>:
 8012510:	4b32      	ldr	r3, [pc, #200]	; (80125dc <__swsetup_r+0xcc>)
 8012512:	b570      	push	{r4, r5, r6, lr}
 8012514:	681d      	ldr	r5, [r3, #0]
 8012516:	4606      	mov	r6, r0
 8012518:	460c      	mov	r4, r1
 801251a:	b125      	cbz	r5, 8012526 <__swsetup_r+0x16>
 801251c:	69ab      	ldr	r3, [r5, #24]
 801251e:	b913      	cbnz	r3, 8012526 <__swsetup_r+0x16>
 8012520:	4628      	mov	r0, r5
 8012522:	f7fe fee1 	bl	80112e8 <__sinit>
 8012526:	4b2e      	ldr	r3, [pc, #184]	; (80125e0 <__swsetup_r+0xd0>)
 8012528:	429c      	cmp	r4, r3
 801252a:	d10f      	bne.n	801254c <__swsetup_r+0x3c>
 801252c:	686c      	ldr	r4, [r5, #4]
 801252e:	89a3      	ldrh	r3, [r4, #12]
 8012530:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012534:	0719      	lsls	r1, r3, #28
 8012536:	d42c      	bmi.n	8012592 <__swsetup_r+0x82>
 8012538:	06dd      	lsls	r5, r3, #27
 801253a:	d411      	bmi.n	8012560 <__swsetup_r+0x50>
 801253c:	2309      	movs	r3, #9
 801253e:	6033      	str	r3, [r6, #0]
 8012540:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8012544:	81a3      	strh	r3, [r4, #12]
 8012546:	f04f 30ff 	mov.w	r0, #4294967295
 801254a:	e03e      	b.n	80125ca <__swsetup_r+0xba>
 801254c:	4b25      	ldr	r3, [pc, #148]	; (80125e4 <__swsetup_r+0xd4>)
 801254e:	429c      	cmp	r4, r3
 8012550:	d101      	bne.n	8012556 <__swsetup_r+0x46>
 8012552:	68ac      	ldr	r4, [r5, #8]
 8012554:	e7eb      	b.n	801252e <__swsetup_r+0x1e>
 8012556:	4b24      	ldr	r3, [pc, #144]	; (80125e8 <__swsetup_r+0xd8>)
 8012558:	429c      	cmp	r4, r3
 801255a:	bf08      	it	eq
 801255c:	68ec      	ldreq	r4, [r5, #12]
 801255e:	e7e6      	b.n	801252e <__swsetup_r+0x1e>
 8012560:	0758      	lsls	r0, r3, #29
 8012562:	d512      	bpl.n	801258a <__swsetup_r+0x7a>
 8012564:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012566:	b141      	cbz	r1, 801257a <__swsetup_r+0x6a>
 8012568:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801256c:	4299      	cmp	r1, r3
 801256e:	d002      	beq.n	8012576 <__swsetup_r+0x66>
 8012570:	4630      	mov	r0, r6
 8012572:	f7fe ff99 	bl	80114a8 <_free_r>
 8012576:	2300      	movs	r3, #0
 8012578:	6363      	str	r3, [r4, #52]	; 0x34
 801257a:	89a3      	ldrh	r3, [r4, #12]
 801257c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012580:	81a3      	strh	r3, [r4, #12]
 8012582:	2300      	movs	r3, #0
 8012584:	6063      	str	r3, [r4, #4]
 8012586:	6923      	ldr	r3, [r4, #16]
 8012588:	6023      	str	r3, [r4, #0]
 801258a:	89a3      	ldrh	r3, [r4, #12]
 801258c:	f043 0308 	orr.w	r3, r3, #8
 8012590:	81a3      	strh	r3, [r4, #12]
 8012592:	6923      	ldr	r3, [r4, #16]
 8012594:	b94b      	cbnz	r3, 80125aa <__swsetup_r+0x9a>
 8012596:	89a3      	ldrh	r3, [r4, #12]
 8012598:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801259c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80125a0:	d003      	beq.n	80125aa <__swsetup_r+0x9a>
 80125a2:	4621      	mov	r1, r4
 80125a4:	4630      	mov	r0, r6
 80125a6:	f000 ffab 	bl	8013500 <__smakebuf_r>
 80125aa:	89a0      	ldrh	r0, [r4, #12]
 80125ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80125b0:	f010 0301 	ands.w	r3, r0, #1
 80125b4:	d00a      	beq.n	80125cc <__swsetup_r+0xbc>
 80125b6:	2300      	movs	r3, #0
 80125b8:	60a3      	str	r3, [r4, #8]
 80125ba:	6963      	ldr	r3, [r4, #20]
 80125bc:	425b      	negs	r3, r3
 80125be:	61a3      	str	r3, [r4, #24]
 80125c0:	6923      	ldr	r3, [r4, #16]
 80125c2:	b943      	cbnz	r3, 80125d6 <__swsetup_r+0xc6>
 80125c4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80125c8:	d1ba      	bne.n	8012540 <__swsetup_r+0x30>
 80125ca:	bd70      	pop	{r4, r5, r6, pc}
 80125cc:	0781      	lsls	r1, r0, #30
 80125ce:	bf58      	it	pl
 80125d0:	6963      	ldrpl	r3, [r4, #20]
 80125d2:	60a3      	str	r3, [r4, #8]
 80125d4:	e7f4      	b.n	80125c0 <__swsetup_r+0xb0>
 80125d6:	2000      	movs	r0, #0
 80125d8:	e7f7      	b.n	80125ca <__swsetup_r+0xba>
 80125da:	bf00      	nop
 80125dc:	20000078 	.word	0x20000078
 80125e0:	080151f0 	.word	0x080151f0
 80125e4:	08015210 	.word	0x08015210
 80125e8:	080151d0 	.word	0x080151d0

080125ec <_close_r>:
 80125ec:	b538      	push	{r3, r4, r5, lr}
 80125ee:	4d06      	ldr	r5, [pc, #24]	; (8012608 <_close_r+0x1c>)
 80125f0:	2300      	movs	r3, #0
 80125f2:	4604      	mov	r4, r0
 80125f4:	4608      	mov	r0, r1
 80125f6:	602b      	str	r3, [r5, #0]
 80125f8:	f7f4 fbd5 	bl	8006da6 <_close>
 80125fc:	1c43      	adds	r3, r0, #1
 80125fe:	d102      	bne.n	8012606 <_close_r+0x1a>
 8012600:	682b      	ldr	r3, [r5, #0]
 8012602:	b103      	cbz	r3, 8012606 <_close_r+0x1a>
 8012604:	6023      	str	r3, [r4, #0]
 8012606:	bd38      	pop	{r3, r4, r5, pc}
 8012608:	20005ca0 	.word	0x20005ca0

0801260c <quorem>:
 801260c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012610:	6903      	ldr	r3, [r0, #16]
 8012612:	690c      	ldr	r4, [r1, #16]
 8012614:	42a3      	cmp	r3, r4
 8012616:	4607      	mov	r7, r0
 8012618:	f2c0 8081 	blt.w	801271e <quorem+0x112>
 801261c:	3c01      	subs	r4, #1
 801261e:	f101 0814 	add.w	r8, r1, #20
 8012622:	f100 0514 	add.w	r5, r0, #20
 8012626:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801262a:	9301      	str	r3, [sp, #4]
 801262c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8012630:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012634:	3301      	adds	r3, #1
 8012636:	429a      	cmp	r2, r3
 8012638:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801263c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8012640:	fbb2 f6f3 	udiv	r6, r2, r3
 8012644:	d331      	bcc.n	80126aa <quorem+0x9e>
 8012646:	f04f 0e00 	mov.w	lr, #0
 801264a:	4640      	mov	r0, r8
 801264c:	46ac      	mov	ip, r5
 801264e:	46f2      	mov	sl, lr
 8012650:	f850 2b04 	ldr.w	r2, [r0], #4
 8012654:	b293      	uxth	r3, r2
 8012656:	fb06 e303 	mla	r3, r6, r3, lr
 801265a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801265e:	b29b      	uxth	r3, r3
 8012660:	ebaa 0303 	sub.w	r3, sl, r3
 8012664:	f8dc a000 	ldr.w	sl, [ip]
 8012668:	0c12      	lsrs	r2, r2, #16
 801266a:	fa13 f38a 	uxtah	r3, r3, sl
 801266e:	fb06 e202 	mla	r2, r6, r2, lr
 8012672:	9300      	str	r3, [sp, #0]
 8012674:	9b00      	ldr	r3, [sp, #0]
 8012676:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801267a:	b292      	uxth	r2, r2
 801267c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8012680:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012684:	f8bd 3000 	ldrh.w	r3, [sp]
 8012688:	4581      	cmp	r9, r0
 801268a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801268e:	f84c 3b04 	str.w	r3, [ip], #4
 8012692:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8012696:	d2db      	bcs.n	8012650 <quorem+0x44>
 8012698:	f855 300b 	ldr.w	r3, [r5, fp]
 801269c:	b92b      	cbnz	r3, 80126aa <quorem+0x9e>
 801269e:	9b01      	ldr	r3, [sp, #4]
 80126a0:	3b04      	subs	r3, #4
 80126a2:	429d      	cmp	r5, r3
 80126a4:	461a      	mov	r2, r3
 80126a6:	d32e      	bcc.n	8012706 <quorem+0xfa>
 80126a8:	613c      	str	r4, [r7, #16]
 80126aa:	4638      	mov	r0, r7
 80126ac:	f001 f9f6 	bl	8013a9c <__mcmp>
 80126b0:	2800      	cmp	r0, #0
 80126b2:	db24      	blt.n	80126fe <quorem+0xf2>
 80126b4:	3601      	adds	r6, #1
 80126b6:	4628      	mov	r0, r5
 80126b8:	f04f 0c00 	mov.w	ip, #0
 80126bc:	f858 2b04 	ldr.w	r2, [r8], #4
 80126c0:	f8d0 e000 	ldr.w	lr, [r0]
 80126c4:	b293      	uxth	r3, r2
 80126c6:	ebac 0303 	sub.w	r3, ip, r3
 80126ca:	0c12      	lsrs	r2, r2, #16
 80126cc:	fa13 f38e 	uxtah	r3, r3, lr
 80126d0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80126d4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80126d8:	b29b      	uxth	r3, r3
 80126da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80126de:	45c1      	cmp	r9, r8
 80126e0:	f840 3b04 	str.w	r3, [r0], #4
 80126e4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80126e8:	d2e8      	bcs.n	80126bc <quorem+0xb0>
 80126ea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80126ee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80126f2:	b922      	cbnz	r2, 80126fe <quorem+0xf2>
 80126f4:	3b04      	subs	r3, #4
 80126f6:	429d      	cmp	r5, r3
 80126f8:	461a      	mov	r2, r3
 80126fa:	d30a      	bcc.n	8012712 <quorem+0x106>
 80126fc:	613c      	str	r4, [r7, #16]
 80126fe:	4630      	mov	r0, r6
 8012700:	b003      	add	sp, #12
 8012702:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012706:	6812      	ldr	r2, [r2, #0]
 8012708:	3b04      	subs	r3, #4
 801270a:	2a00      	cmp	r2, #0
 801270c:	d1cc      	bne.n	80126a8 <quorem+0x9c>
 801270e:	3c01      	subs	r4, #1
 8012710:	e7c7      	b.n	80126a2 <quorem+0x96>
 8012712:	6812      	ldr	r2, [r2, #0]
 8012714:	3b04      	subs	r3, #4
 8012716:	2a00      	cmp	r2, #0
 8012718:	d1f0      	bne.n	80126fc <quorem+0xf0>
 801271a:	3c01      	subs	r4, #1
 801271c:	e7eb      	b.n	80126f6 <quorem+0xea>
 801271e:	2000      	movs	r0, #0
 8012720:	e7ee      	b.n	8012700 <quorem+0xf4>
 8012722:	0000      	movs	r0, r0
 8012724:	0000      	movs	r0, r0
	...

08012728 <_dtoa_r>:
 8012728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801272c:	ed2d 8b04 	vpush	{d8-d9}
 8012730:	ec57 6b10 	vmov	r6, r7, d0
 8012734:	b093      	sub	sp, #76	; 0x4c
 8012736:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8012738:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801273c:	9106      	str	r1, [sp, #24]
 801273e:	ee10 aa10 	vmov	sl, s0
 8012742:	4604      	mov	r4, r0
 8012744:	9209      	str	r2, [sp, #36]	; 0x24
 8012746:	930c      	str	r3, [sp, #48]	; 0x30
 8012748:	46bb      	mov	fp, r7
 801274a:	b975      	cbnz	r5, 801276a <_dtoa_r+0x42>
 801274c:	2010      	movs	r0, #16
 801274e:	f7fe fe8d 	bl	801146c <malloc>
 8012752:	4602      	mov	r2, r0
 8012754:	6260      	str	r0, [r4, #36]	; 0x24
 8012756:	b920      	cbnz	r0, 8012762 <_dtoa_r+0x3a>
 8012758:	4ba7      	ldr	r3, [pc, #668]	; (80129f8 <_dtoa_r+0x2d0>)
 801275a:	21ea      	movs	r1, #234	; 0xea
 801275c:	48a7      	ldr	r0, [pc, #668]	; (80129fc <_dtoa_r+0x2d4>)
 801275e:	f001 fdc5 	bl	80142ec <__assert_func>
 8012762:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8012766:	6005      	str	r5, [r0, #0]
 8012768:	60c5      	str	r5, [r0, #12]
 801276a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801276c:	6819      	ldr	r1, [r3, #0]
 801276e:	b151      	cbz	r1, 8012786 <_dtoa_r+0x5e>
 8012770:	685a      	ldr	r2, [r3, #4]
 8012772:	604a      	str	r2, [r1, #4]
 8012774:	2301      	movs	r3, #1
 8012776:	4093      	lsls	r3, r2
 8012778:	608b      	str	r3, [r1, #8]
 801277a:	4620      	mov	r0, r4
 801277c:	f000 ff4c 	bl	8013618 <_Bfree>
 8012780:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012782:	2200      	movs	r2, #0
 8012784:	601a      	str	r2, [r3, #0]
 8012786:	1e3b      	subs	r3, r7, #0
 8012788:	bfaa      	itet	ge
 801278a:	2300      	movge	r3, #0
 801278c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8012790:	f8c8 3000 	strge.w	r3, [r8]
 8012794:	4b9a      	ldr	r3, [pc, #616]	; (8012a00 <_dtoa_r+0x2d8>)
 8012796:	bfbc      	itt	lt
 8012798:	2201      	movlt	r2, #1
 801279a:	f8c8 2000 	strlt.w	r2, [r8]
 801279e:	ea33 030b 	bics.w	r3, r3, fp
 80127a2:	d11b      	bne.n	80127dc <_dtoa_r+0xb4>
 80127a4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80127a6:	f242 730f 	movw	r3, #9999	; 0x270f
 80127aa:	6013      	str	r3, [r2, #0]
 80127ac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80127b0:	4333      	orrs	r3, r6
 80127b2:	f000 8592 	beq.w	80132da <_dtoa_r+0xbb2>
 80127b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80127b8:	b963      	cbnz	r3, 80127d4 <_dtoa_r+0xac>
 80127ba:	4b92      	ldr	r3, [pc, #584]	; (8012a04 <_dtoa_r+0x2dc>)
 80127bc:	e022      	b.n	8012804 <_dtoa_r+0xdc>
 80127be:	4b92      	ldr	r3, [pc, #584]	; (8012a08 <_dtoa_r+0x2e0>)
 80127c0:	9301      	str	r3, [sp, #4]
 80127c2:	3308      	adds	r3, #8
 80127c4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80127c6:	6013      	str	r3, [r2, #0]
 80127c8:	9801      	ldr	r0, [sp, #4]
 80127ca:	b013      	add	sp, #76	; 0x4c
 80127cc:	ecbd 8b04 	vpop	{d8-d9}
 80127d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80127d4:	4b8b      	ldr	r3, [pc, #556]	; (8012a04 <_dtoa_r+0x2dc>)
 80127d6:	9301      	str	r3, [sp, #4]
 80127d8:	3303      	adds	r3, #3
 80127da:	e7f3      	b.n	80127c4 <_dtoa_r+0x9c>
 80127dc:	2200      	movs	r2, #0
 80127de:	2300      	movs	r3, #0
 80127e0:	4650      	mov	r0, sl
 80127e2:	4659      	mov	r1, fp
 80127e4:	f7ee f970 	bl	8000ac8 <__aeabi_dcmpeq>
 80127e8:	ec4b ab19 	vmov	d9, sl, fp
 80127ec:	4680      	mov	r8, r0
 80127ee:	b158      	cbz	r0, 8012808 <_dtoa_r+0xe0>
 80127f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80127f2:	2301      	movs	r3, #1
 80127f4:	6013      	str	r3, [r2, #0]
 80127f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80127f8:	2b00      	cmp	r3, #0
 80127fa:	f000 856b 	beq.w	80132d4 <_dtoa_r+0xbac>
 80127fe:	4883      	ldr	r0, [pc, #524]	; (8012a0c <_dtoa_r+0x2e4>)
 8012800:	6018      	str	r0, [r3, #0]
 8012802:	1e43      	subs	r3, r0, #1
 8012804:	9301      	str	r3, [sp, #4]
 8012806:	e7df      	b.n	80127c8 <_dtoa_r+0xa0>
 8012808:	ec4b ab10 	vmov	d0, sl, fp
 801280c:	aa10      	add	r2, sp, #64	; 0x40
 801280e:	a911      	add	r1, sp, #68	; 0x44
 8012810:	4620      	mov	r0, r4
 8012812:	f001 f9e9 	bl	8013be8 <__d2b>
 8012816:	f3cb 550a 	ubfx	r5, fp, #20, #11
 801281a:	ee08 0a10 	vmov	s16, r0
 801281e:	2d00      	cmp	r5, #0
 8012820:	f000 8084 	beq.w	801292c <_dtoa_r+0x204>
 8012824:	ee19 3a90 	vmov	r3, s19
 8012828:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801282c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8012830:	4656      	mov	r6, sl
 8012832:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8012836:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801283a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 801283e:	4b74      	ldr	r3, [pc, #464]	; (8012a10 <_dtoa_r+0x2e8>)
 8012840:	2200      	movs	r2, #0
 8012842:	4630      	mov	r0, r6
 8012844:	4639      	mov	r1, r7
 8012846:	f7ed fd1f 	bl	8000288 <__aeabi_dsub>
 801284a:	a365      	add	r3, pc, #404	; (adr r3, 80129e0 <_dtoa_r+0x2b8>)
 801284c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012850:	f7ed fed2 	bl	80005f8 <__aeabi_dmul>
 8012854:	a364      	add	r3, pc, #400	; (adr r3, 80129e8 <_dtoa_r+0x2c0>)
 8012856:	e9d3 2300 	ldrd	r2, r3, [r3]
 801285a:	f7ed fd17 	bl	800028c <__adddf3>
 801285e:	4606      	mov	r6, r0
 8012860:	4628      	mov	r0, r5
 8012862:	460f      	mov	r7, r1
 8012864:	f7ed fe5e 	bl	8000524 <__aeabi_i2d>
 8012868:	a361      	add	r3, pc, #388	; (adr r3, 80129f0 <_dtoa_r+0x2c8>)
 801286a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801286e:	f7ed fec3 	bl	80005f8 <__aeabi_dmul>
 8012872:	4602      	mov	r2, r0
 8012874:	460b      	mov	r3, r1
 8012876:	4630      	mov	r0, r6
 8012878:	4639      	mov	r1, r7
 801287a:	f7ed fd07 	bl	800028c <__adddf3>
 801287e:	4606      	mov	r6, r0
 8012880:	460f      	mov	r7, r1
 8012882:	f7ee f969 	bl	8000b58 <__aeabi_d2iz>
 8012886:	2200      	movs	r2, #0
 8012888:	9000      	str	r0, [sp, #0]
 801288a:	2300      	movs	r3, #0
 801288c:	4630      	mov	r0, r6
 801288e:	4639      	mov	r1, r7
 8012890:	f7ee f924 	bl	8000adc <__aeabi_dcmplt>
 8012894:	b150      	cbz	r0, 80128ac <_dtoa_r+0x184>
 8012896:	9800      	ldr	r0, [sp, #0]
 8012898:	f7ed fe44 	bl	8000524 <__aeabi_i2d>
 801289c:	4632      	mov	r2, r6
 801289e:	463b      	mov	r3, r7
 80128a0:	f7ee f912 	bl	8000ac8 <__aeabi_dcmpeq>
 80128a4:	b910      	cbnz	r0, 80128ac <_dtoa_r+0x184>
 80128a6:	9b00      	ldr	r3, [sp, #0]
 80128a8:	3b01      	subs	r3, #1
 80128aa:	9300      	str	r3, [sp, #0]
 80128ac:	9b00      	ldr	r3, [sp, #0]
 80128ae:	2b16      	cmp	r3, #22
 80128b0:	d85a      	bhi.n	8012968 <_dtoa_r+0x240>
 80128b2:	9a00      	ldr	r2, [sp, #0]
 80128b4:	4b57      	ldr	r3, [pc, #348]	; (8012a14 <_dtoa_r+0x2ec>)
 80128b6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80128ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80128be:	ec51 0b19 	vmov	r0, r1, d9
 80128c2:	f7ee f90b 	bl	8000adc <__aeabi_dcmplt>
 80128c6:	2800      	cmp	r0, #0
 80128c8:	d050      	beq.n	801296c <_dtoa_r+0x244>
 80128ca:	9b00      	ldr	r3, [sp, #0]
 80128cc:	3b01      	subs	r3, #1
 80128ce:	9300      	str	r3, [sp, #0]
 80128d0:	2300      	movs	r3, #0
 80128d2:	930b      	str	r3, [sp, #44]	; 0x2c
 80128d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80128d6:	1b5d      	subs	r5, r3, r5
 80128d8:	1e6b      	subs	r3, r5, #1
 80128da:	9305      	str	r3, [sp, #20]
 80128dc:	bf45      	ittet	mi
 80128de:	f1c5 0301 	rsbmi	r3, r5, #1
 80128e2:	9304      	strmi	r3, [sp, #16]
 80128e4:	2300      	movpl	r3, #0
 80128e6:	2300      	movmi	r3, #0
 80128e8:	bf4c      	ite	mi
 80128ea:	9305      	strmi	r3, [sp, #20]
 80128ec:	9304      	strpl	r3, [sp, #16]
 80128ee:	9b00      	ldr	r3, [sp, #0]
 80128f0:	2b00      	cmp	r3, #0
 80128f2:	db3d      	blt.n	8012970 <_dtoa_r+0x248>
 80128f4:	9b05      	ldr	r3, [sp, #20]
 80128f6:	9a00      	ldr	r2, [sp, #0]
 80128f8:	920a      	str	r2, [sp, #40]	; 0x28
 80128fa:	4413      	add	r3, r2
 80128fc:	9305      	str	r3, [sp, #20]
 80128fe:	2300      	movs	r3, #0
 8012900:	9307      	str	r3, [sp, #28]
 8012902:	9b06      	ldr	r3, [sp, #24]
 8012904:	2b09      	cmp	r3, #9
 8012906:	f200 8089 	bhi.w	8012a1c <_dtoa_r+0x2f4>
 801290a:	2b05      	cmp	r3, #5
 801290c:	bfc4      	itt	gt
 801290e:	3b04      	subgt	r3, #4
 8012910:	9306      	strgt	r3, [sp, #24]
 8012912:	9b06      	ldr	r3, [sp, #24]
 8012914:	f1a3 0302 	sub.w	r3, r3, #2
 8012918:	bfcc      	ite	gt
 801291a:	2500      	movgt	r5, #0
 801291c:	2501      	movle	r5, #1
 801291e:	2b03      	cmp	r3, #3
 8012920:	f200 8087 	bhi.w	8012a32 <_dtoa_r+0x30a>
 8012924:	e8df f003 	tbb	[pc, r3]
 8012928:	59383a2d 	.word	0x59383a2d
 801292c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8012930:	441d      	add	r5, r3
 8012932:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8012936:	2b20      	cmp	r3, #32
 8012938:	bfc1      	itttt	gt
 801293a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801293e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8012942:	fa0b f303 	lslgt.w	r3, fp, r3
 8012946:	fa26 f000 	lsrgt.w	r0, r6, r0
 801294a:	bfda      	itte	le
 801294c:	f1c3 0320 	rsble	r3, r3, #32
 8012950:	fa06 f003 	lslle.w	r0, r6, r3
 8012954:	4318      	orrgt	r0, r3
 8012956:	f7ed fdd5 	bl	8000504 <__aeabi_ui2d>
 801295a:	2301      	movs	r3, #1
 801295c:	4606      	mov	r6, r0
 801295e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8012962:	3d01      	subs	r5, #1
 8012964:	930e      	str	r3, [sp, #56]	; 0x38
 8012966:	e76a      	b.n	801283e <_dtoa_r+0x116>
 8012968:	2301      	movs	r3, #1
 801296a:	e7b2      	b.n	80128d2 <_dtoa_r+0x1aa>
 801296c:	900b      	str	r0, [sp, #44]	; 0x2c
 801296e:	e7b1      	b.n	80128d4 <_dtoa_r+0x1ac>
 8012970:	9b04      	ldr	r3, [sp, #16]
 8012972:	9a00      	ldr	r2, [sp, #0]
 8012974:	1a9b      	subs	r3, r3, r2
 8012976:	9304      	str	r3, [sp, #16]
 8012978:	4253      	negs	r3, r2
 801297a:	9307      	str	r3, [sp, #28]
 801297c:	2300      	movs	r3, #0
 801297e:	930a      	str	r3, [sp, #40]	; 0x28
 8012980:	e7bf      	b.n	8012902 <_dtoa_r+0x1da>
 8012982:	2300      	movs	r3, #0
 8012984:	9308      	str	r3, [sp, #32]
 8012986:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012988:	2b00      	cmp	r3, #0
 801298a:	dc55      	bgt.n	8012a38 <_dtoa_r+0x310>
 801298c:	2301      	movs	r3, #1
 801298e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8012992:	461a      	mov	r2, r3
 8012994:	9209      	str	r2, [sp, #36]	; 0x24
 8012996:	e00c      	b.n	80129b2 <_dtoa_r+0x28a>
 8012998:	2301      	movs	r3, #1
 801299a:	e7f3      	b.n	8012984 <_dtoa_r+0x25c>
 801299c:	2300      	movs	r3, #0
 801299e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80129a0:	9308      	str	r3, [sp, #32]
 80129a2:	9b00      	ldr	r3, [sp, #0]
 80129a4:	4413      	add	r3, r2
 80129a6:	9302      	str	r3, [sp, #8]
 80129a8:	3301      	adds	r3, #1
 80129aa:	2b01      	cmp	r3, #1
 80129ac:	9303      	str	r3, [sp, #12]
 80129ae:	bfb8      	it	lt
 80129b0:	2301      	movlt	r3, #1
 80129b2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80129b4:	2200      	movs	r2, #0
 80129b6:	6042      	str	r2, [r0, #4]
 80129b8:	2204      	movs	r2, #4
 80129ba:	f102 0614 	add.w	r6, r2, #20
 80129be:	429e      	cmp	r6, r3
 80129c0:	6841      	ldr	r1, [r0, #4]
 80129c2:	d93d      	bls.n	8012a40 <_dtoa_r+0x318>
 80129c4:	4620      	mov	r0, r4
 80129c6:	f000 fde7 	bl	8013598 <_Balloc>
 80129ca:	9001      	str	r0, [sp, #4]
 80129cc:	2800      	cmp	r0, #0
 80129ce:	d13b      	bne.n	8012a48 <_dtoa_r+0x320>
 80129d0:	4b11      	ldr	r3, [pc, #68]	; (8012a18 <_dtoa_r+0x2f0>)
 80129d2:	4602      	mov	r2, r0
 80129d4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80129d8:	e6c0      	b.n	801275c <_dtoa_r+0x34>
 80129da:	2301      	movs	r3, #1
 80129dc:	e7df      	b.n	801299e <_dtoa_r+0x276>
 80129de:	bf00      	nop
 80129e0:	636f4361 	.word	0x636f4361
 80129e4:	3fd287a7 	.word	0x3fd287a7
 80129e8:	8b60c8b3 	.word	0x8b60c8b3
 80129ec:	3fc68a28 	.word	0x3fc68a28
 80129f0:	509f79fb 	.word	0x509f79fb
 80129f4:	3fd34413 	.word	0x3fd34413
 80129f8:	08015376 	.word	0x08015376
 80129fc:	0801538d 	.word	0x0801538d
 8012a00:	7ff00000 	.word	0x7ff00000
 8012a04:	08015372 	.word	0x08015372
 8012a08:	08015369 	.word	0x08015369
 8012a0c:	08015245 	.word	0x08015245
 8012a10:	3ff80000 	.word	0x3ff80000
 8012a14:	08015480 	.word	0x08015480
 8012a18:	080153e8 	.word	0x080153e8
 8012a1c:	2501      	movs	r5, #1
 8012a1e:	2300      	movs	r3, #0
 8012a20:	9306      	str	r3, [sp, #24]
 8012a22:	9508      	str	r5, [sp, #32]
 8012a24:	f04f 33ff 	mov.w	r3, #4294967295
 8012a28:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8012a2c:	2200      	movs	r2, #0
 8012a2e:	2312      	movs	r3, #18
 8012a30:	e7b0      	b.n	8012994 <_dtoa_r+0x26c>
 8012a32:	2301      	movs	r3, #1
 8012a34:	9308      	str	r3, [sp, #32]
 8012a36:	e7f5      	b.n	8012a24 <_dtoa_r+0x2fc>
 8012a38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012a3a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8012a3e:	e7b8      	b.n	80129b2 <_dtoa_r+0x28a>
 8012a40:	3101      	adds	r1, #1
 8012a42:	6041      	str	r1, [r0, #4]
 8012a44:	0052      	lsls	r2, r2, #1
 8012a46:	e7b8      	b.n	80129ba <_dtoa_r+0x292>
 8012a48:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012a4a:	9a01      	ldr	r2, [sp, #4]
 8012a4c:	601a      	str	r2, [r3, #0]
 8012a4e:	9b03      	ldr	r3, [sp, #12]
 8012a50:	2b0e      	cmp	r3, #14
 8012a52:	f200 809d 	bhi.w	8012b90 <_dtoa_r+0x468>
 8012a56:	2d00      	cmp	r5, #0
 8012a58:	f000 809a 	beq.w	8012b90 <_dtoa_r+0x468>
 8012a5c:	9b00      	ldr	r3, [sp, #0]
 8012a5e:	2b00      	cmp	r3, #0
 8012a60:	dd32      	ble.n	8012ac8 <_dtoa_r+0x3a0>
 8012a62:	4ab7      	ldr	r2, [pc, #732]	; (8012d40 <_dtoa_r+0x618>)
 8012a64:	f003 030f 	and.w	r3, r3, #15
 8012a68:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8012a6c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8012a70:	9b00      	ldr	r3, [sp, #0]
 8012a72:	05d8      	lsls	r0, r3, #23
 8012a74:	ea4f 1723 	mov.w	r7, r3, asr #4
 8012a78:	d516      	bpl.n	8012aa8 <_dtoa_r+0x380>
 8012a7a:	4bb2      	ldr	r3, [pc, #712]	; (8012d44 <_dtoa_r+0x61c>)
 8012a7c:	ec51 0b19 	vmov	r0, r1, d9
 8012a80:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8012a84:	f7ed fee2 	bl	800084c <__aeabi_ddiv>
 8012a88:	f007 070f 	and.w	r7, r7, #15
 8012a8c:	4682      	mov	sl, r0
 8012a8e:	468b      	mov	fp, r1
 8012a90:	2503      	movs	r5, #3
 8012a92:	4eac      	ldr	r6, [pc, #688]	; (8012d44 <_dtoa_r+0x61c>)
 8012a94:	b957      	cbnz	r7, 8012aac <_dtoa_r+0x384>
 8012a96:	4642      	mov	r2, r8
 8012a98:	464b      	mov	r3, r9
 8012a9a:	4650      	mov	r0, sl
 8012a9c:	4659      	mov	r1, fp
 8012a9e:	f7ed fed5 	bl	800084c <__aeabi_ddiv>
 8012aa2:	4682      	mov	sl, r0
 8012aa4:	468b      	mov	fp, r1
 8012aa6:	e028      	b.n	8012afa <_dtoa_r+0x3d2>
 8012aa8:	2502      	movs	r5, #2
 8012aaa:	e7f2      	b.n	8012a92 <_dtoa_r+0x36a>
 8012aac:	07f9      	lsls	r1, r7, #31
 8012aae:	d508      	bpl.n	8012ac2 <_dtoa_r+0x39a>
 8012ab0:	4640      	mov	r0, r8
 8012ab2:	4649      	mov	r1, r9
 8012ab4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8012ab8:	f7ed fd9e 	bl	80005f8 <__aeabi_dmul>
 8012abc:	3501      	adds	r5, #1
 8012abe:	4680      	mov	r8, r0
 8012ac0:	4689      	mov	r9, r1
 8012ac2:	107f      	asrs	r7, r7, #1
 8012ac4:	3608      	adds	r6, #8
 8012ac6:	e7e5      	b.n	8012a94 <_dtoa_r+0x36c>
 8012ac8:	f000 809b 	beq.w	8012c02 <_dtoa_r+0x4da>
 8012acc:	9b00      	ldr	r3, [sp, #0]
 8012ace:	4f9d      	ldr	r7, [pc, #628]	; (8012d44 <_dtoa_r+0x61c>)
 8012ad0:	425e      	negs	r6, r3
 8012ad2:	4b9b      	ldr	r3, [pc, #620]	; (8012d40 <_dtoa_r+0x618>)
 8012ad4:	f006 020f 	and.w	r2, r6, #15
 8012ad8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ae0:	ec51 0b19 	vmov	r0, r1, d9
 8012ae4:	f7ed fd88 	bl	80005f8 <__aeabi_dmul>
 8012ae8:	1136      	asrs	r6, r6, #4
 8012aea:	4682      	mov	sl, r0
 8012aec:	468b      	mov	fp, r1
 8012aee:	2300      	movs	r3, #0
 8012af0:	2502      	movs	r5, #2
 8012af2:	2e00      	cmp	r6, #0
 8012af4:	d17a      	bne.n	8012bec <_dtoa_r+0x4c4>
 8012af6:	2b00      	cmp	r3, #0
 8012af8:	d1d3      	bne.n	8012aa2 <_dtoa_r+0x37a>
 8012afa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012afc:	2b00      	cmp	r3, #0
 8012afe:	f000 8082 	beq.w	8012c06 <_dtoa_r+0x4de>
 8012b02:	4b91      	ldr	r3, [pc, #580]	; (8012d48 <_dtoa_r+0x620>)
 8012b04:	2200      	movs	r2, #0
 8012b06:	4650      	mov	r0, sl
 8012b08:	4659      	mov	r1, fp
 8012b0a:	f7ed ffe7 	bl	8000adc <__aeabi_dcmplt>
 8012b0e:	2800      	cmp	r0, #0
 8012b10:	d079      	beq.n	8012c06 <_dtoa_r+0x4de>
 8012b12:	9b03      	ldr	r3, [sp, #12]
 8012b14:	2b00      	cmp	r3, #0
 8012b16:	d076      	beq.n	8012c06 <_dtoa_r+0x4de>
 8012b18:	9b02      	ldr	r3, [sp, #8]
 8012b1a:	2b00      	cmp	r3, #0
 8012b1c:	dd36      	ble.n	8012b8c <_dtoa_r+0x464>
 8012b1e:	9b00      	ldr	r3, [sp, #0]
 8012b20:	4650      	mov	r0, sl
 8012b22:	4659      	mov	r1, fp
 8012b24:	1e5f      	subs	r7, r3, #1
 8012b26:	2200      	movs	r2, #0
 8012b28:	4b88      	ldr	r3, [pc, #544]	; (8012d4c <_dtoa_r+0x624>)
 8012b2a:	f7ed fd65 	bl	80005f8 <__aeabi_dmul>
 8012b2e:	9e02      	ldr	r6, [sp, #8]
 8012b30:	4682      	mov	sl, r0
 8012b32:	468b      	mov	fp, r1
 8012b34:	3501      	adds	r5, #1
 8012b36:	4628      	mov	r0, r5
 8012b38:	f7ed fcf4 	bl	8000524 <__aeabi_i2d>
 8012b3c:	4652      	mov	r2, sl
 8012b3e:	465b      	mov	r3, fp
 8012b40:	f7ed fd5a 	bl	80005f8 <__aeabi_dmul>
 8012b44:	4b82      	ldr	r3, [pc, #520]	; (8012d50 <_dtoa_r+0x628>)
 8012b46:	2200      	movs	r2, #0
 8012b48:	f7ed fba0 	bl	800028c <__adddf3>
 8012b4c:	46d0      	mov	r8, sl
 8012b4e:	46d9      	mov	r9, fp
 8012b50:	4682      	mov	sl, r0
 8012b52:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8012b56:	2e00      	cmp	r6, #0
 8012b58:	d158      	bne.n	8012c0c <_dtoa_r+0x4e4>
 8012b5a:	4b7e      	ldr	r3, [pc, #504]	; (8012d54 <_dtoa_r+0x62c>)
 8012b5c:	2200      	movs	r2, #0
 8012b5e:	4640      	mov	r0, r8
 8012b60:	4649      	mov	r1, r9
 8012b62:	f7ed fb91 	bl	8000288 <__aeabi_dsub>
 8012b66:	4652      	mov	r2, sl
 8012b68:	465b      	mov	r3, fp
 8012b6a:	4680      	mov	r8, r0
 8012b6c:	4689      	mov	r9, r1
 8012b6e:	f7ed ffd3 	bl	8000b18 <__aeabi_dcmpgt>
 8012b72:	2800      	cmp	r0, #0
 8012b74:	f040 8295 	bne.w	80130a2 <_dtoa_r+0x97a>
 8012b78:	4652      	mov	r2, sl
 8012b7a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8012b7e:	4640      	mov	r0, r8
 8012b80:	4649      	mov	r1, r9
 8012b82:	f7ed ffab 	bl	8000adc <__aeabi_dcmplt>
 8012b86:	2800      	cmp	r0, #0
 8012b88:	f040 8289 	bne.w	801309e <_dtoa_r+0x976>
 8012b8c:	ec5b ab19 	vmov	sl, fp, d9
 8012b90:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012b92:	2b00      	cmp	r3, #0
 8012b94:	f2c0 8148 	blt.w	8012e28 <_dtoa_r+0x700>
 8012b98:	9a00      	ldr	r2, [sp, #0]
 8012b9a:	2a0e      	cmp	r2, #14
 8012b9c:	f300 8144 	bgt.w	8012e28 <_dtoa_r+0x700>
 8012ba0:	4b67      	ldr	r3, [pc, #412]	; (8012d40 <_dtoa_r+0x618>)
 8012ba2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012ba6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8012baa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012bac:	2b00      	cmp	r3, #0
 8012bae:	f280 80d5 	bge.w	8012d5c <_dtoa_r+0x634>
 8012bb2:	9b03      	ldr	r3, [sp, #12]
 8012bb4:	2b00      	cmp	r3, #0
 8012bb6:	f300 80d1 	bgt.w	8012d5c <_dtoa_r+0x634>
 8012bba:	f040 826f 	bne.w	801309c <_dtoa_r+0x974>
 8012bbe:	4b65      	ldr	r3, [pc, #404]	; (8012d54 <_dtoa_r+0x62c>)
 8012bc0:	2200      	movs	r2, #0
 8012bc2:	4640      	mov	r0, r8
 8012bc4:	4649      	mov	r1, r9
 8012bc6:	f7ed fd17 	bl	80005f8 <__aeabi_dmul>
 8012bca:	4652      	mov	r2, sl
 8012bcc:	465b      	mov	r3, fp
 8012bce:	f7ed ff99 	bl	8000b04 <__aeabi_dcmpge>
 8012bd2:	9e03      	ldr	r6, [sp, #12]
 8012bd4:	4637      	mov	r7, r6
 8012bd6:	2800      	cmp	r0, #0
 8012bd8:	f040 8245 	bne.w	8013066 <_dtoa_r+0x93e>
 8012bdc:	9d01      	ldr	r5, [sp, #4]
 8012bde:	2331      	movs	r3, #49	; 0x31
 8012be0:	f805 3b01 	strb.w	r3, [r5], #1
 8012be4:	9b00      	ldr	r3, [sp, #0]
 8012be6:	3301      	adds	r3, #1
 8012be8:	9300      	str	r3, [sp, #0]
 8012bea:	e240      	b.n	801306e <_dtoa_r+0x946>
 8012bec:	07f2      	lsls	r2, r6, #31
 8012bee:	d505      	bpl.n	8012bfc <_dtoa_r+0x4d4>
 8012bf0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012bf4:	f7ed fd00 	bl	80005f8 <__aeabi_dmul>
 8012bf8:	3501      	adds	r5, #1
 8012bfa:	2301      	movs	r3, #1
 8012bfc:	1076      	asrs	r6, r6, #1
 8012bfe:	3708      	adds	r7, #8
 8012c00:	e777      	b.n	8012af2 <_dtoa_r+0x3ca>
 8012c02:	2502      	movs	r5, #2
 8012c04:	e779      	b.n	8012afa <_dtoa_r+0x3d2>
 8012c06:	9f00      	ldr	r7, [sp, #0]
 8012c08:	9e03      	ldr	r6, [sp, #12]
 8012c0a:	e794      	b.n	8012b36 <_dtoa_r+0x40e>
 8012c0c:	9901      	ldr	r1, [sp, #4]
 8012c0e:	4b4c      	ldr	r3, [pc, #304]	; (8012d40 <_dtoa_r+0x618>)
 8012c10:	4431      	add	r1, r6
 8012c12:	910d      	str	r1, [sp, #52]	; 0x34
 8012c14:	9908      	ldr	r1, [sp, #32]
 8012c16:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8012c1a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8012c1e:	2900      	cmp	r1, #0
 8012c20:	d043      	beq.n	8012caa <_dtoa_r+0x582>
 8012c22:	494d      	ldr	r1, [pc, #308]	; (8012d58 <_dtoa_r+0x630>)
 8012c24:	2000      	movs	r0, #0
 8012c26:	f7ed fe11 	bl	800084c <__aeabi_ddiv>
 8012c2a:	4652      	mov	r2, sl
 8012c2c:	465b      	mov	r3, fp
 8012c2e:	f7ed fb2b 	bl	8000288 <__aeabi_dsub>
 8012c32:	9d01      	ldr	r5, [sp, #4]
 8012c34:	4682      	mov	sl, r0
 8012c36:	468b      	mov	fp, r1
 8012c38:	4649      	mov	r1, r9
 8012c3a:	4640      	mov	r0, r8
 8012c3c:	f7ed ff8c 	bl	8000b58 <__aeabi_d2iz>
 8012c40:	4606      	mov	r6, r0
 8012c42:	f7ed fc6f 	bl	8000524 <__aeabi_i2d>
 8012c46:	4602      	mov	r2, r0
 8012c48:	460b      	mov	r3, r1
 8012c4a:	4640      	mov	r0, r8
 8012c4c:	4649      	mov	r1, r9
 8012c4e:	f7ed fb1b 	bl	8000288 <__aeabi_dsub>
 8012c52:	3630      	adds	r6, #48	; 0x30
 8012c54:	f805 6b01 	strb.w	r6, [r5], #1
 8012c58:	4652      	mov	r2, sl
 8012c5a:	465b      	mov	r3, fp
 8012c5c:	4680      	mov	r8, r0
 8012c5e:	4689      	mov	r9, r1
 8012c60:	f7ed ff3c 	bl	8000adc <__aeabi_dcmplt>
 8012c64:	2800      	cmp	r0, #0
 8012c66:	d163      	bne.n	8012d30 <_dtoa_r+0x608>
 8012c68:	4642      	mov	r2, r8
 8012c6a:	464b      	mov	r3, r9
 8012c6c:	4936      	ldr	r1, [pc, #216]	; (8012d48 <_dtoa_r+0x620>)
 8012c6e:	2000      	movs	r0, #0
 8012c70:	f7ed fb0a 	bl	8000288 <__aeabi_dsub>
 8012c74:	4652      	mov	r2, sl
 8012c76:	465b      	mov	r3, fp
 8012c78:	f7ed ff30 	bl	8000adc <__aeabi_dcmplt>
 8012c7c:	2800      	cmp	r0, #0
 8012c7e:	f040 80b5 	bne.w	8012dec <_dtoa_r+0x6c4>
 8012c82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012c84:	429d      	cmp	r5, r3
 8012c86:	d081      	beq.n	8012b8c <_dtoa_r+0x464>
 8012c88:	4b30      	ldr	r3, [pc, #192]	; (8012d4c <_dtoa_r+0x624>)
 8012c8a:	2200      	movs	r2, #0
 8012c8c:	4650      	mov	r0, sl
 8012c8e:	4659      	mov	r1, fp
 8012c90:	f7ed fcb2 	bl	80005f8 <__aeabi_dmul>
 8012c94:	4b2d      	ldr	r3, [pc, #180]	; (8012d4c <_dtoa_r+0x624>)
 8012c96:	4682      	mov	sl, r0
 8012c98:	468b      	mov	fp, r1
 8012c9a:	4640      	mov	r0, r8
 8012c9c:	4649      	mov	r1, r9
 8012c9e:	2200      	movs	r2, #0
 8012ca0:	f7ed fcaa 	bl	80005f8 <__aeabi_dmul>
 8012ca4:	4680      	mov	r8, r0
 8012ca6:	4689      	mov	r9, r1
 8012ca8:	e7c6      	b.n	8012c38 <_dtoa_r+0x510>
 8012caa:	4650      	mov	r0, sl
 8012cac:	4659      	mov	r1, fp
 8012cae:	f7ed fca3 	bl	80005f8 <__aeabi_dmul>
 8012cb2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012cb4:	9d01      	ldr	r5, [sp, #4]
 8012cb6:	930f      	str	r3, [sp, #60]	; 0x3c
 8012cb8:	4682      	mov	sl, r0
 8012cba:	468b      	mov	fp, r1
 8012cbc:	4649      	mov	r1, r9
 8012cbe:	4640      	mov	r0, r8
 8012cc0:	f7ed ff4a 	bl	8000b58 <__aeabi_d2iz>
 8012cc4:	4606      	mov	r6, r0
 8012cc6:	f7ed fc2d 	bl	8000524 <__aeabi_i2d>
 8012cca:	3630      	adds	r6, #48	; 0x30
 8012ccc:	4602      	mov	r2, r0
 8012cce:	460b      	mov	r3, r1
 8012cd0:	4640      	mov	r0, r8
 8012cd2:	4649      	mov	r1, r9
 8012cd4:	f7ed fad8 	bl	8000288 <__aeabi_dsub>
 8012cd8:	f805 6b01 	strb.w	r6, [r5], #1
 8012cdc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012cde:	429d      	cmp	r5, r3
 8012ce0:	4680      	mov	r8, r0
 8012ce2:	4689      	mov	r9, r1
 8012ce4:	f04f 0200 	mov.w	r2, #0
 8012ce8:	d124      	bne.n	8012d34 <_dtoa_r+0x60c>
 8012cea:	4b1b      	ldr	r3, [pc, #108]	; (8012d58 <_dtoa_r+0x630>)
 8012cec:	4650      	mov	r0, sl
 8012cee:	4659      	mov	r1, fp
 8012cf0:	f7ed facc 	bl	800028c <__adddf3>
 8012cf4:	4602      	mov	r2, r0
 8012cf6:	460b      	mov	r3, r1
 8012cf8:	4640      	mov	r0, r8
 8012cfa:	4649      	mov	r1, r9
 8012cfc:	f7ed ff0c 	bl	8000b18 <__aeabi_dcmpgt>
 8012d00:	2800      	cmp	r0, #0
 8012d02:	d173      	bne.n	8012dec <_dtoa_r+0x6c4>
 8012d04:	4652      	mov	r2, sl
 8012d06:	465b      	mov	r3, fp
 8012d08:	4913      	ldr	r1, [pc, #76]	; (8012d58 <_dtoa_r+0x630>)
 8012d0a:	2000      	movs	r0, #0
 8012d0c:	f7ed fabc 	bl	8000288 <__aeabi_dsub>
 8012d10:	4602      	mov	r2, r0
 8012d12:	460b      	mov	r3, r1
 8012d14:	4640      	mov	r0, r8
 8012d16:	4649      	mov	r1, r9
 8012d18:	f7ed fee0 	bl	8000adc <__aeabi_dcmplt>
 8012d1c:	2800      	cmp	r0, #0
 8012d1e:	f43f af35 	beq.w	8012b8c <_dtoa_r+0x464>
 8012d22:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8012d24:	1e6b      	subs	r3, r5, #1
 8012d26:	930f      	str	r3, [sp, #60]	; 0x3c
 8012d28:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8012d2c:	2b30      	cmp	r3, #48	; 0x30
 8012d2e:	d0f8      	beq.n	8012d22 <_dtoa_r+0x5fa>
 8012d30:	9700      	str	r7, [sp, #0]
 8012d32:	e049      	b.n	8012dc8 <_dtoa_r+0x6a0>
 8012d34:	4b05      	ldr	r3, [pc, #20]	; (8012d4c <_dtoa_r+0x624>)
 8012d36:	f7ed fc5f 	bl	80005f8 <__aeabi_dmul>
 8012d3a:	4680      	mov	r8, r0
 8012d3c:	4689      	mov	r9, r1
 8012d3e:	e7bd      	b.n	8012cbc <_dtoa_r+0x594>
 8012d40:	08015480 	.word	0x08015480
 8012d44:	08015458 	.word	0x08015458
 8012d48:	3ff00000 	.word	0x3ff00000
 8012d4c:	40240000 	.word	0x40240000
 8012d50:	401c0000 	.word	0x401c0000
 8012d54:	40140000 	.word	0x40140000
 8012d58:	3fe00000 	.word	0x3fe00000
 8012d5c:	9d01      	ldr	r5, [sp, #4]
 8012d5e:	4656      	mov	r6, sl
 8012d60:	465f      	mov	r7, fp
 8012d62:	4642      	mov	r2, r8
 8012d64:	464b      	mov	r3, r9
 8012d66:	4630      	mov	r0, r6
 8012d68:	4639      	mov	r1, r7
 8012d6a:	f7ed fd6f 	bl	800084c <__aeabi_ddiv>
 8012d6e:	f7ed fef3 	bl	8000b58 <__aeabi_d2iz>
 8012d72:	4682      	mov	sl, r0
 8012d74:	f7ed fbd6 	bl	8000524 <__aeabi_i2d>
 8012d78:	4642      	mov	r2, r8
 8012d7a:	464b      	mov	r3, r9
 8012d7c:	f7ed fc3c 	bl	80005f8 <__aeabi_dmul>
 8012d80:	4602      	mov	r2, r0
 8012d82:	460b      	mov	r3, r1
 8012d84:	4630      	mov	r0, r6
 8012d86:	4639      	mov	r1, r7
 8012d88:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8012d8c:	f7ed fa7c 	bl	8000288 <__aeabi_dsub>
 8012d90:	f805 6b01 	strb.w	r6, [r5], #1
 8012d94:	9e01      	ldr	r6, [sp, #4]
 8012d96:	9f03      	ldr	r7, [sp, #12]
 8012d98:	1bae      	subs	r6, r5, r6
 8012d9a:	42b7      	cmp	r7, r6
 8012d9c:	4602      	mov	r2, r0
 8012d9e:	460b      	mov	r3, r1
 8012da0:	d135      	bne.n	8012e0e <_dtoa_r+0x6e6>
 8012da2:	f7ed fa73 	bl	800028c <__adddf3>
 8012da6:	4642      	mov	r2, r8
 8012da8:	464b      	mov	r3, r9
 8012daa:	4606      	mov	r6, r0
 8012dac:	460f      	mov	r7, r1
 8012dae:	f7ed feb3 	bl	8000b18 <__aeabi_dcmpgt>
 8012db2:	b9d0      	cbnz	r0, 8012dea <_dtoa_r+0x6c2>
 8012db4:	4642      	mov	r2, r8
 8012db6:	464b      	mov	r3, r9
 8012db8:	4630      	mov	r0, r6
 8012dba:	4639      	mov	r1, r7
 8012dbc:	f7ed fe84 	bl	8000ac8 <__aeabi_dcmpeq>
 8012dc0:	b110      	cbz	r0, 8012dc8 <_dtoa_r+0x6a0>
 8012dc2:	f01a 0f01 	tst.w	sl, #1
 8012dc6:	d110      	bne.n	8012dea <_dtoa_r+0x6c2>
 8012dc8:	4620      	mov	r0, r4
 8012dca:	ee18 1a10 	vmov	r1, s16
 8012dce:	f000 fc23 	bl	8013618 <_Bfree>
 8012dd2:	2300      	movs	r3, #0
 8012dd4:	9800      	ldr	r0, [sp, #0]
 8012dd6:	702b      	strb	r3, [r5, #0]
 8012dd8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012dda:	3001      	adds	r0, #1
 8012ddc:	6018      	str	r0, [r3, #0]
 8012dde:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012de0:	2b00      	cmp	r3, #0
 8012de2:	f43f acf1 	beq.w	80127c8 <_dtoa_r+0xa0>
 8012de6:	601d      	str	r5, [r3, #0]
 8012de8:	e4ee      	b.n	80127c8 <_dtoa_r+0xa0>
 8012dea:	9f00      	ldr	r7, [sp, #0]
 8012dec:	462b      	mov	r3, r5
 8012dee:	461d      	mov	r5, r3
 8012df0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012df4:	2a39      	cmp	r2, #57	; 0x39
 8012df6:	d106      	bne.n	8012e06 <_dtoa_r+0x6de>
 8012df8:	9a01      	ldr	r2, [sp, #4]
 8012dfa:	429a      	cmp	r2, r3
 8012dfc:	d1f7      	bne.n	8012dee <_dtoa_r+0x6c6>
 8012dfe:	9901      	ldr	r1, [sp, #4]
 8012e00:	2230      	movs	r2, #48	; 0x30
 8012e02:	3701      	adds	r7, #1
 8012e04:	700a      	strb	r2, [r1, #0]
 8012e06:	781a      	ldrb	r2, [r3, #0]
 8012e08:	3201      	adds	r2, #1
 8012e0a:	701a      	strb	r2, [r3, #0]
 8012e0c:	e790      	b.n	8012d30 <_dtoa_r+0x608>
 8012e0e:	4ba6      	ldr	r3, [pc, #664]	; (80130a8 <_dtoa_r+0x980>)
 8012e10:	2200      	movs	r2, #0
 8012e12:	f7ed fbf1 	bl	80005f8 <__aeabi_dmul>
 8012e16:	2200      	movs	r2, #0
 8012e18:	2300      	movs	r3, #0
 8012e1a:	4606      	mov	r6, r0
 8012e1c:	460f      	mov	r7, r1
 8012e1e:	f7ed fe53 	bl	8000ac8 <__aeabi_dcmpeq>
 8012e22:	2800      	cmp	r0, #0
 8012e24:	d09d      	beq.n	8012d62 <_dtoa_r+0x63a>
 8012e26:	e7cf      	b.n	8012dc8 <_dtoa_r+0x6a0>
 8012e28:	9a08      	ldr	r2, [sp, #32]
 8012e2a:	2a00      	cmp	r2, #0
 8012e2c:	f000 80d7 	beq.w	8012fde <_dtoa_r+0x8b6>
 8012e30:	9a06      	ldr	r2, [sp, #24]
 8012e32:	2a01      	cmp	r2, #1
 8012e34:	f300 80ba 	bgt.w	8012fac <_dtoa_r+0x884>
 8012e38:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012e3a:	2a00      	cmp	r2, #0
 8012e3c:	f000 80b2 	beq.w	8012fa4 <_dtoa_r+0x87c>
 8012e40:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8012e44:	9e07      	ldr	r6, [sp, #28]
 8012e46:	9d04      	ldr	r5, [sp, #16]
 8012e48:	9a04      	ldr	r2, [sp, #16]
 8012e4a:	441a      	add	r2, r3
 8012e4c:	9204      	str	r2, [sp, #16]
 8012e4e:	9a05      	ldr	r2, [sp, #20]
 8012e50:	2101      	movs	r1, #1
 8012e52:	441a      	add	r2, r3
 8012e54:	4620      	mov	r0, r4
 8012e56:	9205      	str	r2, [sp, #20]
 8012e58:	f000 fc96 	bl	8013788 <__i2b>
 8012e5c:	4607      	mov	r7, r0
 8012e5e:	2d00      	cmp	r5, #0
 8012e60:	dd0c      	ble.n	8012e7c <_dtoa_r+0x754>
 8012e62:	9b05      	ldr	r3, [sp, #20]
 8012e64:	2b00      	cmp	r3, #0
 8012e66:	dd09      	ble.n	8012e7c <_dtoa_r+0x754>
 8012e68:	42ab      	cmp	r3, r5
 8012e6a:	9a04      	ldr	r2, [sp, #16]
 8012e6c:	bfa8      	it	ge
 8012e6e:	462b      	movge	r3, r5
 8012e70:	1ad2      	subs	r2, r2, r3
 8012e72:	9204      	str	r2, [sp, #16]
 8012e74:	9a05      	ldr	r2, [sp, #20]
 8012e76:	1aed      	subs	r5, r5, r3
 8012e78:	1ad3      	subs	r3, r2, r3
 8012e7a:	9305      	str	r3, [sp, #20]
 8012e7c:	9b07      	ldr	r3, [sp, #28]
 8012e7e:	b31b      	cbz	r3, 8012ec8 <_dtoa_r+0x7a0>
 8012e80:	9b08      	ldr	r3, [sp, #32]
 8012e82:	2b00      	cmp	r3, #0
 8012e84:	f000 80af 	beq.w	8012fe6 <_dtoa_r+0x8be>
 8012e88:	2e00      	cmp	r6, #0
 8012e8a:	dd13      	ble.n	8012eb4 <_dtoa_r+0x78c>
 8012e8c:	4639      	mov	r1, r7
 8012e8e:	4632      	mov	r2, r6
 8012e90:	4620      	mov	r0, r4
 8012e92:	f000 fd39 	bl	8013908 <__pow5mult>
 8012e96:	ee18 2a10 	vmov	r2, s16
 8012e9a:	4601      	mov	r1, r0
 8012e9c:	4607      	mov	r7, r0
 8012e9e:	4620      	mov	r0, r4
 8012ea0:	f000 fc88 	bl	80137b4 <__multiply>
 8012ea4:	ee18 1a10 	vmov	r1, s16
 8012ea8:	4680      	mov	r8, r0
 8012eaa:	4620      	mov	r0, r4
 8012eac:	f000 fbb4 	bl	8013618 <_Bfree>
 8012eb0:	ee08 8a10 	vmov	s16, r8
 8012eb4:	9b07      	ldr	r3, [sp, #28]
 8012eb6:	1b9a      	subs	r2, r3, r6
 8012eb8:	d006      	beq.n	8012ec8 <_dtoa_r+0x7a0>
 8012eba:	ee18 1a10 	vmov	r1, s16
 8012ebe:	4620      	mov	r0, r4
 8012ec0:	f000 fd22 	bl	8013908 <__pow5mult>
 8012ec4:	ee08 0a10 	vmov	s16, r0
 8012ec8:	2101      	movs	r1, #1
 8012eca:	4620      	mov	r0, r4
 8012ecc:	f000 fc5c 	bl	8013788 <__i2b>
 8012ed0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012ed2:	2b00      	cmp	r3, #0
 8012ed4:	4606      	mov	r6, r0
 8012ed6:	f340 8088 	ble.w	8012fea <_dtoa_r+0x8c2>
 8012eda:	461a      	mov	r2, r3
 8012edc:	4601      	mov	r1, r0
 8012ede:	4620      	mov	r0, r4
 8012ee0:	f000 fd12 	bl	8013908 <__pow5mult>
 8012ee4:	9b06      	ldr	r3, [sp, #24]
 8012ee6:	2b01      	cmp	r3, #1
 8012ee8:	4606      	mov	r6, r0
 8012eea:	f340 8081 	ble.w	8012ff0 <_dtoa_r+0x8c8>
 8012eee:	f04f 0800 	mov.w	r8, #0
 8012ef2:	6933      	ldr	r3, [r6, #16]
 8012ef4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8012ef8:	6918      	ldr	r0, [r3, #16]
 8012efa:	f000 fbf5 	bl	80136e8 <__hi0bits>
 8012efe:	f1c0 0020 	rsb	r0, r0, #32
 8012f02:	9b05      	ldr	r3, [sp, #20]
 8012f04:	4418      	add	r0, r3
 8012f06:	f010 001f 	ands.w	r0, r0, #31
 8012f0a:	f000 8092 	beq.w	8013032 <_dtoa_r+0x90a>
 8012f0e:	f1c0 0320 	rsb	r3, r0, #32
 8012f12:	2b04      	cmp	r3, #4
 8012f14:	f340 808a 	ble.w	801302c <_dtoa_r+0x904>
 8012f18:	f1c0 001c 	rsb	r0, r0, #28
 8012f1c:	9b04      	ldr	r3, [sp, #16]
 8012f1e:	4403      	add	r3, r0
 8012f20:	9304      	str	r3, [sp, #16]
 8012f22:	9b05      	ldr	r3, [sp, #20]
 8012f24:	4403      	add	r3, r0
 8012f26:	4405      	add	r5, r0
 8012f28:	9305      	str	r3, [sp, #20]
 8012f2a:	9b04      	ldr	r3, [sp, #16]
 8012f2c:	2b00      	cmp	r3, #0
 8012f2e:	dd07      	ble.n	8012f40 <_dtoa_r+0x818>
 8012f30:	ee18 1a10 	vmov	r1, s16
 8012f34:	461a      	mov	r2, r3
 8012f36:	4620      	mov	r0, r4
 8012f38:	f000 fd40 	bl	80139bc <__lshift>
 8012f3c:	ee08 0a10 	vmov	s16, r0
 8012f40:	9b05      	ldr	r3, [sp, #20]
 8012f42:	2b00      	cmp	r3, #0
 8012f44:	dd05      	ble.n	8012f52 <_dtoa_r+0x82a>
 8012f46:	4631      	mov	r1, r6
 8012f48:	461a      	mov	r2, r3
 8012f4a:	4620      	mov	r0, r4
 8012f4c:	f000 fd36 	bl	80139bc <__lshift>
 8012f50:	4606      	mov	r6, r0
 8012f52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012f54:	2b00      	cmp	r3, #0
 8012f56:	d06e      	beq.n	8013036 <_dtoa_r+0x90e>
 8012f58:	ee18 0a10 	vmov	r0, s16
 8012f5c:	4631      	mov	r1, r6
 8012f5e:	f000 fd9d 	bl	8013a9c <__mcmp>
 8012f62:	2800      	cmp	r0, #0
 8012f64:	da67      	bge.n	8013036 <_dtoa_r+0x90e>
 8012f66:	9b00      	ldr	r3, [sp, #0]
 8012f68:	3b01      	subs	r3, #1
 8012f6a:	ee18 1a10 	vmov	r1, s16
 8012f6e:	9300      	str	r3, [sp, #0]
 8012f70:	220a      	movs	r2, #10
 8012f72:	2300      	movs	r3, #0
 8012f74:	4620      	mov	r0, r4
 8012f76:	f000 fb71 	bl	801365c <__multadd>
 8012f7a:	9b08      	ldr	r3, [sp, #32]
 8012f7c:	ee08 0a10 	vmov	s16, r0
 8012f80:	2b00      	cmp	r3, #0
 8012f82:	f000 81b1 	beq.w	80132e8 <_dtoa_r+0xbc0>
 8012f86:	2300      	movs	r3, #0
 8012f88:	4639      	mov	r1, r7
 8012f8a:	220a      	movs	r2, #10
 8012f8c:	4620      	mov	r0, r4
 8012f8e:	f000 fb65 	bl	801365c <__multadd>
 8012f92:	9b02      	ldr	r3, [sp, #8]
 8012f94:	2b00      	cmp	r3, #0
 8012f96:	4607      	mov	r7, r0
 8012f98:	f300 808e 	bgt.w	80130b8 <_dtoa_r+0x990>
 8012f9c:	9b06      	ldr	r3, [sp, #24]
 8012f9e:	2b02      	cmp	r3, #2
 8012fa0:	dc51      	bgt.n	8013046 <_dtoa_r+0x91e>
 8012fa2:	e089      	b.n	80130b8 <_dtoa_r+0x990>
 8012fa4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012fa6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8012faa:	e74b      	b.n	8012e44 <_dtoa_r+0x71c>
 8012fac:	9b03      	ldr	r3, [sp, #12]
 8012fae:	1e5e      	subs	r6, r3, #1
 8012fb0:	9b07      	ldr	r3, [sp, #28]
 8012fb2:	42b3      	cmp	r3, r6
 8012fb4:	bfbf      	itttt	lt
 8012fb6:	9b07      	ldrlt	r3, [sp, #28]
 8012fb8:	9607      	strlt	r6, [sp, #28]
 8012fba:	1af2      	sublt	r2, r6, r3
 8012fbc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8012fbe:	bfb6      	itet	lt
 8012fc0:	189b      	addlt	r3, r3, r2
 8012fc2:	1b9e      	subge	r6, r3, r6
 8012fc4:	930a      	strlt	r3, [sp, #40]	; 0x28
 8012fc6:	9b03      	ldr	r3, [sp, #12]
 8012fc8:	bfb8      	it	lt
 8012fca:	2600      	movlt	r6, #0
 8012fcc:	2b00      	cmp	r3, #0
 8012fce:	bfb7      	itett	lt
 8012fd0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8012fd4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8012fd8:	1a9d      	sublt	r5, r3, r2
 8012fda:	2300      	movlt	r3, #0
 8012fdc:	e734      	b.n	8012e48 <_dtoa_r+0x720>
 8012fde:	9e07      	ldr	r6, [sp, #28]
 8012fe0:	9d04      	ldr	r5, [sp, #16]
 8012fe2:	9f08      	ldr	r7, [sp, #32]
 8012fe4:	e73b      	b.n	8012e5e <_dtoa_r+0x736>
 8012fe6:	9a07      	ldr	r2, [sp, #28]
 8012fe8:	e767      	b.n	8012eba <_dtoa_r+0x792>
 8012fea:	9b06      	ldr	r3, [sp, #24]
 8012fec:	2b01      	cmp	r3, #1
 8012fee:	dc18      	bgt.n	8013022 <_dtoa_r+0x8fa>
 8012ff0:	f1ba 0f00 	cmp.w	sl, #0
 8012ff4:	d115      	bne.n	8013022 <_dtoa_r+0x8fa>
 8012ff6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8012ffa:	b993      	cbnz	r3, 8013022 <_dtoa_r+0x8fa>
 8012ffc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8013000:	0d1b      	lsrs	r3, r3, #20
 8013002:	051b      	lsls	r3, r3, #20
 8013004:	b183      	cbz	r3, 8013028 <_dtoa_r+0x900>
 8013006:	9b04      	ldr	r3, [sp, #16]
 8013008:	3301      	adds	r3, #1
 801300a:	9304      	str	r3, [sp, #16]
 801300c:	9b05      	ldr	r3, [sp, #20]
 801300e:	3301      	adds	r3, #1
 8013010:	9305      	str	r3, [sp, #20]
 8013012:	f04f 0801 	mov.w	r8, #1
 8013016:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013018:	2b00      	cmp	r3, #0
 801301a:	f47f af6a 	bne.w	8012ef2 <_dtoa_r+0x7ca>
 801301e:	2001      	movs	r0, #1
 8013020:	e76f      	b.n	8012f02 <_dtoa_r+0x7da>
 8013022:	f04f 0800 	mov.w	r8, #0
 8013026:	e7f6      	b.n	8013016 <_dtoa_r+0x8ee>
 8013028:	4698      	mov	r8, r3
 801302a:	e7f4      	b.n	8013016 <_dtoa_r+0x8ee>
 801302c:	f43f af7d 	beq.w	8012f2a <_dtoa_r+0x802>
 8013030:	4618      	mov	r0, r3
 8013032:	301c      	adds	r0, #28
 8013034:	e772      	b.n	8012f1c <_dtoa_r+0x7f4>
 8013036:	9b03      	ldr	r3, [sp, #12]
 8013038:	2b00      	cmp	r3, #0
 801303a:	dc37      	bgt.n	80130ac <_dtoa_r+0x984>
 801303c:	9b06      	ldr	r3, [sp, #24]
 801303e:	2b02      	cmp	r3, #2
 8013040:	dd34      	ble.n	80130ac <_dtoa_r+0x984>
 8013042:	9b03      	ldr	r3, [sp, #12]
 8013044:	9302      	str	r3, [sp, #8]
 8013046:	9b02      	ldr	r3, [sp, #8]
 8013048:	b96b      	cbnz	r3, 8013066 <_dtoa_r+0x93e>
 801304a:	4631      	mov	r1, r6
 801304c:	2205      	movs	r2, #5
 801304e:	4620      	mov	r0, r4
 8013050:	f000 fb04 	bl	801365c <__multadd>
 8013054:	4601      	mov	r1, r0
 8013056:	4606      	mov	r6, r0
 8013058:	ee18 0a10 	vmov	r0, s16
 801305c:	f000 fd1e 	bl	8013a9c <__mcmp>
 8013060:	2800      	cmp	r0, #0
 8013062:	f73f adbb 	bgt.w	8012bdc <_dtoa_r+0x4b4>
 8013066:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013068:	9d01      	ldr	r5, [sp, #4]
 801306a:	43db      	mvns	r3, r3
 801306c:	9300      	str	r3, [sp, #0]
 801306e:	f04f 0800 	mov.w	r8, #0
 8013072:	4631      	mov	r1, r6
 8013074:	4620      	mov	r0, r4
 8013076:	f000 facf 	bl	8013618 <_Bfree>
 801307a:	2f00      	cmp	r7, #0
 801307c:	f43f aea4 	beq.w	8012dc8 <_dtoa_r+0x6a0>
 8013080:	f1b8 0f00 	cmp.w	r8, #0
 8013084:	d005      	beq.n	8013092 <_dtoa_r+0x96a>
 8013086:	45b8      	cmp	r8, r7
 8013088:	d003      	beq.n	8013092 <_dtoa_r+0x96a>
 801308a:	4641      	mov	r1, r8
 801308c:	4620      	mov	r0, r4
 801308e:	f000 fac3 	bl	8013618 <_Bfree>
 8013092:	4639      	mov	r1, r7
 8013094:	4620      	mov	r0, r4
 8013096:	f000 fabf 	bl	8013618 <_Bfree>
 801309a:	e695      	b.n	8012dc8 <_dtoa_r+0x6a0>
 801309c:	2600      	movs	r6, #0
 801309e:	4637      	mov	r7, r6
 80130a0:	e7e1      	b.n	8013066 <_dtoa_r+0x93e>
 80130a2:	9700      	str	r7, [sp, #0]
 80130a4:	4637      	mov	r7, r6
 80130a6:	e599      	b.n	8012bdc <_dtoa_r+0x4b4>
 80130a8:	40240000 	.word	0x40240000
 80130ac:	9b08      	ldr	r3, [sp, #32]
 80130ae:	2b00      	cmp	r3, #0
 80130b0:	f000 80ca 	beq.w	8013248 <_dtoa_r+0xb20>
 80130b4:	9b03      	ldr	r3, [sp, #12]
 80130b6:	9302      	str	r3, [sp, #8]
 80130b8:	2d00      	cmp	r5, #0
 80130ba:	dd05      	ble.n	80130c8 <_dtoa_r+0x9a0>
 80130bc:	4639      	mov	r1, r7
 80130be:	462a      	mov	r2, r5
 80130c0:	4620      	mov	r0, r4
 80130c2:	f000 fc7b 	bl	80139bc <__lshift>
 80130c6:	4607      	mov	r7, r0
 80130c8:	f1b8 0f00 	cmp.w	r8, #0
 80130cc:	d05b      	beq.n	8013186 <_dtoa_r+0xa5e>
 80130ce:	6879      	ldr	r1, [r7, #4]
 80130d0:	4620      	mov	r0, r4
 80130d2:	f000 fa61 	bl	8013598 <_Balloc>
 80130d6:	4605      	mov	r5, r0
 80130d8:	b928      	cbnz	r0, 80130e6 <_dtoa_r+0x9be>
 80130da:	4b87      	ldr	r3, [pc, #540]	; (80132f8 <_dtoa_r+0xbd0>)
 80130dc:	4602      	mov	r2, r0
 80130de:	f240 21ea 	movw	r1, #746	; 0x2ea
 80130e2:	f7ff bb3b 	b.w	801275c <_dtoa_r+0x34>
 80130e6:	693a      	ldr	r2, [r7, #16]
 80130e8:	3202      	adds	r2, #2
 80130ea:	0092      	lsls	r2, r2, #2
 80130ec:	f107 010c 	add.w	r1, r7, #12
 80130f0:	300c      	adds	r0, #12
 80130f2:	f7fe f9c3 	bl	801147c <memcpy>
 80130f6:	2201      	movs	r2, #1
 80130f8:	4629      	mov	r1, r5
 80130fa:	4620      	mov	r0, r4
 80130fc:	f000 fc5e 	bl	80139bc <__lshift>
 8013100:	9b01      	ldr	r3, [sp, #4]
 8013102:	f103 0901 	add.w	r9, r3, #1
 8013106:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801310a:	4413      	add	r3, r2
 801310c:	9305      	str	r3, [sp, #20]
 801310e:	f00a 0301 	and.w	r3, sl, #1
 8013112:	46b8      	mov	r8, r7
 8013114:	9304      	str	r3, [sp, #16]
 8013116:	4607      	mov	r7, r0
 8013118:	4631      	mov	r1, r6
 801311a:	ee18 0a10 	vmov	r0, s16
 801311e:	f7ff fa75 	bl	801260c <quorem>
 8013122:	4641      	mov	r1, r8
 8013124:	9002      	str	r0, [sp, #8]
 8013126:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801312a:	ee18 0a10 	vmov	r0, s16
 801312e:	f000 fcb5 	bl	8013a9c <__mcmp>
 8013132:	463a      	mov	r2, r7
 8013134:	9003      	str	r0, [sp, #12]
 8013136:	4631      	mov	r1, r6
 8013138:	4620      	mov	r0, r4
 801313a:	f000 fccb 	bl	8013ad4 <__mdiff>
 801313e:	68c2      	ldr	r2, [r0, #12]
 8013140:	f109 3bff 	add.w	fp, r9, #4294967295
 8013144:	4605      	mov	r5, r0
 8013146:	bb02      	cbnz	r2, 801318a <_dtoa_r+0xa62>
 8013148:	4601      	mov	r1, r0
 801314a:	ee18 0a10 	vmov	r0, s16
 801314e:	f000 fca5 	bl	8013a9c <__mcmp>
 8013152:	4602      	mov	r2, r0
 8013154:	4629      	mov	r1, r5
 8013156:	4620      	mov	r0, r4
 8013158:	9207      	str	r2, [sp, #28]
 801315a:	f000 fa5d 	bl	8013618 <_Bfree>
 801315e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8013162:	ea43 0102 	orr.w	r1, r3, r2
 8013166:	9b04      	ldr	r3, [sp, #16]
 8013168:	430b      	orrs	r3, r1
 801316a:	464d      	mov	r5, r9
 801316c:	d10f      	bne.n	801318e <_dtoa_r+0xa66>
 801316e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8013172:	d02a      	beq.n	80131ca <_dtoa_r+0xaa2>
 8013174:	9b03      	ldr	r3, [sp, #12]
 8013176:	2b00      	cmp	r3, #0
 8013178:	dd02      	ble.n	8013180 <_dtoa_r+0xa58>
 801317a:	9b02      	ldr	r3, [sp, #8]
 801317c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8013180:	f88b a000 	strb.w	sl, [fp]
 8013184:	e775      	b.n	8013072 <_dtoa_r+0x94a>
 8013186:	4638      	mov	r0, r7
 8013188:	e7ba      	b.n	8013100 <_dtoa_r+0x9d8>
 801318a:	2201      	movs	r2, #1
 801318c:	e7e2      	b.n	8013154 <_dtoa_r+0xa2c>
 801318e:	9b03      	ldr	r3, [sp, #12]
 8013190:	2b00      	cmp	r3, #0
 8013192:	db04      	blt.n	801319e <_dtoa_r+0xa76>
 8013194:	9906      	ldr	r1, [sp, #24]
 8013196:	430b      	orrs	r3, r1
 8013198:	9904      	ldr	r1, [sp, #16]
 801319a:	430b      	orrs	r3, r1
 801319c:	d122      	bne.n	80131e4 <_dtoa_r+0xabc>
 801319e:	2a00      	cmp	r2, #0
 80131a0:	ddee      	ble.n	8013180 <_dtoa_r+0xa58>
 80131a2:	ee18 1a10 	vmov	r1, s16
 80131a6:	2201      	movs	r2, #1
 80131a8:	4620      	mov	r0, r4
 80131aa:	f000 fc07 	bl	80139bc <__lshift>
 80131ae:	4631      	mov	r1, r6
 80131b0:	ee08 0a10 	vmov	s16, r0
 80131b4:	f000 fc72 	bl	8013a9c <__mcmp>
 80131b8:	2800      	cmp	r0, #0
 80131ba:	dc03      	bgt.n	80131c4 <_dtoa_r+0xa9c>
 80131bc:	d1e0      	bne.n	8013180 <_dtoa_r+0xa58>
 80131be:	f01a 0f01 	tst.w	sl, #1
 80131c2:	d0dd      	beq.n	8013180 <_dtoa_r+0xa58>
 80131c4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80131c8:	d1d7      	bne.n	801317a <_dtoa_r+0xa52>
 80131ca:	2339      	movs	r3, #57	; 0x39
 80131cc:	f88b 3000 	strb.w	r3, [fp]
 80131d0:	462b      	mov	r3, r5
 80131d2:	461d      	mov	r5, r3
 80131d4:	3b01      	subs	r3, #1
 80131d6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80131da:	2a39      	cmp	r2, #57	; 0x39
 80131dc:	d071      	beq.n	80132c2 <_dtoa_r+0xb9a>
 80131de:	3201      	adds	r2, #1
 80131e0:	701a      	strb	r2, [r3, #0]
 80131e2:	e746      	b.n	8013072 <_dtoa_r+0x94a>
 80131e4:	2a00      	cmp	r2, #0
 80131e6:	dd07      	ble.n	80131f8 <_dtoa_r+0xad0>
 80131e8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80131ec:	d0ed      	beq.n	80131ca <_dtoa_r+0xaa2>
 80131ee:	f10a 0301 	add.w	r3, sl, #1
 80131f2:	f88b 3000 	strb.w	r3, [fp]
 80131f6:	e73c      	b.n	8013072 <_dtoa_r+0x94a>
 80131f8:	9b05      	ldr	r3, [sp, #20]
 80131fa:	f809 ac01 	strb.w	sl, [r9, #-1]
 80131fe:	4599      	cmp	r9, r3
 8013200:	d047      	beq.n	8013292 <_dtoa_r+0xb6a>
 8013202:	ee18 1a10 	vmov	r1, s16
 8013206:	2300      	movs	r3, #0
 8013208:	220a      	movs	r2, #10
 801320a:	4620      	mov	r0, r4
 801320c:	f000 fa26 	bl	801365c <__multadd>
 8013210:	45b8      	cmp	r8, r7
 8013212:	ee08 0a10 	vmov	s16, r0
 8013216:	f04f 0300 	mov.w	r3, #0
 801321a:	f04f 020a 	mov.w	r2, #10
 801321e:	4641      	mov	r1, r8
 8013220:	4620      	mov	r0, r4
 8013222:	d106      	bne.n	8013232 <_dtoa_r+0xb0a>
 8013224:	f000 fa1a 	bl	801365c <__multadd>
 8013228:	4680      	mov	r8, r0
 801322a:	4607      	mov	r7, r0
 801322c:	f109 0901 	add.w	r9, r9, #1
 8013230:	e772      	b.n	8013118 <_dtoa_r+0x9f0>
 8013232:	f000 fa13 	bl	801365c <__multadd>
 8013236:	4639      	mov	r1, r7
 8013238:	4680      	mov	r8, r0
 801323a:	2300      	movs	r3, #0
 801323c:	220a      	movs	r2, #10
 801323e:	4620      	mov	r0, r4
 8013240:	f000 fa0c 	bl	801365c <__multadd>
 8013244:	4607      	mov	r7, r0
 8013246:	e7f1      	b.n	801322c <_dtoa_r+0xb04>
 8013248:	9b03      	ldr	r3, [sp, #12]
 801324a:	9302      	str	r3, [sp, #8]
 801324c:	9d01      	ldr	r5, [sp, #4]
 801324e:	ee18 0a10 	vmov	r0, s16
 8013252:	4631      	mov	r1, r6
 8013254:	f7ff f9da 	bl	801260c <quorem>
 8013258:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801325c:	9b01      	ldr	r3, [sp, #4]
 801325e:	f805 ab01 	strb.w	sl, [r5], #1
 8013262:	1aea      	subs	r2, r5, r3
 8013264:	9b02      	ldr	r3, [sp, #8]
 8013266:	4293      	cmp	r3, r2
 8013268:	dd09      	ble.n	801327e <_dtoa_r+0xb56>
 801326a:	ee18 1a10 	vmov	r1, s16
 801326e:	2300      	movs	r3, #0
 8013270:	220a      	movs	r2, #10
 8013272:	4620      	mov	r0, r4
 8013274:	f000 f9f2 	bl	801365c <__multadd>
 8013278:	ee08 0a10 	vmov	s16, r0
 801327c:	e7e7      	b.n	801324e <_dtoa_r+0xb26>
 801327e:	9b02      	ldr	r3, [sp, #8]
 8013280:	2b00      	cmp	r3, #0
 8013282:	bfc8      	it	gt
 8013284:	461d      	movgt	r5, r3
 8013286:	9b01      	ldr	r3, [sp, #4]
 8013288:	bfd8      	it	le
 801328a:	2501      	movle	r5, #1
 801328c:	441d      	add	r5, r3
 801328e:	f04f 0800 	mov.w	r8, #0
 8013292:	ee18 1a10 	vmov	r1, s16
 8013296:	2201      	movs	r2, #1
 8013298:	4620      	mov	r0, r4
 801329a:	f000 fb8f 	bl	80139bc <__lshift>
 801329e:	4631      	mov	r1, r6
 80132a0:	ee08 0a10 	vmov	s16, r0
 80132a4:	f000 fbfa 	bl	8013a9c <__mcmp>
 80132a8:	2800      	cmp	r0, #0
 80132aa:	dc91      	bgt.n	80131d0 <_dtoa_r+0xaa8>
 80132ac:	d102      	bne.n	80132b4 <_dtoa_r+0xb8c>
 80132ae:	f01a 0f01 	tst.w	sl, #1
 80132b2:	d18d      	bne.n	80131d0 <_dtoa_r+0xaa8>
 80132b4:	462b      	mov	r3, r5
 80132b6:	461d      	mov	r5, r3
 80132b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80132bc:	2a30      	cmp	r2, #48	; 0x30
 80132be:	d0fa      	beq.n	80132b6 <_dtoa_r+0xb8e>
 80132c0:	e6d7      	b.n	8013072 <_dtoa_r+0x94a>
 80132c2:	9a01      	ldr	r2, [sp, #4]
 80132c4:	429a      	cmp	r2, r3
 80132c6:	d184      	bne.n	80131d2 <_dtoa_r+0xaaa>
 80132c8:	9b00      	ldr	r3, [sp, #0]
 80132ca:	3301      	adds	r3, #1
 80132cc:	9300      	str	r3, [sp, #0]
 80132ce:	2331      	movs	r3, #49	; 0x31
 80132d0:	7013      	strb	r3, [r2, #0]
 80132d2:	e6ce      	b.n	8013072 <_dtoa_r+0x94a>
 80132d4:	4b09      	ldr	r3, [pc, #36]	; (80132fc <_dtoa_r+0xbd4>)
 80132d6:	f7ff ba95 	b.w	8012804 <_dtoa_r+0xdc>
 80132da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80132dc:	2b00      	cmp	r3, #0
 80132de:	f47f aa6e 	bne.w	80127be <_dtoa_r+0x96>
 80132e2:	4b07      	ldr	r3, [pc, #28]	; (8013300 <_dtoa_r+0xbd8>)
 80132e4:	f7ff ba8e 	b.w	8012804 <_dtoa_r+0xdc>
 80132e8:	9b02      	ldr	r3, [sp, #8]
 80132ea:	2b00      	cmp	r3, #0
 80132ec:	dcae      	bgt.n	801324c <_dtoa_r+0xb24>
 80132ee:	9b06      	ldr	r3, [sp, #24]
 80132f0:	2b02      	cmp	r3, #2
 80132f2:	f73f aea8 	bgt.w	8013046 <_dtoa_r+0x91e>
 80132f6:	e7a9      	b.n	801324c <_dtoa_r+0xb24>
 80132f8:	080153e8 	.word	0x080153e8
 80132fc:	08015244 	.word	0x08015244
 8013300:	08015369 	.word	0x08015369

08013304 <__sflush_r>:
 8013304:	898a      	ldrh	r2, [r1, #12]
 8013306:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801330a:	4605      	mov	r5, r0
 801330c:	0710      	lsls	r0, r2, #28
 801330e:	460c      	mov	r4, r1
 8013310:	d458      	bmi.n	80133c4 <__sflush_r+0xc0>
 8013312:	684b      	ldr	r3, [r1, #4]
 8013314:	2b00      	cmp	r3, #0
 8013316:	dc05      	bgt.n	8013324 <__sflush_r+0x20>
 8013318:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801331a:	2b00      	cmp	r3, #0
 801331c:	dc02      	bgt.n	8013324 <__sflush_r+0x20>
 801331e:	2000      	movs	r0, #0
 8013320:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013324:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013326:	2e00      	cmp	r6, #0
 8013328:	d0f9      	beq.n	801331e <__sflush_r+0x1a>
 801332a:	2300      	movs	r3, #0
 801332c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013330:	682f      	ldr	r7, [r5, #0]
 8013332:	602b      	str	r3, [r5, #0]
 8013334:	d032      	beq.n	801339c <__sflush_r+0x98>
 8013336:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013338:	89a3      	ldrh	r3, [r4, #12]
 801333a:	075a      	lsls	r2, r3, #29
 801333c:	d505      	bpl.n	801334a <__sflush_r+0x46>
 801333e:	6863      	ldr	r3, [r4, #4]
 8013340:	1ac0      	subs	r0, r0, r3
 8013342:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013344:	b10b      	cbz	r3, 801334a <__sflush_r+0x46>
 8013346:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013348:	1ac0      	subs	r0, r0, r3
 801334a:	2300      	movs	r3, #0
 801334c:	4602      	mov	r2, r0
 801334e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013350:	6a21      	ldr	r1, [r4, #32]
 8013352:	4628      	mov	r0, r5
 8013354:	47b0      	blx	r6
 8013356:	1c43      	adds	r3, r0, #1
 8013358:	89a3      	ldrh	r3, [r4, #12]
 801335a:	d106      	bne.n	801336a <__sflush_r+0x66>
 801335c:	6829      	ldr	r1, [r5, #0]
 801335e:	291d      	cmp	r1, #29
 8013360:	d82c      	bhi.n	80133bc <__sflush_r+0xb8>
 8013362:	4a2a      	ldr	r2, [pc, #168]	; (801340c <__sflush_r+0x108>)
 8013364:	40ca      	lsrs	r2, r1
 8013366:	07d6      	lsls	r6, r2, #31
 8013368:	d528      	bpl.n	80133bc <__sflush_r+0xb8>
 801336a:	2200      	movs	r2, #0
 801336c:	6062      	str	r2, [r4, #4]
 801336e:	04d9      	lsls	r1, r3, #19
 8013370:	6922      	ldr	r2, [r4, #16]
 8013372:	6022      	str	r2, [r4, #0]
 8013374:	d504      	bpl.n	8013380 <__sflush_r+0x7c>
 8013376:	1c42      	adds	r2, r0, #1
 8013378:	d101      	bne.n	801337e <__sflush_r+0x7a>
 801337a:	682b      	ldr	r3, [r5, #0]
 801337c:	b903      	cbnz	r3, 8013380 <__sflush_r+0x7c>
 801337e:	6560      	str	r0, [r4, #84]	; 0x54
 8013380:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013382:	602f      	str	r7, [r5, #0]
 8013384:	2900      	cmp	r1, #0
 8013386:	d0ca      	beq.n	801331e <__sflush_r+0x1a>
 8013388:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801338c:	4299      	cmp	r1, r3
 801338e:	d002      	beq.n	8013396 <__sflush_r+0x92>
 8013390:	4628      	mov	r0, r5
 8013392:	f7fe f889 	bl	80114a8 <_free_r>
 8013396:	2000      	movs	r0, #0
 8013398:	6360      	str	r0, [r4, #52]	; 0x34
 801339a:	e7c1      	b.n	8013320 <__sflush_r+0x1c>
 801339c:	6a21      	ldr	r1, [r4, #32]
 801339e:	2301      	movs	r3, #1
 80133a0:	4628      	mov	r0, r5
 80133a2:	47b0      	blx	r6
 80133a4:	1c41      	adds	r1, r0, #1
 80133a6:	d1c7      	bne.n	8013338 <__sflush_r+0x34>
 80133a8:	682b      	ldr	r3, [r5, #0]
 80133aa:	2b00      	cmp	r3, #0
 80133ac:	d0c4      	beq.n	8013338 <__sflush_r+0x34>
 80133ae:	2b1d      	cmp	r3, #29
 80133b0:	d001      	beq.n	80133b6 <__sflush_r+0xb2>
 80133b2:	2b16      	cmp	r3, #22
 80133b4:	d101      	bne.n	80133ba <__sflush_r+0xb6>
 80133b6:	602f      	str	r7, [r5, #0]
 80133b8:	e7b1      	b.n	801331e <__sflush_r+0x1a>
 80133ba:	89a3      	ldrh	r3, [r4, #12]
 80133bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80133c0:	81a3      	strh	r3, [r4, #12]
 80133c2:	e7ad      	b.n	8013320 <__sflush_r+0x1c>
 80133c4:	690f      	ldr	r7, [r1, #16]
 80133c6:	2f00      	cmp	r7, #0
 80133c8:	d0a9      	beq.n	801331e <__sflush_r+0x1a>
 80133ca:	0793      	lsls	r3, r2, #30
 80133cc:	680e      	ldr	r6, [r1, #0]
 80133ce:	bf08      	it	eq
 80133d0:	694b      	ldreq	r3, [r1, #20]
 80133d2:	600f      	str	r7, [r1, #0]
 80133d4:	bf18      	it	ne
 80133d6:	2300      	movne	r3, #0
 80133d8:	eba6 0807 	sub.w	r8, r6, r7
 80133dc:	608b      	str	r3, [r1, #8]
 80133de:	f1b8 0f00 	cmp.w	r8, #0
 80133e2:	dd9c      	ble.n	801331e <__sflush_r+0x1a>
 80133e4:	6a21      	ldr	r1, [r4, #32]
 80133e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80133e8:	4643      	mov	r3, r8
 80133ea:	463a      	mov	r2, r7
 80133ec:	4628      	mov	r0, r5
 80133ee:	47b0      	blx	r6
 80133f0:	2800      	cmp	r0, #0
 80133f2:	dc06      	bgt.n	8013402 <__sflush_r+0xfe>
 80133f4:	89a3      	ldrh	r3, [r4, #12]
 80133f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80133fa:	81a3      	strh	r3, [r4, #12]
 80133fc:	f04f 30ff 	mov.w	r0, #4294967295
 8013400:	e78e      	b.n	8013320 <__sflush_r+0x1c>
 8013402:	4407      	add	r7, r0
 8013404:	eba8 0800 	sub.w	r8, r8, r0
 8013408:	e7e9      	b.n	80133de <__sflush_r+0xda>
 801340a:	bf00      	nop
 801340c:	20400001 	.word	0x20400001

08013410 <_fflush_r>:
 8013410:	b538      	push	{r3, r4, r5, lr}
 8013412:	690b      	ldr	r3, [r1, #16]
 8013414:	4605      	mov	r5, r0
 8013416:	460c      	mov	r4, r1
 8013418:	b913      	cbnz	r3, 8013420 <_fflush_r+0x10>
 801341a:	2500      	movs	r5, #0
 801341c:	4628      	mov	r0, r5
 801341e:	bd38      	pop	{r3, r4, r5, pc}
 8013420:	b118      	cbz	r0, 801342a <_fflush_r+0x1a>
 8013422:	6983      	ldr	r3, [r0, #24]
 8013424:	b90b      	cbnz	r3, 801342a <_fflush_r+0x1a>
 8013426:	f7fd ff5f 	bl	80112e8 <__sinit>
 801342a:	4b14      	ldr	r3, [pc, #80]	; (801347c <_fflush_r+0x6c>)
 801342c:	429c      	cmp	r4, r3
 801342e:	d11b      	bne.n	8013468 <_fflush_r+0x58>
 8013430:	686c      	ldr	r4, [r5, #4]
 8013432:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013436:	2b00      	cmp	r3, #0
 8013438:	d0ef      	beq.n	801341a <_fflush_r+0xa>
 801343a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801343c:	07d0      	lsls	r0, r2, #31
 801343e:	d404      	bmi.n	801344a <_fflush_r+0x3a>
 8013440:	0599      	lsls	r1, r3, #22
 8013442:	d402      	bmi.n	801344a <_fflush_r+0x3a>
 8013444:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013446:	f7f3 fdf5 	bl	8007034 <__retarget_lock_acquire_recursive>
 801344a:	4628      	mov	r0, r5
 801344c:	4621      	mov	r1, r4
 801344e:	f7ff ff59 	bl	8013304 <__sflush_r>
 8013452:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013454:	07da      	lsls	r2, r3, #31
 8013456:	4605      	mov	r5, r0
 8013458:	d4e0      	bmi.n	801341c <_fflush_r+0xc>
 801345a:	89a3      	ldrh	r3, [r4, #12]
 801345c:	059b      	lsls	r3, r3, #22
 801345e:	d4dd      	bmi.n	801341c <_fflush_r+0xc>
 8013460:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013462:	f7f3 fdfb 	bl	800705c <__retarget_lock_release_recursive>
 8013466:	e7d9      	b.n	801341c <_fflush_r+0xc>
 8013468:	4b05      	ldr	r3, [pc, #20]	; (8013480 <_fflush_r+0x70>)
 801346a:	429c      	cmp	r4, r3
 801346c:	d101      	bne.n	8013472 <_fflush_r+0x62>
 801346e:	68ac      	ldr	r4, [r5, #8]
 8013470:	e7df      	b.n	8013432 <_fflush_r+0x22>
 8013472:	4b04      	ldr	r3, [pc, #16]	; (8013484 <_fflush_r+0x74>)
 8013474:	429c      	cmp	r4, r3
 8013476:	bf08      	it	eq
 8013478:	68ec      	ldreq	r4, [r5, #12]
 801347a:	e7da      	b.n	8013432 <_fflush_r+0x22>
 801347c:	080151f0 	.word	0x080151f0
 8013480:	08015210 	.word	0x08015210
 8013484:	080151d0 	.word	0x080151d0

08013488 <_localeconv_r>:
 8013488:	4800      	ldr	r0, [pc, #0]	; (801348c <_localeconv_r+0x4>)
 801348a:	4770      	bx	lr
 801348c:	200001cc 	.word	0x200001cc

08013490 <_lseek_r>:
 8013490:	b538      	push	{r3, r4, r5, lr}
 8013492:	4d07      	ldr	r5, [pc, #28]	; (80134b0 <_lseek_r+0x20>)
 8013494:	4604      	mov	r4, r0
 8013496:	4608      	mov	r0, r1
 8013498:	4611      	mov	r1, r2
 801349a:	2200      	movs	r2, #0
 801349c:	602a      	str	r2, [r5, #0]
 801349e:	461a      	mov	r2, r3
 80134a0:	f7f3 fca8 	bl	8006df4 <_lseek>
 80134a4:	1c43      	adds	r3, r0, #1
 80134a6:	d102      	bne.n	80134ae <_lseek_r+0x1e>
 80134a8:	682b      	ldr	r3, [r5, #0]
 80134aa:	b103      	cbz	r3, 80134ae <_lseek_r+0x1e>
 80134ac:	6023      	str	r3, [r4, #0]
 80134ae:	bd38      	pop	{r3, r4, r5, pc}
 80134b0:	20005ca0 	.word	0x20005ca0

080134b4 <__swhatbuf_r>:
 80134b4:	b570      	push	{r4, r5, r6, lr}
 80134b6:	460e      	mov	r6, r1
 80134b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80134bc:	2900      	cmp	r1, #0
 80134be:	b096      	sub	sp, #88	; 0x58
 80134c0:	4614      	mov	r4, r2
 80134c2:	461d      	mov	r5, r3
 80134c4:	da08      	bge.n	80134d8 <__swhatbuf_r+0x24>
 80134c6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80134ca:	2200      	movs	r2, #0
 80134cc:	602a      	str	r2, [r5, #0]
 80134ce:	061a      	lsls	r2, r3, #24
 80134d0:	d410      	bmi.n	80134f4 <__swhatbuf_r+0x40>
 80134d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80134d6:	e00e      	b.n	80134f6 <__swhatbuf_r+0x42>
 80134d8:	466a      	mov	r2, sp
 80134da:	f000 ff37 	bl	801434c <_fstat_r>
 80134de:	2800      	cmp	r0, #0
 80134e0:	dbf1      	blt.n	80134c6 <__swhatbuf_r+0x12>
 80134e2:	9a01      	ldr	r2, [sp, #4]
 80134e4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80134e8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80134ec:	425a      	negs	r2, r3
 80134ee:	415a      	adcs	r2, r3
 80134f0:	602a      	str	r2, [r5, #0]
 80134f2:	e7ee      	b.n	80134d2 <__swhatbuf_r+0x1e>
 80134f4:	2340      	movs	r3, #64	; 0x40
 80134f6:	2000      	movs	r0, #0
 80134f8:	6023      	str	r3, [r4, #0]
 80134fa:	b016      	add	sp, #88	; 0x58
 80134fc:	bd70      	pop	{r4, r5, r6, pc}
	...

08013500 <__smakebuf_r>:
 8013500:	898b      	ldrh	r3, [r1, #12]
 8013502:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013504:	079d      	lsls	r5, r3, #30
 8013506:	4606      	mov	r6, r0
 8013508:	460c      	mov	r4, r1
 801350a:	d507      	bpl.n	801351c <__smakebuf_r+0x1c>
 801350c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013510:	6023      	str	r3, [r4, #0]
 8013512:	6123      	str	r3, [r4, #16]
 8013514:	2301      	movs	r3, #1
 8013516:	6163      	str	r3, [r4, #20]
 8013518:	b002      	add	sp, #8
 801351a:	bd70      	pop	{r4, r5, r6, pc}
 801351c:	ab01      	add	r3, sp, #4
 801351e:	466a      	mov	r2, sp
 8013520:	f7ff ffc8 	bl	80134b4 <__swhatbuf_r>
 8013524:	9900      	ldr	r1, [sp, #0]
 8013526:	4605      	mov	r5, r0
 8013528:	4630      	mov	r0, r6
 801352a:	f7fe f829 	bl	8011580 <_malloc_r>
 801352e:	b948      	cbnz	r0, 8013544 <__smakebuf_r+0x44>
 8013530:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013534:	059a      	lsls	r2, r3, #22
 8013536:	d4ef      	bmi.n	8013518 <__smakebuf_r+0x18>
 8013538:	f023 0303 	bic.w	r3, r3, #3
 801353c:	f043 0302 	orr.w	r3, r3, #2
 8013540:	81a3      	strh	r3, [r4, #12]
 8013542:	e7e3      	b.n	801350c <__smakebuf_r+0xc>
 8013544:	4b0d      	ldr	r3, [pc, #52]	; (801357c <__smakebuf_r+0x7c>)
 8013546:	62b3      	str	r3, [r6, #40]	; 0x28
 8013548:	89a3      	ldrh	r3, [r4, #12]
 801354a:	6020      	str	r0, [r4, #0]
 801354c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013550:	81a3      	strh	r3, [r4, #12]
 8013552:	9b00      	ldr	r3, [sp, #0]
 8013554:	6163      	str	r3, [r4, #20]
 8013556:	9b01      	ldr	r3, [sp, #4]
 8013558:	6120      	str	r0, [r4, #16]
 801355a:	b15b      	cbz	r3, 8013574 <__smakebuf_r+0x74>
 801355c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013560:	4630      	mov	r0, r6
 8013562:	f000 ff05 	bl	8014370 <_isatty_r>
 8013566:	b128      	cbz	r0, 8013574 <__smakebuf_r+0x74>
 8013568:	89a3      	ldrh	r3, [r4, #12]
 801356a:	f023 0303 	bic.w	r3, r3, #3
 801356e:	f043 0301 	orr.w	r3, r3, #1
 8013572:	81a3      	strh	r3, [r4, #12]
 8013574:	89a0      	ldrh	r0, [r4, #12]
 8013576:	4305      	orrs	r5, r0
 8013578:	81a5      	strh	r5, [r4, #12]
 801357a:	e7cd      	b.n	8013518 <__smakebuf_r+0x18>
 801357c:	08011281 	.word	0x08011281

08013580 <__malloc_lock>:
 8013580:	4801      	ldr	r0, [pc, #4]	; (8013588 <__malloc_lock+0x8>)
 8013582:	f7f3 bd57 	b.w	8007034 <__retarget_lock_acquire_recursive>
 8013586:	bf00      	nop
 8013588:	20000c74 	.word	0x20000c74

0801358c <__malloc_unlock>:
 801358c:	4801      	ldr	r0, [pc, #4]	; (8013594 <__malloc_unlock+0x8>)
 801358e:	f7f3 bd65 	b.w	800705c <__retarget_lock_release_recursive>
 8013592:	bf00      	nop
 8013594:	20000c74 	.word	0x20000c74

08013598 <_Balloc>:
 8013598:	b570      	push	{r4, r5, r6, lr}
 801359a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801359c:	4604      	mov	r4, r0
 801359e:	460d      	mov	r5, r1
 80135a0:	b976      	cbnz	r6, 80135c0 <_Balloc+0x28>
 80135a2:	2010      	movs	r0, #16
 80135a4:	f7fd ff62 	bl	801146c <malloc>
 80135a8:	4602      	mov	r2, r0
 80135aa:	6260      	str	r0, [r4, #36]	; 0x24
 80135ac:	b920      	cbnz	r0, 80135b8 <_Balloc+0x20>
 80135ae:	4b18      	ldr	r3, [pc, #96]	; (8013610 <_Balloc+0x78>)
 80135b0:	4818      	ldr	r0, [pc, #96]	; (8013614 <_Balloc+0x7c>)
 80135b2:	2166      	movs	r1, #102	; 0x66
 80135b4:	f000 fe9a 	bl	80142ec <__assert_func>
 80135b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80135bc:	6006      	str	r6, [r0, #0]
 80135be:	60c6      	str	r6, [r0, #12]
 80135c0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80135c2:	68f3      	ldr	r3, [r6, #12]
 80135c4:	b183      	cbz	r3, 80135e8 <_Balloc+0x50>
 80135c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80135c8:	68db      	ldr	r3, [r3, #12]
 80135ca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80135ce:	b9b8      	cbnz	r0, 8013600 <_Balloc+0x68>
 80135d0:	2101      	movs	r1, #1
 80135d2:	fa01 f605 	lsl.w	r6, r1, r5
 80135d6:	1d72      	adds	r2, r6, #5
 80135d8:	0092      	lsls	r2, r2, #2
 80135da:	4620      	mov	r0, r4
 80135dc:	f000 fb60 	bl	8013ca0 <_calloc_r>
 80135e0:	b160      	cbz	r0, 80135fc <_Balloc+0x64>
 80135e2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80135e6:	e00e      	b.n	8013606 <_Balloc+0x6e>
 80135e8:	2221      	movs	r2, #33	; 0x21
 80135ea:	2104      	movs	r1, #4
 80135ec:	4620      	mov	r0, r4
 80135ee:	f000 fb57 	bl	8013ca0 <_calloc_r>
 80135f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80135f4:	60f0      	str	r0, [r6, #12]
 80135f6:	68db      	ldr	r3, [r3, #12]
 80135f8:	2b00      	cmp	r3, #0
 80135fa:	d1e4      	bne.n	80135c6 <_Balloc+0x2e>
 80135fc:	2000      	movs	r0, #0
 80135fe:	bd70      	pop	{r4, r5, r6, pc}
 8013600:	6802      	ldr	r2, [r0, #0]
 8013602:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013606:	2300      	movs	r3, #0
 8013608:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801360c:	e7f7      	b.n	80135fe <_Balloc+0x66>
 801360e:	bf00      	nop
 8013610:	08015376 	.word	0x08015376
 8013614:	080153f9 	.word	0x080153f9

08013618 <_Bfree>:
 8013618:	b570      	push	{r4, r5, r6, lr}
 801361a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801361c:	4605      	mov	r5, r0
 801361e:	460c      	mov	r4, r1
 8013620:	b976      	cbnz	r6, 8013640 <_Bfree+0x28>
 8013622:	2010      	movs	r0, #16
 8013624:	f7fd ff22 	bl	801146c <malloc>
 8013628:	4602      	mov	r2, r0
 801362a:	6268      	str	r0, [r5, #36]	; 0x24
 801362c:	b920      	cbnz	r0, 8013638 <_Bfree+0x20>
 801362e:	4b09      	ldr	r3, [pc, #36]	; (8013654 <_Bfree+0x3c>)
 8013630:	4809      	ldr	r0, [pc, #36]	; (8013658 <_Bfree+0x40>)
 8013632:	218a      	movs	r1, #138	; 0x8a
 8013634:	f000 fe5a 	bl	80142ec <__assert_func>
 8013638:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801363c:	6006      	str	r6, [r0, #0]
 801363e:	60c6      	str	r6, [r0, #12]
 8013640:	b13c      	cbz	r4, 8013652 <_Bfree+0x3a>
 8013642:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8013644:	6862      	ldr	r2, [r4, #4]
 8013646:	68db      	ldr	r3, [r3, #12]
 8013648:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801364c:	6021      	str	r1, [r4, #0]
 801364e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8013652:	bd70      	pop	{r4, r5, r6, pc}
 8013654:	08015376 	.word	0x08015376
 8013658:	080153f9 	.word	0x080153f9

0801365c <__multadd>:
 801365c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013660:	690d      	ldr	r5, [r1, #16]
 8013662:	4607      	mov	r7, r0
 8013664:	460c      	mov	r4, r1
 8013666:	461e      	mov	r6, r3
 8013668:	f101 0c14 	add.w	ip, r1, #20
 801366c:	2000      	movs	r0, #0
 801366e:	f8dc 3000 	ldr.w	r3, [ip]
 8013672:	b299      	uxth	r1, r3
 8013674:	fb02 6101 	mla	r1, r2, r1, r6
 8013678:	0c1e      	lsrs	r6, r3, #16
 801367a:	0c0b      	lsrs	r3, r1, #16
 801367c:	fb02 3306 	mla	r3, r2, r6, r3
 8013680:	b289      	uxth	r1, r1
 8013682:	3001      	adds	r0, #1
 8013684:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8013688:	4285      	cmp	r5, r0
 801368a:	f84c 1b04 	str.w	r1, [ip], #4
 801368e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8013692:	dcec      	bgt.n	801366e <__multadd+0x12>
 8013694:	b30e      	cbz	r6, 80136da <__multadd+0x7e>
 8013696:	68a3      	ldr	r3, [r4, #8]
 8013698:	42ab      	cmp	r3, r5
 801369a:	dc19      	bgt.n	80136d0 <__multadd+0x74>
 801369c:	6861      	ldr	r1, [r4, #4]
 801369e:	4638      	mov	r0, r7
 80136a0:	3101      	adds	r1, #1
 80136a2:	f7ff ff79 	bl	8013598 <_Balloc>
 80136a6:	4680      	mov	r8, r0
 80136a8:	b928      	cbnz	r0, 80136b6 <__multadd+0x5a>
 80136aa:	4602      	mov	r2, r0
 80136ac:	4b0c      	ldr	r3, [pc, #48]	; (80136e0 <__multadd+0x84>)
 80136ae:	480d      	ldr	r0, [pc, #52]	; (80136e4 <__multadd+0x88>)
 80136b0:	21b5      	movs	r1, #181	; 0xb5
 80136b2:	f000 fe1b 	bl	80142ec <__assert_func>
 80136b6:	6922      	ldr	r2, [r4, #16]
 80136b8:	3202      	adds	r2, #2
 80136ba:	f104 010c 	add.w	r1, r4, #12
 80136be:	0092      	lsls	r2, r2, #2
 80136c0:	300c      	adds	r0, #12
 80136c2:	f7fd fedb 	bl	801147c <memcpy>
 80136c6:	4621      	mov	r1, r4
 80136c8:	4638      	mov	r0, r7
 80136ca:	f7ff ffa5 	bl	8013618 <_Bfree>
 80136ce:	4644      	mov	r4, r8
 80136d0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80136d4:	3501      	adds	r5, #1
 80136d6:	615e      	str	r6, [r3, #20]
 80136d8:	6125      	str	r5, [r4, #16]
 80136da:	4620      	mov	r0, r4
 80136dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80136e0:	080153e8 	.word	0x080153e8
 80136e4:	080153f9 	.word	0x080153f9

080136e8 <__hi0bits>:
 80136e8:	0c03      	lsrs	r3, r0, #16
 80136ea:	041b      	lsls	r3, r3, #16
 80136ec:	b9d3      	cbnz	r3, 8013724 <__hi0bits+0x3c>
 80136ee:	0400      	lsls	r0, r0, #16
 80136f0:	2310      	movs	r3, #16
 80136f2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80136f6:	bf04      	itt	eq
 80136f8:	0200      	lsleq	r0, r0, #8
 80136fa:	3308      	addeq	r3, #8
 80136fc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8013700:	bf04      	itt	eq
 8013702:	0100      	lsleq	r0, r0, #4
 8013704:	3304      	addeq	r3, #4
 8013706:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801370a:	bf04      	itt	eq
 801370c:	0080      	lsleq	r0, r0, #2
 801370e:	3302      	addeq	r3, #2
 8013710:	2800      	cmp	r0, #0
 8013712:	db05      	blt.n	8013720 <__hi0bits+0x38>
 8013714:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8013718:	f103 0301 	add.w	r3, r3, #1
 801371c:	bf08      	it	eq
 801371e:	2320      	moveq	r3, #32
 8013720:	4618      	mov	r0, r3
 8013722:	4770      	bx	lr
 8013724:	2300      	movs	r3, #0
 8013726:	e7e4      	b.n	80136f2 <__hi0bits+0xa>

08013728 <__lo0bits>:
 8013728:	6803      	ldr	r3, [r0, #0]
 801372a:	f013 0207 	ands.w	r2, r3, #7
 801372e:	4601      	mov	r1, r0
 8013730:	d00b      	beq.n	801374a <__lo0bits+0x22>
 8013732:	07da      	lsls	r2, r3, #31
 8013734:	d423      	bmi.n	801377e <__lo0bits+0x56>
 8013736:	0798      	lsls	r0, r3, #30
 8013738:	bf49      	itett	mi
 801373a:	085b      	lsrmi	r3, r3, #1
 801373c:	089b      	lsrpl	r3, r3, #2
 801373e:	2001      	movmi	r0, #1
 8013740:	600b      	strmi	r3, [r1, #0]
 8013742:	bf5c      	itt	pl
 8013744:	600b      	strpl	r3, [r1, #0]
 8013746:	2002      	movpl	r0, #2
 8013748:	4770      	bx	lr
 801374a:	b298      	uxth	r0, r3
 801374c:	b9a8      	cbnz	r0, 801377a <__lo0bits+0x52>
 801374e:	0c1b      	lsrs	r3, r3, #16
 8013750:	2010      	movs	r0, #16
 8013752:	b2da      	uxtb	r2, r3
 8013754:	b90a      	cbnz	r2, 801375a <__lo0bits+0x32>
 8013756:	3008      	adds	r0, #8
 8013758:	0a1b      	lsrs	r3, r3, #8
 801375a:	071a      	lsls	r2, r3, #28
 801375c:	bf04      	itt	eq
 801375e:	091b      	lsreq	r3, r3, #4
 8013760:	3004      	addeq	r0, #4
 8013762:	079a      	lsls	r2, r3, #30
 8013764:	bf04      	itt	eq
 8013766:	089b      	lsreq	r3, r3, #2
 8013768:	3002      	addeq	r0, #2
 801376a:	07da      	lsls	r2, r3, #31
 801376c:	d403      	bmi.n	8013776 <__lo0bits+0x4e>
 801376e:	085b      	lsrs	r3, r3, #1
 8013770:	f100 0001 	add.w	r0, r0, #1
 8013774:	d005      	beq.n	8013782 <__lo0bits+0x5a>
 8013776:	600b      	str	r3, [r1, #0]
 8013778:	4770      	bx	lr
 801377a:	4610      	mov	r0, r2
 801377c:	e7e9      	b.n	8013752 <__lo0bits+0x2a>
 801377e:	2000      	movs	r0, #0
 8013780:	4770      	bx	lr
 8013782:	2020      	movs	r0, #32
 8013784:	4770      	bx	lr
	...

08013788 <__i2b>:
 8013788:	b510      	push	{r4, lr}
 801378a:	460c      	mov	r4, r1
 801378c:	2101      	movs	r1, #1
 801378e:	f7ff ff03 	bl	8013598 <_Balloc>
 8013792:	4602      	mov	r2, r0
 8013794:	b928      	cbnz	r0, 80137a2 <__i2b+0x1a>
 8013796:	4b05      	ldr	r3, [pc, #20]	; (80137ac <__i2b+0x24>)
 8013798:	4805      	ldr	r0, [pc, #20]	; (80137b0 <__i2b+0x28>)
 801379a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801379e:	f000 fda5 	bl	80142ec <__assert_func>
 80137a2:	2301      	movs	r3, #1
 80137a4:	6144      	str	r4, [r0, #20]
 80137a6:	6103      	str	r3, [r0, #16]
 80137a8:	bd10      	pop	{r4, pc}
 80137aa:	bf00      	nop
 80137ac:	080153e8 	.word	0x080153e8
 80137b0:	080153f9 	.word	0x080153f9

080137b4 <__multiply>:
 80137b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80137b8:	4691      	mov	r9, r2
 80137ba:	690a      	ldr	r2, [r1, #16]
 80137bc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80137c0:	429a      	cmp	r2, r3
 80137c2:	bfb8      	it	lt
 80137c4:	460b      	movlt	r3, r1
 80137c6:	460c      	mov	r4, r1
 80137c8:	bfbc      	itt	lt
 80137ca:	464c      	movlt	r4, r9
 80137cc:	4699      	movlt	r9, r3
 80137ce:	6927      	ldr	r7, [r4, #16]
 80137d0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80137d4:	68a3      	ldr	r3, [r4, #8]
 80137d6:	6861      	ldr	r1, [r4, #4]
 80137d8:	eb07 060a 	add.w	r6, r7, sl
 80137dc:	42b3      	cmp	r3, r6
 80137de:	b085      	sub	sp, #20
 80137e0:	bfb8      	it	lt
 80137e2:	3101      	addlt	r1, #1
 80137e4:	f7ff fed8 	bl	8013598 <_Balloc>
 80137e8:	b930      	cbnz	r0, 80137f8 <__multiply+0x44>
 80137ea:	4602      	mov	r2, r0
 80137ec:	4b44      	ldr	r3, [pc, #272]	; (8013900 <__multiply+0x14c>)
 80137ee:	4845      	ldr	r0, [pc, #276]	; (8013904 <__multiply+0x150>)
 80137f0:	f240 115d 	movw	r1, #349	; 0x15d
 80137f4:	f000 fd7a 	bl	80142ec <__assert_func>
 80137f8:	f100 0514 	add.w	r5, r0, #20
 80137fc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8013800:	462b      	mov	r3, r5
 8013802:	2200      	movs	r2, #0
 8013804:	4543      	cmp	r3, r8
 8013806:	d321      	bcc.n	801384c <__multiply+0x98>
 8013808:	f104 0314 	add.w	r3, r4, #20
 801380c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8013810:	f109 0314 	add.w	r3, r9, #20
 8013814:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8013818:	9202      	str	r2, [sp, #8]
 801381a:	1b3a      	subs	r2, r7, r4
 801381c:	3a15      	subs	r2, #21
 801381e:	f022 0203 	bic.w	r2, r2, #3
 8013822:	3204      	adds	r2, #4
 8013824:	f104 0115 	add.w	r1, r4, #21
 8013828:	428f      	cmp	r7, r1
 801382a:	bf38      	it	cc
 801382c:	2204      	movcc	r2, #4
 801382e:	9201      	str	r2, [sp, #4]
 8013830:	9a02      	ldr	r2, [sp, #8]
 8013832:	9303      	str	r3, [sp, #12]
 8013834:	429a      	cmp	r2, r3
 8013836:	d80c      	bhi.n	8013852 <__multiply+0x9e>
 8013838:	2e00      	cmp	r6, #0
 801383a:	dd03      	ble.n	8013844 <__multiply+0x90>
 801383c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8013840:	2b00      	cmp	r3, #0
 8013842:	d05a      	beq.n	80138fa <__multiply+0x146>
 8013844:	6106      	str	r6, [r0, #16]
 8013846:	b005      	add	sp, #20
 8013848:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801384c:	f843 2b04 	str.w	r2, [r3], #4
 8013850:	e7d8      	b.n	8013804 <__multiply+0x50>
 8013852:	f8b3 a000 	ldrh.w	sl, [r3]
 8013856:	f1ba 0f00 	cmp.w	sl, #0
 801385a:	d024      	beq.n	80138a6 <__multiply+0xf2>
 801385c:	f104 0e14 	add.w	lr, r4, #20
 8013860:	46a9      	mov	r9, r5
 8013862:	f04f 0c00 	mov.w	ip, #0
 8013866:	f85e 2b04 	ldr.w	r2, [lr], #4
 801386a:	f8d9 1000 	ldr.w	r1, [r9]
 801386e:	fa1f fb82 	uxth.w	fp, r2
 8013872:	b289      	uxth	r1, r1
 8013874:	fb0a 110b 	mla	r1, sl, fp, r1
 8013878:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801387c:	f8d9 2000 	ldr.w	r2, [r9]
 8013880:	4461      	add	r1, ip
 8013882:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8013886:	fb0a c20b 	mla	r2, sl, fp, ip
 801388a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801388e:	b289      	uxth	r1, r1
 8013890:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8013894:	4577      	cmp	r7, lr
 8013896:	f849 1b04 	str.w	r1, [r9], #4
 801389a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801389e:	d8e2      	bhi.n	8013866 <__multiply+0xb2>
 80138a0:	9a01      	ldr	r2, [sp, #4]
 80138a2:	f845 c002 	str.w	ip, [r5, r2]
 80138a6:	9a03      	ldr	r2, [sp, #12]
 80138a8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80138ac:	3304      	adds	r3, #4
 80138ae:	f1b9 0f00 	cmp.w	r9, #0
 80138b2:	d020      	beq.n	80138f6 <__multiply+0x142>
 80138b4:	6829      	ldr	r1, [r5, #0]
 80138b6:	f104 0c14 	add.w	ip, r4, #20
 80138ba:	46ae      	mov	lr, r5
 80138bc:	f04f 0a00 	mov.w	sl, #0
 80138c0:	f8bc b000 	ldrh.w	fp, [ip]
 80138c4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80138c8:	fb09 220b 	mla	r2, r9, fp, r2
 80138cc:	4492      	add	sl, r2
 80138ce:	b289      	uxth	r1, r1
 80138d0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80138d4:	f84e 1b04 	str.w	r1, [lr], #4
 80138d8:	f85c 2b04 	ldr.w	r2, [ip], #4
 80138dc:	f8be 1000 	ldrh.w	r1, [lr]
 80138e0:	0c12      	lsrs	r2, r2, #16
 80138e2:	fb09 1102 	mla	r1, r9, r2, r1
 80138e6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80138ea:	4567      	cmp	r7, ip
 80138ec:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80138f0:	d8e6      	bhi.n	80138c0 <__multiply+0x10c>
 80138f2:	9a01      	ldr	r2, [sp, #4]
 80138f4:	50a9      	str	r1, [r5, r2]
 80138f6:	3504      	adds	r5, #4
 80138f8:	e79a      	b.n	8013830 <__multiply+0x7c>
 80138fa:	3e01      	subs	r6, #1
 80138fc:	e79c      	b.n	8013838 <__multiply+0x84>
 80138fe:	bf00      	nop
 8013900:	080153e8 	.word	0x080153e8
 8013904:	080153f9 	.word	0x080153f9

08013908 <__pow5mult>:
 8013908:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801390c:	4615      	mov	r5, r2
 801390e:	f012 0203 	ands.w	r2, r2, #3
 8013912:	4606      	mov	r6, r0
 8013914:	460f      	mov	r7, r1
 8013916:	d007      	beq.n	8013928 <__pow5mult+0x20>
 8013918:	4c25      	ldr	r4, [pc, #148]	; (80139b0 <__pow5mult+0xa8>)
 801391a:	3a01      	subs	r2, #1
 801391c:	2300      	movs	r3, #0
 801391e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013922:	f7ff fe9b 	bl	801365c <__multadd>
 8013926:	4607      	mov	r7, r0
 8013928:	10ad      	asrs	r5, r5, #2
 801392a:	d03d      	beq.n	80139a8 <__pow5mult+0xa0>
 801392c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801392e:	b97c      	cbnz	r4, 8013950 <__pow5mult+0x48>
 8013930:	2010      	movs	r0, #16
 8013932:	f7fd fd9b 	bl	801146c <malloc>
 8013936:	4602      	mov	r2, r0
 8013938:	6270      	str	r0, [r6, #36]	; 0x24
 801393a:	b928      	cbnz	r0, 8013948 <__pow5mult+0x40>
 801393c:	4b1d      	ldr	r3, [pc, #116]	; (80139b4 <__pow5mult+0xac>)
 801393e:	481e      	ldr	r0, [pc, #120]	; (80139b8 <__pow5mult+0xb0>)
 8013940:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8013944:	f000 fcd2 	bl	80142ec <__assert_func>
 8013948:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801394c:	6004      	str	r4, [r0, #0]
 801394e:	60c4      	str	r4, [r0, #12]
 8013950:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8013954:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013958:	b94c      	cbnz	r4, 801396e <__pow5mult+0x66>
 801395a:	f240 2171 	movw	r1, #625	; 0x271
 801395e:	4630      	mov	r0, r6
 8013960:	f7ff ff12 	bl	8013788 <__i2b>
 8013964:	2300      	movs	r3, #0
 8013966:	f8c8 0008 	str.w	r0, [r8, #8]
 801396a:	4604      	mov	r4, r0
 801396c:	6003      	str	r3, [r0, #0]
 801396e:	f04f 0900 	mov.w	r9, #0
 8013972:	07eb      	lsls	r3, r5, #31
 8013974:	d50a      	bpl.n	801398c <__pow5mult+0x84>
 8013976:	4639      	mov	r1, r7
 8013978:	4622      	mov	r2, r4
 801397a:	4630      	mov	r0, r6
 801397c:	f7ff ff1a 	bl	80137b4 <__multiply>
 8013980:	4639      	mov	r1, r7
 8013982:	4680      	mov	r8, r0
 8013984:	4630      	mov	r0, r6
 8013986:	f7ff fe47 	bl	8013618 <_Bfree>
 801398a:	4647      	mov	r7, r8
 801398c:	106d      	asrs	r5, r5, #1
 801398e:	d00b      	beq.n	80139a8 <__pow5mult+0xa0>
 8013990:	6820      	ldr	r0, [r4, #0]
 8013992:	b938      	cbnz	r0, 80139a4 <__pow5mult+0x9c>
 8013994:	4622      	mov	r2, r4
 8013996:	4621      	mov	r1, r4
 8013998:	4630      	mov	r0, r6
 801399a:	f7ff ff0b 	bl	80137b4 <__multiply>
 801399e:	6020      	str	r0, [r4, #0]
 80139a0:	f8c0 9000 	str.w	r9, [r0]
 80139a4:	4604      	mov	r4, r0
 80139a6:	e7e4      	b.n	8013972 <__pow5mult+0x6a>
 80139a8:	4638      	mov	r0, r7
 80139aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80139ae:	bf00      	nop
 80139b0:	08015548 	.word	0x08015548
 80139b4:	08015376 	.word	0x08015376
 80139b8:	080153f9 	.word	0x080153f9

080139bc <__lshift>:
 80139bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80139c0:	460c      	mov	r4, r1
 80139c2:	6849      	ldr	r1, [r1, #4]
 80139c4:	6923      	ldr	r3, [r4, #16]
 80139c6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80139ca:	68a3      	ldr	r3, [r4, #8]
 80139cc:	4607      	mov	r7, r0
 80139ce:	4691      	mov	r9, r2
 80139d0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80139d4:	f108 0601 	add.w	r6, r8, #1
 80139d8:	42b3      	cmp	r3, r6
 80139da:	db0b      	blt.n	80139f4 <__lshift+0x38>
 80139dc:	4638      	mov	r0, r7
 80139de:	f7ff fddb 	bl	8013598 <_Balloc>
 80139e2:	4605      	mov	r5, r0
 80139e4:	b948      	cbnz	r0, 80139fa <__lshift+0x3e>
 80139e6:	4602      	mov	r2, r0
 80139e8:	4b2a      	ldr	r3, [pc, #168]	; (8013a94 <__lshift+0xd8>)
 80139ea:	482b      	ldr	r0, [pc, #172]	; (8013a98 <__lshift+0xdc>)
 80139ec:	f240 11d9 	movw	r1, #473	; 0x1d9
 80139f0:	f000 fc7c 	bl	80142ec <__assert_func>
 80139f4:	3101      	adds	r1, #1
 80139f6:	005b      	lsls	r3, r3, #1
 80139f8:	e7ee      	b.n	80139d8 <__lshift+0x1c>
 80139fa:	2300      	movs	r3, #0
 80139fc:	f100 0114 	add.w	r1, r0, #20
 8013a00:	f100 0210 	add.w	r2, r0, #16
 8013a04:	4618      	mov	r0, r3
 8013a06:	4553      	cmp	r3, sl
 8013a08:	db37      	blt.n	8013a7a <__lshift+0xbe>
 8013a0a:	6920      	ldr	r0, [r4, #16]
 8013a0c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013a10:	f104 0314 	add.w	r3, r4, #20
 8013a14:	f019 091f 	ands.w	r9, r9, #31
 8013a18:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013a1c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8013a20:	d02f      	beq.n	8013a82 <__lshift+0xc6>
 8013a22:	f1c9 0e20 	rsb	lr, r9, #32
 8013a26:	468a      	mov	sl, r1
 8013a28:	f04f 0c00 	mov.w	ip, #0
 8013a2c:	681a      	ldr	r2, [r3, #0]
 8013a2e:	fa02 f209 	lsl.w	r2, r2, r9
 8013a32:	ea42 020c 	orr.w	r2, r2, ip
 8013a36:	f84a 2b04 	str.w	r2, [sl], #4
 8013a3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8013a3e:	4298      	cmp	r0, r3
 8013a40:	fa22 fc0e 	lsr.w	ip, r2, lr
 8013a44:	d8f2      	bhi.n	8013a2c <__lshift+0x70>
 8013a46:	1b03      	subs	r3, r0, r4
 8013a48:	3b15      	subs	r3, #21
 8013a4a:	f023 0303 	bic.w	r3, r3, #3
 8013a4e:	3304      	adds	r3, #4
 8013a50:	f104 0215 	add.w	r2, r4, #21
 8013a54:	4290      	cmp	r0, r2
 8013a56:	bf38      	it	cc
 8013a58:	2304      	movcc	r3, #4
 8013a5a:	f841 c003 	str.w	ip, [r1, r3]
 8013a5e:	f1bc 0f00 	cmp.w	ip, #0
 8013a62:	d001      	beq.n	8013a68 <__lshift+0xac>
 8013a64:	f108 0602 	add.w	r6, r8, #2
 8013a68:	3e01      	subs	r6, #1
 8013a6a:	4638      	mov	r0, r7
 8013a6c:	612e      	str	r6, [r5, #16]
 8013a6e:	4621      	mov	r1, r4
 8013a70:	f7ff fdd2 	bl	8013618 <_Bfree>
 8013a74:	4628      	mov	r0, r5
 8013a76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013a7a:	f842 0f04 	str.w	r0, [r2, #4]!
 8013a7e:	3301      	adds	r3, #1
 8013a80:	e7c1      	b.n	8013a06 <__lshift+0x4a>
 8013a82:	3904      	subs	r1, #4
 8013a84:	f853 2b04 	ldr.w	r2, [r3], #4
 8013a88:	f841 2f04 	str.w	r2, [r1, #4]!
 8013a8c:	4298      	cmp	r0, r3
 8013a8e:	d8f9      	bhi.n	8013a84 <__lshift+0xc8>
 8013a90:	e7ea      	b.n	8013a68 <__lshift+0xac>
 8013a92:	bf00      	nop
 8013a94:	080153e8 	.word	0x080153e8
 8013a98:	080153f9 	.word	0x080153f9

08013a9c <__mcmp>:
 8013a9c:	b530      	push	{r4, r5, lr}
 8013a9e:	6902      	ldr	r2, [r0, #16]
 8013aa0:	690c      	ldr	r4, [r1, #16]
 8013aa2:	1b12      	subs	r2, r2, r4
 8013aa4:	d10e      	bne.n	8013ac4 <__mcmp+0x28>
 8013aa6:	f100 0314 	add.w	r3, r0, #20
 8013aaa:	3114      	adds	r1, #20
 8013aac:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8013ab0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8013ab4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8013ab8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8013abc:	42a5      	cmp	r5, r4
 8013abe:	d003      	beq.n	8013ac8 <__mcmp+0x2c>
 8013ac0:	d305      	bcc.n	8013ace <__mcmp+0x32>
 8013ac2:	2201      	movs	r2, #1
 8013ac4:	4610      	mov	r0, r2
 8013ac6:	bd30      	pop	{r4, r5, pc}
 8013ac8:	4283      	cmp	r3, r0
 8013aca:	d3f3      	bcc.n	8013ab4 <__mcmp+0x18>
 8013acc:	e7fa      	b.n	8013ac4 <__mcmp+0x28>
 8013ace:	f04f 32ff 	mov.w	r2, #4294967295
 8013ad2:	e7f7      	b.n	8013ac4 <__mcmp+0x28>

08013ad4 <__mdiff>:
 8013ad4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ad8:	460c      	mov	r4, r1
 8013ada:	4606      	mov	r6, r0
 8013adc:	4611      	mov	r1, r2
 8013ade:	4620      	mov	r0, r4
 8013ae0:	4690      	mov	r8, r2
 8013ae2:	f7ff ffdb 	bl	8013a9c <__mcmp>
 8013ae6:	1e05      	subs	r5, r0, #0
 8013ae8:	d110      	bne.n	8013b0c <__mdiff+0x38>
 8013aea:	4629      	mov	r1, r5
 8013aec:	4630      	mov	r0, r6
 8013aee:	f7ff fd53 	bl	8013598 <_Balloc>
 8013af2:	b930      	cbnz	r0, 8013b02 <__mdiff+0x2e>
 8013af4:	4b3a      	ldr	r3, [pc, #232]	; (8013be0 <__mdiff+0x10c>)
 8013af6:	4602      	mov	r2, r0
 8013af8:	f240 2132 	movw	r1, #562	; 0x232
 8013afc:	4839      	ldr	r0, [pc, #228]	; (8013be4 <__mdiff+0x110>)
 8013afe:	f000 fbf5 	bl	80142ec <__assert_func>
 8013b02:	2301      	movs	r3, #1
 8013b04:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8013b08:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b0c:	bfa4      	itt	ge
 8013b0e:	4643      	movge	r3, r8
 8013b10:	46a0      	movge	r8, r4
 8013b12:	4630      	mov	r0, r6
 8013b14:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8013b18:	bfa6      	itte	ge
 8013b1a:	461c      	movge	r4, r3
 8013b1c:	2500      	movge	r5, #0
 8013b1e:	2501      	movlt	r5, #1
 8013b20:	f7ff fd3a 	bl	8013598 <_Balloc>
 8013b24:	b920      	cbnz	r0, 8013b30 <__mdiff+0x5c>
 8013b26:	4b2e      	ldr	r3, [pc, #184]	; (8013be0 <__mdiff+0x10c>)
 8013b28:	4602      	mov	r2, r0
 8013b2a:	f44f 7110 	mov.w	r1, #576	; 0x240
 8013b2e:	e7e5      	b.n	8013afc <__mdiff+0x28>
 8013b30:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8013b34:	6926      	ldr	r6, [r4, #16]
 8013b36:	60c5      	str	r5, [r0, #12]
 8013b38:	f104 0914 	add.w	r9, r4, #20
 8013b3c:	f108 0514 	add.w	r5, r8, #20
 8013b40:	f100 0e14 	add.w	lr, r0, #20
 8013b44:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8013b48:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8013b4c:	f108 0210 	add.w	r2, r8, #16
 8013b50:	46f2      	mov	sl, lr
 8013b52:	2100      	movs	r1, #0
 8013b54:	f859 3b04 	ldr.w	r3, [r9], #4
 8013b58:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8013b5c:	fa1f f883 	uxth.w	r8, r3
 8013b60:	fa11 f18b 	uxtah	r1, r1, fp
 8013b64:	0c1b      	lsrs	r3, r3, #16
 8013b66:	eba1 0808 	sub.w	r8, r1, r8
 8013b6a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8013b6e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8013b72:	fa1f f888 	uxth.w	r8, r8
 8013b76:	1419      	asrs	r1, r3, #16
 8013b78:	454e      	cmp	r6, r9
 8013b7a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8013b7e:	f84a 3b04 	str.w	r3, [sl], #4
 8013b82:	d8e7      	bhi.n	8013b54 <__mdiff+0x80>
 8013b84:	1b33      	subs	r3, r6, r4
 8013b86:	3b15      	subs	r3, #21
 8013b88:	f023 0303 	bic.w	r3, r3, #3
 8013b8c:	3304      	adds	r3, #4
 8013b8e:	3415      	adds	r4, #21
 8013b90:	42a6      	cmp	r6, r4
 8013b92:	bf38      	it	cc
 8013b94:	2304      	movcc	r3, #4
 8013b96:	441d      	add	r5, r3
 8013b98:	4473      	add	r3, lr
 8013b9a:	469e      	mov	lr, r3
 8013b9c:	462e      	mov	r6, r5
 8013b9e:	4566      	cmp	r6, ip
 8013ba0:	d30e      	bcc.n	8013bc0 <__mdiff+0xec>
 8013ba2:	f10c 0203 	add.w	r2, ip, #3
 8013ba6:	1b52      	subs	r2, r2, r5
 8013ba8:	f022 0203 	bic.w	r2, r2, #3
 8013bac:	3d03      	subs	r5, #3
 8013bae:	45ac      	cmp	ip, r5
 8013bb0:	bf38      	it	cc
 8013bb2:	2200      	movcc	r2, #0
 8013bb4:	441a      	add	r2, r3
 8013bb6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8013bba:	b17b      	cbz	r3, 8013bdc <__mdiff+0x108>
 8013bbc:	6107      	str	r7, [r0, #16]
 8013bbe:	e7a3      	b.n	8013b08 <__mdiff+0x34>
 8013bc0:	f856 8b04 	ldr.w	r8, [r6], #4
 8013bc4:	fa11 f288 	uxtah	r2, r1, r8
 8013bc8:	1414      	asrs	r4, r2, #16
 8013bca:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8013bce:	b292      	uxth	r2, r2
 8013bd0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8013bd4:	f84e 2b04 	str.w	r2, [lr], #4
 8013bd8:	1421      	asrs	r1, r4, #16
 8013bda:	e7e0      	b.n	8013b9e <__mdiff+0xca>
 8013bdc:	3f01      	subs	r7, #1
 8013bde:	e7ea      	b.n	8013bb6 <__mdiff+0xe2>
 8013be0:	080153e8 	.word	0x080153e8
 8013be4:	080153f9 	.word	0x080153f9

08013be8 <__d2b>:
 8013be8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013bec:	4689      	mov	r9, r1
 8013bee:	2101      	movs	r1, #1
 8013bf0:	ec57 6b10 	vmov	r6, r7, d0
 8013bf4:	4690      	mov	r8, r2
 8013bf6:	f7ff fccf 	bl	8013598 <_Balloc>
 8013bfa:	4604      	mov	r4, r0
 8013bfc:	b930      	cbnz	r0, 8013c0c <__d2b+0x24>
 8013bfe:	4602      	mov	r2, r0
 8013c00:	4b25      	ldr	r3, [pc, #148]	; (8013c98 <__d2b+0xb0>)
 8013c02:	4826      	ldr	r0, [pc, #152]	; (8013c9c <__d2b+0xb4>)
 8013c04:	f240 310a 	movw	r1, #778	; 0x30a
 8013c08:	f000 fb70 	bl	80142ec <__assert_func>
 8013c0c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8013c10:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8013c14:	bb35      	cbnz	r5, 8013c64 <__d2b+0x7c>
 8013c16:	2e00      	cmp	r6, #0
 8013c18:	9301      	str	r3, [sp, #4]
 8013c1a:	d028      	beq.n	8013c6e <__d2b+0x86>
 8013c1c:	4668      	mov	r0, sp
 8013c1e:	9600      	str	r6, [sp, #0]
 8013c20:	f7ff fd82 	bl	8013728 <__lo0bits>
 8013c24:	9900      	ldr	r1, [sp, #0]
 8013c26:	b300      	cbz	r0, 8013c6a <__d2b+0x82>
 8013c28:	9a01      	ldr	r2, [sp, #4]
 8013c2a:	f1c0 0320 	rsb	r3, r0, #32
 8013c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8013c32:	430b      	orrs	r3, r1
 8013c34:	40c2      	lsrs	r2, r0
 8013c36:	6163      	str	r3, [r4, #20]
 8013c38:	9201      	str	r2, [sp, #4]
 8013c3a:	9b01      	ldr	r3, [sp, #4]
 8013c3c:	61a3      	str	r3, [r4, #24]
 8013c3e:	2b00      	cmp	r3, #0
 8013c40:	bf14      	ite	ne
 8013c42:	2202      	movne	r2, #2
 8013c44:	2201      	moveq	r2, #1
 8013c46:	6122      	str	r2, [r4, #16]
 8013c48:	b1d5      	cbz	r5, 8013c80 <__d2b+0x98>
 8013c4a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8013c4e:	4405      	add	r5, r0
 8013c50:	f8c9 5000 	str.w	r5, [r9]
 8013c54:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8013c58:	f8c8 0000 	str.w	r0, [r8]
 8013c5c:	4620      	mov	r0, r4
 8013c5e:	b003      	add	sp, #12
 8013c60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013c64:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8013c68:	e7d5      	b.n	8013c16 <__d2b+0x2e>
 8013c6a:	6161      	str	r1, [r4, #20]
 8013c6c:	e7e5      	b.n	8013c3a <__d2b+0x52>
 8013c6e:	a801      	add	r0, sp, #4
 8013c70:	f7ff fd5a 	bl	8013728 <__lo0bits>
 8013c74:	9b01      	ldr	r3, [sp, #4]
 8013c76:	6163      	str	r3, [r4, #20]
 8013c78:	2201      	movs	r2, #1
 8013c7a:	6122      	str	r2, [r4, #16]
 8013c7c:	3020      	adds	r0, #32
 8013c7e:	e7e3      	b.n	8013c48 <__d2b+0x60>
 8013c80:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8013c84:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8013c88:	f8c9 0000 	str.w	r0, [r9]
 8013c8c:	6918      	ldr	r0, [r3, #16]
 8013c8e:	f7ff fd2b 	bl	80136e8 <__hi0bits>
 8013c92:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8013c96:	e7df      	b.n	8013c58 <__d2b+0x70>
 8013c98:	080153e8 	.word	0x080153e8
 8013c9c:	080153f9 	.word	0x080153f9

08013ca0 <_calloc_r>:
 8013ca0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013ca2:	fba1 2402 	umull	r2, r4, r1, r2
 8013ca6:	b94c      	cbnz	r4, 8013cbc <_calloc_r+0x1c>
 8013ca8:	4611      	mov	r1, r2
 8013caa:	9201      	str	r2, [sp, #4]
 8013cac:	f7fd fc68 	bl	8011580 <_malloc_r>
 8013cb0:	9a01      	ldr	r2, [sp, #4]
 8013cb2:	4605      	mov	r5, r0
 8013cb4:	b930      	cbnz	r0, 8013cc4 <_calloc_r+0x24>
 8013cb6:	4628      	mov	r0, r5
 8013cb8:	b003      	add	sp, #12
 8013cba:	bd30      	pop	{r4, r5, pc}
 8013cbc:	220c      	movs	r2, #12
 8013cbe:	6002      	str	r2, [r0, #0]
 8013cc0:	2500      	movs	r5, #0
 8013cc2:	e7f8      	b.n	8013cb6 <_calloc_r+0x16>
 8013cc4:	4621      	mov	r1, r4
 8013cc6:	f7fd fbe7 	bl	8011498 <memset>
 8013cca:	e7f4      	b.n	8013cb6 <_calloc_r+0x16>

08013ccc <__ssputs_r>:
 8013ccc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013cd0:	688e      	ldr	r6, [r1, #8]
 8013cd2:	429e      	cmp	r6, r3
 8013cd4:	4682      	mov	sl, r0
 8013cd6:	460c      	mov	r4, r1
 8013cd8:	4690      	mov	r8, r2
 8013cda:	461f      	mov	r7, r3
 8013cdc:	d838      	bhi.n	8013d50 <__ssputs_r+0x84>
 8013cde:	898a      	ldrh	r2, [r1, #12]
 8013ce0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8013ce4:	d032      	beq.n	8013d4c <__ssputs_r+0x80>
 8013ce6:	6825      	ldr	r5, [r4, #0]
 8013ce8:	6909      	ldr	r1, [r1, #16]
 8013cea:	eba5 0901 	sub.w	r9, r5, r1
 8013cee:	6965      	ldr	r5, [r4, #20]
 8013cf0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013cf4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013cf8:	3301      	adds	r3, #1
 8013cfa:	444b      	add	r3, r9
 8013cfc:	106d      	asrs	r5, r5, #1
 8013cfe:	429d      	cmp	r5, r3
 8013d00:	bf38      	it	cc
 8013d02:	461d      	movcc	r5, r3
 8013d04:	0553      	lsls	r3, r2, #21
 8013d06:	d531      	bpl.n	8013d6c <__ssputs_r+0xa0>
 8013d08:	4629      	mov	r1, r5
 8013d0a:	f7fd fc39 	bl	8011580 <_malloc_r>
 8013d0e:	4606      	mov	r6, r0
 8013d10:	b950      	cbnz	r0, 8013d28 <__ssputs_r+0x5c>
 8013d12:	230c      	movs	r3, #12
 8013d14:	f8ca 3000 	str.w	r3, [sl]
 8013d18:	89a3      	ldrh	r3, [r4, #12]
 8013d1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013d1e:	81a3      	strh	r3, [r4, #12]
 8013d20:	f04f 30ff 	mov.w	r0, #4294967295
 8013d24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013d28:	6921      	ldr	r1, [r4, #16]
 8013d2a:	464a      	mov	r2, r9
 8013d2c:	f7fd fba6 	bl	801147c <memcpy>
 8013d30:	89a3      	ldrh	r3, [r4, #12]
 8013d32:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8013d36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013d3a:	81a3      	strh	r3, [r4, #12]
 8013d3c:	6126      	str	r6, [r4, #16]
 8013d3e:	6165      	str	r5, [r4, #20]
 8013d40:	444e      	add	r6, r9
 8013d42:	eba5 0509 	sub.w	r5, r5, r9
 8013d46:	6026      	str	r6, [r4, #0]
 8013d48:	60a5      	str	r5, [r4, #8]
 8013d4a:	463e      	mov	r6, r7
 8013d4c:	42be      	cmp	r6, r7
 8013d4e:	d900      	bls.n	8013d52 <__ssputs_r+0x86>
 8013d50:	463e      	mov	r6, r7
 8013d52:	6820      	ldr	r0, [r4, #0]
 8013d54:	4632      	mov	r2, r6
 8013d56:	4641      	mov	r1, r8
 8013d58:	f000 fb2c 	bl	80143b4 <memmove>
 8013d5c:	68a3      	ldr	r3, [r4, #8]
 8013d5e:	1b9b      	subs	r3, r3, r6
 8013d60:	60a3      	str	r3, [r4, #8]
 8013d62:	6823      	ldr	r3, [r4, #0]
 8013d64:	4433      	add	r3, r6
 8013d66:	6023      	str	r3, [r4, #0]
 8013d68:	2000      	movs	r0, #0
 8013d6a:	e7db      	b.n	8013d24 <__ssputs_r+0x58>
 8013d6c:	462a      	mov	r2, r5
 8013d6e:	f000 fb3b 	bl	80143e8 <_realloc_r>
 8013d72:	4606      	mov	r6, r0
 8013d74:	2800      	cmp	r0, #0
 8013d76:	d1e1      	bne.n	8013d3c <__ssputs_r+0x70>
 8013d78:	6921      	ldr	r1, [r4, #16]
 8013d7a:	4650      	mov	r0, sl
 8013d7c:	f7fd fb94 	bl	80114a8 <_free_r>
 8013d80:	e7c7      	b.n	8013d12 <__ssputs_r+0x46>
	...

08013d84 <_svfiprintf_r>:
 8013d84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d88:	4698      	mov	r8, r3
 8013d8a:	898b      	ldrh	r3, [r1, #12]
 8013d8c:	061b      	lsls	r3, r3, #24
 8013d8e:	b09d      	sub	sp, #116	; 0x74
 8013d90:	4607      	mov	r7, r0
 8013d92:	460d      	mov	r5, r1
 8013d94:	4614      	mov	r4, r2
 8013d96:	d50e      	bpl.n	8013db6 <_svfiprintf_r+0x32>
 8013d98:	690b      	ldr	r3, [r1, #16]
 8013d9a:	b963      	cbnz	r3, 8013db6 <_svfiprintf_r+0x32>
 8013d9c:	2140      	movs	r1, #64	; 0x40
 8013d9e:	f7fd fbef 	bl	8011580 <_malloc_r>
 8013da2:	6028      	str	r0, [r5, #0]
 8013da4:	6128      	str	r0, [r5, #16]
 8013da6:	b920      	cbnz	r0, 8013db2 <_svfiprintf_r+0x2e>
 8013da8:	230c      	movs	r3, #12
 8013daa:	603b      	str	r3, [r7, #0]
 8013dac:	f04f 30ff 	mov.w	r0, #4294967295
 8013db0:	e0d1      	b.n	8013f56 <_svfiprintf_r+0x1d2>
 8013db2:	2340      	movs	r3, #64	; 0x40
 8013db4:	616b      	str	r3, [r5, #20]
 8013db6:	2300      	movs	r3, #0
 8013db8:	9309      	str	r3, [sp, #36]	; 0x24
 8013dba:	2320      	movs	r3, #32
 8013dbc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013dc0:	f8cd 800c 	str.w	r8, [sp, #12]
 8013dc4:	2330      	movs	r3, #48	; 0x30
 8013dc6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8013f70 <_svfiprintf_r+0x1ec>
 8013dca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013dce:	f04f 0901 	mov.w	r9, #1
 8013dd2:	4623      	mov	r3, r4
 8013dd4:	469a      	mov	sl, r3
 8013dd6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013dda:	b10a      	cbz	r2, 8013de0 <_svfiprintf_r+0x5c>
 8013ddc:	2a25      	cmp	r2, #37	; 0x25
 8013dde:	d1f9      	bne.n	8013dd4 <_svfiprintf_r+0x50>
 8013de0:	ebba 0b04 	subs.w	fp, sl, r4
 8013de4:	d00b      	beq.n	8013dfe <_svfiprintf_r+0x7a>
 8013de6:	465b      	mov	r3, fp
 8013de8:	4622      	mov	r2, r4
 8013dea:	4629      	mov	r1, r5
 8013dec:	4638      	mov	r0, r7
 8013dee:	f7ff ff6d 	bl	8013ccc <__ssputs_r>
 8013df2:	3001      	adds	r0, #1
 8013df4:	f000 80aa 	beq.w	8013f4c <_svfiprintf_r+0x1c8>
 8013df8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013dfa:	445a      	add	r2, fp
 8013dfc:	9209      	str	r2, [sp, #36]	; 0x24
 8013dfe:	f89a 3000 	ldrb.w	r3, [sl]
 8013e02:	2b00      	cmp	r3, #0
 8013e04:	f000 80a2 	beq.w	8013f4c <_svfiprintf_r+0x1c8>
 8013e08:	2300      	movs	r3, #0
 8013e0a:	f04f 32ff 	mov.w	r2, #4294967295
 8013e0e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013e12:	f10a 0a01 	add.w	sl, sl, #1
 8013e16:	9304      	str	r3, [sp, #16]
 8013e18:	9307      	str	r3, [sp, #28]
 8013e1a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013e1e:	931a      	str	r3, [sp, #104]	; 0x68
 8013e20:	4654      	mov	r4, sl
 8013e22:	2205      	movs	r2, #5
 8013e24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013e28:	4851      	ldr	r0, [pc, #324]	; (8013f70 <_svfiprintf_r+0x1ec>)
 8013e2a:	f7ec f9d9 	bl	80001e0 <memchr>
 8013e2e:	9a04      	ldr	r2, [sp, #16]
 8013e30:	b9d8      	cbnz	r0, 8013e6a <_svfiprintf_r+0xe6>
 8013e32:	06d0      	lsls	r0, r2, #27
 8013e34:	bf44      	itt	mi
 8013e36:	2320      	movmi	r3, #32
 8013e38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013e3c:	0711      	lsls	r1, r2, #28
 8013e3e:	bf44      	itt	mi
 8013e40:	232b      	movmi	r3, #43	; 0x2b
 8013e42:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013e46:	f89a 3000 	ldrb.w	r3, [sl]
 8013e4a:	2b2a      	cmp	r3, #42	; 0x2a
 8013e4c:	d015      	beq.n	8013e7a <_svfiprintf_r+0xf6>
 8013e4e:	9a07      	ldr	r2, [sp, #28]
 8013e50:	4654      	mov	r4, sl
 8013e52:	2000      	movs	r0, #0
 8013e54:	f04f 0c0a 	mov.w	ip, #10
 8013e58:	4621      	mov	r1, r4
 8013e5a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013e5e:	3b30      	subs	r3, #48	; 0x30
 8013e60:	2b09      	cmp	r3, #9
 8013e62:	d94e      	bls.n	8013f02 <_svfiprintf_r+0x17e>
 8013e64:	b1b0      	cbz	r0, 8013e94 <_svfiprintf_r+0x110>
 8013e66:	9207      	str	r2, [sp, #28]
 8013e68:	e014      	b.n	8013e94 <_svfiprintf_r+0x110>
 8013e6a:	eba0 0308 	sub.w	r3, r0, r8
 8013e6e:	fa09 f303 	lsl.w	r3, r9, r3
 8013e72:	4313      	orrs	r3, r2
 8013e74:	9304      	str	r3, [sp, #16]
 8013e76:	46a2      	mov	sl, r4
 8013e78:	e7d2      	b.n	8013e20 <_svfiprintf_r+0x9c>
 8013e7a:	9b03      	ldr	r3, [sp, #12]
 8013e7c:	1d19      	adds	r1, r3, #4
 8013e7e:	681b      	ldr	r3, [r3, #0]
 8013e80:	9103      	str	r1, [sp, #12]
 8013e82:	2b00      	cmp	r3, #0
 8013e84:	bfbb      	ittet	lt
 8013e86:	425b      	neglt	r3, r3
 8013e88:	f042 0202 	orrlt.w	r2, r2, #2
 8013e8c:	9307      	strge	r3, [sp, #28]
 8013e8e:	9307      	strlt	r3, [sp, #28]
 8013e90:	bfb8      	it	lt
 8013e92:	9204      	strlt	r2, [sp, #16]
 8013e94:	7823      	ldrb	r3, [r4, #0]
 8013e96:	2b2e      	cmp	r3, #46	; 0x2e
 8013e98:	d10c      	bne.n	8013eb4 <_svfiprintf_r+0x130>
 8013e9a:	7863      	ldrb	r3, [r4, #1]
 8013e9c:	2b2a      	cmp	r3, #42	; 0x2a
 8013e9e:	d135      	bne.n	8013f0c <_svfiprintf_r+0x188>
 8013ea0:	9b03      	ldr	r3, [sp, #12]
 8013ea2:	1d1a      	adds	r2, r3, #4
 8013ea4:	681b      	ldr	r3, [r3, #0]
 8013ea6:	9203      	str	r2, [sp, #12]
 8013ea8:	2b00      	cmp	r3, #0
 8013eaa:	bfb8      	it	lt
 8013eac:	f04f 33ff 	movlt.w	r3, #4294967295
 8013eb0:	3402      	adds	r4, #2
 8013eb2:	9305      	str	r3, [sp, #20]
 8013eb4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8013f80 <_svfiprintf_r+0x1fc>
 8013eb8:	7821      	ldrb	r1, [r4, #0]
 8013eba:	2203      	movs	r2, #3
 8013ebc:	4650      	mov	r0, sl
 8013ebe:	f7ec f98f 	bl	80001e0 <memchr>
 8013ec2:	b140      	cbz	r0, 8013ed6 <_svfiprintf_r+0x152>
 8013ec4:	2340      	movs	r3, #64	; 0x40
 8013ec6:	eba0 000a 	sub.w	r0, r0, sl
 8013eca:	fa03 f000 	lsl.w	r0, r3, r0
 8013ece:	9b04      	ldr	r3, [sp, #16]
 8013ed0:	4303      	orrs	r3, r0
 8013ed2:	3401      	adds	r4, #1
 8013ed4:	9304      	str	r3, [sp, #16]
 8013ed6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013eda:	4826      	ldr	r0, [pc, #152]	; (8013f74 <_svfiprintf_r+0x1f0>)
 8013edc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013ee0:	2206      	movs	r2, #6
 8013ee2:	f7ec f97d 	bl	80001e0 <memchr>
 8013ee6:	2800      	cmp	r0, #0
 8013ee8:	d038      	beq.n	8013f5c <_svfiprintf_r+0x1d8>
 8013eea:	4b23      	ldr	r3, [pc, #140]	; (8013f78 <_svfiprintf_r+0x1f4>)
 8013eec:	bb1b      	cbnz	r3, 8013f36 <_svfiprintf_r+0x1b2>
 8013eee:	9b03      	ldr	r3, [sp, #12]
 8013ef0:	3307      	adds	r3, #7
 8013ef2:	f023 0307 	bic.w	r3, r3, #7
 8013ef6:	3308      	adds	r3, #8
 8013ef8:	9303      	str	r3, [sp, #12]
 8013efa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013efc:	4433      	add	r3, r6
 8013efe:	9309      	str	r3, [sp, #36]	; 0x24
 8013f00:	e767      	b.n	8013dd2 <_svfiprintf_r+0x4e>
 8013f02:	fb0c 3202 	mla	r2, ip, r2, r3
 8013f06:	460c      	mov	r4, r1
 8013f08:	2001      	movs	r0, #1
 8013f0a:	e7a5      	b.n	8013e58 <_svfiprintf_r+0xd4>
 8013f0c:	2300      	movs	r3, #0
 8013f0e:	3401      	adds	r4, #1
 8013f10:	9305      	str	r3, [sp, #20]
 8013f12:	4619      	mov	r1, r3
 8013f14:	f04f 0c0a 	mov.w	ip, #10
 8013f18:	4620      	mov	r0, r4
 8013f1a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013f1e:	3a30      	subs	r2, #48	; 0x30
 8013f20:	2a09      	cmp	r2, #9
 8013f22:	d903      	bls.n	8013f2c <_svfiprintf_r+0x1a8>
 8013f24:	2b00      	cmp	r3, #0
 8013f26:	d0c5      	beq.n	8013eb4 <_svfiprintf_r+0x130>
 8013f28:	9105      	str	r1, [sp, #20]
 8013f2a:	e7c3      	b.n	8013eb4 <_svfiprintf_r+0x130>
 8013f2c:	fb0c 2101 	mla	r1, ip, r1, r2
 8013f30:	4604      	mov	r4, r0
 8013f32:	2301      	movs	r3, #1
 8013f34:	e7f0      	b.n	8013f18 <_svfiprintf_r+0x194>
 8013f36:	ab03      	add	r3, sp, #12
 8013f38:	9300      	str	r3, [sp, #0]
 8013f3a:	462a      	mov	r2, r5
 8013f3c:	4b0f      	ldr	r3, [pc, #60]	; (8013f7c <_svfiprintf_r+0x1f8>)
 8013f3e:	a904      	add	r1, sp, #16
 8013f40:	4638      	mov	r0, r7
 8013f42:	f7fd fc31 	bl	80117a8 <_printf_float>
 8013f46:	1c42      	adds	r2, r0, #1
 8013f48:	4606      	mov	r6, r0
 8013f4a:	d1d6      	bne.n	8013efa <_svfiprintf_r+0x176>
 8013f4c:	89ab      	ldrh	r3, [r5, #12]
 8013f4e:	065b      	lsls	r3, r3, #25
 8013f50:	f53f af2c 	bmi.w	8013dac <_svfiprintf_r+0x28>
 8013f54:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013f56:	b01d      	add	sp, #116	; 0x74
 8013f58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013f5c:	ab03      	add	r3, sp, #12
 8013f5e:	9300      	str	r3, [sp, #0]
 8013f60:	462a      	mov	r2, r5
 8013f62:	4b06      	ldr	r3, [pc, #24]	; (8013f7c <_svfiprintf_r+0x1f8>)
 8013f64:	a904      	add	r1, sp, #16
 8013f66:	4638      	mov	r0, r7
 8013f68:	f7fd fec2 	bl	8011cf0 <_printf_i>
 8013f6c:	e7eb      	b.n	8013f46 <_svfiprintf_r+0x1c2>
 8013f6e:	bf00      	nop
 8013f70:	08015554 	.word	0x08015554
 8013f74:	0801555e 	.word	0x0801555e
 8013f78:	080117a9 	.word	0x080117a9
 8013f7c:	08013ccd 	.word	0x08013ccd
 8013f80:	0801555a 	.word	0x0801555a

08013f84 <__sfputc_r>:
 8013f84:	6893      	ldr	r3, [r2, #8]
 8013f86:	3b01      	subs	r3, #1
 8013f88:	2b00      	cmp	r3, #0
 8013f8a:	b410      	push	{r4}
 8013f8c:	6093      	str	r3, [r2, #8]
 8013f8e:	da08      	bge.n	8013fa2 <__sfputc_r+0x1e>
 8013f90:	6994      	ldr	r4, [r2, #24]
 8013f92:	42a3      	cmp	r3, r4
 8013f94:	db01      	blt.n	8013f9a <__sfputc_r+0x16>
 8013f96:	290a      	cmp	r1, #10
 8013f98:	d103      	bne.n	8013fa2 <__sfputc_r+0x1e>
 8013f9a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013f9e:	f7fe ba53 	b.w	8012448 <__swbuf_r>
 8013fa2:	6813      	ldr	r3, [r2, #0]
 8013fa4:	1c58      	adds	r0, r3, #1
 8013fa6:	6010      	str	r0, [r2, #0]
 8013fa8:	7019      	strb	r1, [r3, #0]
 8013faa:	4608      	mov	r0, r1
 8013fac:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013fb0:	4770      	bx	lr

08013fb2 <__sfputs_r>:
 8013fb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013fb4:	4606      	mov	r6, r0
 8013fb6:	460f      	mov	r7, r1
 8013fb8:	4614      	mov	r4, r2
 8013fba:	18d5      	adds	r5, r2, r3
 8013fbc:	42ac      	cmp	r4, r5
 8013fbe:	d101      	bne.n	8013fc4 <__sfputs_r+0x12>
 8013fc0:	2000      	movs	r0, #0
 8013fc2:	e007      	b.n	8013fd4 <__sfputs_r+0x22>
 8013fc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013fc8:	463a      	mov	r2, r7
 8013fca:	4630      	mov	r0, r6
 8013fcc:	f7ff ffda 	bl	8013f84 <__sfputc_r>
 8013fd0:	1c43      	adds	r3, r0, #1
 8013fd2:	d1f3      	bne.n	8013fbc <__sfputs_r+0xa>
 8013fd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013fd8 <_vfiprintf_r>:
 8013fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013fdc:	460d      	mov	r5, r1
 8013fde:	b09d      	sub	sp, #116	; 0x74
 8013fe0:	4614      	mov	r4, r2
 8013fe2:	4698      	mov	r8, r3
 8013fe4:	4606      	mov	r6, r0
 8013fe6:	b118      	cbz	r0, 8013ff0 <_vfiprintf_r+0x18>
 8013fe8:	6983      	ldr	r3, [r0, #24]
 8013fea:	b90b      	cbnz	r3, 8013ff0 <_vfiprintf_r+0x18>
 8013fec:	f7fd f97c 	bl	80112e8 <__sinit>
 8013ff0:	4b89      	ldr	r3, [pc, #548]	; (8014218 <_vfiprintf_r+0x240>)
 8013ff2:	429d      	cmp	r5, r3
 8013ff4:	d11b      	bne.n	801402e <_vfiprintf_r+0x56>
 8013ff6:	6875      	ldr	r5, [r6, #4]
 8013ff8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013ffa:	07d9      	lsls	r1, r3, #31
 8013ffc:	d405      	bmi.n	801400a <_vfiprintf_r+0x32>
 8013ffe:	89ab      	ldrh	r3, [r5, #12]
 8014000:	059a      	lsls	r2, r3, #22
 8014002:	d402      	bmi.n	801400a <_vfiprintf_r+0x32>
 8014004:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014006:	f7f3 f815 	bl	8007034 <__retarget_lock_acquire_recursive>
 801400a:	89ab      	ldrh	r3, [r5, #12]
 801400c:	071b      	lsls	r3, r3, #28
 801400e:	d501      	bpl.n	8014014 <_vfiprintf_r+0x3c>
 8014010:	692b      	ldr	r3, [r5, #16]
 8014012:	b9eb      	cbnz	r3, 8014050 <_vfiprintf_r+0x78>
 8014014:	4629      	mov	r1, r5
 8014016:	4630      	mov	r0, r6
 8014018:	f7fe fa7a 	bl	8012510 <__swsetup_r>
 801401c:	b1c0      	cbz	r0, 8014050 <_vfiprintf_r+0x78>
 801401e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014020:	07dc      	lsls	r4, r3, #31
 8014022:	d50e      	bpl.n	8014042 <_vfiprintf_r+0x6a>
 8014024:	f04f 30ff 	mov.w	r0, #4294967295
 8014028:	b01d      	add	sp, #116	; 0x74
 801402a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801402e:	4b7b      	ldr	r3, [pc, #492]	; (801421c <_vfiprintf_r+0x244>)
 8014030:	429d      	cmp	r5, r3
 8014032:	d101      	bne.n	8014038 <_vfiprintf_r+0x60>
 8014034:	68b5      	ldr	r5, [r6, #8]
 8014036:	e7df      	b.n	8013ff8 <_vfiprintf_r+0x20>
 8014038:	4b79      	ldr	r3, [pc, #484]	; (8014220 <_vfiprintf_r+0x248>)
 801403a:	429d      	cmp	r5, r3
 801403c:	bf08      	it	eq
 801403e:	68f5      	ldreq	r5, [r6, #12]
 8014040:	e7da      	b.n	8013ff8 <_vfiprintf_r+0x20>
 8014042:	89ab      	ldrh	r3, [r5, #12]
 8014044:	0598      	lsls	r0, r3, #22
 8014046:	d4ed      	bmi.n	8014024 <_vfiprintf_r+0x4c>
 8014048:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801404a:	f7f3 f807 	bl	800705c <__retarget_lock_release_recursive>
 801404e:	e7e9      	b.n	8014024 <_vfiprintf_r+0x4c>
 8014050:	2300      	movs	r3, #0
 8014052:	9309      	str	r3, [sp, #36]	; 0x24
 8014054:	2320      	movs	r3, #32
 8014056:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801405a:	f8cd 800c 	str.w	r8, [sp, #12]
 801405e:	2330      	movs	r3, #48	; 0x30
 8014060:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8014224 <_vfiprintf_r+0x24c>
 8014064:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014068:	f04f 0901 	mov.w	r9, #1
 801406c:	4623      	mov	r3, r4
 801406e:	469a      	mov	sl, r3
 8014070:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014074:	b10a      	cbz	r2, 801407a <_vfiprintf_r+0xa2>
 8014076:	2a25      	cmp	r2, #37	; 0x25
 8014078:	d1f9      	bne.n	801406e <_vfiprintf_r+0x96>
 801407a:	ebba 0b04 	subs.w	fp, sl, r4
 801407e:	d00b      	beq.n	8014098 <_vfiprintf_r+0xc0>
 8014080:	465b      	mov	r3, fp
 8014082:	4622      	mov	r2, r4
 8014084:	4629      	mov	r1, r5
 8014086:	4630      	mov	r0, r6
 8014088:	f7ff ff93 	bl	8013fb2 <__sfputs_r>
 801408c:	3001      	adds	r0, #1
 801408e:	f000 80aa 	beq.w	80141e6 <_vfiprintf_r+0x20e>
 8014092:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014094:	445a      	add	r2, fp
 8014096:	9209      	str	r2, [sp, #36]	; 0x24
 8014098:	f89a 3000 	ldrb.w	r3, [sl]
 801409c:	2b00      	cmp	r3, #0
 801409e:	f000 80a2 	beq.w	80141e6 <_vfiprintf_r+0x20e>
 80140a2:	2300      	movs	r3, #0
 80140a4:	f04f 32ff 	mov.w	r2, #4294967295
 80140a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80140ac:	f10a 0a01 	add.w	sl, sl, #1
 80140b0:	9304      	str	r3, [sp, #16]
 80140b2:	9307      	str	r3, [sp, #28]
 80140b4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80140b8:	931a      	str	r3, [sp, #104]	; 0x68
 80140ba:	4654      	mov	r4, sl
 80140bc:	2205      	movs	r2, #5
 80140be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80140c2:	4858      	ldr	r0, [pc, #352]	; (8014224 <_vfiprintf_r+0x24c>)
 80140c4:	f7ec f88c 	bl	80001e0 <memchr>
 80140c8:	9a04      	ldr	r2, [sp, #16]
 80140ca:	b9d8      	cbnz	r0, 8014104 <_vfiprintf_r+0x12c>
 80140cc:	06d1      	lsls	r1, r2, #27
 80140ce:	bf44      	itt	mi
 80140d0:	2320      	movmi	r3, #32
 80140d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80140d6:	0713      	lsls	r3, r2, #28
 80140d8:	bf44      	itt	mi
 80140da:	232b      	movmi	r3, #43	; 0x2b
 80140dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80140e0:	f89a 3000 	ldrb.w	r3, [sl]
 80140e4:	2b2a      	cmp	r3, #42	; 0x2a
 80140e6:	d015      	beq.n	8014114 <_vfiprintf_r+0x13c>
 80140e8:	9a07      	ldr	r2, [sp, #28]
 80140ea:	4654      	mov	r4, sl
 80140ec:	2000      	movs	r0, #0
 80140ee:	f04f 0c0a 	mov.w	ip, #10
 80140f2:	4621      	mov	r1, r4
 80140f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80140f8:	3b30      	subs	r3, #48	; 0x30
 80140fa:	2b09      	cmp	r3, #9
 80140fc:	d94e      	bls.n	801419c <_vfiprintf_r+0x1c4>
 80140fe:	b1b0      	cbz	r0, 801412e <_vfiprintf_r+0x156>
 8014100:	9207      	str	r2, [sp, #28]
 8014102:	e014      	b.n	801412e <_vfiprintf_r+0x156>
 8014104:	eba0 0308 	sub.w	r3, r0, r8
 8014108:	fa09 f303 	lsl.w	r3, r9, r3
 801410c:	4313      	orrs	r3, r2
 801410e:	9304      	str	r3, [sp, #16]
 8014110:	46a2      	mov	sl, r4
 8014112:	e7d2      	b.n	80140ba <_vfiprintf_r+0xe2>
 8014114:	9b03      	ldr	r3, [sp, #12]
 8014116:	1d19      	adds	r1, r3, #4
 8014118:	681b      	ldr	r3, [r3, #0]
 801411a:	9103      	str	r1, [sp, #12]
 801411c:	2b00      	cmp	r3, #0
 801411e:	bfbb      	ittet	lt
 8014120:	425b      	neglt	r3, r3
 8014122:	f042 0202 	orrlt.w	r2, r2, #2
 8014126:	9307      	strge	r3, [sp, #28]
 8014128:	9307      	strlt	r3, [sp, #28]
 801412a:	bfb8      	it	lt
 801412c:	9204      	strlt	r2, [sp, #16]
 801412e:	7823      	ldrb	r3, [r4, #0]
 8014130:	2b2e      	cmp	r3, #46	; 0x2e
 8014132:	d10c      	bne.n	801414e <_vfiprintf_r+0x176>
 8014134:	7863      	ldrb	r3, [r4, #1]
 8014136:	2b2a      	cmp	r3, #42	; 0x2a
 8014138:	d135      	bne.n	80141a6 <_vfiprintf_r+0x1ce>
 801413a:	9b03      	ldr	r3, [sp, #12]
 801413c:	1d1a      	adds	r2, r3, #4
 801413e:	681b      	ldr	r3, [r3, #0]
 8014140:	9203      	str	r2, [sp, #12]
 8014142:	2b00      	cmp	r3, #0
 8014144:	bfb8      	it	lt
 8014146:	f04f 33ff 	movlt.w	r3, #4294967295
 801414a:	3402      	adds	r4, #2
 801414c:	9305      	str	r3, [sp, #20]
 801414e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8014234 <_vfiprintf_r+0x25c>
 8014152:	7821      	ldrb	r1, [r4, #0]
 8014154:	2203      	movs	r2, #3
 8014156:	4650      	mov	r0, sl
 8014158:	f7ec f842 	bl	80001e0 <memchr>
 801415c:	b140      	cbz	r0, 8014170 <_vfiprintf_r+0x198>
 801415e:	2340      	movs	r3, #64	; 0x40
 8014160:	eba0 000a 	sub.w	r0, r0, sl
 8014164:	fa03 f000 	lsl.w	r0, r3, r0
 8014168:	9b04      	ldr	r3, [sp, #16]
 801416a:	4303      	orrs	r3, r0
 801416c:	3401      	adds	r4, #1
 801416e:	9304      	str	r3, [sp, #16]
 8014170:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014174:	482c      	ldr	r0, [pc, #176]	; (8014228 <_vfiprintf_r+0x250>)
 8014176:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801417a:	2206      	movs	r2, #6
 801417c:	f7ec f830 	bl	80001e0 <memchr>
 8014180:	2800      	cmp	r0, #0
 8014182:	d03f      	beq.n	8014204 <_vfiprintf_r+0x22c>
 8014184:	4b29      	ldr	r3, [pc, #164]	; (801422c <_vfiprintf_r+0x254>)
 8014186:	bb1b      	cbnz	r3, 80141d0 <_vfiprintf_r+0x1f8>
 8014188:	9b03      	ldr	r3, [sp, #12]
 801418a:	3307      	adds	r3, #7
 801418c:	f023 0307 	bic.w	r3, r3, #7
 8014190:	3308      	adds	r3, #8
 8014192:	9303      	str	r3, [sp, #12]
 8014194:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014196:	443b      	add	r3, r7
 8014198:	9309      	str	r3, [sp, #36]	; 0x24
 801419a:	e767      	b.n	801406c <_vfiprintf_r+0x94>
 801419c:	fb0c 3202 	mla	r2, ip, r2, r3
 80141a0:	460c      	mov	r4, r1
 80141a2:	2001      	movs	r0, #1
 80141a4:	e7a5      	b.n	80140f2 <_vfiprintf_r+0x11a>
 80141a6:	2300      	movs	r3, #0
 80141a8:	3401      	adds	r4, #1
 80141aa:	9305      	str	r3, [sp, #20]
 80141ac:	4619      	mov	r1, r3
 80141ae:	f04f 0c0a 	mov.w	ip, #10
 80141b2:	4620      	mov	r0, r4
 80141b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80141b8:	3a30      	subs	r2, #48	; 0x30
 80141ba:	2a09      	cmp	r2, #9
 80141bc:	d903      	bls.n	80141c6 <_vfiprintf_r+0x1ee>
 80141be:	2b00      	cmp	r3, #0
 80141c0:	d0c5      	beq.n	801414e <_vfiprintf_r+0x176>
 80141c2:	9105      	str	r1, [sp, #20]
 80141c4:	e7c3      	b.n	801414e <_vfiprintf_r+0x176>
 80141c6:	fb0c 2101 	mla	r1, ip, r1, r2
 80141ca:	4604      	mov	r4, r0
 80141cc:	2301      	movs	r3, #1
 80141ce:	e7f0      	b.n	80141b2 <_vfiprintf_r+0x1da>
 80141d0:	ab03      	add	r3, sp, #12
 80141d2:	9300      	str	r3, [sp, #0]
 80141d4:	462a      	mov	r2, r5
 80141d6:	4b16      	ldr	r3, [pc, #88]	; (8014230 <_vfiprintf_r+0x258>)
 80141d8:	a904      	add	r1, sp, #16
 80141da:	4630      	mov	r0, r6
 80141dc:	f7fd fae4 	bl	80117a8 <_printf_float>
 80141e0:	4607      	mov	r7, r0
 80141e2:	1c78      	adds	r0, r7, #1
 80141e4:	d1d6      	bne.n	8014194 <_vfiprintf_r+0x1bc>
 80141e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80141e8:	07d9      	lsls	r1, r3, #31
 80141ea:	d405      	bmi.n	80141f8 <_vfiprintf_r+0x220>
 80141ec:	89ab      	ldrh	r3, [r5, #12]
 80141ee:	059a      	lsls	r2, r3, #22
 80141f0:	d402      	bmi.n	80141f8 <_vfiprintf_r+0x220>
 80141f2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80141f4:	f7f2 ff32 	bl	800705c <__retarget_lock_release_recursive>
 80141f8:	89ab      	ldrh	r3, [r5, #12]
 80141fa:	065b      	lsls	r3, r3, #25
 80141fc:	f53f af12 	bmi.w	8014024 <_vfiprintf_r+0x4c>
 8014200:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014202:	e711      	b.n	8014028 <_vfiprintf_r+0x50>
 8014204:	ab03      	add	r3, sp, #12
 8014206:	9300      	str	r3, [sp, #0]
 8014208:	462a      	mov	r2, r5
 801420a:	4b09      	ldr	r3, [pc, #36]	; (8014230 <_vfiprintf_r+0x258>)
 801420c:	a904      	add	r1, sp, #16
 801420e:	4630      	mov	r0, r6
 8014210:	f7fd fd6e 	bl	8011cf0 <_printf_i>
 8014214:	e7e4      	b.n	80141e0 <_vfiprintf_r+0x208>
 8014216:	bf00      	nop
 8014218:	080151f0 	.word	0x080151f0
 801421c:	08015210 	.word	0x08015210
 8014220:	080151d0 	.word	0x080151d0
 8014224:	08015554 	.word	0x08015554
 8014228:	0801555e 	.word	0x0801555e
 801422c:	080117a9 	.word	0x080117a9
 8014230:	08013fb3 	.word	0x08013fb3
 8014234:	0801555a 	.word	0x0801555a

08014238 <_putc_r>:
 8014238:	b570      	push	{r4, r5, r6, lr}
 801423a:	460d      	mov	r5, r1
 801423c:	4614      	mov	r4, r2
 801423e:	4606      	mov	r6, r0
 8014240:	b118      	cbz	r0, 801424a <_putc_r+0x12>
 8014242:	6983      	ldr	r3, [r0, #24]
 8014244:	b90b      	cbnz	r3, 801424a <_putc_r+0x12>
 8014246:	f7fd f84f 	bl	80112e8 <__sinit>
 801424a:	4b1c      	ldr	r3, [pc, #112]	; (80142bc <_putc_r+0x84>)
 801424c:	429c      	cmp	r4, r3
 801424e:	d124      	bne.n	801429a <_putc_r+0x62>
 8014250:	6874      	ldr	r4, [r6, #4]
 8014252:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014254:	07d8      	lsls	r0, r3, #31
 8014256:	d405      	bmi.n	8014264 <_putc_r+0x2c>
 8014258:	89a3      	ldrh	r3, [r4, #12]
 801425a:	0599      	lsls	r1, r3, #22
 801425c:	d402      	bmi.n	8014264 <_putc_r+0x2c>
 801425e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014260:	f7f2 fee8 	bl	8007034 <__retarget_lock_acquire_recursive>
 8014264:	68a3      	ldr	r3, [r4, #8]
 8014266:	3b01      	subs	r3, #1
 8014268:	2b00      	cmp	r3, #0
 801426a:	60a3      	str	r3, [r4, #8]
 801426c:	da05      	bge.n	801427a <_putc_r+0x42>
 801426e:	69a2      	ldr	r2, [r4, #24]
 8014270:	4293      	cmp	r3, r2
 8014272:	db1c      	blt.n	80142ae <_putc_r+0x76>
 8014274:	b2eb      	uxtb	r3, r5
 8014276:	2b0a      	cmp	r3, #10
 8014278:	d019      	beq.n	80142ae <_putc_r+0x76>
 801427a:	6823      	ldr	r3, [r4, #0]
 801427c:	1c5a      	adds	r2, r3, #1
 801427e:	6022      	str	r2, [r4, #0]
 8014280:	701d      	strb	r5, [r3, #0]
 8014282:	b2ed      	uxtb	r5, r5
 8014284:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014286:	07da      	lsls	r2, r3, #31
 8014288:	d405      	bmi.n	8014296 <_putc_r+0x5e>
 801428a:	89a3      	ldrh	r3, [r4, #12]
 801428c:	059b      	lsls	r3, r3, #22
 801428e:	d402      	bmi.n	8014296 <_putc_r+0x5e>
 8014290:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014292:	f7f2 fee3 	bl	800705c <__retarget_lock_release_recursive>
 8014296:	4628      	mov	r0, r5
 8014298:	bd70      	pop	{r4, r5, r6, pc}
 801429a:	4b09      	ldr	r3, [pc, #36]	; (80142c0 <_putc_r+0x88>)
 801429c:	429c      	cmp	r4, r3
 801429e:	d101      	bne.n	80142a4 <_putc_r+0x6c>
 80142a0:	68b4      	ldr	r4, [r6, #8]
 80142a2:	e7d6      	b.n	8014252 <_putc_r+0x1a>
 80142a4:	4b07      	ldr	r3, [pc, #28]	; (80142c4 <_putc_r+0x8c>)
 80142a6:	429c      	cmp	r4, r3
 80142a8:	bf08      	it	eq
 80142aa:	68f4      	ldreq	r4, [r6, #12]
 80142ac:	e7d1      	b.n	8014252 <_putc_r+0x1a>
 80142ae:	4629      	mov	r1, r5
 80142b0:	4622      	mov	r2, r4
 80142b2:	4630      	mov	r0, r6
 80142b4:	f7fe f8c8 	bl	8012448 <__swbuf_r>
 80142b8:	4605      	mov	r5, r0
 80142ba:	e7e3      	b.n	8014284 <_putc_r+0x4c>
 80142bc:	080151f0 	.word	0x080151f0
 80142c0:	08015210 	.word	0x08015210
 80142c4:	080151d0 	.word	0x080151d0

080142c8 <_read_r>:
 80142c8:	b538      	push	{r3, r4, r5, lr}
 80142ca:	4d07      	ldr	r5, [pc, #28]	; (80142e8 <_read_r+0x20>)
 80142cc:	4604      	mov	r4, r0
 80142ce:	4608      	mov	r0, r1
 80142d0:	4611      	mov	r1, r2
 80142d2:	2200      	movs	r2, #0
 80142d4:	602a      	str	r2, [r5, #0]
 80142d6:	461a      	mov	r2, r3
 80142d8:	f7f2 fd2c 	bl	8006d34 <_read>
 80142dc:	1c43      	adds	r3, r0, #1
 80142de:	d102      	bne.n	80142e6 <_read_r+0x1e>
 80142e0:	682b      	ldr	r3, [r5, #0]
 80142e2:	b103      	cbz	r3, 80142e6 <_read_r+0x1e>
 80142e4:	6023      	str	r3, [r4, #0]
 80142e6:	bd38      	pop	{r3, r4, r5, pc}
 80142e8:	20005ca0 	.word	0x20005ca0

080142ec <__assert_func>:
 80142ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80142ee:	4614      	mov	r4, r2
 80142f0:	461a      	mov	r2, r3
 80142f2:	4b09      	ldr	r3, [pc, #36]	; (8014318 <__assert_func+0x2c>)
 80142f4:	681b      	ldr	r3, [r3, #0]
 80142f6:	4605      	mov	r5, r0
 80142f8:	68d8      	ldr	r0, [r3, #12]
 80142fa:	b14c      	cbz	r4, 8014310 <__assert_func+0x24>
 80142fc:	4b07      	ldr	r3, [pc, #28]	; (801431c <__assert_func+0x30>)
 80142fe:	9100      	str	r1, [sp, #0]
 8014300:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014304:	4906      	ldr	r1, [pc, #24]	; (8014320 <__assert_func+0x34>)
 8014306:	462b      	mov	r3, r5
 8014308:	f000 f80e 	bl	8014328 <fiprintf>
 801430c:	f7fc ff86 	bl	801121c <abort>
 8014310:	4b04      	ldr	r3, [pc, #16]	; (8014324 <__assert_func+0x38>)
 8014312:	461c      	mov	r4, r3
 8014314:	e7f3      	b.n	80142fe <__assert_func+0x12>
 8014316:	bf00      	nop
 8014318:	20000078 	.word	0x20000078
 801431c:	08015565 	.word	0x08015565
 8014320:	08015572 	.word	0x08015572
 8014324:	080155a0 	.word	0x080155a0

08014328 <fiprintf>:
 8014328:	b40e      	push	{r1, r2, r3}
 801432a:	b503      	push	{r0, r1, lr}
 801432c:	4601      	mov	r1, r0
 801432e:	ab03      	add	r3, sp, #12
 8014330:	4805      	ldr	r0, [pc, #20]	; (8014348 <fiprintf+0x20>)
 8014332:	f853 2b04 	ldr.w	r2, [r3], #4
 8014336:	6800      	ldr	r0, [r0, #0]
 8014338:	9301      	str	r3, [sp, #4]
 801433a:	f7ff fe4d 	bl	8013fd8 <_vfiprintf_r>
 801433e:	b002      	add	sp, #8
 8014340:	f85d eb04 	ldr.w	lr, [sp], #4
 8014344:	b003      	add	sp, #12
 8014346:	4770      	bx	lr
 8014348:	20000078 	.word	0x20000078

0801434c <_fstat_r>:
 801434c:	b538      	push	{r3, r4, r5, lr}
 801434e:	4d07      	ldr	r5, [pc, #28]	; (801436c <_fstat_r+0x20>)
 8014350:	2300      	movs	r3, #0
 8014352:	4604      	mov	r4, r0
 8014354:	4608      	mov	r0, r1
 8014356:	4611      	mov	r1, r2
 8014358:	602b      	str	r3, [r5, #0]
 801435a:	f7f2 fd30 	bl	8006dbe <_fstat>
 801435e:	1c43      	adds	r3, r0, #1
 8014360:	d102      	bne.n	8014368 <_fstat_r+0x1c>
 8014362:	682b      	ldr	r3, [r5, #0]
 8014364:	b103      	cbz	r3, 8014368 <_fstat_r+0x1c>
 8014366:	6023      	str	r3, [r4, #0]
 8014368:	bd38      	pop	{r3, r4, r5, pc}
 801436a:	bf00      	nop
 801436c:	20005ca0 	.word	0x20005ca0

08014370 <_isatty_r>:
 8014370:	b538      	push	{r3, r4, r5, lr}
 8014372:	4d06      	ldr	r5, [pc, #24]	; (801438c <_isatty_r+0x1c>)
 8014374:	2300      	movs	r3, #0
 8014376:	4604      	mov	r4, r0
 8014378:	4608      	mov	r0, r1
 801437a:	602b      	str	r3, [r5, #0]
 801437c:	f7f2 fd2f 	bl	8006dde <_isatty>
 8014380:	1c43      	adds	r3, r0, #1
 8014382:	d102      	bne.n	801438a <_isatty_r+0x1a>
 8014384:	682b      	ldr	r3, [r5, #0]
 8014386:	b103      	cbz	r3, 801438a <_isatty_r+0x1a>
 8014388:	6023      	str	r3, [r4, #0]
 801438a:	bd38      	pop	{r3, r4, r5, pc}
 801438c:	20005ca0 	.word	0x20005ca0

08014390 <__ascii_mbtowc>:
 8014390:	b082      	sub	sp, #8
 8014392:	b901      	cbnz	r1, 8014396 <__ascii_mbtowc+0x6>
 8014394:	a901      	add	r1, sp, #4
 8014396:	b142      	cbz	r2, 80143aa <__ascii_mbtowc+0x1a>
 8014398:	b14b      	cbz	r3, 80143ae <__ascii_mbtowc+0x1e>
 801439a:	7813      	ldrb	r3, [r2, #0]
 801439c:	600b      	str	r3, [r1, #0]
 801439e:	7812      	ldrb	r2, [r2, #0]
 80143a0:	1e10      	subs	r0, r2, #0
 80143a2:	bf18      	it	ne
 80143a4:	2001      	movne	r0, #1
 80143a6:	b002      	add	sp, #8
 80143a8:	4770      	bx	lr
 80143aa:	4610      	mov	r0, r2
 80143ac:	e7fb      	b.n	80143a6 <__ascii_mbtowc+0x16>
 80143ae:	f06f 0001 	mvn.w	r0, #1
 80143b2:	e7f8      	b.n	80143a6 <__ascii_mbtowc+0x16>

080143b4 <memmove>:
 80143b4:	4288      	cmp	r0, r1
 80143b6:	b510      	push	{r4, lr}
 80143b8:	eb01 0402 	add.w	r4, r1, r2
 80143bc:	d902      	bls.n	80143c4 <memmove+0x10>
 80143be:	4284      	cmp	r4, r0
 80143c0:	4623      	mov	r3, r4
 80143c2:	d807      	bhi.n	80143d4 <memmove+0x20>
 80143c4:	1e43      	subs	r3, r0, #1
 80143c6:	42a1      	cmp	r1, r4
 80143c8:	d008      	beq.n	80143dc <memmove+0x28>
 80143ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 80143ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 80143d2:	e7f8      	b.n	80143c6 <memmove+0x12>
 80143d4:	4402      	add	r2, r0
 80143d6:	4601      	mov	r1, r0
 80143d8:	428a      	cmp	r2, r1
 80143da:	d100      	bne.n	80143de <memmove+0x2a>
 80143dc:	bd10      	pop	{r4, pc}
 80143de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80143e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80143e6:	e7f7      	b.n	80143d8 <memmove+0x24>

080143e8 <_realloc_r>:
 80143e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80143ec:	4680      	mov	r8, r0
 80143ee:	4614      	mov	r4, r2
 80143f0:	460e      	mov	r6, r1
 80143f2:	b921      	cbnz	r1, 80143fe <_realloc_r+0x16>
 80143f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80143f8:	4611      	mov	r1, r2
 80143fa:	f7fd b8c1 	b.w	8011580 <_malloc_r>
 80143fe:	b92a      	cbnz	r2, 801440c <_realloc_r+0x24>
 8014400:	f7fd f852 	bl	80114a8 <_free_r>
 8014404:	4625      	mov	r5, r4
 8014406:	4628      	mov	r0, r5
 8014408:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801440c:	f000 f828 	bl	8014460 <_malloc_usable_size_r>
 8014410:	4284      	cmp	r4, r0
 8014412:	4607      	mov	r7, r0
 8014414:	d802      	bhi.n	801441c <_realloc_r+0x34>
 8014416:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801441a:	d812      	bhi.n	8014442 <_realloc_r+0x5a>
 801441c:	4621      	mov	r1, r4
 801441e:	4640      	mov	r0, r8
 8014420:	f7fd f8ae 	bl	8011580 <_malloc_r>
 8014424:	4605      	mov	r5, r0
 8014426:	2800      	cmp	r0, #0
 8014428:	d0ed      	beq.n	8014406 <_realloc_r+0x1e>
 801442a:	42bc      	cmp	r4, r7
 801442c:	4622      	mov	r2, r4
 801442e:	4631      	mov	r1, r6
 8014430:	bf28      	it	cs
 8014432:	463a      	movcs	r2, r7
 8014434:	f7fd f822 	bl	801147c <memcpy>
 8014438:	4631      	mov	r1, r6
 801443a:	4640      	mov	r0, r8
 801443c:	f7fd f834 	bl	80114a8 <_free_r>
 8014440:	e7e1      	b.n	8014406 <_realloc_r+0x1e>
 8014442:	4635      	mov	r5, r6
 8014444:	e7df      	b.n	8014406 <_realloc_r+0x1e>

08014446 <__ascii_wctomb>:
 8014446:	b149      	cbz	r1, 801445c <__ascii_wctomb+0x16>
 8014448:	2aff      	cmp	r2, #255	; 0xff
 801444a:	bf85      	ittet	hi
 801444c:	238a      	movhi	r3, #138	; 0x8a
 801444e:	6003      	strhi	r3, [r0, #0]
 8014450:	700a      	strbls	r2, [r1, #0]
 8014452:	f04f 30ff 	movhi.w	r0, #4294967295
 8014456:	bf98      	it	ls
 8014458:	2001      	movls	r0, #1
 801445a:	4770      	bx	lr
 801445c:	4608      	mov	r0, r1
 801445e:	4770      	bx	lr

08014460 <_malloc_usable_size_r>:
 8014460:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014464:	1f18      	subs	r0, r3, #4
 8014466:	2b00      	cmp	r3, #0
 8014468:	bfbc      	itt	lt
 801446a:	580b      	ldrlt	r3, [r1, r0]
 801446c:	18c0      	addlt	r0, r0, r3
 801446e:	4770      	bx	lr

08014470 <_init>:
 8014470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014472:	bf00      	nop
 8014474:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014476:	bc08      	pop	{r3}
 8014478:	469e      	mov	lr, r3
 801447a:	4770      	bx	lr

0801447c <_fini>:
 801447c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801447e:	bf00      	nop
 8014480:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014482:	bc08      	pop	{r3}
 8014484:	469e      	mov	lr, r3
 8014486:	4770      	bx	lr
